{
    "name": "okta",
    "description": "A Pulumi package for creating and managing okta resources.",
    "keywords": [
        "pulumi",
        "okta"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`okta` Terraform Provider](https://github.com/okta/terraform-provider-okta).",
    "repository": "https://github.com/pulumi/pulumi-okta",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "app": "App",
                "auth": "Auth",
                "factor": "Factor",
                "group": "Group",
                "idp": "Idp",
                "index": "Index",
                "inline": "Inline",
                "network": "Network",
                "okta": "Okta",
                "policy": "Policy",
                "profile": "Profile",
                "trustedorigin": "TrustedOrigin",
                "user": "User"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-okta/sdk/v4/go/okta",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing okta resources.. Based on terraform-provider-okta: version v4.6.2",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/okta/terraform-provider-okta)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-okta` repo](https://github.com/pulumi/pulumi-okta/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-okta` repo](https://github.com/okta/terraform-provider-okta/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/okta/terraform-provider-okta)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-okta` repo](https://github.com/pulumi/pulumi-okta/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-okta` repo](https://github.com/okta/terraform-provider-okta/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Bearer token granting privileges to Okta API.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "backoff": {
                "type": "boolean",
                "description": "Use exponential back off strategy for rate limits.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The Okta url. (Use 'oktapreview.com' for Okta testing)\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "httpProxy": {
                "type": "string",
                "description": "Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format\n"
            },
            "logLevel": {
                "type": "integer",
                "description": "providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)\n"
            },
            "maxApiCapacity": {
                "type": "integer",
                "description": "(Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls\nto the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:\nhttps://developer.okta.com/docs/reference/rl-global-mgmt/\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "maximum number of retries to attempt before erroring out.\n"
            },
            "maxWaitSeconds": {
                "type": "integer",
                "description": "maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "minWaitSeconds": {
                "type": "integer",
                "description": "minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "orgName": {
                "type": "string",
                "description": "The organization to manage in Okta.\n"
            },
            "parallelism": {
                "type": "integer",
                "description": "Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of\nhttps://developer.okta.com/docs/api/getting_started/rate-limits.\n"
            },
            "privateKey": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "privateKeyId": {
                "type": "string",
                "description": "API Token Id granting privileges to Okta API.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum\nvalue can be `300`.\n"
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "API Token granting privileges to Okta API.\n"
            }
        }
    },
    "types": {
        "okta:Index/EmailDomainDnsValidationRecord:EmailDomainDnsValidationRecord": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "deprecationMessage": "This field has been removed in the newest go sdk version and has become noop"
                },
                "fqdn": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiration",
                        "fqdn",
                        "recordType",
                        "value"
                    ]
                }
            }
        },
        "okta:Index/getDomainDnsRecord:getDomainDnsRecord": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "expiration",
                "fqdn",
                "recordType",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:Index/getOrgMetadataDomains:getOrgMetadataDomains": {
            "properties": {
                "alternate": {
                    "type": "string",
                    "description": "Custom Domain Org URI\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Standard Org URI\n"
                }
            },
            "type": "object",
            "required": [
                "alternate",
                "organization"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:Index/getOrgMetadataSettings:getOrgMetadataSettings": {
            "properties": {
                "analyticsCollectionEnabled": {
                    "type": "boolean"
                },
                "bugReportingEnabled": {
                    "type": "boolean"
                },
                "omEnabled": {
                    "type": "boolean",
                    "description": "Whether the legacy Okta Mobile application is enabled for the org\n"
                }
            },
            "type": "object",
            "required": [
                "analyticsCollectionEnabled",
                "bugReportingEnabled",
                "omEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:app/OAuthGroupsClaim:OAuthGroupsClaim": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Groups claim filter. Can only be set if type is FILTER.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Issuer mode inherited from OAuth App\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the claim that will be used in the token.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Groups claim type.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "issuerMode",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "okta:app/OAuthJwk:OAuthJwk": {
            "properties": {
                "e": {
                    "type": "string",
                    "description": "RSA Exponent\n"
                },
                "kid": {
                    "type": "string",
                    "description": "Key ID\n"
                },
                "kty": {
                    "type": "string",
                    "description": "Key type\n"
                },
                "n": {
                    "type": "string",
                    "description": "RSA Modulus\n"
                },
                "x": {
                    "type": "string"
                },
                "y": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "kid",
                "kty"
            ]
        },
        "okta:app/SamlAttributeStatement:SamlAttributeStatement": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Type of group attribute filter\n"
                },
                "filterValue": {
                    "type": "string",
                    "description": "Filter value to use\n"
                },
                "name": {
                    "type": "string",
                    "description": "The reference name of the attribute statement\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The name format of the attribute\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of attribute statements object\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "okta:app/SamlKey:SamlKey": {
            "properties": {
                "created": {
                    "type": "string"
                },
                "e": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "kid": {
                    "type": "string"
                },
                "kty": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "n": {
                    "type": "string"
                },
                "use": {
                    "type": "string"
                },
                "x5cs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "x5tS256": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "created",
                        "e",
                        "expiresAt",
                        "kid",
                        "kty",
                        "lastUpdated",
                        "n",
                        "use",
                        "x5cs",
                        "x5tS256"
                    ]
                }
            }
        },
        "okta:app/getSamlAttributeStatement:getSamlAttributeStatement": {
            "properties": {
                "filterType": {
                    "type": "string"
                },
                "filterValue": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "filterValue",
                "name",
                "namespace",
                "type",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:auth/getServerScopesScope:getServerScopesScope": {
            "properties": {
                "consent": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadataPublish": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                },
                "system": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "consent",
                "default",
                "description",
                "displayName",
                "id",
                "metadataPublish",
                "name",
                "optional",
                "system"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/AppGroupAssignmentsGroup:AppGroupAssignmentsGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A group to associate with the application\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of group assignment\n"
                },
                "profile": {
                    "type": "string",
                    "description": "JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "profile"
            ]
        },
        "okta:index/AppSignonPolicyRulePlatformInclude:AppSignonPolicyRulePlatformInclude": {
            "properties": {
                "osExpression": {
                    "type": "string",
                    "description": "Only available with OTHER OS type\n"
                },
                "osType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:index/AppUserSchemaPropertyArrayOneOf:AppUserSchemaPropertyArrayOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/AppUserSchemaPropertyOneOf:AppUserSchemaPropertyOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/DomainDnsRecord:DomainDnsRecord": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiration",
                        "fqdn",
                        "recordType",
                        "values"
                    ]
                }
            }
        },
        "okta:index/EmailSenderDnsRecord:EmailSenderDnsRecord": {
            "properties": {
                "fqdn": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "recordType",
                        "value"
                    ]
                }
            }
        },
        "okta:index/EventHookHeader:EventHookHeader": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:index/GroupSchemaPropertyArrayOneOf:GroupSchemaPropertyArrayOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/GroupSchemaPropertyMasterOverridePriority:GroupSchemaPropertyMasterOverridePriority": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "okta:index/GroupSchemaPropertyOneOf:GroupSchemaPropertyOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/PolicyRuleProfileEnrollmentProfileAttribute:PolicyRuleProfileEnrollmentProfileAttribute": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "A display-friendly label for this property\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of a User Profile property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Indicates if this property is required for enrollment\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "name"
            ]
        },
        "okta:index/TemplateSmsTranslation:TemplateSmsTranslation": {
            "properties": {
                "language": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "language",
                "template"
            ]
        },
        "okta:index/UserSchemaPropertyArrayOneOf:UserSchemaPropertyArrayOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/UserSchemaPropertyMasterOverridePriority:UserSchemaPropertyMasterOverridePriority": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "okta:index/UserSchemaPropertyOneOf:UserSchemaPropertyOneOf": {
            "properties": {
                "const": {
                    "type": "string",
                    "description": "Enum value\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                }
            },
            "type": "object",
            "required": [
                "const",
                "title"
            ]
        },
        "okta:index/getAuthServerClaimsClaim:getAuthServerClaimsClaim": {
            "properties": {
                "alwaysIncludeInToken": {
                    "type": "boolean"
                },
                "claimType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "alwaysIncludeInToken",
                "claimType",
                "id",
                "name",
                "scopes",
                "status",
                "value",
                "valueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getBehavioursBehavior:getBehavioursBehavior": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "settings",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getBrandsBrand:getBrandsBrand": {
            "properties": {
                "customPrivacyPolicyUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "removePoweredByOkta": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "customPrivacyPolicyUrl",
                "id",
                "links",
                "name",
                "removePoweredByOkta"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getEmailCustomizationsEmailCustomization:getEmailCustomizationsEmailCustomization": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "links": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "body",
                "id",
                "isDefault",
                "language",
                "links",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getGroupsGroup:getGroupsGroup": {
            "properties": {
                "customProfileAttributes": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "customProfileAttributes",
                "description",
                "id",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getTemplatesEmailTemplate:getTemplatesEmailTemplate": {
            "properties": {
                "links": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "links",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getThemesTheme:getThemesTheme": {
            "properties": {
                "backgroundImageUrl": {
                    "type": "string"
                },
                "emailTemplateTouchPointVariant": {
                    "type": "string"
                },
                "endUserDashboardTouchPointVariant": {
                    "type": "string"
                },
                "errorPageTouchPointVariant": {
                    "type": "string"
                },
                "faviconUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "primaryColorContrastHex": {
                    "type": "string"
                },
                "primaryColorHex": {
                    "type": "string"
                },
                "secondaryColorContrastHex": {
                    "type": "string"
                },
                "secondaryColorHex": {
                    "type": "string"
                },
                "signInPageTouchPointVariant": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backgroundImageUrl",
                "emailTemplateTouchPointVariant",
                "endUserDashboardTouchPointVariant",
                "errorPageTouchPointVariant",
                "faviconUrl",
                "id",
                "links",
                "logoUrl",
                "primaryColorContrastHex",
                "primaryColorHex",
                "secondaryColorContrastHex",
                "secondaryColorHex",
                "signInPageTouchPointVariant"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getTrustedOriginsTrustedOrigin:getTrustedOriginsTrustedOrigin": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "active",
                "id",
                "name",
                "origin",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:index/getUserSecurityQuestionsQuestion:getUserSecurityQuestionsQuestion": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "text"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "okta:inline/HookHeader:HookHeader": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:policy/RuleIdpDiscoveryAppExclude:RuleIdpDiscoveryAppExclude": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "okta:policy/RuleIdpDiscoveryAppInclude:RuleIdpDiscoveryAppInclude": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "okta:policy/RuleIdpDiscoveryPlatformInclude:RuleIdpDiscoveryPlatformInclude": {
            "properties": {
                "osExpression": {
                    "type": "string",
                    "description": "Only available with OTHER OS type\n"
                },
                "osType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:policy/RuleIdpDiscoveryUserIdentifierPattern:RuleIdpDiscoveryUserIdentifierPattern": {
            "properties": {
                "matchType": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:policy/RuleMfaAppExclude:RuleMfaAppExclude": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "okta:policy/RuleMfaAppInclude:RuleMfaAppInclude": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "okta:policy/RuleSignonFactorSequence:RuleSignonFactorSequence": {
            "properties": {
                "primaryCriteriaFactorType": {
                    "type": "string",
                    "description": "Type of a Factor\n"
                },
                "primaryCriteriaProvider": {
                    "type": "string",
                    "description": "Factor provider\n"
                },
                "secondaryCriterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleSignonFactorSequenceSecondaryCriteria:RuleSignonFactorSequenceSecondaryCriteria"
                    }
                }
            },
            "type": "object",
            "required": [
                "primaryCriteriaFactorType",
                "primaryCriteriaProvider"
            ]
        },
        "okta:policy/RuleSignonFactorSequenceSecondaryCriteria:RuleSignonFactorSequenceSecondaryCriteria": {
            "properties": {
                "factorType": {
                    "type": "string",
                    "description": "Type of a Factor\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Factor provider\n"
                }
            },
            "type": "object",
            "required": [
                "factorType",
                "provider"
            ]
        },
        "okta:profile/MappingMapping:MappingMapping": {
            "properties": {
                "expression": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The mapping property key.\n"
                },
                "pushStatus": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "id"
            ]
        },
        "okta:user/UserPasswordHash:UserPasswordHash": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the hash using the password\n"
                },
                "salt": {
                    "type": "string",
                    "description": "Only required for salted hashes\n"
                },
                "saltOrder": {
                    "type": "string",
                    "description": "Specifies whether salt was pre- or postfixed to the password before hashing\n"
                },
                "value": {
                    "type": "string",
                    "description": "For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.\n"
                },
                "workFactor": {
                    "type": "integer",
                    "description": "Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "value"
            ]
        },
        "okta:user/getUserSearch:getUserSearch": {
            "properties": {
                "comparison": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "description": "A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search\n"
                },
                "name": {
                    "type": "string",
                    "description": "Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:user/getUsersSearch:getUsersSearch": {
            "properties": {
                "comparison": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "description": "A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search\n"
                },
                "name": {
                    "type": "string",
                    "description": "Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "okta:user/getUsersUser:getUsersUser": {
            "properties": {
                "adminRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "city": {
                    "type": "string"
                },
                "costCenter": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "customProfileAttributes": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "division": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "employeeNumber": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "groupMemberships": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "honorificPrefix": {
                    "type": "string"
                },
                "honorificSuffix": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "locale": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "manager": {
                    "type": "string"
                },
                "managerId": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "nickName": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "postalAddress": {
                    "type": "string"
                },
                "preferredLanguage": {
                    "type": "string"
                },
                "primaryPhone": {
                    "type": "string"
                },
                "profileUrl": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secondEmail": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "streetAddress": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adminRoles",
                "city",
                "costCenter",
                "countryCode",
                "customProfileAttributes",
                "department",
                "displayName",
                "division",
                "email",
                "employeeNumber",
                "firstName",
                "groupMemberships",
                "honorificPrefix",
                "honorificSuffix",
                "id",
                "lastName",
                "locale",
                "login",
                "manager",
                "managerId",
                "middleName",
                "mobilePhone",
                "nickName",
                "organization",
                "postalAddress",
                "preferredLanguage",
                "primaryPhone",
                "profileUrl",
                "roles",
                "secondEmail",
                "state",
                "status",
                "streetAddress",
                "timezone",
                "title",
                "userType",
                "zipCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the okta package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "Bearer token granting privileges to Okta API.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "backoff": {
                "type": "boolean",
                "description": "Use exponential back off strategy for rate limits.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The Okta url. (Use 'oktapreview.com' for Okta testing)\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "httpProxy": {
                "type": "string",
                "description": "Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format\n"
            },
            "logLevel": {
                "type": "integer",
                "description": "providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)\n"
            },
            "maxApiCapacity": {
                "type": "integer",
                "description": "(Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls\nto the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:\nhttps://developer.okta.com/docs/reference/rl-global-mgmt/\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "maximum number of retries to attempt before erroring out.\n"
            },
            "maxWaitSeconds": {
                "type": "integer",
                "description": "maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "minWaitSeconds": {
                "type": "integer",
                "description": "minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "orgName": {
                "type": "string",
                "description": "The organization to manage in Okta.\n"
            },
            "parallelism": {
                "type": "integer",
                "description": "Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of\nhttps://developer.okta.com/docs/api/getting_started/rate-limits.\n"
            },
            "privateKey": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "privateKeyId": {
                "type": "string",
                "description": "API Token Id granting privileges to Okta API.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum\nvalue can be `300`.\n"
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "API Token granting privileges to Okta API.\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Bearer token granting privileges to Okta API.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "backoff": {
                "type": "boolean",
                "description": "Use exponential back off strategy for rate limits.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The Okta url. (Use 'oktapreview.com' for Okta testing)\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "httpProxy": {
                "type": "string",
                "description": "Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format\n"
            },
            "logLevel": {
                "type": "integer",
                "description": "providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)\n"
            },
            "maxApiCapacity": {
                "type": "integer",
                "description": "(Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls\nto the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:\nhttps://developer.okta.com/docs/reference/rl-global-mgmt/\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "maximum number of retries to attempt before erroring out.\n"
            },
            "maxWaitSeconds": {
                "type": "integer",
                "description": "maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "minWaitSeconds": {
                "type": "integer",
                "description": "minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.\n"
            },
            "orgName": {
                "type": "string",
                "description": "The organization to manage in Okta.\n"
            },
            "parallelism": {
                "type": "integer",
                "description": "Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of\nhttps://developer.okta.com/docs/api/getting_started/rate-limits.\n"
            },
            "privateKey": {
                "type": "string",
                "description": "API Token granting privileges to Okta API.\n"
            },
            "privateKeyId": {
                "type": "string",
                "description": "API Token Id granting privileges to Okta API.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum\nvalue can be `300`.\n"
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "API Token granting privileges to Okta API.\n"
            }
        }
    },
    "resources": {
        "okta:Index/emailDomain:EmailDomain": {
            "properties": {
                "brandId": {
                    "type": "string",
                    "description": "Brand id\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name\n"
                },
                "dnsValidationRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:Index/EmailDomainDnsValidationRecord:EmailDomainDnsValidationRecord"
                    },
                    "description": "TXT and cname records to be registered for the email Domain\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name\n"
                },
                "validationStatus": {
                    "type": "string",
                    "description": "Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED\n"
                }
            },
            "required": [
                "brandId",
                "displayName",
                "dnsValidationRecords",
                "domain",
                "userName",
                "validationStatus"
            ],
            "inputProperties": {
                "brandId": {
                    "type": "string",
                    "description": "Brand id\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name\n"
                }
            },
            "requiredInputs": [
                "brandId",
                "displayName",
                "domain",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailDomain resources.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand id\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name\n"
                    },
                    "dnsValidationRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:Index/EmailDomainDnsValidationRecord:EmailDomainDnsValidationRecord"
                        },
                        "description": "TXT and cname records to be registered for the email Domain\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain name\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name\n"
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:Index/emailDomainVerification:EmailDomainVerification": {
            "properties": {
                "emailDomainId": {
                    "type": "string",
                    "description": "Email domain ID\n"
                }
            },
            "required": [
                "emailDomainId"
            ],
            "inputProperties": {
                "emailDomainId": {
                    "type": "string",
                    "description": "Email domain ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "emailDomainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailDomainVerification resources.\n",
                "properties": {
                    "emailDomainId": {
                        "type": "string",
                        "description": "Email domain ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:app/accessPolicyAssignment:AccessPolicyAssignment": {
            "description": "Manages assignment of Access Policy to an Application\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID; this value is immutable and can not be updated.\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "The access policy ID.\n"
                }
            },
            "required": [
                "appId",
                "policyId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID; this value is immutable and can not be updated.\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "The access policy ID.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPolicyAssignment resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The application ID; this value is immutable and can not be updated.\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "The access policy ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/autoLogin:AutoLogin": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "signOnRedirectUrl": {
                    "type": "string",
                    "description": "Post login redirect URL\n"
                },
                "signOnUrl": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                }
            },
            "required": [
                "label",
                "logoUrl",
                "name",
                "signOnMode"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "signOnRedirectUrl": {
                    "type": "string",
                    "description": "Post login redirect URL\n"
                },
                "signOnUrl": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutoLogin resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "appSettingsJson": {
                        "type": "string",
                        "description": "Application settings in JSON format\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "credentialsScheme": {
                        "type": "string",
                        "description": "Application credentials scheme\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "preconfiguredApp": {
                        "type": "string",
                        "description": "Preconfigured app name\n"
                    },
                    "revealPassword": {
                        "type": "boolean",
                        "description": "Allow user to reveal password\n"
                    },
                    "sharedPassword": {
                        "type": "string",
                        "description": "Shared password, required for certain schemes.\n"
                    },
                    "sharedUsername": {
                        "type": "string",
                        "description": "Shared username, required for certain schemes.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "signOnRedirectUrl": {
                        "type": "string",
                        "description": "Post login redirect URL\n"
                    },
                    "signOnUrl": {
                        "type": "string",
                        "description": "Login URL\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/basicAuth:BasicAuth": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "authUrl": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login password field\n"
                }
            },
            "required": [
                "authUrl",
                "label",
                "logoUrl",
                "name",
                "signOnMode",
                "url"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "authUrl": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login password field\n"
                }
            },
            "requiredInputs": [
                "authUrl",
                "label",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BasicAuth resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "authUrl": {
                        "type": "string",
                        "description": "Login button field\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Login password field\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/bookmark:Bookmark": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "requestIntegration": {
                    "type": "boolean",
                    "description": "Would you like Okta to add an integration for this app?\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "label",
                "logoUrl",
                "name",
                "signOnMode",
                "url"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "requestIntegration": {
                    "type": "boolean",
                    "description": "Would you like Okta to add an integration for this app?\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "label",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bookmark resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Id of this apps authentication policy\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "requestIntegration": {
                        "type": "boolean",
                        "description": "Would you like Okta to add an integration for this app?\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/groupAssignment:GroupAssignment": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "App to associate group with\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Group associated with the application\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of group assignment.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)\n"
                },
                "retainAssignment": {
                    "type": "boolean",
                    "description": "Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                }
            },
            "required": [
                "appId",
                "groupId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "App to associate group with\n",
                    "willReplaceOnChanges": true
                },
                "groupId": {
                    "type": "string",
                    "description": "Group associated with the application\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of group assignment.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)\n"
                },
                "retainAssignment": {
                    "type": "boolean",
                    "description": "Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupAssignment resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "App to associate group with\n",
                        "willReplaceOnChanges": true
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Group associated with the application\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of group assignment.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)\n"
                    },
                    "retainAssignment": {
                        "type": "boolean",
                        "description": "Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/oAuth:OAuth": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "autoKeyRotation": {
                    "type": "boolean",
                    "description": "Requested key rotation mode.\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "clientBasicSecret": {
                    "type": "string",
                    "description": "OAuth client secret key, this can be set when token*endpoint*auth*method is client*secret_basic.\n",
                    "secret": true
                },
                "clientId": {
                    "type": "string",
                    "description": "OAuth client ID. If set during creation, app is created with this id.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth client secret key. This will be in plain text in your statefile unless you set omit_secret above.\n",
                    "secret": true
                },
                "clientUri": {
                    "type": "string",
                    "description": "URI to a web page providing information about the client.\n"
                },
                "consentMethod": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.\n"
                },
                "groupsClaim": {
                    "$ref": "#/types/okta:app/OAuthGroupsClaim:OAuthGroupsClaim",
                    "description": "Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "implicitAssignment": {
                    "type": "boolean",
                    "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Issuer mode inherited from OAuth App\n"
                },
                "jwks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:app/OAuthJwk:OAuthJwk"
                    }
                },
                "jwksUri": {
                    "type": "string",
                    "description": "URL reference to JWKS\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "loginMode": {
                    "type": "string",
                    "description": "The type of Idp-Initiated login that the client supports, if any\n"
                },
                "loginScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes to use for the request\n"
                },
                "loginUri": {
                    "type": "string",
                    "description": "URI that initiates login.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URI that references a logo for the client.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the claim that will be used in the token.\n"
                },
                "omitSecret": {
                    "type": "boolean",
                    "description": "This tells the provider not to persist the application's secret to state. If this is ever changes from true =\u003e false your app will be recreated.\n"
                },
                "pkceRequired": {
                    "type": "boolean",
                    "description": "Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object\n"
                },
                "policyUri": {
                    "type": "string",
                    "description": "URI to web page providing client policy document.\n"
                },
                "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Custom JSON that represents an OAuth application's profile\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.\n"
                },
                "refreshTokenLeeway": {
                    "type": "integer",
                    "description": "*Early Access Property* Grace period for token rotation\n"
                },
                "refreshTokenRotation": {
                    "type": "string",
                    "description": "*Early Access Property* Refresh token rotation behavior\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OAuth 2.0 response type strings.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Requested authentication method for the token endpoint.\n"
                },
                "tosUri": {
                    "type": "string",
                    "description": "URI to web page providing client tos (terms of service).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Groups claim type.\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "wildcardRedirect": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "label",
                "logoUrl",
                "name",
                "signOnMode",
                "type"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "autoKeyRotation": {
                    "type": "boolean",
                    "description": "Requested key rotation mode.\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "clientBasicSecret": {
                    "type": "string",
                    "description": "OAuth client secret key, this can be set when token*endpoint*auth*method is client*secret_basic.\n",
                    "secret": true
                },
                "clientId": {
                    "type": "string",
                    "description": "OAuth client ID. If set during creation, app is created with this id.\n",
                    "willReplaceOnChanges": true
                },
                "clientUri": {
                    "type": "string",
                    "description": "URI to a web page providing information about the client.\n"
                },
                "consentMethod": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.\n"
                },
                "groupsClaim": {
                    "$ref": "#/types/okta:app/OAuthGroupsClaim:OAuthGroupsClaim",
                    "description": "Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "implicitAssignment": {
                    "type": "boolean",
                    "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Issuer mode inherited from OAuth App\n"
                },
                "jwks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:app/OAuthJwk:OAuthJwk"
                    }
                },
                "jwksUri": {
                    "type": "string",
                    "description": "URL reference to JWKS\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "loginMode": {
                    "type": "string",
                    "description": "The type of Idp-Initiated login that the client supports, if any\n"
                },
                "loginScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scopes to use for the request\n"
                },
                "loginUri": {
                    "type": "string",
                    "description": "URI that initiates login.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URI that references a logo for the client.\n"
                },
                "omitSecret": {
                    "type": "boolean",
                    "description": "This tells the provider not to persist the application's secret to state. If this is ever changes from true =\u003e false your app will be recreated.\n"
                },
                "pkceRequired": {
                    "type": "boolean",
                    "description": "Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object\n"
                },
                "policyUri": {
                    "type": "string",
                    "description": "URI to web page providing client policy document.\n"
                },
                "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Custom JSON that represents an OAuth application's profile\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.\n"
                },
                "refreshTokenLeeway": {
                    "type": "integer",
                    "description": "*Early Access Property* Grace period for token rotation\n"
                },
                "refreshTokenRotation": {
                    "type": "string",
                    "description": "*Early Access Property* Refresh token rotation behavior\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OAuth 2.0 response type strings.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Requested authentication method for the token endpoint.\n"
                },
                "tosUri": {
                    "type": "string",
                    "description": "URI to web page providing client tos (terms of service).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Groups claim type.\n",
                    "willReplaceOnChanges": true
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "wildcardRedirect": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris\n"
                }
            },
            "requiredInputs": [
                "label",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OAuth resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "appSettingsJson": {
                        "type": "string",
                        "description": "Application settings in JSON format\n"
                    },
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Id of this apps authentication policy\n"
                    },
                    "autoKeyRotation": {
                        "type": "boolean",
                        "description": "Requested key rotation mode.\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "clientBasicSecret": {
                        "type": "string",
                        "description": "OAuth client secret key, this can be set when token*endpoint*auth*method is client*secret_basic.\n",
                        "secret": true
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuth client ID. If set during creation, app is created with this id.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth client secret key. This will be in plain text in your statefile unless you set omit_secret above.\n",
                        "secret": true
                    },
                    "clientUri": {
                        "type": "string",
                        "description": "URI to a web page providing information about the client.\n"
                    },
                    "consentMethod": {
                        "type": "string",
                        "description": "*Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.\n"
                    },
                    "groupsClaim": {
                        "$ref": "#/types/okta:app/OAuthGroupsClaim:OAuthGroupsClaim",
                        "description": "Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "implicitAssignment": {
                        "type": "boolean",
                        "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Issuer mode inherited from OAuth App\n"
                    },
                    "jwks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:app/OAuthJwk:OAuthJwk"
                        }
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "URL reference to JWKS\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "loginMode": {
                        "type": "string",
                        "description": "The type of Idp-Initiated login that the client supports, if any\n"
                    },
                    "loginScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scopes to use for the request\n"
                    },
                    "loginUri": {
                        "type": "string",
                        "description": "URI that initiates login.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URI that references a logo for the client.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the claim that will be used in the token.\n"
                    },
                    "omitSecret": {
                        "type": "boolean",
                        "description": "This tells the provider not to persist the application's secret to state. If this is ever changes from true =\u003e false your app will be recreated.\n"
                    },
                    "pkceRequired": {
                        "type": "boolean",
                        "description": "Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object\n"
                    },
                    "policyUri": {
                        "type": "string",
                        "description": "URI to web page providing client policy document.\n"
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Custom JSON that represents an OAuth application's profile\n"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.\n"
                    },
                    "refreshTokenLeeway": {
                        "type": "integer",
                        "description": "*Early Access Property* Grace period for token rotation\n"
                    },
                    "refreshTokenRotation": {
                        "type": "string",
                        "description": "*Early Access Property* Refresh token rotation behavior\n"
                    },
                    "responseTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OAuth 2.0 response type strings.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "Requested authentication method for the token endpoint.\n"
                    },
                    "tosUri": {
                        "type": "string",
                        "description": "URI to web page providing client tos (terms of service).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Groups claim type.\n",
                        "willReplaceOnChanges": true
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "wildcardRedirect": {
                        "type": "string",
                        "description": "*Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/oAuthPostLogoutRedirectUri:OAuthPostLogoutRedirectUri": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "OAuth application ID.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "Post Logout Redirect URI to append to Okta OIDC application.\n"
                }
            },
            "required": [
                "appId",
                "uri"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "OAuth application ID.\n",
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "description": "Post Logout Redirect URI to append to Okta OIDC application.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "uri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OAuthPostLogoutRedirectUri resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "OAuth application ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "Post Logout Redirect URI to append to Okta OIDC application.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/oAuthRedirectUri:OAuthRedirectUri": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "OAuth application ID.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "Redirect URI to append to Okta OIDC application.\n"
                }
            },
            "required": [
                "appId",
                "uri"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "OAuth application ID.\n",
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "description": "Redirect URI to append to Okta OIDC application.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "uri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OAuthRedirectUri resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "OAuth application ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "Redirect URI to append to Okta OIDC application.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/oauthRoleAssignment:OauthRoleAssignment": {
            "description": "Manages assignment of an admin role to an OAuth application.\n\nThis resource allows you to assign an Okta admin role to a OAuth service application. This requires the Okta tenant feature flag for this function to be enabled.\n\n\n## Import\n\nOAuth Role assignment can be imported by passing the Client ID and Role Assignment ID for the specific client role.\n\n```sh\n $ pulumi import okta:app/oauthRoleAssignment:OauthRoleAssignment test \u003cclientID\u003e/\u003croleAssignmentID\u003e`\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client ID for the role to be assigned to\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label of the role assignment\n"
                },
                "resourceSet": {
                    "type": "string",
                    "description": "Resource set for the custom role to assign, must be the ID of the created resource set.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Custom Role ID\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the role assignment\n"
                },
                "type": {
                    "type": "string",
                    "description": "Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.\n"
                }
            },
            "required": [
                "clientId",
                "label",
                "status",
                "type"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "Client ID for the role to be assigned to\n"
                },
                "resourceSet": {
                    "type": "string",
                    "description": "Resource set for the custom role to assign, must be the ID of the created resource set.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Custom Role ID\n"
                },
                "type": {
                    "type": "string",
                    "description": "Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthRoleAssignment resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "Client ID for the role to be assigned to\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the role assignment\n"
                    },
                    "resourceSet": {
                        "type": "string",
                        "description": "Resource set for the custom role to assign, must be the ID of the created resource set.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Custom Role ID\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the role assignment\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/saml:Saml": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "acsEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ACS endpoints for this SAML application\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "assertionSigned": {
                    "type": "boolean",
                    "description": "Determines whether the SAML assertion is digitally signed\n"
                },
                "attributeStatements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:app/SamlAttributeStatement:SamlAttributeStatement"
                    }
                },
                "audience": {
                    "type": "string",
                    "description": "Audience Restriction\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "authnContextClassRef": {
                    "type": "string",
                    "description": "Identifies the SAML authentication context class for the assertion’s authentication statement\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "cert from SAML XML metadata payload\n"
                },
                "defaultRelayState": {
                    "type": "string",
                    "description": "Identifies a specific application resource in an IDP initiated SSO scenario.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Identifies the location where the SAML response is intended to be sent inside of the SAML assertion\n"
                },
                "digestAlgorithm": {
                    "type": "string",
                    "description": "Determines the digest algorithm used to digitally sign the SAML assertion and response\n"
                },
                "embedUrl": {
                    "type": "string",
                    "description": "The url that can be used to embed this application in other portals.\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "entityKey": {
                    "type": "string",
                    "description": "Entity ID, the ID portion of the entity_url\n"
                },
                "entityUrl": {
                    "type": "string",
                    "description": "Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "features to enable\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "honorForceAuthn": {
                    "type": "boolean",
                    "description": "Prompt user to re-authenticate if SP asks for it\n"
                },
                "httpPostBinding": {
                    "type": "string",
                    "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.\n"
                },
                "httpRedirectBinding": {
                    "type": "string",
                    "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.\n"
                },
                "idpIssuer": {
                    "type": "string",
                    "description": "SAML issuer ID\n"
                },
                "implicitAssignment": {
                    "type": "boolean",
                    "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "Saml Inline Hook setting\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Certificate ID\n"
                },
                "keyName": {
                    "type": "string",
                    "description": "Certificate name. This modulates the rotation of keys. New name == new key.\n"
                },
                "keyYearsValid": {
                    "type": "integer",
                    "description": "Number of years the certificate is valid.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:app/SamlKey:SamlKey"
                    },
                    "description": "Application keys\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "SAML xml metadata payload\n"
                },
                "metadataUrl": {
                    "type": "string",
                    "description": "SAML xml metadata URL\n"
                },
                "name": {
                    "type": "string",
                    "description": "The reference name of the attribute statement\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Name of preexisting SAML application. For instance 'slack'\n"
                },
                "recipient": {
                    "type": "string",
                    "description": "The location where the app may present the SAML assertion\n"
                },
                "requestCompressed": {
                    "type": "boolean",
                    "description": "Denotes whether the request is compressed or not.\n"
                },
                "responseSigned": {
                    "type": "boolean",
                    "description": "Determines whether the SAML auth response message is digitally signed\n"
                },
                "samlSignedRequestEnabled": {
                    "type": "boolean",
                    "description": "SAML Signed Request enabled\n"
                },
                "samlVersion": {
                    "type": "string",
                    "description": "SAML version for the app's sign-on mode\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "Signature algorithm used ot digitally sign the assertion and response\n"
                },
                "singleLogoutCertificate": {
                    "type": "string",
                    "description": "x509 encoded certificate that the Service Provider uses to sign Single Logout requests\n"
                },
                "singleLogoutIssuer": {
                    "type": "string",
                    "description": "The issuer of the Service Provider that generates the Single Logout request\n"
                },
                "singleLogoutUrl": {
                    "type": "string",
                    "description": "The location where the logout response is sent\n"
                },
                "spIssuer": {
                    "type": "string",
                    "description": "SAML SP issuer ID\n"
                },
                "ssoUrl": {
                    "type": "string",
                    "description": "Single Sign On URL\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "subjectNameIdFormat": {
                    "type": "string",
                    "description": "Identifies the SAML processing rules.\n"
                },
                "subjectNameIdTemplate": {
                    "type": "string",
                    "description": "Template for app user's username when a user is assigned to the app\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                }
            },
            "required": [
                "certificate",
                "embedUrl",
                "entityKey",
                "entityUrl",
                "features",
                "httpPostBinding",
                "httpRedirectBinding",
                "keyId",
                "keys",
                "label",
                "logoUrl",
                "metadata",
                "metadataUrl",
                "name",
                "signOnMode"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "acsEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ACS endpoints for this SAML application\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "appSettingsJson": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                },
                "assertionSigned": {
                    "type": "boolean",
                    "description": "Determines whether the SAML assertion is digitally signed\n"
                },
                "attributeStatements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:app/SamlAttributeStatement:SamlAttributeStatement"
                    }
                },
                "audience": {
                    "type": "string",
                    "description": "Audience Restriction\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Id of this apps authentication policy\n"
                },
                "authnContextClassRef": {
                    "type": "string",
                    "description": "Identifies the SAML authentication context class for the assertion’s authentication statement\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "defaultRelayState": {
                    "type": "string",
                    "description": "Identifies a specific application resource in an IDP initiated SSO scenario.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Identifies the location where the SAML response is intended to be sent inside of the SAML assertion\n"
                },
                "digestAlgorithm": {
                    "type": "string",
                    "description": "Determines the digest algorithm used to digitally sign the SAML assertion and response\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "honorForceAuthn": {
                    "type": "boolean",
                    "description": "Prompt user to re-authenticate if SP asks for it\n"
                },
                "idpIssuer": {
                    "type": "string",
                    "description": "SAML issuer ID\n"
                },
                "implicitAssignment": {
                    "type": "boolean",
                    "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "Saml Inline Hook setting\n"
                },
                "keyName": {
                    "type": "string",
                    "description": "Certificate name. This modulates the rotation of keys. New name == new key.\n"
                },
                "keyYearsValid": {
                    "type": "integer",
                    "description": "Number of years the certificate is valid.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Name of preexisting SAML application. For instance 'slack'\n",
                    "willReplaceOnChanges": true
                },
                "recipient": {
                    "type": "string",
                    "description": "The location where the app may present the SAML assertion\n"
                },
                "requestCompressed": {
                    "type": "boolean",
                    "description": "Denotes whether the request is compressed or not.\n"
                },
                "responseSigned": {
                    "type": "boolean",
                    "description": "Determines whether the SAML auth response message is digitally signed\n"
                },
                "samlSignedRequestEnabled": {
                    "type": "boolean",
                    "description": "SAML Signed Request enabled\n"
                },
                "samlVersion": {
                    "type": "string",
                    "description": "SAML version for the app's sign-on mode\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "Signature algorithm used ot digitally sign the assertion and response\n"
                },
                "singleLogoutCertificate": {
                    "type": "string",
                    "description": "x509 encoded certificate that the Service Provider uses to sign Single Logout requests\n"
                },
                "singleLogoutIssuer": {
                    "type": "string",
                    "description": "The issuer of the Service Provider that generates the Single Logout request\n"
                },
                "singleLogoutUrl": {
                    "type": "string",
                    "description": "The location where the logout response is sent\n"
                },
                "spIssuer": {
                    "type": "string",
                    "description": "SAML SP issuer ID\n"
                },
                "ssoUrl": {
                    "type": "string",
                    "description": "Single Sign On URL\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "subjectNameIdFormat": {
                    "type": "string",
                    "description": "Identifies the SAML processing rules.\n"
                },
                "subjectNameIdTemplate": {
                    "type": "string",
                    "description": "Template for app user's username when a user is assigned to the app\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Saml resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "acsEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ACS endpoints for this SAML application\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "appSettingsJson": {
                        "type": "string",
                        "description": "Application settings in JSON format\n"
                    },
                    "assertionSigned": {
                        "type": "boolean",
                        "description": "Determines whether the SAML assertion is digitally signed\n"
                    },
                    "attributeStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:app/SamlAttributeStatement:SamlAttributeStatement"
                        }
                    },
                    "audience": {
                        "type": "string",
                        "description": "Audience Restriction\n"
                    },
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Id of this apps authentication policy\n"
                    },
                    "authnContextClassRef": {
                        "type": "string",
                        "description": "Identifies the SAML authentication context class for the assertion’s authentication statement\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "cert from SAML XML metadata payload\n"
                    },
                    "defaultRelayState": {
                        "type": "string",
                        "description": "Identifies a specific application resource in an IDP initiated SSO scenario.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Identifies the location where the SAML response is intended to be sent inside of the SAML assertion\n"
                    },
                    "digestAlgorithm": {
                        "type": "string",
                        "description": "Determines the digest algorithm used to digitally sign the SAML assertion and response\n"
                    },
                    "embedUrl": {
                        "type": "string",
                        "description": "The url that can be used to embed this application in other portals.\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "entityKey": {
                        "type": "string",
                        "description": "Entity ID, the ID portion of the entity_url\n"
                    },
                    "entityUrl": {
                        "type": "string",
                        "description": "Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "features to enable\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "honorForceAuthn": {
                        "type": "boolean",
                        "description": "Prompt user to re-authenticate if SP asks for it\n"
                    },
                    "httpPostBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.\n"
                    },
                    "httpRedirectBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.\n"
                    },
                    "idpIssuer": {
                        "type": "string",
                        "description": "SAML issuer ID\n"
                    },
                    "implicitAssignment": {
                        "type": "boolean",
                        "description": "*Early Access Property*. Enable Federation Broker Mode.\n"
                    },
                    "inlineHookId": {
                        "type": "string",
                        "description": "Saml Inline Hook setting\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "Certificate ID\n"
                    },
                    "keyName": {
                        "type": "string",
                        "description": "Certificate name. This modulates the rotation of keys. New name == new key.\n"
                    },
                    "keyYearsValid": {
                        "type": "integer",
                        "description": "Number of years the certificate is valid.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:app/SamlKey:SamlKey"
                        },
                        "description": "Application keys\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "SAML xml metadata payload\n"
                    },
                    "metadataUrl": {
                        "type": "string",
                        "description": "SAML xml metadata URL\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The reference name of the attribute statement\n"
                    },
                    "preconfiguredApp": {
                        "type": "string",
                        "description": "Name of preexisting SAML application. For instance 'slack'\n",
                        "willReplaceOnChanges": true
                    },
                    "recipient": {
                        "type": "string",
                        "description": "The location where the app may present the SAML assertion\n"
                    },
                    "requestCompressed": {
                        "type": "boolean",
                        "description": "Denotes whether the request is compressed or not.\n"
                    },
                    "responseSigned": {
                        "type": "boolean",
                        "description": "Determines whether the SAML auth response message is digitally signed\n"
                    },
                    "samlSignedRequestEnabled": {
                        "type": "boolean",
                        "description": "SAML Signed Request enabled\n"
                    },
                    "samlVersion": {
                        "type": "string",
                        "description": "SAML version for the app's sign-on mode\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "signatureAlgorithm": {
                        "type": "string",
                        "description": "Signature algorithm used ot digitally sign the assertion and response\n"
                    },
                    "singleLogoutCertificate": {
                        "type": "string",
                        "description": "x509 encoded certificate that the Service Provider uses to sign Single Logout requests\n"
                    },
                    "singleLogoutIssuer": {
                        "type": "string",
                        "description": "The issuer of the Service Provider that generates the Single Logout request\n"
                    },
                    "singleLogoutUrl": {
                        "type": "string",
                        "description": "The location where the logout response is sent\n"
                    },
                    "spIssuer": {
                        "type": "string",
                        "description": "SAML SP issuer ID\n"
                    },
                    "ssoUrl": {
                        "type": "string",
                        "description": "Single Sign On URL\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "subjectNameIdFormat": {
                        "type": "string",
                        "description": "Identifies the SAML processing rules.\n"
                    },
                    "subjectNameIdTemplate": {
                        "type": "string",
                        "description": "Template for app user's username when a user is assigned to the app\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/securePasswordStore:SecurePasswordStore": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "optionalField1": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField1Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "optionalField2": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField2Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "optionalField3": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField3Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "required": [
                "label",
                "logoUrl",
                "name",
                "passwordField",
                "signOnMode",
                "url",
                "usernameField"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "optionalField1": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField1Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "optionalField2": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField2Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "optionalField3": {
                    "type": "string",
                    "description": "Name of optional param in the login form\n"
                },
                "optionalField3Value": {
                    "type": "string",
                    "description": "Name of optional value in login form\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "requiredInputs": [
                "label",
                "passwordField",
                "url",
                "usernameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurePasswordStore resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "credentialsScheme": {
                        "type": "string",
                        "description": "Application credentials scheme\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "optionalField1": {
                        "type": "string",
                        "description": "Name of optional param in the login form\n"
                    },
                    "optionalField1Value": {
                        "type": "string",
                        "description": "Name of optional value in login form\n"
                    },
                    "optionalField2": {
                        "type": "string",
                        "description": "Name of optional param in the login form\n"
                    },
                    "optionalField2Value": {
                        "type": "string",
                        "description": "Name of optional value in login form\n"
                    },
                    "optionalField3": {
                        "type": "string",
                        "description": "Name of optional param in the login form\n"
                    },
                    "optionalField3Value": {
                        "type": "string",
                        "description": "Name of optional value in login form\n"
                    },
                    "passwordField": {
                        "type": "string",
                        "description": "Login password field\n"
                    },
                    "revealPassword": {
                        "type": "boolean",
                        "description": "Allow user to reveal password\n"
                    },
                    "sharedPassword": {
                        "type": "string",
                        "description": "Shared password, required for certain schemes.\n"
                    },
                    "sharedUsername": {
                        "type": "string",
                        "description": "Shared username, required for certain schemes.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Login URL\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "usernameField": {
                        "type": "string",
                        "description": "Login username field\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/swa:Swa": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonField": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "checkbox": {
                    "type": "string",
                    "description": "CSS selector for the checkbox\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "If going to the login page URL redirects to another page, then enter that URL here\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "required": [
                "label",
                "logoUrl",
                "name",
                "signOnMode"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonField": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "checkbox": {
                    "type": "string",
                    "description": "CSS selector for the checkbox\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "If going to the login page URL redirects to another page, then enter that URL here\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Swa resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "buttonField": {
                        "type": "string",
                        "description": "Login button field\n"
                    },
                    "checkbox": {
                        "type": "string",
                        "description": "CSS selector for the checkbox\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "passwordField": {
                        "type": "string",
                        "description": "Login password field\n"
                    },
                    "preconfiguredApp": {
                        "type": "string",
                        "description": "Preconfigured app name\n"
                    },
                    "redirectUrl": {
                        "type": "string",
                        "description": "If going to the login page URL redirects to another page, then enter that URL here\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Login URL\n"
                    },
                    "urlRegex": {
                        "type": "string",
                        "description": "A regex that further restricts URL to the specified regex\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "usernameField": {
                        "type": "string",
                        "description": "Login username field\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/threeField:ThreeField": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonSelector": {
                    "type": "string",
                    "description": "Login button field CSS selector\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "extraFieldSelector": {
                    "type": "string",
                    "description": "Extra field CSS selector\n"
                },
                "extraFieldValue": {
                    "type": "string",
                    "description": "Value for extra form field\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "passwordSelector": {
                    "type": "string",
                    "description": "Login password field CSS selector\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameSelector": {
                    "type": "string",
                    "description": "Login username field CSS selector\n"
                }
            },
            "required": [
                "buttonSelector",
                "extraFieldSelector",
                "extraFieldValue",
                "label",
                "logoUrl",
                "name",
                "passwordSelector",
                "signOnMode",
                "url",
                "usernameSelector"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonSelector": {
                    "type": "string",
                    "description": "Login button field CSS selector\n"
                },
                "credentialsScheme": {
                    "type": "string",
                    "description": "Application credentials scheme\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "extraFieldSelector": {
                    "type": "string",
                    "description": "Extra field CSS selector\n"
                },
                "extraFieldValue": {
                    "type": "string",
                    "description": "Value for extra form field\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "passwordSelector": {
                    "type": "string",
                    "description": "Login password field CSS selector\n"
                },
                "revealPassword": {
                    "type": "boolean",
                    "description": "Allow user to reveal password\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameSelector": {
                    "type": "string",
                    "description": "Login username field CSS selector\n"
                }
            },
            "requiredInputs": [
                "buttonSelector",
                "extraFieldSelector",
                "extraFieldValue",
                "label",
                "passwordSelector",
                "url",
                "usernameSelector"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ThreeField resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "buttonSelector": {
                        "type": "string",
                        "description": "Login button field CSS selector\n"
                    },
                    "credentialsScheme": {
                        "type": "string",
                        "description": "Application credentials scheme\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "extraFieldSelector": {
                        "type": "string",
                        "description": "Extra field CSS selector\n"
                    },
                    "extraFieldValue": {
                        "type": "string",
                        "description": "Value for extra form field\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "passwordSelector": {
                        "type": "string",
                        "description": "Login password field CSS selector\n"
                    },
                    "revealPassword": {
                        "type": "boolean",
                        "description": "Allow user to reveal password\n"
                    },
                    "sharedPassword": {
                        "type": "string",
                        "description": "Shared password, required for certain schemes.\n"
                    },
                    "sharedUsername": {
                        "type": "string",
                        "description": "Shared username, required for certain schemes.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Login URL\n"
                    },
                    "urlRegex": {
                        "type": "string",
                        "description": "A regex that further restricts URL to the specified regex\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "usernameSelector": {
                        "type": "string",
                        "description": "Login username field CSS selector\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:app/user:User": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "App to associate user with\n"
                },
                "hasSharedUsername": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use.\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The JSON profile of the App User.\n"
                },
                "retainAssignment": {
                    "type": "boolean",
                    "description": "Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User associated with the application\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.\n"
                }
            },
            "required": [
                "appId",
                "hasSharedUsername",
                "userId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "App to associate user with\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use.\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The JSON profile of the App User.\n"
                },
                "retainAssignment": {
                    "type": "boolean",
                    "description": "Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User associated with the application\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "App to associate user with\n"
                    },
                    "hasSharedUsername": {
                        "type": "boolean"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to use.\n",
                        "secret": true
                    },
                    "profile": {
                        "type": "string",
                        "description": "The JSON profile of the App User.\n"
                    },
                    "retainAssignment": {
                        "type": "boolean",
                        "description": "Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User associated with the application\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:auth/server:Server": {
            "properties": {
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Currently Okta only supports a single value here\n"
                },
                "credentialsLastRotated": {
                    "type": "string",
                    "description": "The timestamp when the authorization server started to use the `kid` for signing tokens.\n"
                },
                "credentialsNextRotation": {
                    "type": "string",
                    "description": "The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.\n"
                },
                "credentialsRotationMode": {
                    "type": "string",
                    "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the authorization server.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "allows you to use a custom issuer URL\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                },
                "kid": {
                    "type": "string",
                    "description": "The ID of the JSON Web Key used for signing tokens issued by the authorization server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization server.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "audiences",
                "credentialsLastRotated",
                "credentialsNextRotation",
                "issuer",
                "kid",
                "name"
            ],
            "inputProperties": {
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Currently Okta only supports a single value here\n"
                },
                "credentialsRotationMode": {
                    "type": "string",
                    "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the authorization server.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization server.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "audiences"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "audiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Currently Okta only supports a single value here\n"
                    },
                    "credentialsLastRotated": {
                        "type": "string",
                        "description": "The timestamp when the authorization server started to use the `kid` for signing tokens.\n"
                    },
                    "credentialsNextRotation": {
                        "type": "string",
                        "description": "The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.\n"
                    },
                    "credentialsRotationMode": {
                        "type": "string",
                        "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the authorization server.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "allows you to use a custom issuer URL\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                    },
                    "kid": {
                        "type": "string",
                        "description": "The ID of the JSON Web Key used for signing tokens issued by the authorization server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the authorization server.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:auth/serverClaim:ServerClaim": {
            "properties": {
                "alwaysIncludeInToken": {
                    "type": "boolean",
                    "description": "Specifies whether to include claims in token, by default it is set to `true`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "claimType": {
                    "type": "string",
                    "description": "Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.\n"
                },
                "groupFilterType": {
                    "type": "string",
                    "description": "Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server claim name\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Auth server claim list of scopes\n"
                },
                "status": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the claim.\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.\n"
                }
            },
            "required": [
                "authServerId",
                "claimType",
                "name",
                "value"
            ],
            "inputProperties": {
                "alwaysIncludeInToken": {
                    "type": "boolean",
                    "description": "Specifies whether to include claims in token, by default it is set to `true`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "claimType": {
                    "type": "string",
                    "description": "Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.\n"
                },
                "groupFilterType": {
                    "type": "string",
                    "description": "Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server claim name\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Auth server claim list of scopes\n"
                },
                "status": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the claim.\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.\n"
                }
            },
            "requiredInputs": [
                "authServerId",
                "claimType",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerClaim resources.\n",
                "properties": {
                    "alwaysIncludeInToken": {
                        "type": "boolean",
                        "description": "Specifies whether to include claims in token, by default it is set to `true`.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "claimType": {
                        "type": "string",
                        "description": "Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.\n"
                    },
                    "groupFilterType": {
                        "type": "string",
                        "description": "Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Auth server claim name\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Auth server claim list of scopes\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the claim.\n"
                    },
                    "valueType": {
                        "type": "string",
                        "description": "The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:auth/serverPolicy:ServerPolicy": {
            "properties": {
                "authServerId": {
                    "type": "string",
                    "description": "The ID of the Auth Server.\n"
                },
                "clientWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Auth Server Policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Auth Server Policy.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "authServerId",
                "clientWhitelists",
                "description",
                "name",
                "priority"
            ],
            "inputProperties": {
                "authServerId": {
                    "type": "string",
                    "description": "The ID of the Auth Server.\n"
                },
                "clientWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Auth Server Policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Auth Server Policy.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "authServerId",
                "clientWhitelists",
                "description",
                "priority"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerPolicy resources.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "The ID of the Auth Server.\n"
                    },
                    "clientWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Auth Server Policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Auth Server Policy.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the auth server policy\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:auth/serverPolicyClaim:ServerPolicyClaim": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = new okta.auth.ServerPolicyRule(\"example\", {\n    authServerId: \"\u003cauth server id\u003e\",\n    grantTypeWhitelists: [\"implicit\"],\n    groupWhitelists: [\"\u003cgroup ids\u003e\"],\n    policyId: \"\u003cauth server policy id\u003e\",\n    priority: 1,\n    status: \"ACTIVE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.auth.ServerPolicyRule(\"example\",\n    auth_server_id=\"\u003cauth server id\u003e\",\n    grant_type_whitelists=[\"implicit\"],\n    group_whitelists=[\"\u003cgroup ids\u003e\"],\n    policy_id=\"\u003cauth server policy id\u003e\",\n    priority=1,\n    status=\"ACTIVE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Okta.Auth.ServerPolicyRule(\"example\", new()\n    {\n        AuthServerId = \"\u003cauth server id\u003e\",\n        GrantTypeWhitelists = new[]\n        {\n            \"implicit\",\n        },\n        GroupWhitelists = new[]\n        {\n            \"\u003cgroup ids\u003e\",\n        },\n        PolicyId = \"\u003cauth server policy id\u003e\",\n        Priority = 1,\n        Status = \"ACTIVE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth.NewServerPolicyRule(ctx, \"example\", \u0026auth.ServerPolicyRuleArgs{\n\t\t\tAuthServerId: pulumi.String(\"\u003cauth server id\u003e\"),\n\t\t\tGrantTypeWhitelists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"implicit\"),\n\t\t\t},\n\t\t\tGroupWhitelists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cgroup ids\u003e\"),\n\t\t\t},\n\t\t\tPolicyId: pulumi.String(\"\u003cauth server policy id\u003e\"),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tStatus:   pulumi.String(\"ACTIVE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.auth.ServerPolicyRule;\nimport com.pulumi.okta.auth.ServerPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ServerPolicyRule(\"example\", ServerPolicyRuleArgs.builder()        \n            .authServerId(\"\u003cauth server id\u003e\")\n            .grantTypeWhitelists(\"implicit\")\n            .groupWhitelists(\"\u003cgroup ids\u003e\")\n            .policyId(\"\u003cauth server policy id\u003e\")\n            .priority(1)\n            .status(\"ACTIVE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: okta:auth:ServerPolicyRule\n    properties:\n      authServerId: \u003cauth server id\u003e\n      grantTypeWhitelists:\n        - implicit\n      groupWhitelists:\n        - \u003cgroup ids\u003e\n      policyId: \u003cauth server policy id\u003e\n      priority: 1\n      status: ACTIVE\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAuthorization Server Policy Rule can be imported via the Auth Server ID, Policy ID, and Policy Rule ID.\n\n```sh\n $ pulumi import okta:auth/serverPolicyClaim:ServerPolicyClaim example \u0026#60;auth server id\u0026#62;/\u0026#60;policy id\u0026#62;/\u0026#60;policy rule id\u0026#62;\n```\n\n ",
            "properties": {
                "accessTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth Server ID.\n"
                },
                "grantTypeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted grant type values, `\"authorization_code\"`, `\"implicit\"`, `\"password\"`, `\"client_credentials\"`, \n`\"urn:ietf:params:oauth:grant-type:saml2-bearer\"` (*Early Access Property*), `\"urn:ietf:params:oauth:grant-type:token-exchange\"` (*Early Access Property*),\n`\"urn:ietf:params:oauth:grant-type:device_code\"` (*Early Access Property*), `\"interaction_code\"` (*OIE only*). For `\"implicit\"` value either `user_whitelist` or `group_whitelist` should be set.\n"
                },
                "groupBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                },
                "groupWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `\"EVERYONE\"`.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "The ID of the inline token to trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth Server Policy Rule name.\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Auth Server Policy ID.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy rule.\n"
                },
                "refreshTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of refresh token.\n"
                },
                "refreshTokenWindowMinutes": {
                    "type": "integer",
                    "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).\n`\"refresh_token_window_minutes\"` must be between `\"access_token_lifetime_minutes\"` and `\"refresh_token_lifetime_minutes\"`.\n"
                },
                "scopeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `\"*\"`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Auth Server Policy Rule.\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "The rule is the system (default) rule for its associated policy.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Auth Server Policy Rule.\n"
                },
                "userBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be excluded.\n"
                },
                "userWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be included.\n"
                }
            },
            "required": [
                "authServerId",
                "grantTypeWhitelists",
                "name",
                "policyId",
                "priority",
                "system"
            ],
            "inputProperties": {
                "accessTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth Server ID.\n"
                },
                "grantTypeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted grant type values, `\"authorization_code\"`, `\"implicit\"`, `\"password\"`, `\"client_credentials\"`, \n`\"urn:ietf:params:oauth:grant-type:saml2-bearer\"` (*Early Access Property*), `\"urn:ietf:params:oauth:grant-type:token-exchange\"` (*Early Access Property*),\n`\"urn:ietf:params:oauth:grant-type:device_code\"` (*Early Access Property*), `\"interaction_code\"` (*OIE only*). For `\"implicit\"` value either `user_whitelist` or `group_whitelist` should be set.\n"
                },
                "groupBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                },
                "groupWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `\"EVERYONE\"`.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "The ID of the inline token to trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth Server Policy Rule name.\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Auth Server Policy ID.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy rule.\n"
                },
                "refreshTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of refresh token.\n"
                },
                "refreshTokenWindowMinutes": {
                    "type": "integer",
                    "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).\n`\"refresh_token_window_minutes\"` must be between `\"access_token_lifetime_minutes\"` and `\"refresh_token_lifetime_minutes\"`.\n"
                },
                "scopeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `\"*\"`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Auth Server Policy Rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Auth Server Policy Rule.\n"
                },
                "userBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be excluded.\n"
                },
                "userWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be included.\n"
                }
            },
            "requiredInputs": [
                "authServerId",
                "grantTypeWhitelists",
                "policyId",
                "priority"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerPolicyClaim resources.\n",
                "properties": {
                    "accessTokenLifetimeMinutes": {
                        "type": "integer",
                        "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth Server ID.\n"
                    },
                    "grantTypeWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Accepted grant type values, `\"authorization_code\"`, `\"implicit\"`, `\"password\"`, `\"client_credentials\"`, \n`\"urn:ietf:params:oauth:grant-type:saml2-bearer\"` (*Early Access Property*), `\"urn:ietf:params:oauth:grant-type:token-exchange\"` (*Early Access Property*),\n`\"urn:ietf:params:oauth:grant-type:device_code\"` (*Early Access Property*), `\"interaction_code\"` (*OIE only*). For `\"implicit\"` value either `user_whitelist` or `group_whitelist` should be set.\n"
                    },
                    "groupBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                    },
                    "groupWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `\"EVERYONE\"`.\n"
                    },
                    "inlineHookId": {
                        "type": "string",
                        "description": "The ID of the inline token to trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Auth Server Policy Rule name.\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Auth Server Policy ID.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the auth server policy rule.\n"
                    },
                    "refreshTokenLifetimeMinutes": {
                        "type": "integer",
                        "description": "Lifetime of refresh token.\n"
                    },
                    "refreshTokenWindowMinutes": {
                        "type": "integer",
                        "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).\n`\"refresh_token_window_minutes\"` must be between `\"access_token_lifetime_minutes\"` and `\"refresh_token_lifetime_minutes\"`.\n"
                    },
                    "scopeWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `\"*\"`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Auth Server Policy Rule.\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "The rule is the system (default) rule for its associated policy.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Auth Server Policy Rule.\n"
                    },
                    "userBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Users to be excluded.\n"
                    },
                    "userWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Users to be included.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "okta.auth/serverpolicyclaim.ServerPolicyClaim has been deprecated in favor of okta.auth/serverpolicyrule.ServerPolicyRule"
        },
        "okta:auth/serverPolicyRule:ServerPolicyRule": {
            "properties": {
                "accessTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "grantTypeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted grant type values: authorization*code, implicit, password, client*credentials\n"
                },
                "groupBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                },
                "groupWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "The ID of the inline token to trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server policy rule name\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Auth server policy ID\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy rule\n"
                },
                "refreshTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of refresh token.\n"
                },
                "refreshTokenWindowMinutes": {
                    "type": "integer",
                    "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refresh_token_window_minutes` must be between `access_token_lifetime_minutes` and `refresh_token_lifetime_minutes`.\n"
                },
                "scopeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`\n"
                },
                "status": {
                    "type": "string"
                },
                "system": {
                    "type": "boolean",
                    "description": "The rule is the system (default) rule for its associated policy\n"
                },
                "type": {
                    "type": "string",
                    "description": "Auth server policy rule type, unlikely this will be anything other then the default\n"
                },
                "userBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be excluded.\n"
                },
                "userWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be included.\n"
                }
            },
            "required": [
                "authServerId",
                "grantTypeWhitelists",
                "name",
                "policyId",
                "priority",
                "system"
            ],
            "inputProperties": {
                "accessTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "grantTypeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted grant type values: authorization*code, implicit, password, client*credentials\n"
                },
                "groupBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                },
                "groupWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "The ID of the inline token to trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server policy rule name\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Auth server policy ID\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the auth server policy rule\n"
                },
                "refreshTokenLifetimeMinutes": {
                    "type": "integer",
                    "description": "Lifetime of refresh token.\n"
                },
                "refreshTokenWindowMinutes": {
                    "type": "integer",
                    "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refresh_token_window_minutes` must be between `access_token_lifetime_minutes` and `refresh_token_lifetime_minutes`.\n"
                },
                "scopeWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`\n"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Auth server policy rule type, unlikely this will be anything other then the default\n"
                },
                "userBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be excluded.\n"
                },
                "userWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a set of Users to be included.\n"
                }
            },
            "requiredInputs": [
                "authServerId",
                "grantTypeWhitelists",
                "policyId",
                "priority"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerPolicyRule resources.\n",
                "properties": {
                    "accessTokenLifetimeMinutes": {
                        "type": "integer",
                        "description": "Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "grantTypeWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Accepted grant type values: authorization*code, implicit, password, client*credentials\n"
                    },
                    "groupBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Groups whose Users are to be excluded.\n"
                    },
                    "groupWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.\n"
                    },
                    "inlineHookId": {
                        "type": "string",
                        "description": "The ID of the inline token to trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Auth server policy rule name\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Auth server policy ID\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the auth server policy rule\n"
                    },
                    "refreshTokenLifetimeMinutes": {
                        "type": "integer",
                        "description": "Lifetime of refresh token.\n"
                    },
                    "refreshTokenWindowMinutes": {
                        "type": "integer",
                        "description": "Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refresh_token_window_minutes` must be between `access_token_lifetime_minutes` and `refresh_token_lifetime_minutes`.\n"
                    },
                    "scopeWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "The rule is the system (default) rule for its associated policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Auth server policy rule type, unlikely this will be anything other then the default\n"
                    },
                    "userBlacklists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Users to be excluded.\n"
                    },
                    "userWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a set of Users to be included.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "okta:auth/serverPolicyClaim:ServerPolicyClaim"
                }
            ]
        },
        "okta:auth/serverScope:ServerScope": {
            "properties": {
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "consent": {
                    "type": "string",
                    "description": "EA Feature and thus it is simply ignored if the feature is off\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Auth Server Scope.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name of the end user displayed in a consent dialog box\n"
                },
                "metadataPublish": {
                    "type": "string",
                    "description": "Whether to publish metadata or not, matching API type despite the fact it could just be a boolean\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server scope name\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Whether the scope optional\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "Whether Okta created the Scope\n"
                }
            },
            "required": [
                "authServerId",
                "name",
                "system"
            ],
            "inputProperties": {
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "consent": {
                    "type": "string",
                    "description": "EA Feature and thus it is simply ignored if the feature is off\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Auth Server Scope.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name of the end user displayed in a consent dialog box\n"
                },
                "metadataPublish": {
                    "type": "string",
                    "description": "Whether to publish metadata or not, matching API type despite the fact it could just be a boolean\n"
                },
                "name": {
                    "type": "string",
                    "description": "Auth server scope name\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Whether the scope optional\n"
                }
            },
            "requiredInputs": [
                "authServerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerScope resources.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "consent": {
                        "type": "string",
                        "description": "EA Feature and thus it is simply ignored if the feature is off\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Auth Server Scope.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name of the end user displayed in a consent dialog box\n"
                    },
                    "metadataPublish": {
                        "type": "string",
                        "description": "Whether to publish metadata or not, matching API type despite the fact it could just be a boolean\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Auth server scope name\n"
                    },
                    "optional": {
                        "type": "boolean",
                        "description": "Whether the scope optional\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "Whether Okta created the Scope\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:factor/factor:Factor": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Is this provider active?\n"
                },
                "providerId": {
                    "type": "string",
                    "description": "Factor provider ID\n"
                }
            },
            "required": [
                "providerId"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Is this provider active?\n"
                },
                "providerId": {
                    "type": "string",
                    "description": "Factor provider ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "providerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Factor resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Is this provider active?\n"
                    },
                    "providerId": {
                        "type": "string",
                        "description": "Factor provider ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:group/group:Group": {
            "properties": {
                "customProfileAttributes": {
                    "type": "string",
                    "description": "JSON formatted custom attributes for a group. It must be JSON due to various types Okta allows.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Group description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "skipUsers": {
                    "type": "boolean",
                    "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                    "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "customProfileAttributes": {
                    "type": "string",
                    "description": "JSON formatted custom attributes for a group. It must be JSON due to various types Okta allows.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Group description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "skipUsers": {
                    "type": "boolean",
                    "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                    "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "customProfileAttributes": {
                        "type": "string",
                        "description": "JSON formatted custom attributes for a group. It must be JSON due to various types Okta allows.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Group description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name\n"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    }
                },
                "type": "object"
            }
        },
        "okta:group/role:Role": {
            "properties": {
                "disableNotifications": {
                    "type": "boolean",
                    "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of group to attach admin roles to\n"
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of Role to assign\n"
                },
                "targetAppLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of apps ids for the targets of the admin role.\n"
                },
                "targetGroupLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of groups ids for the targets of the admin role.\n"
                }
            },
            "required": [
                "groupId",
                "roleType"
            ],
            "inputProperties": {
                "disableNotifications": {
                    "type": "boolean",
                    "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of group to attach admin roles to\n",
                    "willReplaceOnChanges": true
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of Role to assign\n",
                    "willReplaceOnChanges": true
                },
                "targetAppLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of apps ids for the targets of the admin role.\n"
                },
                "targetGroupLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of groups ids for the targets of the admin role.\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "roleType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "disableNotifications": {
                        "type": "boolean",
                        "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "ID of group to attach admin roles to\n",
                        "willReplaceOnChanges": true
                    },
                    "roleType": {
                        "type": "string",
                        "description": "Type of Role to assign\n",
                        "willReplaceOnChanges": true
                    },
                    "targetAppLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of apps ids for the targets of the admin role.\n"
                    },
                    "targetGroupLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of groups ids for the targets of the admin role.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:group/rule:Rule": {
            "properties": {
                "expressionType": {
                    "type": "string"
                },
                "expressionValue": {
                    "type": "string"
                },
                "groupAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "removeAssignedUsers": {
                    "type": "boolean",
                    "description": "Remove users added by this rule from the assigned group after deleting this resource\n"
                },
                "status": {
                    "type": "string"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of user IDs that would be excluded when rules are processed\n"
                }
            },
            "required": [
                "expressionValue",
                "groupAssignments",
                "name"
            ],
            "inputProperties": {
                "expressionType": {
                    "type": "string"
                },
                "expressionValue": {
                    "type": "string"
                },
                "groupAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string"
                },
                "removeAssignedUsers": {
                    "type": "boolean",
                    "description": "Remove users added by this rule from the assigned group after deleting this resource\n"
                },
                "status": {
                    "type": "string"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of user IDs that would be excluded when rules are processed\n"
                }
            },
            "requiredInputs": [
                "expressionValue",
                "groupAssignments"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "expressionType": {
                        "type": "string"
                    },
                    "expressionValue": {
                        "type": "string"
                    },
                    "groupAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "removeAssignedUsers": {
                        "type": "boolean",
                        "description": "Remove users added by this rule from the assigned group after deleting this resource\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of user IDs that would be excluded when rules are processed\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:idp/oidc:Oidc": {
            "properties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authorizationBinding": {
                    "type": "string"
                },
                "authorizationUrl": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string",
                    "secret": true
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes\n"
                },
                "issuerUrl": {
                    "type": "string"
                },
                "jwksBinding": {
                    "type": "string"
                },
                "jwksUrl": {
                    "type": "string"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "protocolType": {
                    "type": "string"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The HMAC Signature Algorithm used when signing an authorization request\n"
                },
                "requestSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to digitally sign an authorization request to the IdP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "tokenBinding": {
                    "type": "string"
                },
                "tokenUrl": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Type of OIDC IdP.\n"
                },
                "userInfoBinding": {
                    "type": "string"
                },
                "userInfoUrl": {
                    "type": "string"
                },
                "userTypeId": {
                    "type": "string"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "required": [
                "authorizationBinding",
                "authorizationUrl",
                "clientId",
                "clientSecret",
                "issuerUrl",
                "jwksBinding",
                "jwksUrl",
                "name",
                "scopes",
                "tokenBinding",
                "tokenUrl",
                "type",
                "userTypeId"
            ],
            "inputProperties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authorizationBinding": {
                    "type": "string"
                },
                "authorizationUrl": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string",
                    "secret": true
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes\n"
                },
                "issuerUrl": {
                    "type": "string"
                },
                "jwksBinding": {
                    "type": "string"
                },
                "jwksUrl": {
                    "type": "string"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "protocolType": {
                    "type": "string"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The HMAC Signature Algorithm used when signing an authorization request\n"
                },
                "requestSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to digitally sign an authorization request to the IdP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "tokenBinding": {
                    "type": "string"
                },
                "tokenUrl": {
                    "type": "string"
                },
                "userInfoBinding": {
                    "type": "string"
                },
                "userInfoUrl": {
                    "type": "string"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "authorizationBinding",
                "authorizationUrl",
                "clientId",
                "clientSecret",
                "issuerUrl",
                "jwksBinding",
                "jwksUrl",
                "scopes",
                "tokenBinding",
                "tokenUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Oidc resources.\n",
                "properties": {
                    "accountLinkAction": {
                        "type": "string"
                    },
                    "accountLinkGroupIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "authorizationBinding": {
                        "type": "string"
                    },
                    "authorizationUrl": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "deprovisionedAction": {
                        "type": "string"
                    },
                    "groupsAction": {
                        "type": "string"
                    },
                    "groupsAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupsAttribute": {
                        "type": "string"
                    },
                    "groupsFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes\n"
                    },
                    "issuerUrl": {
                        "type": "string"
                    },
                    "jwksBinding": {
                        "type": "string"
                    },
                    "jwksUrl": {
                        "type": "string"
                    },
                    "maxClockSkew": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IdP\n"
                    },
                    "profileMaster": {
                        "type": "boolean"
                    },
                    "protocolType": {
                        "type": "string"
                    },
                    "provisioningAction": {
                        "type": "string"
                    },
                    "requestSignatureAlgorithm": {
                        "type": "string",
                        "description": "The HMAC Signature Algorithm used when signing an authorization request\n"
                    },
                    "requestSignatureScope": {
                        "type": "string",
                        "description": "Specifies whether to digitally sign an authorization request to the IdP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectMatchAttribute": {
                        "type": "string"
                    },
                    "subjectMatchType": {
                        "type": "string"
                    },
                    "suspendedAction": {
                        "type": "string"
                    },
                    "tokenBinding": {
                        "type": "string"
                    },
                    "tokenUrl": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of OIDC IdP.\n"
                    },
                    "userInfoBinding": {
                        "type": "string"
                    },
                    "userInfoUrl": {
                        "type": "string"
                    },
                    "userTypeId": {
                        "type": "string"
                    },
                    "usernameTemplate": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:idp/saml:Saml": {
            "properties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acsBinding": {
                    "type": "string"
                },
                "acsType": {
                    "type": "string"
                },
                "audience": {
                    "type": "string"
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuer": {
                    "type": "string"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                },
                "kid": {
                    "type": "string"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "nameFormat": {
                    "type": "string"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The XML digital Signature Algorithm used when signing an \\n\\n message\n"
                },
                "requestSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to digitally sign \\n\\n messages to the IdP\n"
                },
                "responseSignatureAlgorithm": {
                    "type": "string",
                    "description": "The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element\n"
                },
                "responseSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature\n"
                },
                "ssoBinding": {
                    "type": "string"
                },
                "ssoDestination": {
                    "type": "string"
                },
                "ssoUrl": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subjectFilter": {
                    "type": "string"
                },
                "subjectFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userTypeId": {
                    "type": "string"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "required": [
                "acsBinding",
                "audience",
                "issuer",
                "kid",
                "name",
                "ssoUrl",
                "type",
                "userTypeId"
            ],
            "inputProperties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acsType": {
                    "type": "string"
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuer": {
                    "type": "string"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                },
                "kid": {
                    "type": "string"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "nameFormat": {
                    "type": "string"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The XML digital Signature Algorithm used when signing an \\n\\n message\n"
                },
                "requestSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to digitally sign \\n\\n messages to the IdP\n"
                },
                "responseSignatureAlgorithm": {
                    "type": "string",
                    "description": "The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element\n"
                },
                "responseSignatureScope": {
                    "type": "string",
                    "description": "Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature\n"
                },
                "ssoBinding": {
                    "type": "string"
                },
                "ssoDestination": {
                    "type": "string"
                },
                "ssoUrl": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subjectFilter": {
                    "type": "string"
                },
                "subjectFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "issuer",
                "kid",
                "ssoUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Saml resources.\n",
                "properties": {
                    "accountLinkAction": {
                        "type": "string"
                    },
                    "accountLinkGroupIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "acsBinding": {
                        "type": "string"
                    },
                    "acsType": {
                        "type": "string"
                    },
                    "audience": {
                        "type": "string"
                    },
                    "deprovisionedAction": {
                        "type": "string"
                    },
                    "groupsAction": {
                        "type": "string"
                    },
                    "groupsAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupsAttribute": {
                        "type": "string"
                    },
                    "groupsFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuer": {
                        "type": "string"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                    },
                    "kid": {
                        "type": "string"
                    },
                    "maxClockSkew": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IdP\n"
                    },
                    "nameFormat": {
                        "type": "string"
                    },
                    "profileMaster": {
                        "type": "boolean"
                    },
                    "provisioningAction": {
                        "type": "string"
                    },
                    "requestSignatureAlgorithm": {
                        "type": "string",
                        "description": "The XML digital Signature Algorithm used when signing an \\n\\n message\n"
                    },
                    "requestSignatureScope": {
                        "type": "string",
                        "description": "Specifies whether to digitally sign \\n\\n messages to the IdP\n"
                    },
                    "responseSignatureAlgorithm": {
                        "type": "string",
                        "description": "The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element\n"
                    },
                    "responseSignatureScope": {
                        "type": "string",
                        "description": "Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature\n"
                    },
                    "ssoBinding": {
                        "type": "string"
                    },
                    "ssoDestination": {
                        "type": "string"
                    },
                    "ssoUrl": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectFilter": {
                        "type": "string"
                    },
                    "subjectFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subjectMatchAttribute": {
                        "type": "string"
                    },
                    "subjectMatchType": {
                        "type": "string"
                    },
                    "suspendedAction": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "userTypeId": {
                        "type": "string"
                    },
                    "usernameTemplate": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:idp/samlKey:SamlKey": {
            "properties": {
                "created": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "kid": {
                    "type": "string"
                },
                "kty": {
                    "type": "string"
                },
                "use": {
                    "type": "string"
                },
                "x5cs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "base64-encoded X.509 certificate chain with DER encoding\n"
                },
                "x5tS256": {
                    "type": "string"
                }
            },
            "required": [
                "created",
                "expiresAt",
                "kid",
                "kty",
                "use",
                "x5cs",
                "x5tS256"
            ],
            "inputProperties": {
                "x5cs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "base64-encoded X.509 certificate chain with DER encoding\n"
                }
            },
            "requiredInputs": [
                "x5cs"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SamlKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "kid": {
                        "type": "string"
                    },
                    "kty": {
                        "type": "string"
                    },
                    "use": {
                        "type": "string"
                    },
                    "x5cs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "base64-encoded X.509 certificate chain with DER encoding\n"
                    },
                    "x5tS256": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:idp/social:Social": {
            "properties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appleKid": {
                    "type": "string",
                    "description": "The Key ID that you obtained from Apple when you created the private key for the client\n"
                },
                "applePrivateKey": {
                    "type": "string",
                    "description": "The PKCS #8 encoded private key that you created for the client and downloaded from Apple\n",
                    "secret": true
                },
                "appleTeamId": {
                    "type": "string",
                    "description": "The Team ID associated with your Apple developer account\n"
                },
                "authorizationBinding": {
                    "type": "string"
                },
                "authorizationUrl": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string",
                    "secret": true
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "protocolType": {
                    "type": "string"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "tokenBinding": {
                    "type": "string"
                },
                "tokenUrl": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type\n"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "required": [
                "authorizationBinding",
                "authorizationUrl",
                "name",
                "scopes",
                "tokenBinding",
                "tokenUrl",
                "type"
            ],
            "inputProperties": {
                "accountLinkAction": {
                    "type": "string"
                },
                "accountLinkGroupIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appleKid": {
                    "type": "string",
                    "description": "The Key ID that you obtained from Apple when you created the private key for the client\n"
                },
                "applePrivateKey": {
                    "type": "string",
                    "description": "The PKCS #8 encoded private key that you created for the client and downloaded from Apple\n",
                    "secret": true
                },
                "appleTeamId": {
                    "type": "string",
                    "description": "The Team ID associated with your Apple developer account\n"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string",
                    "secret": true
                },
                "deprovisionedAction": {
                    "type": "string"
                },
                "groupsAction": {
                    "type": "string"
                },
                "groupsAssignments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupsAttribute": {
                    "type": "string"
                },
                "groupsFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuerMode": {
                    "type": "string",
                    "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                },
                "maxClockSkew": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IdP\n"
                },
                "profileMaster": {
                    "type": "boolean"
                },
                "protocolType": {
                    "type": "string"
                },
                "provisioningAction": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "subjectMatchAttribute": {
                    "type": "string"
                },
                "subjectMatchType": {
                    "type": "string"
                },
                "suspendedAction": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type\n"
                },
                "usernameTemplate": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "scopes",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Social resources.\n",
                "properties": {
                    "accountLinkAction": {
                        "type": "string"
                    },
                    "accountLinkGroupIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "appleKid": {
                        "type": "string",
                        "description": "The Key ID that you obtained from Apple when you created the private key for the client\n"
                    },
                    "applePrivateKey": {
                        "type": "string",
                        "description": "The PKCS #8 encoded private key that you created for the client and downloaded from Apple\n",
                        "secret": true
                    },
                    "appleTeamId": {
                        "type": "string",
                        "description": "The Team ID associated with your Apple developer account\n"
                    },
                    "authorizationBinding": {
                        "type": "string"
                    },
                    "authorizationUrl": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "deprovisionedAction": {
                        "type": "string"
                    },
                    "groupsAction": {
                        "type": "string"
                    },
                    "groupsAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupsAttribute": {
                        "type": "string"
                    },
                    "groupsFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL\n"
                    },
                    "maxClockSkew": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IdP\n"
                    },
                    "profileMaster": {
                        "type": "boolean"
                    },
                    "protocolType": {
                        "type": "string"
                    },
                    "provisioningAction": {
                        "type": "string"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectMatchAttribute": {
                        "type": "string"
                    },
                    "subjectMatchType": {
                        "type": "string"
                    },
                    "suspendedAction": {
                        "type": "string"
                    },
                    "tokenBinding": {
                        "type": "string"
                    },
                    "tokenUrl": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type\n"
                    },
                    "usernameTemplate": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/adminRoleCustom:AdminRoleCustom": {
            "description": "Resource to manage administrative Role assignments for a User\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-readable description of the new Role\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name given to the new Role\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The permissions that the new Role grants.\n"
                }
            },
            "required": [
                "description",
                "label"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-readable description of the new Role\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name given to the new Role\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The permissions that the new Role grants.\n"
                }
            },
            "requiredInputs": [
                "description",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminRoleCustom resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-readable description of the new Role\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The name given to the new Role\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The permissions that the new Role grants.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/adminRoleCustomAssignments:AdminRoleCustomAssignments": {
            "description": "Resource to manage the assignment and unassignment of Custom Roles\n",
            "properties": {
                "customRoleId": {
                    "type": "string",
                    "description": "ID of the Custom Role\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hrefs that point to User(s) and/or Group(s) that receive the Role\n"
                },
                "resourceSetId": {
                    "type": "string",
                    "description": "ID of the target Resource Set\n"
                }
            },
            "required": [
                "customRoleId",
                "resourceSetId"
            ],
            "inputProperties": {
                "customRoleId": {
                    "type": "string",
                    "description": "ID of the Custom Role\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hrefs that point to User(s) and/or Group(s) that receive the Role\n"
                },
                "resourceSetId": {
                    "type": "string",
                    "description": "ID of the target Resource Set\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customRoleId",
                "resourceSetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminRoleCustomAssignments resources.\n",
                "properties": {
                    "customRoleId": {
                        "type": "string",
                        "description": "ID of the Custom Role\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The hrefs that point to User(s) and/or Group(s) that receive the Role\n"
                    },
                    "resourceSetId": {
                        "type": "string",
                        "description": "ID of the target Resource Set\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/adminRoleTargets:AdminRoleTargets": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3')\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of a role\n"
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of the role that is assigned to the user and supports optional targets\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User associated with the role\n"
                }
            },
            "required": [
                "roleId",
                "roleType",
                "userId"
            ],
            "inputProperties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3')\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs\n"
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of the role that is assigned to the user and supports optional targets\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "User associated with the role\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleType",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminRoleTargets resources.\n",
                "properties": {
                    "apps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3')\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of group IDs\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "ID of a role\n"
                    },
                    "roleType": {
                        "type": "string",
                        "description": "Type of the role that is assigned to the user and supports optional targets\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "User associated with the role\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appGroupAssignments:AppGroupAssignments": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The ID of the application to assign a group to.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppGroupAssignmentsGroup:AppGroupAssignmentsGroup"
                    },
                    "description": "A group to assign to this application\n"
                }
            },
            "required": [
                "appId",
                "groups"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The ID of the application to assign a group to.\n",
                    "willReplaceOnChanges": true
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppGroupAssignmentsGroup:AppGroupAssignmentsGroup"
                    },
                    "description": "A group to assign to this application\n"
                }
            },
            "requiredInputs": [
                "appId",
                "groups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppGroupAssignments resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The ID of the application to assign a group to.\n",
                        "willReplaceOnChanges": true
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/AppGroupAssignmentsGroup:AppGroupAssignmentsGroup"
                        },
                        "description": "A group to assign to this application\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appOauthApiScope:AppOauthApiScope": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "ID of the application.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer of your Org Authorization Server, your Org URL.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the application for which consent is granted.\n"
                }
            },
            "required": [
                "appId",
                "issuer",
                "scopes"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "ID of the application.\n",
                    "willReplaceOnChanges": true
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer of your Org Authorization Server, your Org URL.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the application for which consent is granted.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "issuer",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppOauthApiScope resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "ID of the application.\n",
                        "willReplaceOnChanges": true
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The issuer of your Org Authorization Server, your Org URL.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Scopes of the application for which consent is granted.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appSamlAppSettings:AppSamlAppSettings": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "Application ID\n"
                },
                "settings": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                }
            },
            "required": [
                "appId",
                "settings"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "Application ID\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "string",
                    "description": "Application settings in JSON format\n"
                }
            },
            "requiredInputs": [
                "appId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppSamlAppSettings resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Application ID\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "type": "string",
                        "description": "Application settings in JSON format\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appSharedCredentials:AppSharedCredentials": {
            "properties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonField": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "checkbox": {
                    "type": "string",
                    "description": "CSS selector for the checkbox\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of the application's logo\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the app.\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "Secondary URL of the sign-in page for this app\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "signOnMode": {
                    "type": "string",
                    "description": "Sign on mode of application.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "required": [
                "label",
                "logoUrl",
                "name",
                "signOnMode"
            ],
            "inputProperties": {
                "accessibilityErrorRedirectUrl": {
                    "type": "string",
                    "description": "Custom error page URL\n"
                },
                "accessibilityLoginRedirectUrl": {
                    "type": "string",
                    "description": "Custom login page URL\n"
                },
                "accessibilitySelfService": {
                    "type": "boolean",
                    "description": "Enable self service\n"
                },
                "adminNote": {
                    "type": "string",
                    "description": "Application notes for admins.\n"
                },
                "appLinksJson": {
                    "type": "string",
                    "description": "Displays specific appLinks for the app\n"
                },
                "autoSubmitToolbar": {
                    "type": "boolean",
                    "description": "Display auto submit toolbar\n"
                },
                "buttonField": {
                    "type": "string",
                    "description": "Login button field\n"
                },
                "checkbox": {
                    "type": "string",
                    "description": "CSS selector for the checkbox\n"
                },
                "enduserNote": {
                    "type": "string",
                    "description": "Application notes for end users.\n"
                },
                "hideIos": {
                    "type": "boolean",
                    "description": "Do not display application icon on mobile app\n"
                },
                "hideWeb": {
                    "type": "boolean",
                    "description": "Do not display application icon to users\n"
                },
                "label": {
                    "type": "string",
                    "description": "Pretty name of app.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the application.\n"
                },
                "passwordField": {
                    "type": "string",
                    "description": "Login password field\n"
                },
                "preconfiguredApp": {
                    "type": "string",
                    "description": "Preconfigured app name\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "Secondary URL of the sign-in page for this app\n"
                },
                "sharedPassword": {
                    "type": "string",
                    "description": "Shared password, required for certain schemes.\n"
                },
                "sharedUsername": {
                    "type": "string",
                    "description": "Shared username, required for certain schemes.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of application.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Login URL\n"
                },
                "urlRegex": {
                    "type": "string",
                    "description": "A regex that further restricts URL to the specified regex\n"
                },
                "userNameTemplate": {
                    "type": "string",
                    "description": "Username template\n"
                },
                "userNameTemplatePushStatus": {
                    "type": "string",
                    "description": "Push username on update\n"
                },
                "userNameTemplateSuffix": {
                    "type": "string",
                    "description": "Username template suffix\n"
                },
                "userNameTemplateType": {
                    "type": "string",
                    "description": "Username template type\n"
                },
                "usernameField": {
                    "type": "string",
                    "description": "Login username field\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppSharedCredentials resources.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "adminNote": {
                        "type": "string",
                        "description": "Application notes for admins.\n"
                    },
                    "appLinksJson": {
                        "type": "string",
                        "description": "Displays specific appLinks for the app\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "buttonField": {
                        "type": "string",
                        "description": "Login button field\n"
                    },
                    "checkbox": {
                        "type": "string",
                        "description": "CSS selector for the checkbox\n"
                    },
                    "enduserNote": {
                        "type": "string",
                        "description": "Application notes for end users.\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Pretty name of app.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the application.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of the application's logo\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the app.\n"
                    },
                    "passwordField": {
                        "type": "string",
                        "description": "Login password field\n"
                    },
                    "preconfiguredApp": {
                        "type": "string",
                        "description": "Preconfigured app name\n"
                    },
                    "redirectUrl": {
                        "type": "string",
                        "description": "Secondary URL of the sign-in page for this app\n"
                    },
                    "sharedPassword": {
                        "type": "string",
                        "description": "Shared password, required for certain schemes.\n"
                    },
                    "sharedUsername": {
                        "type": "string",
                        "description": "Shared username, required for certain schemes.\n"
                    },
                    "signOnMode": {
                        "type": "string",
                        "description": "Sign on mode of application.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Login URL\n"
                    },
                    "urlRegex": {
                        "type": "string",
                        "description": "A regex that further restricts URL to the specified regex\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "usernameField": {
                        "type": "string",
                        "description": "Login username field\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appSignonPolicy:AppSignonPolicy": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppSignonPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Policy Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Name\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appSignonPolicyRule:AppSignonPolicyRule": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class\n"
                },
                "customExpression": {
                    "type": "string",
                    "description": "This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.\n"
                },
                "deviceAssurancesIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device assurance IDs to include\n"
                },
                "deviceIsManaged": {
                    "type": "boolean",
                    "description": "If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.\n"
                },
                "deviceIsRegistered": {
                    "type": "boolean",
                    "description": "If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.\n"
                },
                "factorMode": {
                    "type": "string",
                    "description": "The number of factors required to satisfy this assurance level\n"
                },
                "groupsExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs to exclude\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs to include\n"
                },
                "inactivityPeriod": {
                    "type": "string",
                    "description": "The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "platformIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppSignonPolicyRulePlatformInclude:AppSignonPolicyRulePlatformInclude"
                    }
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule.\n"
                },
                "reAuthenticationFrequency": {
                    "type": "string",
                    "description": "The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session\n"
                },
                "riskScore": {
                    "type": "string",
                    "description": "The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the rule\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "Often the \"Catch-all Rule\" this rule is the system (default) rule for its associated policy\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Verification Method type\n"
                },
                "userTypesExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User Type IDs to exclude\n"
                },
                "userTypesIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User Type IDs to include\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to exclude\n"
                },
                "usersIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to include\n"
                }
            },
            "required": [
                "name",
                "policyId",
                "riskScore",
                "system"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class\n"
                },
                "customExpression": {
                    "type": "string",
                    "description": "This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.\n"
                },
                "deviceAssurancesIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device assurance IDs to include\n"
                },
                "deviceIsManaged": {
                    "type": "boolean",
                    "description": "If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.\n"
                },
                "deviceIsRegistered": {
                    "type": "boolean",
                    "description": "If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.\n"
                },
                "factorMode": {
                    "type": "string",
                    "description": "The number of factors required to satisfy this assurance level\n"
                },
                "groupsExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs to exclude\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of group IDs to include\n"
                },
                "inactivityPeriod": {
                    "type": "string",
                    "description": "The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "platformIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppSignonPolicyRulePlatformInclude:AppSignonPolicyRulePlatformInclude"
                    }
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule.\n"
                },
                "reAuthenticationFrequency": {
                    "type": "string",
                    "description": "The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session\n"
                },
                "riskScore": {
                    "type": "string",
                    "description": "The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the rule\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Verification Method type\n"
                },
                "userTypesExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User Type IDs to exclude\n"
                },
                "userTypesIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User Type IDs to include\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to exclude\n"
                },
                "usersIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to include\n"
                }
            },
            "requiredInputs": [
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppSignonPolicyRule resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                    },
                    "constraints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class\n"
                    },
                    "customExpression": {
                        "type": "string",
                        "description": "This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.\n"
                    },
                    "deviceAssurancesIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device assurance IDs to include\n"
                    },
                    "deviceIsManaged": {
                        "type": "boolean",
                        "description": "If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.\n"
                    },
                    "deviceIsRegistered": {
                        "type": "boolean",
                        "description": "If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.\n"
                    },
                    "factorMode": {
                        "type": "string",
                        "description": "The number of factors required to satisfy this assurance level\n"
                    },
                    "groupsExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of group IDs to exclude\n"
                    },
                    "groupsIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of group IDs to include\n"
                    },
                    "inactivityPeriod": {
                        "type": "string",
                        "description": "The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Rule Name\n"
                    },
                    "networkConnection": {
                        "type": "string",
                        "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to exclude\n"
                    },
                    "networkIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to include\n"
                    },
                    "platformIncludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/AppSignonPolicyRulePlatformInclude:AppSignonPolicyRulePlatformInclude"
                        }
                    },
                    "policyId": {
                        "type": "string",
                        "description": "ID of the policy\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the rule.\n"
                    },
                    "reAuthenticationFrequency": {
                        "type": "string",
                        "description": "The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session\n"
                    },
                    "riskScore": {
                        "type": "string",
                        "description": "The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the rule\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "Often the \"Catch-all Rule\" this rule is the system (default) rule for its associated policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Verification Method type\n"
                    },
                    "userTypesExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User Type IDs to exclude\n"
                    },
                    "userTypesIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User Type IDs to include\n"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs to exclude\n"
                    },
                    "usersIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs to include\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appUserBaseSchemaProperty:AppUserBaseSchemaProperty": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The Application's ID the user schema property should be assigned to.\n"
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n"
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "Subschema title (display name)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "required": [
                "appId",
                "index",
                "title",
                "type"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The Application's ID the user schema property should be assigned to.\n"
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n",
                    "willReplaceOnChanges": true
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "Subschema title (display name)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                    "willReplaceOnChanges": true
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "requiredInputs": [
                "appId",
                "index",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppUserBaseSchemaProperty resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The Application's ID the user schema property should be assigned to.\n"
                    },
                    "index": {
                        "type": "string",
                        "description": "Subschema unique string identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "master": {
                        "type": "string",
                        "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether the subschema is required\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Subschema title (display name)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                        "willReplaceOnChanges": true
                    },
                    "userType": {
                        "type": "string",
                        "description": "Custom subschema user type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/appUserSchemaProperty:AppUserSchemaProperty": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The Application's ID the user custom schema property should be assigned to.\n"
                },
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppUserSchemaPropertyArrayOneOf:AppUserSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n"
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n"
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n"
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppUserSchemaPropertyOneOf:AppUserSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string",
                    "description": "determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n"
                },
                "union": {
                    "type": "boolean",
                    "description": "Allows to assign attribute's group priority\n"
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "required": [
                "appId",
                "index",
                "title",
                "type"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The Application's ID the user custom schema property should be assigned to.\n"
                },
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppUserSchemaPropertyArrayOneOf:AppUserSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n",
                    "willReplaceOnChanges": true
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n",
                    "willReplaceOnChanges": true
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/AppUserSchemaPropertyOneOf:AppUserSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string",
                    "description": "determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                    "willReplaceOnChanges": true
                },
                "union": {
                    "type": "boolean",
                    "description": "Allows to assign attribute's group priority\n"
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n",
                    "willReplaceOnChanges": true
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "requiredInputs": [
                "appId",
                "index",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppUserSchemaProperty resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The Application's ID the user custom schema property should be assigned to.\n"
                    },
                    "arrayEnums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of a property of type array.\n"
                    },
                    "arrayOneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/AppUserSchemaPropertyArrayOneOf:AppUserSchemaPropertyArrayOneOf"
                        },
                        "description": "array of valid JSON schemas for property type array.\n"
                    },
                    "arrayType": {
                        "type": "string",
                        "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Custom Subschema description\n"
                    },
                    "enums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "externalName": {
                        "type": "string",
                        "description": "Subschema external name\n",
                        "willReplaceOnChanges": true
                    },
                    "externalNamespace": {
                        "type": "string",
                        "description": "Subschema external namespace\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "string",
                        "description": "Subschema unique string identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "master": {
                        "type": "string",
                        "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "Subschema of type string maximum length\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Subschema of type string minimum length\n"
                    },
                    "oneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/AppUserSchemaPropertyOneOf:AppUserSchemaPropertyOneOf"
                        },
                        "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether the subschema is required\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Enum title\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                        "willReplaceOnChanges": true
                    },
                    "union": {
                        "type": "boolean",
                        "description": "Allows to assign attribute's group priority\n"
                    },
                    "unique": {
                        "type": "string",
                        "description": "Subschema unique restriction\n",
                        "willReplaceOnChanges": true
                    },
                    "userType": {
                        "type": "string",
                        "description": "Custom subschema user type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/authServerClaimDefault:AuthServerClaimDefault": {
            "properties": {
                "alwaysIncludeInToken": {
                    "type": "boolean",
                    "description": "Specifies whether to include claims in token.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n"
                },
                "claimType": {
                    "type": "string",
                    "description": "Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Default auth server claim name\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Auth server claim list of scopes\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the claim.\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value of the claim.\n"
                }
            },
            "required": [
                "alwaysIncludeInToken",
                "authServerId",
                "claimType",
                "name",
                "scopes",
                "status",
                "valueType"
            ],
            "inputProperties": {
                "alwaysIncludeInToken": {
                    "type": "boolean",
                    "description": "Specifies whether to include claims in token.\n"
                },
                "authServerId": {
                    "type": "string",
                    "description": "Auth server ID\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Default auth server claim name\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the claim.\n"
                }
            },
            "requiredInputs": [
                "authServerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthServerClaimDefault resources.\n",
                "properties": {
                    "alwaysIncludeInToken": {
                        "type": "boolean",
                        "description": "Specifies whether to include claims in token.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n",
                        "willReplaceOnChanges": true
                    },
                    "claimType": {
                        "type": "string",
                        "description": "Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Default auth server claim name\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Auth server claim list of scopes\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the application.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the claim.\n"
                    },
                    "valueType": {
                        "type": "string",
                        "description": "The type of value of the claim.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/authServerDefault:AuthServerDefault": {
            "properties": {
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Currently Okta only supports a single value here\n"
                },
                "credentialsLastRotated": {
                    "type": "string",
                    "description": "The timestamp when the authorization server started to use the `kid` for signing tokens.\n"
                },
                "credentialsNextRotation": {
                    "type": "string",
                    "description": "The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.\n"
                },
                "credentialsRotationMode": {
                    "type": "string",
                    "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the authorization server.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "allows you to use a custom issuer URL\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                },
                "kid": {
                    "type": "string",
                    "description": "The ID of the JSON Web Key used for signing tokens issued by the authorization server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "credentialsLastRotated",
                "credentialsNextRotation",
                "issuer",
                "kid",
                "name"
            ],
            "inputProperties": {
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Currently Okta only supports a single value here\n"
                },
                "credentialsRotationMode": {
                    "type": "string",
                    "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the authorization server.\n"
                },
                "issuerMode": {
                    "type": "string",
                    "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthServerDefault resources.\n",
                "properties": {
                    "audiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Currently Okta only supports a single value here\n"
                    },
                    "credentialsLastRotated": {
                        "type": "string",
                        "description": "The timestamp when the authorization server started to use the `kid` for signing tokens.\n"
                    },
                    "credentialsNextRotation": {
                        "type": "string",
                        "description": "The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.\n"
                    },
                    "credentialsRotationMode": {
                        "type": "string",
                        "description": "Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the authorization server.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "allows you to use a custom issuer URL\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "*Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL\n"
                    },
                    "kid": {
                        "type": "string",
                        "description": "The ID of the JSON Web Key used for signing tokens issued by the authorization server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/authenticator:Authenticator": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "A human-readable string that identifies the Authenticator\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the Authenticator\n"
                },
                "providerAuthPort": {
                    "type": "integer",
                    "description": "The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured\n"
                },
                "providerHost": {
                    "type": "string",
                    "description": "The Duo Security API hostname\n"
                },
                "providerHostname": {
                    "type": "string",
                    "description": "Server host name or IP address\n"
                },
                "providerInstanceId": {
                    "type": "string",
                    "description": "App Instance ID.\n"
                },
                "providerIntegrationKey": {
                    "type": "string",
                    "description": "The Duo Security integration key\n"
                },
                "providerJson": {
                    "type": "string",
                    "description": "Provider in JSON format\n"
                },
                "providerSecretKey": {
                    "type": "string",
                    "description": "The Duo Security secret key\n"
                },
                "providerSharedSecret": {
                    "type": "string",
                    "description": "An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.\n",
                    "secret": true
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`\n"
                },
                "providerUserNameTemplate": {
                    "type": "string",
                    "description": "Format expected by the provider\n"
                },
                "settings": {
                    "type": "string",
                    "description": "Authenticator settings in JSON format\n"
                },
                "status": {
                    "type": "string",
                    "description": "Authenticator status: ACTIVE or INACTIVE\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Authenticator\n"
                }
            },
            "required": [
                "key",
                "name",
                "providerInstanceId",
                "providerType",
                "type"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "A human-readable string that identifies the Authenticator\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the Authenticator\n"
                },
                "providerAuthPort": {
                    "type": "integer",
                    "description": "The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured\n"
                },
                "providerHost": {
                    "type": "string",
                    "description": "The Duo Security API hostname\n"
                },
                "providerHostname": {
                    "type": "string",
                    "description": "Server host name or IP address\n"
                },
                "providerIntegrationKey": {
                    "type": "string",
                    "description": "The Duo Security integration key\n"
                },
                "providerJson": {
                    "type": "string",
                    "description": "Provider in JSON format\n"
                },
                "providerSecretKey": {
                    "type": "string",
                    "description": "The Duo Security secret key\n"
                },
                "providerSharedSecret": {
                    "type": "string",
                    "description": "An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.\n",
                    "secret": true
                },
                "providerUserNameTemplate": {
                    "type": "string",
                    "description": "Format expected by the provider\n"
                },
                "settings": {
                    "type": "string",
                    "description": "Authenticator settings in JSON format\n"
                },
                "status": {
                    "type": "string",
                    "description": "Authenticator status: ACTIVE or INACTIVE\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Authenticator resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "A human-readable string that identifies the Authenticator\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the Authenticator\n"
                    },
                    "providerAuthPort": {
                        "type": "integer",
                        "description": "The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured\n"
                    },
                    "providerHost": {
                        "type": "string",
                        "description": "The Duo Security API hostname\n"
                    },
                    "providerHostname": {
                        "type": "string",
                        "description": "Server host name or IP address\n"
                    },
                    "providerInstanceId": {
                        "type": "string",
                        "description": "App Instance ID.\n"
                    },
                    "providerIntegrationKey": {
                        "type": "string",
                        "description": "The Duo Security integration key\n"
                    },
                    "providerJson": {
                        "type": "string",
                        "description": "Provider in JSON format\n"
                    },
                    "providerSecretKey": {
                        "type": "string",
                        "description": "The Duo Security secret key\n"
                    },
                    "providerSharedSecret": {
                        "type": "string",
                        "description": "An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.\n",
                        "secret": true
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`\n"
                    },
                    "providerUserNameTemplate": {
                        "type": "string",
                        "description": "Format expected by the provider\n"
                    },
                    "settings": {
                        "type": "string",
                        "description": "Authenticator settings in JSON format\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Authenticator status: ACTIVE or INACTIVE\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Authenticator\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/behaviour:Behaviour": {
            "properties": {
                "locationGranularityType": {
                    "type": "string",
                    "description": "Determines the method and level of detail used to evaluate the behavior.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the behavior\n"
                },
                "numberOfAuthentications": {
                    "type": "integer",
                    "description": "The number of recent authentications used to evaluate the behavior.\n"
                },
                "radiusFromLocation": {
                    "type": "integer",
                    "description": "Radius from location (in kilometers)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Behavior status: ACTIVE or INACTIVE.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Behavior type\n"
                },
                "velocity": {
                    "type": "integer",
                    "description": "Velocity (in kilometers per hour).\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "locationGranularityType": {
                    "type": "string",
                    "description": "Determines the method and level of detail used to evaluate the behavior.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the behavior\n"
                },
                "numberOfAuthentications": {
                    "type": "integer",
                    "description": "The number of recent authentications used to evaluate the behavior.\n"
                },
                "radiusFromLocation": {
                    "type": "integer",
                    "description": "Radius from location (in kilometers)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Behavior status: ACTIVE or INACTIVE.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Behavior type\n",
                    "willReplaceOnChanges": true
                },
                "velocity": {
                    "type": "integer",
                    "description": "Velocity (in kilometers per hour).\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Behaviour resources.\n",
                "properties": {
                    "locationGranularityType": {
                        "type": "string",
                        "description": "Determines the method and level of detail used to evaluate the behavior.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the behavior\n"
                    },
                    "numberOfAuthentications": {
                        "type": "integer",
                        "description": "The number of recent authentications used to evaluate the behavior.\n"
                    },
                    "radiusFromLocation": {
                        "type": "integer",
                        "description": "Radius from location (in kilometers)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Behavior status: ACTIVE or INACTIVE.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Behavior type\n",
                        "willReplaceOnChanges": true
                    },
                    "velocity": {
                        "type": "integer",
                        "description": "Velocity (in kilometers per hour).\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/brand:Brand": {
            "description": "Manages brand\n",
            "properties": {
                "agreeToCustomPrivacyPolicy": {
                    "type": "boolean",
                    "description": "Consent for updating the custom privacy policy URL.\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID - Note: Okta API for brands only reads and updates therefore the okta*brand resource needs to act as a quasi data source. Do this by setting brand*id.\n",
                    "deprecationMessage": "Okta has fully support brand creation, this attribute is a no op and will be removed"
                },
                "customPrivacyPolicyUrl": {
                    "type": "string",
                    "description": "Custom privacy policy URL\n"
                },
                "defaultAppAppInstanceId": {
                    "type": "string",
                    "description": "Default app app instance id\n"
                },
                "defaultAppAppLinkName": {
                    "type": "string",
                    "description": "Default app app link name\n"
                },
                "defaultAppClassicApplicationUri": {
                    "type": "string",
                    "description": "Default app classic application uri\n"
                },
                "emailDomainId": {
                    "type": "string",
                    "description": "Email Domain ID tied to this brand\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is this the default brand\n"
                },
                "links": {
                    "type": "string",
                    "description": "Link relations for this object - JSON HAL - Discoverable resources related to the brand\n"
                },
                "locale": {
                    "type": "string",
                    "description": "The language specified as an IETF BCP 47 language tag\n"
                },
                "name": {
                    "type": "string",
                    "description": "Brand name\n"
                },
                "removePoweredByOkta": {
                    "type": "boolean",
                    "description": "Removes \"Powered by Okta\" from the Okta-hosted sign-in page and \"© 2021 Okta, Inc.\" from the Okta End-User Dashboard\n"
                }
            },
            "required": [
                "agreeToCustomPrivacyPolicy",
                "brandId",
                "emailDomainId",
                "isDefault",
                "links",
                "name",
                "removePoweredByOkta"
            ],
            "inputProperties": {
                "agreeToCustomPrivacyPolicy": {
                    "type": "boolean",
                    "description": "Consent for updating the custom privacy policy URL.\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID - Note: Okta API for brands only reads and updates therefore the okta*brand resource needs to act as a quasi data source. Do this by setting brand*id.\n",
                    "deprecationMessage": "Okta has fully support brand creation, this attribute is a no op and will be removed"
                },
                "customPrivacyPolicyUrl": {
                    "type": "string",
                    "description": "Custom privacy policy URL\n"
                },
                "defaultAppAppInstanceId": {
                    "type": "string",
                    "description": "Default app app instance id\n"
                },
                "defaultAppAppLinkName": {
                    "type": "string",
                    "description": "Default app app link name\n"
                },
                "defaultAppClassicApplicationUri": {
                    "type": "string",
                    "description": "Default app classic application uri\n"
                },
                "locale": {
                    "type": "string",
                    "description": "The language specified as an IETF BCP 47 language tag\n"
                },
                "name": {
                    "type": "string",
                    "description": "Brand name\n"
                },
                "removePoweredByOkta": {
                    "type": "boolean",
                    "description": "Removes \"Powered by Okta\" from the Okta-hosted sign-in page and \"© 2021 Okta, Inc.\" from the Okta End-User Dashboard\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Brand resources.\n",
                "properties": {
                    "agreeToCustomPrivacyPolicy": {
                        "type": "boolean",
                        "description": "Consent for updating the custom privacy policy URL.\n"
                    },
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID - Note: Okta API for brands only reads and updates therefore the okta*brand resource needs to act as a quasi data source. Do this by setting brand*id.\n",
                        "deprecationMessage": "Okta has fully support brand creation, this attribute is a no op and will be removed"
                    },
                    "customPrivacyPolicyUrl": {
                        "type": "string",
                        "description": "Custom privacy policy URL\n"
                    },
                    "defaultAppAppInstanceId": {
                        "type": "string",
                        "description": "Default app app instance id\n"
                    },
                    "defaultAppAppLinkName": {
                        "type": "string",
                        "description": "Default app app link name\n"
                    },
                    "defaultAppClassicApplicationUri": {
                        "type": "string",
                        "description": "Default app classic application uri\n"
                    },
                    "emailDomainId": {
                        "type": "string",
                        "description": "Email Domain ID tied to this brand\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is this the default brand\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the brand\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The language specified as an IETF BCP 47 language tag\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Brand name\n"
                    },
                    "removePoweredByOkta": {
                        "type": "boolean",
                        "description": "Removes \"Powered by Okta\" from the Okta-hosted sign-in page and \"© 2021 Okta, Inc.\" from the Okta End-User Dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/captcha:Captcha": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the CAPTCHA\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token\n",
                    "secret": true
                },
                "siteKey": {
                    "type": "string",
                    "description": "Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page\n"
                },
                "type": {
                    "type": "string",
                    "description": "Captcha type\n"
                }
            },
            "required": [
                "name",
                "secretKey",
                "siteKey",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the CAPTCHA\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token\n",
                    "secret": true
                },
                "siteKey": {
                    "type": "string",
                    "description": "Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page\n"
                },
                "type": {
                    "type": "string",
                    "description": "Captcha type\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretKey",
                "siteKey",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Captcha resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the CAPTCHA\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token\n",
                        "secret": true
                    },
                    "siteKey": {
                        "type": "string",
                        "description": "Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Captcha type\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings": {
            "properties": {
                "captchaId": {
                    "type": "string",
                    "description": "ID of the CAPTCHA\n"
                },
                "enabledFors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of pages that have CAPTCHA enabled\n"
                }
            },
            "inputProperties": {
                "captchaId": {
                    "type": "string",
                    "description": "ID of the CAPTCHA\n"
                },
                "enabledFors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of pages that have CAPTCHA enabled\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CaptchaOrgWideSettings resources.\n",
                "properties": {
                    "captchaId": {
                        "type": "string",
                        "description": "ID of the CAPTCHA\n"
                    },
                    "enabledFors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of pages that have CAPTCHA enabled\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/domain:Domain": {
            "properties": {
                "brandId": {
                    "type": "string",
                    "description": "Brand id of the domain\n"
                },
                "certificateSourceType": {
                    "type": "string",
                    "description": "Optional. Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: MANUAL, OKTA*MANAGED. Warning: Use of OKTA*MANAGED requires a feature flag to be enabled. Default value = MANUAL\n"
                },
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/DomainDnsRecord:DomainDnsRecord"
                    },
                    "description": "TXT and CNAME records to be registered for the Domain\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Domain name\n"
                },
                "validationStatus": {
                    "type": "string",
                    "description": "Status of the domain\n"
                }
            },
            "required": [
                "dnsRecords",
                "name",
                "validationStatus"
            ],
            "inputProperties": {
                "brandId": {
                    "type": "string",
                    "description": "Brand id of the domain\n"
                },
                "certificateSourceType": {
                    "type": "string",
                    "description": "Optional. Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: MANUAL, OKTA*MANAGED. Warning: Use of OKTA*MANAGED requires a feature flag to be enabled. Default value = MANUAL\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Domain name\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand id of the domain\n"
                    },
                    "certificateSourceType": {
                        "type": "string",
                        "description": "Optional. Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: MANUAL, OKTA*MANAGED. Warning: Use of OKTA*MANAGED requires a feature flag to be enabled. Default value = MANUAL\n"
                    },
                    "dnsRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/DomainDnsRecord:DomainDnsRecord"
                        },
                        "description": "TXT and CNAME records to be registered for the Domain\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom Domain name\n",
                        "willReplaceOnChanges": true
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "Status of the domain\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/domainCertificate:DomainCertificate": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "Certificate content\n"
                },
                "certificateChain": {
                    "type": "string",
                    "description": "Certificate chain\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "Domain's ID\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Certificate private key\n"
                },
                "type": {
                    "type": "string",
                    "description": "Certificate type\n"
                }
            },
            "required": [
                "certificate",
                "certificateChain",
                "domainId",
                "privateKey",
                "type"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "description": "Certificate content\n"
                },
                "certificateChain": {
                    "type": "string",
                    "description": "Certificate chain\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "Domain's ID\n",
                    "willReplaceOnChanges": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Certificate private key\n"
                },
                "type": {
                    "type": "string",
                    "description": "Certificate type\n"
                }
            },
            "requiredInputs": [
                "certificate",
                "certificateChain",
                "domainId",
                "privateKey",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "Certificate content\n"
                    },
                    "certificateChain": {
                        "type": "string",
                        "description": "Certificate chain\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain's ID\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Certificate private key\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Certificate type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/domainVerification:DomainVerification": {
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "Domain's ID\n"
                }
            },
            "required": [
                "domainId"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "string",
                    "description": "Domain's ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainVerification resources.\n",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "Domain's ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/emailCustomization:EmailCustomization": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of the customization\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID\n"
                },
                "forceIsDefault": {
                    "type": "string",
                    "description": "Force is_default on the create and delete by deleting all email customizations. Comma separated string with values of 'create' or 'destroy' or both `create,destroy'.\n",
                    "deprecationMessage": "force_is_default is deprecated and now is a no-op in behavior. Rely upon the depends_on meta argument to force dependency of secondary templates to the default template"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether the customization is the default\n"
                },
                "language": {
                    "type": "string",
                    "description": "The language supported by the customization\n"
                },
                "links": {
                    "type": "string",
                    "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the customization\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Template Name\n"
                }
            },
            "required": [
                "brandId",
                "links",
                "templateName"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "The body of the customization\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID\n"
                },
                "forceIsDefault": {
                    "type": "string",
                    "description": "Force is_default on the create and delete by deleting all email customizations. Comma separated string with values of 'create' or 'destroy' or both `create,destroy'.\n",
                    "deprecationMessage": "force_is_default is deprecated and now is a no-op in behavior. Rely upon the depends_on meta argument to force dependency of secondary templates to the default template"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether the customization is the default\n"
                },
                "language": {
                    "type": "string",
                    "description": "The language supported by the customization\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the customization\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Template Name\n"
                }
            },
            "requiredInputs": [
                "brandId",
                "templateName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailCustomization resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the customization\n"
                    },
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "forceIsDefault": {
                        "type": "string",
                        "description": "Force is_default on the create and delete by deleting all email customizations. Comma separated string with values of 'create' or 'destroy' or both `create,destroy'.\n",
                        "deprecationMessage": "force_is_default is deprecated and now is a no-op in behavior. Rely upon the depends_on meta argument to force dependency of secondary templates to the default template"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether the customization is the default\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "The language supported by the customization\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject of the customization\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template Name\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/emailSender:EmailSender": {
            "properties": {
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/EmailSenderDnsRecord:EmailSenderDnsRecord"
                    },
                    "description": "TXT and CNAME records to be registered for the Domain\n"
                },
                "fromAddress": {
                    "type": "string",
                    "description": "Email address to send from\n"
                },
                "fromName": {
                    "type": "string",
                    "description": "Name of sender\n"
                },
                "status": {
                    "type": "string",
                    "description": "Verification status\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Mail domain to send from\n"
                }
            },
            "required": [
                "dnsRecords",
                "fromAddress",
                "fromName",
                "status",
                "subdomain"
            ],
            "inputProperties": {
                "fromAddress": {
                    "type": "string",
                    "description": "Email address to send from\n"
                },
                "fromName": {
                    "type": "string",
                    "description": "Name of sender\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Mail domain to send from\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fromAddress",
                "fromName",
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailSender resources.\n",
                "properties": {
                    "dnsRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/EmailSenderDnsRecord:EmailSenderDnsRecord"
                        },
                        "description": "TXT and CNAME records to be registered for the Domain\n"
                    },
                    "fromAddress": {
                        "type": "string",
                        "description": "Email address to send from\n"
                    },
                    "fromName": {
                        "type": "string",
                        "description": "Name of sender\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Verification status\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "Mail domain to send from\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/emailSenderVerification:EmailSenderVerification": {
            "properties": {
                "senderId": {
                    "type": "string",
                    "description": "Email sender ID\n"
                }
            },
            "required": [
                "senderId"
            ],
            "inputProperties": {
                "senderId": {
                    "type": "string",
                    "description": "Email sender ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "senderId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailSenderVerification resources.\n",
                "properties": {
                    "senderId": {
                        "type": "string",
                        "description": "Email sender ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/eventHook:EventHook": {
            "properties": {
                "auth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Authentication required for event hook request.\n"
                },
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Details of the endpoint the event hook will hit.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/EventHookHeader:EventHookHeader"
                    },
                    "description": "Map of headers to send along in event hook request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The event hook display name.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "channel",
                "events",
                "name"
            ],
            "inputProperties": {
                "auth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Authentication required for event hook request.\n"
                },
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Details of the endpoint the event hook will hit.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/EventHookHeader:EventHookHeader"
                    },
                    "description": "Map of headers to send along in event hook request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The event hook display name.\n"
                },
                "status": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "channel",
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventHook resources.\n",
                "properties": {
                    "auth": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Authentication required for event hook request.\n"
                    },
                    "channel": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Details of the endpoint the event hook will hit.\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/EventHookHeader:EventHookHeader"
                        },
                        "description": "Map of headers to send along in event hook request.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The event hook display name.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/eventHookVerification:EventHookVerification": {
            "properties": {
                "eventHookId": {
                    "type": "string",
                    "description": "Event hook ID\n"
                }
            },
            "required": [
                "eventHookId"
            ],
            "inputProperties": {
                "eventHookId": {
                    "type": "string",
                    "description": "Event hook ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "eventHookId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventHookVerification resources.\n",
                "properties": {
                    "eventHookId": {
                        "type": "string",
                        "description": "Event hook ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/factorTotp:FactorTotp": {
            "properties": {
                "clockDriftInterval": {
                    "type": "integer",
                    "description": "Clock drift interval\n"
                },
                "hmacAlgorithm": {
                    "type": "string",
                    "description": "Hash-based message authentication code algorithm\n"
                },
                "name": {
                    "type": "string",
                    "description": "The TOTP name.\n"
                },
                "otpLength": {
                    "type": "integer",
                    "description": "Length of the password. Default is `6`.\n"
                },
                "sharedSecretEncoding": {
                    "type": "string",
                    "description": "Shared secret encoding\n"
                },
                "timeStep": {
                    "type": "integer",
                    "description": "Time step in seconds\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "clockDriftInterval": {
                    "type": "integer",
                    "description": "Clock drift interval\n",
                    "willReplaceOnChanges": true
                },
                "hmacAlgorithm": {
                    "type": "string",
                    "description": "Hash-based message authentication code algorithm\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The TOTP name.\n"
                },
                "otpLength": {
                    "type": "integer",
                    "description": "Length of the password. Default is `6`.\n",
                    "willReplaceOnChanges": true
                },
                "sharedSecretEncoding": {
                    "type": "string",
                    "description": "Shared secret encoding\n",
                    "willReplaceOnChanges": true
                },
                "timeStep": {
                    "type": "integer",
                    "description": "Time step in seconds\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FactorTotp resources.\n",
                "properties": {
                    "clockDriftInterval": {
                        "type": "integer",
                        "description": "Clock drift interval\n",
                        "willReplaceOnChanges": true
                    },
                    "hmacAlgorithm": {
                        "type": "string",
                        "description": "Hash-based message authentication code algorithm\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The TOTP name.\n"
                    },
                    "otpLength": {
                        "type": "integer",
                        "description": "Length of the password. Default is `6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sharedSecretEncoding": {
                        "type": "string",
                        "description": "Shared secret encoding\n",
                        "willReplaceOnChanges": true
                    },
                    "timeStep": {
                        "type": "integer",
                        "description": "Time step in seconds\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/groupMemberships:GroupMemberships": {
            "description": "Resource to manage a set of group memberships for a specific group.\n",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "ID of a Okta group.\n"
                },
                "trackAllUsers": {
                    "type": "boolean",
                    "description": "The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Okta user IDs which the group should have membership managed for.\n"
                }
            },
            "required": [
                "groupId",
                "users"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "ID of a Okta group.\n",
                    "willReplaceOnChanges": true
                },
                "trackAllUsers": {
                    "type": "boolean",
                    "description": "The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Okta user IDs which the group should have membership managed for.\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "users"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMemberships resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "ID of a Okta group.\n",
                        "willReplaceOnChanges": true
                    },
                    "trackAllUsers": {
                        "type": "boolean",
                        "description": "The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Okta user IDs which the group should have membership managed for.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/groupSchemaProperty:GroupSchemaProperty": {
            "properties": {
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyArrayOneOf:GroupSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n"
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n"
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n"
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "masterOverridePriorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyMasterOverridePriority:GroupSchemaPropertyMasterOverridePriority"
                    }
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyOneOf:GroupSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n"
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n"
                }
            },
            "required": [
                "index",
                "title",
                "type"
            ],
            "inputProperties": {
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyArrayOneOf:GroupSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n",
                    "willReplaceOnChanges": true
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n",
                    "willReplaceOnChanges": true
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "masterOverridePriorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyMasterOverridePriority:GroupSchemaPropertyMasterOverridePriority"
                    }
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/GroupSchemaPropertyOneOf:GroupSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                    "willReplaceOnChanges": true
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "index",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupSchemaProperty resources.\n",
                "properties": {
                    "arrayEnums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of a property of type array.\n"
                    },
                    "arrayOneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/GroupSchemaPropertyArrayOneOf:GroupSchemaPropertyArrayOneOf"
                        },
                        "description": "array of valid JSON schemas for property type array.\n"
                    },
                    "arrayType": {
                        "type": "string",
                        "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Custom Subschema description\n"
                    },
                    "enums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "externalName": {
                        "type": "string",
                        "description": "Subschema external name\n",
                        "willReplaceOnChanges": true
                    },
                    "externalNamespace": {
                        "type": "string",
                        "description": "Subschema external namespace\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "string",
                        "description": "Subschema unique string identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "master": {
                        "type": "string",
                        "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                    },
                    "masterOverridePriorities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/GroupSchemaPropertyMasterOverridePriority:GroupSchemaPropertyMasterOverridePriority"
                        }
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "Subschema of type string maximum length\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Subschema of type string minimum length\n"
                    },
                    "oneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/GroupSchemaPropertyOneOf:GroupSchemaPropertyOneOf"
                        },
                        "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether the subschema is required\n"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "description": "Enum title\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                        "willReplaceOnChanges": true
                    },
                    "unique": {
                        "type": "string",
                        "description": "Subschema unique restriction\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/linkDefinition:LinkDefinition": {
            "properties": {
                "associatedDescription": {
                    "type": "string",
                    "description": "Description of the associated relationship.\n"
                },
                "associatedName": {
                    "type": "string",
                    "description": "API name of the associated link.\n"
                },
                "associatedTitle": {
                    "type": "string",
                    "description": "Display name of the associated link.\n"
                },
                "primaryDescription": {
                    "type": "string",
                    "description": "Description of the primary relationship.\n"
                },
                "primaryName": {
                    "type": "string",
                    "description": "API name of the primary link.\n"
                },
                "primaryTitle": {
                    "type": "string",
                    "description": "Display name of the primary link.\n"
                }
            },
            "required": [
                "associatedDescription",
                "associatedName",
                "associatedTitle",
                "primaryDescription",
                "primaryName",
                "primaryTitle"
            ],
            "inputProperties": {
                "associatedDescription": {
                    "type": "string",
                    "description": "Description of the associated relationship.\n",
                    "willReplaceOnChanges": true
                },
                "associatedName": {
                    "type": "string",
                    "description": "API name of the associated link.\n",
                    "willReplaceOnChanges": true
                },
                "associatedTitle": {
                    "type": "string",
                    "description": "Display name of the associated link.\n",
                    "willReplaceOnChanges": true
                },
                "primaryDescription": {
                    "type": "string",
                    "description": "Description of the primary relationship.\n",
                    "willReplaceOnChanges": true
                },
                "primaryName": {
                    "type": "string",
                    "description": "API name of the primary link.\n",
                    "willReplaceOnChanges": true
                },
                "primaryTitle": {
                    "type": "string",
                    "description": "Display name of the primary link.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "associatedDescription",
                "associatedName",
                "associatedTitle",
                "primaryDescription",
                "primaryName",
                "primaryTitle"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LinkDefinition resources.\n",
                "properties": {
                    "associatedDescription": {
                        "type": "string",
                        "description": "Description of the associated relationship.\n",
                        "willReplaceOnChanges": true
                    },
                    "associatedName": {
                        "type": "string",
                        "description": "API name of the associated link.\n",
                        "willReplaceOnChanges": true
                    },
                    "associatedTitle": {
                        "type": "string",
                        "description": "Display name of the associated link.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryDescription": {
                        "type": "string",
                        "description": "Description of the primary relationship.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryName": {
                        "type": "string",
                        "description": "API name of the primary link.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryTitle": {
                        "type": "string",
                        "description": "Display name of the primary link.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/linkValue:LinkValue": {
            "properties": {
                "associatedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs or login values of the users to be assigned the 'associated' relationship.\n"
                },
                "primaryName": {
                    "type": "string",
                    "description": "Name of the 'primary' relationship being assigned.\n"
                },
                "primaryUserId": {
                    "type": "string",
                    "description": "User ID to be assigned to 'primary' for the 'associated' user in the specified relationship.\n"
                }
            },
            "required": [
                "primaryName",
                "primaryUserId"
            ],
            "inputProperties": {
                "associatedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs or login values of the users to be assigned the 'associated' relationship.\n"
                },
                "primaryName": {
                    "type": "string",
                    "description": "Name of the 'primary' relationship being assigned.\n",
                    "willReplaceOnChanges": true
                },
                "primaryUserId": {
                    "type": "string",
                    "description": "User ID to be assigned to 'primary' for the 'associated' user in the specified relationship.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "primaryName",
                "primaryUserId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LinkValue resources.\n",
                "properties": {
                    "associatedUserIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs or login values of the users to be assigned the 'associated' relationship.\n"
                    },
                    "primaryName": {
                        "type": "string",
                        "description": "Name of the 'primary' relationship being assigned.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryUserId": {
                        "type": "string",
                        "description": "User ID to be assigned to 'primary' for the 'associated' user in the specified relationship.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/orgConfiguration:OrgConfiguration": {
            "properties": {
                "address1": {
                    "type": "string",
                    "description": "Primary address of org\n"
                },
                "address2": {
                    "type": "string",
                    "description": "Secondary address of org\n"
                },
                "billingContactUser": {
                    "type": "string",
                    "description": "User ID representing the billing contact\n"
                },
                "city": {
                    "type": "string",
                    "description": "City of org\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "Name of org\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country of org\n"
                },
                "endUserSupportHelpUrl": {
                    "type": "string",
                    "description": "Support link of org\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration of org\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the org.\n"
                },
                "optOutCommunicationEmails": {
                    "type": "boolean",
                    "description": "Indicates whether the org's users receive Okta Communication emails\n"
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Support help phone of org\n"
                },
                "postalCode": {
                    "type": "string",
                    "description": "Postal code of org\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of org\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain of org\n"
                },
                "supportPhoneNumber": {
                    "type": "string",
                    "description": "Support help phone of org\n"
                },
                "technicalContactUser": {
                    "type": "string",
                    "description": "User ID representing the technical contact\n"
                },
                "website": {
                    "type": "string",
                    "description": "The org's website\n"
                }
            },
            "required": [
                "companyName",
                "expiresAt",
                "subdomain"
            ],
            "inputProperties": {
                "address1": {
                    "type": "string",
                    "description": "Primary address of org\n"
                },
                "address2": {
                    "type": "string",
                    "description": "Secondary address of org\n"
                },
                "billingContactUser": {
                    "type": "string",
                    "description": "User ID representing the billing contact\n"
                },
                "city": {
                    "type": "string",
                    "description": "City of org\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "Name of org\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country of org\n"
                },
                "endUserSupportHelpUrl": {
                    "type": "string",
                    "description": "Support link of org\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Local path to logo of the org.\n"
                },
                "optOutCommunicationEmails": {
                    "type": "boolean",
                    "description": "Indicates whether the org's users receive Okta Communication emails\n"
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Support help phone of org\n"
                },
                "postalCode": {
                    "type": "string",
                    "description": "Postal code of org\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of org\n"
                },
                "supportPhoneNumber": {
                    "type": "string",
                    "description": "Support help phone of org\n"
                },
                "technicalContactUser": {
                    "type": "string",
                    "description": "User ID representing the technical contact\n"
                },
                "website": {
                    "type": "string",
                    "description": "The org's website\n"
                }
            },
            "requiredInputs": [
                "companyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgConfiguration resources.\n",
                "properties": {
                    "address1": {
                        "type": "string",
                        "description": "Primary address of org\n"
                    },
                    "address2": {
                        "type": "string",
                        "description": "Secondary address of org\n"
                    },
                    "billingContactUser": {
                        "type": "string",
                        "description": "User ID representing the billing contact\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "City of org\n"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Name of org\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country of org\n"
                    },
                    "endUserSupportHelpUrl": {
                        "type": "string",
                        "description": "Support link of org\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration of org\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Local path to logo of the org.\n"
                    },
                    "optOutCommunicationEmails": {
                        "type": "boolean",
                        "description": "Indicates whether the org's users receive Okta Communication emails\n"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Support help phone of org\n"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "Postal code of org\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of org\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "Subdomain of org\n"
                    },
                    "supportPhoneNumber": {
                        "type": "string",
                        "description": "Support help phone of org\n"
                    },
                    "technicalContactUser": {
                        "type": "string",
                        "description": "User ID representing the technical contact\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "The org's website\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/orgSupport:OrgSupport": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "description": "Expiration of Okta Support\n"
                },
                "extendBy": {
                    "type": "integer",
                    "description": "Number of days the support should be extended by\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Okta Support\n"
                }
            },
            "required": [
                "expiration",
                "status"
            ],
            "inputProperties": {
                "extendBy": {
                    "type": "integer",
                    "description": "Number of days the support should be extended by\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgSupport resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string",
                        "description": "Expiration of Okta Support\n"
                    },
                    "extendBy": {
                        "type": "integer",
                        "description": "Number of days the support should be extended by\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Okta Support\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/policyMfaDefault:PolicyMfaDefault": {
            "properties": {
                "defaultIncludedGroupId": {
                    "type": "string",
                    "description": "Default group ID (always included)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Default policy description\n"
                },
                "duo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIdp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoU2f": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoWebauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "googleOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hotp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isOie": {
                    "type": "boolean",
                    "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                },
                "name": {
                    "type": "string",
                    "description": "Default policy name\n"
                },
                "oktaCall": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaEmail": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPassword": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPush": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaSms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaVerify": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "onpremMfa": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "phoneNumber": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Default policy priority\n"
                },
                "rsaToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Default policy status\n"
                },
                "symantecVip": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "webauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "yubikeyToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "defaultIncludedGroupId",
                "description",
                "name",
                "priority",
                "status"
            ],
            "inputProperties": {
                "duo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIdp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoU2f": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoWebauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "googleOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hotp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isOie": {
                    "type": "boolean",
                    "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                },
                "oktaCall": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaEmail": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPassword": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPush": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaSms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaVerify": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "onpremMfa": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "phoneNumber": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "rsaToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "symantecVip": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "webauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "yubikeyToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyMfaDefault resources.\n",
                "properties": {
                    "defaultIncludedGroupId": {
                        "type": "string",
                        "description": "Default group ID (always included)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Default policy description\n"
                    },
                    "duo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "externalIdp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fidoU2f": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fidoWebauthn": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "googleOtp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "hotp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "isOie": {
                        "type": "boolean",
                        "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Default policy name\n"
                    },
                    "oktaCall": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaEmail": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaOtp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaPassword": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaPush": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaQuestion": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaSms": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaVerify": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "onpremMfa": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "phoneNumber": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Default policy priority\n"
                    },
                    "rsaToken": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "securityQuestion": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Default policy status\n"
                    },
                    "symantecVip": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "webauthn": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "yubikeyToken": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "okta:index/policyPasswordDefault:PolicyPasswordDefault": {
            "properties": {
                "callRecovery": {
                    "type": "string",
                    "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                },
                "defaultAuthProvider": {
                    "type": "string",
                    "description": "Default Authentication Provider\n"
                },
                "defaultIncludedGroupId": {
                    "type": "string",
                    "description": "Default group ID (always included)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Default policy description\n"
                },
                "emailRecovery": {
                    "type": "string",
                    "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Default policy name\n"
                },
                "passwordAutoUnlockMinutes": {
                    "type": "integer",
                    "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                },
                "passwordDictionaryLookup": {
                    "type": "boolean",
                    "description": "Check Passwords Against Common Password Dictionary.\n"
                },
                "passwordExcludeFirstName": {
                    "type": "boolean",
                    "description": "User firstName attribute must be excluded from the password\n"
                },
                "passwordExcludeLastName": {
                    "type": "boolean",
                    "description": "User lastName attribute must be excluded from the password\n"
                },
                "passwordExcludeUsername": {
                    "type": "boolean",
                    "description": "If the user name must be excluded from the password.\n"
                },
                "passwordExpireWarnDays": {
                    "type": "integer",
                    "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                },
                "passwordHistoryCount": {
                    "type": "integer",
                    "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                },
                "passwordLockoutNotificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Notification channels to use to notify a user when their account has been locked.\n"
                },
                "passwordMaxAgeDays": {
                    "type": "integer",
                    "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                },
                "passwordMaxLockoutAttempts": {
                    "type": "integer",
                    "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                },
                "passwordMinAgeMinutes": {
                    "type": "integer",
                    "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                },
                "passwordMinLength": {
                    "type": "integer",
                    "description": "Minimum password length.\n"
                },
                "passwordMinLowercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinNumber": {
                    "type": "integer",
                    "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinSymbol": {
                    "type": "integer",
                    "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinUppercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordShowLockoutFailures": {
                    "type": "boolean",
                    "description": "If a user should be informed when their account is locked.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Default policy priority\n"
                },
                "questionMinLength": {
                    "type": "integer",
                    "description": "Min length of the password recovery question answer.\n"
                },
                "questionRecovery": {
                    "type": "string",
                    "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                },
                "recoveryEmailToken": {
                    "type": "integer",
                    "description": "Lifetime in minutes of the recovery email token.\n"
                },
                "skipUnlock": {
                    "type": "boolean",
                    "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                },
                "smsRecovery": {
                    "type": "string",
                    "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Default policy status\n"
                }
            },
            "required": [
                "defaultAuthProvider",
                "defaultIncludedGroupId",
                "description",
                "name",
                "priority",
                "status"
            ],
            "inputProperties": {
                "callRecovery": {
                    "type": "string",
                    "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                },
                "emailRecovery": {
                    "type": "string",
                    "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                },
                "passwordAutoUnlockMinutes": {
                    "type": "integer",
                    "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                },
                "passwordDictionaryLookup": {
                    "type": "boolean",
                    "description": "Check Passwords Against Common Password Dictionary.\n"
                },
                "passwordExcludeFirstName": {
                    "type": "boolean",
                    "description": "User firstName attribute must be excluded from the password\n"
                },
                "passwordExcludeLastName": {
                    "type": "boolean",
                    "description": "User lastName attribute must be excluded from the password\n"
                },
                "passwordExcludeUsername": {
                    "type": "boolean",
                    "description": "If the user name must be excluded from the password.\n"
                },
                "passwordExpireWarnDays": {
                    "type": "integer",
                    "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                },
                "passwordHistoryCount": {
                    "type": "integer",
                    "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                },
                "passwordLockoutNotificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Notification channels to use to notify a user when their account has been locked.\n"
                },
                "passwordMaxAgeDays": {
                    "type": "integer",
                    "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                },
                "passwordMaxLockoutAttempts": {
                    "type": "integer",
                    "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                },
                "passwordMinAgeMinutes": {
                    "type": "integer",
                    "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                },
                "passwordMinLength": {
                    "type": "integer",
                    "description": "Minimum password length.\n"
                },
                "passwordMinLowercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinNumber": {
                    "type": "integer",
                    "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinSymbol": {
                    "type": "integer",
                    "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinUppercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordShowLockoutFailures": {
                    "type": "boolean",
                    "description": "If a user should be informed when their account is locked.\n"
                },
                "questionMinLength": {
                    "type": "integer",
                    "description": "Min length of the password recovery question answer.\n"
                },
                "questionRecovery": {
                    "type": "string",
                    "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                },
                "recoveryEmailToken": {
                    "type": "integer",
                    "description": "Lifetime in minutes of the recovery email token.\n"
                },
                "skipUnlock": {
                    "type": "boolean",
                    "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                },
                "smsRecovery": {
                    "type": "string",
                    "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyPasswordDefault resources.\n",
                "properties": {
                    "callRecovery": {
                        "type": "string",
                        "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                    },
                    "defaultAuthProvider": {
                        "type": "string",
                        "description": "Default Authentication Provider\n"
                    },
                    "defaultIncludedGroupId": {
                        "type": "string",
                        "description": "Default group ID (always included)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Default policy description\n"
                    },
                    "emailRecovery": {
                        "type": "string",
                        "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Default policy name\n"
                    },
                    "passwordAutoUnlockMinutes": {
                        "type": "integer",
                        "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                    },
                    "passwordDictionaryLookup": {
                        "type": "boolean",
                        "description": "Check Passwords Against Common Password Dictionary.\n"
                    },
                    "passwordExcludeFirstName": {
                        "type": "boolean",
                        "description": "User firstName attribute must be excluded from the password\n"
                    },
                    "passwordExcludeLastName": {
                        "type": "boolean",
                        "description": "User lastName attribute must be excluded from the password\n"
                    },
                    "passwordExcludeUsername": {
                        "type": "boolean",
                        "description": "If the user name must be excluded from the password.\n"
                    },
                    "passwordExpireWarnDays": {
                        "type": "integer",
                        "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                    },
                    "passwordHistoryCount": {
                        "type": "integer",
                        "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                    },
                    "passwordLockoutNotificationChannels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Notification channels to use to notify a user when their account has been locked.\n"
                    },
                    "passwordMaxAgeDays": {
                        "type": "integer",
                        "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                    },
                    "passwordMaxLockoutAttempts": {
                        "type": "integer",
                        "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                    },
                    "passwordMinAgeMinutes": {
                        "type": "integer",
                        "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                    },
                    "passwordMinLength": {
                        "type": "integer",
                        "description": "Minimum password length.\n"
                    },
                    "passwordMinLowercase": {
                        "type": "integer",
                        "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinNumber": {
                        "type": "integer",
                        "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinSymbol": {
                        "type": "integer",
                        "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinUppercase": {
                        "type": "integer",
                        "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordShowLockoutFailures": {
                        "type": "boolean",
                        "description": "If a user should be informed when their account is locked.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Default policy priority\n"
                    },
                    "questionMinLength": {
                        "type": "integer",
                        "description": "Min length of the password recovery question answer.\n"
                    },
                    "questionRecovery": {
                        "type": "string",
                        "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "recoveryEmailToken": {
                        "type": "integer",
                        "description": "Lifetime in minutes of the recovery email token.\n"
                    },
                    "skipUnlock": {
                        "type": "boolean",
                        "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                    },
                    "smsRecovery": {
                        "type": "string",
                        "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Default policy status\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/policyProfileEnrollment:PolicyProfileEnrollment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the policy\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the policy\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the policy\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the policy\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyProfileEnrollment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the policy\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the policy\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/policyProfileEnrollmentApps:PolicyProfileEnrollmentApps": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of app IDs to be added to this policy\n"
                },
                "defaultPolicyId": {
                    "type": "string",
                    "description": "ID of the Default Enrollment Policy. This policy is used as a policy to re-assign apps to when they are unassigned from this one\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the enrollment policy.\n"
                }
            },
            "required": [
                "defaultPolicyId",
                "policyId"
            ],
            "inputProperties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of app IDs to be added to this policy\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the enrollment policy.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyProfileEnrollmentApps resources.\n",
                "properties": {
                    "apps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of app IDs to be added to this policy\n"
                    },
                    "defaultPolicyId": {
                        "type": "string",
                        "description": "ID of the Default Enrollment Policy. This policy is used as a policy to re-assign apps to when they are unassigned from this one\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "ID of the enrollment policy.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                },
                "emailVerification": {
                    "type": "boolean",
                    "description": "Indicates whether email verification should occur before access is granted\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "ID of a Registration Inline Hook\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of a User Profile property\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy\n"
                },
                "profileAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/PolicyRuleProfileEnrollmentProfileAttribute:PolicyRuleProfileEnrollmentProfileAttribute"
                    },
                    "description": "A list of attributes to prompt the user during registration or progressive profiling\n"
                },
                "progressiveProfilingAction": {
                    "type": "string",
                    "description": "Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the rule\n"
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of a Group that this User should be added to\n"
                },
                "uiSchemaId": {
                    "type": "string",
                    "description": "Value created by the backend. If present all policy updates must include this attribute/value.\n"
                },
                "unknownUserAction": {
                    "type": "string",
                    "description": "Which action should be taken if this User is new\n"
                }
            },
            "required": [
                "name",
                "policyId",
                "status",
                "unknownUserAction"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                },
                "emailVerification": {
                    "type": "boolean",
                    "description": "Indicates whether email verification should occur before access is granted\n"
                },
                "inlineHookId": {
                    "type": "string",
                    "description": "ID of a Registration Inline Hook\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the policy\n",
                    "willReplaceOnChanges": true
                },
                "profileAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/PolicyRuleProfileEnrollmentProfileAttribute:PolicyRuleProfileEnrollmentProfileAttribute"
                    },
                    "description": "A list of attributes to prompt the user during registration or progressive profiling\n"
                },
                "progressiveProfilingAction": {
                    "type": "string",
                    "description": "Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED\n"
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of a Group that this User should be added to\n"
                },
                "uiSchemaId": {
                    "type": "string",
                    "description": "Value created by the backend. If present all policy updates must include this attribute/value.\n"
                },
                "unknownUserAction": {
                    "type": "string",
                    "description": "Which action should be taken if this User is new\n"
                }
            },
            "requiredInputs": [
                "policyId",
                "unknownUserAction"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyRuleProfileEnrollment resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "Allow or deny access based on the rule conditions: ALLOW or DENY\n"
                    },
                    "emailVerification": {
                        "type": "boolean",
                        "description": "Indicates whether email verification should occur before access is granted\n"
                    },
                    "inlineHookId": {
                        "type": "string",
                        "description": "ID of a Registration Inline Hook\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of a User Profile property\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "ID of the policy\n",
                        "willReplaceOnChanges": true
                    },
                    "profileAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/PolicyRuleProfileEnrollmentProfileAttribute:PolicyRuleProfileEnrollmentProfileAttribute"
                        },
                        "description": "A list of attributes to prompt the user during registration or progressive profiling\n"
                    },
                    "progressiveProfilingAction": {
                        "type": "string",
                        "description": "Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the rule\n"
                    },
                    "targetGroupId": {
                        "type": "string",
                        "description": "The ID of a Group that this User should be added to\n"
                    },
                    "uiSchemaId": {
                        "type": "string",
                        "description": "Value created by the backend. If present all policy updates must include this attribute/value.\n"
                    },
                    "unknownUserAction": {
                        "type": "string",
                        "description": "Which action should be taken if this User is new\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/rateLimiting:RateLimiting": {
            "properties": {
                "authorize": {
                    "type": "string",
                    "description": "Called during authentication.\n"
                },
                "communicationsEnabled": {
                    "type": "boolean",
                    "description": "Enables rate limit warning, violation, notification emails and banners when this org meets rate limits.\n"
                },
                "login": {
                    "type": "string",
                    "description": "Called when accessing the Okta hosted login page.\n"
                }
            },
            "required": [
                "authorize",
                "login"
            ],
            "inputProperties": {
                "authorize": {
                    "type": "string",
                    "description": "Called during authentication.\n"
                },
                "communicationsEnabled": {
                    "type": "boolean",
                    "description": "Enables rate limit warning, violation, notification emails and banners when this org meets rate limits.\n"
                },
                "login": {
                    "type": "string",
                    "description": "Called when accessing the Okta hosted login page.\n"
                }
            },
            "requiredInputs": [
                "authorize",
                "login"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RateLimiting resources.\n",
                "properties": {
                    "authorize": {
                        "type": "string",
                        "description": "Called during authentication.\n"
                    },
                    "communicationsEnabled": {
                        "type": "boolean",
                        "description": "Enables rate limit warning, violation, notification emails and banners when this org meets rate limits.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "Called when accessing the Okta hosted login page.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/resourceSet:ResourceSet": {
            "description": "Resource to manage administrative Role assignments for a User\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the Resource Set\n"
                },
                "label": {
                    "type": "string",
                    "description": "Unique name given to the Resource Set\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The endpoints that reference the resources to be included in the new Resource Set\n"
                }
            },
            "required": [
                "description",
                "label"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the Resource Set\n"
                },
                "label": {
                    "type": "string",
                    "description": "Unique name given to the Resource Set\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The endpoints that reference the resources to be included in the new Resource Set\n"
                }
            },
            "requiredInputs": [
                "description",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the Resource Set\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Unique name given to the Resource Set\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The endpoints that reference the resources to be included in the new Resource Set\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/roleSubscription:RoleSubscription": {
            "properties": {
                "notificationType": {
                    "type": "string",
                    "description": "Type of the notification\n"
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of the role\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of subscription\n"
                }
            },
            "required": [
                "notificationType",
                "roleType"
            ],
            "inputProperties": {
                "notificationType": {
                    "type": "string",
                    "description": "Type of the notification\n",
                    "willReplaceOnChanges": true
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of the role\n",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "Status of subscription\n"
                }
            },
            "requiredInputs": [
                "notificationType",
                "roleType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleSubscription resources.\n",
                "properties": {
                    "notificationType": {
                        "type": "string",
                        "description": "Type of the notification\n",
                        "willReplaceOnChanges": true
                    },
                    "roleType": {
                        "type": "string",
                        "description": "Type of the role\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of subscription\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/securityNotificationEmails:SecurityNotificationEmails": {
            "properties": {
                "reportSuspiciousActivityEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users about suspicious or unrecognized activity from their account\n"
                },
                "sendEmailForFactorEnrollmentEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users of any activity on their account related to MFA factor enrollment\n"
                },
                "sendEmailForFactorResetEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users that one or more factors have been reset for their account\n"
                },
                "sendEmailForNewDeviceEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users about new sign-on activity\n"
                },
                "sendEmailForPasswordChangedEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users that the password for their account has changed\n"
                }
            },
            "inputProperties": {
                "reportSuspiciousActivityEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users about suspicious or unrecognized activity from their account\n"
                },
                "sendEmailForFactorEnrollmentEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users of any activity on their account related to MFA factor enrollment\n"
                },
                "sendEmailForFactorResetEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users that one or more factors have been reset for their account\n"
                },
                "sendEmailForNewDeviceEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users about new sign-on activity\n"
                },
                "sendEmailForPasswordChangedEnabled": {
                    "type": "boolean",
                    "description": "Notifies end users that the password for their account has changed\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityNotificationEmails resources.\n",
                "properties": {
                    "reportSuspiciousActivityEnabled": {
                        "type": "boolean",
                        "description": "Notifies end users about suspicious or unrecognized activity from their account\n"
                    },
                    "sendEmailForFactorEnrollmentEnabled": {
                        "type": "boolean",
                        "description": "Notifies end users of any activity on their account related to MFA factor enrollment\n"
                    },
                    "sendEmailForFactorResetEnabled": {
                        "type": "boolean",
                        "description": "Notifies end users that one or more factors have been reset for their account\n"
                    },
                    "sendEmailForNewDeviceEnabled": {
                        "type": "boolean",
                        "description": "Notifies end users about new sign-on activity\n"
                    },
                    "sendEmailForPasswordChangedEnabled": {
                        "type": "boolean",
                        "description": "Notifies end users that the password for their account has changed\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/templateSms:TemplateSms": {
            "properties": {
                "template": {
                    "type": "string",
                    "description": "SMS default template\n"
                },
                "translations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/TemplateSmsTranslation:TemplateSmsTranslation"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "SMS template type\n"
                }
            },
            "required": [
                "template",
                "type"
            ],
            "inputProperties": {
                "template": {
                    "type": "string",
                    "description": "SMS default template\n"
                },
                "translations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/TemplateSmsTranslation:TemplateSmsTranslation"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "SMS template type\n"
                }
            },
            "requiredInputs": [
                "template",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemplateSms resources.\n",
                "properties": {
                    "template": {
                        "type": "string",
                        "description": "SMS default template\n"
                    },
                    "translations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/TemplateSmsTranslation:TemplateSmsTranslation"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "SMS template type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/theme:Theme": {
            "properties": {
                "backgroundImage": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "backgroundImageUrl": {
                    "type": "string",
                    "description": "Background image URL\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID\n"
                },
                "emailTemplateTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)\n"
                },
                "endUserDashboardTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)\n"
                },
                "errorPageTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "Favicon URL\n"
                },
                "links": {
                    "type": "string",
                    "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "Logo URL\n"
                },
                "primaryColorContrastHex": {
                    "type": "string",
                    "description": "Primary color contrast hex code\n"
                },
                "primaryColorHex": {
                    "type": "string",
                    "description": "Primary color hex code\n"
                },
                "secondaryColorContrastHex": {
                    "type": "string",
                    "description": "Secondary color contrast hex code\n"
                },
                "secondaryColorHex": {
                    "type": "string",
                    "description": "Secondary color hex code\n"
                },
                "signInPageTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                },
                "themeId": {
                    "type": "string",
                    "description": "Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.\n"
                }
            },
            "required": [
                "backgroundImageUrl",
                "brandId",
                "faviconUrl",
                "links",
                "logoUrl"
            ],
            "inputProperties": {
                "backgroundImage": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "brandId": {
                    "type": "string",
                    "description": "Brand ID\n"
                },
                "emailTemplateTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)\n"
                },
                "endUserDashboardTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)\n"
                },
                "errorPageTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Path to local file\n"
                },
                "primaryColorContrastHex": {
                    "type": "string",
                    "description": "Primary color contrast hex code\n"
                },
                "primaryColorHex": {
                    "type": "string",
                    "description": "Primary color hex code\n"
                },
                "secondaryColorContrastHex": {
                    "type": "string",
                    "description": "Secondary color contrast hex code\n"
                },
                "secondaryColorHex": {
                    "type": "string",
                    "description": "Secondary color hex code\n"
                },
                "signInPageTouchPointVariant": {
                    "type": "string",
                    "description": "Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                },
                "themeId": {
                    "type": "string",
                    "description": "Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.\n"
                }
            },
            "requiredInputs": [
                "brandId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Theme resources.\n",
                "properties": {
                    "backgroundImage": {
                        "type": "string",
                        "description": "Path to local file\n"
                    },
                    "backgroundImageUrl": {
                        "type": "string",
                        "description": "Background image URL\n"
                    },
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "emailTemplateTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)\n"
                    },
                    "endUserDashboardTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)\n"
                    },
                    "errorPageTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "Path to local file\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "Favicon URL\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Path to local file\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "Logo URL\n"
                    },
                    "primaryColorContrastHex": {
                        "type": "string",
                        "description": "Primary color contrast hex code\n"
                    },
                    "primaryColorHex": {
                        "type": "string",
                        "description": "Primary color hex code\n"
                    },
                    "secondaryColorContrastHex": {
                        "type": "string",
                        "description": "Secondary color contrast hex code\n"
                    },
                    "secondaryColorHex": {
                        "type": "string",
                        "description": "Secondary color hex code\n"
                    },
                    "signInPageTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/threatInsightSettings:ThreatInsightSettings": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Specifies how Okta responds to authentication requests from suspicious IPs\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Network Zone IDs to exclude to be not logged or blocked by Okta ThreatInsight and proceed to Sign On rules evaluation\n"
                }
            },
            "required": [
                "action"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Specifies how Okta responds to authentication requests from suspicious IPs\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Network Zone IDs to exclude to be not logged or blocked by Okta ThreatInsight and proceed to Sign On rules evaluation\n"
                }
            },
            "requiredInputs": [
                "action"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ThreatInsightSettings resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Specifies how Okta responds to authentication requests from suspicious IPs\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Network Zone IDs to exclude to be not logged or blocked by Okta ThreatInsight and proceed to Sign On rules evaluation\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/userAdminRoles:UserAdminRoles": {
            "description": "Resource to manage a set of administrator roles for a specific user.\n",
            "properties": {
                "adminRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User Okta admin roles - ie. ['APP*ADMIN', 'USER*ADMIN']\n"
                },
                "disableNotifications": {
                    "type": "boolean",
                    "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n"
                }
            },
            "required": [
                "adminRoles",
                "userId"
            ],
            "inputProperties": {
                "adminRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User Okta admin roles - ie. ['APP*ADMIN', 'USER*ADMIN']\n"
                },
                "disableNotifications": {
                    "type": "boolean",
                    "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminRoles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserAdminRoles resources.\n",
                "properties": {
                    "adminRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User Okta admin roles - ie. ['APP*ADMIN', 'USER*ADMIN']\n"
                    },
                    "disableNotifications": {
                        "type": "boolean",
                        "description": "When this setting is enabled, the admins won't receive any of the default Okta administrator emails\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of a Okta User\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/userBaseSchemaProperty:UserBaseSchemaProperty": {
            "properties": {
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n"
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "Subschema title (display name)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "required": [
                "index",
                "title",
                "type"
            ],
            "inputProperties": {
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n",
                    "willReplaceOnChanges": true
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "Subschema title (display name)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                    "willReplaceOnChanges": true
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "requiredInputs": [
                "index",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserBaseSchemaProperty resources.\n",
                "properties": {
                    "index": {
                        "type": "string",
                        "description": "Subschema unique string identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "master": {
                        "type": "string",
                        "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether the subschema is required\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Subschema title (display name)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                        "willReplaceOnChanges": true
                    },
                    "userType": {
                        "type": "string",
                        "description": "Custom subschema user type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:index/userFactorQuestion:UserFactorQuestion": {
            "description": "Resource to manage a question factor for a user\n",
            "properties": {
                "answer": {
                    "type": "string",
                    "description": "User password security answer\n",
                    "secret": true
                },
                "key": {
                    "type": "string",
                    "description": "Unique key for question\n"
                },
                "status": {
                    "type": "string",
                    "description": "User factor status.\n"
                },
                "text": {
                    "type": "string",
                    "description": "Display text for question\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n"
                }
            },
            "required": [
                "answer",
                "key",
                "status",
                "text",
                "userId"
            ],
            "inputProperties": {
                "answer": {
                    "type": "string",
                    "description": "User password security answer\n",
                    "secret": true
                },
                "key": {
                    "type": "string",
                    "description": "Unique key for question\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "answer",
                "key",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserFactorQuestion resources.\n",
                "properties": {
                    "answer": {
                        "type": "string",
                        "description": "User password security answer\n",
                        "secret": true
                    },
                    "key": {
                        "type": "string",
                        "description": "Unique key for question\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "User factor status.\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "Display text for question\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of a Okta User\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/userGroupMemberships:UserGroupMemberships": {
            "description": "Resource to manage a set of group memberships for a specific user.\n",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Okta group IDs which the user should have membership managed for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n"
                }
            },
            "required": [
                "groups",
                "userId"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Okta group IDs which the user should have membership managed for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of a Okta User\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groups",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroupMemberships resources.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Okta group IDs which the user should have membership managed for.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of a Okta User\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "okta:index/userSchemaProperty:UserSchemaProperty": {
            "properties": {
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyArrayOneOf:UserSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n"
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n"
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n"
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "masterOverridePriorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyMasterOverridePriority:UserSchemaPropertyMasterOverridePriority"
                    }
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyOneOf:UserSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n"
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "required": [
                "index",
                "title",
                "type"
            ],
            "inputProperties": {
                "arrayEnums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of a property of type array.\n"
                },
                "arrayOneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyArrayOneOf:UserSchemaPropertyArrayOneOf"
                    },
                    "description": "array of valid JSON schemas for property type array.\n"
                },
                "arrayType": {
                    "type": "string",
                    "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Custom Subschema description\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "externalName": {
                    "type": "string",
                    "description": "Subschema external name\n",
                    "willReplaceOnChanges": true
                },
                "externalNamespace": {
                    "type": "string",
                    "description": "Subschema external namespace\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "string",
                    "description": "Subschema unique string identifier\n",
                    "willReplaceOnChanges": true
                },
                "master": {
                    "type": "string",
                    "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                },
                "masterOverridePriorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyMasterOverridePriority:UserSchemaPropertyMasterOverridePriority"
                    }
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Subschema of type string maximum length\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Subschema of type string minimum length\n"
                },
                "oneOfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:index/UserSchemaPropertyOneOf:UserSchemaPropertyOneOf"
                    },
                    "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the subschema is required\n"
                },
                "scope": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Enum title\n"
                },
                "type": {
                    "type": "string",
                    "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                    "willReplaceOnChanges": true
                },
                "unique": {
                    "type": "string",
                    "description": "Subschema unique restriction\n",
                    "willReplaceOnChanges": true
                },
                "userType": {
                    "type": "string",
                    "description": "Custom subschema user type\n"
                }
            },
            "requiredInputs": [
                "index",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSchemaProperty resources.\n",
                "properties": {
                    "arrayEnums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of a property of type array.\n"
                    },
                    "arrayOneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/UserSchemaPropertyArrayOneOf:UserSchemaPropertyArrayOneOf"
                        },
                        "description": "array of valid JSON schemas for property type array.\n"
                    },
                    "arrayType": {
                        "type": "string",
                        "description": "Subschema array type: string, number, integer, reference. Type field must be an array.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Custom Subschema description\n"
                    },
                    "enums": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "externalName": {
                        "type": "string",
                        "description": "Subschema external name\n",
                        "willReplaceOnChanges": true
                    },
                    "externalNamespace": {
                        "type": "string",
                        "description": "Subschema external namespace\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "string",
                        "description": "Subschema unique string identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "master": {
                        "type": "string",
                        "description": "SubSchema profile manager, if not set it will inherit its setting.\n"
                    },
                    "masterOverridePriorities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/UserSchemaPropertyMasterOverridePriority:UserSchemaPropertyMasterOverridePriority"
                        }
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "Subschema of type string maximum length\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Subschema of type string minimum length\n"
                    },
                    "oneOfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/UserSchemaPropertyOneOf:UserSchemaPropertyOneOf"
                        },
                        "description": "Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether the subschema is required\n"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "description": "Enum title\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Subschema type: string, boolean, number, integer, array, or object\n",
                        "willReplaceOnChanges": true
                    },
                    "unique": {
                        "type": "string",
                        "description": "Subschema unique restriction\n",
                        "willReplaceOnChanges": true
                    },
                    "userType": {
                        "type": "string",
                        "description": "Custom subschema user type\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:inline/hook:Hook": {
            "properties": {
                "auth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:inline/HookHeader:HookHeader"
                    }
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "channel",
                "name",
                "type",
                "version"
            ],
            "inputProperties": {
                "auth": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:inline/HookHeader:HookHeader"
                    }
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "channel",
                "type",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hook resources.\n",
                "properties": {
                    "auth": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "channel": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:inline/HookHeader:HookHeader"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:network/zone:Zone": {
            "properties": {
                "asns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Format of each array value: a string representation of an ASN numeric value\n"
                },
                "dynamicLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode\n"
                },
                "dynamicProxyType": {
                    "type": "string",
                    "description": "Type of proxy being controlled by this network zone\n"
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network Zone Resource\n"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                },
                "status": {
                    "type": "string",
                    "description": "Network Status - can either be ACTIVE or INACTIVE only\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Network Zone - can either be IP or DYNAMIC only\n"
                },
                "usage": {
                    "type": "string",
                    "description": "Zone's purpose: POLICY or BLOCKLIST\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "asns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Format of each array value: a string representation of an ASN numeric value\n"
                },
                "dynamicLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode\n"
                },
                "dynamicProxyType": {
                    "type": "string",
                    "description": "Type of proxy being controlled by this network zone\n"
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network Zone Resource\n"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                },
                "status": {
                    "type": "string",
                    "description": "Network Status - can either be ACTIVE or INACTIVE only\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Network Zone - can either be IP or DYNAMIC only\n"
                },
                "usage": {
                    "type": "string",
                    "description": "Zone's purpose: POLICY or BLOCKLIST\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Zone resources.\n",
                "properties": {
                    "asns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Format of each array value: a string representation of an ASN numeric value\n"
                    },
                    "dynamicLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode\n"
                    },
                    "dynamicProxyType": {
                        "type": "string",
                        "description": "Type of proxy being controlled by this network zone\n"
                    },
                    "gateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network Zone Resource\n"
                    },
                    "proxies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Network Status - can either be ACTIVE or INACTIVE only\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Network Zone - can either be IP or DYNAMIC only\n"
                    },
                    "usage": {
                        "type": "string",
                        "description": "Zone's purpose: POLICY or BLOCKLIST\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by\n"
                },
                "createdDate": {
                    "type": "string",
                    "description": "Created date\n"
                },
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be FULL, USER\n"
                },
                "jailbreak": {
                    "type": "boolean",
                    "description": "The device jailbreak. Only for android and iOS platform\n"
                },
                "lastUpdate": {
                    "type": "string",
                    "description": "Last update\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Last updated by\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "platform": {
                    "type": "string",
                    "description": "Policy device assurance platform\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                }
            },
            "required": [
                "createdBy",
                "createdDate",
                "lastUpdate",
                "lastUpdatedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be FULL, USER\n"
                },
                "jailbreak": {
                    "type": "boolean",
                    "description": "The device jailbreak. Only for android and iOS platform\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAssuranceAndroid resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Created by\n"
                    },
                    "createdDate": {
                        "type": "string",
                        "description": "Created date\n"
                    },
                    "diskEncryptionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of disk encryption type, can be FULL, USER\n"
                    },
                    "jailbreak": {
                        "type": "boolean",
                        "description": "The device jailbreak. Only for android and iOS platform\n"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "Last update\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "Last updated by\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy device assurance name\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The device os minimum version\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "Policy device assurance platform\n"
                    },
                    "screenlockTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                    },
                    "secureHardwarePresent": {
                        "type": "boolean",
                        "description": "Indicates if the device constains a secure hardware functionality\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by\n"
                },
                "createdDate": {
                    "type": "string",
                    "description": "Created date\n"
                },
                "lastUpdate": {
                    "type": "string",
                    "description": "Last update\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Last updated by\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "platform": {
                    "type": "string",
                    "description": "Policy device assurance platform\n"
                },
                "tpspAllowScreenLock": {
                    "type": "boolean",
                    "description": "Third party signal provider allow screen lock\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enabled\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                }
            },
            "required": [
                "createdBy",
                "createdDate",
                "lastUpdate",
                "lastUpdatedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "tpspAllowScreenLock": {
                    "type": "boolean",
                    "description": "Third party signal provider allow screen lock\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enabled\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAssuranceChromeos resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Created by\n"
                    },
                    "createdDate": {
                        "type": "string",
                        "description": "Created date\n"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "Last update\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "Last updated by\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy device assurance name\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "Policy device assurance platform\n"
                    },
                    "tpspAllowScreenLock": {
                        "type": "boolean",
                        "description": "Third party signal provider allow screen lock\n"
                    },
                    "tpspBrowserVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum browser version\n"
                    },
                    "tpspBuiltinDnsClientEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider builtin dns client enabled\n"
                    },
                    "tpspChromeRemoteDesktopAppBlocked": {
                        "type": "boolean",
                        "description": "Third party signal provider chrome remote desktop app blocked\n"
                    },
                    "tpspDeviceEnrollmentDomain": {
                        "type": "string",
                        "description": "Third party signal provider device enrollment domain\n"
                    },
                    "tpspDiskEncrypted": {
                        "type": "boolean",
                        "description": "Third party signal provider disk encrypted\n"
                    },
                    "tpspKeyTrustLevel": {
                        "type": "string",
                        "description": "Third party signal provider key trust level\n"
                    },
                    "tpspOsFirewall": {
                        "type": "boolean",
                        "description": "Third party signal provider os firewall\n"
                    },
                    "tpspOsVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum os version\n"
                    },
                    "tpspPasswordProctectionWarningTrigger": {
                        "type": "string",
                        "description": "Third party signal provider password protection warning trigger\n"
                    },
                    "tpspRealtimeUrlCheckMode": {
                        "type": "boolean",
                        "description": "Third party signal provider realtime url check mode\n"
                    },
                    "tpspSafeBrowsingProtectionLevel": {
                        "type": "string",
                        "description": "Third party signal provider safe browsing protection level\n"
                    },
                    "tpspScreenLockSecured": {
                        "type": "boolean",
                        "description": "Third party signal provider screen lock secure\n"
                    },
                    "tpspSiteIsolationEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider site isolation enabled\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/deviceAssuranceIos:DeviceAssuranceIos": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by\n"
                },
                "createdDate": {
                    "type": "string",
                    "description": "Created date\n"
                },
                "jailbreak": {
                    "type": "boolean",
                    "description": "The device jailbreak. Only for android and iOS platform\n"
                },
                "lastUpdate": {
                    "type": "string",
                    "description": "Last update\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Last updated by\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "platform": {
                    "type": "string",
                    "description": "Policy device assurance platform\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                }
            },
            "required": [
                "createdBy",
                "createdDate",
                "lastUpdate",
                "lastUpdatedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "jailbreak": {
                    "type": "boolean",
                    "description": "The device jailbreak. Only for android and iOS platform\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAssuranceIos resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Created by\n"
                    },
                    "createdDate": {
                        "type": "string",
                        "description": "Created date\n"
                    },
                    "jailbreak": {
                        "type": "boolean",
                        "description": "The device jailbreak. Only for android and iOS platform\n"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "Last update\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "Last updated by\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy device assurance name\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The device os minimum version\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "Policy device assurance platform\n"
                    },
                    "screenlockTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/deviceAssuranceMacos:DeviceAssuranceMacos": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by\n"
                },
                "createdDate": {
                    "type": "string",
                    "description": "Created date\n"
                },
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                },
                "lastUpdate": {
                    "type": "string",
                    "description": "Last update\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Last updated by\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "platform": {
                    "type": "string",
                    "description": "Policy device assurance platform\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                },
                "thirdPartySignalProviders": {
                    "type": "boolean",
                    "description": "Check to include third party signal provider\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enable\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                }
            },
            "required": [
                "createdBy",
                "createdDate",
                "lastUpdate",
                "lastUpdatedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                },
                "thirdPartySignalProviders": {
                    "type": "boolean",
                    "description": "Check to include third party signal provider\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enable\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAssuranceMacos resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Created by\n"
                    },
                    "createdDate": {
                        "type": "string",
                        "description": "Created date\n"
                    },
                    "diskEncryptionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "Last update\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "Last updated by\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy device assurance name\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The device os minimum version\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "Policy device assurance platform\n"
                    },
                    "screenlockTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                    },
                    "secureHardwarePresent": {
                        "type": "boolean",
                        "description": "Indicates if the device constains a secure hardware functionality\n"
                    },
                    "thirdPartySignalProviders": {
                        "type": "boolean",
                        "description": "Check to include third party signal provider\n"
                    },
                    "tpspBrowserVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum browser version\n"
                    },
                    "tpspBuiltinDnsClientEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider builtin dns client enable\n"
                    },
                    "tpspChromeRemoteDesktopAppBlocked": {
                        "type": "boolean",
                        "description": "Third party signal provider chrome remote desktop app blocked\n"
                    },
                    "tpspDeviceEnrollmentDomain": {
                        "type": "string",
                        "description": "Third party signal provider device enrollment domain\n"
                    },
                    "tpspDiskEncrypted": {
                        "type": "boolean",
                        "description": "Third party signal provider disk encrypted\n"
                    },
                    "tpspKeyTrustLevel": {
                        "type": "string",
                        "description": "Third party signal provider key trust level\n"
                    },
                    "tpspOsFirewall": {
                        "type": "boolean",
                        "description": "Third party signal provider os firewall\n"
                    },
                    "tpspOsVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum os version\n"
                    },
                    "tpspPasswordProctectionWarningTrigger": {
                        "type": "string",
                        "description": "Third party signal provider password protection warning trigger\n"
                    },
                    "tpspRealtimeUrlCheckMode": {
                        "type": "boolean",
                        "description": "Third party signal provider realtime url check mode\n"
                    },
                    "tpspSafeBrowsingProtectionLevel": {
                        "type": "string",
                        "description": "Third party signal provider safe browsing protection level\n"
                    },
                    "tpspScreenLockSecured": {
                        "type": "boolean",
                        "description": "Third party signal provider screen lock secure\n"
                    },
                    "tpspSiteIsolationEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider site isolation enabled\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/deviceAssuranceWindows:DeviceAssuranceWindows": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by\n"
                },
                "createdDate": {
                    "type": "string",
                    "description": "Created date\n"
                },
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                },
                "lastUpdate": {
                    "type": "string",
                    "description": "Last update\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Last updated by\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "platform": {
                    "type": "string",
                    "description": "Policy device assurance platform\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                },
                "thirdPartySignalProviders": {
                    "type": "boolean",
                    "description": "Check to include third party signal provider\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enable\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspCrowdStrikeAgentId": {
                    "type": "string",
                    "description": "Third party signal provider crowdstrike agent id\n"
                },
                "tpspCrowdStrikeCustomerId": {
                    "type": "string",
                    "description": "Third party signal provider crowdstrike user id\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSecureBootEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider secure boot enabled\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                },
                "tpspThirdPartyBlockingEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider third party blocking enabled\n"
                },
                "tpspWindowsMachineDomain": {
                    "type": "string",
                    "description": "Third party signal provider windows machine domain\n"
                },
                "tpspWindowsUserDomain": {
                    "type": "string",
                    "description": "Third party signal provider windows user domain\n"
                }
            },
            "required": [
                "createdBy",
                "createdDate",
                "lastUpdate",
                "lastUpdatedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "diskEncryptionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy device assurance name\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The device os minimum version\n"
                },
                "screenlockTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                },
                "secureHardwarePresent": {
                    "type": "boolean",
                    "description": "Indicates if the device constains a secure hardware functionality\n"
                },
                "thirdPartySignalProviders": {
                    "type": "boolean",
                    "description": "Check to include third party signal provider\n"
                },
                "tpspBrowserVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum browser version\n"
                },
                "tpspBuiltinDnsClientEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider builtin dns client enable\n"
                },
                "tpspChromeRemoteDesktopAppBlocked": {
                    "type": "boolean",
                    "description": "Third party signal provider chrome remote desktop app blocked\n"
                },
                "tpspCrowdStrikeAgentId": {
                    "type": "string",
                    "description": "Third party signal provider crowdstrike agent id\n"
                },
                "tpspCrowdStrikeCustomerId": {
                    "type": "string",
                    "description": "Third party signal provider crowdstrike user id\n"
                },
                "tpspDeviceEnrollmentDomain": {
                    "type": "string",
                    "description": "Third party signal provider device enrollment domain\n"
                },
                "tpspDiskEncrypted": {
                    "type": "boolean",
                    "description": "Third party signal provider disk encrypted\n"
                },
                "tpspKeyTrustLevel": {
                    "type": "string",
                    "description": "Third party signal provider key trust level\n"
                },
                "tpspOsFirewall": {
                    "type": "boolean",
                    "description": "Third party signal provider os firewall\n"
                },
                "tpspOsVersion": {
                    "type": "string",
                    "description": "Third party signal provider minimum os version\n"
                },
                "tpspPasswordProctectionWarningTrigger": {
                    "type": "string",
                    "description": "Third party signal provider password protection warning trigger\n"
                },
                "tpspRealtimeUrlCheckMode": {
                    "type": "boolean",
                    "description": "Third party signal provider realtime url check mode\n"
                },
                "tpspSafeBrowsingProtectionLevel": {
                    "type": "string",
                    "description": "Third party signal provider safe browsing protection level\n"
                },
                "tpspScreenLockSecured": {
                    "type": "boolean",
                    "description": "Third party signal provider screen lock secure\n"
                },
                "tpspSecureBootEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider secure boot enabled\n"
                },
                "tpspSiteIsolationEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider site isolation enabled\n"
                },
                "tpspThirdPartyBlockingEnabled": {
                    "type": "boolean",
                    "description": "Third party signal provider third party blocking enabled\n"
                },
                "tpspWindowsMachineDomain": {
                    "type": "string",
                    "description": "Third party signal provider windows machine domain\n"
                },
                "tpspWindowsUserDomain": {
                    "type": "string",
                    "description": "Third party signal provider windows user domain\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAssuranceWindows resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Created by\n"
                    },
                    "createdDate": {
                        "type": "string",
                        "description": "Created date\n"
                    },
                    "diskEncryptionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of disk encryption type, can be ALL_INTERNAL_VOLUMES\n"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "Last update\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "Last updated by\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy device assurance name\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The device os minimum version\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "Policy device assurance platform\n"
                    },
                    "screenlockTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE\n"
                    },
                    "secureHardwarePresent": {
                        "type": "boolean",
                        "description": "Indicates if the device constains a secure hardware functionality\n"
                    },
                    "thirdPartySignalProviders": {
                        "type": "boolean",
                        "description": "Check to include third party signal provider\n"
                    },
                    "tpspBrowserVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum browser version\n"
                    },
                    "tpspBuiltinDnsClientEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider builtin dns client enable\n"
                    },
                    "tpspChromeRemoteDesktopAppBlocked": {
                        "type": "boolean",
                        "description": "Third party signal provider chrome remote desktop app blocked\n"
                    },
                    "tpspCrowdStrikeAgentId": {
                        "type": "string",
                        "description": "Third party signal provider crowdstrike agent id\n"
                    },
                    "tpspCrowdStrikeCustomerId": {
                        "type": "string",
                        "description": "Third party signal provider crowdstrike user id\n"
                    },
                    "tpspDeviceEnrollmentDomain": {
                        "type": "string",
                        "description": "Third party signal provider device enrollment domain\n"
                    },
                    "tpspDiskEncrypted": {
                        "type": "boolean",
                        "description": "Third party signal provider disk encrypted\n"
                    },
                    "tpspKeyTrustLevel": {
                        "type": "string",
                        "description": "Third party signal provider key trust level\n"
                    },
                    "tpspOsFirewall": {
                        "type": "boolean",
                        "description": "Third party signal provider os firewall\n"
                    },
                    "tpspOsVersion": {
                        "type": "string",
                        "description": "Third party signal provider minimum os version\n"
                    },
                    "tpspPasswordProctectionWarningTrigger": {
                        "type": "string",
                        "description": "Third party signal provider password protection warning trigger\n"
                    },
                    "tpspRealtimeUrlCheckMode": {
                        "type": "boolean",
                        "description": "Third party signal provider realtime url check mode\n"
                    },
                    "tpspSafeBrowsingProtectionLevel": {
                        "type": "string",
                        "description": "Third party signal provider safe browsing protection level\n"
                    },
                    "tpspScreenLockSecured": {
                        "type": "boolean",
                        "description": "Third party signal provider screen lock secure\n"
                    },
                    "tpspSecureBootEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider secure boot enabled\n"
                    },
                    "tpspSiteIsolationEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider site isolation enabled\n"
                    },
                    "tpspThirdPartyBlockingEnabled": {
                        "type": "boolean",
                        "description": "Third party signal provider third party blocking enabled\n"
                    },
                    "tpspWindowsMachineDomain": {
                        "type": "string",
                        "description": "Third party signal provider windows machine domain\n"
                    },
                    "tpspWindowsUserDomain": {
                        "type": "string",
                        "description": "Third party signal provider windows user domain\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/mfa:Mfa": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "duo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIdp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoU2f": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoWebauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "googleOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "hotp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isOie": {
                    "type": "boolean",
                    "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "oktaCall": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaEmail": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPassword": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPush": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaSms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaVerify": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "onpremMfa": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "phoneNumber": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "rsaToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                },
                "symantecVip": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "webauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "yubikeyToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "duo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIdp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoU2f": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fidoWebauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "googleOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "hotp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isOie": {
                    "type": "boolean",
                    "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "oktaCall": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaEmail": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaOtp": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPassword": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaPush": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaSms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "oktaVerify": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "onpremMfa": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "phoneNumber": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "rsaToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityQuestion": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                },
                "symantecVip": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "webauthn": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "yubikeyToken": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mfa resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Policy Description\n"
                    },
                    "duo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "externalIdp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fidoU2f": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fidoWebauthn": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "googleOtp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "groupsIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Group IDs to Include\n"
                    },
                    "hotp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "isOie": {
                        "type": "boolean",
                        "description": "Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Name\n"
                    },
                    "oktaCall": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaEmail": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaOtp": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaPassword": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaPush": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaQuestion": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaSms": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "oktaVerify": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "onpremMfa": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "phoneNumber": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "rsaToken": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "securityQuestion": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Status: ACTIVE or INACTIVE.\n"
                    },
                    "symantecVip": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "webauthn": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "yubikeyToken": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/password:Password": {
            "properties": {
                "authProvider": {
                    "type": "string",
                    "description": "Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP\n"
                },
                "callRecovery": {
                    "type": "string",
                    "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "emailRecovery": {
                    "type": "string",
                    "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "passwordAutoUnlockMinutes": {
                    "type": "integer",
                    "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                },
                "passwordDictionaryLookup": {
                    "type": "boolean",
                    "description": "Check Passwords Against Common Password Dictionary.\n"
                },
                "passwordExcludeFirstName": {
                    "type": "boolean",
                    "description": "User firstName attribute must be excluded from the password\n"
                },
                "passwordExcludeLastName": {
                    "type": "boolean",
                    "description": "User lastName attribute must be excluded from the password\n"
                },
                "passwordExcludeUsername": {
                    "type": "boolean",
                    "description": "If the user name must be excluded from the password.\n"
                },
                "passwordExpireWarnDays": {
                    "type": "integer",
                    "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                },
                "passwordHistoryCount": {
                    "type": "integer",
                    "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                },
                "passwordLockoutNotificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Notification channels to use to notify a user when their account has been locked.\n"
                },
                "passwordMaxAgeDays": {
                    "type": "integer",
                    "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                },
                "passwordMaxLockoutAttempts": {
                    "type": "integer",
                    "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                },
                "passwordMinAgeMinutes": {
                    "type": "integer",
                    "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                },
                "passwordMinLength": {
                    "type": "integer",
                    "description": "Minimum password length.\n"
                },
                "passwordMinLowercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinNumber": {
                    "type": "integer",
                    "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinSymbol": {
                    "type": "integer",
                    "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinUppercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordShowLockoutFailures": {
                    "type": "boolean",
                    "description": "If a user should be informed when their account is locked.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "questionMinLength": {
                    "type": "integer",
                    "description": "Min length of the password recovery question answer.\n"
                },
                "questionRecovery": {
                    "type": "string",
                    "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                },
                "recoveryEmailToken": {
                    "type": "integer",
                    "description": "Lifetime in minutes of the recovery email token.\n"
                },
                "skipUnlock": {
                    "type": "boolean",
                    "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                },
                "smsRecovery": {
                    "type": "string",
                    "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "authProvider": {
                    "type": "string",
                    "description": "Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP\n"
                },
                "callRecovery": {
                    "type": "string",
                    "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "emailRecovery": {
                    "type": "string",
                    "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "passwordAutoUnlockMinutes": {
                    "type": "integer",
                    "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                },
                "passwordDictionaryLookup": {
                    "type": "boolean",
                    "description": "Check Passwords Against Common Password Dictionary.\n"
                },
                "passwordExcludeFirstName": {
                    "type": "boolean",
                    "description": "User firstName attribute must be excluded from the password\n"
                },
                "passwordExcludeLastName": {
                    "type": "boolean",
                    "description": "User lastName attribute must be excluded from the password\n"
                },
                "passwordExcludeUsername": {
                    "type": "boolean",
                    "description": "If the user name must be excluded from the password.\n"
                },
                "passwordExpireWarnDays": {
                    "type": "integer",
                    "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                },
                "passwordHistoryCount": {
                    "type": "integer",
                    "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                },
                "passwordLockoutNotificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Notification channels to use to notify a user when their account has been locked.\n"
                },
                "passwordMaxAgeDays": {
                    "type": "integer",
                    "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                },
                "passwordMaxLockoutAttempts": {
                    "type": "integer",
                    "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                },
                "passwordMinAgeMinutes": {
                    "type": "integer",
                    "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                },
                "passwordMinLength": {
                    "type": "integer",
                    "description": "Minimum password length.\n"
                },
                "passwordMinLowercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinNumber": {
                    "type": "integer",
                    "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinSymbol": {
                    "type": "integer",
                    "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordMinUppercase": {
                    "type": "integer",
                    "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                },
                "passwordShowLockoutFailures": {
                    "type": "boolean",
                    "description": "If a user should be informed when their account is locked.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "questionMinLength": {
                    "type": "integer",
                    "description": "Min length of the password recovery question answer.\n"
                },
                "questionRecovery": {
                    "type": "string",
                    "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                },
                "recoveryEmailToken": {
                    "type": "integer",
                    "description": "Lifetime in minutes of the recovery email token.\n"
                },
                "skipUnlock": {
                    "type": "boolean",
                    "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                },
                "smsRecovery": {
                    "type": "string",
                    "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Password resources.\n",
                "properties": {
                    "authProvider": {
                        "type": "string",
                        "description": "Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP\n"
                    },
                    "callRecovery": {
                        "type": "string",
                        "description": "Enable or disable voice call recovery: ACTIVE or INACTIVE.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Policy Description\n"
                    },
                    "emailRecovery": {
                        "type": "string",
                        "description": "Enable or disable email password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "groupsIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Group IDs to Include\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Name\n"
                    },
                    "passwordAutoUnlockMinutes": {
                        "type": "integer",
                        "description": "Number of minutes before a locked account is unlocked: 0 = no limit.\n"
                    },
                    "passwordDictionaryLookup": {
                        "type": "boolean",
                        "description": "Check Passwords Against Common Password Dictionary.\n"
                    },
                    "passwordExcludeFirstName": {
                        "type": "boolean",
                        "description": "User firstName attribute must be excluded from the password\n"
                    },
                    "passwordExcludeLastName": {
                        "type": "boolean",
                        "description": "User lastName attribute must be excluded from the password\n"
                    },
                    "passwordExcludeUsername": {
                        "type": "boolean",
                        "description": "If the user name must be excluded from the password.\n"
                    },
                    "passwordExpireWarnDays": {
                        "type": "integer",
                        "description": "Length in days a user will be warned before password expiry: 0 = no warning.\n"
                    },
                    "passwordHistoryCount": {
                        "type": "integer",
                        "description": "Number of distinct passwords that must be created before they can be reused: 0 = none.\n"
                    },
                    "passwordLockoutNotificationChannels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Notification channels to use to notify a user when their account has been locked.\n"
                    },
                    "passwordMaxAgeDays": {
                        "type": "integer",
                        "description": "Length in days a password is valid before expiry: 0 = no limit.\n"
                    },
                    "passwordMaxLockoutAttempts": {
                        "type": "integer",
                        "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit.\n"
                    },
                    "passwordMinAgeMinutes": {
                        "type": "integer",
                        "description": "Minimum time interval in minutes between password changes: 0 = no limit.\n"
                    },
                    "passwordMinLength": {
                        "type": "integer",
                        "description": "Minimum password length.\n"
                    },
                    "passwordMinLowercase": {
                        "type": "integer",
                        "description": "If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinNumber": {
                        "type": "integer",
                        "description": "If a password must contain at least one number: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinSymbol": {
                        "type": "integer",
                        "description": "If a password must contain at least one symbol (!@#$%^\u0026*): 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordMinUppercase": {
                        "type": "integer",
                        "description": "If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1\n"
                    },
                    "passwordShowLockoutFailures": {
                        "type": "boolean",
                        "description": "If a user should be informed when their account is locked.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "questionMinLength": {
                        "type": "integer",
                        "description": "Min length of the password recovery question answer.\n"
                    },
                    "questionRecovery": {
                        "type": "string",
                        "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "recoveryEmailToken": {
                        "type": "integer",
                        "description": "Lifetime in minutes of the recovery email token.\n"
                    },
                    "skipUnlock": {
                        "type": "boolean",
                        "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.\n"
                    },
                    "smsRecovery": {
                        "type": "string",
                        "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Status: ACTIVE or INACTIVE.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/ruleIdpDiscovery:RuleIdpDiscovery": {
            "properties": {
                "appExcludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppExclude:RuleIdpDiscoveryAppExclude"
                    },
                    "description": "Applications to exclude in discovery rule\n"
                },
                "appIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppInclude:RuleIdpDiscoveryAppInclude"
                    },
                    "description": "Applications to include in discovery rule\n"
                },
                "idpId": {
                    "type": "string"
                },
                "idpType": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "platformIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryPlatformInclude:RuleIdpDiscoveryPlatformInclude"
                    }
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "userIdentifierAttribute": {
                    "type": "string"
                },
                "userIdentifierPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryUserIdentifierPattern:RuleIdpDiscoveryUserIdentifierPattern"
                    }
                },
                "userIdentifierType": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "appExcludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppExclude:RuleIdpDiscoveryAppExclude"
                    },
                    "description": "Applications to exclude in discovery rule\n"
                },
                "appIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppInclude:RuleIdpDiscoveryAppInclude"
                    },
                    "description": "Applications to include in discovery rule\n"
                },
                "idpId": {
                    "type": "string"
                },
                "idpType": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n",
                    "willReplaceOnChanges": true
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "platformIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryPlatformInclude:RuleIdpDiscoveryPlatformInclude"
                    }
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "userIdentifierAttribute": {
                    "type": "string"
                },
                "userIdentifierPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleIdpDiscoveryUserIdentifierPattern:RuleIdpDiscoveryUserIdentifierPattern"
                    }
                },
                "userIdentifierType": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleIdpDiscovery resources.\n",
                "properties": {
                    "appExcludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppExclude:RuleIdpDiscoveryAppExclude"
                        },
                        "description": "Applications to exclude in discovery rule\n"
                    },
                    "appIncludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleIdpDiscoveryAppInclude:RuleIdpDiscoveryAppInclude"
                        },
                        "description": "Applications to include in discovery rule\n"
                    },
                    "idpId": {
                        "type": "string"
                    },
                    "idpType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Rule Name\n",
                        "willReplaceOnChanges": true
                    },
                    "networkConnection": {
                        "type": "string",
                        "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to exclude\n"
                    },
                    "networkIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to include\n"
                    },
                    "platformIncludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleIdpDiscoveryPlatformInclude:RuleIdpDiscoveryPlatformInclude"
                        }
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Policy ID of the Rule\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                    },
                    "userIdentifierAttribute": {
                        "type": "string"
                    },
                    "userIdentifierPatterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleIdpDiscoveryUserIdentifierPattern:RuleIdpDiscoveryUserIdentifierPattern"
                        }
                    },
                    "userIdentifierType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/ruleMfa:RuleMfa": {
            "properties": {
                "appExcludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleMfaAppExclude:RuleMfaAppExclude"
                    },
                    "description": "Applications to exclude\n"
                },
                "appIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleMfaAppInclude:RuleMfaAppInclude"
                    },
                    "description": "Applications to include\n"
                },
                "enroll": {
                    "type": "string",
                    "description": "Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "appExcludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleMfaAppExclude:RuleMfaAppExclude"
                    },
                    "description": "Applications to exclude\n"
                },
                "appIncludes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleMfaAppInclude:RuleMfaAppInclude"
                    },
                    "description": "Applications to include\n"
                },
                "enroll": {
                    "type": "string",
                    "description": "Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n",
                    "willReplaceOnChanges": true
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleMfa resources.\n",
                "properties": {
                    "appExcludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleMfaAppExclude:RuleMfaAppExclude"
                        },
                        "description": "Applications to exclude\n"
                    },
                    "appIncludes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleMfaAppInclude:RuleMfaAppInclude"
                        },
                        "description": "Applications to include\n"
                    },
                    "enroll": {
                        "type": "string",
                        "description": "Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Rule Name\n",
                        "willReplaceOnChanges": true
                    },
                    "networkConnection": {
                        "type": "string",
                        "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to exclude\n"
                    },
                    "networkIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to include\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Policy ID of the Rule\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs to Exclude\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/rulePassword:RulePassword": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "passwordChange": {
                    "type": "string",
                    "description": "Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW\n"
                },
                "passwordReset": {
                    "type": "string",
                    "description": "Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW\n"
                },
                "passwordUnlock": {
                    "type": "string",
                    "description": "Allow or deny a user to unlock. Default = DENY\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n",
                    "willReplaceOnChanges": true
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "passwordChange": {
                    "type": "string",
                    "description": "Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW\n"
                },
                "passwordReset": {
                    "type": "string",
                    "description": "Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW\n"
                },
                "passwordUnlock": {
                    "type": "string",
                    "description": "Allow or deny a user to unlock. Default = DENY\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RulePassword resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Policy Rule Name\n",
                        "willReplaceOnChanges": true
                    },
                    "networkConnection": {
                        "type": "string",
                        "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to exclude\n"
                    },
                    "networkIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to include\n"
                    },
                    "passwordChange": {
                        "type": "string",
                        "description": "Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW\n"
                    },
                    "passwordReset": {
                        "type": "string",
                        "description": "Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW\n"
                    },
                    "passwordUnlock": {
                        "type": "string",
                        "description": "Allow or deny a user to unlock. Default = DENY\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Policy ID of the Rule\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs to Exclude\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/ruleSignon:RuleSignon": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.\n"
                },
                "authtype": {
                    "type": "string",
                    "description": "Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE\n"
                },
                "behaviors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of behavior IDs\n"
                },
                "factorSequences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleSignonFactorSequence:RuleSignonFactorSequence"
                    }
                },
                "identityProvider": {
                    "type": "string",
                    "description": "Apply rule based on the IdP used: ANY, OKTA or SPECIFIC_IDP.\n"
                },
                "identityProviderIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When identity*provider is SPECIFIC*IDP then this is the list of IdP IDs to apply the rule on\n"
                },
                "mfaLifetime": {
                    "type": "integer",
                    "description": "Elapsed time before the next MFA challenge\n"
                },
                "mfaPrompt": {
                    "type": "string",
                    "description": "Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS\n"
                },
                "mfaRememberDevice": {
                    "type": "boolean",
                    "description": "Remember MFA device.\n"
                },
                "mfaRequired": {
                    "type": "boolean",
                    "description": "Require MFA.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n"
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n"
                },
                "primaryFactor": {
                    "type": "string",
                    "description": "Primary factor.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "riscLevel": {
                    "type": "string",
                    "description": "Risc level: ANY, LOW, MEDIUM or HIGH\n"
                },
                "sessionIdle": {
                    "type": "integer",
                    "description": "Max minutes a session can be idle.\n"
                },
                "sessionLifetime": {
                    "type": "integer",
                    "description": "Max minutes a session is active: Disable = 0.\n"
                },
                "sessionPersistent": {
                    "type": "boolean",
                    "description": "Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "required": [
                "name",
                "primaryFactor"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.\n"
                },
                "authtype": {
                    "type": "string",
                    "description": "Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE\n"
                },
                "behaviors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of behavior IDs\n"
                },
                "factorSequences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:policy/RuleSignonFactorSequence:RuleSignonFactorSequence"
                    }
                },
                "identityProvider": {
                    "type": "string",
                    "description": "Apply rule based on the IdP used: ANY, OKTA or SPECIFIC_IDP.\n"
                },
                "identityProviderIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When identity*provider is SPECIFIC*IDP then this is the list of IdP IDs to apply the rule on\n"
                },
                "mfaLifetime": {
                    "type": "integer",
                    "description": "Elapsed time before the next MFA challenge\n"
                },
                "mfaPrompt": {
                    "type": "string",
                    "description": "Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS\n"
                },
                "mfaRememberDevice": {
                    "type": "boolean",
                    "description": "Remember MFA device.\n"
                },
                "mfaRequired": {
                    "type": "boolean",
                    "description": "Require MFA.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Rule Name\n",
                    "willReplaceOnChanges": true
                },
                "networkConnection": {
                    "type": "string",
                    "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                },
                "networkExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to exclude\n"
                },
                "networkIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The zones to include\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "Policy ID of the Rule\n",
                    "willReplaceOnChanges": true
                },
                "primaryFactor": {
                    "type": "string",
                    "description": "Primary factor.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "riscLevel": {
                    "type": "string",
                    "description": "Risc level: ANY, LOW, MEDIUM or HIGH\n"
                },
                "sessionIdle": {
                    "type": "integer",
                    "description": "Max minutes a session can be idle.\n"
                },
                "sessionLifetime": {
                    "type": "integer",
                    "description": "Max minutes a session is active: Disable = 0.\n"
                },
                "sessionPersistent": {
                    "type": "boolean",
                    "description": "Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                },
                "usersExcludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of User IDs to Exclude\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleSignon resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.\n"
                    },
                    "authtype": {
                        "type": "string",
                        "description": "Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE\n"
                    },
                    "behaviors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of behavior IDs\n"
                    },
                    "factorSequences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:policy/RuleSignonFactorSequence:RuleSignonFactorSequence"
                        }
                    },
                    "identityProvider": {
                        "type": "string",
                        "description": "Apply rule based on the IdP used: ANY, OKTA or SPECIFIC_IDP.\n"
                    },
                    "identityProviderIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When identity*provider is SPECIFIC*IDP then this is the list of IdP IDs to apply the rule on\n"
                    },
                    "mfaLifetime": {
                        "type": "integer",
                        "description": "Elapsed time before the next MFA challenge\n"
                    },
                    "mfaPrompt": {
                        "type": "string",
                        "description": "Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS\n"
                    },
                    "mfaRememberDevice": {
                        "type": "boolean",
                        "description": "Remember MFA device.\n"
                    },
                    "mfaRequired": {
                        "type": "boolean",
                        "description": "Require MFA.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Rule Name\n",
                        "willReplaceOnChanges": true
                    },
                    "networkConnection": {
                        "type": "string",
                        "description": "Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.\n"
                    },
                    "networkExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to exclude\n"
                    },
                    "networkIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The zones to include\n"
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Policy ID of the Rule\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryFactor": {
                        "type": "string",
                        "description": "Primary factor.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "riscLevel": {
                        "type": "string",
                        "description": "Risc level: ANY, LOW, MEDIUM or HIGH\n"
                    },
                    "sessionIdle": {
                        "type": "integer",
                        "description": "Max minutes a session can be idle.\n"
                    },
                    "sessionLifetime": {
                        "type": "integer",
                        "description": "Max minutes a session is active: Disable = 0.\n"
                    },
                    "sessionPersistent": {
                        "type": "boolean",
                        "description": "Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Rule Status: ACTIVE or INACTIVE.\n"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of User IDs to Exclude\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:policy/signon:Signon": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Policy Description\n"
                },
                "groupsIncludeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Group IDs to Include\n"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Policy Status: ACTIVE or INACTIVE.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Signon resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Policy Description\n"
                    },
                    "groupsIncludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Group IDs to Include\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy Name\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Policy Status: ACTIVE or INACTIVE.\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:profile/mapping:Mapping": {
            "properties": {
                "alwaysApply": {
                    "type": "boolean",
                    "description": "Whether apply the changes to all users with this profile after updating or creating the these mappings.\n"
                },
                "deleteWhenAbsent": {
                    "type": "boolean",
                    "description": "When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:profile/MappingMapping:MappingMapping"
                    }
                },
                "sourceId": {
                    "type": "string",
                    "description": "The source id of the mapping to manage.\n"
                },
                "sourceName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string",
                    "description": "The target id of the mapping to manage.\n"
                },
                "targetName": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "required": [
                "sourceId",
                "sourceName",
                "sourceType",
                "targetId",
                "targetName",
                "targetType"
            ],
            "inputProperties": {
                "alwaysApply": {
                    "type": "boolean",
                    "description": "Whether apply the changes to all users with this profile after updating or creating the these mappings.\n"
                },
                "deleteWhenAbsent": {
                    "type": "boolean",
                    "description": "When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/okta:profile/MappingMapping:MappingMapping"
                    }
                },
                "sourceId": {
                    "type": "string",
                    "description": "The source id of the mapping to manage.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "The target id of the mapping to manage.\n"
                }
            },
            "requiredInputs": [
                "sourceId",
                "targetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mapping resources.\n",
                "properties": {
                    "alwaysApply": {
                        "type": "boolean",
                        "description": "Whether apply the changes to all users with this profile after updating or creating the these mappings.\n"
                    },
                    "deleteWhenAbsent": {
                        "type": "boolean",
                        "description": "When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.\n"
                    },
                    "mappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:profile/MappingMapping:MappingMapping"
                        }
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The source id of the mapping to manage.\n"
                    },
                    "sourceName": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "The target id of the mapping to manage.\n"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "targetType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "okta:trustedorigin/origin:Origin": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the Trusted Origin is active or not - can only be issued post-creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for this trusted origin\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Unique origin URL for this trusted origin\n",
                    "language": {
                        "csharp": {
                            "name": "OriginName"
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the Trusted Origin - can either be CORS or REDIRECT only\n"
                }
            },
            "required": [
                "name",
                "origin",
                "scopes"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the Trusted Origin is active or not - can only be issued post-creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for this trusted origin\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Unique origin URL for this trusted origin\n",
                    "language": {
                        "csharp": {
                            "name": "OriginName"
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the Trusted Origin - can either be CORS or REDIRECT only\n"
                }
            },
            "requiredInputs": [
                "origin",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Origin resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the Trusted Origin is active or not - can only be issued post-creation\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name for this trusted origin\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "Unique origin URL for this trusted origin\n",
                        "language": {
                            "csharp": {
                                "name": "OriginName"
                            }
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Scopes of the Trusted Origin - can either be CORS or REDIRECT only\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:user/user:User": {
            "properties": {
                "city": {
                    "type": "string",
                    "description": "User city\n"
                },
                "costCenter": {
                    "type": "string",
                    "description": "User cost center\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "User country code\n"
                },
                "customProfileAttributes": {
                    "type": "string",
                    "description": "JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows.\n"
                },
                "customProfileAttributesToIgnores": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom_profile_attribute keys that should be excluded from being managed by Terraform.\n"
                },
                "department": {
                    "type": "string",
                    "description": "User department\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "User display name, suitable to show end users\n"
                },
                "division": {
                    "type": "string",
                    "description": "User division\n"
                },
                "email": {
                    "type": "string",
                    "description": "User primary email address\n"
                },
                "employeeNumber": {
                    "type": "string",
                    "description": "User employee number\n"
                },
                "expirePasswordOnCreate": {
                    "type": "boolean",
                    "description": "If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User first name\n"
                },
                "honorificPrefix": {
                    "type": "string",
                    "description": "User honorific prefix\n"
                },
                "honorificSuffix": {
                    "type": "string",
                    "description": "User honorific suffix\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User last name\n"
                },
                "locale": {
                    "type": "string",
                    "description": "User default location\n"
                },
                "login": {
                    "type": "string",
                    "description": "User Okta login\n"
                },
                "manager": {
                    "type": "string",
                    "description": "Manager of User\n"
                },
                "managerId": {
                    "type": "string",
                    "description": "Manager ID of User\n"
                },
                "middleName": {
                    "type": "string",
                    "description": "User middle name\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "User mobile phone number\n"
                },
                "nickName": {
                    "type": "string",
                    "description": "User nickname\n"
                },
                "oldPassword": {
                    "type": "string",
                    "description": "Old User Password. Should be only set in case the password was not changed using the provider\n",
                    "secret": true
                },
                "organization": {
                    "type": "string",
                    "description": "User organization\n"
                },
                "password": {
                    "type": "string",
                    "description": "User Password\n",
                    "secret": true
                },
                "passwordHash": {
                    "$ref": "#/types/okta:user/UserPasswordHash:UserPasswordHash",
                    "description": "Specifies a hashed password to import into Okta.\n"
                },
                "passwordInlineHook": {
                    "type": "string",
                    "description": "When specified, the Password Inline Hook is triggered to handle verification of the end user's password the first time the user tries to sign in\n"
                },
                "postalAddress": {
                    "type": "string",
                    "description": "User mailing address\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "User preferred language\n"
                },
                "primaryPhone": {
                    "type": "string",
                    "description": "User primary phone number\n"
                },
                "profileUrl": {
                    "type": "string",
                    "description": "User online profile (web page)\n"
                },
                "rawStatus": {
                    "type": "string",
                    "description": "The raw status of the User in Okta - (status is mapped)\n"
                },
                "recoveryAnswer": {
                    "type": "string",
                    "description": "User Password Recovery Answer\n",
                    "secret": true
                },
                "recoveryQuestion": {
                    "type": "string",
                    "description": "User Password Recovery Question\n"
                },
                "secondEmail": {
                    "type": "string",
                    "description": "User secondary email address, used for account recovery\n"
                },
                "skipRoles": {
                    "type": "boolean",
                    "description": "Do not populate user roles information (prevents additional API call)\n",
                    "deprecationMessage": "Because admin_roles has been removed, this attribute is a no op and will be removed"
                },
                "state": {
                    "type": "string",
                    "description": "User state or region\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the User in Okta - remove to set user back to active/provisioned\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "User street address\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "User default timezone\n"
                },
                "title": {
                    "type": "string",
                    "description": "User title\n"
                },
                "userType": {
                    "type": "string",
                    "description": "User employee type\n"
                },
                "zipCode": {
                    "type": "string",
                    "description": "User zipcode or postal code\n"
                }
            },
            "required": [
                "customProfileAttributes",
                "email",
                "firstName",
                "lastName",
                "login",
                "rawStatus"
            ],
            "inputProperties": {
                "city": {
                    "type": "string",
                    "description": "User city\n"
                },
                "costCenter": {
                    "type": "string",
                    "description": "User cost center\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "User country code\n"
                },
                "customProfileAttributes": {
                    "type": "string",
                    "description": "JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows.\n"
                },
                "customProfileAttributesToIgnores": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom_profile_attribute keys that should be excluded from being managed by Terraform.\n"
                },
                "department": {
                    "type": "string",
                    "description": "User department\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "User display name, suitable to show end users\n"
                },
                "division": {
                    "type": "string",
                    "description": "User division\n"
                },
                "email": {
                    "type": "string",
                    "description": "User primary email address\n"
                },
                "employeeNumber": {
                    "type": "string",
                    "description": "User employee number\n"
                },
                "expirePasswordOnCreate": {
                    "type": "boolean",
                    "description": "If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User first name\n"
                },
                "honorificPrefix": {
                    "type": "string",
                    "description": "User honorific prefix\n"
                },
                "honorificSuffix": {
                    "type": "string",
                    "description": "User honorific suffix\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User last name\n"
                },
                "locale": {
                    "type": "string",
                    "description": "User default location\n"
                },
                "login": {
                    "type": "string",
                    "description": "User Okta login\n"
                },
                "manager": {
                    "type": "string",
                    "description": "Manager of User\n"
                },
                "managerId": {
                    "type": "string",
                    "description": "Manager ID of User\n"
                },
                "middleName": {
                    "type": "string",
                    "description": "User middle name\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "User mobile phone number\n"
                },
                "nickName": {
                    "type": "string",
                    "description": "User nickname\n"
                },
                "oldPassword": {
                    "type": "string",
                    "description": "Old User Password. Should be only set in case the password was not changed using the provider\n",
                    "secret": true
                },
                "organization": {
                    "type": "string",
                    "description": "User organization\n"
                },
                "password": {
                    "type": "string",
                    "description": "User Password\n",
                    "secret": true
                },
                "passwordHash": {
                    "$ref": "#/types/okta:user/UserPasswordHash:UserPasswordHash",
                    "description": "Specifies a hashed password to import into Okta.\n"
                },
                "passwordInlineHook": {
                    "type": "string",
                    "description": "When specified, the Password Inline Hook is triggered to handle verification of the end user's password the first time the user tries to sign in\n"
                },
                "postalAddress": {
                    "type": "string",
                    "description": "User mailing address\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "User preferred language\n"
                },
                "primaryPhone": {
                    "type": "string",
                    "description": "User primary phone number\n"
                },
                "profileUrl": {
                    "type": "string",
                    "description": "User online profile (web page)\n"
                },
                "recoveryAnswer": {
                    "type": "string",
                    "description": "User Password Recovery Answer\n",
                    "secret": true
                },
                "recoveryQuestion": {
                    "type": "string",
                    "description": "User Password Recovery Question\n"
                },
                "secondEmail": {
                    "type": "string",
                    "description": "User secondary email address, used for account recovery\n"
                },
                "skipRoles": {
                    "type": "boolean",
                    "description": "Do not populate user roles information (prevents additional API call)\n",
                    "deprecationMessage": "Because admin_roles has been removed, this attribute is a no op and will be removed"
                },
                "state": {
                    "type": "string",
                    "description": "User state or region\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the User in Okta - remove to set user back to active/provisioned\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "User street address\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "User default timezone\n"
                },
                "title": {
                    "type": "string",
                    "description": "User title\n"
                },
                "userType": {
                    "type": "string",
                    "description": "User employee type\n"
                },
                "zipCode": {
                    "type": "string",
                    "description": "User zipcode or postal code\n"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "lastName",
                "login"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "User city\n"
                    },
                    "costCenter": {
                        "type": "string",
                        "description": "User cost center\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "User country code\n"
                    },
                    "customProfileAttributes": {
                        "type": "string",
                        "description": "JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows.\n"
                    },
                    "customProfileAttributesToIgnores": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of custom_profile_attribute keys that should be excluded from being managed by Terraform.\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "User department\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "User display name, suitable to show end users\n"
                    },
                    "division": {
                        "type": "string",
                        "description": "User division\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User primary email address\n"
                    },
                    "employeeNumber": {
                        "type": "string",
                        "description": "User employee number\n"
                    },
                    "expirePasswordOnCreate": {
                        "type": "boolean",
                        "description": "If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name\n"
                    },
                    "honorificPrefix": {
                        "type": "string",
                        "description": "User honorific prefix\n"
                    },
                    "honorificSuffix": {
                        "type": "string",
                        "description": "User honorific suffix\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "User default location\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "User Okta login\n"
                    },
                    "manager": {
                        "type": "string",
                        "description": "Manager of User\n"
                    },
                    "managerId": {
                        "type": "string",
                        "description": "Manager ID of User\n"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "User middle name\n"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "User mobile phone number\n"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "User nickname\n"
                    },
                    "oldPassword": {
                        "type": "string",
                        "description": "Old User Password. Should be only set in case the password was not changed using the provider\n",
                        "secret": true
                    },
                    "organization": {
                        "type": "string",
                        "description": "User organization\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "User Password\n",
                        "secret": true
                    },
                    "passwordHash": {
                        "$ref": "#/types/okta:user/UserPasswordHash:UserPasswordHash",
                        "description": "Specifies a hashed password to import into Okta.\n"
                    },
                    "passwordInlineHook": {
                        "type": "string",
                        "description": "When specified, the Password Inline Hook is triggered to handle verification of the end user's password the first time the user tries to sign in\n"
                    },
                    "postalAddress": {
                        "type": "string",
                        "description": "User mailing address\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "User preferred language\n"
                    },
                    "primaryPhone": {
                        "type": "string",
                        "description": "User primary phone number\n"
                    },
                    "profileUrl": {
                        "type": "string",
                        "description": "User online profile (web page)\n"
                    },
                    "rawStatus": {
                        "type": "string",
                        "description": "The raw status of the User in Okta - (status is mapped)\n"
                    },
                    "recoveryAnswer": {
                        "type": "string",
                        "description": "User Password Recovery Answer\n",
                        "secret": true
                    },
                    "recoveryQuestion": {
                        "type": "string",
                        "description": "User Password Recovery Question\n"
                    },
                    "secondEmail": {
                        "type": "string",
                        "description": "User secondary email address, used for account recovery\n"
                    },
                    "skipRoles": {
                        "type": "boolean",
                        "description": "Do not populate user roles information (prevents additional API call)\n",
                        "deprecationMessage": "Because admin_roles has been removed, this attribute is a no op and will be removed"
                    },
                    "state": {
                        "type": "string",
                        "description": "User state or region\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the User in Okta - remove to set user back to active/provisioned\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "User street address\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "User default timezone\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "User title\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "User employee type\n"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "User zipcode or postal code\n"
                    }
                },
                "type": "object"
            }
        },
        "okta:user/userType:UserType": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-readable description of the User type\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user type\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user type\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-readable description of the User type\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user type\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user type\n"
                }
            },
            "requiredInputs": [
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserType resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-readable description of the User type\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user type\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user type\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "okta:Index/getDomain:getDomain": {
            "description": "Get a domain from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = new okta.Domain(\"example\", {});\nconst by-name = okta.Index.getDomain({\n    domainIdOrName: \"www.example.com\",\n});\nconst by-id = okta.Index.getDomainOutput({\n    domainIdOrName: example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.Domain(\"example\")\nby_name = okta.Index.get_domain(domain_id_or_name=\"www.example.com\")\nby_id = okta.Index.get_domain_output(domain_id_or_name=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Okta.Domain(\"example\");\n\n    var by_name = Okta.Index.GetDomain.Invoke(new()\n    {\n        DomainIdOrName = \"www.example.com\",\n    });\n\n    var by_id = Okta.Index.GetDomain.Invoke(new()\n    {\n        DomainIdOrName = example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/Index\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := okta.NewDomain(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Index.GetDomain(ctx, \u0026index.GetDomainArgs{\n\t\t\tDomainIdOrName: \"www.example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = Index.GetDomainOutput(ctx, index.GetDomainOutputArgs{\n\t\t\tDomainIdOrName: example.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.Domain;\nimport com.pulumi.okta.Index.IndexFunctions;\nimport com.pulumi.okta.Index.inputs.GetDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Domain(\"example\");\n\n        final var by-name = IndexFunctions.getDomain(GetDomainArgs.builder()\n            .domainIdOrName(\"www.example.com\")\n            .build());\n\n        final var by-id = IndexFunctions.getDomain(GetDomainArgs.builder()\n            .domainIdOrName(example.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: okta:Domain\nvariables:\n  by-name:\n    fn::invoke:\n      Function: okta:Index:getDomain\n      Arguments:\n        domainIdOrName: www.example.com\n  by-id:\n    fn::invoke:\n      Function: okta:Index:getDomain\n      Arguments:\n        domainIdOrName: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "domainIdOrName": {
                        "type": "string",
                        "description": "Brand ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainIdOrName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "certificateSourceType": {
                        "type": "string",
                        "description": "Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED\n"
                    },
                    "dnsRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:Index/getDomainDnsRecord:getDomainDnsRecord"
                        },
                        "description": "TXT and CNAME records to be registered for the Domain\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain name\n"
                    },
                    "domainIdOrName": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Domain\n"
                    },
                    "publicCertificate": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Certificate metadata for the Domain\n"
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "Status of the domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificateSourceType",
                    "dnsRecords",
                    "domain",
                    "domainIdOrName",
                    "id",
                    "publicCertificate",
                    "validationStatus"
                ]
            }
        },
        "okta:Index/getOrgMetadata:getOrgMetadata": {
            "description": "Retrieves the well-known org metadata, which includes the id, configured custom domains, authentication pipeline, and various other org settings.\n\n- [Org Well Known Metadata Reference](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/OrgSetting/#tag/OrgSetting/operation/getWellknownOrgMetadata)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.Index.getOrgMetadata({});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.Index.get_org_metadata()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.Index.GetOrgMetadata.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/Index\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Index.GetOrgMetadata(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.Index.IndexFunctions;\nimport com.pulumi.okta.Index.inputs.GetOrgMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = IndexFunctions.getOrgMetadata();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:Index:getOrgMetadata\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgMetadata.\n",
                "properties": {
                    "domains": {
                        "$ref": "#/types/okta:Index/getOrgMetadataDomains:getOrgMetadataDomains",
                        "description": "The URIs for the org's configured domains.\n"
                    },
                    "settings": {
                        "$ref": "#/types/okta:Index/getOrgMetadataSettings:getOrgMetadataSettings",
                        "description": "The wellknown org settings (safe for public consumption).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrgMetadata.\n",
                "properties": {
                    "domains": {
                        "$ref": "#/types/okta:Index/getOrgMetadataDomains:getOrgMetadataDomains",
                        "description": "The URIs for the org's configured domains.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the Org.\n"
                    },
                    "pipeline": {
                        "type": "string",
                        "description": "The authentication pipeline of the org. idx means the org is using the Identity Engine, while v1 means the org is using the Classic authentication pipeline.\n"
                    },
                    "settings": {
                        "$ref": "#/types/okta:Index/getOrgMetadataSettings:getOrgMetadataSettings",
                        "description": "The wellknown org settings (safe for public consumption).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "pipeline"
                ]
            }
        },
        "okta:app/getApp:getApp": {
            "description": "Get an application of any kind from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.app.getApp({\n    label: \"Example App\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.app.get_app(label=\"Example App\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.App.GetApp.Invoke(new()\n    {\n        Label = \"Example App\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := app.GetApp(ctx, \u0026app.GetAppArgs{\n\t\t\tLabel: pulumi.StringRef(\"Example App\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.app.AppFunctions;\nimport com.pulumi.okta.app.inputs.GetAppArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AppFunctions.getApp(GetAppArgs.builder()\n            .label(\"Example App\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:app:getApp\n      Arguments:\n        label: Example App\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApp.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with\n\t\t\tlabel_prefix and id. Label uses the ?q=\\n\\n query parameter exposed by\n\t\t\tOkta's List Apps API. The API will search both name and label using that\n\t\t\tquery. Therefore similarily named and labeled apps may be returned in the query\n\t\t\tand have the unitended result of associating the wrong app with this data\n\t\t\tsource. See:\n\t\t\thttps://developer.okta.com/docs/reference/api/apps/#list-applications\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApp.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Groups associated with the application\n",
                        "deprecationMessage": "The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with\n\t\t\tlabel_prefix and id. Label uses the ?q=\\n\\n query parameter exposed by\n\t\t\tOkta's List Apps API. The API will search both name and label using that\n\t\t\tquery. Therefore similarily named and labeled apps may be returned in the query\n\t\t\tand have the unitended result of associating the wrong app with this data\n\t\t\tsource. See:\n\t\t\thttps://developer.okta.com/docs/reference/api/apps/#list-applications\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Discoverable resources related to the app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of application.\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Users associated with the application\n",
                        "deprecationMessage": "The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "links",
                    "name",
                    "status",
                    "users"
                ]
            }
        },
        "okta:app/getMetadataSaml:getMetadataSaml": {
            "description": "Get a SAML application's metadata from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.app.getMetadataSaml({\n    appId: \"\u003capp id\u003e\",\n    keyId: \"\u003ccert key id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.app.get_metadata_saml(app_id=\"\u003capp id\u003e\",\n    key_id=\"\u003ccert key id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.App.GetMetadataSaml.Invoke(new()\n    {\n        AppId = \"\u003capp id\u003e\",\n        KeyId = \"\u003ccert key id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := app.GetMetadataSaml(ctx, \u0026app.GetMetadataSamlArgs{\n\t\t\tAppId: \"\u003capp id\u003e\",\n\t\t\tKeyId: pulumi.StringRef(\"\u003ccert key id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.app.AppFunctions;\nimport com.pulumi.okta.app.inputs.GetMetadataSamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AppFunctions.getMetadataSaml(GetMetadataSamlArgs.builder()\n            .appId(\"\u003capp id\u003e\")\n            .keyId(\"\u003ccert key id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:app:getMetadataSaml\n      Arguments:\n        appId: \u003capp id\u003e\n        keyId: \u003ccert key id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMetadataSaml.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The application ID.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "Certificate Key ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetadataSaml.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The application ID.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Public certificate from application metadata.\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf\n"
                    },
                    "httpPostBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.\n"
                    },
                    "httpRedirectBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "Certificate Key ID.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Raw metadata of application.\n"
                    },
                    "wantAuthnRequestsSigned": {
                        "type": "boolean",
                        "description": "Whether authn requests are signed.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "certificate",
                    "entityId",
                    "httpPostBinding",
                    "httpRedirectBinding",
                    "metadata",
                    "wantAuthnRequestsSigned",
                    "id"
                ]
            }
        },
        "okta:app/getOauth:getOauth": {
            "description": "Get a OIDC application from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.app.getOauth({\n    label: \"Example App\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.app.get_oauth(label=\"Example App\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.App.GetOauth.Invoke(new()\n    {\n        Label = \"Example App\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := app.GetOauth(ctx, \u0026app.GetOauthArgs{\n\t\t\tLabel: pulumi.StringRef(\"Example App\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.app.AppFunctions;\nimport com.pulumi.okta.app.inputs.GetOauthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = AppFunctions.getOauth(GetOauthArgs.builder()\n            .label(\"Example App\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:app:getOauth\n      Arguments:\n        label: Example App\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOauth.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with\n\t\t\tlabel_prefix and id. Label uses the ?q=\\n\\n query parameter exposed by\n\t\t\tOkta's List Apps API. The API will search both name and label using that\n\t\t\tquery. Therefore similarily named and labeled apps may be returned in the query\n\t\t\tand have the unitended result of associating the wrong app with this data\n\t\t\tsource. See:\n\t\t\thttps://developer.okta.com/docs/reference/api/apps/#list-applications\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOauth.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuth client ID\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth client secret\n",
                        "secret": true
                    },
                    "clientUri": {
                        "type": "string",
                        "description": "URI to a web page providing information about the client.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OAuth 2.0 grant types\n"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with\n\t\t\tlabel_prefix and id. Label uses the ?q=\\n\\n query parameter exposed by\n\t\t\tOkta's List Apps API. The API will search both name and label using that\n\t\t\tquery. Therefore similarily named and labeled apps may be returned in the query\n\t\t\tand have the unitended result of associating the wrong app with this data\n\t\t\tsource. See:\n\t\t\thttps://developer.okta.com/docs/reference/api/apps/#list-applications\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Discoverable resources related to the app\n"
                    },
                    "loginMode": {
                        "type": "string",
                        "description": "The type of Idp-Initiated login that the client supports, if any\n"
                    },
                    "loginScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scopes to use for the request when 'login_mode' == OKTA\n"
                    },
                    "loginUri": {
                        "type": "string",
                        "description": "URI that initiates login.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URI that references a logo for the client.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of application.\n"
                    },
                    "policyUri": {
                        "type": "string",
                        "description": "URI to web page providing client policy document.\n"
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URIs for redirection after logout\n"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URIs for use in the redirect-based flow.\n"
                    },
                    "responseTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OAuth 2.0 response type strings.\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of OAuth application.\n"
                    },
                    "wildcardRedirect": {
                        "type": "string",
                        "description": "Indicates if the client is allowed to use wildcard matching of redirect_uris\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoSubmitToolbar",
                    "clientId",
                    "clientSecret",
                    "clientUri",
                    "grantTypes",
                    "hideIos",
                    "hideWeb",
                    "links",
                    "loginMode",
                    "loginScopes",
                    "loginUri",
                    "logoUri",
                    "name",
                    "policyUri",
                    "postLogoutRedirectUris",
                    "redirectUris",
                    "responseTypes",
                    "status",
                    "type",
                    "wildcardRedirect"
                ]
            }
        },
        "okta:app/getSaml:getSaml": {
            "description": "Get a SAML application from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.app.getSaml({\n    label: \"Example App\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.app.get_saml(label=\"Example App\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.App.GetSaml.Invoke(new()\n    {\n        Label = \"Example App\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := app.LookupSaml(ctx, \u0026app.LookupSamlArgs{\n\t\t\tLabel: pulumi.StringRef(\"Example App\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.app.AppFunctions;\nimport com.pulumi.okta.app.inputs.GetSamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AppFunctions.getSaml(GetSamlArgs.builder()\n            .label(\"Example App\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:app:getSaml\n      Arguments:\n        label: Example App\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSaml.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with label_prefix and id. Label\n\t\t\tuses the ?q=\\n\\n query parameter exposed by Okta's API. It should be noted that at this time\n\t\t\tthis searches both name and label. This is used to avoid paginating through all applications.\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "requestCompressed": {
                        "type": "boolean",
                        "description": "Denotes whether the request is compressed or not.\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSaml.\n",
                "properties": {
                    "accessibilityErrorRedirectUrl": {
                        "type": "string",
                        "description": "Custom error page URL\n"
                    },
                    "accessibilityLoginRedirectUrl": {
                        "type": "string",
                        "description": "Custom login page URL\n"
                    },
                    "accessibilitySelfService": {
                        "type": "boolean",
                        "description": "Enable self service\n"
                    },
                    "acsEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ACS endpoints for this SAML application\n"
                    },
                    "activeOnly": {
                        "type": "boolean",
                        "description": "Search only ACTIVE applications.\n"
                    },
                    "appSettingsJson": {
                        "type": "string",
                        "description": "Application settings in JSON format\n"
                    },
                    "assertionSigned": {
                        "type": "boolean",
                        "description": "Determines whether the SAML assertion is digitally signed\n"
                    },
                    "attributeStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:app/getSamlAttributeStatement:getSamlAttributeStatement"
                        }
                    },
                    "audience": {
                        "type": "string",
                        "description": "Audience Restriction\n"
                    },
                    "authnContextClassRef": {
                        "type": "string",
                        "description": "Identifies the SAML authentication context class for the assertion’s authentication statement\n"
                    },
                    "autoSubmitToolbar": {
                        "type": "boolean",
                        "description": "Display auto submit toolbar\n"
                    },
                    "defaultRelayState": {
                        "type": "string",
                        "description": "Identifies a specific application resource in an IDP initiated SSO scenario.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Identifies the location where the SAML response is intended to be sent inside of the SAML assertion\n"
                    },
                    "digestAlgorithm": {
                        "type": "string",
                        "description": "Determines the digest algorithm used to digitally sign the SAML assertion and response\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "features to enable\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Groups associated with the application\n",
                        "deprecationMessage": "The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`"
                    },
                    "hideIos": {
                        "type": "boolean",
                        "description": "Do not display application icon on mobile app\n"
                    },
                    "hideWeb": {
                        "type": "boolean",
                        "description": "Do not display application icon to users\n"
                    },
                    "honorForceAuthn": {
                        "type": "boolean",
                        "description": "Prompt user to re-authenticate if SP asks for it\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of application to retrieve, conflicts with label and label_prefix.\n"
                    },
                    "idpIssuer": {
                        "type": "string",
                        "description": "SAML issuer ID\n"
                    },
                    "inlineHookId": {
                        "type": "string",
                        "description": "Saml Inline Hook setting\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "Certificate ID\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the app to retrieve, conflicts with label_prefix and id. Label\n\t\t\tuses the ?q=\\n\\n query parameter exposed by Okta's API. It should be noted that at this time\n\t\t\tthis searches both name and label. This is used to avoid paginating through all applications.\n"
                    },
                    "labelPrefix": {
                        "type": "string",
                        "description": "Label prefix of the app to retrieve, conflicts with label and id. This will tell the\n\t\t\tprovider to do a starts with query as opposed to an equals query.\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Discoverable resources related to the app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of application.\n"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "The location where the app may present the SAML assertion\n"
                    },
                    "requestCompressed": {
                        "type": "boolean",
                        "description": "Denotes whether the request is compressed or not.\n"
                    },
                    "responseSigned": {
                        "type": "boolean",
                        "description": "Determines whether the SAML auth response message is digitally signed\n"
                    },
                    "samlSignedRequestEnabled": {
                        "type": "boolean",
                        "description": "SAML Signed Request enabled\n"
                    },
                    "signatureAlgorithm": {
                        "type": "string",
                        "description": "Signature algorithm used ot digitally sign the assertion and response\n"
                    },
                    "singleLogoutCertificate": {
                        "type": "string",
                        "description": "x509 encoded certificate that the Service Provider uses to sign Single Logout requests\n"
                    },
                    "singleLogoutIssuer": {
                        "type": "string",
                        "description": "The issuer of the Service Provider that generates the Single Logout request\n"
                    },
                    "singleLogoutUrl": {
                        "type": "string",
                        "description": "The location where the logout response is sent\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because groups has been removed, this attribute is a no op and will be removed"
                    },
                    "skipUsers": {
                        "type": "boolean",
                        "description": "Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources\n",
                        "deprecationMessage": "Because users has been removed, this attribute is a no op and will be removed"
                    },
                    "spIssuer": {
                        "type": "string",
                        "description": "SAML SP issuer ID\n"
                    },
                    "ssoUrl": {
                        "type": "string",
                        "description": "Single Sign On URL\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of application.\n"
                    },
                    "subjectNameIdFormat": {
                        "type": "string",
                        "description": "Identifies the SAML processing rules.\n"
                    },
                    "subjectNameIdTemplate": {
                        "type": "string",
                        "description": "Template for app user's username when a user is assigned to the app\n"
                    },
                    "userNameTemplate": {
                        "type": "string",
                        "description": "Username template\n"
                    },
                    "userNameTemplatePushStatus": {
                        "type": "string",
                        "description": "Push username on update\n"
                    },
                    "userNameTemplateSuffix": {
                        "type": "string",
                        "description": "Username template suffix\n"
                    },
                    "userNameTemplateType": {
                        "type": "string",
                        "description": "Username template type\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Users associated with the application\n",
                        "deprecationMessage": "The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`"
                    }
                },
                "type": "object",
                "required": [
                    "accessibilityErrorRedirectUrl",
                    "accessibilityLoginRedirectUrl",
                    "accessibilitySelfService",
                    "acsEndpoints",
                    "appSettingsJson",
                    "assertionSigned",
                    "attributeStatements",
                    "audience",
                    "authnContextClassRef",
                    "autoSubmitToolbar",
                    "defaultRelayState",
                    "destination",
                    "digestAlgorithm",
                    "features",
                    "groups",
                    "hideIos",
                    "hideWeb",
                    "honorForceAuthn",
                    "idpIssuer",
                    "inlineHookId",
                    "keyId",
                    "links",
                    "name",
                    "recipient",
                    "responseSigned",
                    "samlSignedRequestEnabled",
                    "signatureAlgorithm",
                    "singleLogoutCertificate",
                    "singleLogoutIssuer",
                    "singleLogoutUrl",
                    "spIssuer",
                    "ssoUrl",
                    "status",
                    "subjectNameIdFormat",
                    "subjectNameIdTemplate",
                    "userNameTemplate",
                    "userNameTemplatePushStatus",
                    "userNameTemplateSuffix",
                    "userNameTemplateType",
                    "users"
                ]
            }
        },
        "okta:auth/getServer:getServer": {
            "description": "Get an auth server from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.auth.getServer({\n    name: \"Example Auth\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.auth.get_server(name=\"Example Auth\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Auth.GetServer.Invoke(new()\n    {\n        Name = \"Example Auth\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth.LookupServer(ctx, \u0026auth.LookupServerArgs{\n\t\t\tName: \"Example Auth\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.auth.AuthFunctions;\nimport com.pulumi.okta.auth.inputs.GetServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AuthFunctions.getServer(GetServerArgs.builder()\n            .name(\"Example Auth\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:auth:getServer\n      Arguments:\n        name: Example Auth\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the auth server to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "audiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Description of Authorization server.\n"
                    },
                    "credentialsLastRotated": {
                        "type": "string",
                        "description": "Last time credentials were rotated.\n"
                    },
                    "credentialsNextRotation": {
                        "type": "string",
                        "description": "Next time credentials will be rotated\n"
                    },
                    "credentialsRotationMode": {
                        "type": "string",
                        "description": "Mode of credential rotation, auto or manual.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of Authorization server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The complete URL of the authorization server. This becomes the `iss` claim in an access token.\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Can be set to `CUSTOM_URL` or `ORG_URL`\n"
                    },
                    "kid": {
                        "type": "string",
                        "description": "Auth server key id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the auth server to retrieve.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The activation status of the authorization server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "audiences",
                    "credentialsLastRotated",
                    "credentialsNextRotation",
                    "credentialsRotationMode",
                    "description",
                    "issuer",
                    "issuerMode",
                    "kid",
                    "name",
                    "status",
                    "id"
                ]
            }
        },
        "okta:auth/getServerPolicy:getServerPolicy": {
            "description": "Get an authorization server policy from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.auth.getServerPolicy({\n    authServerId: \"\u003cauth server id\u003e\",\n    name: \"staff\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.auth.get_server_policy(auth_server_id=\"\u003cauth server id\u003e\",\n    name=\"staff\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Auth.GetServerPolicy.Invoke(new()\n    {\n        AuthServerId = \"\u003cauth server id\u003e\",\n        Name = \"staff\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth.LookupServerPolicy(ctx, \u0026auth.LookupServerPolicyArgs{\n\t\t\tAuthServerId: \"\u003cauth server id\u003e\",\n\t\t\tName:         \"staff\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.auth.AuthFunctions;\nimport com.pulumi.okta.auth.inputs.GetServerPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AuthFunctions.getServerPolicy(GetServerPolicyArgs.builder()\n            .authServerId(\"\u003cauth server id\u003e\")\n            .name(\"staff\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:auth:getServerPolicy\n      Arguments:\n        authServerId: \u003cauth server id\u003e\n        name: staff\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServerPolicy.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerPolicy.\n",
                "properties": {
                    "assignedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of clients this policy is assigned to. `[ALL_CLIENTS]` is a special value when policy is assigned to all clients.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of authorization server policy.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of the auth server policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignedClients",
                    "authServerId",
                    "description",
                    "name",
                    "priority",
                    "id"
                ]
            }
        },
        "okta:auth/getServerScopes:getServerScopes": {
            "description": "Get a list of authorization server scopes from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.auth.getServerScopes({\n    authServerId: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.auth.get_server_scopes(auth_server_id=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.Auth.GetServerScopes.Invoke(new()\n    {\n        AuthServerId = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth.GetServerScopes(ctx, \u0026auth.GetServerScopesArgs{\n\t\t\tAuthServerId: \"default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.auth.AuthFunctions;\nimport com.pulumi.okta.auth.inputs.GetServerScopesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = AuthFunctions.getServerScopes(GetServerScopesArgs.builder()\n            .authServerId(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:auth:getServerScopes\n      Arguments:\n        authServerId: default\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServerScopes.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerScopes.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:auth/getServerScopesScope:getServerScopesScope"
                        },
                        "description": "Collection of authorization server scopes retrieved from Okta with the following properties.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId",
                    "scopes",
                    "id"
                ]
            }
        },
        "okta:group/getEveryoneGroup:getEveryoneGroup": {
            "description": "Use this data source to retrieve the `Everyone` group from Okta. The \nsame can be achieved with the `okta.group.Group` data\nsource with `name = \"Everyone\"`. This is simply a shortcut.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.group.getEveryoneGroup({});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.group.get_everyone_group()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Group.GetEveryoneGroup.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/group\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := group.GetEveryoneGroup(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.group.GroupFunctions;\nimport com.pulumi.okta.group.inputs.GetEveryoneGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GroupFunctions.getEveryoneGroup();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:group:getEveryoneGroup\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEveryoneGroup.\n",
                "properties": {
                    "includeUsers": {
                        "type": "boolean",
                        "description": "Fetch group users, having default off cuts down on API calls.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEveryoneGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeUsers": {
                        "type": "boolean",
                        "description": "Fetch group users, having default off cuts down on API calls.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id"
                ]
            }
        },
        "okta:group/getGroup:getGroup": {
            "description": "Get a group from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.group.getGroup({\n    name: \"Example App\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.group.get_group(name=\"Example App\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Group.GetGroup.Invoke(new()\n    {\n        Name = \"Example App\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/group\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := group.LookupGroup(ctx, \u0026group.LookupGroupArgs{\n\t\t\tName: pulumi.StringRef(\"Example App\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.group.GroupFunctions;\nimport com.pulumi.okta.group.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GroupFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"Example App\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:group:getGroup\n      Arguments:\n        name: Example App\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of group.\n"
                    },
                    "includeUsers": {
                        "type": "boolean",
                        "description": "Fetch group users, having default off cuts down on API calls.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of group.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of group.\n"
                    },
                    "includeUsers": {
                        "type": "boolean",
                        "description": "Fetch group users, having default off cuts down on API calls.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of group.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Users associated with the group. This can also be done per user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "users"
                ]
            }
        },
        "okta:group/getRule:getRule": {
            "description": "Get a group rule from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.group.getRule({\n    id: okta_group_rule.example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.group.get_rule(id=okta_group_rule[\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.Group.GetRule.Invoke(new()\n    {\n        Id = okta_group_rule.Example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/group\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := group.LookupRule(ctx, \u0026group.LookupRuleArgs{\n\t\t\tId: pulumi.StringRef(okta_group_rule.Example.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.group.GroupFunctions;\nimport com.pulumi.okta.group.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GroupFunctions.getRule(GetRuleArgs.builder()\n            .id(okta_group_rule.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:group:getRule\n      Arguments:\n        id: ${okta_group_rule.example.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Group Rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Group Rule.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "expressionType": {
                        "type": "string",
                        "description": "The expression type to use to invoke the rule.\n"
                    },
                    "expressionValue": {
                        "type": "string",
                        "description": "The expression value.\n"
                    },
                    "groupAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of group ids to assign the users to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Group Rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Group Rule.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "usersExcludeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of user IDs that would be excluded when rules are processed.\n"
                    }
                },
                "type": "object",
                "required": [
                    "expressionType",
                    "expressionValue",
                    "groupAssignments",
                    "usersExcludeds"
                ]
            }
        },
        "okta:idp/getMetadataSaml:getMetadataSaml": {
            "description": "Get SAML IdP metadata from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.idp.getMetadataSaml({\n    idpId: \"\u003cidp id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.idp.get_metadata_saml(idp_id=\"\u003cidp id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Idp.GetMetadataSaml.Invoke(new()\n    {\n        IdpId = \"\u003cidp id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := idp.GetMetadataSaml(ctx, \u0026idp.GetMetadataSamlArgs{\n\t\t\tIdpId: pulumi.StringRef(\"\u003cidp id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.idp.IdpFunctions;\nimport com.pulumi.okta.idp.inputs.GetMetadataSamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IdpFunctions.getMetadataSaml(GetMetadataSamlArgs.builder()\n            .idpId(\"\u003cidp id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:idp:getMetadataSaml\n      Arguments:\n        idpId: \u003cidp id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMetadataSaml.\n",
                "properties": {
                    "idpId": {
                        "type": "string",
                        "description": "The id of the IdP to retrieve metadata for.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMetadataSaml.\n",
                "properties": {
                    "assertionsSigned": {
                        "type": "boolean",
                        "description": "Whether assertions are signed.\n"
                    },
                    "authnRequestSigned": {
                        "type": "boolean",
                        "description": "Whether authn requests are signed.\n"
                    },
                    "encryptionCertificate": {
                        "type": "string",
                        "description": "SAML request encryption certificate.\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf\n"
                    },
                    "httpPostBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.\n"
                    },
                    "httpRedirectBinding": {
                        "type": "string",
                        "description": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "The id of the IdP to retrieve metadata for.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Raw IdP metadata.\n"
                    },
                    "signingCertificate": {
                        "type": "string",
                        "description": "SAML request signing certificate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assertionsSigned",
                    "authnRequestSigned",
                    "encryptionCertificate",
                    "entityId",
                    "httpPostBinding",
                    "httpRedirectBinding",
                    "metadata",
                    "signingCertificate",
                    "id"
                ]
            }
        },
        "okta:idp/getOidc:getOidc": {
            "description": "Get a OIDC IdP from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.idp.getOidc({\n    name: \"Example Provider\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.idp.get_oidc(name=\"Example Provider\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Idp.GetOidc.Invoke(new()\n    {\n        Name = \"Example Provider\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := idp.LookupOidc(ctx, \u0026idp.LookupOidcArgs{\n\t\t\tName: pulumi.StringRef(\"Example Provider\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.idp.IdpFunctions;\nimport com.pulumi.okta.idp.inputs.GetOidcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IdpFunctions.getOidc(GetOidcArgs.builder()\n            .name(\"Example Provider\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:idp:getOidc\n      Arguments:\n        name: Example Provider\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOidc.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of idp.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the idp.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOidc.\n",
                "properties": {
                    "authorizationBinding": {
                        "type": "string",
                        "description": "The method of making an authorization request.\n"
                    },
                    "authorizationUrl": {
                        "type": "string",
                        "description": "IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Unique identifier issued by AS for the Okta IdP instance.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret issued by AS for the Okta IdP instance.\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of idp.\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic.\n"
                    },
                    "issuerUrl": {
                        "type": "string",
                        "description": "URI that identifies the issuer.\n"
                    },
                    "jwksBinding": {
                        "type": "string",
                        "description": "The method of making a request for the OIDC JWKS.\n"
                    },
                    "jwksUrl": {
                        "type": "string",
                        "description": "Endpoint where the keys signer publishes its keys in a JWK Set.\n"
                    },
                    "maxClockSkew": {
                        "type": "integer",
                        "description": "Maximum allowable clock-skew when processing messages from the IdP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the idp.\n"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "The type of protocol to use.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scopes of the IdP.\n"
                    },
                    "tokenBinding": {
                        "type": "string",
                        "description": "The method of making a token request.\n"
                    },
                    "tokenUrl": {
                        "type": "string",
                        "description": "IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of idp.\n"
                    },
                    "userInfoBinding": {
                        "type": "string",
                        "description": "The method of making a user info request.\n"
                    },
                    "userInfoUrl": {
                        "type": "string",
                        "description": "Protected resource endpoint that returns claims about the authenticated user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorizationBinding",
                    "authorizationUrl",
                    "clientId",
                    "clientSecret",
                    "issuerMode",
                    "issuerUrl",
                    "jwksBinding",
                    "jwksUrl",
                    "maxClockSkew",
                    "protocolType",
                    "scopes",
                    "tokenBinding",
                    "tokenUrl",
                    "type",
                    "userInfoBinding",
                    "userInfoUrl"
                ]
            }
        },
        "okta:idp/getSaml:getSaml": {
            "description": "Get a SAML IdP from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.idp.getSaml({\n    name: \"Example App\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.idp.get_saml(name=\"Example App\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Idp.GetSaml.Invoke(new()\n    {\n        Name = \"Example App\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := idp.LookupSaml(ctx, \u0026idp.LookupSamlArgs{\n\t\t\tName: pulumi.StringRef(\"Example App\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.idp.IdpFunctions;\nimport com.pulumi.okta.idp.inputs.GetSamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IdpFunctions.getSaml(GetSamlArgs.builder()\n            .name(\"Example App\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:idp:getSaml\n      Arguments:\n        name: Example App\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSaml.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of idp.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the idp.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSaml.\n",
                "properties": {
                    "acsBinding": {
                        "type": "string",
                        "description": "ACS binding\n"
                    },
                    "acsType": {
                        "type": "string",
                        "description": "Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.\n"
                    },
                    "audience": {
                        "type": "string",
                        "description": "URI that identifies the target Okta IdP instance (SP)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of idp.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "URI that identifies the issuer (IdP).\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.\n"
                    },
                    "kid": {
                        "type": "string",
                        "description": "Key ID reference to the IdP's X.509 signature certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the idp.\n"
                    },
                    "ssoBinding": {
                        "type": "string",
                        "description": "Single sign-on binding.\n"
                    },
                    "ssoDestination": {
                        "type": "string",
                        "description": "SSO request binding, HTTP-POST or HTTP-REDIRECT.\n"
                    },
                    "ssoUrl": {
                        "type": "string",
                        "description": "Single sign-on url.\n"
                    },
                    "subjectFilter": {
                        "type": "string",
                        "description": "Regular expression pattern used to filter untrusted IdP usernames.\n"
                    },
                    "subjectFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Expression to generate or transform a unique username for the IdP user.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of idp.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acsBinding",
                    "acsType",
                    "audience",
                    "issuer",
                    "issuerMode",
                    "kid",
                    "ssoBinding",
                    "ssoDestination",
                    "ssoUrl",
                    "subjectFilter",
                    "subjectFormats",
                    "type"
                ]
            }
        },
        "okta:idp/getSocial:getSocial": {
            "description": "Get a social IdP from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.idp.getSocial({\n    name: \"My Facebook IdP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.idp.get_social(name=\"My Facebook IdP\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Idp.GetSocial.Invoke(new()\n    {\n        Name = \"My Facebook IdP\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := idp.LookupSocial(ctx, \u0026idp.LookupSocialArgs{\n\t\t\tName: pulumi.StringRef(\"My Facebook IdP\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.idp.IdpFunctions;\nimport com.pulumi.okta.idp.inputs.GetSocialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IdpFunctions.getSocial(GetSocialArgs.builder()\n            .name(\"My Facebook IdP\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:idp:getSocial\n      Arguments:\n        name: My Facebook IdP\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSocial.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the social idp to retrieve, conflicts with `name`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the social idp to retrieve, conflicts with `id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSocial.\n",
                "properties": {
                    "accountLinkAction": {
                        "type": "string",
                        "description": "Specifies the account linking action for an IdP user.\n"
                    },
                    "accountLinkGroupIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Group memberships to determine link candidates.\n"
                    },
                    "authorizationBinding": {
                        "type": "string",
                        "description": "The method of making an authorization request.\n"
                    },
                    "authorizationUrl": {
                        "type": "string",
                        "description": "IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Unique identifier issued by AS for the Okta IdP instance.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret issued by AS for the Okta IdP instance.\n",
                        "secret": true
                    },
                    "deprovisionedAction": {
                        "type": "string",
                        "description": "Action for a previously deprovisioned IdP user during authentication.\n"
                    },
                    "groupsAction": {
                        "type": "string",
                        "description": "Provisioning action for IdP user's group memberships.\n"
                    },
                    "groupsAssignments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Okta Group IDs.\n"
                    },
                    "groupsAttribute": {
                        "type": "string",
                        "description": "IdP user profile attribute name for an array value that contains group memberships.\n"
                    },
                    "groupsFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Whitelist of Okta Group identifiers.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the social idp to retrieve, conflicts with `name`.\n"
                    },
                    "issuerMode": {
                        "type": "string",
                        "description": "Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.\n"
                    },
                    "maxClockSkew": {
                        "type": "integer",
                        "description": "Maximum allowable clock-skew when processing messages from the IdP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the social idp to retrieve, conflicts with `id`.\n"
                    },
                    "profileMaster": {
                        "type": "boolean",
                        "description": "Determines if the IdP should act as a source of truth for user profile attributes.\n"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "The type of protocol to use.\n"
                    },
                    "provisioningAction": {
                        "type": "string",
                        "description": "Provisioning action for an IdP user during authentication.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scopes of the IdP.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the IdP.\n"
                    },
                    "subjectMatchAttribute": {
                        "type": "string",
                        "description": "Okta user profile attribute for matching transformed IdP username.\n"
                    },
                    "subjectMatchType": {
                        "type": "string",
                        "description": "Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username.\n"
                    },
                    "suspendedAction": {
                        "type": "string",
                        "description": "Action for a previously suspended IdP user during authentication.\n"
                    },
                    "tokenBinding": {
                        "type": "string",
                        "description": "The method of making a token request.\n"
                    },
                    "tokenUrl": {
                        "type": "string",
                        "description": "IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Social IdP. See API docs [Identity Provider Type](https://developer.okta.com/docs/reference/api/idps/#identity-provider-type)\n"
                    },
                    "usernameTemplate": {
                        "type": "string",
                        "description": "Okta EL Expression to generate or transform a unique username for the IdP user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountLinkAction",
                    "accountLinkGroupIncludes",
                    "authorizationBinding",
                    "authorizationUrl",
                    "clientId",
                    "clientSecret",
                    "deprovisionedAction",
                    "groupsAction",
                    "groupsAssignments",
                    "groupsAttribute",
                    "groupsFilters",
                    "issuerMode",
                    "maxClockSkew",
                    "profileMaster",
                    "protocolType",
                    "provisioningAction",
                    "scopes",
                    "status",
                    "subjectMatchAttribute",
                    "subjectMatchType",
                    "suspendedAction",
                    "tokenBinding",
                    "tokenUrl",
                    "type",
                    "usernameTemplate"
                ]
            }
        },
        "okta:index/getAppGroupAssignments:getAppGroupAssignments": {
            "description": "Get a set of groups assigned to an Okta application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getAppGroupAssignments({\n    id: okta_app_oauth.test.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_app_group_assignments(id=okta_app_oauth[\"test\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetAppGroupAssignments.Invoke(new()\n    {\n        Id = okta_app_oauth.Test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.LookupAppGroupAssignments(ctx, \u0026okta.LookupAppGroupAssignmentsArgs{\n\t\t\tId: okta_app_oauth.Test.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAppGroupAssignmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getAppGroupAssignments(GetAppGroupAssignmentsArgs.builder()\n            .id(okta_app_oauth.test().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getAppGroupAssignments\n      Arguments:\n        id: ${okta_app_oauth.test.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAppGroupAssignments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Okta App being queried for groups\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppGroupAssignments.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of groups IDs assigned to the app\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the Okta App being queried for groups\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "okta:index/getAppSignonPolicy:getAppSignonPolicy": {
            "description": "Get a sign-on policy for the application.\n\n\u003e **WARNING:** This feature is only available as a part of the \nIdentity Engine. Contact support \nfor further information.\n\n\u003e Inside the product a sign-on policy is referenced as an _authentication\npolicy_, in the public API the policy is of type\n[`ACCESS_POLICY`](https://developer.okta.com/docs/reference/api/policy/#policy-object).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.getAppSignonPolicy({\n    appId: \"app_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.get_app_signon_policy(app_id=\"app_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.GetAppSignonPolicy.Invoke(new()\n    {\n        AppId = \"app_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.LookupAppSignonPolicy(ctx, \u0026okta.LookupAppSignonPolicyArgs{\n\t\t\tAppId: \"app_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAppSignonPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getAppSignonPolicy(GetAppSignonPolicyArgs.builder()\n            .appId(\"app_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getAppSignonPolicy\n      Arguments:\n        appId: app_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAppSignonPolicy.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "App ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppSignonPolicy.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "App ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy name\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "name",
                    "id"
                ]
            }
        },
        "okta:index/getAppUserAssignments:getAppUserAssignments": {
            "description": "Get a set of users assigned to an Okta application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getAppUserAssignments({\n    id: okta_app_oauth.test.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_app_user_assignments(id=okta_app_oauth[\"test\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetAppUserAssignments.Invoke(new()\n    {\n        Id = okta_app_oauth.Test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetAppUserAssignments(ctx, \u0026okta.GetAppUserAssignmentsArgs{\n\t\t\tId: okta_app_oauth.Test.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAppUserAssignmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getAppUserAssignments(GetAppUserAssignmentsArgs.builder()\n            .id(okta_app_oauth.test().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getAppUserAssignments\n      Arguments:\n        id: ${okta_app_oauth.test.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAppUserAssignments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Okta App being queried for groups\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppUserAssignments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Okta App being queried for groups\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user IDs assigned to the app\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "users"
                ]
            }
        },
        "okta:index/getAuthServerClaim:getAuthServerClaim": {
            "description": "Get authorization server claim from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getAuthServerClaim({\n    authServerId: \"default\",\n    name: \"birthdate\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_auth_server_claim(auth_server_id=\"default\",\n    name=\"birthdate\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetAuthServerClaim.Invoke(new()\n    {\n        AuthServerId = \"default\",\n        Name = \"birthdate\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetAuthServerClaim(ctx, \u0026okta.GetAuthServerClaimArgs{\n\t\t\tAuthServerId: \"default\",\n\t\t\tName:         pulumi.StringRef(\"birthdate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAuthServerClaimArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getAuthServerClaim(GetAuthServerClaimArgs.builder()\n            .authServerId(\"default\")\n            .name(\"birthdate\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getAuthServerClaim\n      Arguments:\n        authServerId: default\n        name: birthdate\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAuthServerClaim.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Name of the claim. Conflicts with `name`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the claim. Conflicts with `id`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuthServerClaim.\n",
                "properties": {
                    "alwaysIncludeInToken": {
                        "type": "boolean",
                        "description": "Specifies whether to include Claims in the token.\n"
                    },
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "claimType": {
                        "type": "string",
                        "description": "Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Name of the claim. Conflicts with `name`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the claim. Conflicts with `id`.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Auth server claim list of scopes\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the claim.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the claim.\n"
                    },
                    "valueType": {
                        "type": "string",
                        "description": "Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "alwaysIncludeInToken",
                    "authServerId",
                    "claimType",
                    "scopes",
                    "status",
                    "value",
                    "valueType"
                ]
            }
        },
        "okta:index/getAuthServerClaims:getAuthServerClaims": {
            "description": "Get a list of authorization server claims from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getAuthServerClaims({\n    authServerId: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_auth_server_claims(auth_server_id=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetAuthServerClaims.Invoke(new()\n    {\n        AuthServerId = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetAuthServerClaims(ctx, \u0026okta.GetAuthServerClaimsArgs{\n\t\t\tAuthServerId: \"default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAuthServerClaimsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getAuthServerClaims(GetAuthServerClaimsArgs.builder()\n            .authServerId(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getAuthServerClaims\n      Arguments:\n        authServerId: default\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAuthServerClaims.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuthServerClaims.\n",
                "properties": {
                    "authServerId": {
                        "type": "string",
                        "description": "Auth server ID\n"
                    },
                    "claims": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getAuthServerClaimsClaim:getAuthServerClaimsClaim"
                        },
                        "description": "Collection of authorization server claims retrieved from Okta with the following properties.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authServerId",
                    "claims",
                    "id"
                ]
            }
        },
        "okta:index/getAuthenticator:getAuthenticator": {
            "description": "Get an authenticator by key, name of ID.\n\n\u003e **WARNING:** This feature is only available as a part of the \nIdentity Engine. Contact support \nfor further information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getAuthenticator({\n    key: \"security_question\",\n});\nconst test1 = okta.getAuthenticator({\n    name: \"Okta Verify\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_authenticator(key=\"security_question\")\ntest1 = okta.get_authenticator(name=\"Okta Verify\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetAuthenticator.Invoke(new()\n    {\n        Key = \"security_question\",\n    });\n\n    var test1 = Okta.GetAuthenticator.Invoke(new()\n    {\n        Name = \"Okta Verify\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.LookupAuthenticator(ctx, \u0026okta.LookupAuthenticatorArgs{\n\t\t\tKey: pulumi.StringRef(\"security_question\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = okta.LookupAuthenticator(ctx, \u0026okta.LookupAuthenticatorArgs{\n\t\t\tName: pulumi.StringRef(\"Okta Verify\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetAuthenticatorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getAuthenticator(GetAuthenticatorArgs.builder()\n            .key(\"security_question\")\n            .build());\n\n        final var test1 = OktaFunctions.getAuthenticator(GetAuthenticatorArgs.builder()\n            .name(\"Okta Verify\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getAuthenticator\n      Arguments:\n        key: security_question\n  test1:\n    fn::invoke:\n      Function: okta:getAuthenticator\n      Arguments:\n        name: Okta Verify\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAuthenticator.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the authenticator.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "A human-readable string that identifies the authenticator.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the authenticator.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAuthenticator.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the authenticator.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "A human-readable string that identifies the authenticator.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the authenticator.\n"
                    },
                    "providerAuthPort": {
                        "type": "integer",
                        "description": "The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured\n"
                    },
                    "providerHostname": {
                        "type": "string",
                        "description": "Server host name or IP address\n"
                    },
                    "providerInstanceId": {
                        "type": "string",
                        "description": "(Specific to `security_key`) App Instance ID.\n"
                    },
                    "providerJson": {
                        "type": "string",
                        "description": "Authenticator Provider in JSON format\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    },
                    "providerUserNameTemplate": {
                        "type": "string",
                        "description": "Username template expected by the provider.\n"
                    },
                    "settings": {
                        "type": "string",
                        "description": "Authenticator settings in JSON format\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Authenticator.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the authenticator\n"
                    }
                },
                "type": "object",
                "required": [
                    "providerAuthPort",
                    "providerHostname",
                    "providerInstanceId",
                    "providerJson",
                    "providerType",
                    "providerUserNameTemplate",
                    "settings",
                    "status",
                    "type"
                ]
            }
        },
        "okta:index/getBehaviour:getBehaviour": {
            "description": "Get a behavior by name or ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetBehaviourArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getBehaviour(GetBehaviourArgs.builder()\n            .label(\"New City\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getBehaviour\n      Arguments:\n        label: New City\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBehaviour.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Behavior ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Behavior name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBehaviour.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Behavior ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Behavior name.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of behavior settings.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Behavior status.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Behavior type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "settings",
                    "status",
                    "type"
                ]
            }
        },
        "okta:index/getBehaviours:getBehaviours": {
            "description": "Get a behaviors by search criteria.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.getBehaviours({\n    q: \"New\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.get_behaviours(q=\"New\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.GetBehaviours.Invoke(new()\n    {\n        Q = \"New\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetBehaviours(ctx, \u0026okta.GetBehavioursArgs{\n\t\t\tQ: pulumi.StringRef(\"New\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetBehavioursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getBehaviours(GetBehavioursArgs.builder()\n            .q(\"New\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getBehaviours\n      Arguments:\n        q: New\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBehaviours.\n",
                "properties": {
                    "q": {
                        "type": "string",
                        "description": "Searches the name property of behaviors for matching value\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBehaviours.\n",
                "properties": {
                    "behaviors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getBehavioursBehavior:getBehavioursBehavior"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "q": {
                        "type": "string",
                        "description": "Searches the name property of behaviors for matching value\n"
                    }
                },
                "type": "object",
                "required": [
                    "behaviors",
                    "id"
                ]
            }
        },
        "okta:index/getBrand:getBrand": {
            "description": "Get a single Brand from Okta.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBrand.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBrand.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "customPrivacyPolicyUrl": {
                        "type": "string",
                        "description": "Custom privacy policy URL\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Brand\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the brand\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Brand name\n"
                    },
                    "removePoweredByOkta": {
                        "type": "boolean",
                        "description": "Removes \"Powered by Okta\" from the Okta-hosted sign-in page and \"© 2021 Okta, Inc.\" from the Okta End-User Dashboard\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "customPrivacyPolicyUrl",
                    "id",
                    "links",
                    "name",
                    "removePoweredByOkta"
                ]
            }
        },
        "okta:index/getBrands:getBrands": {
            "description": "Get the brands belonging to an Okta organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst test = okta.getBrands({});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\ntest = okta.get_brands()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Okta.GetBrands.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetBrands(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = OktaFunctions.getBrands();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: okta:getBrands\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getBrands.\n",
                "properties": {
                    "brands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getBrandsBrand:getBrandsBrand"
                        },
                        "description": "List of `okta.Brand` belonging to the organization\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "brands",
                    "id"
                ]
            }
        },
        "okta:index/getEmailCustomization:getEmailCustomization": {
            "description": "Get the email customization of an email template belonging to a brand in an Okta organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEmailCustomization.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "customizationId": {
                        "type": "string",
                        "description": "The ID of the customization\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "customizationId",
                    "templateName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEmailCustomization.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the customization\n"
                    },
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "customizationId": {
                        "type": "string",
                        "description": "The ID of the customization\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the customization\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether the customization is the default\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "The language supported by the customization\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject of the customization\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "body",
                    "brandId",
                    "customizationId",
                    "id",
                    "isDefault",
                    "language",
                    "links",
                    "subject",
                    "templateName"
                ]
            }
        },
        "okta:index/getEmailCustomizations:getEmailCustomizations": {
            "description": "Get the email customizations of an email template belonging to a brand in an Okta organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEmailCustomizations.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "templateName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEmailCustomizations.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "emailCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getEmailCustomizationsEmailCustomization:getEmailCustomizationsEmailCustomization"
                        },
                        "description": "List of `okta.EmailCustomization` belonging to the named email template of the brand in the organization\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "emailCustomizations",
                    "templateName",
                    "id"
                ]
            }
        },
        "okta:index/getGroups:getGroups": {
            "description": "Get a list of groups from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.getGroups({\n    q: \"Engineering - \",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.get_groups(q=\"Engineering - \")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.GetGroups.Invoke(new()\n    {\n        Q = \"Engineering - \",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetGroups(ctx, \u0026okta.GetGroupsArgs{\n\t\t\tQ: pulumi.StringRef(\"Engineering - \"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getGroups(GetGroupsArgs.builder()\n            .q(\"Engineering - \")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getGroups\n      Arguments:\n        q: 'Engineering - '\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroups.\n",
                "properties": {
                    "q": {
                        "type": "string",
                        "description": "Searches the name property of groups for matching value\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Searches for groups with a supported filtering expression for all attributes except for '*embedded', '*links', and 'objectClass'\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getGroupsGroup:getGroupsGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "q": {
                        "type": "string",
                        "description": "Searches the name property of groups for matching value\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Searches for groups with a supported filtering expression for all attributes except for '*embedded', '*links', and 'objectClass'\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "okta:index/getNetworkZone:getNetworkZone": {
            "description": "Gets Okta Network Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.getNetworkZone({\n    name: \"Block Antarctica\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.get_network_zone(name=\"Block Antarctica\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.GetNetworkZone.Invoke(new()\n    {\n        Name = \"Block Antarctica\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetNetworkZone(ctx, \u0026okta.GetNetworkZoneArgs{\n\t\t\tName: pulumi.StringRef(\"Block Antarctica\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetNetworkZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getNetworkZone(GetNetworkZoneArgs.builder()\n            .name(\"Block Antarctica\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getNetworkZone\n      Arguments:\n        name: Block Antarctica\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkZone.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the network zone to retrieve, conflicts with `name`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network zone to retrieve, conflicts with `id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkZone.\n",
                "properties": {
                    "asns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Format of each array value: a string representation of an ASN numeric value\n"
                    },
                    "dynamicLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode\n"
                    },
                    "dynamicProxyType": {
                        "type": "string",
                        "description": "Type of proxy being controlled by this network zone\n"
                    },
                    "gateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the network zone to retrieve, conflicts with `name`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network zone to retrieve, conflicts with `id`.\n"
                    },
                    "proxies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Network Status - can either be ACTIVE or INACTIVE only\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Network Zone - can either be IP or DYNAMIC only\n"
                    },
                    "usage": {
                        "type": "string",
                        "description": "Zone's purpose: POLICY or BLOCKLIST\n"
                    }
                },
                "type": "object",
                "required": [
                    "asns",
                    "dynamicLocations",
                    "dynamicProxyType",
                    "gateways",
                    "proxies",
                    "status",
                    "type",
                    "usage"
                ]
            }
        },
        "okta:index/getRoleSubscription:getRoleSubscription": {
            "description": "Get subscriptions of a Role with a specific type\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.getRoleSubscription({\n    notificationType: \"APP_IMPORT\",\n    roleType: \"SUPER_ADMIN\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.get_role_subscription(notification_type=\"APP_IMPORT\",\n    role_type=\"SUPER_ADMIN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.GetRoleSubscription.Invoke(new()\n    {\n        NotificationType = \"APP_IMPORT\",\n        RoleType = \"SUPER_ADMIN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.LookupRoleSubscription(ctx, \u0026okta.LookupRoleSubscriptionArgs{\n\t\t\tNotificationType: \"APP_IMPORT\",\n\t\t\tRoleType:         \"SUPER_ADMIN\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetRoleSubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = OktaFunctions.getRoleSubscription(GetRoleSubscriptionArgs.builder()\n            .notificationType(\"APP_IMPORT\")\n            .roleType(\"SUPER_ADMIN\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:getRoleSubscription\n      Arguments:\n        notificationType: APP_IMPORT\n        roleType: SUPER_ADMIN\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleSubscription.\n",
                "properties": {
                    "notificationType": {
                        "type": "string",
                        "description": "Type of the notification\n"
                    },
                    "roleType": {
                        "type": "string",
                        "description": "Type of the role\n"
                    }
                },
                "type": "object",
                "required": [
                    "notificationType",
                    "roleType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleSubscription.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "notificationType": {
                        "type": "string",
                        "description": "Type of the notification\n"
                    },
                    "roleType": {
                        "type": "string",
                        "description": "Type of the role\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of subscription\n"
                    }
                },
                "type": "object",
                "required": [
                    "notificationType",
                    "roleType",
                    "status",
                    "id"
                ]
            }
        },
        "okta:index/getTemplate:getTemplate": {
            "description": "Get a single Email Template for a Brand belonging to an Okta organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplate.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the email template\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTemplate.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the email template\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "links",
                    "name",
                    "id"
                ]
            }
        },
        "okta:index/getTemplates:getTemplates": {
            "description": "Get the email templates belonging to a brand in an Okta organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplates.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTemplates.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "emailTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getTemplatesEmailTemplate:getTemplatesEmailTemplate"
                        },
                        "description": "List of `okta.getTemplate` belonging to a brand in the organization\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "emailTemplates",
                    "id"
                ]
            }
        },
        "okta:index/getTheme:getTheme": {
            "description": "Get a single Theme of a Brand of an Okta Organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTheme.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Theme ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "themeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTheme.\n",
                "properties": {
                    "backgroundImageUrl": {
                        "type": "string",
                        "description": "Background image URL\n"
                    },
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "emailTemplateTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)\n"
                    },
                    "endUserDashboardTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)\n"
                    },
                    "errorPageTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "Favicon URL\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the theme\n"
                    },
                    "links": {
                        "type": "string",
                        "description": "Link relations for this object - JSON HAL - Discoverable resources related to the email template\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "Logo URL\n"
                    },
                    "primaryColorContrastHex": {
                        "type": "string",
                        "description": "Primary color contrast hex code\n"
                    },
                    "primaryColorHex": {
                        "type": "string",
                        "description": "Primary color hex code\n"
                    },
                    "secondaryColorContrastHex": {
                        "type": "string",
                        "description": "Secondary color contrast hex code\n"
                    },
                    "secondaryColorHex": {
                        "type": "string",
                        "description": "Secondary color hex code\n"
                    },
                    "signInPageTouchPointVariant": {
                        "type": "string",
                        "description": "Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)\n"
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Theme ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "backgroundImageUrl",
                    "brandId",
                    "emailTemplateTouchPointVariant",
                    "endUserDashboardTouchPointVariant",
                    "errorPageTouchPointVariant",
                    "faviconUrl",
                    "id",
                    "links",
                    "logoUrl",
                    "primaryColorContrastHex",
                    "primaryColorHex",
                    "secondaryColorContrastHex",
                    "secondaryColorHex",
                    "signInPageTouchPointVariant",
                    "themeId"
                ]
            }
        },
        "okta:index/getThemes:getThemes": {
            "description": "Get Themes of a Brand of an Okta Organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getThemes.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getThemes.\n",
                "properties": {
                    "brandId": {
                        "type": "string",
                        "description": "Brand ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "themes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getThemesTheme:getThemesTheme"
                        },
                        "description": "List of `okta_them` belonging to the brand in the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandId",
                    "themes",
                    "id"
                ]
            }
        },
        "okta:index/getTrustedOrigins:getTrustedOrigins": {
            "description": "Get List of Trusted Origins using filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst all = okta.getTrustedOrigins({});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nall = okta.get_trusted_origins()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Okta.GetTrustedOrigins.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := okta.GetTrustedOrigins(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetTrustedOriginsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = OktaFunctions.getTrustedOrigins();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: okta:getTrustedOrigins\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrustedOrigins.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter criteria. Filter value will be URL-encoded by the provider\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrustedOrigins.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter criteria. Filter value will be URL-encoded by the provider\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "trustedOrigins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getTrustedOriginsTrustedOrigin:getTrustedOriginsTrustedOrigin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "trustedOrigins",
                    "id"
                ]
            }
        },
        "okta:index/getUserSecurityQuestions:getUserSecurityQuestions": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst exampleUser = new okta.user.User(\"exampleUser\", {\n    firstName: \"John\",\n    lastName: \"Smith\",\n    login: \"john.smith@example.com\",\n    email: \"john.smith@example.com\",\n});\nconst exampleUserSecurityQuestions = okta.getUserSecurityQuestionsOutput({\n    userId: exampleUser.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample_user = okta.user.User(\"exampleUser\",\n    first_name=\"John\",\n    last_name=\"Smith\",\n    login=\"john.smith@example.com\",\n    email=\"john.smith@example.com\")\nexample_user_security_questions = okta.get_user_security_questions_output(user_id=example_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = new Okta.User.User(\"exampleUser\", new()\n    {\n        FirstName = \"John\",\n        LastName = \"Smith\",\n        Login = \"john.smith@example.com\",\n        Email = \"john.smith@example.com\",\n    });\n\n    var exampleUserSecurityQuestions = Okta.GetUserSecurityQuestions.Invoke(new()\n    {\n        UserId = exampleUser.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta\"\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := user.NewUser(ctx, \"exampleUser\", \u0026user.UserArgs{\n\t\t\tFirstName: pulumi.String(\"John\"),\n\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\tLogin:     pulumi.String(\"john.smith@example.com\"),\n\t\t\tEmail:     pulumi.String(\"john.smith@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = okta.GetUserSecurityQuestionsOutput(ctx, okta.GetUserSecurityQuestionsOutputArgs{\n\t\t\tUserId: exampleUser.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.user.User;\nimport com.pulumi.okta.user.UserArgs;\nimport com.pulumi.okta.OktaFunctions;\nimport com.pulumi.okta.inputs.GetUserSecurityQuestionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .firstName(\"John\")\n            .lastName(\"Smith\")\n            .login(\"john.smith@example.com\")\n            .email(\"john.smith@example.com\")\n            .build());\n\n        final var exampleUserSecurityQuestions = OktaFunctions.getUserSecurityQuestions(GetUserSecurityQuestionsArgs.builder()\n            .userId(exampleUser.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUser:\n    type: okta:user:User\n    properties:\n      firstName: John\n      lastName: Smith\n      login: john.smith@example.com\n      email: john.smith@example.com\nvariables:\n  exampleUserSecurityQuestions:\n    fn::invoke:\n      Function: okta:getUserSecurityQuestions\n      Arguments:\n        userId: ${exampleUser.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserSecurityQuestions.\n",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "ID of a Okta User\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserSecurityQuestions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:index/getUserSecurityQuestionsQuestion:getUserSecurityQuestionsQuestion"
                        }
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of a Okta User\n"
                    }
                },
                "type": "object",
                "required": [
                    "questions",
                    "userId",
                    "id"
                ]
            }
        },
        "okta:policy/getDefaultPolicy:getDefaultPolicy": {
            "description": "Use this data source to retrieve a default policy from Okta. This \nsame thing can be achieved using the `okta.policy.getPolicy` with default \nnames, this is simply a shortcut.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.policy.getDefaultPolicy({\n    type: \"PASSWORD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.policy.get_default_policy(type=\"PASSWORD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Policy.GetDefaultPolicy.Invoke(new()\n    {\n        Type = \"PASSWORD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/policy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := policy.GetDefaultPolicy(ctx, \u0026policy.GetDefaultPolicyArgs{\n\t\t\tType: \"PASSWORD\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.policy.PolicyFunctions;\nimport com.pulumi.okta.policy.inputs.GetDefaultPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PolicyFunctions.getDefaultPolicy(GetDefaultPolicyArgs.builder()\n            .type(\"PASSWORD\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:policy:getDefaultPolicy\n      Arguments:\n        type: PASSWORD\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDefaultPolicy.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Policy type: OKTA*SIGN*ON, PASSWORD, MFA*ENROLL, or IDP*DISCOVERY\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDefaultPolicy.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Policy type: OKTA*SIGN*ON, PASSWORD, MFA*ENROLL, or IDP*DISCOVERY\n"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "id"
                ]
            }
        },
        "okta:policy/getPolicy:getPolicy": {
            "description": "Get a policy from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.policy.getPolicy({\n    name: \"Password Policy Example\",\n    type: \"PASSWORD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.policy.get_policy(name=\"Password Policy Example\",\n    type=\"PASSWORD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.Policy.GetPolicy.Invoke(new()\n    {\n        Name = \"Password Policy Example\",\n        Type = \"PASSWORD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/policy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := policy.GetPolicy(ctx, \u0026policy.GetPolicyArgs{\n\t\t\tName: \"Password Policy Example\",\n\t\t\tType: \"PASSWORD\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.policy.PolicyFunctions;\nimport com.pulumi.okta.policy.inputs.GetPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PolicyFunctions.getPolicy(GetPolicyArgs.builder()\n            .name(\"Password Policy Example\")\n            .type(\"PASSWORD\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:policy:getPolicy\n      Arguments:\n        name: Password Policy Example\n        type: PASSWORD\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Policy type, see https://developer.okta.com/docs/reference/api/policy/#policy-object\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Policy type, see https://developer.okta.com/docs/reference/api/policy/#policy-object\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "status",
                    "type",
                    "id"
                ]
            }
        },
        "okta:user/getUser:getUser": {
            "description": "Get a single users from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.user.getUser({\n    searches: [{\n        expression: \"profile.firstName eq \\\"John\\\"\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.user.get_user(searches=[okta.user.GetUserSearchArgs(\n    expression=\"profile.firstName eq \\\"John\\\"\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.User.GetUser.Invoke(new()\n    {\n        Searches = new[]\n        {\n            new Okta.User.Inputs.GetUserSearchInputArgs\n            {\n                Expression = \"profile.firstName eq \\\"John\\\"\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := user.LookupUser(ctx, \u0026user.LookupUserArgs{\n\t\t\tSearches: []user.GetUserSearch{\n\t\t\t\t{\n\t\t\t\t\tExpression: pulumi.StringRef(\"profile.firstName eq \\\"John\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.user.UserFunctions;\nimport com.pulumi.okta.user.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = UserFunctions.getUser(GetUserArgs.builder()\n            .searches(GetUserSearchArgs.builder()\n                .expression(\"profile.firstName eq \\\"John\\\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:user:getUser\n      Arguments:\n        searches:\n          - expression: profile.firstName eq \"John\"\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "compoundSearchOperator": {
                        "type": "string",
                        "description": "Search operator used when joining mulitple search clauses\n"
                    },
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.\n"
                    },
                    "searches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:user/getUserSearch:getUserSearch"
                        },
                        "description": "Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present\n"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Do not populate user groups information (prevents additional API call)\n"
                    },
                    "skipRoles": {
                        "type": "boolean",
                        "description": "Do not populate user roles information (prevents additional API call)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "Retrieve a single user based on their id\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "adminRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "city": {
                        "type": "string"
                    },
                    "compoundSearchOperator": {
                        "type": "string",
                        "description": "Search operator used when joining mulitple search clauses\n"
                    },
                    "costCenter": {
                        "type": "string"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "customProfileAttributes": {
                        "type": "string"
                    },
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.\n"
                    },
                    "department": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "division": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "employeeNumber": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "groupMemberships": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "honorificPrefix": {
                        "type": "string"
                    },
                    "honorificSuffix": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "login": {
                        "type": "string"
                    },
                    "manager": {
                        "type": "string"
                    },
                    "managerId": {
                        "type": "string"
                    },
                    "middleName": {
                        "type": "string"
                    },
                    "mobilePhone": {
                        "type": "string"
                    },
                    "nickName": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "postalAddress": {
                        "type": "string"
                    },
                    "preferredLanguage": {
                        "type": "string"
                    },
                    "primaryPhone": {
                        "type": "string"
                    },
                    "profileUrl": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "searches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:user/getUserSearch:getUserSearch"
                        },
                        "description": "Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present\n"
                    },
                    "secondEmail": {
                        "type": "string"
                    },
                    "skipGroups": {
                        "type": "boolean",
                        "description": "Do not populate user groups information (prevents additional API call)\n"
                    },
                    "skipRoles": {
                        "type": "boolean",
                        "description": "Do not populate user roles information (prevents additional API call)\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "streetAddress": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "description": "Retrieve a single user based on their id\n"
                    },
                    "userType": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adminRoles",
                    "city",
                    "costCenter",
                    "countryCode",
                    "customProfileAttributes",
                    "department",
                    "displayName",
                    "division",
                    "email",
                    "employeeNumber",
                    "firstName",
                    "groupMemberships",
                    "honorificPrefix",
                    "honorificSuffix",
                    "lastName",
                    "locale",
                    "login",
                    "manager",
                    "managerId",
                    "middleName",
                    "mobilePhone",
                    "nickName",
                    "organization",
                    "postalAddress",
                    "preferredLanguage",
                    "primaryPhone",
                    "profileUrl",
                    "roles",
                    "secondEmail",
                    "state",
                    "status",
                    "streetAddress",
                    "timezone",
                    "title",
                    "userType",
                    "zipCode",
                    "id"
                ]
            }
        },
        "okta:user/getUserProfileMappingSource:getUserProfileMappingSource": {
            "description": "Get the base user Profile Mapping source or target from Okta.\n\n\u003e **NOTE:** If using this resource with OAuth2 scopes, this resource \nrequires `okta.profileMappings.read` scope.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.user.getUserProfileMappingSource({});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.user.get_user_profile_mapping_source()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.User.GetUserProfileMappingSource.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := user.GetUserProfileMappingSource(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.user.UserFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = UserFunctions.getUserProfileMappingSource();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:user:getUserProfileMappingSource\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getUserProfileMappingSource.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the source\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of source.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of source.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type"
                ]
            }
        },
        "okta:user/getUserType:getUserType": {
            "description": "Get a user type from Okta.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as okta from \"@pulumi/okta\";\n\nconst example = okta.user.getUserType({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_okta as okta\n\nexample = okta.user.get_user_type(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Okta = Pulumi.Okta;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Okta.User.GetUserType.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := user.LookupUserType(ctx, \u0026user.LookupUserTypeArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.okta.user.UserFunctions;\nimport com.pulumi.okta.user.inputs.GetUserTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = UserFunctions.getUserType(GetUserTypeArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: okta:user:getUserType\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserType.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of user type to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserType.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of user type.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of user type.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of user type to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "name",
                    "id"
                ]
            }
        },
        "okta:user/getUsers:getUsers": {
            "description": "Get a list of users from Okta.\n\n{{% examples %}}\n## Example Usage\n\n### Lookup Users by Search Criteria\n\ndata \"okta.user.getUsers\" \"example\" {\n  search {\n    name       = \"profile.company\"\n    value      = \"Articulate\"\n    comparison = \"sw\"\n  }\n}\n\n# Search for multiple users based on a raw search expression string\ndata \"okta.user.getUsers\" \"example\" {\n  search {\n    expression = \"profile.department eq \\\"Engineering\\\" and (created lt \\\"2014-01-01T00:00:00.000Z\\\" or status eq \\\"ACTIVE\\\")\"\n  }\n}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "compoundSearchOperator": {
                        "type": "string",
                        "description": "Search operator used when joining mulitple search clauses\n"
                    },
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Find users based on group membership using the id of the group.\n"
                    },
                    "includeGroups": {
                        "type": "boolean",
                        "description": "Fetch group memberships for each user\n"
                    },
                    "includeRoles": {
                        "type": "boolean",
                        "description": "Fetch user roles for each user\n"
                    },
                    "searches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:user/getUsersSearch:getUsersSearch"
                        },
                        "description": "Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "compoundSearchOperator": {
                        "type": "string",
                        "description": "Search operator used when joining mulitple search clauses\n"
                    },
                    "delayReadSeconds": {
                        "type": "string",
                        "description": "Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Find users based on group membership using the id of the group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeGroups": {
                        "type": "boolean",
                        "description": "Fetch group memberships for each user\n"
                    },
                    "includeRoles": {
                        "type": "boolean",
                        "description": "Fetch user roles for each user\n"
                    },
                    "searches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:user/getUsersSearch:getUsersSearch"
                        },
                        "description": "Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/okta:user/getUsersUser:getUsersUser"
                        },
                        "description": "collection of users retrieved from Okta.\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    }
}