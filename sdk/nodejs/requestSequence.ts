// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages request sequence. This resource allows you to read and delete an Okta [request-sequence](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Sequences/#tag/Request-Sequences).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.RequestSequence("test", {
 *     idProperty: "<sequence_id>",
 *     resourceId: "<resource_id>",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/requestSequence:RequestSequence example <resource_id>/<id>
 * ```
 */
export class RequestSequence extends pulumi.CustomResource {
    /**
     * Get an existing RequestSequence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestSequenceState, opts?: pulumi.CustomResourceOptions): RequestSequence {
        return new RequestSequence(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/requestSequence:RequestSequence';

    /**
     * Returns true if the given object is an instance of RequestSequence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestSequence {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestSequence.__pulumiType;
    }

    /**
     * Enum: `APP`, `GROUP`.
     */
    declare public /*out*/ readonly compatibleResourceTypes: pulumi.Output<string[]>;
    /**
     * The description of the request condition.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * The id of the sequence.Must be of 24 characters length.
     */
    declare public readonly idProperty: pulumi.Output<string>;
    /**
     * Link to edit the request sequence.
     */
    declare public /*out*/ readonly link: pulumi.Output<string>;
    /**
     * The access duration settings for the request condition
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The id of the resource in Okta ID format.
     */
    declare public readonly resourceId: pulumi.Output<string>;

    /**
     * Create a RequestSequence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestSequenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestSequenceArgs | RequestSequenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestSequenceState | undefined;
            resourceInputs["compatibleResourceTypes"] = state?.compatibleResourceTypes;
            resourceInputs["description"] = state?.description;
            resourceInputs["idProperty"] = state?.idProperty;
            resourceInputs["link"] = state?.link;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceId"] = state?.resourceId;
        } else {
            const args = argsOrState as RequestSequenceArgs | undefined;
            if (args?.idProperty === undefined && !opts.urn) {
                throw new Error("Missing required property 'idProperty'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["idProperty"] = args?.idProperty;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["compatibleResourceTypes"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["link"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestSequence.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestSequence resources.
 */
export interface RequestSequenceState {
    /**
     * Enum: `APP`, `GROUP`.
     */
    compatibleResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the request condition.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the sequence.Must be of 24 characters length.
     */
    idProperty?: pulumi.Input<string>;
    /**
     * Link to edit the request sequence.
     */
    link?: pulumi.Input<string>;
    /**
     * The access duration settings for the request condition
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the resource in Okta ID format.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RequestSequence resource.
 */
export interface RequestSequenceArgs {
    /**
     * The id of the sequence.Must be of 24 characters length.
     */
    idProperty: pulumi.Input<string>;
    /**
     * The id of the resource in Okta ID format.
     */
    resourceId: pulumi.Input<string>;
}
