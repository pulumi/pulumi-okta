// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("okta");

/**
 * Bearer token granting privileges to Okta API.
 */
export declare const accessToken: string | undefined;
Object.defineProperty(exports, "accessToken", {
    get() {
        return __config.get("accessToken");
    },
    enumerable: true,
});

/**
 * API Token granting privileges to Okta API.
 */
export declare const apiToken: string | undefined;
Object.defineProperty(exports, "apiToken", {
    get() {
        return __config.get("apiToken");
    },
    enumerable: true,
});

/**
 * Use exponential back off strategy for rate limits.
 */
export declare const backoff: boolean | undefined;
Object.defineProperty(exports, "backoff", {
    get() {
        return __config.getObject<boolean>("backoff");
    },
    enumerable: true,
});

/**
 * The Okta url. (Use 'oktapreview.com' for Okta testing)
 */
export declare const baseUrl: string | undefined;
Object.defineProperty(exports, "baseUrl", {
    get() {
        return __config.get("baseUrl");
    },
    enumerable: true,
});

/**
 * API Token granting privileges to Okta API.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
 */
export declare const httpProxy: string | undefined;
Object.defineProperty(exports, "httpProxy", {
    get() {
        return __config.get("httpProxy");
    },
    enumerable: true,
});

/**
 * providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
 */
export declare const logLevel: number | undefined;
Object.defineProperty(exports, "logLevel", {
    get() {
        return __config.getObject<number>("logLevel");
    },
    enumerable: true,
});

/**
 * Sets what percentage of capacity the provider can use of the total rate limit capacity while making calls to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits: https://developer.okta.com/docs/reference/rl-global-mgmt/
 */
export declare const maxApiCapacity: number | undefined;
Object.defineProperty(exports, "maxApiCapacity", {
    get() {
        return __config.getObject<number>("maxApiCapacity");
    },
    enumerable: true,
});

/**
 * maximum number of retries to attempt before erroring out.
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
 */
export declare const maxWaitSeconds: number | undefined;
Object.defineProperty(exports, "maxWaitSeconds", {
    get() {
        return __config.getObject<number>("maxWaitSeconds");
    },
    enumerable: true,
});

/**
 * minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
 */
export declare const minWaitSeconds: number | undefined;
Object.defineProperty(exports, "minWaitSeconds", {
    get() {
        return __config.getObject<number>("minWaitSeconds");
    },
    enumerable: true,
});

/**
 * The organization to manage in Okta.
 */
export declare const orgName: string | undefined;
Object.defineProperty(exports, "orgName", {
    get() {
        return __config.get("orgName");
    },
    enumerable: true,
});

/**
 * Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of https://developer.okta.com/docs/api/getting_started/rate-limits.
 */
export declare const parallelism: number | undefined;
Object.defineProperty(exports, "parallelism", {
    get() {
        return __config.getObject<number>("parallelism");
    },
    enumerable: true,
});

/**
 * API Token granting privileges to Okta API.
 */
export declare const privateKey: string | undefined;
Object.defineProperty(exports, "privateKey", {
    get() {
        return __config.get("privateKey");
    },
    enumerable: true,
});

/**
 * API Token Id granting privileges to Okta API.
 */
export declare const privateKeyId: string | undefined;
Object.defineProperty(exports, "privateKeyId", {
    get() {
        return __config.get("privateKeyId");
    },
    enumerable: true,
});

/**
 * Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum value can be `300`.
 */
export declare const requestTimeout: number | undefined;
Object.defineProperty(exports, "requestTimeout", {
    get() {
        return __config.getObject<number>("requestTimeout");
    },
    enumerable: true,
});

/**
 * API Token granting privileges to Okta API.
 */
export declare const scopes: string[] | undefined;
Object.defineProperty(exports, "scopes", {
    get() {
        return __config.getObject<string[]>("scopes");
    },
    enumerable: true,
});

