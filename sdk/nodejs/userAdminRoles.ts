// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource to manage a set of admin roles for a specific user.
 *
 * This resource allows you to manage admin roles for a single user, independent of the user schema itself.
 *
 * When using this with a `okta.user.User` resource, you should add a lifecycle ignore for admin roles to avoid conflicts
 * in desired state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const testUser = new okta.user.User("testUser", {
 *     firstName: "TestAcc",
 *     lastName: "Smith",
 *     login: "testAcc-replace_with_uuid@example.com",
 *     email: "testAcc-replace_with_uuid@example.com",
 * });
 * const testUserAdminRoles = new okta.UserAdminRoles("testUserAdminRoles", {
 *     userId: testUser.id,
 *     adminRoles: ["APP_ADMIN"],
 * });
 * ```
 *
 * ## Import
 *
 * Existing user admin roles can be imported via the Okta User ID.
 *
 * ```sh
 *  $ pulumi import okta:index/userAdminRoles:UserAdminRoles example <user id>
 * ```
 */
export class UserAdminRoles extends pulumi.CustomResource {
    /**
     * Get an existing UserAdminRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserAdminRolesState, opts?: pulumi.CustomResourceOptions): UserAdminRoles {
        return new UserAdminRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/userAdminRoles:UserAdminRoles';

    /**
     * Returns true if the given object is an instance of UserAdminRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserAdminRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserAdminRoles.__pulumiType;
    }

    /**
     * The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
     */
    public readonly adminRoles!: pulumi.Output<string[]>;
    /**
     * ID of a Okta User.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserAdminRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserAdminRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserAdminRolesArgs | UserAdminRolesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserAdminRolesState | undefined;
            inputs["adminRoles"] = state ? state.adminRoles : undefined;
            inputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserAdminRolesArgs | undefined;
            if ((!args || args.adminRoles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminRoles'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            inputs["adminRoles"] = args ? args.adminRoles : undefined;
            inputs["userId"] = args ? args.userId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserAdminRoles.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserAdminRoles resources.
 */
export interface UserAdminRolesState {
    /**
     * The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
     */
    adminRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of a Okta User.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserAdminRoles resource.
 */
export interface UserAdminRolesArgs {
    /**
     * The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
     */
    adminRoles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of a Okta User.
     */
    userId: pulumi.Input<string>;
}
