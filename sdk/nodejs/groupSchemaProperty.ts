// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroupSchemaProperty extends pulumi.CustomResource {
    /**
     * Get an existing GroupSchemaProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupSchemaPropertyState, opts?: pulumi.CustomResourceOptions): GroupSchemaProperty {
        return new GroupSchemaProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/groupSchemaProperty:GroupSchemaProperty';

    /**
     * Returns true if the given object is an instance of GroupSchemaProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupSchemaProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupSchemaProperty.__pulumiType;
    }

    /**
     * Custom Subschema enumerated value of a property of type array.
     */
    public readonly arrayEnums!: pulumi.Output<string[] | undefined>;
    /**
     * array of valid JSON schemas for property type array.
     */
    public readonly arrayOneOfs!: pulumi.Output<outputs.GroupSchemaPropertyArrayOneOf[] | undefined>;
    /**
     * Subschema array type: string, number, integer, reference. Type field must be an array.
     */
    public readonly arrayType!: pulumi.Output<string | undefined>;
    /**
     * Custom Subschema description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    public readonly enums!: pulumi.Output<string[] | undefined>;
    /**
     * Subschema external name
     */
    public readonly externalName!: pulumi.Output<string | undefined>;
    /**
     * Subschema external namespace
     */
    public readonly externalNamespace!: pulumi.Output<string | undefined>;
    /**
     * Subschema unique string identifier
     */
    public readonly index!: pulumi.Output<string>;
    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     */
    public readonly master!: pulumi.Output<string | undefined>;
    public readonly masterOverridePriorities!: pulumi.Output<outputs.GroupSchemaPropertyMasterOverridePriority[] | undefined>;
    /**
     * Subschema of type string maximum length
     */
    public readonly maxLength!: pulumi.Output<number | undefined>;
    /**
     * Subschema of type string minimum length
     */
    public readonly minLength!: pulumi.Output<number | undefined>;
    /**
     * Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    public readonly oneOfs!: pulumi.Output<outputs.GroupSchemaPropertyOneOf[] | undefined>;
    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     */
    public readonly permissions!: pulumi.Output<string | undefined>;
    /**
     * Whether the subschema is required
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Enum title
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Subschema type: string, boolean, number, integer, array, or object
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Subschema unique restriction
     */
    public readonly unique!: pulumi.Output<string | undefined>;

    /**
     * Create a GroupSchemaProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupSchemaPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupSchemaPropertyArgs | GroupSchemaPropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupSchemaPropertyState | undefined;
            resourceInputs["arrayEnums"] = state ? state.arrayEnums : undefined;
            resourceInputs["arrayOneOfs"] = state ? state.arrayOneOfs : undefined;
            resourceInputs["arrayType"] = state ? state.arrayType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enums"] = state ? state.enums : undefined;
            resourceInputs["externalName"] = state ? state.externalName : undefined;
            resourceInputs["externalNamespace"] = state ? state.externalNamespace : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["master"] = state ? state.master : undefined;
            resourceInputs["masterOverridePriorities"] = state ? state.masterOverridePriorities : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["minLength"] = state ? state.minLength : undefined;
            resourceInputs["oneOfs"] = state ? state.oneOfs : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unique"] = state ? state.unique : undefined;
        } else {
            const args = argsOrState as GroupSchemaPropertyArgs | undefined;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["arrayEnums"] = args ? args.arrayEnums : undefined;
            resourceInputs["arrayOneOfs"] = args ? args.arrayOneOfs : undefined;
            resourceInputs["arrayType"] = args ? args.arrayType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enums"] = args ? args.enums : undefined;
            resourceInputs["externalName"] = args ? args.externalName : undefined;
            resourceInputs["externalNamespace"] = args ? args.externalNamespace : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["master"] = args ? args.master : undefined;
            resourceInputs["masterOverridePriorities"] = args ? args.masterOverridePriorities : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["minLength"] = args ? args.minLength : undefined;
            resourceInputs["oneOfs"] = args ? args.oneOfs : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unique"] = args ? args.unique : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupSchemaProperty.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupSchemaProperty resources.
 */
export interface GroupSchemaPropertyState {
    /**
     * Custom Subschema enumerated value of a property of type array.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * array of valid JSON schemas for property type array.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyArrayOneOf>[]>;
    /**
     * Subschema array type: string, number, integer, reference. Type field must be an array.
     */
    arrayType?: pulumi.Input<string>;
    /**
     * Custom Subschema description
     */
    description?: pulumi.Input<string>;
    /**
     * Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subschema external name
     */
    externalName?: pulumi.Input<string>;
    /**
     * Subschema external namespace
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * Subschema unique string identifier
     */
    index?: pulumi.Input<string>;
    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     */
    master?: pulumi.Input<string>;
    masterOverridePriorities?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyMasterOverridePriority>[]>;
    /**
     * Subschema of type string maximum length
     */
    maxLength?: pulumi.Input<number>;
    /**
     * Subschema of type string minimum length
     */
    minLength?: pulumi.Input<number>;
    /**
     * Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyOneOf>[]>;
    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the subschema is required
     */
    required?: pulumi.Input<boolean>;
    scope?: pulumi.Input<string>;
    /**
     * Enum title
     */
    title?: pulumi.Input<string>;
    /**
     * Subschema type: string, boolean, number, integer, array, or object
     */
    type?: pulumi.Input<string>;
    /**
     * Subschema unique restriction
     */
    unique?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupSchemaProperty resource.
 */
export interface GroupSchemaPropertyArgs {
    /**
     * Custom Subschema enumerated value of a property of type array.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * array of valid JSON schemas for property type array.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyArrayOneOf>[]>;
    /**
     * Subschema array type: string, number, integer, reference. Type field must be an array.
     */
    arrayType?: pulumi.Input<string>;
    /**
     * Custom Subschema description
     */
    description?: pulumi.Input<string>;
    /**
     * Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subschema external name
     */
    externalName?: pulumi.Input<string>;
    /**
     * Subschema external namespace
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * Subschema unique string identifier
     */
    index: pulumi.Input<string>;
    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     */
    master?: pulumi.Input<string>;
    masterOverridePriorities?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyMasterOverridePriority>[]>;
    /**
     * Subschema of type string maximum length
     */
    maxLength?: pulumi.Input<number>;
    /**
     * Subschema of type string minimum length
     */
    minLength?: pulumi.Input<number>;
    /**
     * Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.GroupSchemaPropertyOneOf>[]>;
    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the subschema is required
     */
    required?: pulumi.Input<boolean>;
    scope?: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
    /**
     * Subschema type: string, boolean, number, integer, array, or object
     */
    type: pulumi.Input<string>;
    /**
     * Subschema unique restriction
     */
    unique?: pulumi.Input<string>;
}
