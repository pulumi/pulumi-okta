// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get a policy assurance from Okta.
 */
export function getDeviceAssurancePolicy(args?: GetDeviceAssurancePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetDeviceAssurancePolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", {
        "id": args.id,
        "name": args.name,
        "secureHardwarePresent": args.secureHardwarePresent,
        "thirdPartySignalProvider": args.thirdPartySignalProvider,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeviceAssurancePolicy.
 */
export interface GetDeviceAssurancePolicyArgs {
    /**
     * ID of the user type to retrieve, conflicts with `name`.
     */
    id?: string;
    /**
     * Name of user type to retrieve, conflicts with `id`.
     */
    name?: string;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    secureHardwarePresent?: boolean;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    thirdPartySignalProvider?: inputs.GetDeviceAssurancePolicyThirdPartySignalProvider;
}

/**
 * A collection of values returned by getDeviceAssurancePolicy.
 */
export interface GetDeviceAssurancePolicyResult {
    /**
     * List of disk encryption type, can be `FULL`, `USER`
     */
    readonly diskEncryptionType: outputs.GetDeviceAssurancePolicyDiskEncryptionType;
    /**
     * ID of the user type to retrieve, conflicts with `name`.
     */
    readonly id?: string;
    /**
     * Is the device jailbroken in the device assurance policy.
     */
    readonly jailbreak: boolean;
    /**
     * Name of user type to retrieve, conflicts with `id`.
     */
    readonly name?: string;
    /**
     * Minimum os version of the device in the device assurance policy.
     */
    readonly osVersion: outputs.GetDeviceAssurancePolicyOsVersion;
    /**
     * The list of os version constraints.
     */
    readonly osVersionConstraints: outputs.GetDeviceAssurancePolicyOsVersionConstraint[];
    /**
     * Policy device assurance platform
     */
    readonly platform: string;
    /**
     * List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     */
    readonly screenlockType: outputs.GetDeviceAssurancePolicyScreenlockType;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    readonly secureHardwarePresent?: boolean;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    readonly thirdPartySignalProvider?: outputs.GetDeviceAssurancePolicyThirdPartySignalProvider;
}
/**
 * Get a policy assurance from Okta.
 */
export function getDeviceAssurancePolicyOutput(args?: GetDeviceAssurancePolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDeviceAssurancePolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", {
        "id": args.id,
        "name": args.name,
        "secureHardwarePresent": args.secureHardwarePresent,
        "thirdPartySignalProvider": args.thirdPartySignalProvider,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeviceAssurancePolicy.
 */
export interface GetDeviceAssurancePolicyOutputArgs {
    /**
     * ID of the user type to retrieve, conflicts with `name`.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of user type to retrieve, conflicts with `id`.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    secureHardwarePresent?: pulumi.Input<boolean>;
    /**
     * Indicates if the device contains a secure hardware functionality
     */
    thirdPartySignalProvider?: pulumi.Input<inputs.GetDeviceAssurancePolicyThirdPartySignalProviderArgs>;
}
