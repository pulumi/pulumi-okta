// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a Profile Enrollment Policy Rule.
 *
 * > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 * A [profile enrollment
 * policy](https://developer.okta.com/docs/reference/api/policy/#profile-enrollment-policy)
 * is limited to one default rule. This resource does not create a rule for an
 * enrollment policy, it allows the default policy rule to be updated.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.PolicyProfileEnrollment("example", {name: "My Enrollment Policy"});
 * const exampleHook = new okta.inline.Hook("example", {
 *     name: "My Inline Hook",
 *     status: "ACTIVE",
 *     type: "com.okta.user.pre-registration",
 *     version: "1.0.3",
 *     channel: {
 *         type: "HTTP",
 *         version: "1.0.0",
 *         uri: "https://example.com/test2",
 *         method: "POST",
 *     },
 * });
 * const exampleGroup = new okta.group.Group("example", {
 *     name: "My Group",
 *     description: "Group of some users",
 * });
 * const examplePolicyRuleProfileEnrollment = new okta.PolicyRuleProfileEnrollment("example", {
 *     policyId: example.id,
 *     inlineHookId: exampleHook.id,
 *     targetGroupId: exampleGroup.id,
 *     unknownUserAction: "REGISTER",
 *     emailVerification: true,
 *     access: "ALLOW",
 *     profileAttributes: [
 *         {
 *             name: "email",
 *             label: "Email",
 *             required: true,
 *         },
 *         {
 *             name: "name",
 *             label: "Name",
 *             required: true,
 *         },
 *         {
 *             name: "t-shirt",
 *             label: "T-Shirt Size",
 *             required: false,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment example <policy_id>/<rule_id>
 * ```
 */
export class PolicyRuleProfileEnrollment extends pulumi.CustomResource {
    /**
     * Get an existing PolicyRuleProfileEnrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyRuleProfileEnrollmentState, opts?: pulumi.CustomResourceOptions): PolicyRuleProfileEnrollment {
        return new PolicyRuleProfileEnrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment';

    /**
     * Returns true if the given object is an instance of PolicyRuleProfileEnrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyRuleProfileEnrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyRuleProfileEnrollment.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
     */
    declare public readonly access: pulumi.Output<string | undefined>;
    /**
     * Indicates whether email verification should occur before access is granted. Default: `true`.
     */
    declare public readonly emailVerification: pulumi.Output<boolean | undefined>;
    /**
     * Enrolls authenticator types
     */
    declare public readonly enrollAuthenticatorTypes: pulumi.Output<string[] | undefined>;
    /**
     * ID of a Registration Inline Hook
     */
    declare public readonly inlineHookId: pulumi.Output<string | undefined>;
    /**
     * Name of the rule
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * ID of the policy
     */
    declare public readonly policyId: pulumi.Output<string>;
    /**
     * A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
     * 	- 'label' - (Required) A display-friendly label for this property
     * 	- 'name' - (Required) The name of a User Profile property
     * 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
     */
    declare public readonly profileAttributes: pulumi.Output<outputs.PolicyRuleProfileEnrollmentProfileAttribute[] | undefined>;
    /**
     * Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
     */
    declare public readonly progressiveProfilingAction: pulumi.Output<string | undefined>;
    /**
     * Status of the rule
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of a Group that this User should be added to
     */
    declare public readonly targetGroupId: pulumi.Output<string | undefined>;
    /**
     * Value created by the backend. If present all policy updates must include this attribute/value.
     */
    declare public readonly uiSchemaId: pulumi.Output<string | undefined>;
    /**
     * Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
     */
    declare public readonly unknownUserAction: pulumi.Output<string>;

    /**
     * Create a PolicyRuleProfileEnrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyRuleProfileEnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyRuleProfileEnrollmentArgs | PolicyRuleProfileEnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyRuleProfileEnrollmentState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["emailVerification"] = state?.emailVerification;
            resourceInputs["enrollAuthenticatorTypes"] = state?.enrollAuthenticatorTypes;
            resourceInputs["inlineHookId"] = state?.inlineHookId;
            resourceInputs["name"] = state?.name;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["profileAttributes"] = state?.profileAttributes;
            resourceInputs["progressiveProfilingAction"] = state?.progressiveProfilingAction;
            resourceInputs["status"] = state?.status;
            resourceInputs["targetGroupId"] = state?.targetGroupId;
            resourceInputs["uiSchemaId"] = state?.uiSchemaId;
            resourceInputs["unknownUserAction"] = state?.unknownUserAction;
        } else {
            const args = argsOrState as PolicyRuleProfileEnrollmentArgs | undefined;
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if (args?.unknownUserAction === undefined && !opts.urn) {
                throw new Error("Missing required property 'unknownUserAction'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["emailVerification"] = args?.emailVerification;
            resourceInputs["enrollAuthenticatorTypes"] = args?.enrollAuthenticatorTypes;
            resourceInputs["inlineHookId"] = args?.inlineHookId;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["profileAttributes"] = args?.profileAttributes;
            resourceInputs["progressiveProfilingAction"] = args?.progressiveProfilingAction;
            resourceInputs["targetGroupId"] = args?.targetGroupId;
            resourceInputs["uiSchemaId"] = args?.uiSchemaId;
            resourceInputs["unknownUserAction"] = args?.unknownUserAction;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyRuleProfileEnrollment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyRuleProfileEnrollment resources.
 */
export interface PolicyRuleProfileEnrollmentState {
    /**
     * Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
     */
    access?: pulumi.Input<string>;
    /**
     * Indicates whether email verification should occur before access is granted. Default: `true`.
     */
    emailVerification?: pulumi.Input<boolean>;
    /**
     * Enrolls authenticator types
     */
    enrollAuthenticatorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of a Registration Inline Hook
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the policy
     */
    policyId?: pulumi.Input<string>;
    /**
     * A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
     * 	- 'label' - (Required) A display-friendly label for this property
     * 	- 'name' - (Required) The name of a User Profile property
     * 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
     */
    profileAttributes?: pulumi.Input<pulumi.Input<inputs.PolicyRuleProfileEnrollmentProfileAttribute>[]>;
    /**
     * Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
     */
    progressiveProfilingAction?: pulumi.Input<string>;
    /**
     * Status of the rule
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of a Group that this User should be added to
     */
    targetGroupId?: pulumi.Input<string>;
    /**
     * Value created by the backend. If present all policy updates must include this attribute/value.
     */
    uiSchemaId?: pulumi.Input<string>;
    /**
     * Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
     */
    unknownUserAction?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyRuleProfileEnrollment resource.
 */
export interface PolicyRuleProfileEnrollmentArgs {
    /**
     * Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
     */
    access?: pulumi.Input<string>;
    /**
     * Indicates whether email verification should occur before access is granted. Default: `true`.
     */
    emailVerification?: pulumi.Input<boolean>;
    /**
     * Enrolls authenticator types
     */
    enrollAuthenticatorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of a Registration Inline Hook
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * ID of the policy
     */
    policyId: pulumi.Input<string>;
    /**
     * A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
     * 	- 'label' - (Required) A display-friendly label for this property
     * 	- 'name' - (Required) The name of a User Profile property
     * 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
     */
    profileAttributes?: pulumi.Input<pulumi.Input<inputs.PolicyRuleProfileEnrollmentProfileAttribute>[]>;
    /**
     * Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
     */
    progressiveProfilingAction?: pulumi.Input<string>;
    /**
     * The ID of a Group that this User should be added to
     */
    targetGroupId?: pulumi.Input<string>;
    /**
     * Value created by the backend. If present all policy updates must include this attribute/value.
     */
    uiSchemaId?: pulumi.Input<string>;
    /**
     * Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
     */
    unknownUserAction: pulumi.Input<string>;
}
