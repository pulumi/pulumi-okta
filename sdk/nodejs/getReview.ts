// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get the reviews belonging to a campaign
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getReview({});
 * ```
 *
 * ## Required:
 *
 * - `email` (String) The Okta user's email address.
 * - `id` (String) The Okta user id.
 * - `status` (String) The status of the principal's profile. Enum: `INACTIVE`, `ACTIVE`.
 *
 * ## Optional:
 *
 * - `firstName` (String) The Okta user's first name.
 * - `lastName` (String) The Okta user's last name
 * - `login` (String) The Okta user's login
 */
export function getReview(args: GetReviewArgs, opts?: pulumi.InvokeOptions): Promise<GetReviewResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getReview:getReview", {
        "allReviewerLevels": args.allReviewerLevels,
        "entitlementBundle": args.entitlementBundle,
        "entitlementValue": args.entitlementValue,
        "id": args.id,
        "links": args.links,
        "note": args.note,
        "principalProfile": args.principalProfile,
        "reviewerProfile": args.reviewerProfile,
    }, opts);
}

/**
 * A collection of arguments for invoking getReview.
 */
export interface GetReviewArgs {
    allReviewerLevels?: inputs.GetReviewAllReviewerLevel[];
    entitlementBundle?: inputs.GetReviewEntitlementBundle;
    entitlementValue?: inputs.GetReviewEntitlementValue;
    /**
     * The ID of  review.
     */
    id: string;
    links?: inputs.GetReviewLinks;
    note?: inputs.GetReviewNote;
    /**
     * A limited set of properties from the user profile who created the review.
     */
    principalProfile?: inputs.GetReviewPrincipalProfile;
    reviewerProfile?: inputs.GetReviewReviewerProfile;
}

/**
 * A collection of values returned by getReview.
 */
export interface GetReviewResult {
    readonly allReviewerLevels?: outputs.GetReviewAllReviewerLevel[];
    /**
     * ID of the Campaign.
     */
    readonly campaignId: string;
    /**
     * The ISO 8601 formatted date and time when the resource was created.
     */
    readonly created: string;
    /**
     * The id of user who created the resource.
     */
    readonly createdBy: string;
    /**
     * Identifies the reviewer level of each reviews during access certification.
     */
    readonly currentReviewerLevel: string;
    /**
     * The ISO 8601 formatted date and time when the object status was decided.
     */
    readonly decided: string;
    /**
     * The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
     */
    readonly decision: string;
    readonly entitlementBundle?: outputs.GetReviewEntitlementBundle;
    readonly entitlementValue?: outputs.GetReviewEntitlementValue;
    /**
     * The ID of  review.
     */
    readonly id: string;
    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     */
    readonly lastUpdated: string;
    /**
     * The id of user who last updated the object.
     */
    readonly lastUpdatedBy: string;
    readonly links?: outputs.GetReviewLinks;
    readonly note?: outputs.GetReviewNote;
    /**
     * A limited set of properties from the user profile who created the review.
     */
    readonly principalProfile?: outputs.GetReviewPrincipalProfile;
    /**
     * Enum: `ERROR`, `MANUAL`, `NONE`, `OPEN`, `SUCCESS`.
     */
    readonly remediationStatus: string;
    /**
     * Resource ID for the Review.
     */
    readonly resourceId: string;
    readonly reviewerProfile?: outputs.GetReviewReviewerProfile;
    /**
     * The type of reviewer to which the review is assigned.
     */
    readonly reviewerType: string;
}
/**
 * Get the reviews belonging to a campaign
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getReview({});
 * ```
 *
 * ## Required:
 *
 * - `email` (String) The Okta user's email address.
 * - `id` (String) The Okta user id.
 * - `status` (String) The status of the principal's profile. Enum: `INACTIVE`, `ACTIVE`.
 *
 * ## Optional:
 *
 * - `firstName` (String) The Okta user's first name.
 * - `lastName` (String) The Okta user's last name
 * - `login` (String) The Okta user's login
 */
export function getReviewOutput(args: GetReviewOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetReviewResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getReview:getReview", {
        "allReviewerLevels": args.allReviewerLevels,
        "entitlementBundle": args.entitlementBundle,
        "entitlementValue": args.entitlementValue,
        "id": args.id,
        "links": args.links,
        "note": args.note,
        "principalProfile": args.principalProfile,
        "reviewerProfile": args.reviewerProfile,
    }, opts);
}

/**
 * A collection of arguments for invoking getReview.
 */
export interface GetReviewOutputArgs {
    allReviewerLevels?: pulumi.Input<pulumi.Input<inputs.GetReviewAllReviewerLevelArgs>[]>;
    entitlementBundle?: pulumi.Input<inputs.GetReviewEntitlementBundleArgs>;
    entitlementValue?: pulumi.Input<inputs.GetReviewEntitlementValueArgs>;
    /**
     * The ID of  review.
     */
    id: pulumi.Input<string>;
    links?: pulumi.Input<inputs.GetReviewLinksArgs>;
    note?: pulumi.Input<inputs.GetReviewNoteArgs>;
    /**
     * A limited set of properties from the user profile who created the review.
     */
    principalProfile?: pulumi.Input<inputs.GetReviewPrincipalProfileArgs>;
    reviewerProfile?: pulumi.Input<inputs.GetReviewReviewerProfileArgs>;
}
