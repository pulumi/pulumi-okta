// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve a group from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.group.getGroup({
 *     name: "Example App",
 * });
 * ```
 */
export function getGroup(args?: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:group/getGroup:getGroup", {
        "delayReadSeconds": args.delayReadSeconds,
        "id": args.id,
        "includeUsers": args.includeUsers,
        "name": args.name,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupArgs {
    /**
     * Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
     */
    delayReadSeconds?: string;
    /**
     * ID of the group. Conflicts with `"name"` and `"type"`.
     */
    id?: string;
    /**
     * whether to retrieve all member ids.
     */
    includeUsers?: boolean;
    /**
     * name of group to retrieve.
     */
    name?: string;
    /**
     * type of the group to retrieve. Can only be one of `OKTA_GROUP` (Native Okta Groups), `APP_GROUP`
     * (Imported App Groups), or `BUILT_IN` (Okta System Groups).
     */
    type?: string;
}

/**
 * A collection of values returned by getGroup.
 */
export interface GetGroupResult {
    readonly delayReadSeconds?: string;
    /**
     * description of group.
     */
    readonly description: string;
    /**
     * ID of group.
     */
    readonly id?: string;
    readonly includeUsers?: boolean;
    /**
     * name of group.
     */
    readonly name?: string;
    /**
     * type of group.
     */
    readonly type?: string;
    /**
     * user ids that are members of this group, only included if `includeUsers` is set to `true`.
     */
    readonly users: string[];
}
/**
 * Use this data source to retrieve a group from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.group.getGroup({
 *     name: "Example App",
 * });
 * ```
 */
export function getGroupOutput(args?: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply((a: any) => getGroup(a, opts))
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupOutputArgs {
    /**
     * Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
     */
    delayReadSeconds?: pulumi.Input<string>;
    /**
     * ID of the group. Conflicts with `"name"` and `"type"`.
     */
    id?: pulumi.Input<string>;
    /**
     * whether to retrieve all member ids.
     */
    includeUsers?: pulumi.Input<boolean>;
    /**
     * name of group to retrieve.
     */
    name?: pulumi.Input<string>;
    /**
     * type of the group to retrieve. Can only be one of `OKTA_GROUP` (Native Okta Groups), `APP_GROUP`
     * (Imported App Groups), or `BUILT_IN` (Okta System Groups).
     */
    type?: pulumi.Input<string>;
}
