// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Okta Group.
 *
 * This resource allows you to create and configure an Okta Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.group.Group("example", {
 *     description: "My Example Group",
 * });
 * ```
 *
 * Ignore users sync
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const exampleSkip = new okta.group.Group("example_skip", {
 *     description: "My Example Group",
 *     skipUsers: true,
 * });
 * ```
 *
 * Custom profile attributes
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.group.Group("example", {
 *     description: "My Example Group",
 *     customProfileAttributes: JSON.stringify({
 *         example1: "testing1234",
 *         example2: true,
 *         example3: 54321,
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * An Okta Group can be imported via the Okta ID.
 *
 * ```sh
 *  $ pulumi import okta:group/group:Group example <group id>
 * ```
 *
 *  It's also possible to import group without users. In this case ID will look like this
 *
 * ```sh
 *  $ pulumi import okta:group/group:Group example <group id>/skip_users
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:group/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * raw JSON containing all custom profile attributes.
     */
    public readonly customProfileAttributes!: pulumi.Output<string | undefined>;
    /**
     * The description of the Okta Group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Okta Group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicator that allows a group to skip `users` sync (it's also can be provided during import). Default is `false`.
     */
    public readonly skipUsers!: pulumi.Output<boolean | undefined>;
    /**
     * The users associated with the group. This can also be done per user.
     * `DEPRECATED`: Please replace usage with the `okta.GroupMemberships` resource.
     *
     * @deprecated The `users` field is now deprecated for the resource `okta_group`, please replace all uses of this with: `okta_group_memberships`
     */
    public readonly users!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            inputs["customProfileAttributes"] = state ? state.customProfileAttributes : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["skipUsers"] = state ? state.skipUsers : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            inputs["customProfileAttributes"] = args ? args.customProfileAttributes : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["skipUsers"] = args ? args.skipUsers : undefined;
            inputs["users"] = args ? args.users : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Group.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * raw JSON containing all custom profile attributes.
     */
    customProfileAttributes?: pulumi.Input<string>;
    /**
     * The description of the Okta Group.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Okta Group.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicator that allows a group to skip `users` sync (it's also can be provided during import). Default is `false`.
     */
    skipUsers?: pulumi.Input<boolean>;
    /**
     * The users associated with the group. This can also be done per user.
     * `DEPRECATED`: Please replace usage with the `okta.GroupMemberships` resource.
     *
     * @deprecated The `users` field is now deprecated for the resource `okta_group`, please replace all uses of this with: `okta_group_memberships`
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * raw JSON containing all custom profile attributes.
     */
    customProfileAttributes?: pulumi.Input<string>;
    /**
     * The description of the Okta Group.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Okta Group.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicator that allows a group to skip `users` sync (it's also can be provided during import). Default is `false`.
     */
    skipUsers?: pulumi.Input<boolean>;
    /**
     * The users associated with the group. This can also be done per user.
     * `DEPRECATED`: Please replace usage with the `okta.GroupMemberships` resource.
     *
     * @deprecated The `users` field is now deprecated for the resource `okta_group`, please replace all uses of this with: `okta_group_memberships`
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
