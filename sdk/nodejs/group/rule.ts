// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:group/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    public readonly expressionType!: pulumi.Output<string | undefined>;
    public readonly expressionValue!: pulumi.Output<string>;
    public readonly groupAssignments!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Remove users added by this rule from the assigned group after deleting this resource
     */
    public readonly removeAssignedUsers!: pulumi.Output<boolean | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The list of user IDs that would be excluded when rules are processed
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["expressionType"] = state ? state.expressionType : undefined;
            resourceInputs["expressionValue"] = state ? state.expressionValue : undefined;
            resourceInputs["groupAssignments"] = state ? state.groupAssignments : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["removeAssignedUsers"] = state ? state.removeAssignedUsers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.expressionValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressionValue'");
            }
            if ((!args || args.groupAssignments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupAssignments'");
            }
            resourceInputs["expressionType"] = args ? args.expressionType : undefined;
            resourceInputs["expressionValue"] = args ? args.expressionValue : undefined;
            resourceInputs["groupAssignments"] = args ? args.groupAssignments : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["removeAssignedUsers"] = args ? args.removeAssignedUsers : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    expressionType?: pulumi.Input<string>;
    expressionValue?: pulumi.Input<string>;
    groupAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Remove users added by this rule from the assigned group after deleting this resource
     */
    removeAssignedUsers?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    /**
     * The list of user IDs that would be excluded when rules are processed
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    expressionType?: pulumi.Input<string>;
    expressionValue: pulumi.Input<string>;
    groupAssignments: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Remove users added by this rule from the assigned group after deleting this resource
     */
    removeAssignedUsers?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    /**
     * The list of user IDs that would be excluded when rules are processed
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
