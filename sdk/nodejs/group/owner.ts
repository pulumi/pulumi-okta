// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages group owner resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.user.User("test", {
 *     firstName: "TestAcc",
 *     lastName: "Smith",
 *     login: "testAcc-replace_with_uuid@example.com",
 *     email: "testAcc-replace_with_uuid@example.com",
 * });
 * const testGroup = new okta.group.Group("test", {name: "testAcc_replace_with_uuid"});
 * const testOwner = new okta.group.Owner("test", {
 *     groupId: testGroup.id,
 *     idOfGroupOwner: test.id,
 *     type: "USER",
 * });
 * ```
 */
export class Owner extends pulumi.CustomResource {
    /**
     * Get an existing Owner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OwnerState, opts?: pulumi.CustomResourceOptions): Owner {
        return new Owner(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:group/owner:Owner';

    /**
     * Returns true if the given object is an instance of Owner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Owner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Owner.__pulumiType;
    }

    /**
     * The display name of the group owner
     */
    declare public /*out*/ readonly displayName: pulumi.Output<string>;
    /**
     * The id of the group
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * The user id of the group owner
     */
    declare public readonly idOfGroupOwner: pulumi.Output<string>;
    /**
     * The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
     */
    declare public /*out*/ readonly originId: pulumi.Output<string>;
    /**
     * The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
     */
    declare public /*out*/ readonly originType: pulumi.Output<string>;
    /**
     * If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
     */
    declare public /*out*/ readonly resolved: pulumi.Output<boolean>;
    /**
     * The entity type of the owner. Enum: "GROUP" "USER"
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Owner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OwnerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OwnerArgs | OwnerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OwnerState | undefined;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["idOfGroupOwner"] = state?.idOfGroupOwner;
            resourceInputs["originId"] = state?.originId;
            resourceInputs["originType"] = state?.originType;
            resourceInputs["resolved"] = state?.resolved;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as OwnerArgs | undefined;
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.idOfGroupOwner === undefined && !opts.urn) {
                throw new Error("Missing required property 'idOfGroupOwner'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["idOfGroupOwner"] = args?.idOfGroupOwner;
            resourceInputs["type"] = args?.type;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["originId"] = undefined /*out*/;
            resourceInputs["originType"] = undefined /*out*/;
            resourceInputs["resolved"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Owner.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Owner resources.
 */
export interface OwnerState {
    /**
     * The display name of the group owner
     */
    displayName?: pulumi.Input<string>;
    /**
     * The id of the group
     */
    groupId?: pulumi.Input<string>;
    /**
     * The user id of the group owner
     */
    idOfGroupOwner?: pulumi.Input<string>;
    /**
     * The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
     */
    originId?: pulumi.Input<string>;
    /**
     * The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
     */
    originType?: pulumi.Input<string>;
    /**
     * If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
     */
    resolved?: pulumi.Input<boolean>;
    /**
     * The entity type of the owner. Enum: "GROUP" "USER"
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Owner resource.
 */
export interface OwnerArgs {
    /**
     * The id of the group
     */
    groupId: pulumi.Input<string>;
    /**
     * The user id of the group owner
     */
    idOfGroupOwner: pulumi.Input<string>;
    /**
     * The entity type of the owner. Enum: "GROUP" "USER"
     */
    type: pulumi.Input<string>;
}
