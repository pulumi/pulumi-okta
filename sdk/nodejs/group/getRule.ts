// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Get a group rule from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.group.getRule({
 *     id: example.id,
 * });
 * ```
 */
export function getRule(args?: GetRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:group/getRule:getRule", {
        "id": args.id,
        "name": args.name,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getRule.
 */
export interface GetRuleArgs {
    /**
     * The ID of the Group Rule.
     */
    id?: string;
    /**
     * The name of the Group Rule.
     */
    name?: string;
    /**
     * Default to `ACTIVE`
     */
    status?: string;
}

/**
 * A collection of values returned by getRule.
 */
export interface GetRuleResult {
    /**
     * The expression type to use to invoke the rule.
     */
    readonly expressionType: string;
    /**
     * The expression value.
     */
    readonly expressionValue: string;
    /**
     * The list of group ids to assign the users to.
     */
    readonly groupAssignments: string[];
    /**
     * The ID of the Group Rule.
     */
    readonly id?: string;
    /**
     * The name of the Group Rule.
     */
    readonly name?: string;
    /**
     * Default to `ACTIVE`
     */
    readonly status?: string;
    /**
     * The list of user IDs that would be excluded when rules are processed.
     */
    readonly usersExcludeds: string[];
}
/**
 * Get a group rule from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.group.getRule({
 *     id: example.id,
 * });
 * ```
 */
export function getRuleOutput(args?: GetRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:group/getRule:getRule", {
        "id": args.id,
        "name": args.name,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getRule.
 */
export interface GetRuleOutputArgs {
    /**
     * The ID of the Group Rule.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the Group Rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
