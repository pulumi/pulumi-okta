// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Assigns Admin roles to Okta Groups.
 *
 * This resource allows you to assign Okta administrator roles to Okta Groups. This resource provides a one-to-one
 * interface between the Okta group and the admin role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.group.Role("example", {
 *     groupId: "<group id>",
 *     roleType: "READ_ONLY_ADMIN",
 * });
 * ```
 *
 * ## Import
 *
 * Individual admin role assignment can be imported by passing the group and role assignment IDs as follows
 *
 * ```sh
 *  $ pulumi import okta:group/role:Role example <group id>/<role id>
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:group/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * The ID of group to attach admin roles to.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Admin role assigned to the group. It can be any one of the following values `"SUPER_ADMIN"`
     * , `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`
     * , `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`, `"GROUP_MEMBERSHIP_ADMIN"`.
     */
    public readonly roleType!: pulumi.Output<string>;
    /**
     * A list of app names (name represents set of app instances, like 'salesforce' or '
     * facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as
     * the targets of the admin role.
     * - Only supported when used with the role type `"APP_ADMIN"`.
     */
    public readonly targetAppLists!: pulumi.Output<string[] | undefined>;
    /**
     * A list of group IDs you would like as the targets of the admin role.
     * - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     */
    public readonly targetGroupLists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
            inputs["roleType"] = state ? state.roleType : undefined;
            inputs["targetAppLists"] = state ? state.targetAppLists : undefined;
            inputs["targetGroupLists"] = state ? state.targetGroupLists : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.roleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleType'");
            }
            inputs["groupId"] = args ? args.groupId : undefined;
            inputs["roleType"] = args ? args.roleType : undefined;
            inputs["targetAppLists"] = args ? args.targetAppLists : undefined;
            inputs["targetGroupLists"] = args ? args.targetGroupLists : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Role.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * The ID of group to attach admin roles to.
     */
    readonly groupId?: pulumi.Input<string>;
    /**
     * Admin role assigned to the group. It can be any one of the following values `"SUPER_ADMIN"`
     * , `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`
     * , `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`, `"GROUP_MEMBERSHIP_ADMIN"`.
     */
    readonly roleType?: pulumi.Input<string>;
    /**
     * A list of app names (name represents set of app instances, like 'salesforce' or '
     * facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as
     * the targets of the admin role.
     * - Only supported when used with the role type `"APP_ADMIN"`.
     */
    readonly targetAppLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of group IDs you would like as the targets of the admin role.
     * - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     */
    readonly targetGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * The ID of group to attach admin roles to.
     */
    readonly groupId: pulumi.Input<string>;
    /**
     * Admin role assigned to the group. It can be any one of the following values `"SUPER_ADMIN"`
     * , `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`
     * , `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`, `"GROUP_MEMBERSHIP_ADMIN"`.
     */
    readonly roleType: pulumi.Input<string>;
    /**
     * A list of app names (name represents set of app instances, like 'salesforce' or '
     * facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as
     * the targets of the admin role.
     * - Only supported when used with the role type `"APP_ADMIN"`.
     */
    readonly targetAppLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of group IDs you would like as the targets of the admin role.
     * - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     */
    readonly targetGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}
