// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > **DEPRECATED:** This resource is deprecated and will be removed in favor of using `okta.group.Role`, please migrate as soon as possible
 *
 * This resource allows you to create and configure Group level Admin Role Assignments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.group.Roles("example", {
 *     adminRoles: ["SUPER_ADMIN"],
 *     groupId: "<group id>",
 * });
 * ```
 *
 * ## Import
 *
 * Group Role Assignment can be imported via the Okta Group ID.
 *
 * ```sh
 *  $ pulumi import okta:group/roles:Roles example &#60;group id&#62;
 * ```
 */
export class Roles extends pulumi.CustomResource {
    /**
     * Get an existing Roles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolesState, opts?: pulumi.CustomResourceOptions): Roles {
        return new Roles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:group/roles:Roles';

    /**
     * Returns true if the given object is an instance of Roles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Roles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Roles.__pulumiType;
    }

    /**
     * Admin roles associated with the group. It can be any of the following values:
     * `"API_ADMIN"`,
     * `"APP_ADMIN"`,
     * `"CUSTOM"`,
     * `"GROUP_MEMBERSHIP_ADMIN"`,
     * `"HELP_DESK_ADMIN"`,
     * `"MOBILE_ADMIN"`,
     * `"ORG_ADMIN"`,
     * `"READ_ONLY_ADMIN"`,
     * `"REPORT_ADMIN"`,
     * `"SUPER_ADMIN"`,
     * `"USER_ADMIN"`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     */
    public readonly adminRoles!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of group to attach admin roles to.
     */
    public readonly groupId!: pulumi.Output<string>;

    /**
     * Create a Roles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolesArgs | RolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolesState | undefined;
            resourceInputs["adminRoles"] = state ? state.adminRoles : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
        } else {
            const args = argsOrState as RolesArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["adminRoles"] = args ? args.adminRoles : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Roles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Roles resources.
 */
export interface RolesState {
    /**
     * Admin roles associated with the group. It can be any of the following values:
     * `"API_ADMIN"`,
     * `"APP_ADMIN"`,
     * `"CUSTOM"`,
     * `"GROUP_MEMBERSHIP_ADMIN"`,
     * `"HELP_DESK_ADMIN"`,
     * `"MOBILE_ADMIN"`,
     * `"ORG_ADMIN"`,
     * `"READ_ONLY_ADMIN"`,
     * `"REPORT_ADMIN"`,
     * `"SUPER_ADMIN"`,
     * `"USER_ADMIN"`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     */
    adminRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of group to attach admin roles to.
     */
    groupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Roles resource.
 */
export interface RolesArgs {
    /**
     * Admin roles associated with the group. It can be any of the following values:
     * `"API_ADMIN"`,
     * `"APP_ADMIN"`,
     * `"CUSTOM"`,
     * `"GROUP_MEMBERSHIP_ADMIN"`,
     * `"HELP_DESK_ADMIN"`,
     * `"MOBILE_ADMIN"`,
     * `"ORG_ADMIN"`,
     * `"READ_ONLY_ADMIN"`,
     * `"REPORT_ADMIN"`,
     * `"SUPER_ADMIN"`,
     * `"USER_ADMIN"`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     */
    adminRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of group to attach admin roles to.
     */
    groupId: pulumi.Input<string>;
}
