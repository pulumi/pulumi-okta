// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource to manage a question factor for a user
 */
export class UserFactorQuestion extends pulumi.CustomResource {
    /**
     * Get an existing UserFactorQuestion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserFactorQuestionState, opts?: pulumi.CustomResourceOptions): UserFactorQuestion {
        return new UserFactorQuestion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/userFactorQuestion:UserFactorQuestion';

    /**
     * Returns true if the given object is an instance of UserFactorQuestion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserFactorQuestion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserFactorQuestion.__pulumiType;
    }

    /**
     * User password security answer
     */
    public readonly answer!: pulumi.Output<string>;
    /**
     * Unique key for question
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * User factor status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Display text for question
     */
    public /*out*/ readonly text!: pulumi.Output<string>;
    /**
     * ID of a Okta User
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserFactorQuestion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserFactorQuestionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserFactorQuestionArgs | UserFactorQuestionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserFactorQuestionState | undefined;
            resourceInputs["answer"] = state ? state.answer : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserFactorQuestionArgs | undefined;
            if ((!args || args.answer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'answer'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["answer"] = args?.answer ? pulumi.secret(args.answer) : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["text"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["answer"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserFactorQuestion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserFactorQuestion resources.
 */
export interface UserFactorQuestionState {
    /**
     * User password security answer
     */
    answer?: pulumi.Input<string>;
    /**
     * Unique key for question
     */
    key?: pulumi.Input<string>;
    /**
     * User factor status.
     */
    status?: pulumi.Input<string>;
    /**
     * Display text for question
     */
    text?: pulumi.Input<string>;
    /**
     * ID of a Okta User
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserFactorQuestion resource.
 */
export interface UserFactorQuestionArgs {
    /**
     * User password security answer
     */
    answer: pulumi.Input<string>;
    /**
     * Unique key for question
     */
    key: pulumi.Input<string>;
    /**
     * ID of a Okta User
     */
    userId: pulumi.Input<string>;
}
