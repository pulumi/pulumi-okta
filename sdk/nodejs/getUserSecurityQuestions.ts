// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve a list of user's security questions.
 */
export function getUserSecurityQuestions(args: GetUserSecurityQuestionsArgs, opts?: pulumi.InvokeOptions): Promise<GetUserSecurityQuestionsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("okta:index/getUserSecurityQuestions:getUserSecurityQuestions", {
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserSecurityQuestions.
 */
export interface GetUserSecurityQuestionsArgs {
    /**
     * User ID.
     */
    userId: string;
}

/**
 * A collection of values returned by getUserSecurityQuestions.
 */
export interface GetUserSecurityQuestionsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * collection of user's security question retrieved from Okta with the following properties:
     */
    readonly questions: outputs.GetUserSecurityQuestionsQuestion[];
    readonly userId: string;
}

export function getUserSecurityQuestionsOutput(args: GetUserSecurityQuestionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserSecurityQuestionsResult> {
    return pulumi.output(args).apply(a => getUserSecurityQuestions(a, opts))
}

/**
 * A collection of arguments for invoking getUserSecurityQuestions.
 */
export interface GetUserSecurityQuestionsOutputArgs {
    /**
     * User ID.
     */
    userId: pulumi.Input<string>;
}
