// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Idp extends pulumi.CustomResource {
    /**
     * Get an existing Idp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpState, opts?: pulumi.CustomResourceOptions): Idp {
        return new Idp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/idp:Idp';

    /**
     * Returns true if the given object is an instance of Idp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Idp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Idp.__pulumiType;
    }

    public readonly accountLinkAction!: pulumi.Output<string | undefined>;
    public readonly accountLinkGroupIncludes!: pulumi.Output<string[] | undefined>;
    public readonly authorizationBinding!: pulumi.Output<string>;
    public readonly authorizationUrl!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly deprovisionedAction!: pulumi.Output<string | undefined>;
    public readonly groupsAction!: pulumi.Output<string | undefined>;
    public readonly groupsAssignments!: pulumi.Output<string[] | undefined>;
    public readonly groupsAttribute!: pulumi.Output<string | undefined>;
    public readonly groupsFilters!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    public readonly issuerUrl!: pulumi.Output<string>;
    public readonly jwksBinding!: pulumi.Output<string>;
    public readonly jwksUrl!: pulumi.Output<string>;
    public readonly maxClockSkew!: pulumi.Output<number | undefined>;
    /**
     * name of idp
     */
    public readonly name!: pulumi.Output<string>;
    public readonly profileMaster!: pulumi.Output<boolean | undefined>;
    public readonly protocolType!: pulumi.Output<string | undefined>;
    public readonly provisioningAction!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly requestSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly requestSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly responseSignatureScope!: pulumi.Output<string | undefined>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly subjectMatchAttribute!: pulumi.Output<string | undefined>;
    public readonly subjectMatchType!: pulumi.Output<string | undefined>;
    public readonly suspendedAction!: pulumi.Output<string | undefined>;
    public readonly tokenBinding!: pulumi.Output<string>;
    public readonly tokenUrl!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly userInfoBinding!: pulumi.Output<string | undefined>;
    public readonly userInfoUrl!: pulumi.Output<string | undefined>;
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a Idp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpArgs | IdpState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IdpState | undefined;
            inputs["accountLinkAction"] = state ? state.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = state ? state.accountLinkGroupIncludes : undefined;
            inputs["authorizationBinding"] = state ? state.authorizationBinding : undefined;
            inputs["authorizationUrl"] = state ? state.authorizationUrl : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["deprovisionedAction"] = state ? state.deprovisionedAction : undefined;
            inputs["groupsAction"] = state ? state.groupsAction : undefined;
            inputs["groupsAssignments"] = state ? state.groupsAssignments : undefined;
            inputs["groupsAttribute"] = state ? state.groupsAttribute : undefined;
            inputs["groupsFilters"] = state ? state.groupsFilters : undefined;
            inputs["issuerMode"] = state ? state.issuerMode : undefined;
            inputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            inputs["jwksBinding"] = state ? state.jwksBinding : undefined;
            inputs["jwksUrl"] = state ? state.jwksUrl : undefined;
            inputs["maxClockSkew"] = state ? state.maxClockSkew : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["profileMaster"] = state ? state.profileMaster : undefined;
            inputs["protocolType"] = state ? state.protocolType : undefined;
            inputs["provisioningAction"] = state ? state.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = state ? state.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = state ? state.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = state ? state.responseSignatureScope : undefined;
            inputs["scopes"] = state ? state.scopes : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subjectMatchAttribute"] = state ? state.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = state ? state.subjectMatchType : undefined;
            inputs["suspendedAction"] = state ? state.suspendedAction : undefined;
            inputs["tokenBinding"] = state ? state.tokenBinding : undefined;
            inputs["tokenUrl"] = state ? state.tokenUrl : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userInfoBinding"] = state ? state.userInfoBinding : undefined;
            inputs["userInfoUrl"] = state ? state.userInfoUrl : undefined;
            inputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as IdpArgs | undefined;
            if ((!args || args.authorizationBinding === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'authorizationBinding'");
            }
            if ((!args || args.authorizationUrl === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if ((!args || args.clientId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.issuerUrl === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.jwksBinding === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'jwksBinding'");
            }
            if ((!args || args.jwksUrl === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'jwksUrl'");
            }
            if ((!args || args.scopes === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.tokenBinding === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'tokenBinding'");
            }
            if ((!args || args.tokenUrl === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            inputs["accountLinkAction"] = args ? args.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = args ? args.accountLinkGroupIncludes : undefined;
            inputs["authorizationBinding"] = args ? args.authorizationBinding : undefined;
            inputs["authorizationUrl"] = args ? args.authorizationUrl : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["deprovisionedAction"] = args ? args.deprovisionedAction : undefined;
            inputs["groupsAction"] = args ? args.groupsAction : undefined;
            inputs["groupsAssignments"] = args ? args.groupsAssignments : undefined;
            inputs["groupsAttribute"] = args ? args.groupsAttribute : undefined;
            inputs["groupsFilters"] = args ? args.groupsFilters : undefined;
            inputs["issuerMode"] = args ? args.issuerMode : undefined;
            inputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            inputs["jwksBinding"] = args ? args.jwksBinding : undefined;
            inputs["jwksUrl"] = args ? args.jwksUrl : undefined;
            inputs["maxClockSkew"] = args ? args.maxClockSkew : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["profileMaster"] = args ? args.profileMaster : undefined;
            inputs["protocolType"] = args ? args.protocolType : undefined;
            inputs["provisioningAction"] = args ? args.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = args ? args.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = args ? args.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = args ? args.responseSignatureScope : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subjectMatchAttribute"] = args ? args.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = args ? args.subjectMatchType : undefined;
            inputs["suspendedAction"] = args ? args.suspendedAction : undefined;
            inputs["tokenBinding"] = args ? args.tokenBinding : undefined;
            inputs["tokenUrl"] = args ? args.tokenUrl : undefined;
            inputs["userInfoBinding"] = args ? args.userInfoBinding : undefined;
            inputs["userInfoUrl"] = args ? args.userInfoUrl : undefined;
            inputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Idp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Idp resources.
 */
export interface IdpState {
    readonly accountLinkAction?: pulumi.Input<string>;
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly authorizationBinding?: pulumi.Input<string>;
    readonly authorizationUrl?: pulumi.Input<string>;
    readonly clientId?: pulumi.Input<string>;
    readonly clientSecret?: pulumi.Input<string>;
    readonly deprovisionedAction?: pulumi.Input<string>;
    readonly groupsAction?: pulumi.Input<string>;
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupsAttribute?: pulumi.Input<string>;
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    readonly issuerMode?: pulumi.Input<string>;
    readonly issuerUrl?: pulumi.Input<string>;
    readonly jwksBinding?: pulumi.Input<string>;
    readonly jwksUrl?: pulumi.Input<string>;
    readonly maxClockSkew?: pulumi.Input<number>;
    /**
     * name of idp
     */
    readonly name?: pulumi.Input<string>;
    readonly profileMaster?: pulumi.Input<boolean>;
    readonly protocolType?: pulumi.Input<string>;
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly status?: pulumi.Input<string>;
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    readonly subjectMatchType?: pulumi.Input<string>;
    readonly suspendedAction?: pulumi.Input<string>;
    readonly tokenBinding?: pulumi.Input<string>;
    readonly tokenUrl?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
    readonly userInfoBinding?: pulumi.Input<string>;
    readonly userInfoUrl?: pulumi.Input<string>;
    readonly usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Idp resource.
 */
export interface IdpArgs {
    readonly accountLinkAction?: pulumi.Input<string>;
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly authorizationBinding: pulumi.Input<string>;
    readonly authorizationUrl: pulumi.Input<string>;
    readonly clientId: pulumi.Input<string>;
    readonly clientSecret: pulumi.Input<string>;
    readonly deprovisionedAction?: pulumi.Input<string>;
    readonly groupsAction?: pulumi.Input<string>;
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupsAttribute?: pulumi.Input<string>;
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    readonly issuerMode?: pulumi.Input<string>;
    readonly issuerUrl: pulumi.Input<string>;
    readonly jwksBinding: pulumi.Input<string>;
    readonly jwksUrl: pulumi.Input<string>;
    readonly maxClockSkew?: pulumi.Input<number>;
    /**
     * name of idp
     */
    readonly name?: pulumi.Input<string>;
    readonly profileMaster?: pulumi.Input<boolean>;
    readonly protocolType?: pulumi.Input<string>;
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    readonly scopes: pulumi.Input<pulumi.Input<string>[]>;
    readonly status?: pulumi.Input<string>;
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    readonly subjectMatchType?: pulumi.Input<string>;
    readonly suspendedAction?: pulumi.Input<string>;
    readonly tokenBinding: pulumi.Input<string>;
    readonly tokenUrl: pulumi.Input<string>;
    readonly userInfoBinding?: pulumi.Input<string>;
    readonly userInfoUrl?: pulumi.Input<string>;
    readonly usernameTemplate?: pulumi.Input<string>;
}
