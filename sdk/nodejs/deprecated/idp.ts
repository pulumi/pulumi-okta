// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Idp extends pulumi.CustomResource {
    /**
     * Get an existing Idp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpState, opts?: pulumi.CustomResourceOptions): Idp {
        return new Idp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/idp:Idp';

    /**
     * Returns true if the given object is an instance of Idp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Idp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Idp.__pulumiType;
    }

    public readonly accountLinkAction!: pulumi.Output<string | undefined>;
    public readonly accountLinkGroupIncludes!: pulumi.Output<string[] | undefined>;
    public readonly authorizationBinding!: pulumi.Output<string>;
    public readonly authorizationUrl!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly deprovisionedAction!: pulumi.Output<string | undefined>;
    public readonly groupsAction!: pulumi.Output<string | undefined>;
    public readonly groupsAssignments!: pulumi.Output<string[] | undefined>;
    public readonly groupsAttribute!: pulumi.Output<string | undefined>;
    public readonly groupsFilters!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    public readonly issuerUrl!: pulumi.Output<string>;
    public readonly jwksBinding!: pulumi.Output<string>;
    public readonly jwksUrl!: pulumi.Output<string>;
    public readonly maxClockSkew!: pulumi.Output<number | undefined>;
    /**
     * Name of the IdP
     */
    public readonly name!: pulumi.Output<string>;
    public readonly profileMaster!: pulumi.Output<boolean | undefined>;
    public readonly protocolType!: pulumi.Output<string | undefined>;
    public readonly provisioningAction!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly requestSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly requestSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly responseSignatureScope!: pulumi.Output<string | undefined>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly subjectMatchAttribute!: pulumi.Output<string | undefined>;
    public readonly subjectMatchType!: pulumi.Output<string | undefined>;
    public readonly suspendedAction!: pulumi.Output<string | undefined>;
    public readonly tokenBinding!: pulumi.Output<string>;
    public readonly tokenUrl!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly userInfoBinding!: pulumi.Output<string | undefined>;
    public readonly userInfoUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly userTypeId!: pulumi.Output<string>;
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a Idp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpArgs | IdpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpState | undefined;
            resourceInputs["accountLinkAction"] = state ? state.accountLinkAction : undefined;
            resourceInputs["accountLinkGroupIncludes"] = state ? state.accountLinkGroupIncludes : undefined;
            resourceInputs["authorizationBinding"] = state ? state.authorizationBinding : undefined;
            resourceInputs["authorizationUrl"] = state ? state.authorizationUrl : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["deprovisionedAction"] = state ? state.deprovisionedAction : undefined;
            resourceInputs["groupsAction"] = state ? state.groupsAction : undefined;
            resourceInputs["groupsAssignments"] = state ? state.groupsAssignments : undefined;
            resourceInputs["groupsAttribute"] = state ? state.groupsAttribute : undefined;
            resourceInputs["groupsFilters"] = state ? state.groupsFilters : undefined;
            resourceInputs["issuerMode"] = state ? state.issuerMode : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["jwksBinding"] = state ? state.jwksBinding : undefined;
            resourceInputs["jwksUrl"] = state ? state.jwksUrl : undefined;
            resourceInputs["maxClockSkew"] = state ? state.maxClockSkew : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileMaster"] = state ? state.profileMaster : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["provisioningAction"] = state ? state.provisioningAction : undefined;
            resourceInputs["requestSignatureAlgorithm"] = state ? state.requestSignatureAlgorithm : undefined;
            resourceInputs["requestSignatureScope"] = state ? state.requestSignatureScope : undefined;
            resourceInputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            resourceInputs["responseSignatureScope"] = state ? state.responseSignatureScope : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectMatchAttribute"] = state ? state.subjectMatchAttribute : undefined;
            resourceInputs["subjectMatchType"] = state ? state.subjectMatchType : undefined;
            resourceInputs["suspendedAction"] = state ? state.suspendedAction : undefined;
            resourceInputs["tokenBinding"] = state ? state.tokenBinding : undefined;
            resourceInputs["tokenUrl"] = state ? state.tokenUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userInfoBinding"] = state ? state.userInfoBinding : undefined;
            resourceInputs["userInfoUrl"] = state ? state.userInfoUrl : undefined;
            resourceInputs["userTypeId"] = state ? state.userTypeId : undefined;
            resourceInputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as IdpArgs | undefined;
            if ((!args || args.authorizationBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationBinding'");
            }
            if ((!args || args.authorizationUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.jwksBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwksBinding'");
            }
            if ((!args || args.jwksUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwksUrl'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.tokenBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenBinding'");
            }
            if ((!args || args.tokenUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            resourceInputs["accountLinkAction"] = args ? args.accountLinkAction : undefined;
            resourceInputs["accountLinkGroupIncludes"] = args ? args.accountLinkGroupIncludes : undefined;
            resourceInputs["authorizationBinding"] = args ? args.authorizationBinding : undefined;
            resourceInputs["authorizationUrl"] = args ? args.authorizationUrl : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["deprovisionedAction"] = args ? args.deprovisionedAction : undefined;
            resourceInputs["groupsAction"] = args ? args.groupsAction : undefined;
            resourceInputs["groupsAssignments"] = args ? args.groupsAssignments : undefined;
            resourceInputs["groupsAttribute"] = args ? args.groupsAttribute : undefined;
            resourceInputs["groupsFilters"] = args ? args.groupsFilters : undefined;
            resourceInputs["issuerMode"] = args ? args.issuerMode : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["jwksBinding"] = args ? args.jwksBinding : undefined;
            resourceInputs["jwksUrl"] = args ? args.jwksUrl : undefined;
            resourceInputs["maxClockSkew"] = args ? args.maxClockSkew : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profileMaster"] = args ? args.profileMaster : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["provisioningAction"] = args ? args.provisioningAction : undefined;
            resourceInputs["requestSignatureAlgorithm"] = args ? args.requestSignatureAlgorithm : undefined;
            resourceInputs["requestSignatureScope"] = args ? args.requestSignatureScope : undefined;
            resourceInputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            resourceInputs["responseSignatureScope"] = args ? args.responseSignatureScope : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subjectMatchAttribute"] = args ? args.subjectMatchAttribute : undefined;
            resourceInputs["subjectMatchType"] = args ? args.subjectMatchType : undefined;
            resourceInputs["suspendedAction"] = args ? args.suspendedAction : undefined;
            resourceInputs["tokenBinding"] = args ? args.tokenBinding : undefined;
            resourceInputs["tokenUrl"] = args ? args.tokenUrl : undefined;
            resourceInputs["userInfoBinding"] = args ? args.userInfoBinding : undefined;
            resourceInputs["userInfoUrl"] = args ? args.userInfoUrl : undefined;
            resourceInputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Idp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Idp resources.
 */
export interface IdpState {
    accountLinkAction?: pulumi.Input<string>;
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    authorizationBinding?: pulumi.Input<string>;
    authorizationUrl?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    deprovisionedAction?: pulumi.Input<string>;
    groupsAction?: pulumi.Input<string>;
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    groupsAttribute?: pulumi.Input<string>;
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    issuerMode?: pulumi.Input<string>;
    issuerUrl?: pulumi.Input<string>;
    jwksBinding?: pulumi.Input<string>;
    jwksUrl?: pulumi.Input<string>;
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    profileMaster?: pulumi.Input<boolean>;
    protocolType?: pulumi.Input<string>;
    provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    responseSignatureScope?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    subjectMatchAttribute?: pulumi.Input<string>;
    subjectMatchType?: pulumi.Input<string>;
    suspendedAction?: pulumi.Input<string>;
    tokenBinding?: pulumi.Input<string>;
    tokenUrl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    userInfoUrl?: pulumi.Input<string>;
    userTypeId?: pulumi.Input<string>;
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Idp resource.
 */
export interface IdpArgs {
    accountLinkAction?: pulumi.Input<string>;
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    authorizationBinding: pulumi.Input<string>;
    authorizationUrl: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    deprovisionedAction?: pulumi.Input<string>;
    groupsAction?: pulumi.Input<string>;
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    groupsAttribute?: pulumi.Input<string>;
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    issuerMode?: pulumi.Input<string>;
    issuerUrl: pulumi.Input<string>;
    jwksBinding: pulumi.Input<string>;
    jwksUrl: pulumi.Input<string>;
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    profileMaster?: pulumi.Input<boolean>;
    protocolType?: pulumi.Input<string>;
    provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    responseSignatureScope?: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    subjectMatchAttribute?: pulumi.Input<string>;
    subjectMatchType?: pulumi.Input<string>;
    suspendedAction?: pulumi.Input<string>;
    tokenBinding: pulumi.Input<string>;
    tokenUrl: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    userInfoUrl?: pulumi.Input<string>;
    usernameTemplate?: pulumi.Input<string>;
}
