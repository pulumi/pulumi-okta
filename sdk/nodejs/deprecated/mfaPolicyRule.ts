// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class MfaPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing MfaPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaPolicyRuleState, opts?: pulumi.CustomResourceOptions): MfaPolicyRule {
        return new MfaPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/mfaPolicyRule:MfaPolicyRule';

    /**
     * Returns true if the given object is an instance of MfaPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaPolicyRule.__pulumiType;
    }

    /**
     * Applications to exclude
     */
    public readonly appExcludes!: pulumi.Output<outputs.deprecated.MfaPolicyRuleAppExclude[] | undefined>;
    /**
     * Applications to include
     */
    public readonly appIncludes!: pulumi.Output<outputs.deprecated.MfaPolicyRuleAppInclude[] | undefined>;
    /**
     * Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?
     */
    public readonly enroll!: pulumi.Output<string | undefined>;
    /**
     * Policy Rule Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * The zones to exclude
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * The zones to include
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Policy ID of the Rule
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    public readonly policyid!: pulumi.Output<string | undefined>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Set of User IDs to Exclude
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a MfaPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MfaPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaPolicyRuleArgs | MfaPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaPolicyRuleState | undefined;
            resourceInputs["appExcludes"] = state ? state.appExcludes : undefined;
            resourceInputs["appIncludes"] = state ? state.appIncludes : undefined;
            resourceInputs["enroll"] = state ? state.enroll : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConnection"] = state ? state.networkConnection : undefined;
            resourceInputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
        } else {
            const args = argsOrState as MfaPolicyRuleArgs | undefined;
            resourceInputs["appExcludes"] = args ? args.appExcludes : undefined;
            resourceInputs["appIncludes"] = args ? args.appIncludes : undefined;
            resourceInputs["enroll"] = args ? args.enroll : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConnection"] = args ? args.networkConnection : undefined;
            resourceInputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MfaPolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MfaPolicyRule resources.
 */
export interface MfaPolicyRuleState {
    /**
     * Applications to exclude
     */
    appExcludes?: pulumi.Input<pulumi.Input<inputs.deprecated.MfaPolicyRuleAppExclude>[]>;
    /**
     * Applications to include
     */
    appIncludes?: pulumi.Input<pulumi.Input<inputs.deprecated.MfaPolicyRuleAppInclude>[]>;
    /**
     * Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?
     */
    enroll?: pulumi.Input<string>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    policyid?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MfaPolicyRule resource.
 */
export interface MfaPolicyRuleArgs {
    /**
     * Applications to exclude
     */
    appExcludes?: pulumi.Input<pulumi.Input<inputs.deprecated.MfaPolicyRuleAppExclude>[]>;
    /**
     * Applications to include
     */
    appIncludes?: pulumi.Input<pulumi.Input<inputs.deprecated.MfaPolicyRuleAppInclude>[]>;
    /**
     * Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGED, or NEVER?
     */
    enroll?: pulumi.Input<string>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    policyid?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
