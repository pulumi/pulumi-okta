// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SamlIdp extends pulumi.CustomResource {
    /**
     * Get an existing SamlIdp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlIdpState, opts?: pulumi.CustomResourceOptions): SamlIdp {
        return new SamlIdp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/samlIdp:SamlIdp';

    /**
     * Returns true if the given object is an instance of SamlIdp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlIdp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlIdp.__pulumiType;
    }

    public readonly accountLinkAction!: pulumi.Output<string | undefined>;
    public readonly accountLinkGroupIncludes!: pulumi.Output<string[] | undefined>;
    public readonly acsBinding!: pulumi.Output<string>;
    public readonly acsType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly audience!: pulumi.Output<string>;
    public readonly deprovisionedAction!: pulumi.Output<string | undefined>;
    public readonly groupsAction!: pulumi.Output<string | undefined>;
    public readonly groupsAssignments!: pulumi.Output<string[] | undefined>;
    public readonly groupsAttribute!: pulumi.Output<string | undefined>;
    public readonly groupsFilters!: pulumi.Output<string[] | undefined>;
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    public readonly kid!: pulumi.Output<string>;
    public readonly maxClockSkew!: pulumi.Output<number | undefined>;
    /**
     * name of idp
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nameFormat!: pulumi.Output<string | undefined>;
    public readonly profileMaster!: pulumi.Output<boolean | undefined>;
    public readonly provisioningAction!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly requestSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly requestSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign requests
     */
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * algorithm to use to sign response
     */
    public readonly responseSignatureScope!: pulumi.Output<string | undefined>;
    public readonly ssoBinding!: pulumi.Output<string | undefined>;
    public readonly ssoDestination!: pulumi.Output<string | undefined>;
    public readonly ssoUrl!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly subjectFilter!: pulumi.Output<string | undefined>;
    public readonly subjectFormats!: pulumi.Output<string[] | undefined>;
    public readonly subjectMatchAttribute!: pulumi.Output<string | undefined>;
    public readonly subjectMatchType!: pulumi.Output<string | undefined>;
    public readonly suspendedAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a SamlIdp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlIdpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlIdpArgs | SamlIdpState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SamlIdpState | undefined;
            inputs["accountLinkAction"] = state ? state.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = state ? state.accountLinkGroupIncludes : undefined;
            inputs["acsBinding"] = state ? state.acsBinding : undefined;
            inputs["acsType"] = state ? state.acsType : undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["deprovisionedAction"] = state ? state.deprovisionedAction : undefined;
            inputs["groupsAction"] = state ? state.groupsAction : undefined;
            inputs["groupsAssignments"] = state ? state.groupsAssignments : undefined;
            inputs["groupsAttribute"] = state ? state.groupsAttribute : undefined;
            inputs["groupsFilters"] = state ? state.groupsFilters : undefined;
            inputs["issuer"] = state ? state.issuer : undefined;
            inputs["issuerMode"] = state ? state.issuerMode : undefined;
            inputs["kid"] = state ? state.kid : undefined;
            inputs["maxClockSkew"] = state ? state.maxClockSkew : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameFormat"] = state ? state.nameFormat : undefined;
            inputs["profileMaster"] = state ? state.profileMaster : undefined;
            inputs["provisioningAction"] = state ? state.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = state ? state.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = state ? state.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = state ? state.responseSignatureScope : undefined;
            inputs["ssoBinding"] = state ? state.ssoBinding : undefined;
            inputs["ssoDestination"] = state ? state.ssoDestination : undefined;
            inputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subjectFilter"] = state ? state.subjectFilter : undefined;
            inputs["subjectFormats"] = state ? state.subjectFormats : undefined;
            inputs["subjectMatchAttribute"] = state ? state.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = state ? state.subjectMatchType : undefined;
            inputs["suspendedAction"] = state ? state.suspendedAction : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as SamlIdpArgs | undefined;
            if ((!args || args.acsBinding === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'acsBinding'");
            }
            if ((!args || args.issuer === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.kid === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'kid'");
            }
            if ((!args || args.ssoUrl === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            inputs["accountLinkAction"] = args ? args.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = args ? args.accountLinkGroupIncludes : undefined;
            inputs["acsBinding"] = args ? args.acsBinding : undefined;
            inputs["acsType"] = args ? args.acsType : undefined;
            inputs["deprovisionedAction"] = args ? args.deprovisionedAction : undefined;
            inputs["groupsAction"] = args ? args.groupsAction : undefined;
            inputs["groupsAssignments"] = args ? args.groupsAssignments : undefined;
            inputs["groupsAttribute"] = args ? args.groupsAttribute : undefined;
            inputs["groupsFilters"] = args ? args.groupsFilters : undefined;
            inputs["issuer"] = args ? args.issuer : undefined;
            inputs["issuerMode"] = args ? args.issuerMode : undefined;
            inputs["kid"] = args ? args.kid : undefined;
            inputs["maxClockSkew"] = args ? args.maxClockSkew : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameFormat"] = args ? args.nameFormat : undefined;
            inputs["profileMaster"] = args ? args.profileMaster : undefined;
            inputs["provisioningAction"] = args ? args.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = args ? args.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = args ? args.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = args ? args.responseSignatureScope : undefined;
            inputs["ssoBinding"] = args ? args.ssoBinding : undefined;
            inputs["ssoDestination"] = args ? args.ssoDestination : undefined;
            inputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subjectFilter"] = args ? args.subjectFilter : undefined;
            inputs["subjectFormats"] = args ? args.subjectFormats : undefined;
            inputs["subjectMatchAttribute"] = args ? args.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = args ? args.subjectMatchType : undefined;
            inputs["suspendedAction"] = args ? args.suspendedAction : undefined;
            inputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
            inputs["audience"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SamlIdp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlIdp resources.
 */
export interface SamlIdpState {
    readonly accountLinkAction?: pulumi.Input<string>;
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly acsBinding?: pulumi.Input<string>;
    readonly acsType?: pulumi.Input<string>;
    readonly audience?: pulumi.Input<string>;
    readonly deprovisionedAction?: pulumi.Input<string>;
    readonly groupsAction?: pulumi.Input<string>;
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupsAttribute?: pulumi.Input<string>;
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    readonly issuer?: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    readonly issuerMode?: pulumi.Input<string>;
    readonly kid?: pulumi.Input<string>;
    readonly maxClockSkew?: pulumi.Input<number>;
    /**
     * name of idp
     */
    readonly name?: pulumi.Input<string>;
    readonly nameFormat?: pulumi.Input<string>;
    readonly profileMaster?: pulumi.Input<boolean>;
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    readonly ssoBinding?: pulumi.Input<string>;
    readonly ssoDestination?: pulumi.Input<string>;
    readonly ssoUrl?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly subjectFilter?: pulumi.Input<string>;
    readonly subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    readonly subjectMatchType?: pulumi.Input<string>;
    readonly suspendedAction?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
    readonly usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlIdp resource.
 */
export interface SamlIdpArgs {
    readonly accountLinkAction?: pulumi.Input<string>;
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly acsBinding: pulumi.Input<string>;
    readonly acsType?: pulumi.Input<string>;
    readonly deprovisionedAction?: pulumi.Input<string>;
    readonly groupsAction?: pulumi.Input<string>;
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupsAttribute?: pulumi.Input<string>;
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    readonly issuer: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    readonly issuerMode?: pulumi.Input<string>;
    readonly kid: pulumi.Input<string>;
    readonly maxClockSkew?: pulumi.Input<number>;
    /**
     * name of idp
     */
    readonly name?: pulumi.Input<string>;
    readonly nameFormat?: pulumi.Input<string>;
    readonly profileMaster?: pulumi.Input<boolean>;
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * algorithm to use to sign requests
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * algorithm to use to sign response
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    readonly ssoBinding?: pulumi.Input<string>;
    readonly ssoDestination?: pulumi.Input<string>;
    readonly ssoUrl: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly subjectFilter?: pulumi.Input<string>;
    readonly subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    readonly subjectMatchType?: pulumi.Input<string>;
    readonly suspendedAction?: pulumi.Input<string>;
    readonly usernameTemplate?: pulumi.Input<string>;
}
