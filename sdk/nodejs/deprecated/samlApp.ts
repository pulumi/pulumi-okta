// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class SamlApp extends pulumi.CustomResource {
    /**
     * Get an existing SamlApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlAppState, opts?: pulumi.CustomResourceOptions): SamlApp {
        return new SamlApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/samlApp:SamlApp';

    /**
     * Returns true if the given object is an instance of SamlApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlApp.__pulumiType;
    }

    /**
     * Custom error page URL
     */
    public readonly accessibilityErrorRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL
     */
    public readonly accessibilityLoginRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Enable self service
     */
    public readonly accessibilitySelfService!: pulumi.Output<boolean | undefined>;
    /**
     * Application settings in JSON format
     */
    public readonly appSettingsJson!: pulumi.Output<string | undefined>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    public readonly assertionSigned!: pulumi.Output<boolean | undefined>;
    public readonly attributeStatements!: pulumi.Output<outputs.deprecated.SamlAppAttributeStatement[] | undefined>;
    /**
     * Audience Restriction
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    public readonly authnContextClassRef!: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar
     */
    public readonly autoSubmitToolbar!: pulumi.Output<boolean | undefined>;
    /**
     * cert from SAML XML metadata payload
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    public readonly defaultRelayState!: pulumi.Output<string | undefined>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    public readonly digestAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    public /*out*/ readonly entityKey!: pulumi.Output<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    public /*out*/ readonly entityUrl!: pulumi.Output<string>;
    /**
     * features to enable
     */
    public readonly features!: pulumi.Output<string[] | undefined>;
    /**
     * Groups associated with the application
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Do not display application icon on mobile app
     */
    public readonly hideIos!: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    public readonly hideWeb!: pulumi.Output<boolean | undefined>;
    /**
     * Prompt user to re-authenticate if SP asks for it
     */
    public readonly honorForceAuthn!: pulumi.Output<boolean | undefined>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    public /*out*/ readonly httpPostBinding!: pulumi.Output<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    public /*out*/ readonly httpRedirectBinding!: pulumi.Output<string>;
    /**
     * SAML issuer ID
     */
    public readonly idpIssuer!: pulumi.Output<string | undefined>;
    /**
     * Certificate ID
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * Number of years the certificate is valid.
     */
    public readonly keyYearsValid!: pulumi.Output<number | undefined>;
    /**
     * Pretty name of app.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * SAML xml metadata payload
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * name of app.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Name of preexisting SAML application. For instance 'slack'
     */
    public readonly preconfiguredApp!: pulumi.Output<string | undefined>;
    /**
     * The location where the app may present the SAML assertion
     */
    public readonly recipient!: pulumi.Output<string | undefined>;
    /**
     * Denotes whether the request is compressed or not.
     */
    public readonly requestCompressed!: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    public readonly responseSigned!: pulumi.Output<boolean | undefined>;
    /**
     * Sign on mode of application.
     */
    public /*out*/ readonly signOnMode!: pulumi.Output<string>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * SAML SP issuer ID
     */
    public readonly spIssuer!: pulumi.Output<string | undefined>;
    /**
     * Single Sign On URL
     */
    public readonly ssoUrl!: pulumi.Output<string | undefined>;
    /**
     * Status of application.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML processing rules.
     */
    public readonly subjectNameIdFormat!: pulumi.Output<string | undefined>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    public readonly subjectNameIdTemplate!: pulumi.Output<string | undefined>;
    /**
     * Username template
     */
    public readonly userNameTemplate!: pulumi.Output<string | undefined>;
    /**
     * Username template suffix
     */
    public readonly userNameTemplateSuffix!: pulumi.Output<string | undefined>;
    /**
     * Username template type
     */
    public readonly userNameTemplateType!: pulumi.Output<string | undefined>;
    /**
     * Users associated with the application
     */
    public readonly users!: pulumi.Output<outputs.deprecated.SamlAppUser[] | undefined>;

    /**
     * Create a SamlApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlAppArgs | SamlAppState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SamlAppState | undefined;
            inputs["accessibilityErrorRedirectUrl"] = state ? state.accessibilityErrorRedirectUrl : undefined;
            inputs["accessibilityLoginRedirectUrl"] = state ? state.accessibilityLoginRedirectUrl : undefined;
            inputs["accessibilitySelfService"] = state ? state.accessibilitySelfService : undefined;
            inputs["appSettingsJson"] = state ? state.appSettingsJson : undefined;
            inputs["assertionSigned"] = state ? state.assertionSigned : undefined;
            inputs["attributeStatements"] = state ? state.attributeStatements : undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["authnContextClassRef"] = state ? state.authnContextClassRef : undefined;
            inputs["autoSubmitToolbar"] = state ? state.autoSubmitToolbar : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["defaultRelayState"] = state ? state.defaultRelayState : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            inputs["entityKey"] = state ? state.entityKey : undefined;
            inputs["entityUrl"] = state ? state.entityUrl : undefined;
            inputs["features"] = state ? state.features : undefined;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["hideIos"] = state ? state.hideIos : undefined;
            inputs["hideWeb"] = state ? state.hideWeb : undefined;
            inputs["honorForceAuthn"] = state ? state.honorForceAuthn : undefined;
            inputs["httpPostBinding"] = state ? state.httpPostBinding : undefined;
            inputs["httpRedirectBinding"] = state ? state.httpRedirectBinding : undefined;
            inputs["idpIssuer"] = state ? state.idpIssuer : undefined;
            inputs["keyId"] = state ? state.keyId : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["keyYearsValid"] = state ? state.keyYearsValid : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preconfiguredApp"] = state ? state.preconfiguredApp : undefined;
            inputs["recipient"] = state ? state.recipient : undefined;
            inputs["requestCompressed"] = state ? state.requestCompressed : undefined;
            inputs["responseSigned"] = state ? state.responseSigned : undefined;
            inputs["signOnMode"] = state ? state.signOnMode : undefined;
            inputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            inputs["spIssuer"] = state ? state.spIssuer : undefined;
            inputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subjectNameIdFormat"] = state ? state.subjectNameIdFormat : undefined;
            inputs["subjectNameIdTemplate"] = state ? state.subjectNameIdTemplate : undefined;
            inputs["userNameTemplate"] = state ? state.userNameTemplate : undefined;
            inputs["userNameTemplateSuffix"] = state ? state.userNameTemplateSuffix : undefined;
            inputs["userNameTemplateType"] = state ? state.userNameTemplateType : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as SamlAppArgs | undefined;
            if (!args || args.label === undefined) {
                throw new Error("Missing required property 'label'");
            }
            inputs["accessibilityErrorRedirectUrl"] = args ? args.accessibilityErrorRedirectUrl : undefined;
            inputs["accessibilityLoginRedirectUrl"] = args ? args.accessibilityLoginRedirectUrl : undefined;
            inputs["accessibilitySelfService"] = args ? args.accessibilitySelfService : undefined;
            inputs["appSettingsJson"] = args ? args.appSettingsJson : undefined;
            inputs["assertionSigned"] = args ? args.assertionSigned : undefined;
            inputs["attributeStatements"] = args ? args.attributeStatements : undefined;
            inputs["audience"] = args ? args.audience : undefined;
            inputs["authnContextClassRef"] = args ? args.authnContextClassRef : undefined;
            inputs["autoSubmitToolbar"] = args ? args.autoSubmitToolbar : undefined;
            inputs["defaultRelayState"] = args ? args.defaultRelayState : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["digestAlgorithm"] = args ? args.digestAlgorithm : undefined;
            inputs["features"] = args ? args.features : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["hideIos"] = args ? args.hideIos : undefined;
            inputs["hideWeb"] = args ? args.hideWeb : undefined;
            inputs["honorForceAuthn"] = args ? args.honorForceAuthn : undefined;
            inputs["idpIssuer"] = args ? args.idpIssuer : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["keyYearsValid"] = args ? args.keyYearsValid : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["preconfiguredApp"] = args ? args.preconfiguredApp : undefined;
            inputs["recipient"] = args ? args.recipient : undefined;
            inputs["requestCompressed"] = args ? args.requestCompressed : undefined;
            inputs["responseSigned"] = args ? args.responseSigned : undefined;
            inputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            inputs["spIssuer"] = args ? args.spIssuer : undefined;
            inputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subjectNameIdFormat"] = args ? args.subjectNameIdFormat : undefined;
            inputs["subjectNameIdTemplate"] = args ? args.subjectNameIdTemplate : undefined;
            inputs["userNameTemplate"] = args ? args.userNameTemplate : undefined;
            inputs["userNameTemplateSuffix"] = args ? args.userNameTemplateSuffix : undefined;
            inputs["userNameTemplateType"] = args ? args.userNameTemplateType : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["certificate"] = undefined /*out*/;
            inputs["entityKey"] = undefined /*out*/;
            inputs["entityUrl"] = undefined /*out*/;
            inputs["httpPostBinding"] = undefined /*out*/;
            inputs["httpRedirectBinding"] = undefined /*out*/;
            inputs["keyId"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["signOnMode"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SamlApp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlApp resources.
 */
export interface SamlAppState {
    /**
     * Custom error page URL
     */
    readonly accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    readonly accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service
     */
    readonly accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application settings in JSON format
     */
    readonly appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    readonly assertionSigned?: pulumi.Input<boolean>;
    readonly attributeStatements?: pulumi.Input<pulumi.Input<inputs.deprecated.SamlAppAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    readonly authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    readonly autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * cert from SAML XML metadata payload
     */
    readonly certificate?: pulumi.Input<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    readonly digestAlgorithm?: pulumi.Input<string>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    readonly entityKey?: pulumi.Input<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    readonly entityUrl?: pulumi.Input<string>;
    /**
     * features to enable
     */
    readonly features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groups associated with the application
     */
    readonly groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app
     */
    readonly hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it
     */
    readonly honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    readonly httpPostBinding?: pulumi.Input<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    readonly httpRedirectBinding?: pulumi.Input<string>;
    /**
     * SAML issuer ID
     */
    readonly idpIssuer?: pulumi.Input<string>;
    /**
     * Certificate ID
     */
    readonly keyId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid.
     */
    readonly keyYearsValid?: pulumi.Input<number>;
    /**
     * Pretty name of app.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * SAML xml metadata payload
     */
    readonly metadata?: pulumi.Input<string>;
    /**
     * name of app.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Name of preexisting SAML application. For instance 'slack'
     */
    readonly preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    readonly recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    readonly responseSigned?: pulumi.Input<boolean>;
    /**
     * Sign on mode of application.
     */
    readonly signOnMode?: pulumi.Input<string>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    readonly spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    readonly ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    readonly subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template
     */
    readonly userNameTemplate?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    readonly userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type
     */
    readonly userNameTemplateType?: pulumi.Input<string>;
    /**
     * Users associated with the application
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.deprecated.SamlAppUser>[]>;
}

/**
 * The set of arguments for constructing a SamlApp resource.
 */
export interface SamlAppArgs {
    /**
     * Custom error page URL
     */
    readonly accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    readonly accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service
     */
    readonly accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application settings in JSON format
     */
    readonly appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    readonly assertionSigned?: pulumi.Input<boolean>;
    readonly attributeStatements?: pulumi.Input<pulumi.Input<inputs.deprecated.SamlAppAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    readonly authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    readonly autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    readonly digestAlgorithm?: pulumi.Input<string>;
    /**
     * features to enable
     */
    readonly features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groups associated with the application
     */
    readonly groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app
     */
    readonly hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it
     */
    readonly honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * SAML issuer ID
     */
    readonly idpIssuer?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid.
     */
    readonly keyYearsValid?: pulumi.Input<number>;
    /**
     * Pretty name of app.
     */
    readonly label: pulumi.Input<string>;
    /**
     * Name of preexisting SAML application. For instance 'slack'
     */
    readonly preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    readonly recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    readonly responseSigned?: pulumi.Input<boolean>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    readonly spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    readonly ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    readonly subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template
     */
    readonly userNameTemplate?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    readonly userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type
     */
    readonly userNameTemplateType?: pulumi.Input<string>;
    /**
     * Users associated with the application
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.deprecated.SamlAppUser>[]>;
}
