// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class SignonPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing SignonPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SignonPolicyRuleState, opts?: pulumi.CustomResourceOptions): SignonPolicyRule {
        return new SignonPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:deprecated/signonPolicyRule:SignonPolicyRule';

    /**
     * Returns true if the given object is an instance of SignonPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SignonPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignonPolicyRule.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
     */
    public readonly access!: pulumi.Output<string | undefined>;
    /**
     * Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
     */
    public readonly authtype!: pulumi.Output<string | undefined>;
    /**
     * List of behavior IDs
     */
    public readonly behaviors!: pulumi.Output<string[] | undefined>;
    public readonly factorSequences!: pulumi.Output<outputs.deprecated.SignonPolicyRuleFactorSequence[] | undefined>;
    /**
     * Elapsed time before the next MFA challenge
     */
    public readonly mfaLifetime!: pulumi.Output<number | undefined>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
     */
    public readonly mfaPrompt!: pulumi.Output<string | undefined>;
    /**
     * Remember MFA device.
     */
    public readonly mfaRememberDevice!: pulumi.Output<boolean | undefined>;
    /**
     * Require MFA.
     */
    public readonly mfaRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * The zones to exclude
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * The zones to include
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Policy ID of the Rule
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    public readonly policyid!: pulumi.Output<string | undefined>;
    /**
     * Primary factor.
     */
    public readonly primaryFactor!: pulumi.Output<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH
     */
    public readonly riscLevel!: pulumi.Output<string | undefined>;
    /**
     * Max minutes a session can be idle.
     */
    public readonly sessionIdle!: pulumi.Output<number | undefined>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    public readonly sessionLifetime!: pulumi.Output<number | undefined>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
     * cookies.
     */
    public readonly sessionPersistent!: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Set of User IDs to Exclude
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a SignonPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SignonPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SignonPolicyRuleArgs | SignonPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SignonPolicyRuleState | undefined;
            inputs["access"] = state ? state.access : undefined;
            inputs["authtype"] = state ? state.authtype : undefined;
            inputs["behaviors"] = state ? state.behaviors : undefined;
            inputs["factorSequences"] = state ? state.factorSequences : undefined;
            inputs["mfaLifetime"] = state ? state.mfaLifetime : undefined;
            inputs["mfaPrompt"] = state ? state.mfaPrompt : undefined;
            inputs["mfaRememberDevice"] = state ? state.mfaRememberDevice : undefined;
            inputs["mfaRequired"] = state ? state.mfaRequired : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkConnection"] = state ? state.networkConnection : undefined;
            inputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            inputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            inputs["policyId"] = state ? state.policyId : undefined;
            inputs["policyid"] = state ? state.policyid : undefined;
            inputs["primaryFactor"] = state ? state.primaryFactor : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["riscLevel"] = state ? state.riscLevel : undefined;
            inputs["sessionIdle"] = state ? state.sessionIdle : undefined;
            inputs["sessionLifetime"] = state ? state.sessionLifetime : undefined;
            inputs["sessionPersistent"] = state ? state.sessionPersistent : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
        } else {
            const args = argsOrState as SignonPolicyRuleArgs | undefined;
            inputs["access"] = args ? args.access : undefined;
            inputs["authtype"] = args ? args.authtype : undefined;
            inputs["behaviors"] = args ? args.behaviors : undefined;
            inputs["factorSequences"] = args ? args.factorSequences : undefined;
            inputs["mfaLifetime"] = args ? args.mfaLifetime : undefined;
            inputs["mfaPrompt"] = args ? args.mfaPrompt : undefined;
            inputs["mfaRememberDevice"] = args ? args.mfaRememberDevice : undefined;
            inputs["mfaRequired"] = args ? args.mfaRequired : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkConnection"] = args ? args.networkConnection : undefined;
            inputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            inputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            inputs["policyId"] = args ? args.policyId : undefined;
            inputs["policyid"] = args ? args.policyid : undefined;
            inputs["primaryFactor"] = args ? args.primaryFactor : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["riscLevel"] = args ? args.riscLevel : undefined;
            inputs["sessionIdle"] = args ? args.sessionIdle : undefined;
            inputs["sessionLifetime"] = args ? args.sessionLifetime : undefined;
            inputs["sessionPersistent"] = args ? args.sessionPersistent : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SignonPolicyRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SignonPolicyRule resources.
 */
export interface SignonPolicyRuleState {
    /**
     * Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    factorSequences?: pulumi.Input<pulumi.Input<inputs.deprecated.SignonPolicyRuleFactorSequence>[]>;
    /**
     * Elapsed time before the next MFA challenge
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device.
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA.
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    policyid?: pulumi.Input<string>;
    /**
     * Primary factor.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle.
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
     * cookies.
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SignonPolicyRule resource.
 */
export interface SignonPolicyRuleArgs {
    /**
     * Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    factorSequences?: pulumi.Input<pulumi.Input<inputs.deprecated.SignonPolicyRuleFactorSequence>[]>;
    /**
     * Elapsed time before the next MFA challenge
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device.
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA.
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     *
     * @deprecated Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
     */
    policyid?: pulumi.Input<string>;
    /**
     * Primary factor.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
     * invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle.
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
     * cookies.
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
