// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get the entitlements for a user and resource after evaluating all grants.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getPrincipalRateLimits({
 *     id: "<principal_rate_limit_id>",
 * });
 * ```
 */
export function getPrincipalRateLimits(args: GetPrincipalRateLimitsArgs, opts?: pulumi.InvokeOptions): Promise<GetPrincipalRateLimitsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getPrincipalRateLimits:getPrincipalRateLimits", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrincipalRateLimits.
 */
export interface GetPrincipalRateLimitsArgs {
    /**
     * The unique identifier of the principle rate limit entity.
     */
    id: string;
}

/**
 * A collection of values returned by getPrincipalRateLimits.
 */
export interface GetPrincipalRateLimitsResult {
    /**
     * The ID of the user who created the principal rate limit.
     */
    readonly createdBy: string;
    /**
     * The date and time when the principal rate limit was created.
     */
    readonly createdDate: string;
    /**
     * The default concurrency percentage for the principal rate limit.
     */
    readonly defaultConcurrencyPercentage: number;
    /**
     * The default percentage for the principal rate limit.
     */
    readonly defaultPercentage: number;
    /**
     * The unique identifier of the principle rate limit entity.
     */
    readonly id: string;
    readonly lastUpdate: string;
    /**
     * The ID of the user who last updated the principal rate limit.
     */
    readonly lastUpdatedBy: string;
    /**
     * The unique identifier of the Okta organization.
     */
    readonly orgId: string;
    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     */
    readonly principalId: string;
    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     */
    readonly principalType: string;
}
/**
 * Get the entitlements for a user and resource after evaluating all grants.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getPrincipalRateLimits({
 *     id: "<principal_rate_limit_id>",
 * });
 * ```
 */
export function getPrincipalRateLimitsOutput(args: GetPrincipalRateLimitsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPrincipalRateLimitsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getPrincipalRateLimits:getPrincipalRateLimits", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrincipalRateLimits.
 */
export interface GetPrincipalRateLimitsOutputArgs {
    /**
     * The unique identifier of the principle rate limit entity.
     */
    id: pulumi.Input<string>;
}
