// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configures Default Authorization Server. This resource allows you to configure Default Authorization Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.AuthServerDefault("example", {
 *     audiences: ["api://default"],
 *     description: "Default Authorization Server for your Applications",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/authServerDefault:AuthServerDefault example <default>
 * ```
 */
export class AuthServerDefault extends pulumi.CustomResource {
    /**
     * Get an existing AuthServerDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerDefaultState, opts?: pulumi.CustomResourceOptions): AuthServerDefault {
        return new AuthServerDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authServerDefault:AuthServerDefault';

    /**
     * Returns true if the given object is an instance of AuthServerDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServerDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServerDefault.__pulumiType;
    }

    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
     */
    declare public readonly audiences: pulumi.Output<string[] | undefined>;
    /**
     * The timestamp when the authorization server started to use the `kid` for signing tokens.
     */
    declare public /*out*/ readonly credentialsLastRotated: pulumi.Output<string>;
    /**
     * The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
     */
    declare public /*out*/ readonly credentialsNextRotation: pulumi.Output<string>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `MANUAL`.Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
     */
    declare public readonly credentialsRotationMode: pulumi.Output<string | undefined>;
    /**
     * The description of the authorization server.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
     */
    declare public /*out*/ readonly issuer: pulumi.Output<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    declare public readonly issuerMode: pulumi.Output<string | undefined>;
    /**
     * The ID of the JSON Web Key used for signing tokens issued by the authorization server.
     */
    declare public /*out*/ readonly kid: pulumi.Output<string>;
    /**
     * The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Default to `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a AuthServerDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthServerDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerDefaultArgs | AuthServerDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerDefaultState | undefined;
            resourceInputs["audiences"] = state?.audiences;
            resourceInputs["credentialsLastRotated"] = state?.credentialsLastRotated;
            resourceInputs["credentialsNextRotation"] = state?.credentialsNextRotation;
            resourceInputs["credentialsRotationMode"] = state?.credentialsRotationMode;
            resourceInputs["description"] = state?.description;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["issuerMode"] = state?.issuerMode;
            resourceInputs["kid"] = state?.kid;
            resourceInputs["name"] = state?.name;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as AuthServerDefaultArgs | undefined;
            resourceInputs["audiences"] = args?.audiences;
            resourceInputs["credentialsRotationMode"] = args?.credentialsRotationMode;
            resourceInputs["description"] = args?.description;
            resourceInputs["issuerMode"] = args?.issuerMode;
            resourceInputs["name"] = args?.name;
            resourceInputs["status"] = args?.status;
            resourceInputs["credentialsLastRotated"] = undefined /*out*/;
            resourceInputs["credentialsNextRotation"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["kid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServerDefault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthServerDefault resources.
 */
export interface AuthServerDefaultState {
    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp when the authorization server started to use the `kid` for signing tokens.
     */
    credentialsLastRotated?: pulumi.Input<string>;
    /**
     * The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
     */
    credentialsNextRotation?: pulumi.Input<string>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `MANUAL`.Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
     */
    credentialsRotationMode?: pulumi.Input<string>;
    /**
     * The description of the authorization server.
     */
    description?: pulumi.Input<string>;
    /**
     * The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
     */
    issuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the JSON Web Key used for signing tokens issued by the authorization server.
     */
    kid?: pulumi.Input<string>;
    /**
     * The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthServerDefault resource.
 */
export interface AuthServerDefaultArgs {
    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `MANUAL`.Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
     */
    credentialsRotationMode?: pulumi.Input<string>;
    /**
     * The description of the authorization server.
     */
    description?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The name of the authorization server. Not necessary but left for backwards capacity with legacy implementation.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
