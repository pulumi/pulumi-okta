// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Retrieves the currently configured Rate Limit Admin Notification Settings
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getRateLimitAdminNotificationSettings({});
 * ```
 */
export function getRateLimitAdminNotificationSettings(opts?: pulumi.InvokeOptions): Promise<GetRateLimitAdminNotificationSettingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", {
    }, opts);
}

/**
 * A collection of values returned by getRateLimitAdminNotificationSettings.
 */
export interface GetRateLimitAdminNotificationSettingsResult {
    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     */
    readonly id: string;
    /**
     * Enables or disables admin notifications for rate limiting events.
     */
    readonly notificationsEnabled: boolean;
}
/**
 * Retrieves the currently configured Rate Limit Admin Notification Settings
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getRateLimitAdminNotificationSettings({});
 * ```
 */
export function getRateLimitAdminNotificationSettingsOutput(opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRateLimitAdminNotificationSettingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", {
    }, opts);
}
