// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage app settings of the SAML Application . It's basically the same as
 * `appSettingsJson` field in `okta.app.Saml` resource and can be used in cases where settings require to be managed separately.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const testSaml = new okta.app.Saml("testSaml", {
 *     preconfiguredApp: "amazon_aws",
 *     label: "Amazon AWS",
 *     status: "ACTIVE",
 * });
 * const testAppSamlAppSettings = new okta.AppSamlAppSettings("testAppSamlAppSettings", {
 *     appId: testSaml.id,
 *     settings: JSON.stringify({
 *         appFilter: "okta",
 *         awsEnvironmentType: "aws.amazon",
 *         groupFilter: "aws_(?{{accountid}}\\\\d+)_(?{{role}}[a-zA-Z0-9+=,.@\\\\-_]+)",
 *         joinAllRoles: false,
 *         loginURL: "https://console.aws.amazon.com/ec2/home",
 *         roleValuePattern: "arn:aws:iam::${accountid}:saml-provider/OKTA,arn:aws:iam::${accountid}:role/${role}",
 *         sessionDuration: 3200,
 *         useGroupMapping: false,
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A settings for the SAML App can be imported via the Okta ID.
 *
 * ```sh
 * $ pulumi import okta:index/appSamlAppSettings:AppSamlAppSettings example &#60;app id&#62;
 * ```
 */
export class AppSamlAppSettings extends pulumi.CustomResource {
    /**
     * Get an existing AppSamlAppSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSamlAppSettingsState, opts?: pulumi.CustomResourceOptions): AppSamlAppSettings {
        return new AppSamlAppSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appSamlAppSettings:AppSamlAppSettings';

    /**
     * Returns true if the given object is an instance of AppSamlAppSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSamlAppSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSamlAppSettings.__pulumiType;
    }

    /**
     * ID of the application.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Application settings in JSON format.
     */
    public readonly settings!: pulumi.Output<string>;

    /**
     * Create a AppSamlAppSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSamlAppSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSamlAppSettingsArgs | AppSamlAppSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSamlAppSettingsState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
        } else {
            const args = argsOrState as AppSamlAppSettingsArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSamlAppSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSamlAppSettings resources.
 */
export interface AppSamlAppSettingsState {
    /**
     * ID of the application.
     */
    appId?: pulumi.Input<string>;
    /**
     * Application settings in JSON format.
     */
    settings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSamlAppSettings resource.
 */
export interface AppSamlAppSettingsArgs {
    /**
     * ID of the application.
     */
    appId: pulumi.Input<string>;
    /**
     * Application settings in JSON format.
     */
    settings: pulumi.Input<string>;
}
