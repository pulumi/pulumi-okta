// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 *
 * This resource allows you to create and configure a CAPTCHA.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.Captcha("example", {
 *     secretKey: "some_secret_key",
 *     siteKey: "some_key",
 *     type: "HCAPTCHA",
 * });
 * ```
 *
 * ## Import
 *
 * Behavior can be imported via the Okta ID.
 *
 * ```sh
 *  $ pulumi import okta:index/captcha:Captcha example <captcha id>
 * ```
 */
export class Captcha extends pulumi.CustomResource {
    /**
     * Get an existing Captcha resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CaptchaState, opts?: pulumi.CustomResourceOptions): Captcha {
        return new Captcha(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/captcha:Captcha';

    /**
     * Returns true if the given object is an instance of Captcha.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Captcha {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Captcha.__pulumiType;
    }

    /**
     * Name of the captcha.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token.
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page.
     */
    public readonly siteKey!: pulumi.Output<string>;
    /**
     * Type of the captcha. Valid values: `"HCAPTCHA"`, `"RECAPTCHA_V2"`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Captcha resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CaptchaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CaptchaArgs | CaptchaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CaptchaState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["secretKey"] = state ? state.secretKey : undefined;
            inputs["siteKey"] = state ? state.siteKey : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CaptchaArgs | undefined;
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if ((!args || args.siteKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteKey'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["secretKey"] = args ? args.secretKey : undefined;
            inputs["siteKey"] = args ? args.siteKey : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Captcha.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Captcha resources.
 */
export interface CaptchaState {
    /**
     * Name of the captcha.
     */
    name?: pulumi.Input<string>;
    /**
     * Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page.
     */
    siteKey?: pulumi.Input<string>;
    /**
     * Type of the captcha. Valid values: `"HCAPTCHA"`, `"RECAPTCHA_V2"`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Captcha resource.
 */
export interface CaptchaArgs {
    /**
     * Name of the captcha.
     */
    name?: pulumi.Input<string>;
    /**
     * Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token.
     */
    secretKey: pulumi.Input<string>;
    /**
     * Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page.
     */
    siteKey: pulumi.Input<string>;
    /**
     * Type of the captcha. Valid values: `"HCAPTCHA"`, `"RECAPTCHA_V2"`.
     */
    type: pulumi.Input<string>;
}
