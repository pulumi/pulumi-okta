// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages Okta Support access your org
 * This resource allows you to temporarily allow Okta Support to access your org as an administrator. By default,
 * access will be granted for eight hours. Removing this resource will revoke Okta Support access to your org.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.OrgSupport("example", {extendBy: 1});
 * ```
 */
export class OrgSupport extends pulumi.CustomResource {
    /**
     * Get an existing OrgSupport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgSupportState, opts?: pulumi.CustomResourceOptions): OrgSupport {
        return new OrgSupport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/orgSupport:OrgSupport';

    /**
     * Returns true if the given object is an instance of OrgSupport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgSupport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgSupport.__pulumiType;
    }

    /**
     * Expiration of Okta Support
     */
    public /*out*/ readonly expiration!: pulumi.Output<string>;
    /**
     * Number of days the support should be extended by
     */
    public readonly extendBy!: pulumi.Output<number | undefined>;
    /**
     * Status of Okta Support
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a OrgSupport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrgSupportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgSupportArgs | OrgSupportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgSupportState | undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["extendBy"] = state ? state.extendBy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as OrgSupportArgs | undefined;
            resourceInputs["extendBy"] = args ? args.extendBy : undefined;
            resourceInputs["expiration"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgSupport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgSupport resources.
 */
export interface OrgSupportState {
    /**
     * Expiration of Okta Support
     */
    expiration?: pulumi.Input<string>;
    /**
     * Number of days the support should be extended by
     */
    extendBy?: pulumi.Input<number>;
    /**
     * Status of Okta Support
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgSupport resource.
 */
export interface OrgSupportArgs {
    /**
     * Number of days the support should be extended by
     */
    extendBy?: pulumi.Input<number>;
}
