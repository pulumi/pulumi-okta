// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource to manage a set of memberships for a specific group.
 *
 * This resource will allow you to bulk manage group membership in Okta for a given group. This offers an interface to pass multiple users into a single resource call, for better API resource usage. Effectively this is the same as using the `okta.group.Membership` resource several times with a single group and different users. If you need a relationship of a single user to many groups, please use the `okta.UserGroupMemberships` resource.
 *
 * When using this with a `okta.user.User` resource, you should add a lifecycle ignore for group memberships to avoid conflicts in desired state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const testGroup = new okta.group.Group("testGroup", {description: "testing, testing"});
 * const testGroupMemberships = new okta.GroupMemberships("testGroupMemberships", {
 *     groupId: testGroup.id,
 *     users: [
 *         okta_user.test1.id,
 *         okta_user.test2.id,
 *     ],
 * });
 * ```
 */
export class GroupMemberships extends pulumi.CustomResource {
    /**
     * Get an existing GroupMemberships resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMembershipsState, opts?: pulumi.CustomResourceOptions): GroupMemberships {
        return new GroupMemberships(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/groupMemberships:GroupMemberships';

    /**
     * Returns true if the given object is an instance of GroupMemberships.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMemberships {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMemberships.__pulumiType;
    }

    /**
     * Okta group ID.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The list of Okta user IDs which the group should have membership managed for.
     */
    public readonly users!: pulumi.Output<string[]>;

    /**
     * Create a GroupMemberships resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMembershipsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMembershipsArgs | GroupMembershipsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMembershipsState | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as GroupMembershipsArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.users === undefined) && !opts.urn) {
                throw new Error("Missing required property 'users'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupMemberships.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMemberships resources.
 */
export interface GroupMembershipsState {
    /**
     * Okta group ID.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The list of Okta user IDs which the group should have membership managed for.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GroupMemberships resource.
 */
export interface GroupMembershipsArgs {
    /**
     * Okta group ID.
     */
    groupId: pulumi.Input<string>;
    /**
     * The list of Okta user IDs which the group should have membership managed for.
     */
    users: pulumi.Input<pulumi.Input<string>[]>;
}
