// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get a realm from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const exampleName = okta.getRealm({
 *     name: "Example Realm",
 * });
 * const exampleId = okta.getRealm({
 *     id: "<realm_id>",
 * });
 * ```
 */
export function getRealm(args?: GetRealmArgs, opts?: pulumi.InvokeOptions): Promise<GetRealmResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getRealm:getRealm", {
        "id": args.id,
        "name": args.name,
        "realmType": args.realmType,
    }, opts);
}

/**
 * A collection of arguments for invoking getRealm.
 */
export interface GetRealmArgs {
    /**
     * The id of the Okta Realm.
     */
    id?: string;
    /**
     * The name of the Okta Realm.
     */
    name?: string;
    /**
     * The realm type. Valid values: `PARTNER` and `DEFAULT`
     */
    realmType?: string;
}

/**
 * A collection of values returned by getRealm.
 */
export interface GetRealmResult {
    /**
     * The id of the Okta Realm.
     */
    readonly id: string;
    /**
     * Indicates whether the realm is the default realm.
     */
    readonly isDefault: boolean;
    /**
     * The name of the Okta Realm.
     */
    readonly name: string;
    /**
     * The realm type. Valid values: `PARTNER` and `DEFAULT`
     */
    readonly realmType?: string;
}
/**
 * Get a realm from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const exampleName = okta.getRealm({
 *     name: "Example Realm",
 * });
 * const exampleId = okta.getRealm({
 *     id: "<realm_id>",
 * });
 * ```
 */
export function getRealmOutput(args?: GetRealmOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRealmResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getRealm:getRealm", {
        "id": args.id,
        "name": args.name,
        "realmType": args.realmType,
    }, opts);
}

/**
 * A collection of arguments for invoking getRealm.
 */
export interface GetRealmOutputArgs {
    /**
     * The id of the Okta Realm.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the Okta Realm.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm type. Valid values: `PARTNER` and `DEFAULT`
     */
    realmType?: pulumi.Input<string>;
}
