// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages request settings. This resource allows you to read and configure an Okta [request-setting](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Settings/#tag/Request-Settings/operation/getRequestSettingsV2).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.RequestSettingResource("test", {
 *     resourceId: "<resource_id>",
 *     riskSettings: [{
 *         defaultSetting: [{
 *             requestSubmissionType: "ALLOWED_WITH_OVERRIDES",
 *             approvalSequenceId: "<approval_sequence_id>",
 *         }],
 *     }],
 *     requestOnBehalfOfSettings: [{
 *         allowed: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/requestSettingResource:RequestSettingResource example "<resource_id>"
 * ```
 */
export class RequestSettingResource extends pulumi.CustomResource {
    /**
     * Get an existing RequestSettingResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestSettingResourceState, opts?: pulumi.CustomResourceOptions): RequestSettingResource {
        return new RequestSettingResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/requestSettingResource:RequestSettingResource';

    /**
     * Returns true if the given object is an instance of RequestSettingResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestSettingResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestSettingResource.__pulumiType;
    }

    /**
     * The id of the resource in Okta ID format.
     */
    declare public readonly idProperty: pulumi.Output<string>;
    /**
     * Specifies if and for whom a requester may request the resource for.
     */
    declare public readonly requestOnBehalfOfSettings: pulumi.Output<outputs.RequestSettingResourceRequestOnBehalfOfSettings | undefined>;
    /**
     * Risk settings for the resource.
     */
    declare public readonly riskSettings: pulumi.Output<outputs.RequestSettingResourceRiskSettings | undefined>;

    /**
     * Create a RequestSettingResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestSettingResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestSettingResourceArgs | RequestSettingResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestSettingResourceState | undefined;
            resourceInputs["idProperty"] = state?.idProperty;
            resourceInputs["requestOnBehalfOfSettings"] = state?.requestOnBehalfOfSettings;
            resourceInputs["riskSettings"] = state?.riskSettings;
        } else {
            const args = argsOrState as RequestSettingResourceArgs | undefined;
            if (args?.idProperty === undefined && !opts.urn) {
                throw new Error("Missing required property 'idProperty'");
            }
            resourceInputs["idProperty"] = args?.idProperty;
            resourceInputs["requestOnBehalfOfSettings"] = args?.requestOnBehalfOfSettings;
            resourceInputs["riskSettings"] = args?.riskSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestSettingResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestSettingResource resources.
 */
export interface RequestSettingResourceState {
    /**
     * The id of the resource in Okta ID format.
     */
    idProperty?: pulumi.Input<string>;
    /**
     * Specifies if and for whom a requester may request the resource for.
     */
    requestOnBehalfOfSettings?: pulumi.Input<inputs.RequestSettingResourceRequestOnBehalfOfSettings>;
    /**
     * Risk settings for the resource.
     */
    riskSettings?: pulumi.Input<inputs.RequestSettingResourceRiskSettings>;
}

/**
 * The set of arguments for constructing a RequestSettingResource resource.
 */
export interface RequestSettingResourceArgs {
    /**
     * The id of the resource in Okta ID format.
     */
    idProperty: pulumi.Input<string>;
    /**
     * Specifies if and for whom a requester may request the resource for.
     */
    requestOnBehalfOfSettings?: pulumi.Input<inputs.RequestSettingResourceRequestOnBehalfOfSettings>;
    /**
     * Risk settings for the resource.
     */
    riskSettings?: pulumi.Input<inputs.RequestSettingResourceRiskSettings>;
}
