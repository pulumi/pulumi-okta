// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a profile mapping.
 *
 * This resource allows you to manage a profile mapping by source id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const user = pulumi.output(okta.user.getUserProfileMappingSource({ async: true }));
 * const example = new okta.profile.Mapping("example", {
 *     deleteWhenAbsent: true,
 *     mappings: [
 *         {
 *             expression: "appuser.firstName",
 *             id: "firstName",
 *         },
 *         {
 *             expression: "appuser.lastName",
 *             id: "lastName",
 *         },
 *         {
 *             expression: "appuser.email",
 *             id: "email",
 *         },
 *         {
 *             expression: "appuser.email",
 *             id: "login",
 *         },
 *     ],
 *     sourceId: "<source id>",
 *     targetId: user.id,
 * });
 * ```
 *
 * ## Import
 *
 * There is no reason to import this resource. You can simply create the resource config and point it to a source ID. Once the source is deleted this resources will no longer exist.
 */
export class Mapping extends pulumi.CustomResource {
    /**
     * Get an existing Mapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MappingState, opts?: pulumi.CustomResourceOptions): Mapping {
        return new Mapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:profile/mapping:Mapping';

    /**
     * Returns true if the given object is an instance of Mapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mapping.__pulumiType;
    }

    /**
     * Tells the provider whether to attempt to delete missing mappings under profile mapping.
     */
    public readonly deleteWhenAbsent!: pulumi.Output<boolean | undefined>;
    /**
     * Priority of the policy.
     */
    public readonly mappings!: pulumi.Output<outputs.profile.MappingMapping[] | undefined>;
    /**
     * Source id of the profile mapping.
     */
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * Name of the mapping source.
     */
    public /*out*/ readonly sourceName!: pulumi.Output<string>;
    /**
     * ID of the mapping source.
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * ID of the mapping target.
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * Name of the mapping target.
     */
    public /*out*/ readonly targetName!: pulumi.Output<string>;
    /**
     * ID of the mapping target.
     */
    public /*out*/ readonly targetType!: pulumi.Output<string>;

    /**
     * Create a Mapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MappingArgs | MappingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MappingState | undefined;
            inputs["deleteWhenAbsent"] = state ? state.deleteWhenAbsent : undefined;
            inputs["mappings"] = state ? state.mappings : undefined;
            inputs["sourceId"] = state ? state.sourceId : undefined;
            inputs["sourceName"] = state ? state.sourceName : undefined;
            inputs["sourceType"] = state ? state.sourceType : undefined;
            inputs["targetId"] = state ? state.targetId : undefined;
            inputs["targetName"] = state ? state.targetName : undefined;
            inputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as MappingArgs | undefined;
            if ((!args || args.sourceId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.targetId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'targetId'");
            }
            inputs["deleteWhenAbsent"] = args ? args.deleteWhenAbsent : undefined;
            inputs["mappings"] = args ? args.mappings : undefined;
            inputs["sourceId"] = args ? args.sourceId : undefined;
            inputs["targetId"] = args ? args.targetId : undefined;
            inputs["sourceName"] = undefined /*out*/;
            inputs["sourceType"] = undefined /*out*/;
            inputs["targetName"] = undefined /*out*/;
            inputs["targetType"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Mapping.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mapping resources.
 */
export interface MappingState {
    /**
     * Tells the provider whether to attempt to delete missing mappings under profile mapping.
     */
    readonly deleteWhenAbsent?: pulumi.Input<boolean>;
    /**
     * Priority of the policy.
     */
    readonly mappings?: pulumi.Input<pulumi.Input<inputs.profile.MappingMapping>[]>;
    /**
     * Source id of the profile mapping.
     */
    readonly sourceId?: pulumi.Input<string>;
    /**
     * Name of the mapping source.
     */
    readonly sourceName?: pulumi.Input<string>;
    /**
     * ID of the mapping source.
     */
    readonly sourceType?: pulumi.Input<string>;
    /**
     * ID of the mapping target.
     */
    readonly targetId?: pulumi.Input<string>;
    /**
     * Name of the mapping target.
     */
    readonly targetName?: pulumi.Input<string>;
    /**
     * ID of the mapping target.
     */
    readonly targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mapping resource.
 */
export interface MappingArgs {
    /**
     * Tells the provider whether to attempt to delete missing mappings under profile mapping.
     */
    readonly deleteWhenAbsent?: pulumi.Input<boolean>;
    /**
     * Priority of the policy.
     */
    readonly mappings?: pulumi.Input<pulumi.Input<inputs.profile.MappingMapping>[]>;
    /**
     * Source id of the profile mapping.
     */
    readonly sourceId: pulumi.Input<string>;
    /**
     * ID of the mapping target.
     */
    readonly targetId: pulumi.Input<string>;
}
