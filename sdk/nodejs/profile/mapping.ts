// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a profile mapping. This resource allows you to manage a profile mapping by source and target IDs. > **NOTE:** If using this resource with OAuth2 scopes, this resource requires `okta.profileMappings.manage` scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const user = okta.user.getUserProfileMappingSource({});
 * const example = new okta.profile.Mapping("example", {
 *     sourceId: "<source id>",
 *     targetId: user.then(user => user.id),
 *     deleteWhenAbsent: true,
 *     mappings: [
 *         {
 *             id: "firstName",
 *             expression: "appuser.firstName",
 *         },
 *         {
 *             id: "lastName",
 *             expression: "appuser.lastName",
 *         },
 *         {
 *             id: "email",
 *             expression: "appuser.email",
 *         },
 *         {
 *             id: "login",
 *             expression: "appuser.email",
 *         },
 *     ],
 * });
 * ```
 */
export class Mapping extends pulumi.CustomResource {
    /**
     * Get an existing Mapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MappingState, opts?: pulumi.CustomResourceOptions): Mapping {
        return new Mapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:profile/mapping:Mapping';

    /**
     * Returns true if the given object is an instance of Mapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mapping.__pulumiType;
    }

    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * > **WARNING:**: 'always*apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always*apply' makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     */
    declare public readonly alwaysApply: pulumi.Output<boolean | undefined>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     */
    declare public readonly deleteWhenAbsent: pulumi.Output<boolean | undefined>;
    declare public readonly mappings: pulumi.Output<outputs.profile.MappingMapping[] | undefined>;
    /**
     * The source id of the mapping to manage.
     */
    declare public readonly sourceId: pulumi.Output<string>;
    /**
     * Name of the mapping source.
     */
    declare public /*out*/ readonly sourceName: pulumi.Output<string>;
    /**
     * ID of the mapping source.
     */
    declare public /*out*/ readonly sourceType: pulumi.Output<string>;
    /**
     * The target id of the mapping to manage.
     */
    declare public readonly targetId: pulumi.Output<string>;
    /**
     * Name of the mapping target.
     */
    declare public /*out*/ readonly targetName: pulumi.Output<string>;
    /**
     * ID of the mapping target.
     */
    declare public /*out*/ readonly targetType: pulumi.Output<string>;

    /**
     * Create a Mapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MappingArgs | MappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MappingState | undefined;
            resourceInputs["alwaysApply"] = state?.alwaysApply;
            resourceInputs["deleteWhenAbsent"] = state?.deleteWhenAbsent;
            resourceInputs["mappings"] = state?.mappings;
            resourceInputs["sourceId"] = state?.sourceId;
            resourceInputs["sourceName"] = state?.sourceName;
            resourceInputs["sourceType"] = state?.sourceType;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["targetName"] = state?.targetName;
            resourceInputs["targetType"] = state?.targetType;
        } else {
            const args = argsOrState as MappingArgs | undefined;
            if (args?.sourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if (args?.targetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["alwaysApply"] = args?.alwaysApply;
            resourceInputs["deleteWhenAbsent"] = args?.deleteWhenAbsent;
            resourceInputs["mappings"] = args?.mappings;
            resourceInputs["sourceId"] = args?.sourceId;
            resourceInputs["targetId"] = args?.targetId;
            resourceInputs["sourceName"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["targetName"] = undefined /*out*/;
            resourceInputs["targetType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mapping resources.
 */
export interface MappingState {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * > **WARNING:**: 'always*apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always*apply' makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     */
    alwaysApply?: pulumi.Input<boolean>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     */
    deleteWhenAbsent?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<pulumi.Input<inputs.profile.MappingMapping>[]>;
    /**
     * The source id of the mapping to manage.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * Name of the mapping source.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * ID of the mapping source.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The target id of the mapping to manage.
     */
    targetId?: pulumi.Input<string>;
    /**
     * Name of the mapping target.
     */
    targetName?: pulumi.Input<string>;
    /**
     * ID of the mapping target.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mapping resource.
 */
export interface MappingArgs {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * > **WARNING:**: 'always*apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always*apply' makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     */
    alwaysApply?: pulumi.Input<boolean>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     */
    deleteWhenAbsent?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<pulumi.Input<inputs.profile.MappingMapping>[]>;
    /**
     * The source id of the mapping to manage.
     */
    sourceId: pulumi.Input<string>;
    /**
     * The target id of the mapping to manage.
     */
    targetId: pulumi.Input<string>;
}
