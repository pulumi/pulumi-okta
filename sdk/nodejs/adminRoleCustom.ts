// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * These operations allow the creation and manipulation of custom roles as custom collections of permissions.
 *
 * > **NOTE:** This an `Early Access` feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.AdminRoleCustom("example", {
 *     description: "This role allows app assignment management",
 *     label: "AppAssignmentManager",
 *     permissions: ["okta.apps.assignment.manage"],
 * });
 * ```
 *
 * ## Import
 *
 * Okta Custom Admin Role can be imported via the Okta ID.
 *
 * ```sh
 * $ pulumi import okta:index/adminRoleCustom:AdminRoleCustom example &#60;custom role id&#62;
 * ```
 */
export class AdminRoleCustom extends pulumi.CustomResource {
    /**
     * Get an existing AdminRoleCustom resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminRoleCustomState, opts?: pulumi.CustomResourceOptions): AdminRoleCustom {
        return new AdminRoleCustom(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/adminRoleCustom:AdminRoleCustom';

    /**
     * Returns true if the given object is an instance of AdminRoleCustom.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminRoleCustom {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminRoleCustom.__pulumiType;
    }

    /**
     * A human-readable description of the new Role.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name given to the new Role.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The permissions that the new Role grants. At least one
     * permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
     * `"okta.authzServers.read"`,
     * `"okta.apps.assignment.manage"`,
     * `"okta.apps.manage"`,
     * `"okta.apps.read"`,
     * `"okta.customizations.manage"`,
     * `"okta.customizations.read"`,
     * `"okta.groups.appAssignment.manage"`,
     * `"okta.groups.create"`,
     * `"okta.groups.manage"`,
     * `"okta.groups.members.manage"`,
     * `"okta.groups.read"`,
     * `"okta.profilesources.import.run"`,
     * `"okta.users.appAssignment.manage"`,
     * `"okta.users.create"`,
     * `"okta.users.credentials.expirePassword"`,
     * `"okta.users.credentials.manage"`,
     * `"okta.users.credentials.resetFactors"`,
     * `"okta.users.credentials.resetPassword"`,
     * `"okta.users.groupMembership.manage"`,
     * `"okta.users.lifecycle.activate"`,
     * `"okta.users.lifecycle.clearSessions"`,
     * `"okta.users.lifecycle.deactivate"`,
     * `"okta.users.lifecycle.delete"`,
     * `"okta.users.lifecycle.manage"`,
     * `"okta.users.lifecycle.suspend"`,
     * `"okta.users.lifecycle.unlock"`,
     * `"okta.users.lifecycle.unsuspend"`,
     * `"okta.users.manage"`,
     * `"okta.users.read"`,
     * `"okta.users.userprofile.manage"`,
     * `"okta.workflows.invoke"`.,
     */
    public readonly permissions!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AdminRoleCustom resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdminRoleCustomArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminRoleCustomArgs | AdminRoleCustomState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminRoleCustomState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as AdminRoleCustomArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminRoleCustom.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdminRoleCustom resources.
 */
export interface AdminRoleCustomState {
    /**
     * A human-readable description of the new Role.
     */
    description?: pulumi.Input<string>;
    /**
     * The name given to the new Role.
     */
    label?: pulumi.Input<string>;
    /**
     * The permissions that the new Role grants. At least one
     * permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
     * `"okta.authzServers.read"`,
     * `"okta.apps.assignment.manage"`,
     * `"okta.apps.manage"`,
     * `"okta.apps.read"`,
     * `"okta.customizations.manage"`,
     * `"okta.customizations.read"`,
     * `"okta.groups.appAssignment.manage"`,
     * `"okta.groups.create"`,
     * `"okta.groups.manage"`,
     * `"okta.groups.members.manage"`,
     * `"okta.groups.read"`,
     * `"okta.profilesources.import.run"`,
     * `"okta.users.appAssignment.manage"`,
     * `"okta.users.create"`,
     * `"okta.users.credentials.expirePassword"`,
     * `"okta.users.credentials.manage"`,
     * `"okta.users.credentials.resetFactors"`,
     * `"okta.users.credentials.resetPassword"`,
     * `"okta.users.groupMembership.manage"`,
     * `"okta.users.lifecycle.activate"`,
     * `"okta.users.lifecycle.clearSessions"`,
     * `"okta.users.lifecycle.deactivate"`,
     * `"okta.users.lifecycle.delete"`,
     * `"okta.users.lifecycle.manage"`,
     * `"okta.users.lifecycle.suspend"`,
     * `"okta.users.lifecycle.unlock"`,
     * `"okta.users.lifecycle.unsuspend"`,
     * `"okta.users.manage"`,
     * `"okta.users.read"`,
     * `"okta.users.userprofile.manage"`,
     * `"okta.workflows.invoke"`.,
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AdminRoleCustom resource.
 */
export interface AdminRoleCustomArgs {
    /**
     * A human-readable description of the new Role.
     */
    description: pulumi.Input<string>;
    /**
     * The name given to the new Role.
     */
    label: pulumi.Input<string>;
    /**
     * The permissions that the new Role grants. At least one
     * permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
     * `"okta.authzServers.read"`,
     * `"okta.apps.assignment.manage"`,
     * `"okta.apps.manage"`,
     * `"okta.apps.read"`,
     * `"okta.customizations.manage"`,
     * `"okta.customizations.read"`,
     * `"okta.groups.appAssignment.manage"`,
     * `"okta.groups.create"`,
     * `"okta.groups.manage"`,
     * `"okta.groups.members.manage"`,
     * `"okta.groups.read"`,
     * `"okta.profilesources.import.run"`,
     * `"okta.users.appAssignment.manage"`,
     * `"okta.users.create"`,
     * `"okta.users.credentials.expirePassword"`,
     * `"okta.users.credentials.manage"`,
     * `"okta.users.credentials.resetFactors"`,
     * `"okta.users.credentials.resetPassword"`,
     * `"okta.users.groupMembership.manage"`,
     * `"okta.users.lifecycle.activate"`,
     * `"okta.users.lifecycle.clearSessions"`,
     * `"okta.users.lifecycle.deactivate"`,
     * `"okta.users.lifecycle.delete"`,
     * `"okta.users.lifecycle.manage"`,
     * `"okta.users.lifecycle.suspend"`,
     * `"okta.users.lifecycle.unlock"`,
     * `"okta.users.lifecycle.unsuspend"`,
     * `"okta.users.manage"`,
     * `"okta.users.read"`,
     * `"okta.users.userprofile.manage"`,
     * `"okta.workflows.invoke"`.,
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}
