// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Gets, updates, a single Theme of a Brand of an Okta Organization.
 *
 * This resource allows you to get and update an Okta
 * [Theme](https://developer.okta.com/docs/reference/api/brands/#theme-object).
 *
 * The Okta Management API does not have a true Create or Delete for a theme. Therefore, the theme resource must be imported
 * first into the pulumi state before updates can be applied to the theme.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getBrands({});
 * // resource has been imported into current state:
 * // $ terraform import okta_theme.example <theme id>
 * const example = new okta.Theme("example", {
 *     brandId: test.then(test => test.brands?.[0]?.id),
 *     logo: "path/to/logo.png",
 *     favicon: "path/to/favicon.png",
 *     backgroundImage: "path/to/background.png",
 *     primaryColorHex: "#1662dd",
 *     secondaryColorHex: "#ebebed",
 *     signInPageTouchPointVariant: "OKTA_DEFAULT",
 *     endUserDashboardTouchPointVariant: "OKTA_DEFAULT",
 *     errorPageTouchPointVariant: "OKTA_DEFAULT",
 *     emailTemplateTouchPointVariant: "OKTA_DEFAULT",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/theme:Theme example <brand_id>/<theme_id>
 * ```
 */
export class Theme extends pulumi.CustomResource {
    /**
     * Get an existing Theme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThemeState, opts?: pulumi.CustomResourceOptions): Theme {
        return new Theme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/theme:Theme';

    /**
     * Returns true if the given object is an instance of Theme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Theme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Theme.__pulumiType;
    }

    /**
     * Path to local file
     */
    declare public readonly backgroundImage: pulumi.Output<string | undefined>;
    /**
     * Background image URL
     */
    declare public /*out*/ readonly backgroundImageUrl: pulumi.Output<string>;
    /**
     * Brand ID
     */
    declare public readonly brandId: pulumi.Output<string>;
    /**
     * Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     */
    declare public readonly emailTemplateTouchPointVariant: pulumi.Output<string | undefined>;
    /**
     * Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     */
    declare public readonly endUserDashboardTouchPointVariant: pulumi.Output<string | undefined>;
    /**
     * Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    declare public readonly errorPageTouchPointVariant: pulumi.Output<string | undefined>;
    /**
     * Path to local file
     */
    declare public readonly favicon: pulumi.Output<string | undefined>;
    /**
     * Favicon URL
     */
    declare public /*out*/ readonly faviconUrl: pulumi.Output<string>;
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the email template
     */
    declare public /*out*/ readonly links: pulumi.Output<string>;
    /**
     * Path to local file
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * Logo URL
     */
    declare public /*out*/ readonly logoUrl: pulumi.Output<string>;
    /**
     * Primary color contrast hex code
     */
    declare public readonly primaryColorContrastHex: pulumi.Output<string | undefined>;
    /**
     * Primary color hex code
     */
    declare public readonly primaryColorHex: pulumi.Output<string | undefined>;
    /**
     * Secondary color contrast hex code
     */
    declare public readonly secondaryColorContrastHex: pulumi.Output<string | undefined>;
    /**
     * Secondary color hex code
     */
    declare public readonly secondaryColorHex: pulumi.Output<string | undefined>;
    /**
     * Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    declare public readonly signInPageTouchPointVariant: pulumi.Output<string | undefined>;
    /**
     * Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
     */
    declare public readonly themeId: pulumi.Output<string | undefined>;

    /**
     * Create a Theme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThemeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThemeArgs | ThemeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThemeState | undefined;
            resourceInputs["backgroundImage"] = state?.backgroundImage;
            resourceInputs["backgroundImageUrl"] = state?.backgroundImageUrl;
            resourceInputs["brandId"] = state?.brandId;
            resourceInputs["emailTemplateTouchPointVariant"] = state?.emailTemplateTouchPointVariant;
            resourceInputs["endUserDashboardTouchPointVariant"] = state?.endUserDashboardTouchPointVariant;
            resourceInputs["errorPageTouchPointVariant"] = state?.errorPageTouchPointVariant;
            resourceInputs["favicon"] = state?.favicon;
            resourceInputs["faviconUrl"] = state?.faviconUrl;
            resourceInputs["links"] = state?.links;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["logoUrl"] = state?.logoUrl;
            resourceInputs["primaryColorContrastHex"] = state?.primaryColorContrastHex;
            resourceInputs["primaryColorHex"] = state?.primaryColorHex;
            resourceInputs["secondaryColorContrastHex"] = state?.secondaryColorContrastHex;
            resourceInputs["secondaryColorHex"] = state?.secondaryColorHex;
            resourceInputs["signInPageTouchPointVariant"] = state?.signInPageTouchPointVariant;
            resourceInputs["themeId"] = state?.themeId;
        } else {
            const args = argsOrState as ThemeArgs | undefined;
            if (args?.brandId === undefined && !opts.urn) {
                throw new Error("Missing required property 'brandId'");
            }
            resourceInputs["backgroundImage"] = args?.backgroundImage;
            resourceInputs["brandId"] = args?.brandId;
            resourceInputs["emailTemplateTouchPointVariant"] = args?.emailTemplateTouchPointVariant;
            resourceInputs["endUserDashboardTouchPointVariant"] = args?.endUserDashboardTouchPointVariant;
            resourceInputs["errorPageTouchPointVariant"] = args?.errorPageTouchPointVariant;
            resourceInputs["favicon"] = args?.favicon;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["primaryColorContrastHex"] = args?.primaryColorContrastHex;
            resourceInputs["primaryColorHex"] = args?.primaryColorHex;
            resourceInputs["secondaryColorContrastHex"] = args?.secondaryColorContrastHex;
            resourceInputs["secondaryColorHex"] = args?.secondaryColorHex;
            resourceInputs["signInPageTouchPointVariant"] = args?.signInPageTouchPointVariant;
            resourceInputs["themeId"] = args?.themeId;
            resourceInputs["backgroundImageUrl"] = undefined /*out*/;
            resourceInputs["faviconUrl"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Theme.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Theme resources.
 */
export interface ThemeState {
    /**
     * Path to local file
     */
    backgroundImage?: pulumi.Input<string>;
    /**
     * Background image URL
     */
    backgroundImageUrl?: pulumi.Input<string>;
    /**
     * Brand ID
     */
    brandId?: pulumi.Input<string>;
    /**
     * Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     */
    emailTemplateTouchPointVariant?: pulumi.Input<string>;
    /**
     * Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     */
    endUserDashboardTouchPointVariant?: pulumi.Input<string>;
    /**
     * Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    errorPageTouchPointVariant?: pulumi.Input<string>;
    /**
     * Path to local file
     */
    favicon?: pulumi.Input<string>;
    /**
     * Favicon URL
     */
    faviconUrl?: pulumi.Input<string>;
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the email template
     */
    links?: pulumi.Input<string>;
    /**
     * Path to local file
     */
    logo?: pulumi.Input<string>;
    /**
     * Logo URL
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * Primary color contrast hex code
     */
    primaryColorContrastHex?: pulumi.Input<string>;
    /**
     * Primary color hex code
     */
    primaryColorHex?: pulumi.Input<string>;
    /**
     * Secondary color contrast hex code
     */
    secondaryColorContrastHex?: pulumi.Input<string>;
    /**
     * Secondary color hex code
     */
    secondaryColorHex?: pulumi.Input<string>;
    /**
     * Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    signInPageTouchPointVariant?: pulumi.Input<string>;
    /**
     * Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
     */
    themeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Theme resource.
 */
export interface ThemeArgs {
    /**
     * Path to local file
     */
    backgroundImage?: pulumi.Input<string>;
    /**
     * Brand ID
     */
    brandId: pulumi.Input<string>;
    /**
     * Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     */
    emailTemplateTouchPointVariant?: pulumi.Input<string>;
    /**
     * Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     */
    endUserDashboardTouchPointVariant?: pulumi.Input<string>;
    /**
     * Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    errorPageTouchPointVariant?: pulumi.Input<string>;
    /**
     * Path to local file
     */
    favicon?: pulumi.Input<string>;
    /**
     * Path to local file
     */
    logo?: pulumi.Input<string>;
    /**
     * Primary color contrast hex code
     */
    primaryColorContrastHex?: pulumi.Input<string>;
    /**
     * Primary color hex code
     */
    primaryColorHex?: pulumi.Input<string>;
    /**
     * Secondary color contrast hex code
     */
    secondaryColorContrastHex?: pulumi.Input<string>;
    /**
     * Secondary color hex code
     */
    secondaryColorHex?: pulumi.Input<string>;
    /**
     * Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    signInPageTouchPointVariant?: pulumi.Input<string>;
    /**
     * Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
     */
    themeId?: pulumi.Input<string>;
}
