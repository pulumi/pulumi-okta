// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve an application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.app.getApp({
 *     label: "Example App",
 * });
 * ```
 */
export function getApp(args?: GetAppArgs, opts?: pulumi.InvokeOptions): Promise<GetAppResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:app/getApp:getApp", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getApp.
 */
export interface GetAppArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: boolean;
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: string;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time the API searches both `name`
     * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
     * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
     * an exact match.
     */
    label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: string;
    /**
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: boolean;
    /**
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: boolean;
}

/**
 * A collection of values returned by getApp.
 */
export interface GetAppResult {
    readonly activeOnly?: boolean;
    /**
     * @deprecated The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`
     */
    readonly groups: string[];
    /**
     * Application ID.
     */
    readonly id?: string;
    /**
     * Application label.
     */
    readonly label?: string;
    readonly labelPrefix?: string;
    /**
     * Generic JSON containing discoverable resources related to the app.
     */
    readonly links: string;
    /**
     * Application name.
     */
    readonly name: string;
    /**
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    readonly skipGroups?: boolean;
    /**
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    readonly skipUsers?: boolean;
    /**
     * Application status.
     */
    readonly status: string;
    /**
     * @deprecated The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`
     */
    readonly users: string[];
}
/**
 * Use this data source to retrieve an application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.app.getApp({
 *     label: "Example App",
 * });
 * ```
 */
export function getAppOutput(args?: GetAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppResult> {
    return pulumi.output(args).apply((a: any) => getApp(a, opts))
}

/**
 * A collection of arguments for invoking getApp.
 */
export interface GetAppOutputArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: pulumi.Input<boolean>;
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: pulumi.Input<string>;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time the API searches both `name`
     * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
     * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
     * an exact match.
     */
    label?: pulumi.Input<string>;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: pulumi.Input<string>;
    /**
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: pulumi.Input<boolean>;
}
