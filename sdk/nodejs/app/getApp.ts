// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve an application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = pulumi.output(okta.app.getApp({
 *     label: "Example App",
 * }));
 * ```
 */
export function getApp(args?: GetAppArgs, opts?: pulumi.InvokeOptions): Promise<GetAppResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("okta:app/getApp:getApp", {
        "activeOnly": args.activeOnly,
        "groups": args.groups,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getApp.
 */
export interface GetAppArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: boolean;
    /**
     * List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     *
     * @deprecated The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`
     */
    groups?: string[];
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: string;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     */
    label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: string;
    /**
     * List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     *
     * @deprecated The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`
     */
    users?: string[];
}

/**
 * A collection of values returned by getApp.
 */
export interface GetAppResult {
    readonly activeOnly?: boolean;
    /**
     * List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     *
     * @deprecated The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`
     */
    readonly groups?: string[];
    /**
     * Application ID.
     */
    readonly id?: string;
    /**
     * Application label.
     */
    readonly label?: string;
    readonly labelPrefix?: string;
    /**
     * Generic JSON containing discoverable resources related to the app.
     */
    readonly links: string;
    /**
     * Application name.
     */
    readonly name: string;
    /**
     * Application status.
     */
    readonly status: string;
    /**
     * List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     *
     * @deprecated The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`
     */
    readonly users?: string[];
}

export function getAppOutput(args?: GetAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppResult> {
    return pulumi.output(args).apply(a => getApp(a, opts))
}

/**
 * A collection of arguments for invoking getApp.
 */
export interface GetAppOutputArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: pulumi.Input<boolean>;
    /**
     * List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     *
     * @deprecated The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: pulumi.Input<string>;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     */
    label?: pulumi.Input<string>;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: pulumi.Input<string>;
    /**
     * List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     *
     * @deprecated The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
