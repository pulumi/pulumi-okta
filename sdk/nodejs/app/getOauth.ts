// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Get a OIDC application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.app.getOauth({
 *     label: "Example App",
 * });
 * ```
 */
export function getOauth(args?: GetOauthArgs, opts?: pulumi.InvokeOptions): Promise<GetOauthResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:app/getOauth:getOauth", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getOauth.
 */
export interface GetOauthArgs {
    /**
     * Search only ACTIVE applications.
     */
    activeOnly?: boolean;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    id?: string;
    /**
     * The label of the app to retrieve, conflicts with
     * 			labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
     * 			Okta's List Apps API. The API will search both name and label using that
     * 			query. Therefore similarily named and labeled apps may be returned in the query
     * 			and have the unitended result of associating the wrong app with this data
     * 			source. See:
     * 			https://developer.okta.com/docs/reference/api/apps/#list-applications
     */
    label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    labelPrefix?: string;
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: boolean;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: boolean;
}

/**
 * A collection of values returned by getOauth.
 */
export interface GetOauthResult {
    /**
     * Search only ACTIVE applications.
     */
    readonly activeOnly?: boolean;
    /**
     * Display auto submit toolbar
     */
    readonly autoSubmitToolbar: boolean;
    /**
     * OAuth client ID
     */
    readonly clientId: string;
    /**
     * OAuth client secret
     */
    readonly clientSecret: string;
    /**
     * URI to a web page providing information about the client.
     */
    readonly clientUri: string;
    /**
     * List of OAuth 2.0 grant types
     */
    readonly grantTypes: string[];
    /**
     * Do not display application icon on mobile app
     */
    readonly hideIos: boolean;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb: boolean;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    readonly id?: string;
    /**
     * The label of the app to retrieve, conflicts with
     * 			labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
     * 			Okta's List Apps API. The API will search both name and label using that
     * 			query. Therefore similarily named and labeled apps may be returned in the query
     * 			and have the unitended result of associating the wrong app with this data
     * 			source. See:
     * 			https://developer.okta.com/docs/reference/api/apps/#list-applications
     */
    readonly label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    readonly labelPrefix?: string;
    /**
     * Discoverable resources related to the app
     */
    readonly links: string;
    /**
     * The type of Idp-Initiated login that the client supports, if any
     */
    readonly loginMode: string;
    /**
     * List of scopes to use for the request when 'login_mode' == OKTA
     */
    readonly loginScopes: string[];
    /**
     * URI that initiates login.
     */
    readonly loginUri: string;
    /**
     * URI that references a logo for the client.
     */
    readonly logoUri: string;
    /**
     * Name of application.
     */
    readonly name: string;
    /**
     * URI to web page providing client policy document.
     */
    readonly policyUri: string;
    /**
     * List of URIs for redirection after logout
     */
    readonly postLogoutRedirectUris: string[];
    /**
     * List of URIs for use in the redirect-based flow.
     */
    readonly redirectUris: string[];
    /**
     * List of OAuth 2.0 response type strings.
     */
    readonly responseTypes: string[];
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    readonly skipGroups?: boolean;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    readonly skipUsers?: boolean;
    /**
     * Status of application.
     */
    readonly status: string;
    /**
     * The type of OAuth application.
     */
    readonly type: string;
    /**
     * Indicates if the client is allowed to use wildcard matching of redirect_uris. Some valid values include: "SUBDOMAIN", "DISABLED".
     */
    readonly wildcardRedirect: string;
}
/**
 * Get a OIDC application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.app.getOauth({
 *     label: "Example App",
 * });
 * ```
 */
export function getOauthOutput(args?: GetOauthOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOauthResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:app/getOauth:getOauth", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getOauth.
 */
export interface GetOauthOutputArgs {
    /**
     * Search only ACTIVE applications.
     */
    activeOnly?: pulumi.Input<boolean>;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    id?: pulumi.Input<string>;
    /**
     * The label of the app to retrieve, conflicts with
     * 			labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
     * 			Okta's List Apps API. The API will search both name and label using that
     * 			query. Therefore similarily named and labeled apps may be returned in the query
     * 			and have the unitended result of associating the wrong app with this data
     * 			source. See:
     * 			https://developer.okta.com/docs/reference/api/apps/#list-applications
     */
    label?: pulumi.Input<string>;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    labelPrefix?: pulumi.Input<string>;
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: pulumi.Input<boolean>;
}
