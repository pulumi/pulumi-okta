// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > **DEPRECATED** use `okta.AppUserBaseSchemaProperty` instead.
 *
 * This resource allows you to configure a base app user schema property.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.app.UserBaseSchema("example", {
 *     appId: "<app id>",
 *     index: "customPropertyName",
 *     master: "OKTA",
 *     title: "customPropertyName",
 *     type: "string",
 * });
 * ```
 *
 * ## Import
 *
 * App user base schema property can be imported via the property index and app id.
 *
 * ```sh
 *  $ pulumi import okta:app/userBaseSchema:UserBaseSchema example &#60;app id&#62;/&#60;property name&#62;
 * ```
 */
export class UserBaseSchema extends pulumi.CustomResource {
    /**
     * Get an existing UserBaseSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserBaseSchemaState, opts?: pulumi.CustomResourceOptions): UserBaseSchema {
        return new UserBaseSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/userBaseSchema:UserBaseSchema';

    /**
     * Returns true if the given object is an instance of UserBaseSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserBaseSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserBaseSchema.__pulumiType;
    }

    /**
     * The Application's ID the user schema property should be assigned to.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The property name.
     */
    public readonly index!: pulumi.Output<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
     */
    public readonly master!: pulumi.Output<string | undefined>;
    /**
     * The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
     */
    public readonly pattern!: pulumi.Output<string | undefined>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    public readonly permissions!: pulumi.Output<string | undefined>;
    /**
     * Whether the property is required for this application's users.
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    /**
     * The property display name.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Custom subschema user type
     */
    public readonly userType!: pulumi.Output<string | undefined>;

    /**
     * Create a UserBaseSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserBaseSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserBaseSchemaArgs | UserBaseSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserBaseSchemaState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["master"] = state ? state.master : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as UserBaseSchemaArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["master"] = args ? args.master : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserBaseSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserBaseSchema resources.
 */
export interface UserBaseSchemaState {
    /**
     * The Application's ID the user schema property should be assigned to.
     */
    appId?: pulumi.Input<string>;
    /**
     * The property name.
     */
    index?: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
     */
    master?: pulumi.Input<string>;
    /**
     * The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
     */
    pattern?: pulumi.Input<string>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the property is required for this application's users.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The property display name.
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
     */
    type?: pulumi.Input<string>;
    /**
     * Custom subschema user type
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserBaseSchema resource.
 */
export interface UserBaseSchemaArgs {
    /**
     * The Application's ID the user schema property should be assigned to.
     */
    appId: pulumi.Input<string>;
    /**
     * The property name.
     */
    index: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
     */
    master?: pulumi.Input<string>;
    /**
     * The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
     */
    pattern?: pulumi.Input<string>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the property is required for this application's users.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The property display name.
     */
    title: pulumi.Input<string>;
    /**
     * The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
     */
    type: pulumi.Input<string>;
    /**
     * Custom subschema user type
     */
    userType?: pulumi.Input<string>;
}
