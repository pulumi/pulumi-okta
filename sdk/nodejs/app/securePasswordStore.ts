// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a Secure Password Store Application.
 *
 *         This resource allows you to create and configure a Secure Password Store Application.
 *         > During an apply if there is change in 'status' the app will first be
 *         activated or deactivated in accordance with the 'status' change. Then, all
 *         other arguments that changed will be applied.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.app.SecurePasswordStore("example", {
 *     label: "example",
 *     usernameField: "user",
 *     passwordField: "pass",
 *     url: "https://test.com",
 *     credentialsScheme: "ADMIN_SETS_CREDENTIALS",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example <app_id>
 * ```
 */
export class SecurePasswordStore extends pulumi.CustomResource {
    /**
     * Get an existing SecurePasswordStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurePasswordStoreState, opts?: pulumi.CustomResourceOptions): SecurePasswordStore {
        return new SecurePasswordStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/securePasswordStore:SecurePasswordStore';

    /**
     * Returns true if the given object is an instance of SecurePasswordStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurePasswordStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurePasswordStore.__pulumiType;
    }

    /**
     * Custom error page URL
     */
    declare public readonly accessibilityErrorRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL
     */
    declare public readonly accessibilityLoginRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Enable self service. Default is `false`
     */
    declare public readonly accessibilitySelfService: pulumi.Output<boolean | undefined>;
    /**
     * Application notes for admins.
     */
    declare public readonly adminNote: pulumi.Output<string | undefined>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    declare public readonly appLinksJson: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar
     */
    declare public readonly autoSubmitToolbar: pulumi.Output<boolean | undefined>;
    /**
     * Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
     */
    declare public readonly credentialsScheme: pulumi.Output<string | undefined>;
    /**
     * Application notes for end users.
     */
    declare public readonly enduserNote: pulumi.Output<string | undefined>;
    /**
     * Do not display application icon on mobile app
     */
    declare public readonly hideIos: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    declare public readonly hideWeb: pulumi.Output<boolean | undefined>;
    /**
     * The Application's display name.
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * URL of the application's logo
     */
    declare public /*out*/ readonly logoUrl: pulumi.Output<string>;
    /**
     * Name of the app.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Name of optional param in the login form
     */
    declare public readonly optionalField1: pulumi.Output<string | undefined>;
    /**
     * Name of optional value in login form
     */
    declare public readonly optionalField1Value: pulumi.Output<string | undefined>;
    /**
     * Name of optional param in the login form
     */
    declare public readonly optionalField2: pulumi.Output<string | undefined>;
    /**
     * Name of optional value in login form
     */
    declare public readonly optionalField2Value: pulumi.Output<string | undefined>;
    /**
     * Name of optional param in the login form
     */
    declare public readonly optionalField3: pulumi.Output<string | undefined>;
    /**
     * Name of optional value in login form
     */
    declare public readonly optionalField3Value: pulumi.Output<string | undefined>;
    /**
     * Login password field
     */
    declare public readonly passwordField: pulumi.Output<string>;
    /**
     * Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
     */
    declare public readonly revealPassword: pulumi.Output<boolean | undefined>;
    /**
     * Shared password, required for certain schemes.
     */
    declare public readonly sharedPassword: pulumi.Output<string | undefined>;
    /**
     * Shared username, required for certain schemes.
     */
    declare public readonly sharedUsername: pulumi.Output<string | undefined>;
    /**
     * Sign on mode of application.
     */
    declare public /*out*/ readonly signOnMode: pulumi.Output<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Login URL
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    declare public readonly userNameTemplate: pulumi.Output<string | undefined>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    declare public readonly userNameTemplatePushStatus: pulumi.Output<string | undefined>;
    /**
     * Username template suffix
     */
    declare public readonly userNameTemplateSuffix: pulumi.Output<string | undefined>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    declare public readonly userNameTemplateType: pulumi.Output<string | undefined>;
    /**
     * Login username field
     */
    declare public readonly usernameField: pulumi.Output<string>;

    /**
     * Create a SecurePasswordStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurePasswordStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurePasswordStoreArgs | SecurePasswordStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurePasswordStoreState | undefined;
            resourceInputs["accessibilityErrorRedirectUrl"] = state?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = state?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = state?.accessibilitySelfService;
            resourceInputs["adminNote"] = state?.adminNote;
            resourceInputs["appLinksJson"] = state?.appLinksJson;
            resourceInputs["autoSubmitToolbar"] = state?.autoSubmitToolbar;
            resourceInputs["credentialsScheme"] = state?.credentialsScheme;
            resourceInputs["enduserNote"] = state?.enduserNote;
            resourceInputs["hideIos"] = state?.hideIos;
            resourceInputs["hideWeb"] = state?.hideWeb;
            resourceInputs["label"] = state?.label;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["logoUrl"] = state?.logoUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["optionalField1"] = state?.optionalField1;
            resourceInputs["optionalField1Value"] = state?.optionalField1Value;
            resourceInputs["optionalField2"] = state?.optionalField2;
            resourceInputs["optionalField2Value"] = state?.optionalField2Value;
            resourceInputs["optionalField3"] = state?.optionalField3;
            resourceInputs["optionalField3Value"] = state?.optionalField3Value;
            resourceInputs["passwordField"] = state?.passwordField;
            resourceInputs["revealPassword"] = state?.revealPassword;
            resourceInputs["sharedPassword"] = state?.sharedPassword;
            resourceInputs["sharedUsername"] = state?.sharedUsername;
            resourceInputs["signOnMode"] = state?.signOnMode;
            resourceInputs["status"] = state?.status;
            resourceInputs["url"] = state?.url;
            resourceInputs["userNameTemplate"] = state?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = state?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = state?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = state?.userNameTemplateType;
            resourceInputs["usernameField"] = state?.usernameField;
        } else {
            const args = argsOrState as SecurePasswordStoreArgs | undefined;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.passwordField === undefined && !opts.urn) {
                throw new Error("Missing required property 'passwordField'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if (args?.usernameField === undefined && !opts.urn) {
                throw new Error("Missing required property 'usernameField'");
            }
            resourceInputs["accessibilityErrorRedirectUrl"] = args?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = args?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = args?.accessibilitySelfService;
            resourceInputs["adminNote"] = args?.adminNote;
            resourceInputs["appLinksJson"] = args?.appLinksJson;
            resourceInputs["autoSubmitToolbar"] = args?.autoSubmitToolbar;
            resourceInputs["credentialsScheme"] = args?.credentialsScheme;
            resourceInputs["enduserNote"] = args?.enduserNote;
            resourceInputs["hideIos"] = args?.hideIos;
            resourceInputs["hideWeb"] = args?.hideWeb;
            resourceInputs["label"] = args?.label;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["optionalField1"] = args?.optionalField1;
            resourceInputs["optionalField1Value"] = args?.optionalField1Value;
            resourceInputs["optionalField2"] = args?.optionalField2;
            resourceInputs["optionalField2Value"] = args?.optionalField2Value;
            resourceInputs["optionalField3"] = args?.optionalField3;
            resourceInputs["optionalField3Value"] = args?.optionalField3Value;
            resourceInputs["passwordField"] = args?.passwordField;
            resourceInputs["revealPassword"] = args?.revealPassword;
            resourceInputs["sharedPassword"] = args?.sharedPassword;
            resourceInputs["sharedUsername"] = args?.sharedUsername;
            resourceInputs["status"] = args?.status;
            resourceInputs["url"] = args?.url;
            resourceInputs["userNameTemplate"] = args?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = args?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = args?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = args?.userNameTemplateType;
            resourceInputs["usernameField"] = args?.usernameField;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["signOnMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurePasswordStore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurePasswordStore resources.
 */
export interface SecurePasswordStoreState {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
     */
    credentialsScheme?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * The Application's display name.
     */
    label?: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * URL of the application's logo
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * Name of the app.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField1?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField1Value?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField2?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField2Value?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField3?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField3Value?: pulumi.Input<string>;
    /**
     * Login password field
     */
    passwordField?: pulumi.Input<string>;
    /**
     * Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
     */
    revealPassword?: pulumi.Input<boolean>;
    /**
     * Shared password, required for certain schemes.
     */
    sharedPassword?: pulumi.Input<string>;
    /**
     * Shared username, required for certain schemes.
     */
    sharedUsername?: pulumi.Input<string>;
    /**
     * Sign on mode of application.
     */
    signOnMode?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Login URL
     */
    url?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
    /**
     * Login username field
     */
    usernameField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurePasswordStore resource.
 */
export interface SecurePasswordStoreArgs {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
     */
    credentialsScheme?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * The Application's display name.
     */
    label: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField1?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField1Value?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField2?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField2Value?: pulumi.Input<string>;
    /**
     * Name of optional param in the login form
     */
    optionalField3?: pulumi.Input<string>;
    /**
     * Name of optional value in login form
     */
    optionalField3Value?: pulumi.Input<string>;
    /**
     * Login password field
     */
    passwordField: pulumi.Input<string>;
    /**
     * Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
     */
    revealPassword?: pulumi.Input<boolean>;
    /**
     * Shared password, required for certain schemes.
     */
    sharedPassword?: pulumi.Input<string>;
    /**
     * Shared username, required for certain schemes.
     */
    sharedUsername?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Login URL
     */
    url: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
    /**
     * Login username field
     */
    usernameField: pulumi.Input<string>;
}
