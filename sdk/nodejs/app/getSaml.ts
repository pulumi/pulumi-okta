// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve an SAML application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = pulumi.output(okta.app.getSaml({
 *     label: "Example App",
 * }));
 * ```
 */
export function getSaml(args?: GetSamlArgs, opts?: pulumi.InvokeOptions): Promise<GetSamlResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("okta:app/getSaml:getSaml", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "requestCompressed": args.requestCompressed,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getSaml.
 */
export interface GetSamlArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: boolean;
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: string;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     */
    label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: string;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: boolean;
    /**
     * Indicator that allows the app to skip `groups` sync. Default is `false`.
     */
    skipGroups?: boolean;
    /**
     * Indicator that allows the app to skip `users` sync. Default is `false`.
     */
    skipUsers?: boolean;
}

/**
 * A collection of values returned by getSaml.
 */
export interface GetSamlResult {
    /**
     * Custom error page URL.
     */
    readonly accessibilityErrorRedirectUrl: string;
    /**
     * Custom login page URL.
     */
    readonly accessibilityLoginRedirectUrl: string;
    /**
     * Enable self-service.
     */
    readonly accessibilitySelfService: boolean;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    readonly acsEndpoints: string[];
    readonly activeOnly?: boolean;
    /**
     * Application settings in JSON format.
     */
    readonly appSettingsJson: string;
    /**
     * Determines whether the SAML assertion is digitally signed.
     */
    readonly assertionSigned: boolean;
    /**
     * List of SAML Attribute statements.
     */
    readonly attributeStatements: outputs.app.GetSamlAttributeStatement[];
    /**
     * Audience restriction.
     */
    readonly audience: string;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication
     * statement.
     */
    readonly authnContextClassRef: string;
    /**
     * Display auto submit toolbar.
     */
    readonly autoSubmitToolbar: boolean;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState: string;
    /**
     * Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     */
    readonly destination: string;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response.
     */
    readonly digestAlgorithm: string;
    /**
     * features enabled.
     */
    readonly features: string[];
    /**
     * List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     *
     * @deprecated The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`
     */
    readonly groups: string[];
    /**
     * Do not display application icon on mobile app.
     */
    readonly hideIos: boolean;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb: boolean;
    /**
     * Prompt user to re-authenticate if SP asks for it.
     */
    readonly honorForceAuthn: boolean;
    /**
     * id of application.
     */
    readonly id?: string;
    /**
     * SAML issuer ID.
     */
    readonly idpIssuer: string;
    /**
     * Saml Inline Hook associated with the application.
     */
    readonly inlineHookId: string;
    /**
     * Certificate key ID.
     */
    readonly keyId: string;
    /**
     * label of application.
     */
    readonly label?: string;
    readonly labelPrefix?: string;
    /**
     * Generic JSON containing discoverable resources related to the app.
     */
    readonly links: string;
    /**
     * The name of the attribute statement.
     */
    readonly name: string;
    /**
     * The location where the app may present the SAML assertion.
     */
    readonly recipient: string;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: boolean;
    /**
     * Determines whether the SAML auth response message is digitally signed.
     */
    readonly responseSigned: boolean;
    /**
     * Signature algorithm used ot digitally sign the assertion and response.
     */
    readonly signatureAlgorithm: string;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     */
    readonly singleLogoutCertificate: string;
    /**
     * The issuer of the Service Provider that generates the Single Logout request.
     */
    readonly singleLogoutIssuer: string;
    /**
     * The location where the logout response is sent.
     */
    readonly singleLogoutUrl: string;
    readonly skipGroups?: boolean;
    readonly skipUsers?: boolean;
    /**
     * SAML service provider issuer.
     */
    readonly spIssuer: string;
    /**
     * Single Sign-on Url.
     */
    readonly ssoUrl: string;
    /**
     * status of application.
     */
    readonly status: string;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat: string;
    /**
     * Template for app user's username when a user is assigned to the app.
     */
    readonly subjectNameIdTemplate: string;
    /**
     * Username template.
     */
    readonly userNameTemplate: string;
    /**
     * Push username on update.
     */
    readonly userNameTemplatePushStatus: string;
    /**
     * Username template suffix.
     */
    readonly userNameTemplateSuffix: string;
    /**
     * Username template type.
     */
    readonly userNameTemplateType: string;
    /**
     * List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     *
     * @deprecated The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`
     */
    readonly users: string[];
}

export function getSamlOutput(args?: GetSamlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSamlResult> {
    return pulumi.output(args).apply(a => getSaml(a, opts))
}

/**
 * A collection of arguments for invoking getSaml.
 */
export interface GetSamlOutputArgs {
    /**
     * tells the provider to query for only `ACTIVE` applications.
     */
    activeOnly?: pulumi.Input<boolean>;
    /**
     * `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
     */
    id?: pulumi.Input<string>;
    /**
     * The label of the app to retrieve, conflicts with `labelPrefix` and `id`. Label uses
     * the `?q=<label>` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     */
    label?: pulumi.Input<string>;
    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     */
    labelPrefix?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Indicator that allows the app to skip `groups` sync. Default is `false`.
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * Indicator that allows the app to skip `users` sync. Default is `false`.
     */
    skipUsers?: pulumi.Input<boolean>;
}
