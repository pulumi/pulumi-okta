// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get a SAML application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.app.getSaml({
 *     label: "Example App",
 * });
 * ```
 */
export function getSaml(args?: GetSamlArgs, opts?: pulumi.InvokeOptions): Promise<GetSamlResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:app/getSaml:getSaml", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "requestCompressed": args.requestCompressed,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getSaml.
 */
export interface GetSamlArgs {
    /**
     * Search only ACTIVE applications.
     */
    activeOnly?: boolean;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    id?: string;
    /**
     * The label of the app to retrieve, conflicts with labelPrefix and id. Label
     * 			uses the ?q=\n\n query parameter exposed by Okta's API. It should be noted that at this time
     * 			this searches both name and label. This is used to avoid paginating through all applications.
     */
    label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    labelPrefix?: string;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: boolean;
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: boolean;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: boolean;
}

/**
 * A collection of values returned by getSaml.
 */
export interface GetSamlResult {
    /**
     * Custom error page URL
     */
    readonly accessibilityErrorRedirectUrl: string;
    /**
     * Custom login page URL
     */
    readonly accessibilityLoginRedirectUrl: string;
    /**
     * Enable self service
     */
    readonly accessibilitySelfService: boolean;
    /**
     * List of ACS endpoints for this SAML application
     */
    readonly acsEndpoints: string[];
    /**
     * Search only ACTIVE applications.
     */
    readonly activeOnly?: boolean;
    /**
     * Application settings in JSON format
     */
    readonly appSettingsJson: string;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    readonly assertionSigned: boolean;
    readonly attributeStatements: outputs.app.GetSamlAttributeStatement[];
    /**
     * Audience Restriction
     */
    readonly audience: string;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    readonly authnContextClassRef: string;
    /**
     * Display auto submit toolbar
     */
    readonly autoSubmitToolbar: boolean;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState: string;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    readonly destination: string;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    readonly digestAlgorithm: string;
    /**
     * features to enable
     */
    readonly features: string[];
    /**
     * Groups associated with the application
     *
     * @deprecated The `groups` field is now deprecated for the data source `okta.app.Saml`, please replace all uses of this with: `okta.AppGroupAssignments`
     */
    readonly groups: string[];
    /**
     * Do not display application icon on mobile app
     */
    readonly hideIos: boolean;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb: boolean;
    /**
     * Prompt user to re-authenticate if SP asks for it
     */
    readonly honorForceAuthn: boolean;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    readonly id?: string;
    /**
     * SAML issuer ID
     */
    readonly idpIssuer: string;
    /**
     * Saml Inline Hook setting
     */
    readonly inlineHookId: string;
    /**
     * Certificate ID
     */
    readonly keyId: string;
    /**
     * The label of the app to retrieve, conflicts with labelPrefix and id. Label
     * 			uses the ?q=\n\n query parameter exposed by Okta's API. It should be noted that at this time
     * 			this searches both name and label. This is used to avoid paginating through all applications.
     */
    readonly label?: string;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    readonly labelPrefix?: string;
    /**
     * Discoverable resources related to the app
     */
    readonly links: string;
    /**
     * Name of application.
     */
    readonly name: string;
    /**
     * The location where the app may present the SAML assertion
     */
    readonly recipient: string;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: boolean;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    readonly responseSigned: boolean;
    /**
     * SAML Signed Request enabled
     */
    readonly samlSignedRequestEnabled: boolean;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    readonly signatureAlgorithm: string;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests
     */
    readonly singleLogoutCertificate: string;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    readonly singleLogoutIssuer: string;
    /**
     * The location where the logout response is sent
     */
    readonly singleLogoutUrl: string;
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    readonly skipGroups?: boolean;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    readonly skipUsers?: boolean;
    /**
     * SAML SP issuer ID
     */
    readonly spIssuer: string;
    /**
     * Single Sign On URL
     */
    readonly ssoUrl: string;
    /**
     * Status of application.
     */
    readonly status: string;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat: string;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    readonly subjectNameIdTemplate: string;
    /**
     * Username template
     */
    readonly userNameTemplate: string;
    /**
     * Push username on update
     */
    readonly userNameTemplatePushStatus: string;
    /**
     * Username template suffix
     */
    readonly userNameTemplateSuffix: string;
    /**
     * Username template type
     */
    readonly userNameTemplateType: string;
    /**
     * Users associated with the application
     *
     * @deprecated The `users` field is now deprecated for the data source `okta.app.Saml`, please replace all uses of this with: `okta.getAppUserAssignments`
     */
    readonly users: string[];
}
/**
 * Get a SAML application from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.app.getSaml({
 *     label: "Example App",
 * });
 * ```
 */
export function getSamlOutput(args?: GetSamlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSamlResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:app/getSaml:getSaml", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "requestCompressed": args.requestCompressed,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts);
}

/**
 * A collection of arguments for invoking getSaml.
 */
export interface GetSamlOutputArgs {
    /**
     * Search only ACTIVE applications.
     */
    activeOnly?: pulumi.Input<boolean>;
    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     */
    id?: pulumi.Input<string>;
    /**
     * The label of the app to retrieve, conflicts with labelPrefix and id. Label
     * 			uses the ?q=\n\n query parameter exposed by Okta's API. It should be noted that at this time
     * 			this searches both name and label. This is used to avoid paginating through all applications.
     */
    label?: pulumi.Input<string>;
    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     */
    labelPrefix?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
     *
     * @deprecated Because groups has been removed, this attribute is a no op and will be removed
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
     *
     * @deprecated Because users has been removed, this attribute is a no op and will be removed
     */
    skipUsers?: pulumi.Input<boolean>;
}
