// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve the collaborators for a given repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = pulumi.output(okta.app.getMetadataSaml({
 *     appId: "<app id>",
 *     keyId: "<cert key id>",
 * }, { async: true }));
 * ```
 */
export function getMetadataSaml(args: GetMetadataSamlArgs, opts?: pulumi.InvokeOptions): Promise<GetMetadataSamlResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("okta:app/getMetadataSaml:getMetadataSaml", {
        "appId": args.appId,
        "keyId": args.keyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetadataSaml.
 */
export interface GetMetadataSamlArgs {
    /**
     * The application ID.
     */
    readonly appId: string;
    /**
     * Certificate Key ID.
     */
    readonly keyId: string;
}

/**
 * A collection of values returned by getMetadataSaml.
 */
export interface GetMetadataSamlResult {
    readonly appId: string;
    /**
     * public certificate from application metadata.
     */
    readonly certificate: string;
    /**
     * Entity URL for instance `https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf`.
     */
    readonly entityId: string;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    readonly httpPostBinding: string;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    readonly httpRedirectBinding: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyId: string;
    /**
     * raw metadata of application.
     */
    readonly metadata: string;
    /**
     * Whether authn requests are signed.
     */
    readonly wantAuthnRequestsSigned: boolean;
}
