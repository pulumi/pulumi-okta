// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a SWA Application.
 *
 * This resource allows you to create and configure a SWA Application.
 * > During an apply if there is change in 'status' the app will first be
 * activated or deactivated in accordance with the 'status' change. Then, all
 * other arguments that changed will be applied.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.app.Swa("example", {
 *     label: "example",
 *     buttonField: "btn-login",
 *     passwordField: "txtbox-password",
 *     usernameField: "txtbox-username",
 *     url: "https://example.com/login.html",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:app/swa:Swa example <app_id>
 * ```
 */
export class Swa extends pulumi.CustomResource {
    /**
     * Get an existing Swa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwaState, opts?: pulumi.CustomResourceOptions): Swa {
        return new Swa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/swa:Swa';

    /**
     * Returns true if the given object is an instance of Swa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Swa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Swa.__pulumiType;
    }

    /**
     * Custom error page URL
     */
    declare public readonly accessibilityErrorRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL
     */
    declare public readonly accessibilityLoginRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Enable self service. Default is `false`
     */
    declare public readonly accessibilitySelfService: pulumi.Output<boolean | undefined>;
    /**
     * Application notes for admins.
     */
    declare public readonly adminNote: pulumi.Output<string | undefined>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    declare public readonly appLinksJson: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar
     */
    declare public readonly autoSubmitToolbar: pulumi.Output<boolean | undefined>;
    /**
     * Login button field
     */
    declare public readonly buttonField: pulumi.Output<string | undefined>;
    /**
     * CSS selector for the checkbox
     */
    declare public readonly checkbox: pulumi.Output<string | undefined>;
    /**
     * Application notes for end users.
     */
    declare public readonly enduserNote: pulumi.Output<string | undefined>;
    /**
     * Do not display application icon on mobile app
     */
    declare public readonly hideIos: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    declare public readonly hideWeb: pulumi.Output<boolean | undefined>;
    /**
     * The Application's display name.
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * URL of the application's logo
     */
    declare public /*out*/ readonly logoUrl: pulumi.Output<string>;
    /**
     * Name of the app.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Login password field
     */
    declare public readonly passwordField: pulumi.Output<string | undefined>;
    /**
     * Preconfigured app name
     */
    declare public readonly preconfiguredApp: pulumi.Output<string | undefined>;
    /**
     * If going to the login page URL redirects to another page, then enter that URL here
     */
    declare public readonly redirectUrl: pulumi.Output<string | undefined>;
    /**
     * Sign on mode of application.
     */
    declare public /*out*/ readonly signOnMode: pulumi.Output<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Login URL
     */
    declare public readonly url: pulumi.Output<string | undefined>;
    /**
     * A regex that further restricts URL to the specified regex
     */
    declare public readonly urlRegex: pulumi.Output<string | undefined>;
    /**
     * Username template. Default: `${source.login}`
     */
    declare public readonly userNameTemplate: pulumi.Output<string | undefined>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    declare public readonly userNameTemplatePushStatus: pulumi.Output<string | undefined>;
    /**
     * Username template suffix
     */
    declare public readonly userNameTemplateSuffix: pulumi.Output<string | undefined>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    declare public readonly userNameTemplateType: pulumi.Output<string | undefined>;
    /**
     * Login username field
     */
    declare public readonly usernameField: pulumi.Output<string | undefined>;

    /**
     * Create a Swa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwaArgs | SwaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwaState | undefined;
            resourceInputs["accessibilityErrorRedirectUrl"] = state?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = state?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = state?.accessibilitySelfService;
            resourceInputs["adminNote"] = state?.adminNote;
            resourceInputs["appLinksJson"] = state?.appLinksJson;
            resourceInputs["autoSubmitToolbar"] = state?.autoSubmitToolbar;
            resourceInputs["buttonField"] = state?.buttonField;
            resourceInputs["checkbox"] = state?.checkbox;
            resourceInputs["enduserNote"] = state?.enduserNote;
            resourceInputs["hideIos"] = state?.hideIos;
            resourceInputs["hideWeb"] = state?.hideWeb;
            resourceInputs["label"] = state?.label;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["logoUrl"] = state?.logoUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["passwordField"] = state?.passwordField;
            resourceInputs["preconfiguredApp"] = state?.preconfiguredApp;
            resourceInputs["redirectUrl"] = state?.redirectUrl;
            resourceInputs["signOnMode"] = state?.signOnMode;
            resourceInputs["status"] = state?.status;
            resourceInputs["url"] = state?.url;
            resourceInputs["urlRegex"] = state?.urlRegex;
            resourceInputs["userNameTemplate"] = state?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = state?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = state?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = state?.userNameTemplateType;
            resourceInputs["usernameField"] = state?.usernameField;
        } else {
            const args = argsOrState as SwaArgs | undefined;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["accessibilityErrorRedirectUrl"] = args?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = args?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = args?.accessibilitySelfService;
            resourceInputs["adminNote"] = args?.adminNote;
            resourceInputs["appLinksJson"] = args?.appLinksJson;
            resourceInputs["autoSubmitToolbar"] = args?.autoSubmitToolbar;
            resourceInputs["buttonField"] = args?.buttonField;
            resourceInputs["checkbox"] = args?.checkbox;
            resourceInputs["enduserNote"] = args?.enduserNote;
            resourceInputs["hideIos"] = args?.hideIos;
            resourceInputs["hideWeb"] = args?.hideWeb;
            resourceInputs["label"] = args?.label;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["passwordField"] = args?.passwordField;
            resourceInputs["preconfiguredApp"] = args?.preconfiguredApp;
            resourceInputs["redirectUrl"] = args?.redirectUrl;
            resourceInputs["status"] = args?.status;
            resourceInputs["url"] = args?.url;
            resourceInputs["urlRegex"] = args?.urlRegex;
            resourceInputs["userNameTemplate"] = args?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = args?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = args?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = args?.userNameTemplateType;
            resourceInputs["usernameField"] = args?.usernameField;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["signOnMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Swa.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Swa resources.
 */
export interface SwaState {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Login button field
     */
    buttonField?: pulumi.Input<string>;
    /**
     * CSS selector for the checkbox
     */
    checkbox?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * The Application's display name.
     */
    label?: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * URL of the application's logo
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * Name of the app.
     */
    name?: pulumi.Input<string>;
    /**
     * Login password field
     */
    passwordField?: pulumi.Input<string>;
    /**
     * Preconfigured app name
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * If going to the login page URL redirects to another page, then enter that URL here
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Sign on mode of application.
     */
    signOnMode?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Login URL
     */
    url?: pulumi.Input<string>;
    /**
     * A regex that further restricts URL to the specified regex
     */
    urlRegex?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
    /**
     * Login username field
     */
    usernameField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Swa resource.
 */
export interface SwaArgs {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Login button field
     */
    buttonField?: pulumi.Input<string>;
    /**
     * CSS selector for the checkbox
     */
    checkbox?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * The Application's display name.
     */
    label: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * Login password field
     */
    passwordField?: pulumi.Input<string>;
    /**
     * Preconfigured app name
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * If going to the login page URL redirects to another page, then enter that URL here
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Login URL
     */
    url?: pulumi.Input<string>;
    /**
     * A regex that further restricts URL to the specified regex
     */
    urlRegex?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
    /**
     * Login username field
     */
    usernameField?: pulumi.Input<string>;
}
