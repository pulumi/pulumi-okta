// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.app.User("example", {
 *     appId: "<app_id>",
 *     userId: "<user id>",
 *     username: "example",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:app/user:User example <app_id>/<user_id>
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * App to associate user with
     */
    declare public readonly appId: pulumi.Output<string>;
    declare public /*out*/ readonly hasSharedUsername: pulumi.Output<boolean>;
    /**
     * The password to use.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The JSON profile of the App User.
     */
    declare public readonly profile: pulumi.Output<string | undefined>;
    /**
     * Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
     */
    declare public readonly retainAssignment: pulumi.Output<boolean | undefined>;
    /**
     * User associated with the application
     */
    declare public readonly userId: pulumi.Output<string>;
    /**
     * The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["hasSharedUsername"] = state?.hasSharedUsername;
            resourceInputs["password"] = state?.password;
            resourceInputs["profile"] = state?.profile;
            resourceInputs["retainAssignment"] = state?.retainAssignment;
            resourceInputs["userId"] = state?.userId;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.appId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["appId"] = args?.appId;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["retainAssignment"] = args?.retainAssignment;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["username"] = args?.username;
            resourceInputs["hasSharedUsername"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * App to associate user with
     */
    appId?: pulumi.Input<string>;
    hasSharedUsername?: pulumi.Input<boolean>;
    /**
     * The password to use.
     */
    password?: pulumi.Input<string>;
    /**
     * The JSON profile of the App User.
     */
    profile?: pulumi.Input<string>;
    /**
     * Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
     */
    retainAssignment?: pulumi.Input<boolean>;
    /**
     * User associated with the application
     */
    userId?: pulumi.Input<string>;
    /**
     * The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * App to associate user with
     */
    appId: pulumi.Input<string>;
    /**
     * The password to use.
     */
    password?: pulumi.Input<string>;
    /**
     * The JSON profile of the App User.
     */
    profile?: pulumi.Input<string>;
    /**
     * Retain the user assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
     */
    retainAssignment?: pulumi.Input<boolean>;
    /**
     * User associated with the application
     */
    userId: pulumi.Input<string>;
    /**
     * The username to use for the app user. In case the user is assigned to the app with `SHARED_USERNAME_AND_PASSWORD` credentials scheme, this field will be computed and should not be set.
     */
    username?: pulumi.Input<string>;
}
