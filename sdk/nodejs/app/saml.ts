// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource allows you to create and configure a SAML Application.
 * > During an apply if there is change in 'status' the app will first be
 * activated or deactivated in accordance with the 'status' change. Then, all
 * other arguments that changed will be applied.
 *
 * > If you receive the error 'You do not have permission to access the feature
 * you are requesting' contact support and
 * request feature flag 'ADVANCED_SSO' be applied to your org.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:app/saml:Saml example <app_id>
 * ```
 */
export class Saml extends pulumi.CustomResource {
    /**
     * Get an existing Saml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlState, opts?: pulumi.CustomResourceOptions): Saml {
        return new Saml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/saml:Saml';

    /**
     * Returns true if the given object is an instance of Saml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Saml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Saml.__pulumiType;
    }

    /**
     * Custom error page URL
     */
    declare public readonly accessibilityErrorRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL
     */
    declare public readonly accessibilityLoginRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Enable self service. Default is `false`
     */
    declare public readonly accessibilitySelfService: pulumi.Output<boolean | undefined>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    declare public readonly acsEndpoints: pulumi.Output<string[] | undefined>;
    /**
     * ACS endpoints along with custom index as a set of maps called `acsEndpointsIndices` in JSON format.
     */
    declare public readonly acsEndpointsIndices: pulumi.Output<outputs.app.SamlAcsEndpointsIndex[] | undefined>;
    /**
     * Application notes for admins.
     */
    declare public readonly adminNote: pulumi.Output<string | undefined>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    declare public readonly appLinksJson: pulumi.Output<string | undefined>;
    /**
     * Application settings in JSON format
     */
    declare public readonly appSettingsJson: pulumi.Output<string | undefined>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    declare public readonly assertionSigned: pulumi.Output<boolean | undefined>;
    declare public readonly attributeStatements: pulumi.Output<outputs.app.SamlAttributeStatement[] | undefined>;
    /**
     * Audience Restriction
     */
    declare public readonly audience: pulumi.Output<string | undefined>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    declare public readonly authenticationPolicy: pulumi.Output<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    declare public readonly authnContextClassRef: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    declare public readonly autoSubmitToolbar: pulumi.Output<boolean | undefined>;
    /**
     * cert from SAML XML metadata payload
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    declare public readonly defaultRelayState: pulumi.Output<string | undefined>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    declare public readonly destination: pulumi.Output<string | undefined>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    declare public readonly digestAlgorithm: pulumi.Output<string | undefined>;
    /**
     * The url that can be used to embed this application in other portals.
     */
    declare public /*out*/ readonly embedUrl: pulumi.Output<string>;
    /**
     * Application notes for end users.
     */
    declare public readonly enduserNote: pulumi.Output<string | undefined>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    declare public /*out*/ readonly entityKey: pulumi.Output<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    declare public /*out*/ readonly entityUrl: pulumi.Output<string>;
    /**
     * features to enable
     */
    declare public /*out*/ readonly features: pulumi.Output<string[]>;
    /**
     * Do not display application icon on mobile app
     */
    declare public readonly hideIos: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    declare public readonly hideWeb: pulumi.Output<boolean | undefined>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    declare public readonly honorForceAuthn: pulumi.Output<boolean | undefined>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    declare public /*out*/ readonly httpPostBinding: pulumi.Output<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    declare public /*out*/ readonly httpRedirectBinding: pulumi.Output<string>;
    /**
     * SAML issuer ID
     */
    declare public readonly idpIssuer: pulumi.Output<string | undefined>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    declare public readonly implicitAssignment: pulumi.Output<boolean | undefined>;
    /**
     * Saml Inline Hook setting
     */
    declare public readonly inlineHookId: pulumi.Output<string | undefined>;
    /**
     * Certificate ID
     */
    declare public /*out*/ readonly keyId: pulumi.Output<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    declare public readonly keyName: pulumi.Output<string | undefined>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    declare public readonly keyYearsValid: pulumi.Output<number | undefined>;
    /**
     * Application keys
     */
    declare public /*out*/ readonly keys: pulumi.Output<outputs.app.SamlKey[]>;
    /**
     * The Application's display name.
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * URL of the application's logo
     */
    declare public /*out*/ readonly logoUrl: pulumi.Output<string>;
    /**
     * SAML xml metadata payload
     */
    declare public /*out*/ readonly metadata: pulumi.Output<string>;
    /**
     * SAML xml metadata URL
     */
    declare public /*out*/ readonly metadataUrl: pulumi.Output<string>;
    /**
     * Name of the app.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    declare public readonly preconfiguredApp: pulumi.Output<string | undefined>;
    /**
     * The location where the app may present the SAML assertion
     */
    declare public readonly recipient: pulumi.Output<string | undefined>;
    /**
     * Denotes whether the request is compressed or not.
     */
    declare public readonly requestCompressed: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    declare public readonly responseSigned: pulumi.Output<boolean | undefined>;
    /**
     * SAML Signed Request enabled
     */
    declare public readonly samlSignedRequestEnabled: pulumi.Output<boolean | undefined>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    declare public readonly samlVersion: pulumi.Output<string | undefined>;
    /**
     * Sign on mode of application.
     */
    declare public /*out*/ readonly signOnMode: pulumi.Output<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    declare public readonly signatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    declare public readonly singleLogoutCertificate: pulumi.Output<string | undefined>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    declare public readonly singleLogoutIssuer: pulumi.Output<string | undefined>;
    /**
     * The location where the logout response is sent
     */
    declare public readonly singleLogoutUrl: pulumi.Output<string | undefined>;
    /**
     * SAML SP issuer ID
     */
    declare public readonly spIssuer: pulumi.Output<string | undefined>;
    /**
     * Single Sign On URL
     */
    declare public readonly ssoUrl: pulumi.Output<string | undefined>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML processing rules.
     */
    declare public readonly subjectNameIdFormat: pulumi.Output<string | undefined>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    declare public readonly subjectNameIdTemplate: pulumi.Output<string | undefined>;
    /**
     * Username template. Default: `${source.login}`
     */
    declare public readonly userNameTemplate: pulumi.Output<string | undefined>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    declare public readonly userNameTemplatePushStatus: pulumi.Output<string | undefined>;
    /**
     * Username template suffix
     */
    declare public readonly userNameTemplateSuffix: pulumi.Output<string | undefined>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    declare public readonly userNameTemplateType: pulumi.Output<string | undefined>;

    /**
     * Create a Saml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlArgs | SamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlState | undefined;
            resourceInputs["accessibilityErrorRedirectUrl"] = state?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = state?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = state?.accessibilitySelfService;
            resourceInputs["acsEndpoints"] = state?.acsEndpoints;
            resourceInputs["acsEndpointsIndices"] = state?.acsEndpointsIndices;
            resourceInputs["adminNote"] = state?.adminNote;
            resourceInputs["appLinksJson"] = state?.appLinksJson;
            resourceInputs["appSettingsJson"] = state?.appSettingsJson;
            resourceInputs["assertionSigned"] = state?.assertionSigned;
            resourceInputs["attributeStatements"] = state?.attributeStatements;
            resourceInputs["audience"] = state?.audience;
            resourceInputs["authenticationPolicy"] = state?.authenticationPolicy;
            resourceInputs["authnContextClassRef"] = state?.authnContextClassRef;
            resourceInputs["autoSubmitToolbar"] = state?.autoSubmitToolbar;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["defaultRelayState"] = state?.defaultRelayState;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["digestAlgorithm"] = state?.digestAlgorithm;
            resourceInputs["embedUrl"] = state?.embedUrl;
            resourceInputs["enduserNote"] = state?.enduserNote;
            resourceInputs["entityKey"] = state?.entityKey;
            resourceInputs["entityUrl"] = state?.entityUrl;
            resourceInputs["features"] = state?.features;
            resourceInputs["hideIos"] = state?.hideIos;
            resourceInputs["hideWeb"] = state?.hideWeb;
            resourceInputs["honorForceAuthn"] = state?.honorForceAuthn;
            resourceInputs["httpPostBinding"] = state?.httpPostBinding;
            resourceInputs["httpRedirectBinding"] = state?.httpRedirectBinding;
            resourceInputs["idpIssuer"] = state?.idpIssuer;
            resourceInputs["implicitAssignment"] = state?.implicitAssignment;
            resourceInputs["inlineHookId"] = state?.inlineHookId;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["keyYearsValid"] = state?.keyYearsValid;
            resourceInputs["keys"] = state?.keys;
            resourceInputs["label"] = state?.label;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["logoUrl"] = state?.logoUrl;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["metadataUrl"] = state?.metadataUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["preconfiguredApp"] = state?.preconfiguredApp;
            resourceInputs["recipient"] = state?.recipient;
            resourceInputs["requestCompressed"] = state?.requestCompressed;
            resourceInputs["responseSigned"] = state?.responseSigned;
            resourceInputs["samlSignedRequestEnabled"] = state?.samlSignedRequestEnabled;
            resourceInputs["samlVersion"] = state?.samlVersion;
            resourceInputs["signOnMode"] = state?.signOnMode;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["singleLogoutCertificate"] = state?.singleLogoutCertificate;
            resourceInputs["singleLogoutIssuer"] = state?.singleLogoutIssuer;
            resourceInputs["singleLogoutUrl"] = state?.singleLogoutUrl;
            resourceInputs["spIssuer"] = state?.spIssuer;
            resourceInputs["ssoUrl"] = state?.ssoUrl;
            resourceInputs["status"] = state?.status;
            resourceInputs["subjectNameIdFormat"] = state?.subjectNameIdFormat;
            resourceInputs["subjectNameIdTemplate"] = state?.subjectNameIdTemplate;
            resourceInputs["userNameTemplate"] = state?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = state?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = state?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = state?.userNameTemplateType;
        } else {
            const args = argsOrState as SamlArgs | undefined;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["accessibilityErrorRedirectUrl"] = args?.accessibilityErrorRedirectUrl;
            resourceInputs["accessibilityLoginRedirectUrl"] = args?.accessibilityLoginRedirectUrl;
            resourceInputs["accessibilitySelfService"] = args?.accessibilitySelfService;
            resourceInputs["acsEndpoints"] = args?.acsEndpoints;
            resourceInputs["acsEndpointsIndices"] = args?.acsEndpointsIndices;
            resourceInputs["adminNote"] = args?.adminNote;
            resourceInputs["appLinksJson"] = args?.appLinksJson;
            resourceInputs["appSettingsJson"] = args?.appSettingsJson;
            resourceInputs["assertionSigned"] = args?.assertionSigned;
            resourceInputs["attributeStatements"] = args?.attributeStatements;
            resourceInputs["audience"] = args?.audience;
            resourceInputs["authenticationPolicy"] = args?.authenticationPolicy;
            resourceInputs["authnContextClassRef"] = args?.authnContextClassRef;
            resourceInputs["autoSubmitToolbar"] = args?.autoSubmitToolbar;
            resourceInputs["defaultRelayState"] = args?.defaultRelayState;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["digestAlgorithm"] = args?.digestAlgorithm;
            resourceInputs["enduserNote"] = args?.enduserNote;
            resourceInputs["hideIos"] = args?.hideIos;
            resourceInputs["hideWeb"] = args?.hideWeb;
            resourceInputs["honorForceAuthn"] = args?.honorForceAuthn;
            resourceInputs["idpIssuer"] = args?.idpIssuer;
            resourceInputs["implicitAssignment"] = args?.implicitAssignment;
            resourceInputs["inlineHookId"] = args?.inlineHookId;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["keyYearsValid"] = args?.keyYearsValid;
            resourceInputs["label"] = args?.label;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["preconfiguredApp"] = args?.preconfiguredApp;
            resourceInputs["recipient"] = args?.recipient;
            resourceInputs["requestCompressed"] = args?.requestCompressed;
            resourceInputs["responseSigned"] = args?.responseSigned;
            resourceInputs["samlSignedRequestEnabled"] = args?.samlSignedRequestEnabled;
            resourceInputs["samlVersion"] = args?.samlVersion;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["singleLogoutCertificate"] = args?.singleLogoutCertificate;
            resourceInputs["singleLogoutIssuer"] = args?.singleLogoutIssuer;
            resourceInputs["singleLogoutUrl"] = args?.singleLogoutUrl;
            resourceInputs["spIssuer"] = args?.spIssuer;
            resourceInputs["ssoUrl"] = args?.ssoUrl;
            resourceInputs["status"] = args?.status;
            resourceInputs["subjectNameIdFormat"] = args?.subjectNameIdFormat;
            resourceInputs["subjectNameIdTemplate"] = args?.subjectNameIdTemplate;
            resourceInputs["userNameTemplate"] = args?.userNameTemplate;
            resourceInputs["userNameTemplatePushStatus"] = args?.userNameTemplatePushStatus;
            resourceInputs["userNameTemplateSuffix"] = args?.userNameTemplateSuffix;
            resourceInputs["userNameTemplateType"] = args?.userNameTemplateType;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["embedUrl"] = undefined /*out*/;
            resourceInputs["entityKey"] = undefined /*out*/;
            resourceInputs["entityUrl"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["httpPostBinding"] = undefined /*out*/;
            resourceInputs["httpRedirectBinding"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["metadataUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["signOnMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Saml.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Saml resources.
 */
export interface SamlState {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ACS endpoints along with custom index as a set of maps called `acsEndpointsIndices` in JSON format.
     */
    acsEndpointsIndices?: pulumi.Input<pulumi.Input<inputs.app.SamlAcsEndpointsIndex>[]>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Application settings in JSON format
     */
    appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    assertionSigned?: pulumi.Input<boolean>;
    attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    audience?: pulumi.Input<string>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    authenticationPolicy?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * cert from SAML XML metadata payload
     */
    certificate?: pulumi.Input<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * The url that can be used to embed this application in other portals.
     */
    embedUrl?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    entityKey?: pulumi.Input<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    entityUrl?: pulumi.Input<string>;
    /**
     * features to enable
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    httpPostBinding?: pulumi.Input<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    httpRedirectBinding?: pulumi.Input<string>;
    /**
     * SAML issuer ID
     */
    idpIssuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    implicitAssignment?: pulumi.Input<boolean>;
    /**
     * Saml Inline Hook setting
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate ID
     */
    keyId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    keyYearsValid?: pulumi.Input<number>;
    /**
     * Application keys
     */
    keys?: pulumi.Input<pulumi.Input<inputs.app.SamlKey>[]>;
    /**
     * The Application's display name.
     */
    label?: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * URL of the application's logo
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * SAML xml metadata payload
     */
    metadata?: pulumi.Input<string>;
    /**
     * SAML xml metadata URL
     */
    metadataUrl?: pulumi.Input<string>;
    /**
     * Name of the app.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    responseSigned?: pulumi.Input<boolean>;
    /**
     * SAML Signed Request enabled
     */
    samlSignedRequestEnabled?: pulumi.Input<boolean>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    samlVersion?: pulumi.Input<string>;
    /**
     * Sign on mode of application.
     */
    signOnMode?: pulumi.Input<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Saml resource.
 */
export interface SamlArgs {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ACS endpoints along with custom index as a set of maps called `acsEndpointsIndices` in JSON format.
     */
    acsEndpointsIndices?: pulumi.Input<pulumi.Input<inputs.app.SamlAcsEndpointsIndex>[]>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Application settings in JSON format
     */
    appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    assertionSigned?: pulumi.Input<boolean>;
    attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    audience?: pulumi.Input<string>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    authenticationPolicy?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * SAML issuer ID
     */
    idpIssuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    implicitAssignment?: pulumi.Input<boolean>;
    /**
     * Saml Inline Hook setting
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    keyYearsValid?: pulumi.Input<number>;
    /**
     * The Application's display name.
     */
    label: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    responseSigned?: pulumi.Input<boolean>;
    /**
     * SAML Signed Request enabled
     */
    samlSignedRequestEnabled?: pulumi.Input<boolean>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    samlVersion?: pulumi.Input<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
}
