// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource allows you to create and configure a SAML Application.
 * > During an apply if there is change in 'status' the app will first be
 * activated or deactivated in accordance with the 'status' change. Then, all
 * other arguments that changed will be applied.
 *
 * > If you receive the error 'You do not have permission to access the feature
 * you are requesting' contact support and
 * request feature flag 'ADVANCED_SSO' be applied to your org.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:app/saml:Saml example <app_id>
 * ```
 */
export class Saml extends pulumi.CustomResource {
    /**
     * Get an existing Saml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlState, opts?: pulumi.CustomResourceOptions): Saml {
        return new Saml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/saml:Saml';

    /**
     * Returns true if the given object is an instance of Saml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Saml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Saml.__pulumiType;
    }

    /**
     * Custom error page URL
     */
    public readonly accessibilityErrorRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL
     */
    public readonly accessibilityLoginRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Enable self service. Default is `false`
     */
    public readonly accessibilitySelfService!: pulumi.Output<boolean | undefined>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    public readonly acsEndpoints!: pulumi.Output<string[] | undefined>;
    /**
     * Application notes for admins.
     */
    public readonly adminNote!: pulumi.Output<string | undefined>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    public readonly appLinksJson!: pulumi.Output<string | undefined>;
    /**
     * Application settings in JSON format
     */
    public readonly appSettingsJson!: pulumi.Output<string | undefined>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    public readonly assertionSigned!: pulumi.Output<boolean | undefined>;
    public readonly attributeStatements!: pulumi.Output<outputs.app.SamlAttributeStatement[] | undefined>;
    /**
     * Audience Restriction
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    public readonly authenticationPolicy!: pulumi.Output<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    public readonly authnContextClassRef!: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    public readonly autoSubmitToolbar!: pulumi.Output<boolean | undefined>;
    /**
     * cert from SAML XML metadata payload
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    public readonly defaultRelayState!: pulumi.Output<string | undefined>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    public readonly digestAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The url that can be used to embed this application in other portals.
     */
    public /*out*/ readonly embedUrl!: pulumi.Output<string>;
    /**
     * Application notes for end users.
     */
    public readonly enduserNote!: pulumi.Output<string | undefined>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    public /*out*/ readonly entityKey!: pulumi.Output<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    public /*out*/ readonly entityUrl!: pulumi.Output<string>;
    /**
     * features to enable
     */
    public /*out*/ readonly features!: pulumi.Output<string[]>;
    /**
     * Do not display application icon on mobile app
     */
    public readonly hideIos!: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    public readonly hideWeb!: pulumi.Output<boolean | undefined>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    public readonly honorForceAuthn!: pulumi.Output<boolean | undefined>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    public /*out*/ readonly httpPostBinding!: pulumi.Output<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    public /*out*/ readonly httpRedirectBinding!: pulumi.Output<string>;
    /**
     * SAML issuer ID
     */
    public readonly idpIssuer!: pulumi.Output<string | undefined>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    public readonly implicitAssignment!: pulumi.Output<boolean | undefined>;
    /**
     * Saml Inline Hook setting
     */
    public readonly inlineHookId!: pulumi.Output<string | undefined>;
    /**
     * Certificate ID
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    public readonly keyYearsValid!: pulumi.Output<number | undefined>;
    /**
     * Application keys
     */
    public /*out*/ readonly keys!: pulumi.Output<outputs.app.SamlKey[]>;
    /**
     * The Application's display name.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    public readonly logo!: pulumi.Output<string | undefined>;
    /**
     * URL of the application's logo
     */
    public /*out*/ readonly logoUrl!: pulumi.Output<string>;
    /**
     * SAML xml metadata payload
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * SAML xml metadata URL
     */
    public /*out*/ readonly metadataUrl!: pulumi.Output<string>;
    /**
     * Name of the app.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    public readonly preconfiguredApp!: pulumi.Output<string | undefined>;
    /**
     * The location where the app may present the SAML assertion
     */
    public readonly recipient!: pulumi.Output<string | undefined>;
    /**
     * Denotes whether the request is compressed or not.
     */
    public readonly requestCompressed!: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    public readonly responseSigned!: pulumi.Output<boolean | undefined>;
    /**
     * SAML Signed Request enabled
     */
    public readonly samlSignedRequestEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    public readonly samlVersion!: pulumi.Output<string | undefined>;
    /**
     * Sign on mode of application.
     */
    public /*out*/ readonly signOnMode!: pulumi.Output<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    public readonly singleLogoutCertificate!: pulumi.Output<string | undefined>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    public readonly singleLogoutIssuer!: pulumi.Output<string | undefined>;
    /**
     * The location where the logout response is sent
     */
    public readonly singleLogoutUrl!: pulumi.Output<string | undefined>;
    /**
     * SAML SP issuer ID
     */
    public readonly spIssuer!: pulumi.Output<string | undefined>;
    /**
     * Single Sign On URL
     */
    public readonly ssoUrl!: pulumi.Output<string | undefined>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML processing rules.
     */
    public readonly subjectNameIdFormat!: pulumi.Output<string | undefined>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    public readonly subjectNameIdTemplate!: pulumi.Output<string | undefined>;
    /**
     * Username template. Default: `${source.login}`
     */
    public readonly userNameTemplate!: pulumi.Output<string | undefined>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    public readonly userNameTemplatePushStatus!: pulumi.Output<string | undefined>;
    /**
     * Username template suffix
     */
    public readonly userNameTemplateSuffix!: pulumi.Output<string | undefined>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    public readonly userNameTemplateType!: pulumi.Output<string | undefined>;

    /**
     * Create a Saml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlArgs | SamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlState | undefined;
            resourceInputs["accessibilityErrorRedirectUrl"] = state ? state.accessibilityErrorRedirectUrl : undefined;
            resourceInputs["accessibilityLoginRedirectUrl"] = state ? state.accessibilityLoginRedirectUrl : undefined;
            resourceInputs["accessibilitySelfService"] = state ? state.accessibilitySelfService : undefined;
            resourceInputs["acsEndpoints"] = state ? state.acsEndpoints : undefined;
            resourceInputs["adminNote"] = state ? state.adminNote : undefined;
            resourceInputs["appLinksJson"] = state ? state.appLinksJson : undefined;
            resourceInputs["appSettingsJson"] = state ? state.appSettingsJson : undefined;
            resourceInputs["assertionSigned"] = state ? state.assertionSigned : undefined;
            resourceInputs["attributeStatements"] = state ? state.attributeStatements : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["authenticationPolicy"] = state ? state.authenticationPolicy : undefined;
            resourceInputs["authnContextClassRef"] = state ? state.authnContextClassRef : undefined;
            resourceInputs["autoSubmitToolbar"] = state ? state.autoSubmitToolbar : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["defaultRelayState"] = state ? state.defaultRelayState : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            resourceInputs["embedUrl"] = state ? state.embedUrl : undefined;
            resourceInputs["enduserNote"] = state ? state.enduserNote : undefined;
            resourceInputs["entityKey"] = state ? state.entityKey : undefined;
            resourceInputs["entityUrl"] = state ? state.entityUrl : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["hideIos"] = state ? state.hideIos : undefined;
            resourceInputs["hideWeb"] = state ? state.hideWeb : undefined;
            resourceInputs["honorForceAuthn"] = state ? state.honorForceAuthn : undefined;
            resourceInputs["httpPostBinding"] = state ? state.httpPostBinding : undefined;
            resourceInputs["httpRedirectBinding"] = state ? state.httpRedirectBinding : undefined;
            resourceInputs["idpIssuer"] = state ? state.idpIssuer : undefined;
            resourceInputs["implicitAssignment"] = state ? state.implicitAssignment : undefined;
            resourceInputs["inlineHookId"] = state ? state.inlineHookId : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyYearsValid"] = state ? state.keyYearsValid : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["logo"] = state ? state.logo : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataUrl"] = state ? state.metadataUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preconfiguredApp"] = state ? state.preconfiguredApp : undefined;
            resourceInputs["recipient"] = state ? state.recipient : undefined;
            resourceInputs["requestCompressed"] = state ? state.requestCompressed : undefined;
            resourceInputs["responseSigned"] = state ? state.responseSigned : undefined;
            resourceInputs["samlSignedRequestEnabled"] = state ? state.samlSignedRequestEnabled : undefined;
            resourceInputs["samlVersion"] = state ? state.samlVersion : undefined;
            resourceInputs["signOnMode"] = state ? state.signOnMode : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["singleLogoutCertificate"] = state ? state.singleLogoutCertificate : undefined;
            resourceInputs["singleLogoutIssuer"] = state ? state.singleLogoutIssuer : undefined;
            resourceInputs["singleLogoutUrl"] = state ? state.singleLogoutUrl : undefined;
            resourceInputs["spIssuer"] = state ? state.spIssuer : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectNameIdFormat"] = state ? state.subjectNameIdFormat : undefined;
            resourceInputs["subjectNameIdTemplate"] = state ? state.subjectNameIdTemplate : undefined;
            resourceInputs["userNameTemplate"] = state ? state.userNameTemplate : undefined;
            resourceInputs["userNameTemplatePushStatus"] = state ? state.userNameTemplatePushStatus : undefined;
            resourceInputs["userNameTemplateSuffix"] = state ? state.userNameTemplateSuffix : undefined;
            resourceInputs["userNameTemplateType"] = state ? state.userNameTemplateType : undefined;
        } else {
            const args = argsOrState as SamlArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["accessibilityErrorRedirectUrl"] = args ? args.accessibilityErrorRedirectUrl : undefined;
            resourceInputs["accessibilityLoginRedirectUrl"] = args ? args.accessibilityLoginRedirectUrl : undefined;
            resourceInputs["accessibilitySelfService"] = args ? args.accessibilitySelfService : undefined;
            resourceInputs["acsEndpoints"] = args ? args.acsEndpoints : undefined;
            resourceInputs["adminNote"] = args ? args.adminNote : undefined;
            resourceInputs["appLinksJson"] = args ? args.appLinksJson : undefined;
            resourceInputs["appSettingsJson"] = args ? args.appSettingsJson : undefined;
            resourceInputs["assertionSigned"] = args ? args.assertionSigned : undefined;
            resourceInputs["attributeStatements"] = args ? args.attributeStatements : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["authenticationPolicy"] = args ? args.authenticationPolicy : undefined;
            resourceInputs["authnContextClassRef"] = args ? args.authnContextClassRef : undefined;
            resourceInputs["autoSubmitToolbar"] = args ? args.autoSubmitToolbar : undefined;
            resourceInputs["defaultRelayState"] = args ? args.defaultRelayState : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["digestAlgorithm"] = args ? args.digestAlgorithm : undefined;
            resourceInputs["enduserNote"] = args ? args.enduserNote : undefined;
            resourceInputs["hideIos"] = args ? args.hideIos : undefined;
            resourceInputs["hideWeb"] = args ? args.hideWeb : undefined;
            resourceInputs["honorForceAuthn"] = args ? args.honorForceAuthn : undefined;
            resourceInputs["idpIssuer"] = args ? args.idpIssuer : undefined;
            resourceInputs["implicitAssignment"] = args ? args.implicitAssignment : undefined;
            resourceInputs["inlineHookId"] = args ? args.inlineHookId : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyYearsValid"] = args ? args.keyYearsValid : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["logo"] = args ? args.logo : undefined;
            resourceInputs["preconfiguredApp"] = args ? args.preconfiguredApp : undefined;
            resourceInputs["recipient"] = args ? args.recipient : undefined;
            resourceInputs["requestCompressed"] = args ? args.requestCompressed : undefined;
            resourceInputs["responseSigned"] = args ? args.responseSigned : undefined;
            resourceInputs["samlSignedRequestEnabled"] = args ? args.samlSignedRequestEnabled : undefined;
            resourceInputs["samlVersion"] = args ? args.samlVersion : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["singleLogoutCertificate"] = args ? args.singleLogoutCertificate : undefined;
            resourceInputs["singleLogoutIssuer"] = args ? args.singleLogoutIssuer : undefined;
            resourceInputs["singleLogoutUrl"] = args ? args.singleLogoutUrl : undefined;
            resourceInputs["spIssuer"] = args ? args.spIssuer : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subjectNameIdFormat"] = args ? args.subjectNameIdFormat : undefined;
            resourceInputs["subjectNameIdTemplate"] = args ? args.subjectNameIdTemplate : undefined;
            resourceInputs["userNameTemplate"] = args ? args.userNameTemplate : undefined;
            resourceInputs["userNameTemplatePushStatus"] = args ? args.userNameTemplatePushStatus : undefined;
            resourceInputs["userNameTemplateSuffix"] = args ? args.userNameTemplateSuffix : undefined;
            resourceInputs["userNameTemplateType"] = args ? args.userNameTemplateType : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["embedUrl"] = undefined /*out*/;
            resourceInputs["entityKey"] = undefined /*out*/;
            resourceInputs["entityUrl"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["httpPostBinding"] = undefined /*out*/;
            resourceInputs["httpRedirectBinding"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["metadataUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["signOnMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Saml.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Saml resources.
 */
export interface SamlState {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Application settings in JSON format
     */
    appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    assertionSigned?: pulumi.Input<boolean>;
    attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    audience?: pulumi.Input<string>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    authenticationPolicy?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * cert from SAML XML metadata payload
     */
    certificate?: pulumi.Input<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * The url that can be used to embed this application in other portals.
     */
    embedUrl?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Entity ID, the ID portion of the entity_url
     */
    entityKey?: pulumi.Input<string>;
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     */
    entityUrl?: pulumi.Input<string>;
    /**
     * features to enable
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     */
    httpPostBinding?: pulumi.Input<string>;
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     */
    httpRedirectBinding?: pulumi.Input<string>;
    /**
     * SAML issuer ID
     */
    idpIssuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    implicitAssignment?: pulumi.Input<boolean>;
    /**
     * Saml Inline Hook setting
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate ID
     */
    keyId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    keyYearsValid?: pulumi.Input<number>;
    /**
     * Application keys
     */
    keys?: pulumi.Input<pulumi.Input<inputs.app.SamlKey>[]>;
    /**
     * The Application's display name.
     */
    label?: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * URL of the application's logo
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * SAML xml metadata payload
     */
    metadata?: pulumi.Input<string>;
    /**
     * SAML xml metadata URL
     */
    metadataUrl?: pulumi.Input<string>;
    /**
     * Name of the app.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    responseSigned?: pulumi.Input<boolean>;
    /**
     * SAML Signed Request enabled
     */
    samlSignedRequestEnabled?: pulumi.Input<boolean>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    samlVersion?: pulumi.Input<string>;
    /**
     * Sign on mode of application.
     */
    signOnMode?: pulumi.Input<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Saml resource.
 */
export interface SamlArgs {
    /**
     * Custom error page URL
     */
    accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL
     */
    accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self service. Default is `false`
     */
    accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application notes for admins.
     */
    adminNote?: pulumi.Input<string>;
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     */
    appLinksJson?: pulumi.Input<string>;
    /**
     * Application settings in JSON format
     */
    appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed
     */
    assertionSigned?: pulumi.Input<boolean>;
    attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience Restriction
     */
    audience?: pulumi.Input<string>;
    /**
     * The ID of the associated `appSignonPolicy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     */
    authenticationPolicy?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement
     */
    authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar. Default is: `false`
     */
    autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     */
    destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * Application notes for end users.
     */
    enduserNote?: pulumi.Input<string>;
    /**
     * Do not display application icon on mobile app
     */
    hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     */
    honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * SAML issuer ID
     */
    idpIssuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     */
    implicitAssignment?: pulumi.Input<boolean>;
    /**
     * Saml Inline Hook setting
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`
     */
    keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    keyYearsValid?: pulumi.Input<number>;
    /**
     * The Application's display name.
     */
    label: pulumi.Input<string>;
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    logo?: pulumi.Input<string>;
    /**
     * Name of application from the Okta Integration Network. For instance 'slack'. If not included a custom app will be created.  If not provided the following arguments are required:
     * 'sso*url'
     * 'recipient'
     * 'destination'
     * 'audience'
     * 'subject*name*id*template'
     * 'subject*name*id*format'
     * 'signature*algorithm'
     * 'digest*algorithm'
     * 'authn*context*class*ref'
     */
    preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion
     */
    recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed
     */
    responseSigned?: pulumi.Input<boolean>;
    /**
     * SAML Signed Request enabled
     */
    samlSignedRequestEnabled?: pulumi.Input<boolean>;
    /**
     * SAML version for the app's sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     */
    samlVersion?: pulumi.Input<string>;
    /**
     * Signature algorithm used to digitally sign the assertion and response
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     */
    singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent
     */
    singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML SP issuer ID
     */
    spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign On URL
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * Status of application. By default, it is `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app
     */
    subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template. Default: `${source.login}`
     */
    userNameTemplate?: pulumi.Input<string>;
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     */
    userNameTemplatePushStatus?: pulumi.Input<string>;
    /**
     * Username template suffix
     */
    userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type. Default: `BUILT_IN`
     */
    userNameTemplateType?: pulumi.Input<string>;
}
