// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Creates an SAML Application.
 *
 * This resource allows you to create and configure an SAML Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.app.Saml("example", {
 *     attributeStatements: [{
 *         filterType: "REGEX",
 *         filterValue: ".*",
 *         name: "groups",
 *         type: "GROUP",
 *     }],
 *     audience: "http://example.com/audience",
 *     authnContextClassRef: "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
 *     destination: "http://example.com",
 *     digestAlgorithm: "SHA256",
 *     honorForceAuthn: false,
 *     label: "example",
 *     recipient: "http://example.com",
 *     responseSigned: true,
 *     signatureAlgorithm: "RSA_SHA256",
 *     ssoUrl: "http://example.com",
 *     subjectNameIdFormat: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
 *     subjectNameIdTemplate: "${user.userName}",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const testHook = new okta.inline.Hook("testHook", {
 *     status: "ACTIVE",
 *     type: "com.okta.saml.tokens.transform",
 *     version: "1.0.2",
 *     channel: {
 *         type: "HTTP",
 *         version: "1.0.0",
 *         uri: "https://example.com/test1",
 *         method: "POST",
 *     },
 *     auth: {
 *         key: "Authorization",
 *         type: "HEADER",
 *         value: "secret",
 *     },
 * });
 * const testSaml = new okta.app.Saml("testSaml", {
 *     label: "testAcc_replace_with_uuid",
 *     ssoUrl: "http://google.com",
 *     recipient: "http://here.com",
 *     destination: "http://its-about-the-journey.com",
 *     audience: "http://audience.com",
 *     subjectNameIdTemplate: user.userName,
 *     subjectNameIdFormat: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
 *     responseSigned: true,
 *     signatureAlgorithm: "RSA_SHA256",
 *     digestAlgorithm: "SHA256",
 *     honorForceAuthn: false,
 *     authnContextClassRef: "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
 *     inlineHookId: testHook.id,
 *     attributeStatements: [{
 *         type: "GROUP",
 *         name: "groups",
 *         filterType: "REGEX",
 *         filterValue: ".*",
 *     }],
 * }, {
 *     dependsOn: [testHook],
 * });
 * ```
 *
 * ## Import
 *
 * A SAML App can be imported via the Okta ID.
 *
 * ```sh
 *  $ pulumi import okta:app/saml:Saml example <app id>
 * ```
 */
export class Saml extends pulumi.CustomResource {
    /**
     * Get an existing Saml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlState, opts?: pulumi.CustomResourceOptions): Saml {
        return new Saml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/saml:Saml';

    /**
     * Returns true if the given object is an instance of Saml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Saml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Saml.__pulumiType;
    }

    /**
     * Custom error page URL.
     */
    public readonly accessibilityErrorRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Custom login page URL.
     */
    public readonly accessibilityLoginRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Enable self-service.
     */
    public readonly accessibilitySelfService!: pulumi.Output<boolean | undefined>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    public readonly acsEndpoints!: pulumi.Output<string[] | undefined>;
    /**
     * Application settings in JSON format.
     */
    public readonly appSettingsJson!: pulumi.Output<string | undefined>;
    /**
     * Determines whether the SAML assertion is digitally signed.
     */
    public readonly assertionSigned!: pulumi.Output<boolean | undefined>;
    /**
     * List of SAML Attribute statements.
     */
    public readonly attributeStatements!: pulumi.Output<outputs.app.SamlAttributeStatement[] | undefined>;
    /**
     * Audience restriction.
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
     */
    public readonly authnContextClassRef!: pulumi.Output<string | undefined>;
    /**
     * Display auto submit toolbar.
     */
    public readonly autoSubmitToolbar!: pulumi.Output<boolean | undefined>;
    /**
     * The raw signing certificate.
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    public readonly defaultRelayState!: pulumi.Output<string | undefined>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response.
     */
    public readonly digestAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Entity ID, the ID portion of the `entityUrl`.
     */
    public /*out*/ readonly entityKey!: pulumi.Output<string>;
    /**
     * Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
     */
    public /*out*/ readonly entityUrl!: pulumi.Output<string>;
    /**
     * features enabled. Notice: you can't currently configure provisioning features via the API.
     */
    public readonly features!: pulumi.Output<string[] | undefined>;
    /**
     * Groups associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
     *
     * @deprecated The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Do not display application icon on mobile app.
     */
    public readonly hideIos!: pulumi.Output<boolean | undefined>;
    /**
     * Do not display application icon to users
     */
    public readonly hideWeb!: pulumi.Output<boolean | undefined>;
    /**
     * Prompt user to re-authenticate if SP asks for it.
     */
    public readonly honorForceAuthn!: pulumi.Output<boolean | undefined>;
    /**
     * `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
     */
    public /*out*/ readonly httpPostBinding!: pulumi.Output<string>;
    /**
     * `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
     */
    public /*out*/ readonly httpRedirectBinding!: pulumi.Output<string>;
    /**
     * SAML issuer ID.
     */
    public readonly idpIssuer!: pulumi.Output<string | undefined>;
    /**
     * Saml Inline Hook associated with the application.
     */
    public readonly inlineHookId!: pulumi.Output<string | undefined>;
    /**
     * Certificate key ID.
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    public readonly keyYearsValid!: pulumi.Output<number | undefined>;
    /**
     * label of application.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Application logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    public readonly logo!: pulumi.Output<string | undefined>;
    /**
     * Direct link of application logo.
     */
    public /*out*/ readonly logoUrl!: pulumi.Output<string>;
    /**
     * The raw SAML metadata in XML.
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * SAML xml metadata URL.
     */
    public /*out*/ readonly metadataUrl!: pulumi.Output<string>;
    /**
     * The name of the attribute statement.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * name of application from the Okta Integration Network, if not included a custom app will be created.
     */
    public readonly preconfiguredApp!: pulumi.Output<string | undefined>;
    /**
     * The location where the app may present the SAML assertion.
     */
    public readonly recipient!: pulumi.Output<string | undefined>;
    /**
     * Denotes whether the request is compressed or not.
     */
    public readonly requestCompressed!: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether the SAML auth response message is digitally signed.
     */
    public readonly responseSigned!: pulumi.Output<boolean | undefined>;
    /**
     * Sign-on mode of application.
     */
    public /*out*/ readonly signOnMode!: pulumi.Output<string>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response.
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    public readonly singleLogoutCertificate!: pulumi.Output<string | undefined>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request.
     */
    public readonly singleLogoutIssuer!: pulumi.Output<string | undefined>;
    /**
     * The location where the logout response is sent.
     */
    public readonly singleLogoutUrl!: pulumi.Output<string | undefined>;
    /**
     * SAML service provider issuer.
     */
    public readonly spIssuer!: pulumi.Output<string | undefined>;
    /**
     * Single Sign-on Url.
     */
    public readonly ssoUrl!: pulumi.Output<string | undefined>;
    /**
     * status of application.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Identifies the SAML processing rules.
     */
    public readonly subjectNameIdFormat!: pulumi.Output<string | undefined>;
    /**
     * Template for app user's username when a user is assigned to the app.
     */
    public readonly subjectNameIdTemplate!: pulumi.Output<string | undefined>;
    /**
     * Username template.
     */
    public readonly userNameTemplate!: pulumi.Output<string | undefined>;
    /**
     * Username template suffix.
     */
    public readonly userNameTemplateSuffix!: pulumi.Output<string | undefined>;
    /**
     * Username template type.
     */
    public readonly userNameTemplateType!: pulumi.Output<string | undefined>;
    /**
     * Users associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
     *
     * @deprecated The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     */
    public readonly users!: pulumi.Output<outputs.app.SamlUser[] | undefined>;

    /**
     * Create a Saml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlArgs | SamlState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlState | undefined;
            inputs["accessibilityErrorRedirectUrl"] = state ? state.accessibilityErrorRedirectUrl : undefined;
            inputs["accessibilityLoginRedirectUrl"] = state ? state.accessibilityLoginRedirectUrl : undefined;
            inputs["accessibilitySelfService"] = state ? state.accessibilitySelfService : undefined;
            inputs["acsEndpoints"] = state ? state.acsEndpoints : undefined;
            inputs["appSettingsJson"] = state ? state.appSettingsJson : undefined;
            inputs["assertionSigned"] = state ? state.assertionSigned : undefined;
            inputs["attributeStatements"] = state ? state.attributeStatements : undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["authnContextClassRef"] = state ? state.authnContextClassRef : undefined;
            inputs["autoSubmitToolbar"] = state ? state.autoSubmitToolbar : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["defaultRelayState"] = state ? state.defaultRelayState : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            inputs["entityKey"] = state ? state.entityKey : undefined;
            inputs["entityUrl"] = state ? state.entityUrl : undefined;
            inputs["features"] = state ? state.features : undefined;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["hideIos"] = state ? state.hideIos : undefined;
            inputs["hideWeb"] = state ? state.hideWeb : undefined;
            inputs["honorForceAuthn"] = state ? state.honorForceAuthn : undefined;
            inputs["httpPostBinding"] = state ? state.httpPostBinding : undefined;
            inputs["httpRedirectBinding"] = state ? state.httpRedirectBinding : undefined;
            inputs["idpIssuer"] = state ? state.idpIssuer : undefined;
            inputs["inlineHookId"] = state ? state.inlineHookId : undefined;
            inputs["keyId"] = state ? state.keyId : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["keyYearsValid"] = state ? state.keyYearsValid : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["logo"] = state ? state.logo : undefined;
            inputs["logoUrl"] = state ? state.logoUrl : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["metadataUrl"] = state ? state.metadataUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preconfiguredApp"] = state ? state.preconfiguredApp : undefined;
            inputs["recipient"] = state ? state.recipient : undefined;
            inputs["requestCompressed"] = state ? state.requestCompressed : undefined;
            inputs["responseSigned"] = state ? state.responseSigned : undefined;
            inputs["signOnMode"] = state ? state.signOnMode : undefined;
            inputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            inputs["singleLogoutCertificate"] = state ? state.singleLogoutCertificate : undefined;
            inputs["singleLogoutIssuer"] = state ? state.singleLogoutIssuer : undefined;
            inputs["singleLogoutUrl"] = state ? state.singleLogoutUrl : undefined;
            inputs["spIssuer"] = state ? state.spIssuer : undefined;
            inputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subjectNameIdFormat"] = state ? state.subjectNameIdFormat : undefined;
            inputs["subjectNameIdTemplate"] = state ? state.subjectNameIdTemplate : undefined;
            inputs["userNameTemplate"] = state ? state.userNameTemplate : undefined;
            inputs["userNameTemplateSuffix"] = state ? state.userNameTemplateSuffix : undefined;
            inputs["userNameTemplateType"] = state ? state.userNameTemplateType : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as SamlArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            inputs["accessibilityErrorRedirectUrl"] = args ? args.accessibilityErrorRedirectUrl : undefined;
            inputs["accessibilityLoginRedirectUrl"] = args ? args.accessibilityLoginRedirectUrl : undefined;
            inputs["accessibilitySelfService"] = args ? args.accessibilitySelfService : undefined;
            inputs["acsEndpoints"] = args ? args.acsEndpoints : undefined;
            inputs["appSettingsJson"] = args ? args.appSettingsJson : undefined;
            inputs["assertionSigned"] = args ? args.assertionSigned : undefined;
            inputs["attributeStatements"] = args ? args.attributeStatements : undefined;
            inputs["audience"] = args ? args.audience : undefined;
            inputs["authnContextClassRef"] = args ? args.authnContextClassRef : undefined;
            inputs["autoSubmitToolbar"] = args ? args.autoSubmitToolbar : undefined;
            inputs["defaultRelayState"] = args ? args.defaultRelayState : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["digestAlgorithm"] = args ? args.digestAlgorithm : undefined;
            inputs["features"] = args ? args.features : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["hideIos"] = args ? args.hideIos : undefined;
            inputs["hideWeb"] = args ? args.hideWeb : undefined;
            inputs["honorForceAuthn"] = args ? args.honorForceAuthn : undefined;
            inputs["idpIssuer"] = args ? args.idpIssuer : undefined;
            inputs["inlineHookId"] = args ? args.inlineHookId : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["keyYearsValid"] = args ? args.keyYearsValid : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["logo"] = args ? args.logo : undefined;
            inputs["preconfiguredApp"] = args ? args.preconfiguredApp : undefined;
            inputs["recipient"] = args ? args.recipient : undefined;
            inputs["requestCompressed"] = args ? args.requestCompressed : undefined;
            inputs["responseSigned"] = args ? args.responseSigned : undefined;
            inputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            inputs["singleLogoutCertificate"] = args ? args.singleLogoutCertificate : undefined;
            inputs["singleLogoutIssuer"] = args ? args.singleLogoutIssuer : undefined;
            inputs["singleLogoutUrl"] = args ? args.singleLogoutUrl : undefined;
            inputs["spIssuer"] = args ? args.spIssuer : undefined;
            inputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subjectNameIdFormat"] = args ? args.subjectNameIdFormat : undefined;
            inputs["subjectNameIdTemplate"] = args ? args.subjectNameIdTemplate : undefined;
            inputs["userNameTemplate"] = args ? args.userNameTemplate : undefined;
            inputs["userNameTemplateSuffix"] = args ? args.userNameTemplateSuffix : undefined;
            inputs["userNameTemplateType"] = args ? args.userNameTemplateType : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["certificate"] = undefined /*out*/;
            inputs["entityKey"] = undefined /*out*/;
            inputs["entityUrl"] = undefined /*out*/;
            inputs["httpPostBinding"] = undefined /*out*/;
            inputs["httpRedirectBinding"] = undefined /*out*/;
            inputs["keyId"] = undefined /*out*/;
            inputs["logoUrl"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["metadataUrl"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["signOnMode"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Saml.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Saml resources.
 */
export interface SamlState {
    /**
     * Custom error page URL.
     */
    readonly accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL.
     */
    readonly accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self-service.
     */
    readonly accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    readonly acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application settings in JSON format.
     */
    readonly appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed.
     */
    readonly assertionSigned?: pulumi.Input<boolean>;
    /**
     * List of SAML Attribute statements.
     */
    readonly attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience restriction.
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
     */
    readonly authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar.
     */
    readonly autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * The raw signing certificate.
     */
    readonly certificate?: pulumi.Input<string>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response.
     */
    readonly digestAlgorithm?: pulumi.Input<string>;
    /**
     * Entity ID, the ID portion of the `entityUrl`.
     */
    readonly entityKey?: pulumi.Input<string>;
    /**
     * Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
     */
    readonly entityUrl?: pulumi.Input<string>;
    /**
     * features enabled. Notice: you can't currently configure provisioning features via the API.
     */
    readonly features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groups associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
     *
     * @deprecated The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     */
    readonly groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app.
     */
    readonly hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it.
     */
    readonly honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
     */
    readonly httpPostBinding?: pulumi.Input<string>;
    /**
     * `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
     */
    readonly httpRedirectBinding?: pulumi.Input<string>;
    /**
     * SAML issuer ID.
     */
    readonly idpIssuer?: pulumi.Input<string>;
    /**
     * Saml Inline Hook associated with the application.
     */
    readonly inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate key ID.
     */
    readonly keyId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    readonly keyYearsValid?: pulumi.Input<number>;
    /**
     * label of application.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * Application logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    readonly logo?: pulumi.Input<string>;
    /**
     * Direct link of application logo.
     */
    readonly logoUrl?: pulumi.Input<string>;
    /**
     * The raw SAML metadata in XML.
     */
    readonly metadata?: pulumi.Input<string>;
    /**
     * SAML xml metadata URL.
     */
    readonly metadataUrl?: pulumi.Input<string>;
    /**
     * The name of the attribute statement.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * name of application from the Okta Integration Network, if not included a custom app will be created.
     */
    readonly preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion.
     */
    readonly recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed.
     */
    readonly responseSigned?: pulumi.Input<boolean>;
    /**
     * Sign-on mode of application.
     */
    readonly signOnMode?: pulumi.Input<string>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response.
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    readonly singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request.
     */
    readonly singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent.
     */
    readonly singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML service provider issuer.
     */
    readonly spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign-on Url.
     */
    readonly ssoUrl?: pulumi.Input<string>;
    /**
     * status of application.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app.
     */
    readonly subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template.
     */
    readonly userNameTemplate?: pulumi.Input<string>;
    /**
     * Username template suffix.
     */
    readonly userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type.
     */
    readonly userNameTemplateType?: pulumi.Input<string>;
    /**
     * Users associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
     *
     * @deprecated The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.app.SamlUser>[]>;
}

/**
 * The set of arguments for constructing a Saml resource.
 */
export interface SamlArgs {
    /**
     * Custom error page URL.
     */
    readonly accessibilityErrorRedirectUrl?: pulumi.Input<string>;
    /**
     * Custom login page URL.
     */
    readonly accessibilityLoginRedirectUrl?: pulumi.Input<string>;
    /**
     * Enable self-service.
     */
    readonly accessibilitySelfService?: pulumi.Input<boolean>;
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     */
    readonly acsEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application settings in JSON format.
     */
    readonly appSettingsJson?: pulumi.Input<string>;
    /**
     * Determines whether the SAML assertion is digitally signed.
     */
    readonly assertionSigned?: pulumi.Input<boolean>;
    /**
     * List of SAML Attribute statements.
     */
    readonly attributeStatements?: pulumi.Input<pulumi.Input<inputs.app.SamlAttributeStatement>[]>;
    /**
     * Audience restriction.
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
     */
    readonly authnContextClassRef?: pulumi.Input<string>;
    /**
     * Display auto submit toolbar.
     */
    readonly autoSubmitToolbar?: pulumi.Input<boolean>;
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     */
    readonly defaultRelayState?: pulumi.Input<string>;
    /**
     * Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response.
     */
    readonly digestAlgorithm?: pulumi.Input<string>;
    /**
     * features enabled. Notice: you can't currently configure provisioning features via the API.
     */
    readonly features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groups associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
     *
     * @deprecated The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     */
    readonly groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not display application icon on mobile app.
     */
    readonly hideIos?: pulumi.Input<boolean>;
    /**
     * Do not display application icon to users
     */
    readonly hideWeb?: pulumi.Input<boolean>;
    /**
     * Prompt user to re-authenticate if SP asks for it.
     */
    readonly honorForceAuthn?: pulumi.Input<boolean>;
    /**
     * SAML issuer ID.
     */
    readonly idpIssuer?: pulumi.Input<string>;
    /**
     * Saml Inline Hook associated with the application.
     */
    readonly inlineHookId?: pulumi.Input<string>;
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * Number of years the certificate is valid (2 - 10 years).
     */
    readonly keyYearsValid?: pulumi.Input<number>;
    /**
     * label of application.
     */
    readonly label: pulumi.Input<string>;
    /**
     * Application logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     */
    readonly logo?: pulumi.Input<string>;
    /**
     * name of application from the Okta Integration Network, if not included a custom app will be created.
     */
    readonly preconfiguredApp?: pulumi.Input<string>;
    /**
     * The location where the app may present the SAML assertion.
     */
    readonly recipient?: pulumi.Input<string>;
    /**
     * Denotes whether the request is compressed or not.
     */
    readonly requestCompressed?: pulumi.Input<boolean>;
    /**
     * Determines whether the SAML auth response message is digitally signed.
     */
    readonly responseSigned?: pulumi.Input<boolean>;
    /**
     * Signature algorithm used ot digitally sign the assertion and response.
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     */
    readonly singleLogoutCertificate?: pulumi.Input<string>;
    /**
     * The issuer of the Service Provider that generates the Single Logout request.
     */
    readonly singleLogoutIssuer?: pulumi.Input<string>;
    /**
     * The location where the logout response is sent.
     */
    readonly singleLogoutUrl?: pulumi.Input<string>;
    /**
     * SAML service provider issuer.
     */
    readonly spIssuer?: pulumi.Input<string>;
    /**
     * Single Sign-on Url.
     */
    readonly ssoUrl?: pulumi.Input<string>;
    /**
     * status of application.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Identifies the SAML processing rules.
     */
    readonly subjectNameIdFormat?: pulumi.Input<string>;
    /**
     * Template for app user's username when a user is assigned to the app.
     */
    readonly subjectNameIdTemplate?: pulumi.Input<string>;
    /**
     * Username template.
     */
    readonly userNameTemplate?: pulumi.Input<string>;
    /**
     * Username template suffix.
     */
    readonly userNameTemplateSuffix?: pulumi.Input<string>;
    /**
     * Username template type.
     */
    readonly userNameTemplateType?: pulumi.Input<string>;
    /**
     * Users associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
     *
     * @deprecated The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.app.SamlUser>[]>;
}
