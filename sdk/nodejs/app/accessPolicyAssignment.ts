// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Assigns an access policy (colloquially known as a sign-on policy and/or an
 * authentication policy) to an application. This resource does not perform true
 * delete as it will not delete an application and the app's access policy can't be
 * removed; it can only be changed to a different access policy. This resource is
 * only logical within the context of an application therefore `appId` is
 * immutable once set. Use this resource to manage assigning an access policy to an
 * application. It will assign the given `policyId` to the application at creation
 * and during update.
 *
 * > Inside the product a sign-on policy is referenced as an _authentication
 * policy_, in the public API the policy is of type
 * [`ACCESS_POLICY`](https://developer.okta.com/docs/reference/api/policy/#policy-object).
 *
 * ## Import
 *
 * An Okta App's Access Policy Assignment can be imported via its associated Application ID.
 *
 * ```sh
 *  $ pulumi import okta:app/accessPolicyAssignment:AccessPolicyAssignment example &#60;app id&#62;
 * ```
 */
export class AccessPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): AccessPolicyAssignment {
        return new AccessPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:app/accessPolicyAssignment:AccessPolicyAssignment';

    /**
     * Returns true if the given object is an instance of AccessPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPolicyAssignment.__pulumiType;
    }

    /**
     * The application ID; this value is immutable and can not be updated.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The access policy ID.
     */
    public readonly policyId!: pulumi.Output<string>;

    /**
     * Create a AccessPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessPolicyAssignmentArgs | AccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessPolicyAssignmentState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
        } else {
            const args = argsOrState as AccessPolicyAssignmentArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPolicyAssignment resources.
 */
export interface AccessPolicyAssignmentState {
    /**
     * The application ID; this value is immutable and can not be updated.
     */
    appId?: pulumi.Input<string>;
    /**
     * The access policy ID.
     */
    policyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPolicyAssignment resource.
 */
export interface AccessPolicyAssignmentArgs {
    /**
     * The application ID; this value is immutable and can not be updated.
     */
    appId: pulumi.Input<string>;
    /**
     * The access policy ID.
     */
    policyId: pulumi.Input<string>;
}
