// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPolicyAssignmentArgs, AccessPolicyAssignmentState } from "./accessPolicyAssignment";
export type AccessPolicyAssignment = import("./accessPolicyAssignment").AccessPolicyAssignment;
export const AccessPolicyAssignment: typeof import("./accessPolicyAssignment").AccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["AccessPolicyAssignment"], () => require("./accessPolicyAssignment"));

export { AutoLoginArgs, AutoLoginState } from "./autoLogin";
export type AutoLogin = import("./autoLogin").AutoLogin;
export const AutoLogin: typeof import("./autoLogin").AutoLogin = null as any;
utilities.lazyLoad(exports, ["AutoLogin"], () => require("./autoLogin"));

export { BasicAuthArgs, BasicAuthState } from "./basicAuth";
export type BasicAuth = import("./basicAuth").BasicAuth;
export const BasicAuth: typeof import("./basicAuth").BasicAuth = null as any;
utilities.lazyLoad(exports, ["BasicAuth"], () => require("./basicAuth"));

export { BookmarkArgs, BookmarkState } from "./bookmark";
export type Bookmark = import("./bookmark").Bookmark;
export const Bookmark: typeof import("./bookmark").Bookmark = null as any;
utilities.lazyLoad(exports, ["Bookmark"], () => require("./bookmark"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetMetadataSamlArgs, GetMetadataSamlResult, GetMetadataSamlOutputArgs } from "./getMetadataSaml";
export const getMetadataSaml: typeof import("./getMetadataSaml").getMetadataSaml = null as any;
export const getMetadataSamlOutput: typeof import("./getMetadataSaml").getMetadataSamlOutput = null as any;
utilities.lazyLoad(exports, ["getMetadataSaml","getMetadataSamlOutput"], () => require("./getMetadataSaml"));

export { GetOauthArgs, GetOauthResult, GetOauthOutputArgs } from "./getOauth";
export const getOauth: typeof import("./getOauth").getOauth = null as any;
export const getOauthOutput: typeof import("./getOauth").getOauthOutput = null as any;
utilities.lazyLoad(exports, ["getOauth","getOauthOutput"], () => require("./getOauth"));

export { GetSamlArgs, GetSamlResult, GetSamlOutputArgs } from "./getSaml";
export const getSaml: typeof import("./getSaml").getSaml = null as any;
export const getSamlOutput: typeof import("./getSaml").getSamlOutput = null as any;
utilities.lazyLoad(exports, ["getSaml","getSamlOutput"], () => require("./getSaml"));

export { GroupAssignmentArgs, GroupAssignmentState } from "./groupAssignment";
export type GroupAssignment = import("./groupAssignment").GroupAssignment;
export const GroupAssignment: typeof import("./groupAssignment").GroupAssignment = null as any;
utilities.lazyLoad(exports, ["GroupAssignment"], () => require("./groupAssignment"));

export { OAuthArgs, OAuthState } from "./oauth";
export type OAuth = import("./oauth").OAuth;
export const OAuth: typeof import("./oauth").OAuth = null as any;
utilities.lazyLoad(exports, ["OAuth"], () => require("./oauth"));

export { OAuthPostLogoutRedirectUriArgs, OAuthPostLogoutRedirectUriState } from "./oauthPostLogoutRedirectUri";
export type OAuthPostLogoutRedirectUri = import("./oauthPostLogoutRedirectUri").OAuthPostLogoutRedirectUri;
export const OAuthPostLogoutRedirectUri: typeof import("./oauthPostLogoutRedirectUri").OAuthPostLogoutRedirectUri = null as any;
utilities.lazyLoad(exports, ["OAuthPostLogoutRedirectUri"], () => require("./oauthPostLogoutRedirectUri"));

export { OAuthRedirectUriArgs, OAuthRedirectUriState } from "./oauthRedirectUri";
export type OAuthRedirectUri = import("./oauthRedirectUri").OAuthRedirectUri;
export const OAuthRedirectUri: typeof import("./oauthRedirectUri").OAuthRedirectUri = null as any;
utilities.lazyLoad(exports, ["OAuthRedirectUri"], () => require("./oauthRedirectUri"));

export { OauthRoleAssignmentArgs, OauthRoleAssignmentState } from "./oauthRoleAssignment";
export type OauthRoleAssignment = import("./oauthRoleAssignment").OauthRoleAssignment;
export const OauthRoleAssignment: typeof import("./oauthRoleAssignment").OauthRoleAssignment = null as any;
utilities.lazyLoad(exports, ["OauthRoleAssignment"], () => require("./oauthRoleAssignment"));

export { SamlArgs, SamlState } from "./saml";
export type Saml = import("./saml").Saml;
export const Saml: typeof import("./saml").Saml = null as any;
utilities.lazyLoad(exports, ["Saml"], () => require("./saml"));

export { SecurePasswordStoreArgs, SecurePasswordStoreState } from "./securePasswordStore";
export type SecurePasswordStore = import("./securePasswordStore").SecurePasswordStore;
export const SecurePasswordStore: typeof import("./securePasswordStore").SecurePasswordStore = null as any;
utilities.lazyLoad(exports, ["SecurePasswordStore"], () => require("./securePasswordStore"));

export { SwaArgs, SwaState } from "./swa";
export type Swa = import("./swa").Swa;
export const Swa: typeof import("./swa").Swa = null as any;
utilities.lazyLoad(exports, ["Swa"], () => require("./swa"));

export { ThreeFieldArgs, ThreeFieldState } from "./threeField";
export type ThreeField = import("./threeField").ThreeField;
export const ThreeField: typeof import("./threeField").ThreeField = null as any;
utilities.lazyLoad(exports, ["ThreeField"], () => require("./threeField"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:app/accessPolicyAssignment:AccessPolicyAssignment":
                return new AccessPolicyAssignment(name, <any>undefined, { urn })
            case "okta:app/autoLogin:AutoLogin":
                return new AutoLogin(name, <any>undefined, { urn })
            case "okta:app/basicAuth:BasicAuth":
                return new BasicAuth(name, <any>undefined, { urn })
            case "okta:app/bookmark:Bookmark":
                return new Bookmark(name, <any>undefined, { urn })
            case "okta:app/groupAssignment:GroupAssignment":
                return new GroupAssignment(name, <any>undefined, { urn })
            case "okta:app/oAuth:OAuth":
                return new OAuth(name, <any>undefined, { urn })
            case "okta:app/oAuthPostLogoutRedirectUri:OAuthPostLogoutRedirectUri":
                return new OAuthPostLogoutRedirectUri(name, <any>undefined, { urn })
            case "okta:app/oAuthRedirectUri:OAuthRedirectUri":
                return new OAuthRedirectUri(name, <any>undefined, { urn })
            case "okta:app/oauthRoleAssignment:OauthRoleAssignment":
                return new OauthRoleAssignment(name, <any>undefined, { urn })
            case "okta:app/saml:Saml":
                return new Saml(name, <any>undefined, { urn })
            case "okta:app/securePasswordStore:SecurePasswordStore":
                return new SecurePasswordStore(name, <any>undefined, { urn })
            case "okta:app/swa:Swa":
                return new Swa(name, <any>undefined, { urn })
            case "okta:app/threeField:ThreeField":
                return new ThreeField(name, <any>undefined, { urn })
            case "okta:app/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "app/accessPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "app/autoLogin", _module)
pulumi.runtime.registerResourceModule("okta", "app/basicAuth", _module)
pulumi.runtime.registerResourceModule("okta", "app/bookmark", _module)
pulumi.runtime.registerResourceModule("okta", "app/groupAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "app/oAuth", _module)
pulumi.runtime.registerResourceModule("okta", "app/oAuthPostLogoutRedirectUri", _module)
pulumi.runtime.registerResourceModule("okta", "app/oAuthRedirectUri", _module)
pulumi.runtime.registerResourceModule("okta", "app/oauthRoleAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "app/saml", _module)
pulumi.runtime.registerResourceModule("okta", "app/securePasswordStore", _module)
pulumi.runtime.registerResourceModule("okta", "app/swa", _module)
pulumi.runtime.registerResourceModule("okta", "app/threeField", _module)
pulumi.runtime.registerResourceModule("okta", "app/user", _module)
