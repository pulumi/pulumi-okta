// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Gets Okta Network Zone.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getNetworkZone({
 *     name: "Block Antarctica",
 * });
 * ```
 */
export function getNetworkZone(args?: GetNetworkZoneArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkZoneResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getNetworkZone:getNetworkZone", {
        "dynamicLocationsExcludes": args.dynamicLocationsExcludes,
        "id": args.id,
        "ipServiceCategoriesExcludes": args.ipServiceCategoriesExcludes,
        "ipServiceCategoriesIncludes": args.ipServiceCategoriesIncludes,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkZone.
 */
export interface GetNetworkZoneArgs {
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    dynamicLocationsExcludes?: string[];
    /**
     * ID of the network zone to retrieve, conflicts with `name`.
     */
    id?: string;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesExcludes?: string[];
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesIncludes?: string[];
    /**
     * Name of the network zone to retrieve, conflicts with `id`.
     */
    name?: string;
}

/**
 * A collection of values returned by getNetworkZone.
 */
export interface GetNetworkZoneResult {
    /**
     * List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    readonly asns: string[];
    /**
     * Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    readonly dynamicLocations: string[];
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    readonly dynamicLocationsExcludes?: string[];
    /**
     * Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     */
    readonly dynamicProxyType: string;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     */
    readonly gateways: string[];
    /**
     * ID of the network zone to retrieve, conflicts with `name`.
     */
    readonly id?: string;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    readonly ipServiceCategoriesExcludes?: string[];
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    readonly ipServiceCategoriesIncludes?: string[];
    /**
     * Name of the network zone to retrieve, conflicts with `id`.
     */
    readonly name?: string;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     */
    readonly proxies: string[];
    /**
     * Network Status - can either be ACTIVE or INACTIVE only
     */
    readonly status: string;
    /**
     * Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     */
    readonly type: string;
    /**
     * Zone's purpose: POLICY or BLOCKLIST
     */
    readonly usage: string;
}
/**
 * Gets Okta Network Zone.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getNetworkZone({
 *     name: "Block Antarctica",
 * });
 * ```
 */
export function getNetworkZoneOutput(args?: GetNetworkZoneOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNetworkZoneResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getNetworkZone:getNetworkZone", {
        "dynamicLocationsExcludes": args.dynamicLocationsExcludes,
        "id": args.id,
        "ipServiceCategoriesExcludes": args.ipServiceCategoriesExcludes,
        "ipServiceCategoriesIncludes": args.ipServiceCategoriesIncludes,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkZone.
 */
export interface GetNetworkZoneOutputArgs {
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    dynamicLocationsExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the network zone to retrieve, conflicts with `name`.
     */
    id?: pulumi.Input<string>;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the network zone to retrieve, conflicts with `id`.
     */
    name?: pulumi.Input<string>;
}
