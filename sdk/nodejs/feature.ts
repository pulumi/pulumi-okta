// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages brand. This resource allows you to toggle an Okta Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getFeatures({
 *     label: "Android Device Trust",
 * });
 * const test = new okta.Feature("test", {featureId: example.then(example => example.features?.[0]?.id)});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/feature:Feature example <id>
 * ```
 */
export class Feature extends pulumi.CustomResource {
    /**
     * Get an existing Feature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureState, opts?: pulumi.CustomResourceOptions): Feature {
        return new Feature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/feature:Feature';

    /**
     * Returns true if the given object is an instance of Feature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Feature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Feature.__pulumiType;
    }

    /**
     * Name of the feature.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     */
    declare public readonly featureId: pulumi.Output<string>;
    /**
     * Whether to `ENABLE` or `DISABLE` the feature
     */
    declare public readonly lifeCycle: pulumi.Output<string | undefined>;
    /**
     * Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     */
    declare public readonly mode: pulumi.Output<boolean | undefined>;
    /**
     * Name of the feature.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Current release cycle stage of a feature.
     */
    declare public /*out*/ readonly stage: pulumi.Output<outputs.FeatureStage>;
    /**
     * The feature status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Type of feature.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a Feature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureArgs | FeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["featureId"] = state?.featureId;
            resourceInputs["lifeCycle"] = state?.lifeCycle;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["stage"] = state?.stage;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as FeatureArgs | undefined;
            if (args?.featureId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureId'");
            }
            resourceInputs["featureId"] = args?.featureId;
            resourceInputs["lifeCycle"] = args?.lifeCycle;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["stage"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Feature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Feature resources.
 */
export interface FeatureState {
    /**
     * Name of the feature.
     */
    description?: pulumi.Input<string>;
    /**
     * Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     */
    featureId?: pulumi.Input<string>;
    /**
     * Whether to `ENABLE` or `DISABLE` the feature
     */
    lifeCycle?: pulumi.Input<string>;
    /**
     * Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     */
    mode?: pulumi.Input<boolean>;
    /**
     * Name of the feature.
     */
    name?: pulumi.Input<string>;
    /**
     * Current release cycle stage of a feature.
     */
    stage?: pulumi.Input<inputs.FeatureStage>;
    /**
     * The feature status.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of feature.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Feature resource.
 */
export interface FeatureArgs {
    /**
     * Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     */
    featureId: pulumi.Input<string>;
    /**
     * Whether to `ENABLE` or `DISABLE` the feature
     */
    lifeCycle?: pulumi.Input<string>;
    /**
     * Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     */
    mode?: pulumi.Input<boolean>;
}
