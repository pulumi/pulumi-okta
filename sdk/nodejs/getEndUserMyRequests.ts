// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get an End User Request from Okta Identity Governance. This data source allows you to retrieve information about existing access requests in the Okta Identity Governance system.
 *
 * Use this data source to fetch details about a specific request, including its current status, field values, and other metadata.
 *
 * > **Note:** This data source is part of Okta Identity Governance functionality and requires appropriate licensing and configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * // Get a request by its catalog entry ID and request ID
 * const example = okta.getEndUserMyRequests({
 *     entryId: "cen123456789abcdefgh",
 *     id: "reqABCDEFG0123456789",
 * });
 * export const requestStatus = example.then(example => example.status);
 * export const requestFieldValues = example.then(example => example.requesterFieldValues);
 * ```
 *
 * ## Field Type Reference
 *
 * ### Field Types and Values
 *
 * - **TEXT**: Contains free-form text input in the `value` attribute
 * - **SELECT**: Contains single selection value in the `value` attribute
 * - **MULTISELECT**: Contains multiple selection values in the `values` attribute (list)
 * - **DURATION**: Contains time duration specification in the `value` attribute (e.g., "5 days", "2 weeks")
 * - **ISO_DATE**: Contains date specification in ISO format in the `value` attribute
 * - **OKTA_USER_ID**: Contains Okta user ID in the `value` attribute
 *
 * ### Usage Notes
 *
 * - For `MULTISELECT` type fields, the values will be in the `values` attribute as a list
 * - For all other field types, the value will be in the `value` attribute as a string
 * - The `label` and `type` attributes provide metadata about the field structure
 * - Field definitions and requirements are determined by the approval system configuration
 *
 * ## Limitations and Considerations
 *
 * 1. **Read-Only**: This data source only retrieves existing request information and cannot modify requests.
 *
 * 2. **Identity Governance Licensing**: This data source requires Okta Identity Governance licensing and proper configuration.
 *
 * 3. **Request Lifecycle**: The data reflects the current state of the request in the approval workflow.
 *
 * 4. **Field Structure**: The field structure and available types depend on the approval system configuration in Okta Identity Governance.
 */
export function getEndUserMyRequests(args: GetEndUserMyRequestsArgs, opts?: pulumi.InvokeOptions): Promise<GetEndUserMyRequestsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getEndUserMyRequests:getEndUserMyRequests", {
        "entryId": args.entryId,
        "id": args.id,
        "requested": args.requested,
        "requestedBy": args.requestedBy,
        "requestedFor": args.requestedFor,
        "requesterFieldValues": args.requesterFieldValues,
        "riskAssessment": args.riskAssessment,
    }, opts);
}

/**
 * A collection of arguments for invoking getEndUserMyRequests.
 */
export interface GetEndUserMyRequestsArgs {
    /**
     * The ID of the catalog entry for which the request was made.
     */
    entryId: string;
    /**
     * The ID of the request to retrieve.
     */
    id: string;
    requested?: inputs.GetEndUserMyRequestsRequested;
    requestedBy?: inputs.GetEndUserMyRequestsRequestedBy;
    requestedFor?: inputs.GetEndUserMyRequestsRequestedFor;
    /**
     * The requester input fields and their values from the request.
     */
    requesterFieldValues?: inputs.GetEndUserMyRequestsRequesterFieldValue[];
    riskAssessment?: inputs.GetEndUserMyRequestsRiskAssessment;
}

/**
 * A collection of values returned by getEndUserMyRequests.
 */
export interface GetEndUserMyRequestsResult {
    readonly accessDuration: string;
    readonly created: string;
    readonly createdBy: string;
    /**
     * The ID of the catalog entry for which the request was made.
     */
    readonly entryId: string;
    readonly grantStatus: string;
    readonly granted: string;
    /**
     * The ID of the request to retrieve.
     */
    readonly id: string;
    readonly lastUpdated: string;
    readonly lastUpdatedBy: string;
    readonly requested?: outputs.GetEndUserMyRequestsRequested;
    readonly requestedBy?: outputs.GetEndUserMyRequestsRequestedBy;
    readonly requestedFor?: outputs.GetEndUserMyRequestsRequestedFor;
    /**
     * The requester input fields and their values from the request.
     */
    readonly requesterFieldValues?: outputs.GetEndUserMyRequestsRequesterFieldValue[];
    readonly resolved: string;
    readonly revocationScheduled: string;
    readonly revocationStatus: string;
    readonly revoked: string;
    readonly riskAssessment?: outputs.GetEndUserMyRequestsRiskAssessment;
    /**
     * The current status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
     */
    readonly status: string;
}
/**
 * Get an End User Request from Okta Identity Governance. This data source allows you to retrieve information about existing access requests in the Okta Identity Governance system.
 *
 * Use this data source to fetch details about a specific request, including its current status, field values, and other metadata.
 *
 * > **Note:** This data source is part of Okta Identity Governance functionality and requires appropriate licensing and configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * // Get a request by its catalog entry ID and request ID
 * const example = okta.getEndUserMyRequests({
 *     entryId: "cen123456789abcdefgh",
 *     id: "reqABCDEFG0123456789",
 * });
 * export const requestStatus = example.then(example => example.status);
 * export const requestFieldValues = example.then(example => example.requesterFieldValues);
 * ```
 *
 * ## Field Type Reference
 *
 * ### Field Types and Values
 *
 * - **TEXT**: Contains free-form text input in the `value` attribute
 * - **SELECT**: Contains single selection value in the `value` attribute
 * - **MULTISELECT**: Contains multiple selection values in the `values` attribute (list)
 * - **DURATION**: Contains time duration specification in the `value` attribute (e.g., "5 days", "2 weeks")
 * - **ISO_DATE**: Contains date specification in ISO format in the `value` attribute
 * - **OKTA_USER_ID**: Contains Okta user ID in the `value` attribute
 *
 * ### Usage Notes
 *
 * - For `MULTISELECT` type fields, the values will be in the `values` attribute as a list
 * - For all other field types, the value will be in the `value` attribute as a string
 * - The `label` and `type` attributes provide metadata about the field structure
 * - Field definitions and requirements are determined by the approval system configuration
 *
 * ## Limitations and Considerations
 *
 * 1. **Read-Only**: This data source only retrieves existing request information and cannot modify requests.
 *
 * 2. **Identity Governance Licensing**: This data source requires Okta Identity Governance licensing and proper configuration.
 *
 * 3. **Request Lifecycle**: The data reflects the current state of the request in the approval workflow.
 *
 * 4. **Field Structure**: The field structure and available types depend on the approval system configuration in Okta Identity Governance.
 */
export function getEndUserMyRequestsOutput(args: GetEndUserMyRequestsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEndUserMyRequestsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getEndUserMyRequests:getEndUserMyRequests", {
        "entryId": args.entryId,
        "id": args.id,
        "requested": args.requested,
        "requestedBy": args.requestedBy,
        "requestedFor": args.requestedFor,
        "requesterFieldValues": args.requesterFieldValues,
        "riskAssessment": args.riskAssessment,
    }, opts);
}

/**
 * A collection of arguments for invoking getEndUserMyRequests.
 */
export interface GetEndUserMyRequestsOutputArgs {
    /**
     * The ID of the catalog entry for which the request was made.
     */
    entryId: pulumi.Input<string>;
    /**
     * The ID of the request to retrieve.
     */
    id: pulumi.Input<string>;
    requested?: pulumi.Input<inputs.GetEndUserMyRequestsRequestedArgs>;
    requestedBy?: pulumi.Input<inputs.GetEndUserMyRequestsRequestedByArgs>;
    requestedFor?: pulumi.Input<inputs.GetEndUserMyRequestsRequestedForArgs>;
    /**
     * The requester input fields and their values from the request.
     */
    requesterFieldValues?: pulumi.Input<pulumi.Input<inputs.GetEndUserMyRequestsRequesterFieldValueArgs>[]>;
    riskAssessment?: pulumi.Input<inputs.GetEndUserMyRequestsRiskAssessmentArgs>;
}
