// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Okta Network Zone. This resource allows you to create and configure an Okta Network Zone.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:network/zone:Zone example <zone_id>
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:network/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    declare public readonly asns: pulumi.Output<string[] | undefined>;
    /**
     * Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    declare public readonly dynamicLocations: pulumi.Output<string[] | undefined>;
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    declare public readonly dynamicLocationsExcludes: pulumi.Output<string[] | undefined>;
    /**
     * Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     */
    declare public readonly dynamicProxyType: pulumi.Output<string | undefined>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     */
    declare public readonly gateways: pulumi.Output<string[] | undefined>;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    declare public readonly ipServiceCategoriesExcludes: pulumi.Output<string[] | undefined>;
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    declare public readonly ipServiceCategoriesIncludes: pulumi.Output<string[] | undefined>;
    /**
     * Name of the Network Zone Resource
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     */
    declare public readonly proxies: pulumi.Output<string[] | undefined>;
    /**
     * Network Status - can either be `ACTIVE` or `INACTIVE` only
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
     */
    declare public readonly usage: pulumi.Output<string | undefined>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["asns"] = state?.asns;
            resourceInputs["dynamicLocations"] = state?.dynamicLocations;
            resourceInputs["dynamicLocationsExcludes"] = state?.dynamicLocationsExcludes;
            resourceInputs["dynamicProxyType"] = state?.dynamicProxyType;
            resourceInputs["gateways"] = state?.gateways;
            resourceInputs["ipServiceCategoriesExcludes"] = state?.ipServiceCategoriesExcludes;
            resourceInputs["ipServiceCategoriesIncludes"] = state?.ipServiceCategoriesIncludes;
            resourceInputs["name"] = state?.name;
            resourceInputs["proxies"] = state?.proxies;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
            resourceInputs["usage"] = state?.usage;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["asns"] = args?.asns;
            resourceInputs["dynamicLocations"] = args?.dynamicLocations;
            resourceInputs["dynamicLocationsExcludes"] = args?.dynamicLocationsExcludes;
            resourceInputs["dynamicProxyType"] = args?.dynamicProxyType;
            resourceInputs["gateways"] = args?.gateways;
            resourceInputs["ipServiceCategoriesExcludes"] = args?.ipServiceCategoriesExcludes;
            resourceInputs["ipServiceCategoriesIncludes"] = args?.ipServiceCategoriesIncludes;
            resourceInputs["name"] = args?.name;
            resourceInputs["proxies"] = args?.proxies;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
            resourceInputs["usage"] = args?.usage;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    asns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    dynamicLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    dynamicLocationsExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     */
    dynamicProxyType?: pulumi.Input<string>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Network Zone Resource
     */
    name?: pulumi.Input<string>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     */
    proxies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network Status - can either be `ACTIVE` or `INACTIVE` only
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     */
    type?: pulumi.Input<string>;
    /**
     * Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
     */
    usage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    asns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     */
    dynamicLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     */
    dynamicLocationsExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     */
    dynamicProxyType?: pulumi.Input<string>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     */
    ipServiceCategoriesIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Network Zone Resource
     */
    name?: pulumi.Input<string>;
    /**
     * Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     */
    proxies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network Status - can either be `ACTIVE` or `INACTIVE` only
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     */
    type: pulumi.Input<string>;
    /**
     * Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
     */
    usage?: pulumi.Input<string>;
}
