// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and configure a behavior.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const myLocation = new okta.Behaviour("my_location", {
 *     name: "My Location",
 *     type: "ANOMALOUS_LOCATION",
 *     numberOfAuthentications: 50,
 *     locationGranularityType: "LAT_LONG",
 *     radiusFromLocation: 20,
 * });
 * const myCity = new okta.Behaviour("my_city", {
 *     name: "My City",
 *     type: "ANOMALOUS_LOCATION",
 *     numberOfAuthentications: 50,
 *     locationGranularityType: "CITY",
 * });
 * const myDevice = new okta.Behaviour("my_device", {
 *     name: "My Device",
 *     type: "ANOMALOUS_DEVICE",
 *     numberOfAuthentications: 50,
 * });
 * const myIp = new okta.Behaviour("my_ip", {
 *     name: "My IP",
 *     type: "ANOMALOUS_IP",
 *     numberOfAuthentications: 50,
 * });
 * const myVelocity = new okta.Behaviour("my_velocity", {
 *     name: "My Velocity",
 *     type: "VELOCITY",
 *     velocity: 25,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/behaviour:Behaviour example <behavior_id>
 * ```
 */
export class Behaviour extends pulumi.CustomResource {
    /**
     * Get an existing Behaviour resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BehaviourState, opts?: pulumi.CustomResourceOptions): Behaviour {
        return new Behaviour(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/behaviour:Behaviour';

    /**
     * Returns true if the given object is an instance of Behaviour.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Behaviour {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Behaviour.__pulumiType;
    }

    /**
     * Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
     */
    declare public readonly locationGranularityType: pulumi.Output<string | undefined>;
    /**
     * Name of the behavior
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
     */
    declare public readonly numberOfAuthentications: pulumi.Output<number | undefined>;
    /**
     * Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
     */
    declare public readonly radiusFromLocation: pulumi.Output<number | undefined>;
    /**
     * Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
     */
    declare public readonly velocity: pulumi.Output<number | undefined>;

    /**
     * Create a Behaviour resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BehaviourArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BehaviourArgs | BehaviourState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BehaviourState | undefined;
            resourceInputs["locationGranularityType"] = state?.locationGranularityType;
            resourceInputs["name"] = state?.name;
            resourceInputs["numberOfAuthentications"] = state?.numberOfAuthentications;
            resourceInputs["radiusFromLocation"] = state?.radiusFromLocation;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
            resourceInputs["velocity"] = state?.velocity;
        } else {
            const args = argsOrState as BehaviourArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["locationGranularityType"] = args?.locationGranularityType;
            resourceInputs["name"] = args?.name;
            resourceInputs["numberOfAuthentications"] = args?.numberOfAuthentications;
            resourceInputs["radiusFromLocation"] = args?.radiusFromLocation;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
            resourceInputs["velocity"] = args?.velocity;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Behaviour.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Behaviour resources.
 */
export interface BehaviourState {
    /**
     * Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
     */
    locationGranularityType?: pulumi.Input<string>;
    /**
     * Name of the behavior
     */
    name?: pulumi.Input<string>;
    /**
     * The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
     */
    numberOfAuthentications?: pulumi.Input<number>;
    /**
     * Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
     */
    radiusFromLocation?: pulumi.Input<number>;
    /**
     * Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
     */
    type?: pulumi.Input<string>;
    /**
     * Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
     */
    velocity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Behaviour resource.
 */
export interface BehaviourArgs {
    /**
     * Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
     */
    locationGranularityType?: pulumi.Input<string>;
    /**
     * Name of the behavior
     */
    name?: pulumi.Input<string>;
    /**
     * The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
     */
    numberOfAuthentications?: pulumi.Input<number>;
    /**
     * Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
     */
    radiusFromLocation?: pulumi.Input<number>;
    /**
     * Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
     */
    type: pulumi.Input<string>;
    /**
     * Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
     */
    velocity?: pulumi.Input<number>;
}
