// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Behaviour extends pulumi.CustomResource {
    /**
     * Get an existing Behaviour resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BehaviourState, opts?: pulumi.CustomResourceOptions): Behaviour {
        return new Behaviour(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/behaviour:Behaviour';

    /**
     * Returns true if the given object is an instance of Behaviour.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Behaviour {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Behaviour.__pulumiType;
    }

    /**
     * Determines the method and level of detail used to evaluate the behavior.
     */
    public readonly locationGranularityType!: pulumi.Output<string | undefined>;
    /**
     * Name of the behavior
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of recent authentications used to evaluate the behavior.
     */
    public readonly numberOfAuthentications!: pulumi.Output<number | undefined>;
    /**
     * Radius from location (in kilometers)
     */
    public readonly radiusFromLocation!: pulumi.Output<number | undefined>;
    /**
     * Behavior status: ACTIVE or INACTIVE.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Behavior type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Velocity (in kilometers per hour).
     */
    public readonly velocity!: pulumi.Output<number | undefined>;

    /**
     * Create a Behaviour resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BehaviourArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BehaviourArgs | BehaviourState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BehaviourState | undefined;
            resourceInputs["locationGranularityType"] = state ? state.locationGranularityType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfAuthentications"] = state ? state.numberOfAuthentications : undefined;
            resourceInputs["radiusFromLocation"] = state ? state.radiusFromLocation : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["velocity"] = state ? state.velocity : undefined;
        } else {
            const args = argsOrState as BehaviourArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["locationGranularityType"] = args ? args.locationGranularityType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfAuthentications"] = args ? args.numberOfAuthentications : undefined;
            resourceInputs["radiusFromLocation"] = args ? args.radiusFromLocation : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["velocity"] = args ? args.velocity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Behaviour.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Behaviour resources.
 */
export interface BehaviourState {
    /**
     * Determines the method and level of detail used to evaluate the behavior.
     */
    locationGranularityType?: pulumi.Input<string>;
    /**
     * Name of the behavior
     */
    name?: pulumi.Input<string>;
    /**
     * The number of recent authentications used to evaluate the behavior.
     */
    numberOfAuthentications?: pulumi.Input<number>;
    /**
     * Radius from location (in kilometers)
     */
    radiusFromLocation?: pulumi.Input<number>;
    /**
     * Behavior status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Behavior type
     */
    type?: pulumi.Input<string>;
    /**
     * Velocity (in kilometers per hour).
     */
    velocity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Behaviour resource.
 */
export interface BehaviourArgs {
    /**
     * Determines the method and level of detail used to evaluate the behavior.
     */
    locationGranularityType?: pulumi.Input<string>;
    /**
     * Name of the behavior
     */
    name?: pulumi.Input<string>;
    /**
     * The number of recent authentications used to evaluate the behavior.
     */
    numberOfAuthentications?: pulumi.Input<number>;
    /**
     * Radius from location (in kilometers)
     */
    radiusFromLocation?: pulumi.Input<number>;
    /**
     * Behavior status: ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Behavior type
     */
    type: pulumi.Input<string>;
    /**
     * Velocity (in kilometers per hour).
     */
    velocity?: pulumi.Input<number>;
}
