// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages request conditions. This resource allows you to create and configure an Okta [request-condition](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Conditions/#tag/Request-Conditions).
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/requestCondition:RequestCondition example <resource_id>/<request_condition_id>
 * ```
 */
export class RequestCondition extends pulumi.CustomResource {
    /**
     * Get an existing RequestCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestConditionState, opts?: pulumi.CustomResourceOptions): RequestCondition {
        return new RequestCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/requestCondition:RequestCondition';

    /**
     * Returns true if the given object is an instance of RequestCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestCondition.__pulumiType;
    }

    /**
     * The access duration settings for the request condition
     */
    declare public readonly accessDurationSettings: pulumi.Output<outputs.RequestConditionAccessDurationSettings | undefined>;
    declare public readonly accessScopeSettings: pulumi.Output<outputs.RequestConditionAccessScopeSettings | undefined>;
    /**
     * The ID of the approval sequence.
     */
    declare public readonly approvalSequenceId: pulumi.Output<string>;
    /**
     * The date and time when the request condition was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The id of the user who created the request condition.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The description of the request condition.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The date and time when the request condition was last updated.
     */
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * The id of the user who last updated the request condition.
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * The name of the request condition.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The priority of the request condition. Lower numbers indicate higher priority.
     */
    declare public readonly priority: pulumi.Output<number>;
    declare public readonly requesterSettings: pulumi.Output<outputs.RequestConditionRequesterSettings | undefined>;
    /**
     * The id of the resource in Okta ID format.
     */
    declare public readonly resourceId: pulumi.Output<string>;
    /**
     * Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a RequestCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestConditionArgs | RequestConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestConditionState | undefined;
            resourceInputs["accessDurationSettings"] = state?.accessDurationSettings;
            resourceInputs["accessScopeSettings"] = state?.accessScopeSettings;
            resourceInputs["approvalSequenceId"] = state?.approvalSequenceId;
            resourceInputs["created"] = state?.created;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["description"] = state?.description;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["requesterSettings"] = state?.requesterSettings;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as RequestConditionArgs | undefined;
            if (args?.approvalSequenceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'approvalSequenceId'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["accessDurationSettings"] = args?.accessDurationSettings;
            resourceInputs["accessScopeSettings"] = args?.accessScopeSettings;
            resourceInputs["approvalSequenceId"] = args?.approvalSequenceId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["requesterSettings"] = args?.requesterSettings;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestCondition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestCondition resources.
 */
export interface RequestConditionState {
    /**
     * The access duration settings for the request condition
     */
    accessDurationSettings?: pulumi.Input<inputs.RequestConditionAccessDurationSettings>;
    accessScopeSettings?: pulumi.Input<inputs.RequestConditionAccessScopeSettings>;
    /**
     * The ID of the approval sequence.
     */
    approvalSequenceId?: pulumi.Input<string>;
    /**
     * The date and time when the request condition was created.
     */
    created?: pulumi.Input<string>;
    /**
     * The id of the user who created the request condition.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The description of the request condition.
     */
    description?: pulumi.Input<string>;
    /**
     * The date and time when the request condition was last updated.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The id of the user who last updated the request condition.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * The name of the request condition.
     */
    name?: pulumi.Input<string>;
    /**
     * The priority of the request condition. Lower numbers indicate higher priority.
     */
    priority?: pulumi.Input<number>;
    requesterSettings?: pulumi.Input<inputs.RequestConditionRequesterSettings>;
    /**
     * The id of the resource in Okta ID format.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RequestCondition resource.
 */
export interface RequestConditionArgs {
    /**
     * The access duration settings for the request condition
     */
    accessDurationSettings?: pulumi.Input<inputs.RequestConditionAccessDurationSettings>;
    accessScopeSettings?: pulumi.Input<inputs.RequestConditionAccessScopeSettings>;
    /**
     * The ID of the approval sequence.
     */
    approvalSequenceId: pulumi.Input<string>;
    /**
     * The description of the request condition.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the request condition.
     */
    name?: pulumi.Input<string>;
    /**
     * The priority of the request condition. Lower numbers indicate higher priority.
     */
    priority?: pulumi.Input<number>;
    requesterSettings?: pulumi.Input<inputs.RequestConditionRequesterSettings>;
    /**
     * The id of the resource in Okta ID format.
     */
    resourceId: pulumi.Input<string>;
}
