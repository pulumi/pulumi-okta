// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a sign-on policy rules for the application.
 * > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 * This resource allows you to create and configure a sign-on policy rule for the application.
 * A default or 'Catch-all Rule' sign-on policy rule can be imported and managed as a custom rule.
 * The only difference is that these fields are immutable and can not be managed: 'network_connection', 'network_excludes',
 * 'network_includes', 'platform_include', 'custom_expression', 'device_is_registered', 'device_is_managed', 'users_excluded',
 * 'users_included', 'groups_excluded', 'groups_included', 'user_types_excluded' and 'user_types_included'.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example <policy_id>/<rule_id>
 * ```
 */
export class AppSignonPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing AppSignonPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSignonPolicyRuleState, opts?: pulumi.CustomResourceOptions): AppSignonPolicyRule {
        return new AppSignonPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appSignonPolicyRule:AppSignonPolicyRule';

    /**
     * Returns true if the given object is an instance of AppSignonPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSignonPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSignonPolicyRule.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions: ALLOW or DENY
     */
    declare public readonly access: pulumi.Output<string | undefined>;
    /**
     * Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
     */
    declare public readonly chains: pulumi.Output<string[] | undefined>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
     */
    declare public readonly constraints: pulumi.Output<string[] | undefined>;
    /**
     * This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    declare public readonly customExpression: pulumi.Output<string | undefined>;
    /**
     * List of device assurance IDs to include
     */
    declare public readonly deviceAssurancesIncludeds: pulumi.Output<string[] | undefined>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
     */
    declare public readonly deviceIsManaged: pulumi.Output<boolean | undefined>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
     */
    declare public readonly deviceIsRegistered: pulumi.Output<boolean | undefined>;
    /**
     * The number of factors required to satisfy this assurance level
     */
    declare public readonly factorMode: pulumi.Output<string | undefined>;
    /**
     * List of group IDs to exclude
     */
    declare public readonly groupsExcludeds: pulumi.Output<string[] | undefined>;
    /**
     * List of group IDs to include
     */
    declare public readonly groupsIncludeds: pulumi.Output<string[] | undefined>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
     */
    declare public readonly inactivityPeriod: pulumi.Output<string | undefined>;
    /**
     * Policy Rule Name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
     */
    declare public readonly networkConnection: pulumi.Output<string | undefined>;
    /**
     * The zones to exclude
     */
    declare public readonly networkExcludes: pulumi.Output<string[] | undefined>;
    /**
     * The zones to include
     */
    declare public readonly networkIncludes: pulumi.Output<string[] | undefined>;
    declare public readonly platformIncludes: pulumi.Output<outputs.AppSignonPolicyRulePlatformInclude[] | undefined>;
    /**
     * ID of the policy
     */
    declare public readonly policyId: pulumi.Output<string>;
    /**
     * Priority of the rule.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
     */
    declare public readonly reAuthenticationFrequency: pulumi.Output<string | undefined>;
    /**
     * The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
     */
    declare public readonly riskScore: pulumi.Output<string>;
    /**
     * Status of the rule
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
     */
    declare public /*out*/ readonly system: pulumi.Output<boolean>;
    /**
     * The Verification Method type
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * Set of User Type IDs to exclude
     */
    declare public readonly userTypesExcludeds: pulumi.Output<string[] | undefined>;
    /**
     * Set of User Type IDs to include
     */
    declare public readonly userTypesIncludeds: pulumi.Output<string[] | undefined>;
    /**
     * Set of User IDs to exclude
     */
    declare public readonly usersExcludeds: pulumi.Output<string[] | undefined>;
    /**
     * Set of User IDs to include
     */
    declare public readonly usersIncludeds: pulumi.Output<string[] | undefined>;

    /**
     * Create a AppSignonPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSignonPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSignonPolicyRuleArgs | AppSignonPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSignonPolicyRuleState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["chains"] = state?.chains;
            resourceInputs["constraints"] = state?.constraints;
            resourceInputs["customExpression"] = state?.customExpression;
            resourceInputs["deviceAssurancesIncludeds"] = state?.deviceAssurancesIncludeds;
            resourceInputs["deviceIsManaged"] = state?.deviceIsManaged;
            resourceInputs["deviceIsRegistered"] = state?.deviceIsRegistered;
            resourceInputs["factorMode"] = state?.factorMode;
            resourceInputs["groupsExcludeds"] = state?.groupsExcludeds;
            resourceInputs["groupsIncludeds"] = state?.groupsIncludeds;
            resourceInputs["inactivityPeriod"] = state?.inactivityPeriod;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkConnection"] = state?.networkConnection;
            resourceInputs["networkExcludes"] = state?.networkExcludes;
            resourceInputs["networkIncludes"] = state?.networkIncludes;
            resourceInputs["platformIncludes"] = state?.platformIncludes;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["reAuthenticationFrequency"] = state?.reAuthenticationFrequency;
            resourceInputs["riskScore"] = state?.riskScore;
            resourceInputs["status"] = state?.status;
            resourceInputs["system"] = state?.system;
            resourceInputs["type"] = state?.type;
            resourceInputs["userTypesExcludeds"] = state?.userTypesExcludeds;
            resourceInputs["userTypesIncludeds"] = state?.userTypesIncludeds;
            resourceInputs["usersExcludeds"] = state?.usersExcludeds;
            resourceInputs["usersIncludeds"] = state?.usersIncludeds;
        } else {
            const args = argsOrState as AppSignonPolicyRuleArgs | undefined;
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["chains"] = args?.chains;
            resourceInputs["constraints"] = args?.constraints;
            resourceInputs["customExpression"] = args?.customExpression;
            resourceInputs["deviceAssurancesIncludeds"] = args?.deviceAssurancesIncludeds;
            resourceInputs["deviceIsManaged"] = args?.deviceIsManaged;
            resourceInputs["deviceIsRegistered"] = args?.deviceIsRegistered;
            resourceInputs["factorMode"] = args?.factorMode;
            resourceInputs["groupsExcludeds"] = args?.groupsExcludeds;
            resourceInputs["groupsIncludeds"] = args?.groupsIncludeds;
            resourceInputs["inactivityPeriod"] = args?.inactivityPeriod;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkConnection"] = args?.networkConnection;
            resourceInputs["networkExcludes"] = args?.networkExcludes;
            resourceInputs["networkIncludes"] = args?.networkIncludes;
            resourceInputs["platformIncludes"] = args?.platformIncludes;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["reAuthenticationFrequency"] = args?.reAuthenticationFrequency;
            resourceInputs["riskScore"] = args?.riskScore;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
            resourceInputs["userTypesExcludeds"] = args?.userTypesExcludeds;
            resourceInputs["userTypesIncludeds"] = args?.userTypesIncludeds;
            resourceInputs["usersExcludeds"] = args?.usersExcludeds;
            resourceInputs["usersIncludeds"] = args?.usersIncludeds;
            resourceInputs["system"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSignonPolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSignonPolicyRule resources.
 */
export interface AppSignonPolicyRuleState {
    /**
     * Allow or deny access based on the rule conditions: ALLOW or DENY
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
     */
    chains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
     */
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    customExpression?: pulumi.Input<string>;
    /**
     * List of device assurance IDs to include
     */
    deviceAssurancesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
     */
    deviceIsManaged?: pulumi.Input<boolean>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
     */
    deviceIsRegistered?: pulumi.Input<boolean>;
    /**
     * The number of factors required to satisfy this assurance level
     */
    factorMode?: pulumi.Input<string>;
    /**
     * List of group IDs to exclude
     */
    groupsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of group IDs to include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
     */
    inactivityPeriod?: pulumi.Input<string>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    platformIncludes?: pulumi.Input<pulumi.Input<inputs.AppSignonPolicyRulePlatformInclude>[]>;
    /**
     * ID of the policy
     */
    policyId?: pulumi.Input<string>;
    /**
     * Priority of the rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
     */
    reAuthenticationFrequency?: pulumi.Input<string>;
    /**
     * The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
     */
    riskScore?: pulumi.Input<string>;
    /**
     * Status of the rule
     */
    status?: pulumi.Input<string>;
    /**
     * Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
     */
    system?: pulumi.Input<boolean>;
    /**
     * The Verification Method type
     */
    type?: pulumi.Input<string>;
    /**
     * Set of User Type IDs to exclude
     */
    userTypesExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User Type IDs to include
     */
    userTypesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User IDs to exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User IDs to include
     */
    usersIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AppSignonPolicyRule resource.
 */
export interface AppSignonPolicyRuleArgs {
    /**
     * Allow or deny access based on the rule conditions: ALLOW or DENY
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
     */
    chains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
     */
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    customExpression?: pulumi.Input<string>;
    /**
     * List of device assurance IDs to include
     */
    deviceAssurancesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
     */
    deviceIsManaged?: pulumi.Input<boolean>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
     */
    deviceIsRegistered?: pulumi.Input<boolean>;
    /**
     * The number of factors required to satisfy this assurance level
     */
    factorMode?: pulumi.Input<string>;
    /**
     * List of group IDs to exclude
     */
    groupsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of group IDs to include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
     */
    inactivityPeriod?: pulumi.Input<string>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The zones to exclude
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zones to include
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    platformIncludes?: pulumi.Input<pulumi.Input<inputs.AppSignonPolicyRulePlatformInclude>[]>;
    /**
     * ID of the policy
     */
    policyId: pulumi.Input<string>;
    /**
     * Priority of the rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
     */
    reAuthenticationFrequency?: pulumi.Input<string>;
    /**
     * The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
     */
    riskScore?: pulumi.Input<string>;
    /**
     * Status of the rule
     */
    status?: pulumi.Input<string>;
    /**
     * The Verification Method type
     */
    type?: pulumi.Input<string>;
    /**
     * Set of User Type IDs to exclude
     */
    userTypesExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User Type IDs to include
     */
    userTypesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User IDs to exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of User IDs to include
     */
    usersIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
