// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 *
 * This resource allows you to create and configure a sign-on policy rule for the application.
 *
 * A default or `Catch-all Rule` sign-on policy rule can be imported and managed as a custom rule.
 * The only difference is that these fields are immutable and can not be managed: `networkConnection`, `networkExcludes`,
 * `networkIncludes`, `platformInclude`, `customExpression`, `deviceIsRegistered`, `deviceIsManaged`, `usersExcluded`,
 * `usersIncluded`, `groupsExcluded`, `groupsIncluded`, `userTypesExcluded` and `userTypesIncluded`.
 *
 * ## Example Usage
 *
 * ### Rule with Constraints
 * ### Example 1:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.AppSignonPolicyRule("test", {
 *     policyId: data.okta_app_signon_policy.test.id,
 *     constraints: [JSON.stringify({
 *         knowledge: {
 *             types: ["password"],
 *         },
 *     })],
 * });
 * ```
 *
 * This will create an app sign-on policy rule with the following `THEN` block:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 * ### Example 2:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.AppSignonPolicyRule("test", {
 *     policyId: data.okta_app_signon_policy.test.id,
 *     constraints: [JSON.stringify({
 *         knowledge: {
 *             reauthenticateIn: "PT2H",
 *             types: ["password"],
 *         },
 *         possession: {
 *             deviceBound: "REQUIRED",
 *             hardwareProtection: "REQUIRED",
 *         },
 *     })],
 * });
 * ```
 *
 * This will create an app sign-on policy rule with the following `THEN` block:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * More examples can be
 * found [here](https://developer.okta.com/docs/reference/api/policy/#verification-method-json-examples).
 * ### Complex example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const testSaml = new okta.app.Saml("testSaml", {
 *     label: "testAcc_replace_with_uuid",
 *     ssoUrl: "https://google.com",
 *     recipient: "https://here.com",
 *     destination: "https://its-about-the-journey.com",
 *     audience: "https://audience.com",
 *     subjectNameIdTemplate: `${user.userName}`,
 *     subjectNameIdFormat: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
 *     responseSigned: true,
 *     signatureAlgorithm: "RSA_SHA256",
 *     digestAlgorithm: "SHA256",
 *     honorForceAuthn: false,
 *     authnContextClassRef: "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
 *     singleLogoutIssuer: "https://dunshire.okta.com",
 *     singleLogoutUrl: "https://dunshire.okta.com/logout",
 *     singleLogoutCertificate: `MIIFnDCCA4QCCQDBSLbiON2T1zANBgkqhkiG9w0BAQsFADCBjzELMAkGA1UEBhMCVVMxDjAMBgNV
 * BAgMBU1haW5lMRAwDgYDVQQHDAdDYXJpYm91MRcwFQYDVQQKDA5Tbm93bWFrZXJzIEluYzEUMBIG
 * A1UECwwLRW5naW5lZXJpbmcxDTALBgNVBAMMBFNub3cxIDAeBgkqhkiG9w0BCQEWEWVtYWlsQGV4
 * YW1wbGUuY29tMB4XDTIwMTIwMzIyNDY0M1oXDTMwMTIwMTIyNDY0M1owgY8xCzAJBgNVBAYTAlVT
 * MQ4wDAYDVQQIDAVNYWluZTEQMA4GA1UEBwwHQ2FyaWJvdTEXMBUGA1UECgwOU25vd21ha2VycyBJ
 * bmMxFDASBgNVBAsMC0VuZ2luZWVyaW5nMQ0wCwYDVQQDDARTbm93MSAwHgYJKoZIhvcNAQkBFhFl
 * bWFpbEBleGFtcGxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANMmWDjXPdoa
 * PyzIENqeY9njLan2FqCbQPSestWUUcb6NhDsJVGSQ7XR+ozQA5TaJzbP7cAJUj8vCcbqMZsgOQAu
 * O/pzYyQEKptLmrGvPn7xkJ1A1xLkp2NY18cpDTeUPueJUoidZ9EJwEuyUZIktzxNNU1pA1lGijiu
 * 2XNxs9d9JR/hm3tCu9Im8qLVB4JtX80YUa6QtlRjWR/H8a373AYCOASdoB3c57fIPD8ATDNy2w/c
 * fCVGiyKDMFB+GA/WTsZpOP3iohRp8ltAncSuzypcztb2iE+jijtTsiC9kUA2abAJqqpoCJubNShi
 * Vff4822czpziS44MV2guC9wANi8u3Uyl5MKsU95j01jzadKRP5S+2f0K+n8n4UoV9fnqZFyuGAKd
 * CJi9K6NlSAP+TgPe/JP9FOSuxQOHWJfmdLHdJD+evoKi9E55sr5lRFK0xU1Fj5Ld7zjC0pXPhtJf
 * sgjEZzD433AsHnRzvRT1KSNCPkLYomznZo5n9rWYgCQ8HcytlQDTesmKE+s05E/VSWNtH84XdDrt
 * ieXwfwhHfaABSu+WjZYxi9CXdFCSvXhsgufUcK4FbYAHl/ga/cJxZc52yFC7Pcq0u9O2BSCjYPdQ
 * DAHs9dhT1RhwVLM8RmoAzgxyyzau0gxnAlgSBD9FMW6dXqIHIp8yAAg9cRXhYRTNAgMBAAEwDQYJ
 * KoZIhvcNAQELBQADggIBADofEC1SvG8qa7pmKCjB/E9Sxhk3mvUO9Gq43xzwVb721Ng3VYf4vGU3
 * wLUwJeLt0wggnj26NJweN5T3q9T8UMxZhHSWvttEU3+S1nArRB0beti716HSlOCDx4wTmBu/D1MG
 * t/kZYFJw+zuzvAcbYct2pK69AQhD8xAIbQvqADJI7cCK3yRry+aWtppc58P81KYabUlCfFXfhJ9E
 * P72ffN4jVHpX3lxxYh7FKAdiKbY2FYzjsc7RdgKI1R3iAAZUCGBTvezNzaetGzTUjjl/g1tcVYij
 * ltH9ZOQBPlUMI88lxUxqgRTerpPmAJH00CACx4JFiZrweLM1trZyy06wNDQgLrqHr3EOagBF/O2h
 * hfTehNdVr6iq3YhKWBo4/+RL0RCzHMh4u86VbDDnDn4Y6HzLuyIAtBFoikoKM6UHTOa0Pqv2bBr5
 * wbkRkVUxl9yJJw/HmTCdfnsM9dTOJUKzEglnGF2184Gg+qJDZB6fSf0EAO1F6sTqiSswl+uHQZiy
 * DaZzyU7Gg5seKOZ20zTRaX3Ihj9Zij/ORnrARE7eM/usKMECp+7syUwAUKxDCZkGiUdskmOhhBGL
 * JtbyK3F2UvoJoLsm3pIcvMak9KwMjSTGJB47ABUP1+w+zGcNk0D5Co3IJ6QekiLfWJyQ+kKsWLKt
 * zOYQQatrnBagM7MI2/T4
 * `,
 *     attributeStatements: [{
 *         type: "GROUP",
 *         name: "groups",
 *         filterType: "REGEX",
 *         filterValue: ".*",
 *     }],
 * });
 * const testAppSignonPolicy = okta.getAppSignonPolicyOutput({
 *     appId: testSaml.id,
 * });
 * const testUser: okta.user.User[] = [];
 * for (const range = {value: 0}; range.value < 5; range.value++) {
 *     testUser.push(new okta.user.User(`testUser-${range.value}`, {
 *         firstName: "TestAcc",
 *         lastName: "Smith",
 *         login: `testAcc_${range.value}@example.com`,
 *         email: `testAcc_${range.value}@example.com`,
 *     }));
 * }
 * const _this: okta.group.Group[] = [];
 * for (const range = {value: 0}; range.value < 5; range.value++) {
 *     _this.push(new okta.group.Group(`this-${range.value}`, {description: `testAcc_${range.value}`}));
 * }
 * const testUserType = new okta.user.UserType("testUserType", {
 *     displayName: "Terraform Acceptance Test User Type Updated",
 *     description: "Terraform Acceptance Test User Type Updated",
 * });
 * const testZone = new okta.network.Zone("testZone", {
 *     type: "IP",
 *     gateways: [
 *         "1.2.3.4/24",
 *         "2.3.4.5-2.3.4.15",
 *     ],
 *     proxies: [
 *         "2.2.3.4/24",
 *         "3.3.4.5-3.3.4.15",
 *     ],
 * });
 * const default = okta.user.getUserType({
 *     name: "user",
 * });
 * const testAppSignonPolicyRule = new okta.AppSignonPolicyRule("testAppSignonPolicyRule", {
 *     policyId: testAppSignonPolicy.apply(testAppSignonPolicy => testAppSignonPolicy.id),
 *     access: "ALLOW",
 *     customExpression: "user.status == \"ACTIVE\"",
 *     deviceIsManaged: false,
 *     deviceIsRegistered: true,
 *     factorMode: "2FA",
 *     groupsExcludeds: [
 *         _this[2].id,
 *         _this[3].id,
 *         _this[4].id,
 *     ],
 *     groupsIncludeds: [
 *         _this[0].id,
 *         _this[1].id,
 *     ],
 *     networkConnection: "ZONE",
 *     networkIncludes: [testZone.id],
 *     platformIncludes: [
 *         {
 *             osType: "ANDROID",
 *             type: "MOBILE",
 *         },
 *         {
 *             osType: "IOS",
 *             type: "MOBILE",
 *         },
 *         {
 *             osType: "MACOS",
 *             type: "DESKTOP",
 *         },
 *         {
 *             osType: "OTHER",
 *             type: "DESKTOP",
 *         },
 *         {
 *             osType: "OTHER",
 *             type: "MOBILE",
 *         },
 *         {
 *             osType: "WINDOWS",
 *             type: "DESKTOP",
 *         },
 *     ],
 *     priority: 98,
 *     reAuthenticationFrequency: "PT43800H",
 *     type: "ASSURANCE",
 *     userTypesExcludeds: [testUserType.id],
 *     userTypesIncludeds: [_default.then(_default => _default.id)],
 *     usersExcludeds: [
 *         testUser[2].id,
 *         testUser[3].id,
 *         testUser[4].id,
 *     ],
 *     usersIncludeds: [
 *         testUser[0].id,
 *         testUser[1].id,
 *     ],
 *     constraints: [
 *         JSON.stringify({
 *             knowledge: {
 *                 reauthenticateIn: "PT2H",
 *                 types: ["password"],
 *             },
 *             possession: {
 *                 deviceBound: "REQUIRED",
 *             },
 *         }),
 *         JSON.stringify({
 *             possession: {
 *                 deviceBound: "REQUIRED",
 *                 hardwareProtection: "REQUIRED",
 *                 userPresence: "OPTIONAL",
 *             },
 *         }),
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Okta app sign-on policy rule can be imported via the Okta ID.
 *
 * ```sh
 *  $ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example &#60;policy_id&#62;/&#60;rule_id&#62;
 * ```
 */
export class AppSignonPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing AppSignonPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSignonPolicyRuleState, opts?: pulumi.CustomResourceOptions): AppSignonPolicyRule {
        return new AppSignonPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appSignonPolicyRule:AppSignonPolicyRule';

    /**
     * Returns true if the given object is an instance of AppSignonPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSignonPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSignonPolicyRule.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
     */
    public readonly access!: pulumi.Output<string | undefined>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
     */
    public readonly constraints!: pulumi.Output<string[] | undefined>;
    /**
     * This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    public readonly customExpression!: pulumi.Output<string | undefined>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management
     * system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
     */
    public readonly deviceIsManaged!: pulumi.Output<boolean | undefined>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta
     * Verify that is installed on the device. Can only be set to `true`.
     */
    public readonly deviceIsRegistered!: pulumi.Output<boolean | undefined>;
    /**
     * The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
     */
    public readonly factorMode!: pulumi.Output<string | undefined>;
    /**
     * List of groups IDs to be excluded.
     */
    public readonly groupsExcludeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of groups IDs to be included.
     */
    public readonly groupsIncludeds!: pulumi.Output<string[] | undefined>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
     */
    public readonly inactivityPeriod!: pulumi.Output<string | undefined>;
    /**
     * Name of the policy rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * List of network zones IDs to exclude. Conflicts with `networkIncludes`.
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * List of network zones IDs to include. Conflicts with `networkExcludes`.
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * List of particular platforms or devices to match on.
     */
    public readonly platformIncludes!: pulumi.Output<outputs.AppSignonPolicyRulePlatformInclude[] | undefined>;
    /**
     * ID of the app sign-on policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Priority of the rule.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
     */
    public readonly reAuthenticationFrequency!: pulumi.Output<string | undefined>;
    /**
     * Status of the rule
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * List of user types IDs to be excluded.
     */
    public readonly userTypesExcludeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of user types IDs to be included.
     */
    public readonly userTypesIncludeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of users IDs to be excluded.
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of users IDs to be included.
     */
    public readonly usersIncludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AppSignonPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSignonPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSignonPolicyRuleArgs | AppSignonPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSignonPolicyRuleState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["customExpression"] = state ? state.customExpression : undefined;
            resourceInputs["deviceIsManaged"] = state ? state.deviceIsManaged : undefined;
            resourceInputs["deviceIsRegistered"] = state ? state.deviceIsRegistered : undefined;
            resourceInputs["factorMode"] = state ? state.factorMode : undefined;
            resourceInputs["groupsExcludeds"] = state ? state.groupsExcludeds : undefined;
            resourceInputs["groupsIncludeds"] = state ? state.groupsIncludeds : undefined;
            resourceInputs["inactivityPeriod"] = state ? state.inactivityPeriod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConnection"] = state ? state.networkConnection : undefined;
            resourceInputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            resourceInputs["platformIncludes"] = state ? state.platformIncludes : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["reAuthenticationFrequency"] = state ? state.reAuthenticationFrequency : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTypesExcludeds"] = state ? state.userTypesExcludeds : undefined;
            resourceInputs["userTypesIncludeds"] = state ? state.userTypesIncludeds : undefined;
            resourceInputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
            resourceInputs["usersIncludeds"] = state ? state.usersIncludeds : undefined;
        } else {
            const args = argsOrState as AppSignonPolicyRuleArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["customExpression"] = args ? args.customExpression : undefined;
            resourceInputs["deviceIsManaged"] = args ? args.deviceIsManaged : undefined;
            resourceInputs["deviceIsRegistered"] = args ? args.deviceIsRegistered : undefined;
            resourceInputs["factorMode"] = args ? args.factorMode : undefined;
            resourceInputs["groupsExcludeds"] = args ? args.groupsExcludeds : undefined;
            resourceInputs["groupsIncludeds"] = args ? args.groupsIncludeds : undefined;
            resourceInputs["inactivityPeriod"] = args ? args.inactivityPeriod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConnection"] = args ? args.networkConnection : undefined;
            resourceInputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            resourceInputs["platformIncludes"] = args ? args.platformIncludes : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["reAuthenticationFrequency"] = args ? args.reAuthenticationFrequency : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTypesExcludeds"] = args ? args.userTypesExcludeds : undefined;
            resourceInputs["userTypesIncludeds"] = args ? args.userTypesIncludeds : undefined;
            resourceInputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
            resourceInputs["usersIncludeds"] = args ? args.usersIncludeds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSignonPolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSignonPolicyRule resources.
 */
export interface AppSignonPolicyRuleState {
    /**
     * Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
     */
    access?: pulumi.Input<string>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
     */
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    customExpression?: pulumi.Input<string>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management
     * system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
     */
    deviceIsManaged?: pulumi.Input<boolean>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta
     * Verify that is installed on the device. Can only be set to `true`.
     */
    deviceIsRegistered?: pulumi.Input<boolean>;
    /**
     * The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
     */
    factorMode?: pulumi.Input<string>;
    /**
     * List of groups IDs to be excluded.
     */
    groupsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of groups IDs to be included.
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
     */
    inactivityPeriod?: pulumi.Input<string>;
    /**
     * Name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * List of network zones IDs to exclude. Conflicts with `networkIncludes`.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of network zones IDs to include. Conflicts with `networkExcludes`.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of particular platforms or devices to match on.
     */
    platformIncludes?: pulumi.Input<pulumi.Input<inputs.AppSignonPolicyRulePlatformInclude>[]>;
    /**
     * ID of the app sign-on policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Priority of the rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
     */
    reAuthenticationFrequency?: pulumi.Input<string>;
    /**
     * Status of the rule
     */
    status?: pulumi.Input<string>;
    /**
     * The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
     */
    type?: pulumi.Input<string>;
    /**
     * List of user types IDs to be excluded.
     */
    userTypesExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user types IDs to be included.
     */
    userTypesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users IDs to be excluded.
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users IDs to be included.
     */
    usersIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AppSignonPolicyRule resource.
 */
export interface AppSignonPolicyRuleArgs {
    /**
     * Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
     */
    access?: pulumi.Input<string>;
    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
     */
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     */
    customExpression?: pulumi.Input<string>;
    /**
     * If the device is managed. A device is managed if it's managed by a device management
     * system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
     */
    deviceIsManaged?: pulumi.Input<boolean>;
    /**
     * If the device is registered. A device is registered if the User enrolls with Okta
     * Verify that is installed on the device. Can only be set to `true`.
     */
    deviceIsRegistered?: pulumi.Input<boolean>;
    /**
     * The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
     */
    factorMode?: pulumi.Input<string>;
    /**
     * List of groups IDs to be excluded.
     */
    groupsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of groups IDs to be included.
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
     */
    inactivityPeriod?: pulumi.Input<string>;
    /**
     * Name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * List of network zones IDs to exclude. Conflicts with `networkIncludes`.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of network zones IDs to include. Conflicts with `networkExcludes`.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of particular platforms or devices to match on.
     */
    platformIncludes?: pulumi.Input<pulumi.Input<inputs.AppSignonPolicyRulePlatformInclude>[]>;
    /**
     * ID of the app sign-on policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * Priority of the rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
     */
    reAuthenticationFrequency?: pulumi.Input<string>;
    /**
     * Status of the rule
     */
    status?: pulumi.Input<string>;
    /**
     * The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
     */
    type?: pulumi.Input<string>;
    /**
     * List of user types IDs to be excluded.
     */
    userTypesExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user types IDs to be included.
     */
    userTypesIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users IDs to be excluded.
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users IDs to be included.
     */
    usersIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
