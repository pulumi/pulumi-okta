// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates an event hook. This resource allows you to create and configure an event hook.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.EventHook("example", {
 *     name: "example",
 *     events: [
 *         "user.lifecycle.create",
 *         "user.lifecycle.delete.initiated",
 *     ],
 *     channel: {
 *         type: "HTTP",
 *         version: "1.0.0",
 *         uri: "https://example.com/test",
 *     },
 *     auth: {
 *         type: "HEADER",
 *         key: "Authorization",
 *         value: "123",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/eventHook:EventHook example <hook_id>
 * ```
 */
export class EventHook extends pulumi.CustomResource {
    /**
     * Get an existing EventHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventHookState, opts?: pulumi.CustomResourceOptions): EventHook {
        return new EventHook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/eventHook:EventHook';

    /**
     * Returns true if the given object is an instance of EventHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventHook.__pulumiType;
    }

    /**
     * Details of the endpoint the event hook will hit.   
     * 	- 'version' - (Required) The version of the channel. The currently-supported version is '1.0.0'.
     * 	- 'uri' - (Required) The URI the hook will hit.
     * 	- 'type' - (Optional) The type of hook to trigger. Currently, the only supported type is 'HTTP'.
     */
    declare public readonly auth: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Details of the endpoint the event hook will hit.
     */
    declare public readonly channel: pulumi.Output<{[key: string]: string}>;
    /**
     * The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
     */
    declare public readonly events: pulumi.Output<string[]>;
    /**
     * Map of headers to send along in event hook request.
     */
    declare public readonly headers: pulumi.Output<outputs.EventHookHeader[] | undefined>;
    /**
     * The event hook display name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Default to `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a EventHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventHookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventHookArgs | EventHookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventHookState | undefined;
            resourceInputs["auth"] = state?.auth;
            resourceInputs["channel"] = state?.channel;
            resourceInputs["events"] = state?.events;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["name"] = state?.name;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as EventHookArgs | undefined;
            if (args?.channel === undefined && !opts.urn) {
                throw new Error("Missing required property 'channel'");
            }
            if (args?.events === undefined && !opts.urn) {
                throw new Error("Missing required property 'events'");
            }
            resourceInputs["auth"] = args?.auth;
            resourceInputs["channel"] = args?.channel;
            resourceInputs["events"] = args?.events;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["name"] = args?.name;
            resourceInputs["status"] = args?.status;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventHook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventHook resources.
 */
export interface EventHookState {
    /**
     * Details of the endpoint the event hook will hit.   
     * 	- 'version' - (Required) The version of the channel. The currently-supported version is '1.0.0'.
     * 	- 'uri' - (Required) The URI the hook will hit.
     * 	- 'type' - (Optional) The type of hook to trigger. Currently, the only supported type is 'HTTP'.
     */
    auth?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Details of the endpoint the event hook will hit.
     */
    channel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of headers to send along in event hook request.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.EventHookHeader>[]>;
    /**
     * The event hook display name.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventHook resource.
 */
export interface EventHookArgs {
    /**
     * Details of the endpoint the event hook will hit.   
     * 	- 'version' - (Required) The version of the channel. The currently-supported version is '1.0.0'.
     * 	- 'uri' - (Required) The URI the hook will hit.
     * 	- 'type' - (Optional) The type of hook to trigger. Currently, the only supported type is 'HTTP'.
     */
    auth?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Details of the endpoint the event hook will hit.
     */
    channel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
     */
    events: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of headers to send along in event hook request.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.EventHookHeader>[]>;
    /**
     * The event hook display name.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
