// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get an authenticator by key, name of ID.
 *
 * > **WARNING:** This feature is only available as a part of the
 * Identity Engine. Contact support
 * for further information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getAuthenticator({
 *     key: "security_question",
 * });
 * const test1 = okta.getAuthenticator({
 *     name: "Okta Verify",
 * });
 * ```
 */
export function getAuthenticator(args?: GetAuthenticatorArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthenticatorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAuthenticator:getAuthenticator", {
        "id": args.id,
        "key": args.key,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthenticator.
 */
export interface GetAuthenticatorArgs {
    /**
     * ID of the authenticator.
     */
    id?: string;
    /**
     * A human-readable string that identifies the authenticator.
     */
    key?: string;
    /**
     * Name of the authenticator.
     */
    name?: string;
}

/**
 * A collection of values returned by getAuthenticator.
 */
export interface GetAuthenticatorResult {
    /**
     * ID of the authenticator.
     */
    readonly id?: string;
    /**
     * A human-readable string that identifies the authenticator.
     */
    readonly key?: string;
    /**
     * Name of the authenticator.
     */
    readonly name?: string;
    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     */
    readonly providerAuthPort: number;
    /**
     * Server host name or IP address
     */
    readonly providerHostname: string;
    /**
     * (Specific to `securityKey`) App Instance ID.
     */
    readonly providerInstanceId: string;
    /**
     * Authenticator Provider in JSON format
     */
    readonly providerJson: string;
    /**
     * Provider type.
     */
    readonly providerType: string;
    /**
     * Username template expected by the provider.
     */
    readonly providerUserNameTemplate: string;
    /**
     * Authenticator settings in JSON format
     */
    readonly settings: string;
    /**
     * Status of the Authenticator.
     */
    readonly status: string;
    /**
     * Type of the authenticator
     */
    readonly type: string;
}
/**
 * Get an authenticator by key, name of ID.
 *
 * > **WARNING:** This feature is only available as a part of the
 * Identity Engine. Contact support
 * for further information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getAuthenticator({
 *     key: "security_question",
 * });
 * const test1 = okta.getAuthenticator({
 *     name: "Okta Verify",
 * });
 * ```
 */
export function getAuthenticatorOutput(args?: GetAuthenticatorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthenticatorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getAuthenticator:getAuthenticator", {
        "id": args.id,
        "key": args.key,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthenticator.
 */
export interface GetAuthenticatorOutputArgs {
    /**
     * ID of the authenticator.
     */
    id?: pulumi.Input<string>;
    /**
     * A human-readable string that identifies the authenticator.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the authenticator.
     */
    name?: pulumi.Input<string>;
}
