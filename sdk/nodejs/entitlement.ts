// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages Entitlement. This resource allows you to create and configure an Okta [Entitlement](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlements/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.Entitlement("example", {name: "example"});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/entitlement:Entitlement example <entitlement_id>
 * ```
 */
export class Entitlement extends pulumi.CustomResource {
    /**
     * Get an existing Entitlement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntitlementState, opts?: pulumi.CustomResourceOptions): Entitlement {
        return new Entitlement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/entitlement:Entitlement';

    /**
     * Returns true if the given object is an instance of Entitlement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Entitlement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entitlement.__pulumiType;
    }

    /**
     * The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
     */
    declare public readonly dataType: pulumi.Output<string>;
    /**
     * The description of an entitlement property.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The value of an entitlement property.
     */
    declare public readonly externalValue: pulumi.Output<string>;
    /**
     * The property that determines if the entitlement property can hold multiple values.
     */
    declare public readonly multiValue: pulumi.Output<boolean>;
    /**
     * The display name for an entitlement property.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Representation of a resource
     */
    declare public readonly parent: pulumi.Output<outputs.EntitlementParent | undefined>;
    /**
     * The Okta app instance, in ORN format.
     */
    declare public readonly parentResourceOrn: pulumi.Output<string>;
    /**
     * The value of the entitlement property.
     */
    declare public readonly value: pulumi.Output<string | undefined>;
    declare public readonly values: pulumi.Output<outputs.EntitlementValue[] | undefined>;

    /**
     * Create a Entitlement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntitlementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntitlementArgs | EntitlementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntitlementState | undefined;
            resourceInputs["dataType"] = state?.dataType;
            resourceInputs["description"] = state?.description;
            resourceInputs["externalValue"] = state?.externalValue;
            resourceInputs["multiValue"] = state?.multiValue;
            resourceInputs["name"] = state?.name;
            resourceInputs["parent"] = state?.parent;
            resourceInputs["parentResourceOrn"] = state?.parentResourceOrn;
            resourceInputs["value"] = state?.value;
            resourceInputs["values"] = state?.values;
        } else {
            const args = argsOrState as EntitlementArgs | undefined;
            if (args?.dataType === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataType'");
            }
            if (args?.externalValue === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalValue'");
            }
            if (args?.multiValue === undefined && !opts.urn) {
                throw new Error("Missing required property 'multiValue'");
            }
            resourceInputs["dataType"] = args?.dataType;
            resourceInputs["description"] = args?.description;
            resourceInputs["externalValue"] = args?.externalValue;
            resourceInputs["multiValue"] = args?.multiValue;
            resourceInputs["name"] = args?.name;
            resourceInputs["parent"] = args?.parent;
            resourceInputs["parentResourceOrn"] = args?.parentResourceOrn;
            resourceInputs["value"] = args?.value;
            resourceInputs["values"] = args?.values;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Entitlement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Entitlement resources.
 */
export interface EntitlementState {
    /**
     * The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
     */
    dataType?: pulumi.Input<string>;
    /**
     * The description of an entitlement property.
     */
    description?: pulumi.Input<string>;
    /**
     * The value of an entitlement property.
     */
    externalValue?: pulumi.Input<string>;
    /**
     * The property that determines if the entitlement property can hold multiple values.
     */
    multiValue?: pulumi.Input<boolean>;
    /**
     * The display name for an entitlement property.
     */
    name?: pulumi.Input<string>;
    /**
     * Representation of a resource
     */
    parent?: pulumi.Input<inputs.EntitlementParent>;
    /**
     * The Okta app instance, in ORN format.
     */
    parentResourceOrn?: pulumi.Input<string>;
    /**
     * The value of the entitlement property.
     */
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.EntitlementValue>[]>;
}

/**
 * The set of arguments for constructing a Entitlement resource.
 */
export interface EntitlementArgs {
    /**
     * The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
     */
    dataType: pulumi.Input<string>;
    /**
     * The description of an entitlement property.
     */
    description?: pulumi.Input<string>;
    /**
     * The value of an entitlement property.
     */
    externalValue: pulumi.Input<string>;
    /**
     * The property that determines if the entitlement property can hold multiple values.
     */
    multiValue: pulumi.Input<boolean>;
    /**
     * The display name for an entitlement property.
     */
    name?: pulumi.Input<string>;
    /**
     * Representation of a resource
     */
    parent?: pulumi.Input<inputs.EntitlementParent>;
    /**
     * The Okta app instance, in ORN format.
     */
    parentResourceOrn?: pulumi.Input<string>;
    /**
     * The value of the entitlement property.
     */
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.EntitlementValue>[]>;
}
