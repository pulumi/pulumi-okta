// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve a social IdP from Okta, namely `APPLE`, `FACEBOOK`, `LINKEDIN`, `MICROSOFT`, or  `GOOGLE`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = pulumi.output(okta.idp.getSocial({
 *     name: "My Facebook IdP",
 * }, { async: true }));
 * ```
 */
export function getSocial(args?: GetSocialArgs, opts?: pulumi.InvokeOptions): Promise<GetSocialResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("okta:idp/getSocial:getSocial", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSocial.
 */
export interface GetSocialArgs {
    /**
     * The id of the social idp to retrieve, conflicts with `name`.
     */
    readonly id?: string;
    /**
     * The name of the social idp to retrieve, conflicts with `id`.
     */
    readonly name?: string;
}

/**
 * A collection of values returned by getSocial.
 */
export interface GetSocialResult {
    /**
     * Specifies the account linking action for an IdP user.
     */
    readonly accountLinkAction: string;
    /**
     * Group memberships to determine link candidates.
     */
    readonly accountLinkGroupIncludes: string[];
    /**
     * The method of making an authorization request.
     */
    readonly authorizationBinding: string;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    readonly authorizationUrl: string;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    readonly clientId: string;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    readonly clientSecret: string;
    /**
     * Action for a previously deprovisioned IdP user during authentication.
     */
    readonly deprovisionedAction: string;
    /**
     * Provisioning action for IdP user's group memberships.
     */
    readonly groupsAction: string;
    /**
     * List of Okta Group IDs.
     */
    readonly groupsAssignments: string[];
    /**
     * IdP user profile attribute name for an array value that contains group memberships.
     */
    readonly groupsAttribute: string;
    /**
     * Whitelist of Okta Group identifiers.
     */
    readonly groupsFilters: string[];
    readonly id?: string;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
     */
    readonly issuerMode: string;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    readonly maxClockSkew: number;
    readonly name?: string;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    readonly profileMaster: boolean;
    /**
     * The type of protocol to use.
     */
    readonly protocolType: string;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    readonly provisioningAction: string;
    /**
     * The scopes of the IdP.
     */
    readonly scopes: string[];
    /**
     * Status of the IdP.
     */
    readonly status: string;
    /**
     * Okta user profile attribute for matching transformed IdP username.
     */
    readonly subjectMatchAttribute: string;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username.
     */
    readonly subjectMatchType: string;
    /**
     * Action for a previously suspended IdP user during authentication.
     */
    readonly suspendedAction: string;
    /**
     * The method of making a token request.
     */
    readonly tokenBinding: string;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    readonly tokenUrl: string;
    /**
     * The type of Social IdP.
     */
    readonly type: string;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    readonly usernameTemplate: string;
}
