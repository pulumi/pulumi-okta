// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a SAML Identity Provider. This resource allows you to create and configure a SAML Identity Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.idp.Saml("example", {
 *     name: "testAcc_replace_with_uuid",
 *     acsType: "INSTANCE",
 *     ssoUrl: "https://idp.example.com",
 *     ssoDestination: "https://idp.example.com",
 *     ssoBinding: "HTTP-POST",
 *     usernameTemplate: "idpuser.email",
 *     kid: test.id,
 *     issuer: "https://idp.example.com",
 *     requestSignatureScope: "REQUEST",
 *     responseSignatureScope: "ANY",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:idp/saml:Saml example <idp_id>
 * ```
 */
export class Saml extends pulumi.CustomResource {
    /**
     * Get an existing Saml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlState, opts?: pulumi.CustomResourceOptions): Saml {
        return new Saml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:idp/saml:Saml';

    /**
     * Returns true if the given object is an instance of Saml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Saml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Saml.__pulumiType;
    }

    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    declare public readonly accountLinkAction: pulumi.Output<string | undefined>;
    /**
     * Group memberships to determine link candidates.
     */
    declare public readonly accountLinkGroupIncludes: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly acsBinding: pulumi.Output<string>;
    /**
     * The type of ACS. It can be `INSTANCE` or `ORG`. Default: `INSTANCE`
     */
    declare public readonly acsType: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly audience: pulumi.Output<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    declare public readonly deprovisionedAction: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    declare public readonly groupsAction: pulumi.Output<string | undefined>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    declare public readonly groupsAssignments: pulumi.Output<string[] | undefined>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    declare public readonly groupsAttribute: pulumi.Output<string | undefined>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    declare public readonly groupsFilters: pulumi.Output<string[] | undefined>;
    /**
     * Determines if the IdP should persist account linking when the incoming assertion NameID format is urn:oasis:names:tc:SAML:2.0:nameid-format:persistent
     */
    declare public readonly honorPersistentNameId: pulumi.Output<boolean | undefined>;
    /**
     * URI that identifies the issuer.
     */
    declare public readonly issuer: pulumi.Output<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    declare public readonly issuerMode: pulumi.Output<string | undefined>;
    /**
     * The ID of the signing key.
     */
    declare public readonly kid: pulumi.Output<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    declare public readonly maxClockSkew: pulumi.Output<number | undefined>;
    /**
     * Name of the IdP
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name identifier format to use. By default `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.
     */
    declare public readonly nameFormat: pulumi.Output<string | undefined>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    declare public readonly profileMaster: pulumi.Output<boolean | undefined>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    declare public readonly provisioningAction: pulumi.Output<string | undefined>;
    /**
     * The XML digital Signature Algorithm used when signing an `AuthnRequest` message. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    declare public readonly requestSignatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. It can be `REQUEST` or `NONE`. Default: `REQUEST`
     */
    declare public readonly requestSignatureScope: pulumi.Output<string | undefined>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a `SAMLResponse` message or Assertion element. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    declare public readonly responseSignatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to verify a `SAMLResponse` message or Assertion element XML digital signature. It can be `RESPONSE`, `ASSERTION`, or `ANY`. Default: `ANY`
     */
    declare public readonly responseSignatureScope: pulumi.Output<string | undefined>;
    /**
     * The method of making an SSO request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`. Default: `HTTP-POST`
     */
    declare public readonly ssoBinding: pulumi.Output<string | undefined>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    declare public readonly ssoDestination: pulumi.Output<string | undefined>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    declare public readonly ssoUrl: pulumi.Output<string>;
    /**
     * Default to `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    declare public readonly subjectFilter: pulumi.Output<string | undefined>;
    /**
     * The name format.
     */
    declare public readonly subjectFormats: pulumi.Output<string[] | undefined>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    declare public readonly subjectMatchAttribute: pulumi.Output<string | undefined>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    declare public readonly subjectMatchType: pulumi.Output<string | undefined>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    declare public readonly suspendedAction: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly userTypeId: pulumi.Output<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    declare public readonly usernameTemplate: pulumi.Output<string | undefined>;

    /**
     * Create a Saml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlArgs | SamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlState | undefined;
            resourceInputs["accountLinkAction"] = state?.accountLinkAction;
            resourceInputs["accountLinkGroupIncludes"] = state?.accountLinkGroupIncludes;
            resourceInputs["acsBinding"] = state?.acsBinding;
            resourceInputs["acsType"] = state?.acsType;
            resourceInputs["audience"] = state?.audience;
            resourceInputs["deprovisionedAction"] = state?.deprovisionedAction;
            resourceInputs["groupsAction"] = state?.groupsAction;
            resourceInputs["groupsAssignments"] = state?.groupsAssignments;
            resourceInputs["groupsAttribute"] = state?.groupsAttribute;
            resourceInputs["groupsFilters"] = state?.groupsFilters;
            resourceInputs["honorPersistentNameId"] = state?.honorPersistentNameId;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["issuerMode"] = state?.issuerMode;
            resourceInputs["kid"] = state?.kid;
            resourceInputs["maxClockSkew"] = state?.maxClockSkew;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameFormat"] = state?.nameFormat;
            resourceInputs["profileMaster"] = state?.profileMaster;
            resourceInputs["provisioningAction"] = state?.provisioningAction;
            resourceInputs["requestSignatureAlgorithm"] = state?.requestSignatureAlgorithm;
            resourceInputs["requestSignatureScope"] = state?.requestSignatureScope;
            resourceInputs["responseSignatureAlgorithm"] = state?.responseSignatureAlgorithm;
            resourceInputs["responseSignatureScope"] = state?.responseSignatureScope;
            resourceInputs["ssoBinding"] = state?.ssoBinding;
            resourceInputs["ssoDestination"] = state?.ssoDestination;
            resourceInputs["ssoUrl"] = state?.ssoUrl;
            resourceInputs["status"] = state?.status;
            resourceInputs["subjectFilter"] = state?.subjectFilter;
            resourceInputs["subjectFormats"] = state?.subjectFormats;
            resourceInputs["subjectMatchAttribute"] = state?.subjectMatchAttribute;
            resourceInputs["subjectMatchType"] = state?.subjectMatchType;
            resourceInputs["suspendedAction"] = state?.suspendedAction;
            resourceInputs["type"] = state?.type;
            resourceInputs["userTypeId"] = state?.userTypeId;
            resourceInputs["usernameTemplate"] = state?.usernameTemplate;
        } else {
            const args = argsOrState as SamlArgs | undefined;
            if (args?.issuer === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if (args?.kid === undefined && !opts.urn) {
                throw new Error("Missing required property 'kid'");
            }
            if (args?.ssoUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            resourceInputs["accountLinkAction"] = args?.accountLinkAction;
            resourceInputs["accountLinkGroupIncludes"] = args?.accountLinkGroupIncludes;
            resourceInputs["acsType"] = args?.acsType;
            resourceInputs["deprovisionedAction"] = args?.deprovisionedAction;
            resourceInputs["groupsAction"] = args?.groupsAction;
            resourceInputs["groupsAssignments"] = args?.groupsAssignments;
            resourceInputs["groupsAttribute"] = args?.groupsAttribute;
            resourceInputs["groupsFilters"] = args?.groupsFilters;
            resourceInputs["honorPersistentNameId"] = args?.honorPersistentNameId;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["issuerMode"] = args?.issuerMode;
            resourceInputs["kid"] = args?.kid;
            resourceInputs["maxClockSkew"] = args?.maxClockSkew;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameFormat"] = args?.nameFormat;
            resourceInputs["profileMaster"] = args?.profileMaster;
            resourceInputs["provisioningAction"] = args?.provisioningAction;
            resourceInputs["requestSignatureAlgorithm"] = args?.requestSignatureAlgorithm;
            resourceInputs["requestSignatureScope"] = args?.requestSignatureScope;
            resourceInputs["responseSignatureAlgorithm"] = args?.responseSignatureAlgorithm;
            resourceInputs["responseSignatureScope"] = args?.responseSignatureScope;
            resourceInputs["ssoBinding"] = args?.ssoBinding;
            resourceInputs["ssoDestination"] = args?.ssoDestination;
            resourceInputs["ssoUrl"] = args?.ssoUrl;
            resourceInputs["status"] = args?.status;
            resourceInputs["subjectFilter"] = args?.subjectFilter;
            resourceInputs["subjectFormats"] = args?.subjectFormats;
            resourceInputs["subjectMatchAttribute"] = args?.subjectMatchAttribute;
            resourceInputs["subjectMatchType"] = args?.subjectMatchType;
            resourceInputs["suspendedAction"] = args?.suspendedAction;
            resourceInputs["usernameTemplate"] = args?.usernameTemplate;
            resourceInputs["acsBinding"] = undefined /*out*/;
            resourceInputs["audience"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Saml.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Saml resources.
 */
export interface SamlState {
    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    acsBinding?: pulumi.Input<string>;
    /**
     * The type of ACS. It can be `INSTANCE` or `ORG`. Default: `INSTANCE`
     */
    acsType?: pulumi.Input<string>;
    audience?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if the IdP should persist account linking when the incoming assertion NameID format is urn:oasis:names:tc:SAML:2.0:nameid-format:persistent
     */
    honorPersistentNameId?: pulumi.Input<boolean>;
    /**
     * URI that identifies the issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the signing key.
     */
    kid?: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    /**
     * The name identifier format to use. By default `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.
     */
    nameFormat?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The XML digital Signature Algorithm used when signing an `AuthnRequest` message. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. It can be `REQUEST` or `NONE`. Default: `REQUEST`
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a `SAMLResponse` message or Assertion element. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to verify a `SAMLResponse` message or Assertion element XML digital signature. It can be `RESPONSE`, `ASSERTION`, or `ANY`. Default: `ANY`
     */
    responseSignatureScope?: pulumi.Input<string>;
    /**
     * The method of making an SSO request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`. Default: `HTTP-POST`
     */
    ssoBinding?: pulumi.Input<string>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    ssoDestination?: pulumi.Input<string>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    subjectFilter?: pulumi.Input<string>;
    /**
     * The name format.
     */
    subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    suspendedAction?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userTypeId?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Saml resource.
 */
export interface SamlArgs {
    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of ACS. It can be `INSTANCE` or `ORG`. Default: `INSTANCE`
     */
    acsType?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if the IdP should persist account linking when the incoming assertion NameID format is urn:oasis:names:tc:SAML:2.0:nameid-format:persistent
     */
    honorPersistentNameId?: pulumi.Input<boolean>;
    /**
     * URI that identifies the issuer.
     */
    issuer: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the signing key.
     */
    kid: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    /**
     * The name identifier format to use. By default `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.
     */
    nameFormat?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The XML digital Signature Algorithm used when signing an `AuthnRequest` message. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. It can be `REQUEST` or `NONE`. Default: `REQUEST`
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a `SAMLResponse` message or Assertion element. It can be `SHA-256` or `SHA-1`. Default: `SHA-256`
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to verify a `SAMLResponse` message or Assertion element XML digital signature. It can be `RESPONSE`, `ASSERTION`, or `ANY`. Default: `ANY`
     */
    responseSignatureScope?: pulumi.Input<string>;
    /**
     * The method of making an SSO request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`. Default: `HTTP-POST`
     */
    ssoBinding?: pulumi.Input<string>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    ssoDestination?: pulumi.Input<string>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    ssoUrl: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    subjectFilter?: pulumi.Input<string>;
    /**
     * The name format.
     */
    subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    suspendedAction?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    usernameTemplate?: pulumi.Input<string>;
}
