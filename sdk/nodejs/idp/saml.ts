// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a SAML Identity Provider.
 *
 * This resource allows you to create and configure a SAML Identity Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.idp.Saml("example", {
 *     acsBinding: "HTTP-POST",
 *     acsType: "INSTANCE",
 *     issuer: "https://idp.example.com",
 *     kid: okta_idp_saml_key_test.id,
 *     requestSignatureScope: "REQUEST",
 *     responseSignatureScope: "ANY",
 *     ssoBinding: "HTTP-POST",
 *     ssoDestination: "https://idp.example.com",
 *     ssoUrl: "https://idp.example.com",
 *     usernameTemplate: "idpuser.email",
 * });
 * ```
 */
export class Saml extends pulumi.CustomResource {
    /**
     * Get an existing Saml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlState, opts?: pulumi.CustomResourceOptions): Saml {
        return new Saml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:idp/saml:Saml';

    /**
     * Returns true if the given object is an instance of Saml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Saml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Saml.__pulumiType;
    }

    /**
     * Specifies the account linking action for an IdP user.
     */
    public readonly accountLinkAction!: pulumi.Output<string | undefined>;
    /**
     * Group memberships to determine link candidates.
     */
    public readonly accountLinkGroupIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    public readonly acsBinding!: pulumi.Output<string>;
    /**
     * The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
     */
    public readonly acsType!: pulumi.Output<string | undefined>;
    /**
     * The audience restriction for the IdP.
     */
    public /*out*/ readonly audience!: pulumi.Output<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    public readonly deprovisionedAction!: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    public readonly groupsAction!: pulumi.Output<string | undefined>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    public readonly groupsAssignments!: pulumi.Output<string[] | undefined>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    public readonly groupsAttribute!: pulumi.Output<string | undefined>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    public readonly groupsFilters!: pulumi.Output<string[] | undefined>;
    /**
     * URI that identifies the issuer.
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    /**
     * The ID of the signing key.
     */
    public readonly kid!: pulumi.Output<string>;
    /**
     * The Application's display name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    public readonly nameFormat!: pulumi.Output<string | undefined>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    public readonly profileMaster!: pulumi.Output<boolean | undefined>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    public readonly provisioningAction!: pulumi.Output<string | undefined>;
    /**
     * The XML digital signature algorithm used when signing an AuthnRequest message.
     */
    public readonly requestSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
     */
    public readonly requestSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
     */
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
     */
    public readonly responseSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    public readonly ssoBinding!: pulumi.Output<string | undefined>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    public readonly ssoDestination!: pulumi.Output<string | undefined>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    public readonly ssoUrl!: pulumi.Output<string>;
    /**
     * Status of the IdP.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    public readonly subjectFilter!: pulumi.Output<string | undefined>;
    /**
     * The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    public readonly subjectFormats!: pulumi.Output<string[] | undefined>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    public readonly subjectMatchAttribute!: pulumi.Output<string | undefined>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    public readonly subjectMatchType!: pulumi.Output<string | undefined>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    public readonly suspendedAction!: pulumi.Output<string | undefined>;
    /**
     * Type of the IdP.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a Saml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlArgs | SamlState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SamlState | undefined;
            inputs["accountLinkAction"] = state ? state.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = state ? state.accountLinkGroupIncludes : undefined;
            inputs["acsBinding"] = state ? state.acsBinding : undefined;
            inputs["acsType"] = state ? state.acsType : undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["deprovisionedAction"] = state ? state.deprovisionedAction : undefined;
            inputs["groupsAction"] = state ? state.groupsAction : undefined;
            inputs["groupsAssignments"] = state ? state.groupsAssignments : undefined;
            inputs["groupsAttribute"] = state ? state.groupsAttribute : undefined;
            inputs["groupsFilters"] = state ? state.groupsFilters : undefined;
            inputs["issuer"] = state ? state.issuer : undefined;
            inputs["issuerMode"] = state ? state.issuerMode : undefined;
            inputs["kid"] = state ? state.kid : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameFormat"] = state ? state.nameFormat : undefined;
            inputs["profileMaster"] = state ? state.profileMaster : undefined;
            inputs["provisioningAction"] = state ? state.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = state ? state.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = state ? state.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = state ? state.responseSignatureScope : undefined;
            inputs["ssoBinding"] = state ? state.ssoBinding : undefined;
            inputs["ssoDestination"] = state ? state.ssoDestination : undefined;
            inputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subjectFilter"] = state ? state.subjectFilter : undefined;
            inputs["subjectFormats"] = state ? state.subjectFormats : undefined;
            inputs["subjectMatchAttribute"] = state ? state.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = state ? state.subjectMatchType : undefined;
            inputs["suspendedAction"] = state ? state.suspendedAction : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as SamlArgs | undefined;
            if (!args || args.acsBinding === undefined) {
                throw new Error("Missing required property 'acsBinding'");
            }
            if (!args || args.issuer === undefined) {
                throw new Error("Missing required property 'issuer'");
            }
            if (!args || args.kid === undefined) {
                throw new Error("Missing required property 'kid'");
            }
            if (!args || args.ssoUrl === undefined) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            inputs["accountLinkAction"] = args ? args.accountLinkAction : undefined;
            inputs["accountLinkGroupIncludes"] = args ? args.accountLinkGroupIncludes : undefined;
            inputs["acsBinding"] = args ? args.acsBinding : undefined;
            inputs["acsType"] = args ? args.acsType : undefined;
            inputs["deprovisionedAction"] = args ? args.deprovisionedAction : undefined;
            inputs["groupsAction"] = args ? args.groupsAction : undefined;
            inputs["groupsAssignments"] = args ? args.groupsAssignments : undefined;
            inputs["groupsAttribute"] = args ? args.groupsAttribute : undefined;
            inputs["groupsFilters"] = args ? args.groupsFilters : undefined;
            inputs["issuer"] = args ? args.issuer : undefined;
            inputs["issuerMode"] = args ? args.issuerMode : undefined;
            inputs["kid"] = args ? args.kid : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameFormat"] = args ? args.nameFormat : undefined;
            inputs["profileMaster"] = args ? args.profileMaster : undefined;
            inputs["provisioningAction"] = args ? args.provisioningAction : undefined;
            inputs["requestSignatureAlgorithm"] = args ? args.requestSignatureAlgorithm : undefined;
            inputs["requestSignatureScope"] = args ? args.requestSignatureScope : undefined;
            inputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            inputs["responseSignatureScope"] = args ? args.responseSignatureScope : undefined;
            inputs["ssoBinding"] = args ? args.ssoBinding : undefined;
            inputs["ssoDestination"] = args ? args.ssoDestination : undefined;
            inputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subjectFilter"] = args ? args.subjectFilter : undefined;
            inputs["subjectFormats"] = args ? args.subjectFormats : undefined;
            inputs["subjectMatchAttribute"] = args ? args.subjectMatchAttribute : undefined;
            inputs["subjectMatchType"] = args ? args.subjectMatchType : undefined;
            inputs["suspendedAction"] = args ? args.suspendedAction : undefined;
            inputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
            inputs["audience"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Saml.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Saml resources.
 */
export interface SamlState {
    /**
     * Specifies the account linking action for an IdP user.
     */
    readonly accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    readonly acsBinding?: pulumi.Input<string>;
    /**
     * The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
     */
    readonly acsType?: pulumi.Input<string>;
    /**
     * The audience restriction for the IdP.
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    readonly deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    readonly groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    readonly groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URI that identifies the issuer.
     */
    readonly issuer?: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
     */
    readonly issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the signing key.
     */
    readonly kid?: pulumi.Input<string>;
    /**
     * The Application's display name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    readonly nameFormat?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    readonly profileMaster?: pulumi.Input<boolean>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * The XML digital signature algorithm used when signing an AuthnRequest message.
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    /**
     * The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    readonly ssoBinding?: pulumi.Input<string>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    readonly ssoDestination?: pulumi.Input<string>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    readonly ssoUrl?: pulumi.Input<string>;
    /**
     * Status of the IdP.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    readonly subjectFilter?: pulumi.Input<string>;
    /**
     * The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    readonly subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    readonly subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    readonly suspendedAction?: pulumi.Input<string>;
    /**
     * Type of the IdP.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    readonly usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Saml resource.
 */
export interface SamlArgs {
    /**
     * Specifies the account linking action for an IdP user.
     */
    readonly accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    readonly accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    readonly acsBinding: pulumi.Input<string>;
    /**
     * The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
     */
    readonly acsType?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    readonly deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    readonly groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    readonly groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    readonly groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    readonly groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URI that identifies the issuer.
     */
    readonly issuer: pulumi.Input<string>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
     */
    readonly issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the signing key.
     */
    readonly kid: pulumi.Input<string>;
    /**
     * The Application's display name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    readonly nameFormat?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    readonly profileMaster?: pulumi.Input<boolean>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    readonly provisioningAction?: pulumi.Input<string>;
    /**
     * The XML digital signature algorithm used when signing an AuthnRequest message.
     */
    readonly requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
     */
    readonly requestSignatureScope?: pulumi.Input<string>;
    /**
     * The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
     */
    readonly responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
     */
    readonly responseSignatureScope?: pulumi.Input<string>;
    /**
     * The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    readonly ssoBinding?: pulumi.Input<string>;
    /**
     * URI reference indicating the address to which the AuthnRequest message is sent.
     */
    readonly ssoDestination?: pulumi.Input<string>;
    /**
     * URL of binding-specific endpoint to send an AuthnRequest message to IdP.
     */
    readonly ssoUrl: pulumi.Input<string>;
    /**
     * Status of the IdP.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    readonly subjectFilter?: pulumi.Input<string>;
    /**
     * The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
     */
    readonly subjectFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    readonly subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    readonly subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    readonly suspendedAction?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    readonly usernameTemplate?: pulumi.Input<string>;
}
