// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a SAML Identity Provider Signing Key.
 *
 * This resource allows you to create and configure a SAML Identity Provider Signing Key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example1 = new okta.idp.SamlKey("example_1", {
 *     x5cs: [okta_app_saml_example.certificate],
 * });
 * const example2 = new okta.idp.SamlKey("example_2", {
 *     x5cs: [`MIIDqDCCApCgAwIBAgIGAVGNO4qeMA0GCSqGSIb3DQEBBQUAMIGUMQswCQYDVQQGEwJVUzETMBEG
 * A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU
 * MBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGJhbGFjb21wdGVzdDEcMBoGCSqGSIb3DQEJ
 * ARYNaW5mb0Bva3RhLmNvbTAeFw0xNTEyMTAxODUwMDhaFw0xNzEyMTAxODUxMDdaMIGUMQswCQYD
 * VQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsG
 * A1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGJhbGFjb21wdGVzdDEc
 * MBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
 * ggEBALAakG48bgcTWHdwmVLHig0mkiRejxIVm3wbzrNSJcBruTq2zCYZ1rGfVxTYON8kJqvkXPmv
 * kzWKhpEkvhubL+mx29XpXY0AsNIfgcm5xIV56yhXSvlMdqzGo3ciRwoACaF+ClNLxmXK9UTZD89B
 * bVVGCG5AEvja0eCQ0GYsO5i9aSI5aTroab8Aew31PuWl/RGQWmjVy8+7P4wwkKKJNKCpxMYDlhfa
 * WRp0zwUSbUCO0qEyeAYdZx6CLES4FGrDi/7D6G+ewWC+kbz1tL1XpF2Dcg3+IOlHrV6VWzz3rG39
 * v9zFIncjvoQJFDGWhpqGqcmXvgH0Ze3SVcVF01T+bK0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEA
 * AHmnSZ4imjNrIf9wxfQIcqHXEBoJ+oJtd59cw1Ur/YQY9pKXxoglqCQ54ZmlIf4GghlcZhslLO+m
 * NdkQVwSmWMh6KLxVM18/xAkq8zyKbMbvQnTjFB7x45bgokwbjhivWqrB5LYHHCVN7k/8mKlS4eCK
 * Ci6RGEmErjojr4QN2xV0qAqP6CcGANgpepsQJCzlWucMFKAh0x9Kl8fmiQodfyLXyrebYsVnLrMf
 * jxE1b6dg4jKvv975tf5wreQSYZ7m//g3/+NnuDKkN/03HqhV7hTNi1fyctXk8I5Nwgyr+pT5LT2k
 * YoEdncuy+GQGzE9yLOhC4HNfHQXpqp2tMPdRlw==`],
 * });
 * ```
 *
 * ## Import
 *
 * A SAML IdP Signing Key can be imported via the key id.
 *
 * ```sh
 *  $ pulumi import okta:idp/samlKey:SamlKey example <key id>
 * ```
 */
export class SamlKey extends pulumi.CustomResource {
    /**
     * Get an existing SamlKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlKeyState, opts?: pulumi.CustomResourceOptions): SamlKey {
        return new SamlKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:idp/samlKey:SamlKey';

    /**
     * Returns true if the given object is an instance of SamlKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlKey.__pulumiType;
    }

    /**
     * Date created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Date the cert expires.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * Key ID.
     */
    public /*out*/ readonly kid!: pulumi.Output<string>;
    /**
     * Identifies the cryptographic algorithm family used with the key.
     */
    public /*out*/ readonly kty!: pulumi.Output<string>;
    /**
     * Intended use of the public key.
     */
    public /*out*/ readonly use!: pulumi.Output<string>;
    /**
     * base64-encoded X.509 certificate chain with DER encoding.
     */
    public readonly x5cs!: pulumi.Output<string[]>;
    /**
     * base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
     */
    public /*out*/ readonly x5tS256!: pulumi.Output<string>;

    /**
     * Create a SamlKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlKeyArgs | SamlKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlKeyState | undefined;
            inputs["created"] = state ? state.created : undefined;
            inputs["expiresAt"] = state ? state.expiresAt : undefined;
            inputs["kid"] = state ? state.kid : undefined;
            inputs["kty"] = state ? state.kty : undefined;
            inputs["use"] = state ? state.use : undefined;
            inputs["x5cs"] = state ? state.x5cs : undefined;
            inputs["x5tS256"] = state ? state.x5tS256 : undefined;
        } else {
            const args = argsOrState as SamlKeyArgs | undefined;
            if ((!args || args.x5cs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'x5cs'");
            }
            inputs["x5cs"] = args ? args.x5cs : undefined;
            inputs["created"] = undefined /*out*/;
            inputs["expiresAt"] = undefined /*out*/;
            inputs["kid"] = undefined /*out*/;
            inputs["kty"] = undefined /*out*/;
            inputs["use"] = undefined /*out*/;
            inputs["x5tS256"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SamlKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlKey resources.
 */
export interface SamlKeyState {
    /**
     * Date created.
     */
    readonly created?: pulumi.Input<string>;
    /**
     * Date the cert expires.
     */
    readonly expiresAt?: pulumi.Input<string>;
    /**
     * Key ID.
     */
    readonly kid?: pulumi.Input<string>;
    /**
     * Identifies the cryptographic algorithm family used with the key.
     */
    readonly kty?: pulumi.Input<string>;
    /**
     * Intended use of the public key.
     */
    readonly use?: pulumi.Input<string>;
    /**
     * base64-encoded X.509 certificate chain with DER encoding.
     */
    readonly x5cs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
     */
    readonly x5tS256?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlKey resource.
 */
export interface SamlKeyArgs {
    /**
     * base64-encoded X.509 certificate chain with DER encoding.
     */
    readonly x5cs: pulumi.Input<pulumi.Input<string>[]>;
}
