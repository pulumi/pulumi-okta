// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Get a OIDC IdP from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.idp.getOidc({
 *     name: "Example Provider",
 * });
 * ```
 */
export function getOidc(args?: GetOidcArgs, opts?: pulumi.InvokeOptions): Promise<GetOidcResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:idp/getOidc:getOidc", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getOidc.
 */
export interface GetOidcArgs {
    /**
     * Id of idp.
     */
    id?: string;
    /**
     * Name of the idp.
     */
    name?: string;
}

/**
 * A collection of values returned by getOidc.
 */
export interface GetOidcResult {
    /**
     * The method of making an authorization request.
     */
    readonly authorizationBinding: string;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    readonly authorizationUrl: string;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    readonly clientId: string;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    readonly clientSecret: string;
    /**
     * Id of idp.
     */
    readonly id?: string;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic.
     */
    readonly issuerMode: string;
    /**
     * URI that identifies the issuer.
     */
    readonly issuerUrl: string;
    /**
     * The method of making a request for the OIDC JWKS.
     */
    readonly jwksBinding: string;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    readonly jwksUrl: string;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    readonly maxClockSkew: number;
    /**
     * Name of the idp.
     */
    readonly name?: string;
    /**
     * The type of protocol to use.
     */
    readonly protocolType: string;
    /**
     * The scopes of the IdP.
     */
    readonly scopes: string[];
    /**
     * The method of making a token request.
     */
    readonly tokenBinding: string;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    readonly tokenUrl: string;
    /**
     * Type of idp.
     */
    readonly type: string;
    /**
     * The method of making a user info request.
     */
    readonly userInfoBinding: string;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    readonly userInfoUrl: string;
}
/**
 * Get a OIDC IdP from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.idp.getOidc({
 *     name: "Example Provider",
 * });
 * ```
 */
export function getOidcOutput(args?: GetOidcOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOidcResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:idp/getOidc:getOidc", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getOidc.
 */
export interface GetOidcOutputArgs {
    /**
     * Id of idp.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the idp.
     */
    name?: pulumi.Input<string>;
}
