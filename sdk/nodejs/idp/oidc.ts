// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an OIDC Identity Provider. This resource allows you to create and configure an OIDC Identity Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.idp.Oidc("example", {
 *     name: "example",
 *     authorizationUrl: "https://idp.example.com/authorize",
 *     authorizationBinding: "HTTP-REDIRECT",
 *     tokenUrl: "https://idp.example.com/token",
 *     tokenBinding: "HTTP-POST",
 *     userInfoUrl: "https://idp.example.com/userinfo",
 *     userInfoBinding: "HTTP-REDIRECT",
 *     jwksUrl: "https://idp.example.com/keys",
 *     jwksBinding: "HTTP-REDIRECT",
 *     scopes: ["openid"],
 *     clientId: "efg456",
 *     clientSecret: "efg456",
 *     issuerUrl: "https://id.example.com",
 *     usernameTemplate: "idpuser.email",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:idp/oidc:Oidc example <idp_id>
 * ```
 */
export class Oidc extends pulumi.CustomResource {
    /**
     * Get an existing Oidc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcState, opts?: pulumi.CustomResourceOptions): Oidc {
        return new Oidc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:idp/oidc:Oidc';

    /**
     * Returns true if the given object is an instance of Oidc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Oidc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Oidc.__pulumiType;
    }

    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    declare public readonly accountLinkAction: pulumi.Output<string | undefined>;
    /**
     * Group memberships to determine link candidates.
     */
    declare public readonly accountLinkGroupIncludes: pulumi.Output<string[] | undefined>;
    /**
     * The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    declare public readonly authorizationBinding: pulumi.Output<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    declare public readonly authorizationUrl: pulumi.Output<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    declare public readonly clientSecret: pulumi.Output<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    declare public readonly deprovisionedAction: pulumi.Output<string | undefined>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    declare public readonly filter: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    declare public readonly groupsAction: pulumi.Output<string | undefined>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    declare public readonly groupsAssignments: pulumi.Output<string[] | undefined>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    declare public readonly groupsAttribute: pulumi.Output<string | undefined>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    declare public readonly groupsFilters: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    declare public readonly issuerMode: pulumi.Output<string | undefined>;
    /**
     * URI that identifies the issuer.
     */
    declare public readonly issuerUrl: pulumi.Output<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
     */
    declare public readonly jwksBinding: pulumi.Output<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    declare public readonly jwksUrl: pulumi.Output<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    declare public readonly maxClockSkew: pulumi.Output<number | undefined>;
    /**
     * Name of the IdP
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
     */
    declare public readonly pkceRequired: pulumi.Output<boolean | undefined>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    declare public readonly profileMaster: pulumi.Output<boolean | undefined>;
    /**
     * The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
     */
    declare public readonly protocolType: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    declare public readonly provisioningAction: pulumi.Output<string | undefined>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    declare public readonly requestSignatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
     */
    declare public readonly requestSignatureScope: pulumi.Output<string | undefined>;
    /**
     * The scopes of the IdP.
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * Default to `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    declare public readonly subjectMatchAttribute: pulumi.Output<string | undefined>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    declare public readonly subjectMatchType: pulumi.Output<string | undefined>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    declare public readonly suspendedAction: pulumi.Output<string | undefined>;
    /**
     * The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    declare public readonly tokenBinding: pulumi.Output<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    declare public readonly tokenUrl: pulumi.Output<string>;
    /**
     * Type of OIDC IdP.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public readonly userInfoBinding: pulumi.Output<string | undefined>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    declare public readonly userInfoUrl: pulumi.Output<string | undefined>;
    /**
     * User type ID. Can be used as `targetId` in the `okta.profile.Mapping` resource.
     */
    declare public /*out*/ readonly userTypeId: pulumi.Output<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    declare public readonly usernameTemplate: pulumi.Output<string | undefined>;

    /**
     * Create a Oidc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcArgs | OidcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcState | undefined;
            resourceInputs["accountLinkAction"] = state?.accountLinkAction;
            resourceInputs["accountLinkGroupIncludes"] = state?.accountLinkGroupIncludes;
            resourceInputs["authorizationBinding"] = state?.authorizationBinding;
            resourceInputs["authorizationUrl"] = state?.authorizationUrl;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["deprovisionedAction"] = state?.deprovisionedAction;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["groupsAction"] = state?.groupsAction;
            resourceInputs["groupsAssignments"] = state?.groupsAssignments;
            resourceInputs["groupsAttribute"] = state?.groupsAttribute;
            resourceInputs["groupsFilters"] = state?.groupsFilters;
            resourceInputs["issuerMode"] = state?.issuerMode;
            resourceInputs["issuerUrl"] = state?.issuerUrl;
            resourceInputs["jwksBinding"] = state?.jwksBinding;
            resourceInputs["jwksUrl"] = state?.jwksUrl;
            resourceInputs["maxClockSkew"] = state?.maxClockSkew;
            resourceInputs["name"] = state?.name;
            resourceInputs["pkceRequired"] = state?.pkceRequired;
            resourceInputs["profileMaster"] = state?.profileMaster;
            resourceInputs["protocolType"] = state?.protocolType;
            resourceInputs["provisioningAction"] = state?.provisioningAction;
            resourceInputs["requestSignatureAlgorithm"] = state?.requestSignatureAlgorithm;
            resourceInputs["requestSignatureScope"] = state?.requestSignatureScope;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["status"] = state?.status;
            resourceInputs["subjectMatchAttribute"] = state?.subjectMatchAttribute;
            resourceInputs["subjectMatchType"] = state?.subjectMatchType;
            resourceInputs["suspendedAction"] = state?.suspendedAction;
            resourceInputs["tokenBinding"] = state?.tokenBinding;
            resourceInputs["tokenUrl"] = state?.tokenUrl;
            resourceInputs["type"] = state?.type;
            resourceInputs["userInfoBinding"] = state?.userInfoBinding;
            resourceInputs["userInfoUrl"] = state?.userInfoUrl;
            resourceInputs["userTypeId"] = state?.userTypeId;
            resourceInputs["usernameTemplate"] = state?.usernameTemplate;
        } else {
            const args = argsOrState as OidcArgs | undefined;
            if (args?.authorizationBinding === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationBinding'");
            }
            if (args?.authorizationUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.clientSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (args?.issuerUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if (args?.jwksBinding === undefined && !opts.urn) {
                throw new Error("Missing required property 'jwksBinding'");
            }
            if (args?.jwksUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'jwksUrl'");
            }
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if (args?.tokenBinding === undefined && !opts.urn) {
                throw new Error("Missing required property 'tokenBinding'");
            }
            if (args?.tokenUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            resourceInputs["accountLinkAction"] = args?.accountLinkAction;
            resourceInputs["accountLinkGroupIncludes"] = args?.accountLinkGroupIncludes;
            resourceInputs["authorizationBinding"] = args?.authorizationBinding;
            resourceInputs["authorizationUrl"] = args?.authorizationUrl;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["deprovisionedAction"] = args?.deprovisionedAction;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["groupsAction"] = args?.groupsAction;
            resourceInputs["groupsAssignments"] = args?.groupsAssignments;
            resourceInputs["groupsAttribute"] = args?.groupsAttribute;
            resourceInputs["groupsFilters"] = args?.groupsFilters;
            resourceInputs["issuerMode"] = args?.issuerMode;
            resourceInputs["issuerUrl"] = args?.issuerUrl;
            resourceInputs["jwksBinding"] = args?.jwksBinding;
            resourceInputs["jwksUrl"] = args?.jwksUrl;
            resourceInputs["maxClockSkew"] = args?.maxClockSkew;
            resourceInputs["name"] = args?.name;
            resourceInputs["pkceRequired"] = args?.pkceRequired;
            resourceInputs["profileMaster"] = args?.profileMaster;
            resourceInputs["protocolType"] = args?.protocolType;
            resourceInputs["provisioningAction"] = args?.provisioningAction;
            resourceInputs["requestSignatureAlgorithm"] = args?.requestSignatureAlgorithm;
            resourceInputs["requestSignatureScope"] = args?.requestSignatureScope;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["status"] = args?.status;
            resourceInputs["subjectMatchAttribute"] = args?.subjectMatchAttribute;
            resourceInputs["subjectMatchType"] = args?.subjectMatchType;
            resourceInputs["suspendedAction"] = args?.suspendedAction;
            resourceInputs["tokenBinding"] = args?.tokenBinding;
            resourceInputs["tokenUrl"] = args?.tokenUrl;
            resourceInputs["userInfoBinding"] = args?.userInfoBinding;
            resourceInputs["userInfoUrl"] = args?.userInfoUrl;
            resourceInputs["usernameTemplate"] = args?.usernameTemplate;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Oidc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Oidc resources.
 */
export interface OidcState {
    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    authorizationBinding?: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    authorizationUrl?: pulumi.Input<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    filter?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * URI that identifies the issuer.
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
     */
    jwksBinding?: pulumi.Input<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    /**
     * Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
     */
    pkceRequired?: pulumi.Input<boolean>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
     */
    protocolType?: pulumi.Input<string>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The scopes of the IdP.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    suspendedAction?: pulumi.Input<string>;
    /**
     * The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    tokenBinding?: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * Type of OIDC IdP.
     */
    type?: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * User type ID. Can be used as `targetId` in the `okta.profile.Mapping` resource.
     */
    userTypeId?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Oidc resource.
 */
export interface OidcArgs {
    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    authorizationBinding: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    authorizationUrl: pulumi.Input<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Optional regular expression pattern used to filter untrusted IdP usernames.
     */
    filter?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * URI that identifies the issuer.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
     */
    jwksBinding: pulumi.Input<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    jwksUrl: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * Name of the IdP
     */
    name?: pulumi.Input<string>;
    /**
     * Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
     */
    pkceRequired?: pulumi.Input<boolean>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
     */
    protocolType?: pulumi.Input<string>;
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The scopes of the IdP.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     */
    suspendedAction?: pulumi.Input<string>;
    /**
     * The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     */
    tokenBinding: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    tokenUrl: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     */
    usernameTemplate?: pulumi.Input<string>;
}
