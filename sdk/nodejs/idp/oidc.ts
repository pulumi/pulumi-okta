// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an OIDC Identity Provider.
 *
 * This resource allows you to create and configure an OIDC Identity Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.idp.Oidc("example", {
 *     authorizationBinding: "HTTP-REDIRECT",
 *     authorizationUrl: "https://idp.example.com/authorize",
 *     clientId: "efg456",
 *     clientSecret: "efg456",
 *     issuerUrl: "https://id.example.com",
 *     jwksBinding: "HTTP-REDIRECT",
 *     jwksUrl: "https://idp.example.com/keys",
 *     scopes: ["openid"],
 *     tokenBinding: "HTTP-POST",
 *     tokenUrl: "https://idp.example.com/token",
 *     userInfoBinding: "HTTP-REDIRECT",
 *     userInfoUrl: "https://idp.example.com/userinfo",
 *     usernameTemplate: "idpuser.email",
 * });
 * ```
 *
 * ## Import
 *
 * An OIDC IdP can be imported via the Okta ID.
 *
 * ```sh
 * $ pulumi import okta:idp/oidc:Oidc example &#60;idp id&#62;
 * ```
 */
export class Oidc extends pulumi.CustomResource {
    /**
     * Get an existing Oidc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcState, opts?: pulumi.CustomResourceOptions): Oidc {
        return new Oidc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:idp/oidc:Oidc';

    /**
     * Returns true if the given object is an instance of Oidc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Oidc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Oidc.__pulumiType;
    }

    /**
     * Specifies the account linking action for an IdP user.
     */
    public readonly accountLinkAction!: pulumi.Output<string | undefined>;
    /**
     * Group memberships to determine link candidates.
     */
    public readonly accountLinkGroupIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * The method of making an authorization request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    public readonly authorizationBinding!: pulumi.Output<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    public readonly authorizationUrl!: pulumi.Output<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    public readonly deprovisionedAction!: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    public readonly groupsAction!: pulumi.Output<string | undefined>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    public readonly groupsAssignments!: pulumi.Output<string[] | undefined>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    public readonly groupsAttribute!: pulumi.Output<string | undefined>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    public readonly groupsFilters!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `"ORG_URL"`, `"CUSTOM_URL"`, or `"DYNAMIC"`.
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    /**
     * URI that identifies the issuer.
     */
    public readonly issuerUrl!: pulumi.Output<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    public readonly jwksBinding!: pulumi.Output<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    public readonly jwksUrl!: pulumi.Output<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    public readonly maxClockSkew!: pulumi.Output<number | undefined>;
    /**
     * The Application's display name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    public readonly profileMaster!: pulumi.Output<boolean | undefined>;
    /**
     * The type of protocol to use. It can be `"OIDC"` or `"OAUTH2"`.
     */
    public readonly protocolType!: pulumi.Output<string | undefined>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    public readonly provisioningAction!: pulumi.Output<string | undefined>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `"HS256"`. It can be `"HS256"`, `"HS384"`, `"HS512"`, `"SHA-256"`. `"RS256"`, `"RS384"`, or `"RS512"`. NOTE: `"SHA-256"` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    public readonly requestSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `"REQUEST"`. It can be `"REQUEST"` or `"NONE"`.
     */
    public readonly requestSignatureScope!: pulumi.Output<string | undefined>;
    /**
     * The scopes of the IdP.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Status of the IdP.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    public readonly subjectMatchAttribute!: pulumi.Output<string | undefined>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    public readonly subjectMatchType!: pulumi.Output<string | undefined>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    public readonly suspendedAction!: pulumi.Output<string | undefined>;
    /**
     * The method of making a token request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    public readonly tokenBinding!: pulumi.Output<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    public readonly tokenUrl!: pulumi.Output<string>;
    /**
     * Type of OIDC IdP.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly userInfoBinding!: pulumi.Output<string | undefined>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    public readonly userInfoUrl!: pulumi.Output<string | undefined>;
    /**
     * User type ID. Can be used as `targetId` in the `okta.profile.Mapping` resource.
     */
    public /*out*/ readonly userTypeId!: pulumi.Output<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a Oidc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcArgs | OidcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcState | undefined;
            resourceInputs["accountLinkAction"] = state ? state.accountLinkAction : undefined;
            resourceInputs["accountLinkGroupIncludes"] = state ? state.accountLinkGroupIncludes : undefined;
            resourceInputs["authorizationBinding"] = state ? state.authorizationBinding : undefined;
            resourceInputs["authorizationUrl"] = state ? state.authorizationUrl : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["deprovisionedAction"] = state ? state.deprovisionedAction : undefined;
            resourceInputs["groupsAction"] = state ? state.groupsAction : undefined;
            resourceInputs["groupsAssignments"] = state ? state.groupsAssignments : undefined;
            resourceInputs["groupsAttribute"] = state ? state.groupsAttribute : undefined;
            resourceInputs["groupsFilters"] = state ? state.groupsFilters : undefined;
            resourceInputs["issuerMode"] = state ? state.issuerMode : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["jwksBinding"] = state ? state.jwksBinding : undefined;
            resourceInputs["jwksUrl"] = state ? state.jwksUrl : undefined;
            resourceInputs["maxClockSkew"] = state ? state.maxClockSkew : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileMaster"] = state ? state.profileMaster : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["provisioningAction"] = state ? state.provisioningAction : undefined;
            resourceInputs["requestSignatureAlgorithm"] = state ? state.requestSignatureAlgorithm : undefined;
            resourceInputs["requestSignatureScope"] = state ? state.requestSignatureScope : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectMatchAttribute"] = state ? state.subjectMatchAttribute : undefined;
            resourceInputs["subjectMatchType"] = state ? state.subjectMatchType : undefined;
            resourceInputs["suspendedAction"] = state ? state.suspendedAction : undefined;
            resourceInputs["tokenBinding"] = state ? state.tokenBinding : undefined;
            resourceInputs["tokenUrl"] = state ? state.tokenUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userInfoBinding"] = state ? state.userInfoBinding : undefined;
            resourceInputs["userInfoUrl"] = state ? state.userInfoUrl : undefined;
            resourceInputs["userTypeId"] = state ? state.userTypeId : undefined;
            resourceInputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as OidcArgs | undefined;
            if ((!args || args.authorizationBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationBinding'");
            }
            if ((!args || args.authorizationUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.jwksBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwksBinding'");
            }
            if ((!args || args.jwksUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwksUrl'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.tokenBinding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenBinding'");
            }
            if ((!args || args.tokenUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            resourceInputs["accountLinkAction"] = args ? args.accountLinkAction : undefined;
            resourceInputs["accountLinkGroupIncludes"] = args ? args.accountLinkGroupIncludes : undefined;
            resourceInputs["authorizationBinding"] = args ? args.authorizationBinding : undefined;
            resourceInputs["authorizationUrl"] = args ? args.authorizationUrl : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["deprovisionedAction"] = args ? args.deprovisionedAction : undefined;
            resourceInputs["groupsAction"] = args ? args.groupsAction : undefined;
            resourceInputs["groupsAssignments"] = args ? args.groupsAssignments : undefined;
            resourceInputs["groupsAttribute"] = args ? args.groupsAttribute : undefined;
            resourceInputs["groupsFilters"] = args ? args.groupsFilters : undefined;
            resourceInputs["issuerMode"] = args ? args.issuerMode : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["jwksBinding"] = args ? args.jwksBinding : undefined;
            resourceInputs["jwksUrl"] = args ? args.jwksUrl : undefined;
            resourceInputs["maxClockSkew"] = args ? args.maxClockSkew : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profileMaster"] = args ? args.profileMaster : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["provisioningAction"] = args ? args.provisioningAction : undefined;
            resourceInputs["requestSignatureAlgorithm"] = args ? args.requestSignatureAlgorithm : undefined;
            resourceInputs["requestSignatureScope"] = args ? args.requestSignatureScope : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subjectMatchAttribute"] = args ? args.subjectMatchAttribute : undefined;
            resourceInputs["subjectMatchType"] = args ? args.subjectMatchType : undefined;
            resourceInputs["suspendedAction"] = args ? args.suspendedAction : undefined;
            resourceInputs["tokenBinding"] = args ? args.tokenBinding : undefined;
            resourceInputs["tokenUrl"] = args ? args.tokenUrl : undefined;
            resourceInputs["userInfoBinding"] = args ? args.userInfoBinding : undefined;
            resourceInputs["userInfoUrl"] = args ? args.userInfoUrl : undefined;
            resourceInputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Oidc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Oidc resources.
 */
export interface OidcState {
    /**
     * Specifies the account linking action for an IdP user.
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an authorization request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    authorizationBinding?: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    authorizationUrl?: pulumi.Input<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `"ORG_URL"`, `"CUSTOM_URL"`, or `"DYNAMIC"`.
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * URI that identifies the issuer.
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    jwksBinding?: pulumi.Input<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * The Application's display name.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * The type of protocol to use. It can be `"OIDC"` or `"OAUTH2"`.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `"HS256"`. It can be `"HS256"`, `"HS384"`, `"HS512"`, `"SHA-256"`. `"RS256"`, `"RS384"`, or `"RS512"`. NOTE: `"SHA-256"` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `"REQUEST"`. It can be `"REQUEST"` or `"NONE"`.
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The scopes of the IdP.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the IdP.
     */
    status?: pulumi.Input<string>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    suspendedAction?: pulumi.Input<string>;
    /**
     * The method of making a token request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    tokenBinding?: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * Type of OIDC IdP.
     */
    type?: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * User type ID. Can be used as `targetId` in the `okta.profile.Mapping` resource.
     */
    userTypeId?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Oidc resource.
 */
export interface OidcArgs {
    /**
     * Specifies the account linking action for an IdP user.
     */
    accountLinkAction?: pulumi.Input<string>;
    /**
     * Group memberships to determine link candidates.
     */
    accountLinkGroupIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of making an authorization request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    authorizationBinding: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     */
    authorizationUrl: pulumi.Input<string>;
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret issued by AS for the Okta IdP instance.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
     */
    deprovisionedAction?: pulumi.Input<string>;
    /**
     * Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
     */
    groupsAction?: pulumi.Input<string>;
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
     */
    groupsAssignments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     */
    groupsAttribute?: pulumi.Input<string>;
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
     */
    groupsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `"ORG_URL"`, `"CUSTOM_URL"`, or `"DYNAMIC"`.
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * URI that identifies the issuer.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    jwksBinding: pulumi.Input<string>;
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     */
    jwksUrl: pulumi.Input<string>;
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * The Application's display name.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     */
    profileMaster?: pulumi.Input<boolean>;
    /**
     * The type of protocol to use. It can be `"OIDC"` or `"OAUTH2"`.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * Provisioning action for an IdP user during authentication.
     */
    provisioningAction?: pulumi.Input<string>;
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `"HS256"`. It can be `"HS256"`, `"HS384"`, `"HS512"`, `"SHA-256"`. `"RS256"`, `"RS384"`, or `"RS512"`. NOTE: `"SHA-256"` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
     */
    requestSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `"REQUEST"`. It can be `"REQUEST"` or `"NONE"`.
     */
    requestSignatureScope?: pulumi.Input<string>;
    /**
     * The scopes of the IdP.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the IdP.
     */
    status?: pulumi.Input<string>;
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
     */
    subjectMatchAttribute?: pulumi.Input<string>;
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
     */
    subjectMatchType?: pulumi.Input<string>;
    /**
     * Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
     */
    suspendedAction?: pulumi.Input<string>;
    /**
     * The method of making a token request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
     */
    tokenBinding: pulumi.Input<string>;
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     */
    tokenUrl: pulumi.Input<string>;
    userInfoBinding?: pulumi.Input<string>;
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user.
     */
    usernameTemplate?: pulumi.Input<string>;
}
