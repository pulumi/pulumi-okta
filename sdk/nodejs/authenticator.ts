// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticator extends pulumi.CustomResource {
    /**
     * Get an existing Authenticator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticatorState, opts?: pulumi.CustomResourceOptions): Authenticator {
        return new Authenticator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authenticator:Authenticator';

    /**
     * Returns true if the given object is an instance of Authenticator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticator.__pulumiType;
    }

    /**
     * A human-readable string that identifies the Authenticator
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Display name of the Authenticator
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     */
    public readonly providerAuthPort!: pulumi.Output<number | undefined>;
    /**
     * The Duo Security API hostname
     */
    public readonly providerHost!: pulumi.Output<string | undefined>;
    /**
     * Server host name or IP address
     */
    public readonly providerHostname!: pulumi.Output<string | undefined>;
    /**
     * App Instance ID.
     */
    public /*out*/ readonly providerInstanceId!: pulumi.Output<string>;
    /**
     * The Duo Security integration key
     */
    public readonly providerIntegrationKey!: pulumi.Output<string | undefined>;
    /**
     * Provider in JSON format
     */
    public readonly providerJson!: pulumi.Output<string | undefined>;
    /**
     * The Duo Security secret key
     */
    public readonly providerSecretKey!: pulumi.Output<string | undefined>;
    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
     */
    public readonly providerSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     */
    public /*out*/ readonly providerType!: pulumi.Output<string>;
    /**
     * Format expected by the provider
     */
    public readonly providerUserNameTemplate!: pulumi.Output<string | undefined>;
    /**
     * Authenticator settings in JSON format
     */
    public readonly settings!: pulumi.Output<string | undefined>;
    /**
     * Authenticator status: ACTIVE or INACTIVE
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The type of Authenticator
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Authenticator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticatorArgs | AuthenticatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticatorState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerAuthPort"] = state ? state.providerAuthPort : undefined;
            resourceInputs["providerHost"] = state ? state.providerHost : undefined;
            resourceInputs["providerHostname"] = state ? state.providerHostname : undefined;
            resourceInputs["providerInstanceId"] = state ? state.providerInstanceId : undefined;
            resourceInputs["providerIntegrationKey"] = state ? state.providerIntegrationKey : undefined;
            resourceInputs["providerJson"] = state ? state.providerJson : undefined;
            resourceInputs["providerSecretKey"] = state ? state.providerSecretKey : undefined;
            resourceInputs["providerSharedSecret"] = state ? state.providerSharedSecret : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["providerUserNameTemplate"] = state ? state.providerUserNameTemplate : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AuthenticatorArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerAuthPort"] = args ? args.providerAuthPort : undefined;
            resourceInputs["providerHost"] = args ? args.providerHost : undefined;
            resourceInputs["providerHostname"] = args ? args.providerHostname : undefined;
            resourceInputs["providerIntegrationKey"] = args ? args.providerIntegrationKey : undefined;
            resourceInputs["providerJson"] = args ? args.providerJson : undefined;
            resourceInputs["providerSecretKey"] = args ? args.providerSecretKey : undefined;
            resourceInputs["providerSharedSecret"] = args?.providerSharedSecret ? pulumi.secret(args.providerSharedSecret) : undefined;
            resourceInputs["providerUserNameTemplate"] = args ? args.providerUserNameTemplate : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["providerInstanceId"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["providerSharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Authenticator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Authenticator resources.
 */
export interface AuthenticatorState {
    /**
     * A human-readable string that identifies the Authenticator
     */
    key?: pulumi.Input<string>;
    /**
     * Display name of the Authenticator
     */
    name?: pulumi.Input<string>;
    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     */
    providerAuthPort?: pulumi.Input<number>;
    /**
     * The Duo Security API hostname
     */
    providerHost?: pulumi.Input<string>;
    /**
     * Server host name or IP address
     */
    providerHostname?: pulumi.Input<string>;
    /**
     * App Instance ID.
     */
    providerInstanceId?: pulumi.Input<string>;
    /**
     * The Duo Security integration key
     */
    providerIntegrationKey?: pulumi.Input<string>;
    /**
     * Provider in JSON format
     */
    providerJson?: pulumi.Input<string>;
    /**
     * The Duo Security secret key
     */
    providerSecretKey?: pulumi.Input<string>;
    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
     */
    providerSharedSecret?: pulumi.Input<string>;
    /**
     * Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     */
    providerType?: pulumi.Input<string>;
    /**
     * Format expected by the provider
     */
    providerUserNameTemplate?: pulumi.Input<string>;
    /**
     * Authenticator settings in JSON format
     */
    settings?: pulumi.Input<string>;
    /**
     * Authenticator status: ACTIVE or INACTIVE
     */
    status?: pulumi.Input<string>;
    /**
     * The type of Authenticator
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authenticator resource.
 */
export interface AuthenticatorArgs {
    /**
     * A human-readable string that identifies the Authenticator
     */
    key: pulumi.Input<string>;
    /**
     * Display name of the Authenticator
     */
    name?: pulumi.Input<string>;
    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     */
    providerAuthPort?: pulumi.Input<number>;
    /**
     * The Duo Security API hostname
     */
    providerHost?: pulumi.Input<string>;
    /**
     * Server host name or IP address
     */
    providerHostname?: pulumi.Input<string>;
    /**
     * The Duo Security integration key
     */
    providerIntegrationKey?: pulumi.Input<string>;
    /**
     * Provider in JSON format
     */
    providerJson?: pulumi.Input<string>;
    /**
     * The Duo Security secret key
     */
    providerSecretKey?: pulumi.Input<string>;
    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
     */
    providerSharedSecret?: pulumi.Input<string>;
    /**
     * Format expected by the provider
     */
    providerUserNameTemplate?: pulumi.Input<string>;
    /**
     * Authenticator settings in JSON format
     */
    settings?: pulumi.Input<string>;
    /**
     * Authenticator status: ACTIVE or INACTIVE
     */
    status?: pulumi.Input<string>;
}
