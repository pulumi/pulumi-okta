// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages reassignment of review.
 *
 * This resource allows you to reassign an already existing review.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.Review("test", {
 *     campaignId: "icizigd86iM9sOcbN1d6",
 *     reviewerId: "00unli90kor62oF5Z1d7",
 *     reviewIds: ["icrztblxbBFiVKepb1d6"],
 *     reviewerLevel: "FIRST",
 *     note: "John Smith is on leave for this month. His manager Tim will be the reviewer instead.",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/review:Review example <review_id?
 * ```
 */
export class Review extends pulumi.CustomResource {
    /**
     * Get an existing Review resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReviewState, opts?: pulumi.CustomResourceOptions): Review {
        return new Review(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/review:Review';

    /**
     * Returns true if the given object is an instance of Review.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Review {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Review.__pulumiType;
    }

    /**
     * The id of the campaign.
     */
    declare public readonly campaignId: pulumi.Output<string>;
    /**
     * The ISO 8601 formatted date and time when the resource was created
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The id of user who created the resource.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The decision of the reviewer.
     */
    declare public /*out*/ readonly decision: pulumi.Output<string>;
    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     */
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * The id of user who last updated the object.
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * A note to justify the reassignment decision for the specified review.
     */
    declare public readonly note: pulumi.Output<string>;
    declare public /*out*/ readonly resourceId: pulumi.Output<string>;
    /**
     * A list of reviews (review id values) that are reassigned to the new reviewer.
     */
    declare public readonly reviewIds: pulumi.Output<string[]>;
    /**
     * The Okta user id of the new reviewer.
     */
    declare public readonly reviewerId: pulumi.Output<string>;
    /**
     * Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
     */
    declare public readonly reviewerLevel: pulumi.Output<string | undefined>;
    /**
     * The type of reviewer to which the review is assigned.
     */
    declare public /*out*/ readonly reviewerType: pulumi.Output<string>;

    /**
     * Create a Review resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReviewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReviewArgs | ReviewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReviewState | undefined;
            resourceInputs["campaignId"] = state?.campaignId;
            resourceInputs["created"] = state?.created;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["decision"] = state?.decision;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["note"] = state?.note;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["reviewIds"] = state?.reviewIds;
            resourceInputs["reviewerId"] = state?.reviewerId;
            resourceInputs["reviewerLevel"] = state?.reviewerLevel;
            resourceInputs["reviewerType"] = state?.reviewerType;
        } else {
            const args = argsOrState as ReviewArgs | undefined;
            if (args?.campaignId === undefined && !opts.urn) {
                throw new Error("Missing required property 'campaignId'");
            }
            if (args?.note === undefined && !opts.urn) {
                throw new Error("Missing required property 'note'");
            }
            if (args?.reviewIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'reviewIds'");
            }
            if (args?.reviewerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'reviewerId'");
            }
            resourceInputs["campaignId"] = args?.campaignId;
            resourceInputs["note"] = args?.note;
            resourceInputs["reviewIds"] = args?.reviewIds;
            resourceInputs["reviewerId"] = args?.reviewerId;
            resourceInputs["reviewerLevel"] = args?.reviewerLevel;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["decision"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["reviewerType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Review.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Review resources.
 */
export interface ReviewState {
    /**
     * The id of the campaign.
     */
    campaignId?: pulumi.Input<string>;
    /**
     * The ISO 8601 formatted date and time when the resource was created
     */
    created?: pulumi.Input<string>;
    /**
     * The id of user who created the resource.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The decision of the reviewer.
     */
    decision?: pulumi.Input<string>;
    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The id of user who last updated the object.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * A note to justify the reassignment decision for the specified review.
     */
    note?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    /**
     * A list of reviews (review id values) that are reassigned to the new reviewer.
     */
    reviewIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Okta user id of the new reviewer.
     */
    reviewerId?: pulumi.Input<string>;
    /**
     * Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
     */
    reviewerLevel?: pulumi.Input<string>;
    /**
     * The type of reviewer to which the review is assigned.
     */
    reviewerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Review resource.
 */
export interface ReviewArgs {
    /**
     * The id of the campaign.
     */
    campaignId: pulumi.Input<string>;
    /**
     * A note to justify the reassignment decision for the specified review.
     */
    note: pulumi.Input<string>;
    /**
     * A list of reviews (review id values) that are reassigned to the new reviewer.
     */
    reviewIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Okta user id of the new reviewer.
     */
    reviewerId: pulumi.Input<string>;
    /**
     * Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
     */
    reviewerLevel?: pulumi.Input<string>;
}
