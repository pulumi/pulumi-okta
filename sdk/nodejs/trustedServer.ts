// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Associated (Trusted) authorization servers allow you to designate a trusted authorization server that you associate with another authorization server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test1 = new okta.auth.Server("test1", {
 *     audiences: ["whatever.rise.zone"],
 *     credentialsRotationMode: "AUTO",
 *     description: "The best way to find out if you can trust somebody is to trust them.",
 *     name: "testAcc-replace_with_uuid",
 * });
 * const test2 = new okta.auth.Server("test2", {
 *     audiences: ["whatever.rise.zone"],
 *     credentialsRotationMode: "AUTO",
 *     description: "The best way to find out if you can trust somebody is to trust them.",
 *     name: "testAcc-replace_with_uuid",
 * });
 * const test3 = new okta.auth.Server("test3", {
 *     audiences: ["whatever.rise.zone"],
 *     credentialsRotationMode: "AUTO",
 *     description: "The best way to find out if you can trust somebody is to trust them.",
 *     name: "testAcc-replace_with_uuid",
 * });
 * const example = new okta.TrustedServer("example", {
 *     authServerId: oktaAuthServer.test1.id,
 *     trusteds: [
 *         oktaAuthServer.test2.id,
 *         oktaAuthServer.test3.id,
 *     ],
 * });
 * ```
 */
export class TrustedServer extends pulumi.CustomResource {
    /**
     * Get an existing TrustedServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrustedServerState, opts?: pulumi.CustomResourceOptions): TrustedServer {
        return new TrustedServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/trustedServer:TrustedServer';

    /**
     * Returns true if the given object is an instance of TrustedServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrustedServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustedServer.__pulumiType;
    }

    /**
     * Authorization server ID
     */
    declare public readonly authServerId: pulumi.Output<string>;
    /**
     * A list of the authorization server IDs user want to trust
     */
    declare public readonly trusteds: pulumi.Output<string[]>;

    /**
     * Create a TrustedServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrustedServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrustedServerArgs | TrustedServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrustedServerState | undefined;
            resourceInputs["authServerId"] = state?.authServerId;
            resourceInputs["trusteds"] = state?.trusteds;
        } else {
            const args = argsOrState as TrustedServerArgs | undefined;
            if (args?.authServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            if (args?.trusteds === undefined && !opts.urn) {
                throw new Error("Missing required property 'trusteds'");
            }
            resourceInputs["authServerId"] = args?.authServerId;
            resourceInputs["trusteds"] = args?.trusteds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrustedServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrustedServer resources.
 */
export interface TrustedServerState {
    /**
     * Authorization server ID
     */
    authServerId?: pulumi.Input<string>;
    /**
     * A list of the authorization server IDs user want to trust
     */
    trusteds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TrustedServer resource.
 */
export interface TrustedServerArgs {
    /**
     * Authorization server ID
     */
    authServerId: pulumi.Input<string>;
    /**
     * A list of the authorization server IDs user want to trust
     */
    trusteds: pulumi.Input<pulumi.Input<string>[]>;
}
