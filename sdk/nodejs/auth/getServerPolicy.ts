// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve an authorization server policy from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.auth.getServerPolicy({
 *     authServerId: "<auth server id>",
 *     name: "staff",
 * });
 * ```
 */
export function getServerPolicy(args: GetServerPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetServerPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:auth/getServerPolicy:getServerPolicy", {
        "authServerId": args.authServerId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerPolicy.
 */
export interface GetServerPolicyArgs {
    /**
     * The ID of the Auth Server.
     */
    authServerId: string;
    /**
     * Name of policy to retrieve.
     */
    name: string;
}

/**
 * A collection of values returned by getServerPolicy.
 */
export interface GetServerPolicyResult {
    /**
     * list of clients this policy is assigned to. `["ALL_CLIENTS"]` is a special value when policy is assigned to all clients.
     */
    readonly assignedClients: string[];
    readonly authServerId: string;
    /**
     * description of authorization server policy.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * the priority of the Auth Server Policy.
     */
    readonly priority: number;
}
/**
 * Use this data source to retrieve an authorization server policy from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.auth.getServerPolicy({
 *     authServerId: "<auth server id>",
 *     name: "staff",
 * });
 * ```
 */
export function getServerPolicyOutput(args: GetServerPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerPolicyResult> {
    return pulumi.output(args).apply((a: any) => getServerPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getServerPolicy.
 */
export interface GetServerPolicyOutputArgs {
    /**
     * The ID of the Auth Server.
     */
    authServerId: pulumi.Input<string>;
    /**
     * Name of policy to retrieve.
     */
    name: pulumi.Input<string>;
}
