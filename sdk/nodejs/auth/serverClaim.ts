// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ServerClaim extends pulumi.CustomResource {
    /**
     * Get an existing ServerClaim resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerClaimState, opts?: pulumi.CustomResourceOptions): ServerClaim {
        return new ServerClaim(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverClaim:ServerClaim';

    /**
     * Returns true if the given object is an instance of ServerClaim.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerClaim {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerClaim.__pulumiType;
    }

    /**
     * Specifies whether to include claims in token, by default it is set to `true`.
     */
    public readonly alwaysIncludeInToken!: pulumi.Output<boolean | undefined>;
    /**
     * Auth server ID
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     */
    public readonly claimType!: pulumi.Output<string>;
    /**
     * Specifies the type of group filter if `valueType` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
     */
    public readonly groupFilterType!: pulumi.Output<string | undefined>;
    /**
     * Auth server claim name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Auth server claim list of scopes
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The value of the claim.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
     */
    public readonly valueType!: pulumi.Output<string | undefined>;

    /**
     * Create a ServerClaim resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerClaimArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerClaimArgs | ServerClaimState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerClaimState | undefined;
            resourceInputs["alwaysIncludeInToken"] = state ? state.alwaysIncludeInToken : undefined;
            resourceInputs["authServerId"] = state ? state.authServerId : undefined;
            resourceInputs["claimType"] = state ? state.claimType : undefined;
            resourceInputs["groupFilterType"] = state ? state.groupFilterType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
        } else {
            const args = argsOrState as ServerClaimArgs | undefined;
            if ((!args || args.authServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            if ((!args || args.claimType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'claimType'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["alwaysIncludeInToken"] = args ? args.alwaysIncludeInToken : undefined;
            resourceInputs["authServerId"] = args ? args.authServerId : undefined;
            resourceInputs["claimType"] = args ? args.claimType : undefined;
            resourceInputs["groupFilterType"] = args ? args.groupFilterType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["valueType"] = args ? args.valueType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerClaim.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerClaim resources.
 */
export interface ServerClaimState {
    /**
     * Specifies whether to include claims in token, by default it is set to `true`.
     */
    alwaysIncludeInToken?: pulumi.Input<boolean>;
    /**
     * Auth server ID
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     */
    claimType?: pulumi.Input<string>;
    /**
     * Specifies the type of group filter if `valueType` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
     */
    groupFilterType?: pulumi.Input<string>;
    /**
     * Auth server claim name
     */
    name?: pulumi.Input<string>;
    /**
     * Auth server claim list of scopes
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    /**
     * The value of the claim.
     */
    value?: pulumi.Input<string>;
    /**
     * The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerClaim resource.
 */
export interface ServerClaimArgs {
    /**
     * Specifies whether to include claims in token, by default it is set to `true`.
     */
    alwaysIncludeInToken?: pulumi.Input<boolean>;
    /**
     * Auth server ID
     */
    authServerId: pulumi.Input<string>;
    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     */
    claimType: pulumi.Input<string>;
    /**
     * Specifies the type of group filter if `valueType` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
     */
    groupFilterType?: pulumi.Input<string>;
    /**
     * Auth server claim name
     */
    name?: pulumi.Input<string>;
    /**
     * Auth server claim list of scopes
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    /**
     * The value of the claim.
     */
    value: pulumi.Input<string>;
    /**
     * The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
     */
    valueType?: pulumi.Input<string>;
}
