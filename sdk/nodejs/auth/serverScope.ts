// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Authorization Server Scope. This resource allows you to create and configure an Authorization Server Scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.auth.ServerScope("example", {
 *     authServerId: "<auth server id>",
 *     metadataPublish: "NO_CLIENTS",
 *     name: "example",
 *     consent: "IMPLICIT",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:auth/serverScope:ServerScope example <auth_server_id>/<scope_id>
 * ```
 */
export class ServerScope extends pulumi.CustomResource {
    /**
     * Get an existing ServerScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerScopeState, opts?: pulumi.CustomResourceOptions): ServerScope {
        return new ServerScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverScope:ServerScope';

    /**
     * Returns true if the given object is an instance of ServerScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerScope.__pulumiType;
    }

    /**
     * Auth server ID
     */
    declare public readonly authServerId: pulumi.Output<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default: `IMPLICIT`
     */
    declare public readonly consent: pulumi.Output<string | undefined>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    declare public readonly default: pulumi.Output<boolean | undefined>;
    /**
     * Description of the Auth Server Scope.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    declare public readonly metadataPublish: pulumi.Output<string | undefined>;
    /**
     * Auth server scope name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether the scope optional
     */
    declare public readonly optional: pulumi.Output<boolean | undefined>;
    /**
     * Whether Okta created the Scope
     */
    declare public /*out*/ readonly system: pulumi.Output<boolean>;

    /**
     * Create a ServerScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerScopeArgs | ServerScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerScopeState | undefined;
            resourceInputs["authServerId"] = state?.authServerId;
            resourceInputs["consent"] = state?.consent;
            resourceInputs["default"] = state?.default;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["metadataPublish"] = state?.metadataPublish;
            resourceInputs["name"] = state?.name;
            resourceInputs["optional"] = state?.optional;
            resourceInputs["system"] = state?.system;
        } else {
            const args = argsOrState as ServerScopeArgs | undefined;
            if (args?.authServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            resourceInputs["authServerId"] = args?.authServerId;
            resourceInputs["consent"] = args?.consent;
            resourceInputs["default"] = args?.default;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["metadataPublish"] = args?.metadataPublish;
            resourceInputs["name"] = args?.name;
            resourceInputs["optional"] = args?.optional;
            resourceInputs["system"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerScope resources.
 */
export interface ServerScopeState {
    /**
     * Auth server ID
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default: `IMPLICIT`
     */
    consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    metadataPublish?: pulumi.Input<string>;
    /**
     * Auth server scope name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the scope optional
     */
    optional?: pulumi.Input<boolean>;
    /**
     * Whether Okta created the Scope
     */
    system?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServerScope resource.
 */
export interface ServerScopeArgs {
    /**
     * Auth server ID
     */
    authServerId: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default: `IMPLICIT`
     */
    consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    metadataPublish?: pulumi.Input<string>;
    /**
     * Auth server scope name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the scope optional
     */
    optional?: pulumi.Input<boolean>;
}
