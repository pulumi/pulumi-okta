// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Authorization Server Scope.
 *
 * This resource allows you to create and configure an Authorization Server Scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.auth.ServerScope("example", {
 *     authServerId: "<auth server id>",
 *     consent: "IMPLICIT",
 *     metadataPublish: "NO_CLIENTS",
 * });
 * ```
 */
export class ServerScope extends pulumi.CustomResource {
    /**
     * Get an existing ServerScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerScopeState, opts?: pulumi.CustomResourceOptions): ServerScope {
        return new ServerScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverScope:ServerScope';

    /**
     * Returns true if the given object is an instance of ServerScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerScope.__pulumiType;
    }

    /**
     * Auth Server ID.
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
     */
    public readonly consent!: pulumi.Output<string | undefined>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * Description of the Auth Server Scope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
     */
    public readonly metadataPublish!: pulumi.Output<string | undefined>;
    /**
     * Auth Server scope name.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ServerScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerScopeArgs | ServerScopeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServerScopeState | undefined;
            inputs["authServerId"] = state ? state.authServerId : undefined;
            inputs["consent"] = state ? state.consent : undefined;
            inputs["default"] = state ? state.default : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["metadataPublish"] = state ? state.metadataPublish : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ServerScopeArgs | undefined;
            if (!args || args.authServerId === undefined) {
                throw new Error("Missing required property 'authServerId'");
            }
            inputs["authServerId"] = args ? args.authServerId : undefined;
            inputs["consent"] = args ? args.consent : undefined;
            inputs["default"] = args ? args.default : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["metadataPublish"] = args ? args.metadataPublish : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServerScope.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerScope resources.
 */
export interface ServerScopeState {
    /**
     * Auth Server ID.
     */
    readonly authServerId?: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
     */
    readonly consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    readonly default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
     */
    readonly metadataPublish?: pulumi.Input<string>;
    /**
     * Auth Server scope name.
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerScope resource.
 */
export interface ServerScopeArgs {
    /**
     * Auth Server ID.
     */
    readonly authServerId: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
     */
    readonly consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     */
    readonly default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
     */
    readonly metadataPublish?: pulumi.Input<string>;
    /**
     * Auth Server scope name.
     */
    readonly name?: pulumi.Input<string>;
}
