// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerPolicyArgs, GetServerPolicyResult, GetServerPolicyOutputArgs } from "./getServerPolicy";
export const getServerPolicy: typeof import("./getServerPolicy").getServerPolicy = null as any;
export const getServerPolicyOutput: typeof import("./getServerPolicy").getServerPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerPolicy","getServerPolicyOutput"], () => require("./getServerPolicy"));

export { GetServerScopesArgs, GetServerScopesResult, GetServerScopesOutputArgs } from "./getServerScopes";
export const getServerScopes: typeof import("./getServerScopes").getServerScopes = null as any;
export const getServerScopesOutput: typeof import("./getServerScopes").getServerScopesOutput = null as any;
utilities.lazyLoad(exports, ["getServerScopes","getServerScopesOutput"], () => require("./getServerScopes"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerClaimArgs, ServerClaimState } from "./serverClaim";
export type ServerClaim = import("./serverClaim").ServerClaim;
export const ServerClaim: typeof import("./serverClaim").ServerClaim = null as any;
utilities.lazyLoad(exports, ["ServerClaim"], () => require("./serverClaim"));

export { ServerPolicyArgs, ServerPolicyState } from "./serverPolicy";
export type ServerPolicy = import("./serverPolicy").ServerPolicy;
export const ServerPolicy: typeof import("./serverPolicy").ServerPolicy = null as any;
utilities.lazyLoad(exports, ["ServerPolicy"], () => require("./serverPolicy"));

export { ServerPolicyRuleArgs, ServerPolicyRuleState } from "./serverPolicyRule";
export type ServerPolicyRule = import("./serverPolicyRule").ServerPolicyRule;
export const ServerPolicyRule: typeof import("./serverPolicyRule").ServerPolicyRule = null as any;
utilities.lazyLoad(exports, ["ServerPolicyRule"], () => require("./serverPolicyRule"));

export { ServerScopeArgs, ServerScopeState } from "./serverScope";
export type ServerScope = import("./serverScope").ServerScope;
export const ServerScope: typeof import("./serverScope").ServerScope = null as any;
utilities.lazyLoad(exports, ["ServerScope"], () => require("./serverScope"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:auth/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "okta:auth/serverClaim:ServerClaim":
                return new ServerClaim(name, <any>undefined, { urn })
            case "okta:auth/serverPolicy:ServerPolicy":
                return new ServerPolicy(name, <any>undefined, { urn })
            case "okta:auth/serverPolicyRule:ServerPolicyRule":
                return new ServerPolicyRule(name, <any>undefined, { urn })
            case "okta:auth/serverScope:ServerScope":
                return new ServerScope(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "auth/server", _module)
pulumi.runtime.registerResourceModule("okta", "auth/serverClaim", _module)
pulumi.runtime.registerResourceModule("okta", "auth/serverPolicy", _module)
pulumi.runtime.registerResourceModule("okta", "auth/serverPolicyRule", _module)
pulumi.runtime.registerResourceModule("okta", "auth/serverScope", _module)
