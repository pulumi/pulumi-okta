// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.auth.ServerPolicyRule("example", {
 *     authServerId: "<auth server id>",
 *     policyId: "<auth server policy id>",
 *     status: "ACTIVE",
 *     name: "example",
 *     priority: 1,
 *     groupWhitelists: ["<group ids>"],
 *     grantTypeWhitelists: ["implicit"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:auth/serverPolicyRule:ServerPolicyRule example <auth_server_id>/<policy_id>/<policy_rule_id>
 * ```
 */
export class ServerPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing ServerPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerPolicyRuleState, opts?: pulumi.CustomResourceOptions): ServerPolicyRule {
        return new ServerPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverPolicyRule:ServerPolicyRule';

    /**
     * Returns true if the given object is an instance of ServerPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerPolicyRule.__pulumiType;
    }

    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
     */
    declare public readonly accessTokenLifetimeMinutes: pulumi.Output<number | undefined>;
    /**
     * Auth server ID
     */
    declare public readonly authServerId: pulumi.Output<string>;
    /**
     * Accepted grant type values, `authorizationCode`, `implicit`, `password`, `clientCredentials`, `urn:ietf:params:oauth:grant-type:saml2-bearer` (*Early Access Property*), `urn:ietf:params:oauth:grant-type:token-exchange` (*Early Access Property*),`urn:ietf:params:oauth:grant-type:device_code` (*Early Access Property*), `interactionCode` (*OIE only*). For `implicit` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    declare public readonly grantTypeWhitelists: pulumi.Output<string[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    declare public readonly groupBlacklists: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.
     */
    declare public readonly groupWhitelists: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the inline token to trigger.
     */
    declare public readonly inlineHookId: pulumi.Output<string | undefined>;
    /**
     * Auth server policy rule name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Auth server policy ID
     */
    declare public readonly policyId: pulumi.Output<string>;
    /**
     * Priority of the auth server policy rule
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * Lifetime of refresh token.
     */
    declare public readonly refreshTokenLifetimeMinutes: pulumi.Output<number | undefined>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refreshTokenWindowMinutes` must be between `accessTokenLifetimeMinutes` and `refreshTokenLifetimeMinutes`.
     */
    declare public readonly refreshTokenWindowMinutes: pulumi.Output<number | undefined>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`
     */
    declare public readonly scopeWhitelists: pulumi.Output<string[] | undefined>;
    /**
     * Default to `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * The rule is the system (default) rule for its associated policy
     */
    declare public /*out*/ readonly system: pulumi.Output<boolean>;
    /**
     * Auth server policy rule type, unlikely this will be anything other then the default
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * Specifies a set of Users to be excluded.
     */
    declare public readonly userBlacklists: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a set of Users to be included.
     */
    declare public readonly userWhitelists: pulumi.Output<string[] | undefined>;

    /**
     * Create a ServerPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerPolicyRuleArgs | ServerPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerPolicyRuleState | undefined;
            resourceInputs["accessTokenLifetimeMinutes"] = state?.accessTokenLifetimeMinutes;
            resourceInputs["authServerId"] = state?.authServerId;
            resourceInputs["grantTypeWhitelists"] = state?.grantTypeWhitelists;
            resourceInputs["groupBlacklists"] = state?.groupBlacklists;
            resourceInputs["groupWhitelists"] = state?.groupWhitelists;
            resourceInputs["inlineHookId"] = state?.inlineHookId;
            resourceInputs["name"] = state?.name;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["refreshTokenLifetimeMinutes"] = state?.refreshTokenLifetimeMinutes;
            resourceInputs["refreshTokenWindowMinutes"] = state?.refreshTokenWindowMinutes;
            resourceInputs["scopeWhitelists"] = state?.scopeWhitelists;
            resourceInputs["status"] = state?.status;
            resourceInputs["system"] = state?.system;
            resourceInputs["type"] = state?.type;
            resourceInputs["userBlacklists"] = state?.userBlacklists;
            resourceInputs["userWhitelists"] = state?.userWhitelists;
        } else {
            const args = argsOrState as ServerPolicyRuleArgs | undefined;
            if (args?.authServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            if (args?.grantTypeWhitelists === undefined && !opts.urn) {
                throw new Error("Missing required property 'grantTypeWhitelists'");
            }
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["accessTokenLifetimeMinutes"] = args?.accessTokenLifetimeMinutes;
            resourceInputs["authServerId"] = args?.authServerId;
            resourceInputs["grantTypeWhitelists"] = args?.grantTypeWhitelists;
            resourceInputs["groupBlacklists"] = args?.groupBlacklists;
            resourceInputs["groupWhitelists"] = args?.groupWhitelists;
            resourceInputs["inlineHookId"] = args?.inlineHookId;
            resourceInputs["name"] = args?.name;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["refreshTokenLifetimeMinutes"] = args?.refreshTokenLifetimeMinutes;
            resourceInputs["refreshTokenWindowMinutes"] = args?.refreshTokenWindowMinutes;
            resourceInputs["scopeWhitelists"] = args?.scopeWhitelists;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
            resourceInputs["userBlacklists"] = args?.userBlacklists;
            resourceInputs["userWhitelists"] = args?.userWhitelists;
            resourceInputs["system"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "okta:auth/serverPolicyClaim:ServerPolicyClaim" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ServerPolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerPolicyRule resources.
 */
export interface ServerPolicyRuleState {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
     */
    accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth server ID
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Accepted grant type values, `authorizationCode`, `implicit`, `password`, `clientCredentials`, `urn:ietf:params:oauth:grant-type:saml2-bearer` (*Early Access Property*), `urn:ietf:params:oauth:grant-type:token-exchange` (*Early Access Property*),`urn:ietf:params:oauth:grant-type:device_code` (*Early Access Property*), `interactionCode` (*OIE only*). For `implicit` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    grantTypeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.
     */
    groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Auth server policy rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Auth server policy ID
     */
    policyId?: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule
     */
    priority?: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refreshTokenWindowMinutes` must be between `accessTokenLifetimeMinutes` and `refreshTokenLifetimeMinutes`.
     */
    refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`
     */
    scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * The rule is the system (default) rule for its associated policy
     */
    system?: pulumi.Input<boolean>;
    /**
     * Auth server policy rule type, unlikely this will be anything other then the default
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a set of Users to be excluded.
     */
    userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Users to be included.
     */
    userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServerPolicyRule resource.
 */
export interface ServerPolicyRuleArgs {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
     */
    accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth server ID
     */
    authServerId: pulumi.Input<string>;
    /**
     * Accepted grant type values, `authorizationCode`, `implicit`, `password`, `clientCredentials`, `urn:ietf:params:oauth:grant-type:saml2-bearer` (*Early Access Property*), `urn:ietf:params:oauth:grant-type:token-exchange` (*Early Access Property*),`urn:ietf:params:oauth:grant-type:device_code` (*Early Access Property*), `interactionCode` (*OIE only*). For `implicit` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    grantTypeWhitelists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `EVERYONE`.
     */
    groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Auth server policy rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Auth server policy ID
     */
    policyId: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule
     */
    priority: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).`refreshTokenWindowMinutes` must be between `accessTokenLifetimeMinutes` and `refreshTokenLifetimeMinutes`.
     */
    refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `*`
     */
    scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Auth server policy rule type, unlikely this will be anything other then the default
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a set of Users to be excluded.
     */
    userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Users to be included.
     */
    userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
