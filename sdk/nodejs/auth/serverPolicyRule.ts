// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Authorization Server Policy Rule.
 *
 * This resource allows you to create and configure an Authorization Server Policy Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.auth.ServerPolicyRule("example", {
 *     authServerId: "<auth server id>",
 *     grantTypeWhitelists: ["implicit"],
 *     groupWhitelists: ["<group ids>"],
 *     policyId: "<auth server policy id>",
 *     priority: 1,
 *     status: "ACTIVE",
 * });
 * ```
 *
 * ## Import
 *
 * Authorization Server Policy Rule can be imported via the Auth Server ID, Policy ID, and Policy Rule ID.
 *
 * ```sh
 *  $ pulumi import okta:auth/serverPolicyRule:ServerPolicyRule example <auth server id>/<policy id>/<policy rule id>
 * ```
 */
export class ServerPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing ServerPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerPolicyRuleState, opts?: pulumi.CustomResourceOptions): ServerPolicyRule {
        return new ServerPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverPolicyRule:ServerPolicyRule';

    /**
     * Returns true if the given object is an instance of ServerPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerPolicyRule.__pulumiType;
    }

    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes.
     */
    public readonly accessTokenLifetimeMinutes!: pulumi.Output<number | undefined>;
    /**
     * Auth Server ID.
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`, 
     * `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
     * `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    public readonly grantTypeWhitelists!: pulumi.Output<string[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    public readonly groupBlacklists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: "EVERYONE".
     */
    public readonly groupWhitelists!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the inline token to trigger.
     */
    public readonly inlineHookId!: pulumi.Output<string | undefined>;
    /**
     * Auth Server Policy Rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Auth Server Policy ID.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Priority of the auth server policy rule.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Lifetime of refresh token.
     */
    public readonly refreshTokenLifetimeMinutes!: pulumi.Output<number | undefined>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes.
     * `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
     */
    public readonly refreshTokenWindowMinutes!: pulumi.Output<number | undefined>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    public readonly scopeWhitelists!: pulumi.Output<string[] | undefined>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Specifies a set of Users to be excluded.
     */
    public readonly userBlacklists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a set of Users to be included.
     */
    public readonly userWhitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ServerPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerPolicyRuleArgs | ServerPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerPolicyRuleState | undefined;
            resourceInputs["accessTokenLifetimeMinutes"] = state ? state.accessTokenLifetimeMinutes : undefined;
            resourceInputs["authServerId"] = state ? state.authServerId : undefined;
            resourceInputs["grantTypeWhitelists"] = state ? state.grantTypeWhitelists : undefined;
            resourceInputs["groupBlacklists"] = state ? state.groupBlacklists : undefined;
            resourceInputs["groupWhitelists"] = state ? state.groupWhitelists : undefined;
            resourceInputs["inlineHookId"] = state ? state.inlineHookId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["refreshTokenLifetimeMinutes"] = state ? state.refreshTokenLifetimeMinutes : undefined;
            resourceInputs["refreshTokenWindowMinutes"] = state ? state.refreshTokenWindowMinutes : undefined;
            resourceInputs["scopeWhitelists"] = state ? state.scopeWhitelists : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userBlacklists"] = state ? state.userBlacklists : undefined;
            resourceInputs["userWhitelists"] = state ? state.userWhitelists : undefined;
        } else {
            const args = argsOrState as ServerPolicyRuleArgs | undefined;
            if ((!args || args.authServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            if ((!args || args.grantTypeWhitelists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantTypeWhitelists'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["accessTokenLifetimeMinutes"] = args ? args.accessTokenLifetimeMinutes : undefined;
            resourceInputs["authServerId"] = args ? args.authServerId : undefined;
            resourceInputs["grantTypeWhitelists"] = args ? args.grantTypeWhitelists : undefined;
            resourceInputs["groupBlacklists"] = args ? args.groupBlacklists : undefined;
            resourceInputs["groupWhitelists"] = args ? args.groupWhitelists : undefined;
            resourceInputs["inlineHookId"] = args ? args.inlineHookId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["refreshTokenLifetimeMinutes"] = args ? args.refreshTokenLifetimeMinutes : undefined;
            resourceInputs["refreshTokenWindowMinutes"] = args ? args.refreshTokenWindowMinutes : undefined;
            resourceInputs["scopeWhitelists"] = args ? args.scopeWhitelists : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userBlacklists"] = args ? args.userBlacklists : undefined;
            resourceInputs["userWhitelists"] = args ? args.userWhitelists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "okta:auth/serverPolicyClaim:ServerPolicyClaim" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ServerPolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerPolicyRule resources.
 */
export interface ServerPolicyRuleState {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes.
     */
    accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth Server ID.
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`, 
     * `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
     * `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    grantTypeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: "EVERYONE".
     */
    groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Auth Server Policy Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Auth Server Policy ID.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes.
     * `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
     */
    refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a set of Users to be excluded.
     */
    userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Users to be included.
     */
    userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServerPolicyRule resource.
 */
export interface ServerPolicyRuleArgs {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes.
     */
    accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth Server ID.
     */
    authServerId: pulumi.Input<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`, 
     * `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
     * `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
     */
    grantTypeWhitelists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be excluded.
     */
    groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: "EVERYONE".
     */
    groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    inlineHookId?: pulumi.Input<string>;
    /**
     * Auth Server Policy Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Auth Server Policy ID.
     */
    policyId: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule.
     */
    priority: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes.
     * `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
     */
    refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a set of Users to be excluded.
     */
    userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of Users to be included.
     */
    userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
