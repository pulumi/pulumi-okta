// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Authorization Server Policy Rule.
 *
 * This resource allows you to create and configure an Authorization Server Policy Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.auth.ServerPolicyClaim("example", {
 *     authServerId: "<auth server id>",
 *     grantTypeWhitelists: ["implicit"],
 *     groupWhitelists: ["<group ids>"],
 *     policyId: "<auth server policy id>",
 *     priority: 1,
 *     status: "ACTIVE",
 * });
 * ```
 */
export class ServerPolicyClaim extends pulumi.CustomResource {
    /**
     * Get an existing ServerPolicyClaim resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerPolicyClaimState, opts?: pulumi.CustomResourceOptions): ServerPolicyClaim {
        return new ServerPolicyClaim(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:auth/serverPolicyClaim:ServerPolicyClaim';

    /**
     * Returns true if the given object is an instance of ServerPolicyClaim.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerPolicyClaim {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerPolicyClaim.__pulumiType;
    }

    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440.
     */
    public readonly accessTokenLifetimeMinutes!: pulumi.Output<number | undefined>;
    /**
     * Auth Server ID.
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
     */
    public readonly grantTypeWhitelists!: pulumi.Output<string[]>;
    public readonly groupBlacklists!: pulumi.Output<string[] | undefined>;
    public readonly groupWhitelists!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the inline token to trigger.
     */
    public readonly inlineHookId!: pulumi.Output<string | undefined>;
    /**
     * Auth Server Policy Rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Auth Server Policy ID.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Priority of the auth server policy rule.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Lifetime of refresh token.
     */
    public readonly refreshTokenLifetimeMinutes!: pulumi.Output<number | undefined>;
    public readonly refreshTokenWindowMinutes!: pulumi.Output<number | undefined>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    public readonly scopeWhitelists!: pulumi.Output<string[] | undefined>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly userBlacklists!: pulumi.Output<string[] | undefined>;
    public readonly userWhitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ServerPolicyClaim resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerPolicyClaimArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerPolicyClaimArgs | ServerPolicyClaimState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServerPolicyClaimState | undefined;
            inputs["accessTokenLifetimeMinutes"] = state ? state.accessTokenLifetimeMinutes : undefined;
            inputs["authServerId"] = state ? state.authServerId : undefined;
            inputs["grantTypeWhitelists"] = state ? state.grantTypeWhitelists : undefined;
            inputs["groupBlacklists"] = state ? state.groupBlacklists : undefined;
            inputs["groupWhitelists"] = state ? state.groupWhitelists : undefined;
            inputs["inlineHookId"] = state ? state.inlineHookId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyId"] = state ? state.policyId : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["refreshTokenLifetimeMinutes"] = state ? state.refreshTokenLifetimeMinutes : undefined;
            inputs["refreshTokenWindowMinutes"] = state ? state.refreshTokenWindowMinutes : undefined;
            inputs["scopeWhitelists"] = state ? state.scopeWhitelists : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userBlacklists"] = state ? state.userBlacklists : undefined;
            inputs["userWhitelists"] = state ? state.userWhitelists : undefined;
        } else {
            const args = argsOrState as ServerPolicyClaimArgs | undefined;
            if (!args || args.authServerId === undefined) {
                throw new Error("Missing required property 'authServerId'");
            }
            if (!args || args.grantTypeWhitelists === undefined) {
                throw new Error("Missing required property 'grantTypeWhitelists'");
            }
            if (!args || args.policyId === undefined) {
                throw new Error("Missing required property 'policyId'");
            }
            if (!args || args.priority === undefined) {
                throw new Error("Missing required property 'priority'");
            }
            inputs["accessTokenLifetimeMinutes"] = args ? args.accessTokenLifetimeMinutes : undefined;
            inputs["authServerId"] = args ? args.authServerId : undefined;
            inputs["grantTypeWhitelists"] = args ? args.grantTypeWhitelists : undefined;
            inputs["groupBlacklists"] = args ? args.groupBlacklists : undefined;
            inputs["groupWhitelists"] = args ? args.groupWhitelists : undefined;
            inputs["inlineHookId"] = args ? args.inlineHookId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policyId"] = args ? args.policyId : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["refreshTokenLifetimeMinutes"] = args ? args.refreshTokenLifetimeMinutes : undefined;
            inputs["refreshTokenWindowMinutes"] = args ? args.refreshTokenWindowMinutes : undefined;
            inputs["scopeWhitelists"] = args ? args.scopeWhitelists : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userBlacklists"] = args ? args.userBlacklists : undefined;
            inputs["userWhitelists"] = args ? args.userWhitelists : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServerPolicyClaim.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerPolicyClaim resources.
 */
export interface ServerPolicyClaimState {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440.
     */
    readonly accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth Server ID.
     */
    readonly authServerId?: pulumi.Input<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
     */
    readonly grantTypeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    readonly inlineHookId?: pulumi.Input<string>;
    /**
     * Auth Server Policy Rule name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Auth Server Policy ID.
     */
    readonly policyId?: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    readonly refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    readonly refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    readonly scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    readonly type?: pulumi.Input<string>;
    readonly userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServerPolicyClaim resource.
 */
export interface ServerPolicyClaimArgs {
    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440.
     */
    readonly accessTokenLifetimeMinutes?: pulumi.Input<number>;
    /**
     * Auth Server ID.
     */
    readonly authServerId: pulumi.Input<string>;
    /**
     * Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
     */
    readonly grantTypeWhitelists: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly groupWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the inline token to trigger.
     */
    readonly inlineHookId?: pulumi.Input<string>;
    /**
     * Auth Server Policy Rule name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Auth Server Policy ID.
     */
    readonly policyId: pulumi.Input<string>;
    /**
     * Priority of the auth server policy rule.
     */
    readonly priority: pulumi.Input<number>;
    /**
     * Lifetime of refresh token.
     */
    readonly refreshTokenLifetimeMinutes?: pulumi.Input<number>;
    readonly refreshTokenWindowMinutes?: pulumi.Input<number>;
    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
     */
    readonly scopeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the Auth Server Policy Rule.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The type of the Auth Server Policy Rule.
     */
    readonly type?: pulumi.Input<string>;
    readonly userBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
