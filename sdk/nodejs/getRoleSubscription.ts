// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve role subscription with a specific type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getRoleSubscription({
 *     notificationType: "APP_IMPORT",
 *     roleType: "SUPER_ADMIN",
 * });
 * ```
 */
export function getRoleSubscription(args: GetRoleSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetRoleSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getRoleSubscription:getRoleSubscription", {
        "notificationType": args.notificationType,
        "roleType": args.roleType,
    }, opts);
}

/**
 * A collection of arguments for invoking getRoleSubscription.
 */
export interface GetRoleSubscriptionArgs {
    /**
     * Type of the notification. Valid values: `"CONNECTOR_AGENT"`, `"USER_LOCKED_OUT"`, 
     * `"APP_IMPORT"`, `"LDAP_AGENT"`, `"AD_AGENT"`, `"OKTA_ANNOUNCEMENT"`, `"OKTA_ISSUE"`, `"OKTA_UPDATE"`, `"IWA_AGENT"`,
     * `"USER_DEPROVISION"`, `"REPORT_SUSPICIOUS_ACTIVITY"`, `"RATELIMIT_NOTIFICATION"`.
     */
    notificationType: string;
    /**
     * Type of the role. Valid values:
     * `"API_ADMIN"`,
     * `"APP_ADMIN"`,
     * `"CUSTOM"`,
     * `"GROUP_MEMBERSHIP_ADMIN"`,
     * `"HELP_DESK_ADMIN"`,
     * `"MOBILE_ADMIN"`,
     * `"ORG_ADMIN"`,
     * `"READ_ONLY_ADMIN"`,
     * `"REPORT_ADMIN"`,
     * `"SUPER_ADMIN"`,
     * `"USER_ADMIN"`
     * .
     */
    roleType: string;
}

/**
 * A collection of values returned by getRoleSubscription.
 */
export interface GetRoleSubscriptionResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly notificationType: string;
    readonly roleType: string;
    /**
     * Subscription status.
     */
    readonly status: string;
}
/**
 * Use this data source to retrieve role subscription with a specific type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.getRoleSubscription({
 *     notificationType: "APP_IMPORT",
 *     roleType: "SUPER_ADMIN",
 * });
 * ```
 */
export function getRoleSubscriptionOutput(args: GetRoleSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoleSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getRoleSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getRoleSubscription.
 */
export interface GetRoleSubscriptionOutputArgs {
    /**
     * Type of the notification. Valid values: `"CONNECTOR_AGENT"`, `"USER_LOCKED_OUT"`, 
     * `"APP_IMPORT"`, `"LDAP_AGENT"`, `"AD_AGENT"`, `"OKTA_ANNOUNCEMENT"`, `"OKTA_ISSUE"`, `"OKTA_UPDATE"`, `"IWA_AGENT"`,
     * `"USER_DEPROVISION"`, `"REPORT_SUSPICIOUS_ACTIVITY"`, `"RATELIMIT_NOTIFICATION"`.
     */
    notificationType: pulumi.Input<string>;
    /**
     * Type of the role. Valid values:
     * `"API_ADMIN"`,
     * `"APP_ADMIN"`,
     * `"CUSTOM"`,
     * `"GROUP_MEMBERSHIP_ADMIN"`,
     * `"HELP_DESK_ADMIN"`,
     * `"MOBILE_ADMIN"`,
     * `"ORG_ADMIN"`,
     * `"READ_ONLY_ADMIN"`,
     * `"REPORT_ADMIN"`,
     * `"SUPER_ADMIN"`,
     * `"USER_ADMIN"`
     * .
     */
    roleType: pulumi.Input<string>;
}
