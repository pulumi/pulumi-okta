// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve a list of authorization server claims from Okta.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getAuthServerClaims({
 *     authServerId: "default",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAuthServerClaims(args: GetAuthServerClaimsArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthServerClaimsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAuthServerClaims:getAuthServerClaims", {
        "authServerId": args.authServerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthServerClaims.
 */
export interface GetAuthServerClaimsArgs {
    /**
     * Auth server ID.
     */
    authServerId: string;
}

/**
 * A collection of values returned by getAuthServerClaims.
 */
export interface GetAuthServerClaimsResult {
    readonly authServerId: string;
    /**
     * collection of authorization server claims retrieved from Okta with the following properties.
     */
    readonly claims: outputs.GetAuthServerClaimsClaim[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
/**
 * Use this data source to retrieve a list of authorization server claims from Okta.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getAuthServerClaims({
 *     authServerId: "default",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAuthServerClaimsOutput(args: GetAuthServerClaimsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthServerClaimsResult> {
    return pulumi.output(args).apply((a: any) => getAuthServerClaims(a, opts))
}

/**
 * A collection of arguments for invoking getAuthServerClaims.
 */
export interface GetAuthServerClaimsOutputArgs {
    /**
     * Auth server ID.
     */
    authServerId: pulumi.Input<string>;
}
