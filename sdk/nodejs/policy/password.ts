// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a Password Policy. This resource allows you to create and configure a Password Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.policy.Password("example", {
 *     name: "example",
 *     status: "ACTIVE",
 *     description: "Example",
 *     passwordHistoryCount: 4,
 *     groupsIncludeds: [everyone.id],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/password:Password example <policy_id>
 * ```
 */
export class Password extends pulumi.CustomResource {
    /**
     * Get an existing Password resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordState, opts?: pulumi.CustomResourceOptions): Password {
        return new Password(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/password:Password';

    /**
     * Returns true if the given object is an instance of Password.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Password {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Password.__pulumiType;
    }

    /**
     * Authentication Provider: `OKTA`, `ACTIVE_DIRECTORY` or `LDAP`. Default: `OKTA`
     */
    declare public readonly authProvider: pulumi.Output<string | undefined>;
    /**
     * Enable or disable voice call recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    declare public readonly callRecovery: pulumi.Output<string | undefined>;
    /**
     * Policy Description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable or disable email password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    declare public readonly emailRecovery: pulumi.Output<string | undefined>;
    /**
     * List of Group IDs to Include
     */
    declare public readonly groupsIncludeds: pulumi.Output<string[] | undefined>;
    /**
     * Policy Name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit. Default: `0`
     */
    declare public readonly passwordAutoUnlockMinutes: pulumi.Output<number | undefined>;
    /**
     * Check Passwords Against Common Password Dictionary. Default: `false`
     */
    declare public readonly passwordDictionaryLookup: pulumi.Output<boolean | undefined>;
    /**
     * User firstName attribute must be excluded from the password
     */
    declare public readonly passwordExcludeFirstName: pulumi.Output<boolean | undefined>;
    /**
     * User lastName attribute must be excluded from the password
     */
    declare public readonly passwordExcludeLastName: pulumi.Output<boolean | undefined>;
    /**
     * If the user name must be excluded from the password. Default: `true`
     */
    declare public readonly passwordExcludeUsername: pulumi.Output<boolean | undefined>;
    /**
     * Length in days a user will be warned before password expiry: 0 = no warning. Default: `0`
     */
    declare public readonly passwordExpireWarnDays: pulumi.Output<number | undefined>;
    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none. Default: `0`
     */
    declare public readonly passwordHistoryCount: pulumi.Output<number | undefined>;
    /**
     * Notification channels to use to notify a user when their account has been locked.
     */
    declare public readonly passwordLockoutNotificationChannels: pulumi.Output<string[] | undefined>;
    /**
     * Length in days a password is valid before expiry: 0 = no limit. Default: `0`
     */
    declare public readonly passwordMaxAgeDays: pulumi.Output<number | undefined>;
    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit. Default: `10`
     */
    declare public readonly passwordMaxLockoutAttempts: pulumi.Output<number | undefined>;
    /**
     * Minimum time interval in minutes between password changes: 0 = no limit. Default: `0`
     */
    declare public readonly passwordMinAgeMinutes: pulumi.Output<number | undefined>;
    /**
     * Minimum password length. Default: `8`
     */
    declare public readonly passwordMinLength: pulumi.Output<number | undefined>;
    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default: `1`
     */
    declare public readonly passwordMinLowercase: pulumi.Output<number | undefined>;
    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default: `1`
     */
    declare public readonly passwordMinNumber: pulumi.Output<number | undefined>;
    /**
     * If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default: `0`
     */
    declare public readonly passwordMinSymbol: pulumi.Output<number | undefined>;
    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default: `1`
     */
    declare public readonly passwordMinUppercase: pulumi.Output<number | undefined>;
    /**
     * If a user should be informed when their account is locked. Default: `false`
     */
    declare public readonly passwordShowLockoutFailures: pulumi.Output<boolean | undefined>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * Min length of the password recovery question answer. Default: `4`
     */
    declare public readonly questionMinLength: pulumi.Output<number | undefined>;
    /**
     * Enable or disable security question password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    declare public readonly questionRecovery: pulumi.Output<string | undefined>;
    /**
     * Lifetime in minutes of the recovery email token. Default: `60`
     */
    declare public readonly recoveryEmailToken: pulumi.Output<number | undefined>;
    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account. Default: `false`
     */
    declare public readonly skipUnlock: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable SMS password recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    declare public readonly smsRecovery: pulumi.Output<string | undefined>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a Password resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordArgs | PasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordState | undefined;
            resourceInputs["authProvider"] = state?.authProvider;
            resourceInputs["callRecovery"] = state?.callRecovery;
            resourceInputs["description"] = state?.description;
            resourceInputs["emailRecovery"] = state?.emailRecovery;
            resourceInputs["groupsIncludeds"] = state?.groupsIncludeds;
            resourceInputs["name"] = state?.name;
            resourceInputs["passwordAutoUnlockMinutes"] = state?.passwordAutoUnlockMinutes;
            resourceInputs["passwordDictionaryLookup"] = state?.passwordDictionaryLookup;
            resourceInputs["passwordExcludeFirstName"] = state?.passwordExcludeFirstName;
            resourceInputs["passwordExcludeLastName"] = state?.passwordExcludeLastName;
            resourceInputs["passwordExcludeUsername"] = state?.passwordExcludeUsername;
            resourceInputs["passwordExpireWarnDays"] = state?.passwordExpireWarnDays;
            resourceInputs["passwordHistoryCount"] = state?.passwordHistoryCount;
            resourceInputs["passwordLockoutNotificationChannels"] = state?.passwordLockoutNotificationChannels;
            resourceInputs["passwordMaxAgeDays"] = state?.passwordMaxAgeDays;
            resourceInputs["passwordMaxLockoutAttempts"] = state?.passwordMaxLockoutAttempts;
            resourceInputs["passwordMinAgeMinutes"] = state?.passwordMinAgeMinutes;
            resourceInputs["passwordMinLength"] = state?.passwordMinLength;
            resourceInputs["passwordMinLowercase"] = state?.passwordMinLowercase;
            resourceInputs["passwordMinNumber"] = state?.passwordMinNumber;
            resourceInputs["passwordMinSymbol"] = state?.passwordMinSymbol;
            resourceInputs["passwordMinUppercase"] = state?.passwordMinUppercase;
            resourceInputs["passwordShowLockoutFailures"] = state?.passwordShowLockoutFailures;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["questionMinLength"] = state?.questionMinLength;
            resourceInputs["questionRecovery"] = state?.questionRecovery;
            resourceInputs["recoveryEmailToken"] = state?.recoveryEmailToken;
            resourceInputs["skipUnlock"] = state?.skipUnlock;
            resourceInputs["smsRecovery"] = state?.smsRecovery;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as PasswordArgs | undefined;
            resourceInputs["authProvider"] = args?.authProvider;
            resourceInputs["callRecovery"] = args?.callRecovery;
            resourceInputs["description"] = args?.description;
            resourceInputs["emailRecovery"] = args?.emailRecovery;
            resourceInputs["groupsIncludeds"] = args?.groupsIncludeds;
            resourceInputs["name"] = args?.name;
            resourceInputs["passwordAutoUnlockMinutes"] = args?.passwordAutoUnlockMinutes;
            resourceInputs["passwordDictionaryLookup"] = args?.passwordDictionaryLookup;
            resourceInputs["passwordExcludeFirstName"] = args?.passwordExcludeFirstName;
            resourceInputs["passwordExcludeLastName"] = args?.passwordExcludeLastName;
            resourceInputs["passwordExcludeUsername"] = args?.passwordExcludeUsername;
            resourceInputs["passwordExpireWarnDays"] = args?.passwordExpireWarnDays;
            resourceInputs["passwordHistoryCount"] = args?.passwordHistoryCount;
            resourceInputs["passwordLockoutNotificationChannels"] = args?.passwordLockoutNotificationChannels;
            resourceInputs["passwordMaxAgeDays"] = args?.passwordMaxAgeDays;
            resourceInputs["passwordMaxLockoutAttempts"] = args?.passwordMaxLockoutAttempts;
            resourceInputs["passwordMinAgeMinutes"] = args?.passwordMinAgeMinutes;
            resourceInputs["passwordMinLength"] = args?.passwordMinLength;
            resourceInputs["passwordMinLowercase"] = args?.passwordMinLowercase;
            resourceInputs["passwordMinNumber"] = args?.passwordMinNumber;
            resourceInputs["passwordMinSymbol"] = args?.passwordMinSymbol;
            resourceInputs["passwordMinUppercase"] = args?.passwordMinUppercase;
            resourceInputs["passwordShowLockoutFailures"] = args?.passwordShowLockoutFailures;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["questionMinLength"] = args?.questionMinLength;
            resourceInputs["questionRecovery"] = args?.questionRecovery;
            resourceInputs["recoveryEmailToken"] = args?.recoveryEmailToken;
            resourceInputs["skipUnlock"] = args?.skipUnlock;
            resourceInputs["smsRecovery"] = args?.smsRecovery;
            resourceInputs["status"] = args?.status;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Password.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Password resources.
 */
export interface PasswordState {
    /**
     * Authentication Provider: `OKTA`, `ACTIVE_DIRECTORY` or `LDAP`. Default: `OKTA`
     */
    authProvider?: pulumi.Input<string>;
    /**
     * Enable or disable voice call recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    callRecovery?: pulumi.Input<string>;
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable or disable email password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    emailRecovery?: pulumi.Input<string>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit. Default: `0`
     */
    passwordAutoUnlockMinutes?: pulumi.Input<number>;
    /**
     * Check Passwords Against Common Password Dictionary. Default: `false`
     */
    passwordDictionaryLookup?: pulumi.Input<boolean>;
    /**
     * User firstName attribute must be excluded from the password
     */
    passwordExcludeFirstName?: pulumi.Input<boolean>;
    /**
     * User lastName attribute must be excluded from the password
     */
    passwordExcludeLastName?: pulumi.Input<boolean>;
    /**
     * If the user name must be excluded from the password. Default: `true`
     */
    passwordExcludeUsername?: pulumi.Input<boolean>;
    /**
     * Length in days a user will be warned before password expiry: 0 = no warning. Default: `0`
     */
    passwordExpireWarnDays?: pulumi.Input<number>;
    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none. Default: `0`
     */
    passwordHistoryCount?: pulumi.Input<number>;
    /**
     * Notification channels to use to notify a user when their account has been locked.
     */
    passwordLockoutNotificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Length in days a password is valid before expiry: 0 = no limit. Default: `0`
     */
    passwordMaxAgeDays?: pulumi.Input<number>;
    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit. Default: `10`
     */
    passwordMaxLockoutAttempts?: pulumi.Input<number>;
    /**
     * Minimum time interval in minutes between password changes: 0 = no limit. Default: `0`
     */
    passwordMinAgeMinutes?: pulumi.Input<number>;
    /**
     * Minimum password length. Default: `8`
     */
    passwordMinLength?: pulumi.Input<number>;
    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinLowercase?: pulumi.Input<number>;
    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinNumber?: pulumi.Input<number>;
    /**
     * If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default: `0`
     */
    passwordMinSymbol?: pulumi.Input<number>;
    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinUppercase?: pulumi.Input<number>;
    /**
     * If a user should be informed when their account is locked. Default: `false`
     */
    passwordShowLockoutFailures?: pulumi.Input<boolean>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Min length of the password recovery question answer. Default: `4`
     */
    questionMinLength?: pulumi.Input<number>;
    /**
     * Enable or disable security question password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    questionRecovery?: pulumi.Input<string>;
    /**
     * Lifetime in minutes of the recovery email token. Default: `60`
     */
    recoveryEmailToken?: pulumi.Input<number>;
    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account. Default: `false`
     */
    skipUnlock?: pulumi.Input<boolean>;
    /**
     * Enable or disable SMS password recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    smsRecovery?: pulumi.Input<string>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Password resource.
 */
export interface PasswordArgs {
    /**
     * Authentication Provider: `OKTA`, `ACTIVE_DIRECTORY` or `LDAP`. Default: `OKTA`
     */
    authProvider?: pulumi.Input<string>;
    /**
     * Enable or disable voice call recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    callRecovery?: pulumi.Input<string>;
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable or disable email password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    emailRecovery?: pulumi.Input<string>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit. Default: `0`
     */
    passwordAutoUnlockMinutes?: pulumi.Input<number>;
    /**
     * Check Passwords Against Common Password Dictionary. Default: `false`
     */
    passwordDictionaryLookup?: pulumi.Input<boolean>;
    /**
     * User firstName attribute must be excluded from the password
     */
    passwordExcludeFirstName?: pulumi.Input<boolean>;
    /**
     * User lastName attribute must be excluded from the password
     */
    passwordExcludeLastName?: pulumi.Input<boolean>;
    /**
     * If the user name must be excluded from the password. Default: `true`
     */
    passwordExcludeUsername?: pulumi.Input<boolean>;
    /**
     * Length in days a user will be warned before password expiry: 0 = no warning. Default: `0`
     */
    passwordExpireWarnDays?: pulumi.Input<number>;
    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none. Default: `0`
     */
    passwordHistoryCount?: pulumi.Input<number>;
    /**
     * Notification channels to use to notify a user when their account has been locked.
     */
    passwordLockoutNotificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Length in days a password is valid before expiry: 0 = no limit. Default: `0`
     */
    passwordMaxAgeDays?: pulumi.Input<number>;
    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit. Default: `10`
     */
    passwordMaxLockoutAttempts?: pulumi.Input<number>;
    /**
     * Minimum time interval in minutes between password changes: 0 = no limit. Default: `0`
     */
    passwordMinAgeMinutes?: pulumi.Input<number>;
    /**
     * Minimum password length. Default: `8`
     */
    passwordMinLength?: pulumi.Input<number>;
    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinLowercase?: pulumi.Input<number>;
    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinNumber?: pulumi.Input<number>;
    /**
     * If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default: `0`
     */
    passwordMinSymbol?: pulumi.Input<number>;
    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default: `1`
     */
    passwordMinUppercase?: pulumi.Input<number>;
    /**
     * If a user should be informed when their account is locked. Default: `false`
     */
    passwordShowLockoutFailures?: pulumi.Input<boolean>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Min length of the password recovery question answer. Default: `4`
     */
    questionMinLength?: pulumi.Input<number>;
    /**
     * Enable or disable security question password recovery: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    questionRecovery?: pulumi.Input<string>;
    /**
     * Lifetime in minutes of the recovery email token. Default: `60`
     */
    recoveryEmailToken?: pulumi.Input<number>;
    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account. Default: `false`
     */
    skipUnlock?: pulumi.Input<boolean>;
    /**
     * Enable or disable SMS password recovery: `ACTIVE` or `INACTIVE`. Default: `INACTIVE`
     */
    smsRecovery?: pulumi.Input<string>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
