// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates an IdP Discovery Policy Rule.
 *
 * This resource allows you to create and configure an IdP Discovery Policy Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.policy.RuleIdpDiscovery("example", {
 *     idpId: "<idp id>",
 *     idpType: "SAML2",
 *     policyid: "<policy id>",
 *     priority: 1,
 *     userIdentifierAttribute: "company",
 *     userIdentifierPatterns: [{
 *         matchType: "EQUALS",
 *         value: "Articulate",
 *     }],
 *     userIdentifierType: "ATTRIBUTE",
 * });
 * ```
 */
export class RuleIdpDiscovery extends pulumi.CustomResource {
    /**
     * Get an existing RuleIdpDiscovery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleIdpDiscoveryState, opts?: pulumi.CustomResourceOptions): RuleIdpDiscovery {
        return new RuleIdpDiscovery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/ruleIdpDiscovery:RuleIdpDiscovery';

    /**
     * Returns true if the given object is an instance of RuleIdpDiscovery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleIdpDiscovery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleIdpDiscovery.__pulumiType;
    }

    /**
     * Applications to exclude in discovery rule
     */
    public readonly appExcludes!: pulumi.Output<outputs.policy.RuleIdpDiscoveryAppExclude[] | undefined>;
    /**
     * Applications to include in discovery rule
     */
    public readonly appIncludes!: pulumi.Output<outputs.policy.RuleIdpDiscoveryAppInclude[] | undefined>;
    public readonly idpId!: pulumi.Output<string | undefined>;
    public readonly idpType!: pulumi.Output<string | undefined>;
    /**
     * Policy Rule Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    public readonly platformIncludes!: pulumi.Output<outputs.policy.RuleIdpDiscoveryPlatformInclude[] | undefined>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly userIdentifierAttribute!: pulumi.Output<string | undefined>;
    public readonly userIdentifierPatterns!: pulumi.Output<outputs.policy.RuleIdpDiscoveryUserIdentifierPattern[] | undefined>;
    public readonly userIdentifierType!: pulumi.Output<string | undefined>;

    /**
     * Create a RuleIdpDiscovery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleIdpDiscoveryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleIdpDiscoveryArgs | RuleIdpDiscoveryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RuleIdpDiscoveryState | undefined;
            inputs["appExcludes"] = state ? state.appExcludes : undefined;
            inputs["appIncludes"] = state ? state.appIncludes : undefined;
            inputs["idpId"] = state ? state.idpId : undefined;
            inputs["idpType"] = state ? state.idpType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkConnection"] = state ? state.networkConnection : undefined;
            inputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            inputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            inputs["platformIncludes"] = state ? state.platformIncludes : undefined;
            inputs["policyid"] = state ? state.policyid : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["userIdentifierAttribute"] = state ? state.userIdentifierAttribute : undefined;
            inputs["userIdentifierPatterns"] = state ? state.userIdentifierPatterns : undefined;
            inputs["userIdentifierType"] = state ? state.userIdentifierType : undefined;
        } else {
            const args = argsOrState as RuleIdpDiscoveryArgs | undefined;
            if (!args || args.policyid === undefined) {
                throw new Error("Missing required property 'policyid'");
            }
            inputs["appExcludes"] = args ? args.appExcludes : undefined;
            inputs["appIncludes"] = args ? args.appIncludes : undefined;
            inputs["idpId"] = args ? args.idpId : undefined;
            inputs["idpType"] = args ? args.idpType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkConnection"] = args ? args.networkConnection : undefined;
            inputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            inputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            inputs["platformIncludes"] = args ? args.platformIncludes : undefined;
            inputs["policyid"] = args ? args.policyid : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["userIdentifierAttribute"] = args ? args.userIdentifierAttribute : undefined;
            inputs["userIdentifierPatterns"] = args ? args.userIdentifierPatterns : undefined;
            inputs["userIdentifierType"] = args ? args.userIdentifierType : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RuleIdpDiscovery.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleIdpDiscovery resources.
 */
export interface RuleIdpDiscoveryState {
    /**
     * Applications to exclude in discovery rule
     */
    readonly appExcludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryAppExclude>[]>;
    /**
     * Applications to include in discovery rule
     */
    readonly appIncludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryAppInclude>[]>;
    readonly idpId?: pulumi.Input<string>;
    readonly idpType?: pulumi.Input<string>;
    /**
     * Policy Rule Name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    readonly networkConnection?: pulumi.Input<string>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    readonly networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    readonly networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly platformIncludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryPlatformInclude>[]>;
    /**
     * Policy ID.
     */
    readonly policyid?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    readonly status?: pulumi.Input<string>;
    readonly userIdentifierAttribute?: pulumi.Input<string>;
    readonly userIdentifierPatterns?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryUserIdentifierPattern>[]>;
    readonly userIdentifierType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuleIdpDiscovery resource.
 */
export interface RuleIdpDiscoveryArgs {
    /**
     * Applications to exclude in discovery rule
     */
    readonly appExcludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryAppExclude>[]>;
    /**
     * Applications to include in discovery rule
     */
    readonly appIncludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryAppInclude>[]>;
    readonly idpId?: pulumi.Input<string>;
    readonly idpType?: pulumi.Input<string>;
    /**
     * Policy Rule Name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    readonly networkConnection?: pulumi.Input<string>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    readonly networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    readonly networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly platformIncludes?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryPlatformInclude>[]>;
    /**
     * Policy ID.
     */
    readonly policyid: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    readonly status?: pulumi.Input<string>;
    readonly userIdentifierAttribute?: pulumi.Input<string>;
    readonly userIdentifierPatterns?: pulumi.Input<pulumi.Input<inputs.policy.RuleIdpDiscoveryUserIdentifierPattern>[]>;
    readonly userIdentifierType?: pulumi.Input<string>;
}
