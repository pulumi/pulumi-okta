// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a device assurance policy for chromeos.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.policy.DeviceAssuranceChromeos("example", {
 *     name: "example",
 *     tpspAllowScreenLock: true,
 *     tpspBrowserVersion: "15393.27.0",
 *     tpspBuiltinDnsClientEnabled: true,
 *     tpspChromeRemoteDesktopAppBlocked: true,
 *     tpspDeviceEnrollmentDomain: "exampleDomain",
 *     tpspDiskEncrypted: true,
 *     tpspKeyTrustLevel: "CHROME_OS_VERIFIED_MODE",
 *     tpspOsFirewall: true,
 *     tpspOsVersion: "10.0.19041.1110",
 *     tpspPasswordProctectionWarningTrigger: "PASSWORD_PROTECTION_OFF",
 *     tpspRealtimeUrlCheckMode: true,
 *     tpspSafeBrowsingProtectionLevel: "ENHANCED_PROTECTION",
 *     tpspScreenLockSecured: true,
 *     tpspSiteIsolationEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos example <device_assurance_id>
 * ```
 */
export class DeviceAssuranceChromeos extends pulumi.CustomResource {
    /**
     * Get an existing DeviceAssuranceChromeos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceAssuranceChromeosState, opts?: pulumi.CustomResourceOptions): DeviceAssuranceChromeos {
        return new DeviceAssuranceChromeos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos';

    /**
     * Returns true if the given object is an instance of DeviceAssuranceChromeos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceAssuranceChromeos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceAssuranceChromeos.__pulumiType;
    }

    /**
     * Created by
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Created date
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * Last update
     */
    public /*out*/ readonly lastUpdate!: pulumi.Output<string>;
    /**
     * Last updated by
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * Name of the device assurance policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Policy device assurance platform
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * Third party signal provider allow screen lock
     */
    public readonly tpspAllowScreenLock!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider minimum browser version
     */
    public readonly tpspBrowserVersion!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider builtin dns client enabled
     */
    public readonly tpspBuiltinDnsClientEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider chrome remote desktop app blocked
     */
    public readonly tpspChromeRemoteDesktopAppBlocked!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider device enrollment domain
     */
    public readonly tpspDeviceEnrollmentDomain!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider disk encrypted
     */
    public readonly tpspDiskEncrypted!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider key trust level
     */
    public readonly tpspKeyTrustLevel!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider os firewall
     */
    public readonly tpspOsFirewall!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider minimum os version
     */
    public readonly tpspOsVersion!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider password protection warning trigger
     */
    public readonly tpspPasswordProctectionWarningTrigger!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider realtime url check mode
     */
    public readonly tpspRealtimeUrlCheckMode!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider safe browsing protection level
     */
    public readonly tpspSafeBrowsingProtectionLevel!: pulumi.Output<string | undefined>;
    /**
     * Third party signal provider screen lock secure
     */
    public readonly tpspScreenLockSecured!: pulumi.Output<boolean | undefined>;
    /**
     * Third party signal provider site isolation enabled
     */
    public readonly tpspSiteIsolationEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DeviceAssuranceChromeos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeviceAssuranceChromeosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceAssuranceChromeosArgs | DeviceAssuranceChromeosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceAssuranceChromeosState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["lastUpdate"] = state ? state.lastUpdate : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["tpspAllowScreenLock"] = state ? state.tpspAllowScreenLock : undefined;
            resourceInputs["tpspBrowserVersion"] = state ? state.tpspBrowserVersion : undefined;
            resourceInputs["tpspBuiltinDnsClientEnabled"] = state ? state.tpspBuiltinDnsClientEnabled : undefined;
            resourceInputs["tpspChromeRemoteDesktopAppBlocked"] = state ? state.tpspChromeRemoteDesktopAppBlocked : undefined;
            resourceInputs["tpspDeviceEnrollmentDomain"] = state ? state.tpspDeviceEnrollmentDomain : undefined;
            resourceInputs["tpspDiskEncrypted"] = state ? state.tpspDiskEncrypted : undefined;
            resourceInputs["tpspKeyTrustLevel"] = state ? state.tpspKeyTrustLevel : undefined;
            resourceInputs["tpspOsFirewall"] = state ? state.tpspOsFirewall : undefined;
            resourceInputs["tpspOsVersion"] = state ? state.tpspOsVersion : undefined;
            resourceInputs["tpspPasswordProctectionWarningTrigger"] = state ? state.tpspPasswordProctectionWarningTrigger : undefined;
            resourceInputs["tpspRealtimeUrlCheckMode"] = state ? state.tpspRealtimeUrlCheckMode : undefined;
            resourceInputs["tpspSafeBrowsingProtectionLevel"] = state ? state.tpspSafeBrowsingProtectionLevel : undefined;
            resourceInputs["tpspScreenLockSecured"] = state ? state.tpspScreenLockSecured : undefined;
            resourceInputs["tpspSiteIsolationEnabled"] = state ? state.tpspSiteIsolationEnabled : undefined;
        } else {
            const args = argsOrState as DeviceAssuranceChromeosArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tpspAllowScreenLock"] = args ? args.tpspAllowScreenLock : undefined;
            resourceInputs["tpspBrowserVersion"] = args ? args.tpspBrowserVersion : undefined;
            resourceInputs["tpspBuiltinDnsClientEnabled"] = args ? args.tpspBuiltinDnsClientEnabled : undefined;
            resourceInputs["tpspChromeRemoteDesktopAppBlocked"] = args ? args.tpspChromeRemoteDesktopAppBlocked : undefined;
            resourceInputs["tpspDeviceEnrollmentDomain"] = args ? args.tpspDeviceEnrollmentDomain : undefined;
            resourceInputs["tpspDiskEncrypted"] = args ? args.tpspDiskEncrypted : undefined;
            resourceInputs["tpspKeyTrustLevel"] = args ? args.tpspKeyTrustLevel : undefined;
            resourceInputs["tpspOsFirewall"] = args ? args.tpspOsFirewall : undefined;
            resourceInputs["tpspOsVersion"] = args ? args.tpspOsVersion : undefined;
            resourceInputs["tpspPasswordProctectionWarningTrigger"] = args ? args.tpspPasswordProctectionWarningTrigger : undefined;
            resourceInputs["tpspRealtimeUrlCheckMode"] = args ? args.tpspRealtimeUrlCheckMode : undefined;
            resourceInputs["tpspSafeBrowsingProtectionLevel"] = args ? args.tpspSafeBrowsingProtectionLevel : undefined;
            resourceInputs["tpspScreenLockSecured"] = args ? args.tpspScreenLockSecured : undefined;
            resourceInputs["tpspSiteIsolationEnabled"] = args ? args.tpspSiteIsolationEnabled : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastUpdate"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceAssuranceChromeos.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceAssuranceChromeos resources.
 */
export interface DeviceAssuranceChromeosState {
    /**
     * Created by
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created date
     */
    createdDate?: pulumi.Input<string>;
    /**
     * Last update
     */
    lastUpdate?: pulumi.Input<string>;
    /**
     * Last updated by
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * Name of the device assurance policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy device assurance platform
     */
    platform?: pulumi.Input<string>;
    /**
     * Third party signal provider allow screen lock
     */
    tpspAllowScreenLock?: pulumi.Input<boolean>;
    /**
     * Third party signal provider minimum browser version
     */
    tpspBrowserVersion?: pulumi.Input<string>;
    /**
     * Third party signal provider builtin dns client enabled
     */
    tpspBuiltinDnsClientEnabled?: pulumi.Input<boolean>;
    /**
     * Third party signal provider chrome remote desktop app blocked
     */
    tpspChromeRemoteDesktopAppBlocked?: pulumi.Input<boolean>;
    /**
     * Third party signal provider device enrollment domain
     */
    tpspDeviceEnrollmentDomain?: pulumi.Input<string>;
    /**
     * Third party signal provider disk encrypted
     */
    tpspDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * Third party signal provider key trust level
     */
    tpspKeyTrustLevel?: pulumi.Input<string>;
    /**
     * Third party signal provider os firewall
     */
    tpspOsFirewall?: pulumi.Input<boolean>;
    /**
     * Third party signal provider minimum os version
     */
    tpspOsVersion?: pulumi.Input<string>;
    /**
     * Third party signal provider password protection warning trigger
     */
    tpspPasswordProctectionWarningTrigger?: pulumi.Input<string>;
    /**
     * Third party signal provider realtime url check mode
     */
    tpspRealtimeUrlCheckMode?: pulumi.Input<boolean>;
    /**
     * Third party signal provider safe browsing protection level
     */
    tpspSafeBrowsingProtectionLevel?: pulumi.Input<string>;
    /**
     * Third party signal provider screen lock secure
     */
    tpspScreenLockSecured?: pulumi.Input<boolean>;
    /**
     * Third party signal provider site isolation enabled
     */
    tpspSiteIsolationEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DeviceAssuranceChromeos resource.
 */
export interface DeviceAssuranceChromeosArgs {
    /**
     * Name of the device assurance policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Third party signal provider allow screen lock
     */
    tpspAllowScreenLock?: pulumi.Input<boolean>;
    /**
     * Third party signal provider minimum browser version
     */
    tpspBrowserVersion?: pulumi.Input<string>;
    /**
     * Third party signal provider builtin dns client enabled
     */
    tpspBuiltinDnsClientEnabled?: pulumi.Input<boolean>;
    /**
     * Third party signal provider chrome remote desktop app blocked
     */
    tpspChromeRemoteDesktopAppBlocked?: pulumi.Input<boolean>;
    /**
     * Third party signal provider device enrollment domain
     */
    tpspDeviceEnrollmentDomain?: pulumi.Input<string>;
    /**
     * Third party signal provider disk encrypted
     */
    tpspDiskEncrypted?: pulumi.Input<boolean>;
    /**
     * Third party signal provider key trust level
     */
    tpspKeyTrustLevel?: pulumi.Input<string>;
    /**
     * Third party signal provider os firewall
     */
    tpspOsFirewall?: pulumi.Input<boolean>;
    /**
     * Third party signal provider minimum os version
     */
    tpspOsVersion?: pulumi.Input<string>;
    /**
     * Third party signal provider password protection warning trigger
     */
    tpspPasswordProctectionWarningTrigger?: pulumi.Input<string>;
    /**
     * Third party signal provider realtime url check mode
     */
    tpspRealtimeUrlCheckMode?: pulumi.Input<boolean>;
    /**
     * Third party signal provider safe browsing protection level
     */
    tpspSafeBrowsingProtectionLevel?: pulumi.Input<string>;
    /**
     * Third party signal provider screen lock secure
     */
    tpspScreenLockSecured?: pulumi.Input<boolean>;
    /**
     * Third party signal provider site isolation enabled
     */
    tpspSiteIsolationEnabled?: pulumi.Input<boolean>;
}
