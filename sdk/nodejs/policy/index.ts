// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DeviceAssuranceAndroidArgs, DeviceAssuranceAndroidState } from "./deviceAssuranceAndroid";
export type DeviceAssuranceAndroid = import("./deviceAssuranceAndroid").DeviceAssuranceAndroid;
export const DeviceAssuranceAndroid: typeof import("./deviceAssuranceAndroid").DeviceAssuranceAndroid = null as any;
utilities.lazyLoad(exports, ["DeviceAssuranceAndroid"], () => require("./deviceAssuranceAndroid"));

export { DeviceAssuranceChromeosArgs, DeviceAssuranceChromeosState } from "./deviceAssuranceChromeos";
export type DeviceAssuranceChromeos = import("./deviceAssuranceChromeos").DeviceAssuranceChromeos;
export const DeviceAssuranceChromeos: typeof import("./deviceAssuranceChromeos").DeviceAssuranceChromeos = null as any;
utilities.lazyLoad(exports, ["DeviceAssuranceChromeos"], () => require("./deviceAssuranceChromeos"));

export { DeviceAssuranceIosArgs, DeviceAssuranceIosState } from "./deviceAssuranceIos";
export type DeviceAssuranceIos = import("./deviceAssuranceIos").DeviceAssuranceIos;
export const DeviceAssuranceIos: typeof import("./deviceAssuranceIos").DeviceAssuranceIos = null as any;
utilities.lazyLoad(exports, ["DeviceAssuranceIos"], () => require("./deviceAssuranceIos"));

export { DeviceAssuranceMacosArgs, DeviceAssuranceMacosState } from "./deviceAssuranceMacos";
export type DeviceAssuranceMacos = import("./deviceAssuranceMacos").DeviceAssuranceMacos;
export const DeviceAssuranceMacos: typeof import("./deviceAssuranceMacos").DeviceAssuranceMacos = null as any;
utilities.lazyLoad(exports, ["DeviceAssuranceMacos"], () => require("./deviceAssuranceMacos"));

export { DeviceAssuranceWindowsArgs, DeviceAssuranceWindowsState } from "./deviceAssuranceWindows";
export type DeviceAssuranceWindows = import("./deviceAssuranceWindows").DeviceAssuranceWindows;
export const DeviceAssuranceWindows: typeof import("./deviceAssuranceWindows").DeviceAssuranceWindows = null as any;
utilities.lazyLoad(exports, ["DeviceAssuranceWindows"], () => require("./deviceAssuranceWindows"));

export { GetDefaultPolicyArgs, GetDefaultPolicyResult, GetDefaultPolicyOutputArgs } from "./getDefaultPolicy";
export const getDefaultPolicy: typeof import("./getDefaultPolicy").getDefaultPolicy = null as any;
export const getDefaultPolicyOutput: typeof import("./getDefaultPolicy").getDefaultPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultPolicy","getDefaultPolicyOutput"], () => require("./getDefaultPolicy"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { MfaArgs, MfaState } from "./mfa";
export type Mfa = import("./mfa").Mfa;
export const Mfa: typeof import("./mfa").Mfa = null as any;
utilities.lazyLoad(exports, ["Mfa"], () => require("./mfa"));

export { PasswordArgs, PasswordState } from "./password";
export type Password = import("./password").Password;
export const Password: typeof import("./password").Password = null as any;
utilities.lazyLoad(exports, ["Password"], () => require("./password"));

export { RuleIdpDiscoveryArgs, RuleIdpDiscoveryState } from "./ruleIdpDiscovery";
export type RuleIdpDiscovery = import("./ruleIdpDiscovery").RuleIdpDiscovery;
export const RuleIdpDiscovery: typeof import("./ruleIdpDiscovery").RuleIdpDiscovery = null as any;
utilities.lazyLoad(exports, ["RuleIdpDiscovery"], () => require("./ruleIdpDiscovery"));

export { RuleMfaArgs, RuleMfaState } from "./ruleMfa";
export type RuleMfa = import("./ruleMfa").RuleMfa;
export const RuleMfa: typeof import("./ruleMfa").RuleMfa = null as any;
utilities.lazyLoad(exports, ["RuleMfa"], () => require("./ruleMfa"));

export { RulePasswordArgs, RulePasswordState } from "./rulePassword";
export type RulePassword = import("./rulePassword").RulePassword;
export const RulePassword: typeof import("./rulePassword").RulePassword = null as any;
utilities.lazyLoad(exports, ["RulePassword"], () => require("./rulePassword"));

export { RuleSignonArgs, RuleSignonState } from "./ruleSignon";
export type RuleSignon = import("./ruleSignon").RuleSignon;
export const RuleSignon: typeof import("./ruleSignon").RuleSignon = null as any;
utilities.lazyLoad(exports, ["RuleSignon"], () => require("./ruleSignon"));

export { SignonArgs, SignonState } from "./signon";
export type Signon = import("./signon").Signon;
export const Signon: typeof import("./signon").Signon = null as any;
utilities.lazyLoad(exports, ["Signon"], () => require("./signon"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid":
                return new DeviceAssuranceAndroid(name, <any>undefined, { urn })
            case "okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos":
                return new DeviceAssuranceChromeos(name, <any>undefined, { urn })
            case "okta:policy/deviceAssuranceIos:DeviceAssuranceIos":
                return new DeviceAssuranceIos(name, <any>undefined, { urn })
            case "okta:policy/deviceAssuranceMacos:DeviceAssuranceMacos":
                return new DeviceAssuranceMacos(name, <any>undefined, { urn })
            case "okta:policy/deviceAssuranceWindows:DeviceAssuranceWindows":
                return new DeviceAssuranceWindows(name, <any>undefined, { urn })
            case "okta:policy/mfa:Mfa":
                return new Mfa(name, <any>undefined, { urn })
            case "okta:policy/password:Password":
                return new Password(name, <any>undefined, { urn })
            case "okta:policy/ruleIdpDiscovery:RuleIdpDiscovery":
                return new RuleIdpDiscovery(name, <any>undefined, { urn })
            case "okta:policy/ruleMfa:RuleMfa":
                return new RuleMfa(name, <any>undefined, { urn })
            case "okta:policy/rulePassword:RulePassword":
                return new RulePassword(name, <any>undefined, { urn })
            case "okta:policy/ruleSignon:RuleSignon":
                return new RuleSignon(name, <any>undefined, { urn })
            case "okta:policy/signon:Signon":
                return new Signon(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "policy/deviceAssuranceAndroid", _module)
pulumi.runtime.registerResourceModule("okta", "policy/deviceAssuranceChromeos", _module)
pulumi.runtime.registerResourceModule("okta", "policy/deviceAssuranceIos", _module)
pulumi.runtime.registerResourceModule("okta", "policy/deviceAssuranceMacos", _module)
pulumi.runtime.registerResourceModule("okta", "policy/deviceAssuranceWindows", _module)
pulumi.runtime.registerResourceModule("okta", "policy/mfa", _module)
pulumi.runtime.registerResourceModule("okta", "policy/password", _module)
pulumi.runtime.registerResourceModule("okta", "policy/ruleIdpDiscovery", _module)
pulumi.runtime.registerResourceModule("okta", "policy/ruleMfa", _module)
pulumi.runtime.registerResourceModule("okta", "policy/rulePassword", _module)
pulumi.runtime.registerResourceModule("okta", "policy/ruleSignon", _module)
pulumi.runtime.registerResourceModule("okta", "policy/signon", _module)
