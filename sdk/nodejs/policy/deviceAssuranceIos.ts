// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a device assurance policy for ios.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/deviceAssuranceIos:DeviceAssuranceIos example <device_assurance_id>
 * ```
 */
export class DeviceAssuranceIos extends pulumi.CustomResource {
    /**
     * Get an existing DeviceAssuranceIos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceAssuranceIosState, opts?: pulumi.CustomResourceOptions): DeviceAssuranceIos {
        return new DeviceAssuranceIos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/deviceAssuranceIos:DeviceAssuranceIos';

    /**
     * Returns true if the given object is an instance of DeviceAssuranceIos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceAssuranceIos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceAssuranceIos.__pulumiType;
    }

    /**
     * Created by of the device assurance polic
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Created date of the device assurance polic
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * Is the device jailbroken in the device assurance policy.
     */
    public readonly jailbreak!: pulumi.Output<boolean | undefined>;
    /**
     * Last update of the device assurance polic
     */
    public /*out*/ readonly lastUpdate!: pulumi.Output<string>;
    /**
     * Last updated by of the device assurance polic
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * Name of the device assurance policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Minimum os version of the device in the device assurance policy.
     */
    public readonly osVersion!: pulumi.Output<string | undefined>;
    /**
     * Policy device assurance platform
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     */
    public readonly screenlockTypes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DeviceAssuranceIos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeviceAssuranceIosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceAssuranceIosArgs | DeviceAssuranceIosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceAssuranceIosState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["jailbreak"] = state ? state.jailbreak : undefined;
            resourceInputs["lastUpdate"] = state ? state.lastUpdate : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["screenlockTypes"] = state ? state.screenlockTypes : undefined;
        } else {
            const args = argsOrState as DeviceAssuranceIosArgs | undefined;
            resourceInputs["jailbreak"] = args ? args.jailbreak : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osVersion"] = args ? args.osVersion : undefined;
            resourceInputs["screenlockTypes"] = args ? args.screenlockTypes : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastUpdate"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceAssuranceIos.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceAssuranceIos resources.
 */
export interface DeviceAssuranceIosState {
    /**
     * Created by of the device assurance polic
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created date of the device assurance polic
     */
    createdDate?: pulumi.Input<string>;
    /**
     * Is the device jailbroken in the device assurance policy.
     */
    jailbreak?: pulumi.Input<boolean>;
    /**
     * Last update of the device assurance polic
     */
    lastUpdate?: pulumi.Input<string>;
    /**
     * Last updated by of the device assurance polic
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * Name of the device assurance policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum os version of the device in the device assurance policy.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Policy device assurance platform
     */
    platform?: pulumi.Input<string>;
    /**
     * List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     */
    screenlockTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DeviceAssuranceIos resource.
 */
export interface DeviceAssuranceIosArgs {
    /**
     * Is the device jailbroken in the device assurance policy.
     */
    jailbreak?: pulumi.Input<boolean>;
    /**
     * Name of the device assurance policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum os version of the device in the device assurance policy.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     */
    screenlockTypes?: pulumi.Input<pulumi.Input<string>[]>;
}
