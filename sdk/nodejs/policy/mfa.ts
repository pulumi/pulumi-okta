// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const classicExample = new okta.policy.Mfa("classic_example", {
 *     name: "MFA Policy Classic",
 *     status: "ACTIVE",
 *     description: "Example MFA policy using Okta Classic engine with factors.",
 *     isOie: false,
 *     oktaPassword: {
 *         enroll: "REQUIRED",
 *     },
 *     oktaOtp: {
 *         enroll: "REQUIRED",
 *     },
 *     groupsIncludeds: [everyone.id],
 * });
 * const oieExample = new okta.policy.Mfa("oie_example", {
 *     name: "MFA Policy OIE",
 *     status: "ACTIVE",
 *     description: "Example MFA policy that uses Okta Identity Engine (OIE) with authenticators",
 *     isOie: true,
 *     oktaPassword: {
 *         enroll: "REQUIRED",
 *     },
 *     oktaVerify: {
 *         enroll: "REQUIRED",
 *     },
 *     groupsIncludeds: [everyone.id],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/mfa:Mfa example &#60;policy id&#62;
 * ```
 */
export class Mfa extends pulumi.CustomResource {
    /**
     * Get an existing Mfa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaState, opts?: pulumi.CustomResourceOptions): Mfa {
        return new Mfa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/mfa:Mfa';

    /**
     * Returns true if the given object is an instance of Mfa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mfa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mfa.__pulumiType;
    }

    /**
     * Policy Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly duo!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly externalIdp!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly fidoU2f!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly fidoWebauthn!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly googleOtp!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of Group IDs to Include
     */
    public readonly groupsIncludeds!: pulumi.Output<string[] | undefined>;
    public readonly hotp!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    public readonly isOie!: pulumi.Output<boolean | undefined>;
    /**
     * Policy Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly oktaCall!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaEmail!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaOtp!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaPassword!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaPush!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaQuestion!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaSms!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly oktaVerify!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly onpremMfa!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly phoneNumber!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly rsaToken!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly securityQuestion!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly symantecVip!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly webauthn!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly yubikeyToken!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Mfa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MfaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaArgs | MfaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duo"] = state ? state.duo : undefined;
            resourceInputs["externalIdp"] = state ? state.externalIdp : undefined;
            resourceInputs["fidoU2f"] = state ? state.fidoU2f : undefined;
            resourceInputs["fidoWebauthn"] = state ? state.fidoWebauthn : undefined;
            resourceInputs["googleOtp"] = state ? state.googleOtp : undefined;
            resourceInputs["groupsIncludeds"] = state ? state.groupsIncludeds : undefined;
            resourceInputs["hotp"] = state ? state.hotp : undefined;
            resourceInputs["isOie"] = state ? state.isOie : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oktaCall"] = state ? state.oktaCall : undefined;
            resourceInputs["oktaEmail"] = state ? state.oktaEmail : undefined;
            resourceInputs["oktaOtp"] = state ? state.oktaOtp : undefined;
            resourceInputs["oktaPassword"] = state ? state.oktaPassword : undefined;
            resourceInputs["oktaPush"] = state ? state.oktaPush : undefined;
            resourceInputs["oktaQuestion"] = state ? state.oktaQuestion : undefined;
            resourceInputs["oktaSms"] = state ? state.oktaSms : undefined;
            resourceInputs["oktaVerify"] = state ? state.oktaVerify : undefined;
            resourceInputs["onpremMfa"] = state ? state.onpremMfa : undefined;
            resourceInputs["phoneNumber"] = state ? state.phoneNumber : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["rsaToken"] = state ? state.rsaToken : undefined;
            resourceInputs["securityQuestion"] = state ? state.securityQuestion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["symantecVip"] = state ? state.symantecVip : undefined;
            resourceInputs["webauthn"] = state ? state.webauthn : undefined;
            resourceInputs["yubikeyToken"] = state ? state.yubikeyToken : undefined;
        } else {
            const args = argsOrState as MfaArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duo"] = args ? args.duo : undefined;
            resourceInputs["externalIdp"] = args ? args.externalIdp : undefined;
            resourceInputs["fidoU2f"] = args ? args.fidoU2f : undefined;
            resourceInputs["fidoWebauthn"] = args ? args.fidoWebauthn : undefined;
            resourceInputs["googleOtp"] = args ? args.googleOtp : undefined;
            resourceInputs["groupsIncludeds"] = args ? args.groupsIncludeds : undefined;
            resourceInputs["hotp"] = args ? args.hotp : undefined;
            resourceInputs["isOie"] = args ? args.isOie : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oktaCall"] = args ? args.oktaCall : undefined;
            resourceInputs["oktaEmail"] = args ? args.oktaEmail : undefined;
            resourceInputs["oktaOtp"] = args ? args.oktaOtp : undefined;
            resourceInputs["oktaPassword"] = args ? args.oktaPassword : undefined;
            resourceInputs["oktaPush"] = args ? args.oktaPush : undefined;
            resourceInputs["oktaQuestion"] = args ? args.oktaQuestion : undefined;
            resourceInputs["oktaSms"] = args ? args.oktaSms : undefined;
            resourceInputs["oktaVerify"] = args ? args.oktaVerify : undefined;
            resourceInputs["onpremMfa"] = args ? args.onpremMfa : undefined;
            resourceInputs["phoneNumber"] = args ? args.phoneNumber : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["rsaToken"] = args ? args.rsaToken : undefined;
            resourceInputs["securityQuestion"] = args ? args.securityQuestion : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["symantecVip"] = args ? args.symantecVip : undefined;
            resourceInputs["webauthn"] = args ? args.webauthn : undefined;
            resourceInputs["yubikeyToken"] = args ? args.yubikeyToken : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mfa.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mfa resources.
 */
export interface MfaState {
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    duo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoU2f?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoWebauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    googleOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    hotp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    isOie?: pulumi.Input<boolean>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    oktaCall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaEmail?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPassword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPush?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaSms?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaVerify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    onpremMfa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    phoneNumber?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    rsaToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    symantecVip?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    yubikeyToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Mfa resource.
 */
export interface MfaArgs {
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    duo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoU2f?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoWebauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    googleOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    hotp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    isOie?: pulumi.Input<boolean>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    oktaCall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaEmail?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPassword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPush?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaSms?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaVerify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    onpremMfa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    phoneNumber?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    rsaToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    symantecVip?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    yubikeyToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
