// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/mfa:Mfa example <policy_id>
 * ```
 */
export class Mfa extends pulumi.CustomResource {
    /**
     * Get an existing Mfa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaState, opts?: pulumi.CustomResourceOptions): Mfa {
        return new Mfa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/mfa:Mfa';

    /**
     * Returns true if the given object is an instance of Mfa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mfa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mfa.__pulumiType;
    }

    /**
     * Policy Description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly duo: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Since okta now support multiple external_idps, this will be deprecated. Please use `externalIdps` instead
     */
    declare public readonly externalIdp: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly externalIdps: pulumi.Output<{[key: string]: string}[] | undefined>;
    declare public readonly fidoU2f: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly fidoWebauthn: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly googleOtp: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of Group IDs to Include
     */
    declare public readonly groupsIncludeds: pulumi.Output<string[] | undefined>;
    declare public readonly hotp: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    declare public readonly isOie: pulumi.Output<boolean | undefined>;
    /**
     * Policy Name
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly oktaCall: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaEmail: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaOtp: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaPassword: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaPush: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaQuestion: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaSms: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly oktaVerify: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly onpremMfa: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly phoneNumber: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    declare public readonly rsaToken: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly securityQuestion: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly smartCardIdp: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    declare public readonly symantecVip: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly webauthn: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly yubikeyToken: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Mfa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MfaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaArgs | MfaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["duo"] = state?.duo;
            resourceInputs["externalIdp"] = state?.externalIdp;
            resourceInputs["externalIdps"] = state?.externalIdps;
            resourceInputs["fidoU2f"] = state?.fidoU2f;
            resourceInputs["fidoWebauthn"] = state?.fidoWebauthn;
            resourceInputs["googleOtp"] = state?.googleOtp;
            resourceInputs["groupsIncludeds"] = state?.groupsIncludeds;
            resourceInputs["hotp"] = state?.hotp;
            resourceInputs["isOie"] = state?.isOie;
            resourceInputs["name"] = state?.name;
            resourceInputs["oktaCall"] = state?.oktaCall;
            resourceInputs["oktaEmail"] = state?.oktaEmail;
            resourceInputs["oktaOtp"] = state?.oktaOtp;
            resourceInputs["oktaPassword"] = state?.oktaPassword;
            resourceInputs["oktaPush"] = state?.oktaPush;
            resourceInputs["oktaQuestion"] = state?.oktaQuestion;
            resourceInputs["oktaSms"] = state?.oktaSms;
            resourceInputs["oktaVerify"] = state?.oktaVerify;
            resourceInputs["onpremMfa"] = state?.onpremMfa;
            resourceInputs["phoneNumber"] = state?.phoneNumber;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["rsaToken"] = state?.rsaToken;
            resourceInputs["securityQuestion"] = state?.securityQuestion;
            resourceInputs["smartCardIdp"] = state?.smartCardIdp;
            resourceInputs["status"] = state?.status;
            resourceInputs["symantecVip"] = state?.symantecVip;
            resourceInputs["webauthn"] = state?.webauthn;
            resourceInputs["yubikeyToken"] = state?.yubikeyToken;
        } else {
            const args = argsOrState as MfaArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["duo"] = args?.duo;
            resourceInputs["externalIdp"] = args?.externalIdp;
            resourceInputs["externalIdps"] = args?.externalIdps;
            resourceInputs["fidoU2f"] = args?.fidoU2f;
            resourceInputs["fidoWebauthn"] = args?.fidoWebauthn;
            resourceInputs["googleOtp"] = args?.googleOtp;
            resourceInputs["groupsIncludeds"] = args?.groupsIncludeds;
            resourceInputs["hotp"] = args?.hotp;
            resourceInputs["isOie"] = args?.isOie;
            resourceInputs["name"] = args?.name;
            resourceInputs["oktaCall"] = args?.oktaCall;
            resourceInputs["oktaEmail"] = args?.oktaEmail;
            resourceInputs["oktaOtp"] = args?.oktaOtp;
            resourceInputs["oktaPassword"] = args?.oktaPassword;
            resourceInputs["oktaPush"] = args?.oktaPush;
            resourceInputs["oktaQuestion"] = args?.oktaQuestion;
            resourceInputs["oktaSms"] = args?.oktaSms;
            resourceInputs["oktaVerify"] = args?.oktaVerify;
            resourceInputs["onpremMfa"] = args?.onpremMfa;
            resourceInputs["phoneNumber"] = args?.phoneNumber;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["rsaToken"] = args?.rsaToken;
            resourceInputs["securityQuestion"] = args?.securityQuestion;
            resourceInputs["smartCardIdp"] = args?.smartCardIdp;
            resourceInputs["status"] = args?.status;
            resourceInputs["symantecVip"] = args?.symantecVip;
            resourceInputs["webauthn"] = args?.webauthn;
            resourceInputs["yubikeyToken"] = args?.yubikeyToken;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mfa.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mfa resources.
 */
export interface MfaState {
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    duo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Since okta now support multiple external_idps, this will be deprecated. Please use `externalIdps` instead
     */
    externalIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalIdps?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    fidoU2f?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoWebauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    googleOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    hotp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    isOie?: pulumi.Input<boolean>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    oktaCall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaEmail?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPassword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPush?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaSms?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaVerify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    onpremMfa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    phoneNumber?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    rsaToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    smartCardIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    symantecVip?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    yubikeyToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Mfa resource.
 */
export interface MfaArgs {
    /**
     * Policy Description
     */
    description?: pulumi.Input<string>;
    duo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Since okta now support multiple external_idps, this will be deprecated. Please use `externalIdps` instead
     */
    externalIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalIdps?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    fidoU2f?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fidoWebauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    googleOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of Group IDs to Include
     */
    groupsIncludeds?: pulumi.Input<pulumi.Input<string>[]>;
    hotp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
     */
    isOie?: pulumi.Input<boolean>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    oktaCall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaEmail?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaOtp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPassword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaPush?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaSms?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oktaVerify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    onpremMfa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    phoneNumber?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    rsaToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityQuestion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    smartCardIdp?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    symantecVip?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webauthn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    yubikeyToken?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
