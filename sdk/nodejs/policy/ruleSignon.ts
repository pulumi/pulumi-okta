// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `riscLevel` to an empty string, since this feature is not enabled.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.policy.Signon("test", {
 *     name: "Example Policy",
 *     status: "ACTIVE",
 *     description: "Example Policy",
 * });
 * const newCity = okta.getBehaviour({
 *     name: "New City",
 * });
 * const example = new okta.policy.RuleSignon("example", {
 *     access: "CHALLENGE",
 *     authtype: "RADIUS",
 *     name: "Example Policy Rule",
 *     networkConnection: "ANYWHERE",
 *     policyId: exampleOktaPolicySignon.id,
 *     status: "ACTIVE",
 *     riscLevel: "HIGH",
 *     behaviors: [newCity.then(newCity => newCity.id)],
 *     factorSequences: [
 *         {
 *             primaryCriteriaFactorType: "token:hotp",
 *             primaryCriteriaProvider: "CUSTOM",
 *             secondaryCriterias: [
 *                 {
 *                     factorType: "token:software:totp",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "push",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "password",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "question",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "sms",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "token:software:totp",
 *                     provider: "GOOGLE",
 *                 },
 *                 {
 *                     factorType: "email",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "call",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "webauthn",
 *                     provider: "FIDO",
 *                 },
 *                 {
 *                     factorType: "token",
 *                     provider: "RSA",
 *                 },
 *                 {
 *                     factorType: "token",
 *                     provider: "SYMANTEC",
 *                 },
 *             ],
 *         },
 *         {
 *             primaryCriteriaFactorType: "token:software:totp",
 *             primaryCriteriaProvider: "OKTA",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:policy/ruleSignon:RuleSignon example <policy_id>/<rule_id>
 * ```
 */
export class RuleSignon extends pulumi.CustomResource {
    /**
     * Get an existing RuleSignon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleSignonState, opts?: pulumi.CustomResourceOptions): RuleSignon {
        return new RuleSignon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/ruleSignon:RuleSignon';

    /**
     * Returns true if the given object is an instance of RuleSignon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleSignon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleSignon.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
     */
    declare public readonly access: pulumi.Output<string | undefined>;
    /**
     * Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
     */
    declare public readonly authtype: pulumi.Output<string | undefined>;
    /**
     * List of behavior IDs
     */
    declare public readonly behaviors: pulumi.Output<string[] | undefined>;
    /**
     * Auth factor sequences. Should be set if 'access = "CHALLENGE"'.
     * 	- 'primary_criteria_provider' - (Required) Primary provider of the auth section.
     * 	- 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section.
     * 	- 'secondary_criteria' - (Optional) Additional authentication steps.
     * 	- 'provider' - (Required) Provider of the additional authentication step.
     * 	- 'factor_type' - (Required) Factor type of the additional authentication step.
     */
    declare public readonly factorSequences: pulumi.Output<outputs.policy.RuleSignonFactorSequence[] | undefined>;
    /**
     * Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    declare public readonly identityProvider: pulumi.Output<string | undefined>;
    /**
     * When identityProvider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
     */
    declare public readonly identityProviderIds: pulumi.Output<string[] | undefined>;
    /**
     * Elapsed time before the next MFA challenge
     */
    declare public readonly mfaLifetime: pulumi.Output<number | undefined>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION` or`ALWAYS`.
     */
    declare public readonly mfaPrompt: pulumi.Output<string | undefined>;
    /**
     * Remember MFA device. Default: `false`
     */
    declare public readonly mfaRememberDevice: pulumi.Output<boolean | undefined>;
    /**
     * Require MFA. Default: `false`
     */
    declare public readonly mfaRequired: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    declare public readonly networkConnection: pulumi.Output<string | undefined>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
     */
    declare public readonly networkExcludes: pulumi.Output<string[] | undefined>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
     */
    declare public readonly networkIncludes: pulumi.Output<string[] | undefined>;
    /**
     * Policy ID of the Rule
     */
    declare public readonly policyId: pulumi.Output<string | undefined>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`, `PASSWORD_IDP`.
     */
    declare public readonly primaryFactor: pulumi.Output<string>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    declare public readonly riscLevel: pulumi.Output<string | undefined>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    declare public readonly riskLevel: pulumi.Output<string | undefined>;
    /**
     * Max minutes a session can be idle. Default: `120`
     */
    declare public readonly sessionIdle: pulumi.Output<number | undefined>;
    /**
     * Max minutes a session is active: Disable = 0. Default: `120`
     */
    declare public readonly sessionLifetime: pulumi.Output<number | undefined>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies. Default: `false`
     */
    declare public readonly sessionPersistent: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * Set of User IDs to Exclude
     */
    declare public readonly usersExcludeds: pulumi.Output<string[] | undefined>;

    /**
     * Create a RuleSignon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RuleSignonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleSignonArgs | RuleSignonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleSignonState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["authtype"] = state?.authtype;
            resourceInputs["behaviors"] = state?.behaviors;
            resourceInputs["factorSequences"] = state?.factorSequences;
            resourceInputs["identityProvider"] = state?.identityProvider;
            resourceInputs["identityProviderIds"] = state?.identityProviderIds;
            resourceInputs["mfaLifetime"] = state?.mfaLifetime;
            resourceInputs["mfaPrompt"] = state?.mfaPrompt;
            resourceInputs["mfaRememberDevice"] = state?.mfaRememberDevice;
            resourceInputs["mfaRequired"] = state?.mfaRequired;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkConnection"] = state?.networkConnection;
            resourceInputs["networkExcludes"] = state?.networkExcludes;
            resourceInputs["networkIncludes"] = state?.networkIncludes;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["primaryFactor"] = state?.primaryFactor;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["riscLevel"] = state?.riscLevel;
            resourceInputs["riskLevel"] = state?.riskLevel;
            resourceInputs["sessionIdle"] = state?.sessionIdle;
            resourceInputs["sessionLifetime"] = state?.sessionLifetime;
            resourceInputs["sessionPersistent"] = state?.sessionPersistent;
            resourceInputs["status"] = state?.status;
            resourceInputs["usersExcludeds"] = state?.usersExcludeds;
        } else {
            const args = argsOrState as RuleSignonArgs | undefined;
            resourceInputs["access"] = args?.access;
            resourceInputs["authtype"] = args?.authtype;
            resourceInputs["behaviors"] = args?.behaviors;
            resourceInputs["factorSequences"] = args?.factorSequences;
            resourceInputs["identityProvider"] = args?.identityProvider;
            resourceInputs["identityProviderIds"] = args?.identityProviderIds;
            resourceInputs["mfaLifetime"] = args?.mfaLifetime;
            resourceInputs["mfaPrompt"] = args?.mfaPrompt;
            resourceInputs["mfaRememberDevice"] = args?.mfaRememberDevice;
            resourceInputs["mfaRequired"] = args?.mfaRequired;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkConnection"] = args?.networkConnection;
            resourceInputs["networkExcludes"] = args?.networkExcludes;
            resourceInputs["networkIncludes"] = args?.networkIncludes;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["primaryFactor"] = args?.primaryFactor;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["riscLevel"] = args?.riscLevel;
            resourceInputs["riskLevel"] = args?.riskLevel;
            resourceInputs["sessionIdle"] = args?.sessionIdle;
            resourceInputs["sessionLifetime"] = args?.sessionLifetime;
            resourceInputs["sessionPersistent"] = args?.sessionPersistent;
            resourceInputs["status"] = args?.status;
            resourceInputs["usersExcludeds"] = args?.usersExcludeds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleSignon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleSignon resources.
 */
export interface RuleSignonState {
    /**
     * Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auth factor sequences. Should be set if 'access = "CHALLENGE"'.
     * 	- 'primary_criteria_provider' - (Required) Primary provider of the auth section.
     * 	- 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section.
     * 	- 'secondary_criteria' - (Optional) Additional authentication steps.
     * 	- 'provider' - (Required) Provider of the additional authentication step.
     * 	- 'factor_type' - (Required) Factor type of the additional authentication step.
     */
    factorSequences?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequence>[]>;
    /**
     * Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * When identityProvider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
     */
    identityProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Elapsed time before the next MFA challenge
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION` or`ALWAYS`.
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device. Default: `false`
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA. Default: `false`
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`, `PASSWORD_IDP`.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    riskLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle. Default: `120`
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0. Default: `120`
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies. Default: `false`
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RuleSignon resource.
 */
export interface RuleSignonArgs {
    /**
     * Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auth factor sequences. Should be set if 'access = "CHALLENGE"'.
     * 	- 'primary_criteria_provider' - (Required) Primary provider of the auth section.
     * 	- 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section.
     * 	- 'secondary_criteria' - (Optional) Additional authentication steps.
     * 	- 'provider' - (Required) Provider of the additional authentication step.
     * 	- 'factor_type' - (Required) Factor type of the additional authentication step.
     */
    factorSequences?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequence>[]>;
    /**
     * Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * When identityProvider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
     */
    identityProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Elapsed time before the next MFA challenge
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION` or`ALWAYS`.
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device. Default: `false`
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA. Default: `false`
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`, `PASSWORD_IDP`.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    riskLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle. Default: `120`
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0. Default: `120`
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies. Default: `false`
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
