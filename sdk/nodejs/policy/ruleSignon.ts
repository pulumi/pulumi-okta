// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `riscLevel`
 * to an empty string, since this feature is not enabled.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = new okta.policy.Signon("test", {
 *     name: "Example Policy",
 *     status: "ACTIVE",
 *     description: "Example Policy",
 * });
 * const newCity = okta.getBehaviour({
 *     name: "New City",
 * });
 * const example = new okta.policy.RuleSignon("example", {
 *     access: "CHALLENGE",
 *     authtype: "RADIUS",
 *     name: "Example Policy Rule",
 *     networkConnection: "ANYWHERE",
 *     policyId: exampleOktaPolicySignon.id,
 *     status: "ACTIVE",
 *     riscLevel: "HIGH",
 *     behaviors: [newCity.then(newCity => newCity.id)],
 *     factorSequences: [
 *         {
 *             primaryCriteriaFactorType: "token:hotp",
 *             primaryCriteriaProvider: "CUSTOM",
 *             secondaryCriterias: [
 *                 {
 *                     factorType: "token:software:totp",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "push",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "password",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "question",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "sms",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "token:software:totp",
 *                     provider: "GOOGLE",
 *                 },
 *                 {
 *                     factorType: "email",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "call",
 *                     provider: "OKTA",
 *                 },
 *                 {
 *                     factorType: "webauthn",
 *                     provider: "FIDO",
 *                 },
 *                 {
 *                     factorType: "token",
 *                     provider: "RSA",
 *                 },
 *                 {
 *                     factorType: "token",
 *                     provider: "SYMANTEC",
 *                 },
 *             ],
 *         },
 *         {
 *             primaryCriteriaFactorType: "token:software:totp",
 *             primaryCriteriaProvider: "OKTA",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A Policy Rule can be imported via the Policy and Rule ID.
 *
 * ```sh
 * $ pulumi import okta:policy/ruleSignon:RuleSignon example &#60;policy id&#62;/&#60;rule id&#62;
 * ```
 */
export class RuleSignon extends pulumi.CustomResource {
    /**
     * Get an existing RuleSignon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleSignonState, opts?: pulumi.CustomResourceOptions): RuleSignon {
        return new RuleSignon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:policy/ruleSignon:RuleSignon';

    /**
     * Returns true if the given object is an instance of RuleSignon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleSignon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleSignon.__pulumiType;
    }

    /**
     * Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
     */
    public readonly access!: pulumi.Output<string | undefined>;
    /**
     * Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
     */
    public readonly authtype!: pulumi.Output<string | undefined>;
    /**
     * List of behavior IDs.
     */
    public readonly behaviors!: pulumi.Output<string[] | undefined>;
    /**
     * Auth factor sequences. Should be set if `access = "CHALLENGE"`.
     */
    public readonly factorSequences!: pulumi.Output<outputs.policy.RuleSignonFactorSequence[] | undefined>;
    /**
     * Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
     *
     * > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    public readonly identityProvider!: pulumi.Output<string | undefined>;
    /**
     * When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
     */
    public readonly identityProviderIds!: pulumi.Output<string[] | undefined>;
    /**
     * Elapsed time before the next MFA challenge.
     */
    public readonly mfaLifetime!: pulumi.Output<number | undefined>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
     */
    public readonly mfaPrompt!: pulumi.Output<string | undefined>;
    /**
     * Remember MFA device. The default `false`.
     */
    public readonly mfaRememberDevice!: pulumi.Output<boolean | undefined>;
    /**
     * Require MFA. By default is `false`.
     */
    public readonly mfaRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Policy ID.
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
     * `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
     */
    public readonly primaryFactor!: pulumi.Output<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
     * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    public readonly riscLevel!: pulumi.Output<string | undefined>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    public readonly riskLevel!: pulumi.Output<string | undefined>;
    /**
     * Max minutes a session can be idle.,
     */
    public readonly sessionIdle!: pulumi.Output<number | undefined>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    public readonly sessionLifetime!: pulumi.Output<number | undefined>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
     */
    public readonly sessionPersistent!: pulumi.Output<boolean | undefined>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The list of user IDs that would be excluded when rules are processed.
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a RuleSignon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RuleSignonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleSignonArgs | RuleSignonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleSignonState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["authtype"] = state ? state.authtype : undefined;
            resourceInputs["behaviors"] = state ? state.behaviors : undefined;
            resourceInputs["factorSequences"] = state ? state.factorSequences : undefined;
            resourceInputs["identityProvider"] = state ? state.identityProvider : undefined;
            resourceInputs["identityProviderIds"] = state ? state.identityProviderIds : undefined;
            resourceInputs["mfaLifetime"] = state ? state.mfaLifetime : undefined;
            resourceInputs["mfaPrompt"] = state ? state.mfaPrompt : undefined;
            resourceInputs["mfaRememberDevice"] = state ? state.mfaRememberDevice : undefined;
            resourceInputs["mfaRequired"] = state ? state.mfaRequired : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConnection"] = state ? state.networkConnection : undefined;
            resourceInputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["primaryFactor"] = state ? state.primaryFactor : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["riscLevel"] = state ? state.riscLevel : undefined;
            resourceInputs["riskLevel"] = state ? state.riskLevel : undefined;
            resourceInputs["sessionIdle"] = state ? state.sessionIdle : undefined;
            resourceInputs["sessionLifetime"] = state ? state.sessionLifetime : undefined;
            resourceInputs["sessionPersistent"] = state ? state.sessionPersistent : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
        } else {
            const args = argsOrState as RuleSignonArgs | undefined;
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["authtype"] = args ? args.authtype : undefined;
            resourceInputs["behaviors"] = args ? args.behaviors : undefined;
            resourceInputs["factorSequences"] = args ? args.factorSequences : undefined;
            resourceInputs["identityProvider"] = args ? args.identityProvider : undefined;
            resourceInputs["identityProviderIds"] = args ? args.identityProviderIds : undefined;
            resourceInputs["mfaLifetime"] = args ? args.mfaLifetime : undefined;
            resourceInputs["mfaPrompt"] = args ? args.mfaPrompt : undefined;
            resourceInputs["mfaRememberDevice"] = args ? args.mfaRememberDevice : undefined;
            resourceInputs["mfaRequired"] = args ? args.mfaRequired : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConnection"] = args ? args.networkConnection : undefined;
            resourceInputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["primaryFactor"] = args ? args.primaryFactor : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["riscLevel"] = args ? args.riscLevel : undefined;
            resourceInputs["riskLevel"] = args ? args.riskLevel : undefined;
            resourceInputs["sessionIdle"] = args ? args.sessionIdle : undefined;
            resourceInputs["sessionLifetime"] = args ? args.sessionLifetime : undefined;
            resourceInputs["sessionPersistent"] = args ? args.sessionPersistent : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleSignon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleSignon resources.
 */
export interface RuleSignonState {
    /**
     * Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs.
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auth factor sequences. Should be set if `access = "CHALLENGE"`.
     */
    factorSequences?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequence>[]>;
    /**
     * Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
     *
     * > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
     */
    identityProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Elapsed time before the next MFA challenge.
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device. The default `false`.
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA. By default is `false`.
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
     * `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
     * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    riskLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle.,
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    status?: pulumi.Input<string>;
    /**
     * The list of user IDs that would be excluded when rules are processed.
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RuleSignon resource.
 */
export interface RuleSignonArgs {
    /**
     * Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
     */
    access?: pulumi.Input<string>;
    /**
     * Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
     */
    authtype?: pulumi.Input<string>;
    /**
     * List of behavior IDs.
     */
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auth factor sequences. Should be set if `access = "CHALLENGE"`.
     */
    factorSequences?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequence>[]>;
    /**
     * Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
     *
     * > **WARNING**: Use of `identityProvider` requires a feature flag to be enabled.
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
     */
    identityProviderIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Elapsed time before the next MFA challenge.
     */
    mfaLifetime?: pulumi.Input<number>;
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
     */
    mfaPrompt?: pulumi.Input<string>;
    /**
     * Remember MFA device. The default `false`.
     */
    mfaRememberDevice?: pulumi.Input<boolean>;
    /**
     * Require MFA. By default is `false`.
     */
    mfaRequired?: pulumi.Input<boolean>;
    /**
     * Policy Rule Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * The network zones to exclude. Conflicts with `networkIncludes`.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network zones to include. Conflicts with `networkExcludes`.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy ID.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
     * `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
     */
    primaryFactor?: pulumi.Input<string>;
    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     */
    priority?: pulumi.Input<number>;
    /**
     * Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
     * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
     *
     * @deprecated Attribute typo, switch to riskLevel instead. Default: `ANY`
     */
    riscLevel?: pulumi.Input<string>;
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     */
    riskLevel?: pulumi.Input<string>;
    /**
     * Max minutes a session can be idle.,
     */
    sessionIdle?: pulumi.Input<number>;
    /**
     * Max minutes a session is active: Disable = 0.
     */
    sessionLifetime?: pulumi.Input<number>;
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
     */
    sessionPersistent?: pulumi.Input<boolean>;
    /**
     * Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
     */
    status?: pulumi.Input<string>;
    /**
     * The list of user IDs that would be excluded when rules are processed.
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
