// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates custom email sender. This resource allows you to create and configure a custom email sender.
 *
 * > **DEPRECATED** The api for this resource has been deprecated. Please use `okta.EmailDomain` instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.EmailSender("example", {
 *     fromName: "Paul Atreides",
 *     fromAddress: "no-reply@caladan.planet",
 *     subdomain: "mail",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/emailSender:EmailSender example <sender_id>
 * ```
 */
export class EmailSender extends pulumi.CustomResource {
    /**
     * Get an existing EmailSender resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailSenderState, opts?: pulumi.CustomResourceOptions): EmailSender {
        return new EmailSender(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/emailSender:EmailSender';

    /**
     * Returns true if the given object is an instance of EmailSender.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailSender {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailSender.__pulumiType;
    }

    /**
     * TXT and CNAME records to be registered for the Domain
     */
    declare public /*out*/ readonly dnsRecords: pulumi.Output<outputs.EmailSenderDnsRecord[]>;
    /**
     * Email address to send from
     */
    declare public readonly fromAddress: pulumi.Output<string>;
    /**
     * Name of sender
     */
    declare public readonly fromName: pulumi.Output<string>;
    /**
     * Verification status
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Mail domain to send from
     */
    declare public readonly subdomain: pulumi.Output<string>;

    /**
     * Create a EmailSender resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailSenderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailSenderArgs | EmailSenderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailSenderState | undefined;
            resourceInputs["dnsRecords"] = state?.dnsRecords;
            resourceInputs["fromAddress"] = state?.fromAddress;
            resourceInputs["fromName"] = state?.fromName;
            resourceInputs["status"] = state?.status;
            resourceInputs["subdomain"] = state?.subdomain;
        } else {
            const args = argsOrState as EmailSenderArgs | undefined;
            if (args?.fromAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'fromAddress'");
            }
            if (args?.fromName === undefined && !opts.urn) {
                throw new Error("Missing required property 'fromName'");
            }
            if (args?.subdomain === undefined && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            resourceInputs["fromAddress"] = args?.fromAddress;
            resourceInputs["fromName"] = args?.fromName;
            resourceInputs["subdomain"] = args?.subdomain;
            resourceInputs["dnsRecords"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailSender.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmailSender resources.
 */
export interface EmailSenderState {
    /**
     * TXT and CNAME records to be registered for the Domain
     */
    dnsRecords?: pulumi.Input<pulumi.Input<inputs.EmailSenderDnsRecord>[]>;
    /**
     * Email address to send from
     */
    fromAddress?: pulumi.Input<string>;
    /**
     * Name of sender
     */
    fromName?: pulumi.Input<string>;
    /**
     * Verification status
     */
    status?: pulumi.Input<string>;
    /**
     * Mail domain to send from
     */
    subdomain?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmailSender resource.
 */
export interface EmailSenderArgs {
    /**
     * Email address to send from
     */
    fromAddress: pulumi.Input<string>;
    /**
     * Name of sender
     */
    fromName: pulumi.Input<string>;
    /**
     * Mail domain to send from
     */
    subdomain: pulumi.Input<string>;
}
