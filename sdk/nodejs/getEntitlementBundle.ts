// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get the entitlement bundle for the given id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getEntitlementBundle({
 *     id: "<entitlement_bundle id>",
 * });
 * ```
 */
export function getEntitlementBundle(args: GetEntitlementBundleArgs, opts?: pulumi.InvokeOptions): Promise<GetEntitlementBundleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getEntitlementBundle:getEntitlementBundle", {
        "entitlements": args.entitlements,
        "id": args.id,
        "target": args.target,
    }, opts);
}

/**
 * A collection of arguments for invoking getEntitlementBundle.
 */
export interface GetEntitlementBundleArgs {
    /**
     * List of entitlements in the bundle
     */
    entitlements?: inputs.GetEntitlementBundleEntitlement[];
    /**
     * The ID of this resource.
     */
    id: string;
    /**
     * Representation of a resource
     */
    target?: inputs.GetEntitlementBundleTarget;
}

/**
 * A collection of values returned by getEntitlementBundle.
 */
export interface GetEntitlementBundleResult {
    /**
     * The created timestamp of this resource.
     */
    readonly created: string;
    /**
     * The ID of the user that created this resource.
     */
    readonly createdBy: string;
    /**
     * The description of an entitlement property.
     */
    readonly description: string;
    /**
     * List of entitlements in the bundle
     */
    readonly entitlements?: outputs.GetEntitlementBundleEntitlement[];
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * The last updated timestamp of this resource.
     */
    readonly lastUpdated: string;
    /**
     * The ID of the user that last updated this resource.
     */
    readonly lastUpdatedBy: string;
    /**
     * The display name for an entitlement bundle.
     */
    readonly name: string;
    /**
     * The status of the entitlement bundle.
     */
    readonly status: string;
    /**
     * Representation of a resource
     */
    readonly target?: outputs.GetEntitlementBundleTarget;
    /**
     * The ORN of the target resource. Required when updating the entitlement bundle.
     */
    readonly targetResourceOrn: string;
}
/**
 * Get the entitlement bundle for the given id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const test = okta.getEntitlementBundle({
 *     id: "<entitlement_bundle id>",
 * });
 * ```
 */
export function getEntitlementBundleOutput(args: GetEntitlementBundleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEntitlementBundleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:index/getEntitlementBundle:getEntitlementBundle", {
        "entitlements": args.entitlements,
        "id": args.id,
        "target": args.target,
    }, opts);
}

/**
 * A collection of arguments for invoking getEntitlementBundle.
 */
export interface GetEntitlementBundleOutputArgs {
    /**
     * List of entitlements in the bundle
     */
    entitlements?: pulumi.Input<pulumi.Input<inputs.GetEntitlementBundleEntitlementArgs>[]>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * Representation of a resource
     */
    target?: pulumi.Input<inputs.GetEntitlementBundleTargetArgs>;
}
