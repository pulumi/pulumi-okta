// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates an Okta User. This resource allows you to create and configure an Okta User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * //## Full profile:
 * const example = new okta.user.User("example", {
 *     firstName: "John",
 *     lastName: "Smith",
 *     login: "john.smith@example.com",
 *     email: "john.smith@example.com",
 *     city: "New York",
 *     costCenter: "10",
 *     countryCode: "US",
 *     department: "IT",
 *     displayName: "Dr. John Smith",
 *     division: "Acquisitions",
 *     employeeNumber: "111111",
 *     honorificPrefix: "Dr.",
 *     honorificSuffix: "Jr.",
 *     locale: "en_US",
 *     manager: "Jimbo",
 *     managerId: "222222",
 *     middleName: "John",
 *     mobilePhone: "1112223333",
 *     nickName: "Johnny",
 *     organization: "Testing Inc.",
 *     postalAddress: "1234 Testing St.",
 *     preferredLanguage: "en-us",
 *     primaryPhone: "4445556666",
 *     profileUrl: "https://www.example.com/profile",
 *     secondEmail: "john.smith.fun@example.com",
 *     state: "NY",
 *     streetAddress: "5678 Testing Ave.",
 *     timezone: "America/New_York",
 *     title: "Director",
 *     userType: "Employee",
 *     zipCode: "11111",
 * });
 * //## With Password Inline Hook:
 * const test2 = new okta.user.User("test2", {
 *     firstName: "John",
 *     lastName: "Smith",
 *     login: "example@example.com",
 *     email: "example@example.com",
 *     passwordInlineHook: "default",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:user/user:User example <user_id>
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:user/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * User city
     */
    declare public readonly city: pulumi.Output<string | undefined>;
    /**
     * User cost center
     */
    declare public readonly costCenter: pulumi.Output<string | undefined>;
    /**
     * User country code
     */
    declare public readonly countryCode: pulumi.Output<string | undefined>;
    /**
     * JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
     */
    declare public readonly customProfileAttributes: pulumi.Output<string>;
    declare public readonly customProfileAttributesToIgnores: pulumi.Output<string[] | undefined>;
    /**
     * User department
     */
    declare public readonly department: pulumi.Output<string | undefined>;
    /**
     * User display name, suitable to show end users
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * User division
     */
    declare public readonly division: pulumi.Output<string | undefined>;
    /**
     * User primary email address
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * User employee number
     */
    declare public readonly employeeNumber: pulumi.Output<string | undefined>;
    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
     */
    declare public readonly expirePasswordOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * User first name
     */
    declare public readonly firstName: pulumi.Output<string>;
    /**
     * User honorific prefix
     */
    declare public readonly honorificPrefix: pulumi.Output<string | undefined>;
    /**
     * User honorific suffix
     */
    declare public readonly honorificSuffix: pulumi.Output<string | undefined>;
    /**
     * User last name
     */
    declare public readonly lastName: pulumi.Output<string>;
    /**
     * User default location
     */
    declare public readonly locale: pulumi.Output<string | undefined>;
    /**
     * User Okta login
     */
    declare public readonly login: pulumi.Output<string>;
    /**
     * Manager of User
     */
    declare public readonly manager: pulumi.Output<string | undefined>;
    /**
     * Manager ID of User
     */
    declare public readonly managerId: pulumi.Output<string | undefined>;
    /**
     * User middle name
     */
    declare public readonly middleName: pulumi.Output<string | undefined>;
    /**
     * User mobile phone number
     */
    declare public readonly mobilePhone: pulumi.Output<string | undefined>;
    /**
     * User nickname
     */
    declare public readonly nickName: pulumi.Output<string | undefined>;
    /**
     * Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
     */
    declare public readonly oldPassword: pulumi.Output<string | undefined>;
    /**
     * User organization
     */
    declare public readonly organization: pulumi.Output<string | undefined>;
    /**
     * User Password
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Specifies a hashed password to import into Okta.
     */
    declare public readonly passwordHash: pulumi.Output<outputs.user.UserPasswordHash | undefined>;
    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
     */
    declare public readonly passwordInlineHook: pulumi.Output<string | undefined>;
    /**
     * User mailing address
     */
    declare public readonly postalAddress: pulumi.Output<string | undefined>;
    /**
     * User preferred language
     */
    declare public readonly preferredLanguage: pulumi.Output<string | undefined>;
    /**
     * User primary phone number
     */
    declare public readonly primaryPhone: pulumi.Output<string | undefined>;
    /**
     * User online profile (web page)
     */
    declare public readonly profileUrl: pulumi.Output<string | undefined>;
    /**
     * The raw status of the User in Okta - (status is mapped)
     */
    declare public /*out*/ readonly rawStatus: pulumi.Output<string>;
    /**
     * User Password Recovery Answer
     */
    declare public readonly recoveryAnswer: pulumi.Output<string | undefined>;
    /**
     * User Password Recovery Question
     */
    declare public readonly recoveryQuestion: pulumi.Output<string | undefined>;
    /**
     * User secondary email address, used for account recovery
     */
    declare public readonly secondEmail: pulumi.Output<string | undefined>;
    /**
     * Do not populate user roles information (prevents additional API call)
     *
     * @deprecated Because adminRoles has been removed, this attribute is a no op and will be removed
     */
    declare public readonly skipRoles: pulumi.Output<boolean | undefined>;
    /**
     * User state or region
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * User street address
     */
    declare public readonly streetAddress: pulumi.Output<string | undefined>;
    /**
     * User default timezone
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;
    /**
     * User title
     */
    declare public readonly title: pulumi.Output<string | undefined>;
    /**
     * User employee type
     */
    declare public readonly userType: pulumi.Output<string | undefined>;
    /**
     * User zipcode or postal code
     */
    declare public readonly zipCode: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["city"] = state?.city;
            resourceInputs["costCenter"] = state?.costCenter;
            resourceInputs["countryCode"] = state?.countryCode;
            resourceInputs["customProfileAttributes"] = state?.customProfileAttributes;
            resourceInputs["customProfileAttributesToIgnores"] = state?.customProfileAttributesToIgnores;
            resourceInputs["department"] = state?.department;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["division"] = state?.division;
            resourceInputs["email"] = state?.email;
            resourceInputs["employeeNumber"] = state?.employeeNumber;
            resourceInputs["expirePasswordOnCreate"] = state?.expirePasswordOnCreate;
            resourceInputs["firstName"] = state?.firstName;
            resourceInputs["honorificPrefix"] = state?.honorificPrefix;
            resourceInputs["honorificSuffix"] = state?.honorificSuffix;
            resourceInputs["lastName"] = state?.lastName;
            resourceInputs["locale"] = state?.locale;
            resourceInputs["login"] = state?.login;
            resourceInputs["manager"] = state?.manager;
            resourceInputs["managerId"] = state?.managerId;
            resourceInputs["middleName"] = state?.middleName;
            resourceInputs["mobilePhone"] = state?.mobilePhone;
            resourceInputs["nickName"] = state?.nickName;
            resourceInputs["oldPassword"] = state?.oldPassword;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["password"] = state?.password;
            resourceInputs["passwordHash"] = state?.passwordHash;
            resourceInputs["passwordInlineHook"] = state?.passwordInlineHook;
            resourceInputs["postalAddress"] = state?.postalAddress;
            resourceInputs["preferredLanguage"] = state?.preferredLanguage;
            resourceInputs["primaryPhone"] = state?.primaryPhone;
            resourceInputs["profileUrl"] = state?.profileUrl;
            resourceInputs["rawStatus"] = state?.rawStatus;
            resourceInputs["recoveryAnswer"] = state?.recoveryAnswer;
            resourceInputs["recoveryQuestion"] = state?.recoveryQuestion;
            resourceInputs["secondEmail"] = state?.secondEmail;
            resourceInputs["skipRoles"] = state?.skipRoles;
            resourceInputs["state"] = state?.state;
            resourceInputs["status"] = state?.status;
            resourceInputs["streetAddress"] = state?.streetAddress;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["title"] = state?.title;
            resourceInputs["userType"] = state?.userType;
            resourceInputs["zipCode"] = state?.zipCode;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.firstName === undefined && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if (args?.lastName === undefined && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if (args?.login === undefined && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            resourceInputs["city"] = args?.city;
            resourceInputs["costCenter"] = args?.costCenter;
            resourceInputs["countryCode"] = args?.countryCode;
            resourceInputs["customProfileAttributes"] = args?.customProfileAttributes;
            resourceInputs["customProfileAttributesToIgnores"] = args?.customProfileAttributesToIgnores;
            resourceInputs["department"] = args?.department;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["division"] = args?.division;
            resourceInputs["email"] = args?.email;
            resourceInputs["employeeNumber"] = args?.employeeNumber;
            resourceInputs["expirePasswordOnCreate"] = args?.expirePasswordOnCreate;
            resourceInputs["firstName"] = args?.firstName;
            resourceInputs["honorificPrefix"] = args?.honorificPrefix;
            resourceInputs["honorificSuffix"] = args?.honorificSuffix;
            resourceInputs["lastName"] = args?.lastName;
            resourceInputs["locale"] = args?.locale;
            resourceInputs["login"] = args?.login;
            resourceInputs["manager"] = args?.manager;
            resourceInputs["managerId"] = args?.managerId;
            resourceInputs["middleName"] = args?.middleName;
            resourceInputs["mobilePhone"] = args?.mobilePhone;
            resourceInputs["nickName"] = args?.nickName;
            resourceInputs["oldPassword"] = args?.oldPassword ? pulumi.secret(args.oldPassword) : undefined;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordHash"] = args?.passwordHash;
            resourceInputs["passwordInlineHook"] = args?.passwordInlineHook;
            resourceInputs["postalAddress"] = args?.postalAddress;
            resourceInputs["preferredLanguage"] = args?.preferredLanguage;
            resourceInputs["primaryPhone"] = args?.primaryPhone;
            resourceInputs["profileUrl"] = args?.profileUrl;
            resourceInputs["recoveryAnswer"] = args?.recoveryAnswer ? pulumi.secret(args.recoveryAnswer) : undefined;
            resourceInputs["recoveryQuestion"] = args?.recoveryQuestion;
            resourceInputs["secondEmail"] = args?.secondEmail;
            resourceInputs["skipRoles"] = args?.skipRoles;
            resourceInputs["state"] = args?.state;
            resourceInputs["status"] = args?.status;
            resourceInputs["streetAddress"] = args?.streetAddress;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["title"] = args?.title;
            resourceInputs["userType"] = args?.userType;
            resourceInputs["zipCode"] = args?.zipCode;
            resourceInputs["rawStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oldPassword", "password", "recoveryAnswer"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * User city
     */
    city?: pulumi.Input<string>;
    /**
     * User cost center
     */
    costCenter?: pulumi.Input<string>;
    /**
     * User country code
     */
    countryCode?: pulumi.Input<string>;
    /**
     * JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
     */
    customProfileAttributes?: pulumi.Input<string>;
    customProfileAttributesToIgnores?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User department
     */
    department?: pulumi.Input<string>;
    /**
     * User display name, suitable to show end users
     */
    displayName?: pulumi.Input<string>;
    /**
     * User division
     */
    division?: pulumi.Input<string>;
    /**
     * User primary email address
     */
    email?: pulumi.Input<string>;
    /**
     * User employee number
     */
    employeeNumber?: pulumi.Input<string>;
    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
     */
    expirePasswordOnCreate?: pulumi.Input<boolean>;
    /**
     * User first name
     */
    firstName?: pulumi.Input<string>;
    /**
     * User honorific prefix
     */
    honorificPrefix?: pulumi.Input<string>;
    /**
     * User honorific suffix
     */
    honorificSuffix?: pulumi.Input<string>;
    /**
     * User last name
     */
    lastName?: pulumi.Input<string>;
    /**
     * User default location
     */
    locale?: pulumi.Input<string>;
    /**
     * User Okta login
     */
    login?: pulumi.Input<string>;
    /**
     * Manager of User
     */
    manager?: pulumi.Input<string>;
    /**
     * Manager ID of User
     */
    managerId?: pulumi.Input<string>;
    /**
     * User middle name
     */
    middleName?: pulumi.Input<string>;
    /**
     * User mobile phone number
     */
    mobilePhone?: pulumi.Input<string>;
    /**
     * User nickname
     */
    nickName?: pulumi.Input<string>;
    /**
     * Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
     */
    oldPassword?: pulumi.Input<string>;
    /**
     * User organization
     */
    organization?: pulumi.Input<string>;
    /**
     * User Password
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies a hashed password to import into Okta.
     */
    passwordHash?: pulumi.Input<inputs.user.UserPasswordHash>;
    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
     */
    passwordInlineHook?: pulumi.Input<string>;
    /**
     * User mailing address
     */
    postalAddress?: pulumi.Input<string>;
    /**
     * User preferred language
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * User primary phone number
     */
    primaryPhone?: pulumi.Input<string>;
    /**
     * User online profile (web page)
     */
    profileUrl?: pulumi.Input<string>;
    /**
     * The raw status of the User in Okta - (status is mapped)
     */
    rawStatus?: pulumi.Input<string>;
    /**
     * User Password Recovery Answer
     */
    recoveryAnswer?: pulumi.Input<string>;
    /**
     * User Password Recovery Question
     */
    recoveryQuestion?: pulumi.Input<string>;
    /**
     * User secondary email address, used for account recovery
     */
    secondEmail?: pulumi.Input<string>;
    /**
     * Do not populate user roles information (prevents additional API call)
     *
     * @deprecated Because adminRoles has been removed, this attribute is a no op and will be removed
     */
    skipRoles?: pulumi.Input<boolean>;
    /**
     * User state or region
     */
    state?: pulumi.Input<string>;
    /**
     * User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * User street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * User default timezone
     */
    timezone?: pulumi.Input<string>;
    /**
     * User title
     */
    title?: pulumi.Input<string>;
    /**
     * User employee type
     */
    userType?: pulumi.Input<string>;
    /**
     * User zipcode or postal code
     */
    zipCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * User city
     */
    city?: pulumi.Input<string>;
    /**
     * User cost center
     */
    costCenter?: pulumi.Input<string>;
    /**
     * User country code
     */
    countryCode?: pulumi.Input<string>;
    /**
     * JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
     */
    customProfileAttributes?: pulumi.Input<string>;
    customProfileAttributesToIgnores?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User department
     */
    department?: pulumi.Input<string>;
    /**
     * User display name, suitable to show end users
     */
    displayName?: pulumi.Input<string>;
    /**
     * User division
     */
    division?: pulumi.Input<string>;
    /**
     * User primary email address
     */
    email: pulumi.Input<string>;
    /**
     * User employee number
     */
    employeeNumber?: pulumi.Input<string>;
    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
     */
    expirePasswordOnCreate?: pulumi.Input<boolean>;
    /**
     * User first name
     */
    firstName: pulumi.Input<string>;
    /**
     * User honorific prefix
     */
    honorificPrefix?: pulumi.Input<string>;
    /**
     * User honorific suffix
     */
    honorificSuffix?: pulumi.Input<string>;
    /**
     * User last name
     */
    lastName: pulumi.Input<string>;
    /**
     * User default location
     */
    locale?: pulumi.Input<string>;
    /**
     * User Okta login
     */
    login: pulumi.Input<string>;
    /**
     * Manager of User
     */
    manager?: pulumi.Input<string>;
    /**
     * Manager ID of User
     */
    managerId?: pulumi.Input<string>;
    /**
     * User middle name
     */
    middleName?: pulumi.Input<string>;
    /**
     * User mobile phone number
     */
    mobilePhone?: pulumi.Input<string>;
    /**
     * User nickname
     */
    nickName?: pulumi.Input<string>;
    /**
     * Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
     */
    oldPassword?: pulumi.Input<string>;
    /**
     * User organization
     */
    organization?: pulumi.Input<string>;
    /**
     * User Password
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies a hashed password to import into Okta.
     */
    passwordHash?: pulumi.Input<inputs.user.UserPasswordHash>;
    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
     */
    passwordInlineHook?: pulumi.Input<string>;
    /**
     * User mailing address
     */
    postalAddress?: pulumi.Input<string>;
    /**
     * User preferred language
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * User primary phone number
     */
    primaryPhone?: pulumi.Input<string>;
    /**
     * User online profile (web page)
     */
    profileUrl?: pulumi.Input<string>;
    /**
     * User Password Recovery Answer
     */
    recoveryAnswer?: pulumi.Input<string>;
    /**
     * User Password Recovery Question
     */
    recoveryQuestion?: pulumi.Input<string>;
    /**
     * User secondary email address, used for account recovery
     */
    secondEmail?: pulumi.Input<string>;
    /**
     * Do not populate user roles information (prevents additional API call)
     *
     * @deprecated Because adminRoles has been removed, this attribute is a no op and will be removed
     */
    skipRoles?: pulumi.Input<boolean>;
    /**
     * User state or region
     */
    state?: pulumi.Input<string>;
    /**
     * User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * User street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * User default timezone
     */
    timezone?: pulumi.Input<string>;
    /**
     * User title
     */
    title?: pulumi.Input<string>;
    /**
     * User employee type
     */
    userType?: pulumi.Input<string>;
    /**
     * User zipcode or postal code
     */
    zipCode?: pulumi.Input<string>;
}
