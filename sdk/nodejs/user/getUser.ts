// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve a users from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * // Search for a single user based on a raw search expression string
 * const example = pulumi.output(okta.user.getUser({
 *     searches: [{
 *         expression: "profile.firstName eq \"John\"",
 *     }],
 * }));
 * ```
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("okta:user/getUser:getUser", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "searches": args.searches,
        "skipGroups": args.skipGroups,
        "skipRoles": args.skipRoles,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: string;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: inputs.user.GetUserSearch[];
    /**
     * Additional API call to collect user's groups will not be made.
     */
    skipGroups?: boolean;
    /**
     * Additional API call to collect user's roles will not be made.
     */
    skipRoles?: boolean;
    /**
     * String representing a specific user's id value
     */
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * Administrator roles assigned to user.
     */
    readonly adminRoles: string[];
    /**
     * user profile property.
     */
    readonly city: string;
    readonly compoundSearchOperator?: string;
    /**
     * user profile property.
     */
    readonly costCenter: string;
    /**
     * user profile property.
     */
    readonly countryCode: string;
    /**
     * raw JSON containing all custom profile attributes.
     */
    readonly customProfileAttributes: string;
    /**
     * user profile property.
     */
    readonly department: string;
    /**
     * user profile property.
     */
    readonly displayName: string;
    /**
     * user profile property.
     */
    readonly division: string;
    /**
     * user profile property.
     */
    readonly email: string;
    /**
     * user profile property.
     */
    readonly employeeNumber: string;
    /**
     * user profile property.
     */
    readonly firstName: string;
    /**
     * user profile property.
     */
    readonly groupMemberships: string[];
    /**
     * user profile property.
     */
    readonly honorificPrefix: string;
    /**
     * user profile property.
     */
    readonly honorificSuffix: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * user profile property.
     */
    readonly lastName: string;
    /**
     * user profile property.
     */
    readonly locale: string;
    /**
     * user profile property.
     */
    readonly login: string;
    /**
     * user profile property.
     */
    readonly manager: string;
    /**
     * user profile property.
     */
    readonly managerId: string;
    /**
     * user profile property.
     */
    readonly middleName: string;
    /**
     * user profile property.
     */
    readonly mobilePhone: string;
    /**
     * user profile property.
     */
    readonly nickName: string;
    /**
     * user profile property.
     */
    readonly organization: string;
    /**
     * user profile property.
     */
    readonly postalAddress: string;
    /**
     * user profile property.
     */
    readonly preferredLanguage: string;
    /**
     * user profile property.
     */
    readonly primaryPhone: string;
    /**
     * user profile property.
     */
    readonly profileUrl: string;
    readonly searches?: outputs.user.GetUserSearch[];
    /**
     * user profile property.
     */
    readonly secondEmail: string;
    readonly skipGroups?: boolean;
    readonly skipRoles?: boolean;
    /**
     * user profile property.
     */
    readonly state: string;
    /**
     * user profile property.
     */
    readonly status: string;
    /**
     * user profile property.
     */
    readonly streetAddress: string;
    /**
     * user profile property.
     */
    readonly timezone: string;
    /**
     * user profile property.
     */
    readonly title: string;
    readonly userId?: string;
    /**
     * user profile property.
     */
    readonly userType: string;
    /**
     * user profile property.
     */
    readonly zipCode: string;
}

export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply(a => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: pulumi.Input<string>;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: pulumi.Input<pulumi.Input<inputs.user.GetUserSearchArgs>[]>;
    /**
     * Additional API call to collect user's groups will not be made.
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * Additional API call to collect user's roles will not be made.
     */
    skipRoles?: pulumi.Input<boolean>;
    /**
     * String representing a specific user's id value
     */
    userId?: pulumi.Input<string>;
}
