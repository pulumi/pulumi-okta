// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve a users from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.user.getUser({
 *     searches: [{
 *         expression: "profile.firstName eq \"John\"",
 *     }],
 * });
 * ```
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:user/getUser:getUser", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "searches": args.searches,
        "skipGroups": args.skipGroups,
        "skipRoles": args.skipRoles,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: string;
    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     */
    delayReadSeconds?: string;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: inputs.user.GetUserSearch[];
    skipGroups?: boolean;
    skipRoles?: boolean;
    /**
     * String representing a specific user's id value
     */
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly adminRoles: string[];
    /**
     * City or locality component of user's address.
     */
    readonly city: string;
    readonly compoundSearchOperator?: string;
    /**
     * Name of a cost center assigned to user.
     */
    readonly costCenter: string;
    /**
     * Country name component of user's address.
     */
    readonly countryCode: string;
    /**
     * Raw JSON containing all custom profile attributes.
     */
    readonly customProfileAttributes: string;
    readonly delayReadSeconds?: string;
    /**
     * Name of user's department.
     */
    readonly department: string;
    /**
     * Name of the user, suitable for display to end users.
     */
    readonly displayName: string;
    /**
     * Name of user's division.
     */
    readonly division: string;
    /**
     * Primary email address of user.
     */
    readonly email: string;
    /**
     * Organization or company assigned unique identifier for the user.
     */
    readonly employeeNumber: string;
    /**
     * Given name of the user.
     */
    readonly firstName: string;
    readonly groupMemberships: string[];
    /**
     * Honorific prefix(es) of the user, or title in most Western languages.
     */
    readonly honorificPrefix: string;
    /**
     * Honorific suffix(es) of the user.
     */
    readonly honorificSuffix: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Family name of the user.
     */
    readonly lastName: string;
    /**
     * User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
     */
    readonly locale: string;
    /**
     * Unique identifier for the user.
     */
    readonly login: string;
    /**
     * Display name of the user's manager.
     */
    readonly manager: string;
    /**
     * `id` of a user's manager.
     */
    readonly managerId: string;
    /**
     * Middle name(s) of the user.
     */
    readonly middleName: string;
    /**
     * Mobile phone number of user.
     */
    readonly mobilePhone: string;
    /**
     * Casual way to address the user in real life.
     */
    readonly nickName: string;
    /**
     * Name of user's organization.
     */
    readonly organization: string;
    /**
     * Mailing address component of user's address.
     */
    readonly postalAddress: string;
    /**
     * User's preferred written or spoken languages.
     */
    readonly preferredLanguage: string;
    /**
     * Primary phone number of user such as home number.
     */
    readonly primaryPhone: string;
    /**
     * URL of user's online profile (e.g. a web page).
     */
    readonly profileUrl: string;
    /**
     * All roles assigned to user.
     */
    readonly roles: string[];
    readonly searches?: outputs.user.GetUserSearch[];
    /**
     * Secondary email address of user typically used for account recovery.
     */
    readonly secondEmail: string;
    readonly skipGroups?: boolean;
    readonly skipRoles?: boolean;
    /**
     * State or region component of user's address (region).
     */
    readonly state: string;
    /**
     * Current status of user.
     */
    readonly status: string;
    /**
     * Full street address component of user's address.
     */
    readonly streetAddress: string;
    /**
     * User's time zone.
     */
    readonly timezone: string;
    /**
     * User's title, such as "Vice President".
     */
    readonly title: string;
    readonly userId?: string;
    /**
     * Used to describe the organization to user relationship such as "Employee" or "Contractor".
     */
    readonly userType: string;
    /**
     * Zipcode or postal code component of user's address (postalCode)
     */
    readonly zipCode: string;
}
/**
 * Use this data source to retrieve a users from Okta.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.user.getUser({
 *     searches: [{
 *         expression: "profile.firstName eq \"John\"",
 *     }],
 * });
 * ```
 */
export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: pulumi.Input<string>;
    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     */
    delayReadSeconds?: pulumi.Input<string>;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: pulumi.Input<pulumi.Input<inputs.user.GetUserSearchArgs>[]>;
    skipGroups?: pulumi.Input<boolean>;
    skipRoles?: pulumi.Input<boolean>;
    /**
     * String representing a specific user's id value
     */
    userId?: pulumi.Input<string>;
}
