// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get a single users from Okta.
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:user/getUser:getUser", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "searches": args.searches,
        "skipGroups": args.skipGroups,
        "skipRoles": args.skipRoles,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * Search operator used when joining multiple search clauses
     */
    compoundSearchOperator?: string;
    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     */
    delayReadSeconds?: string;
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    searches?: inputs.user.GetUserSearch[];
    /**
     * Do not populate user groups information (prevents additional API call)
     */
    skipGroups?: boolean;
    /**
     * Do not populate user roles information (prevents additional API call)
     */
    skipRoles?: boolean;
    /**
     * Retrieve a single user based on their id
     */
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly adminRoles: string[];
    readonly city: string;
    /**
     * Search operator used when joining multiple search clauses
     */
    readonly compoundSearchOperator?: string;
    readonly costCenter: string;
    readonly countryCode: string;
    readonly customProfileAttributes: string;
    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     */
    readonly delayReadSeconds?: string;
    readonly department: string;
    readonly displayName: string;
    readonly division: string;
    readonly email: string;
    readonly employeeNumber: string;
    readonly firstName: string;
    readonly groupMemberships: string[];
    readonly honorificPrefix: string;
    readonly honorificSuffix: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lastName: string;
    readonly locale: string;
    readonly login: string;
    readonly manager: string;
    readonly managerId: string;
    readonly middleName: string;
    readonly mobilePhone: string;
    readonly nickName: string;
    readonly organization: string;
    readonly postalAddress: string;
    readonly preferredLanguage: string;
    readonly primaryPhone: string;
    readonly profileUrl: string;
    readonly roles: string[];
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    readonly searches?: outputs.user.GetUserSearch[];
    readonly secondEmail: string;
    /**
     * Do not populate user groups information (prevents additional API call)
     */
    readonly skipGroups?: boolean;
    /**
     * Do not populate user roles information (prevents additional API call)
     */
    readonly skipRoles?: boolean;
    readonly state: string;
    readonly status: string;
    readonly streetAddress: string;
    readonly timezone: string;
    readonly title: string;
    /**
     * Retrieve a single user based on their id
     */
    readonly userId?: string;
    readonly userType: string;
    readonly zipCode: string;
}
/**
 * Get a single users from Okta.
 */
export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * Search operator used when joining multiple search clauses
     */
    compoundSearchOperator?: pulumi.Input<string>;
    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     */
    delayReadSeconds?: pulumi.Input<string>;
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    searches?: pulumi.Input<pulumi.Input<inputs.user.GetUserSearchArgs>[]>;
    /**
     * Do not populate user groups information (prevents additional API call)
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * Do not populate user roles information (prevents additional API call)
     */
    skipRoles?: pulumi.Input<boolean>;
    /**
     * Retrieve a single user based on their id
     */
    userId?: pulumi.Input<string>;
}
