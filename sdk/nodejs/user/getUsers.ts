// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to retrieve a list of users from Okta.
 *
 * ## Example Usage
 * ### Lookup Users by Search Criteria
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.user.getUsers({
 *     searches: [{
 *         expression: "profile.department eq \"Engineering\" and (created lt \"2014-01-01T00:00:00.000Z\" or status eq \"ACTIVE\")",
 *     }],
 * });
 * ```
 * ### Lookup Users by Group Membership
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const exampleGroup = new okta.group.Group("exampleGroup", {});
 * const exampleUsers = okta.user.getUsersOutput({
 *     groupId: exampleGroup.id,
 *     includeGroups: true,
 *     includeRoles: true,
 * });
 * ```
 */
export function getUsers(args?: GetUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetUsersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:user/getUsers:getUsers", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "groupId": args.groupId,
        "includeGroups": args.includeGroups,
        "includeRoles": args.includeRoles,
        "searches": args.searches,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: string;
    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
     */
    delayReadSeconds?: string;
    /**
     * Id of group used to find users based on membership.
     */
    groupId?: string;
    /**
     * Fetch each user's group memberships. Defaults to `false`, in which case the `groupMemberships` user attribute will be empty.
     */
    includeGroups?: boolean;
    /**
     * Fetch each user's administrator roles. Defaults to `false`, in which case the `adminRoles` user attribute will be empty.
     */
    includeRoles?: boolean;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: inputs.user.GetUsersSearch[];
}

/**
 * A collection of values returned by getUsers.
 */
export interface GetUsersResult {
    readonly compoundSearchOperator?: string;
    readonly delayReadSeconds?: string;
    readonly groupId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeGroups?: boolean;
    readonly includeRoles?: boolean;
    readonly searches?: outputs.user.GetUsersSearch[];
    /**
     * collection of users retrieved from Okta with the following properties.
     */
    readonly users: outputs.user.GetUsersUser[];
}
/**
 * Use this data source to retrieve a list of users from Okta.
 *
 * ## Example Usage
 * ### Lookup Users by Search Criteria
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = okta.user.getUsers({
 *     searches: [{
 *         expression: "profile.department eq \"Engineering\" and (created lt \"2014-01-01T00:00:00.000Z\" or status eq \"ACTIVE\")",
 *     }],
 * });
 * ```
 * ### Lookup Users by Group Membership
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const exampleGroup = new okta.group.Group("exampleGroup", {});
 * const exampleUsers = okta.user.getUsersOutput({
 *     groupId: exampleGroup.id,
 *     includeGroups: true,
 *     includeRoles: true,
 * });
 * ```
 */
export function getUsersOutput(args?: GetUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUsersResult> {
    return pulumi.output(args).apply((a: any) => getUsers(a, opts))
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersOutputArgs {
    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     */
    compoundSearchOperator?: pulumi.Input<string>;
    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
     */
    delayReadSeconds?: pulumi.Input<string>;
    /**
     * Id of group used to find users based on membership.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Fetch each user's group memberships. Defaults to `false`, in which case the `groupMemberships` user attribute will be empty.
     */
    includeGroups?: pulumi.Input<boolean>;
    /**
     * Fetch each user's administrator roles. Defaults to `false`, in which case the `adminRoles` user attribute will be empty.
     */
    includeRoles?: pulumi.Input<boolean>;
    /**
     * Map of search criteria. It supports the following properties.
     */
    searches?: pulumi.Input<pulumi.Input<inputs.user.GetUsersSearchArgs>[]>;
}
