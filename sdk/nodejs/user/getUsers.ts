// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get a list of users from Okta.
 */
export function getUsers(args?: GetUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:user/getUsers:getUsers", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "groupId": args.groupId,
        "includeGroups": args.includeGroups,
        "includeRoles": args.includeRoles,
        "searches": args.searches,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersArgs {
    /**
     * Search operator used when joining multiple search clauses
     */
    compoundSearchOperator?: string;
    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
     */
    delayReadSeconds?: string;
    /**
     * Find users based on group membership using the id of the group.
     */
    groupId?: string;
    /**
     * Fetch group memberships for each user
     */
    includeGroups?: boolean;
    /**
     * Fetch user roles for each user
     */
    includeRoles?: boolean;
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    searches?: inputs.user.GetUsersSearch[];
}

/**
 * A collection of values returned by getUsers.
 */
export interface GetUsersResult {
    /**
     * Search operator used when joining multiple search clauses
     */
    readonly compoundSearchOperator?: string;
    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
     */
    readonly delayReadSeconds?: string;
    /**
     * Find users based on group membership using the id of the group.
     */
    readonly groupId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Fetch group memberships for each user
     */
    readonly includeGroups?: boolean;
    /**
     * Fetch user roles for each user
     */
    readonly includeRoles?: boolean;
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    readonly searches?: outputs.user.GetUsersSearch[];
    /**
     * collection of users retrieved from Okta.
     */
    readonly users: outputs.user.GetUsersUser[];
}
/**
 * Get a list of users from Okta.
 */
export function getUsersOutput(args?: GetUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("okta:user/getUsers:getUsers", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "groupId": args.groupId,
        "includeGroups": args.includeGroups,
        "includeRoles": args.includeRoles,
        "searches": args.searches,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsers.
 */
export interface GetUsersOutputArgs {
    /**
     * Search operator used when joining multiple search clauses
     */
    compoundSearchOperator?: pulumi.Input<string>;
    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
     */
    delayReadSeconds?: pulumi.Input<string>;
    /**
     * Find users based on group membership using the id of the group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Fetch group memberships for each user
     */
    includeGroups?: pulumi.Input<boolean>;
    /**
     * Fetch user roles for each user
     */
    includeRoles?: pulumi.Input<boolean>;
    /**
     * Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
     */
    searches?: pulumi.Input<pulumi.Input<inputs.user.GetUsersSearchArgs>[]>;
}
