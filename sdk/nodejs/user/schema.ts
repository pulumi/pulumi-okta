// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.user.Schema("example", {
 *     description: "My custom property name",
 *     index: "customPropertyName",
 *     master: "OKTA",
 *     scope: "SELF",
 *     title: "customPropertyName",
 *     type: "string",
 *     userType: data.okta_user_type.example.id,
 * });
 * ```
 *
 * ## Import
 *
 * User schema property of default user type can be imported via the property index.
 *
 * ```sh
 *  $ pulumi import okta:user/schema:Schema example &#60;index&#62;
 * ```
 *
 *  User schema property of custom user type can be imported via user type id and property index
 *
 * ```sh
 *  $ pulumi import okta:user/schema:Schema example &#60;user type id&#62;.&#60;index&#62;
 * ```
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:user/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * Array of values that an array property's items can be set to.
     */
    public readonly arrayEnums!: pulumi.Output<string[] | undefined>;
    /**
     * Display name and value an enum array can be set to.
     */
    public readonly arrayOneOfs!: pulumi.Output<outputs.user.SchemaArrayOneOf[] | undefined>;
    /**
     * The type of the array elements if `type` is set to `"array"`.
     */
    public readonly arrayType!: pulumi.Output<string | undefined>;
    /**
     * The description of the user schema property.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    public readonly enums!: pulumi.Output<string[] | undefined>;
    /**
     * External name of the user schema property.
     */
    public readonly externalName!: pulumi.Output<string | undefined>;
    /**
     * External name of the user schema property.
     */
    public readonly externalNamespace!: pulumi.Output<string | undefined>;
    /**
     * The property name.
     */
    public readonly index!: pulumi.Output<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
     */
    public readonly master!: pulumi.Output<string | undefined>;
    /**
     * Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
     */
    public readonly masterOverridePriorities!: pulumi.Output<outputs.user.SchemaMasterOverridePriority[] | undefined>;
    /**
     * The maximum length of the user property value. Only applies to type `"string"`.
     */
    public readonly maxLength!: pulumi.Output<number | undefined>;
    /**
     * The minimum length of the user property value. Only applies to type `"string"`.
     */
    public readonly minLength!: pulumi.Output<number | undefined>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     */
    public readonly oneOfs!: pulumi.Output<outputs.user.SchemaOneOf[] | undefined>;
    /**
     * The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
     */
    public readonly pattern!: pulumi.Output<string | undefined>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    public readonly permissions!: pulumi.Output<string | undefined>;
    /**
     * Whether the property is required for this application's users.
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    /**
     * determines whether an app user attribute can be set at the Individual or Group Level.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * display name for the enum value.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Type of profile source.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
     */
    public readonly unique!: pulumi.Output<string | undefined>;
    /**
     * User type ID
     */
    public readonly userType!: pulumi.Output<string | undefined>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["arrayEnums"] = state ? state.arrayEnums : undefined;
            resourceInputs["arrayOneOfs"] = state ? state.arrayOneOfs : undefined;
            resourceInputs["arrayType"] = state ? state.arrayType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enums"] = state ? state.enums : undefined;
            resourceInputs["externalName"] = state ? state.externalName : undefined;
            resourceInputs["externalNamespace"] = state ? state.externalNamespace : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["master"] = state ? state.master : undefined;
            resourceInputs["masterOverridePriorities"] = state ? state.masterOverridePriorities : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["minLength"] = state ? state.minLength : undefined;
            resourceInputs["oneOfs"] = state ? state.oneOfs : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unique"] = state ? state.unique : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["arrayEnums"] = args ? args.arrayEnums : undefined;
            resourceInputs["arrayOneOfs"] = args ? args.arrayOneOfs : undefined;
            resourceInputs["arrayType"] = args ? args.arrayType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enums"] = args ? args.enums : undefined;
            resourceInputs["externalName"] = args ? args.externalName : undefined;
            resourceInputs["externalNamespace"] = args ? args.externalNamespace : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["master"] = args ? args.master : undefined;
            resourceInputs["masterOverridePriorities"] = args ? args.masterOverridePriorities : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["minLength"] = args ? args.minLength : undefined;
            resourceInputs["oneOfs"] = args ? args.oneOfs : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unique"] = args ? args.unique : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * Array of values that an array property's items can be set to.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name and value an enum array can be set to.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.user.SchemaArrayOneOf>[]>;
    /**
     * The type of the array elements if `type` is set to `"array"`.
     */
    arrayType?: pulumi.Input<string>;
    /**
     * The description of the user schema property.
     */
    description?: pulumi.Input<string>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * External name of the user schema property.
     */
    externalName?: pulumi.Input<string>;
    /**
     * External name of the user schema property.
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * The property name.
     */
    index?: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
     */
    master?: pulumi.Input<string>;
    /**
     * Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
     */
    masterOverridePriorities?: pulumi.Input<pulumi.Input<inputs.user.SchemaMasterOverridePriority>[]>;
    /**
     * The maximum length of the user property value. Only applies to type `"string"`.
     */
    maxLength?: pulumi.Input<number>;
    /**
     * The minimum length of the user property value. Only applies to type `"string"`.
     */
    minLength?: pulumi.Input<number>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.user.SchemaOneOf>[]>;
    /**
     * The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
     */
    pattern?: pulumi.Input<string>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the property is required for this application's users.
     */
    required?: pulumi.Input<boolean>;
    /**
     * determines whether an app user attribute can be set at the Individual or Group Level.
     */
    scope?: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title?: pulumi.Input<string>;
    /**
     * Type of profile source.
     */
    type?: pulumi.Input<string>;
    /**
     * Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
     */
    unique?: pulumi.Input<string>;
    /**
     * User type ID
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * Array of values that an array property's items can be set to.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name and value an enum array can be set to.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.user.SchemaArrayOneOf>[]>;
    /**
     * The type of the array elements if `type` is set to `"array"`.
     */
    arrayType?: pulumi.Input<string>;
    /**
     * The description of the user schema property.
     */
    description?: pulumi.Input<string>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * External name of the user schema property.
     */
    externalName?: pulumi.Input<string>;
    /**
     * External name of the user schema property.
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * The property name.
     */
    index: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
     */
    master?: pulumi.Input<string>;
    /**
     * Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
     */
    masterOverridePriorities?: pulumi.Input<pulumi.Input<inputs.user.SchemaMasterOverridePriority>[]>;
    /**
     * The maximum length of the user property value. Only applies to type `"string"`.
     */
    maxLength?: pulumi.Input<number>;
    /**
     * The minimum length of the user property value. Only applies to type `"string"`.
     */
    minLength?: pulumi.Input<number>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.user.SchemaOneOf>[]>;
    /**
     * The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
     */
    pattern?: pulumi.Input<string>;
    /**
     * Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the property is required for this application's users.
     */
    required?: pulumi.Input<boolean>;
    /**
     * determines whether an app user attribute can be set at the Individual or Group Level.
     */
    scope?: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
    /**
     * Type of profile source.
     */
    type: pulumi.Input<string>;
    /**
     * Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
     */
    unique?: pulumi.Input<string>;
    /**
     * User type ID
     */
    userType?: pulumi.Input<string>;
}
