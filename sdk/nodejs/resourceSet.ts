// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows the creation and manipulation of Okta Resource Sets as custom collections of Okta resources. You can use
 * Okta Resource Sets to assign Custom Roles to administrators who are scoped to the designated resources.
 * The `resources` field supports the following:
 *  - Apps
 *  - Groups
 *  - All Users within a Group
 *  - All Users within the org
 *  - All Groups within the org
 *  - All Apps within the org
 *  - All Apps of the same type
 *
 * > **NOTE:** This an `Early Access` feature.
 *
 * ## Import
 *
 * Okta Resource Set can be imported via the Okta ID.
 *
 * ```sh
 *  $ pulumi import okta:index/resourceSet:ResourceSet example <resource_set_id>
 * ```
 */
export class ResourceSet extends pulumi.CustomResource {
    /**
     * Get an existing ResourceSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceSetState, opts?: pulumi.CustomResourceOptions): ResourceSet {
        return new ResourceSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/resourceSet:ResourceSet';

    /**
     * Returns true if the given object is an instance of ResourceSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceSet.__pulumiType;
    }

    /**
     * A description of the Resource Set.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Unique name given to the Resource Set.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The endpoints that reference the resources to be included in the new Resource Set. At least one
     * endpoint must be specified when creating resource set.
     */
    public readonly resources!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ResourceSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceSetArgs | ResourceSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceSetState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
        } else {
            const args = argsOrState as ResourceSetArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceSet resources.
 */
export interface ResourceSetState {
    /**
     * A description of the Resource Set.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique name given to the Resource Set.
     */
    label?: pulumi.Input<string>;
    /**
     * The endpoints that reference the resources to be included in the new Resource Set. At least one
     * endpoint must be specified when creating resource set.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ResourceSet resource.
 */
export interface ResourceSetArgs {
    /**
     * A description of the Resource Set.
     */
    description: pulumi.Input<string>;
    /**
     * Unique name given to the Resource Set.
     */
    label: pulumi.Input<string>;
    /**
     * The endpoints that reference the resources to be included in the new Resource Set. At least one
     * endpoint must be specified when creating resource set.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}
