// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages Entitlement Bundles. This resource allows you to create and configure an Okta [Entitlement Bundle](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlement-Bundles/#tag/Entitlement-Bundles).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.EntitlementBundle("example", {name: "example"});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/entitlementBundle:EntitlementBundle example <entitlement_bundle_id>
 * ```
 */
export class EntitlementBundle extends pulumi.CustomResource {
    /**
     * Get an existing EntitlementBundle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntitlementBundleState, opts?: pulumi.CustomResourceOptions): EntitlementBundle {
        return new EntitlementBundle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/entitlementBundle:EntitlementBundle';

    /**
     * Returns true if the given object is an instance of EntitlementBundle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntitlementBundle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntitlementBundle.__pulumiType;
    }

    /**
     * The description of an entitlement property.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * List of entitlements in the bundle
     */
    declare public readonly entitlements: pulumi.Output<outputs.EntitlementBundleEntitlement[] | undefined>;
    /**
     * The display name for an entitlement bundle.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The status of the entitlement bundle.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Representation of a resource
     */
    declare public readonly target: pulumi.Output<outputs.EntitlementBundleTarget | undefined>;
    /**
     * The ORN of the target resource. Required when updating the entitlement bundle.
     */
    declare public readonly targetResourceOrn: pulumi.Output<string>;

    /**
     * Create a EntitlementBundle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EntitlementBundleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntitlementBundleArgs | EntitlementBundleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntitlementBundleState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["entitlements"] = state?.entitlements;
            resourceInputs["name"] = state?.name;
            resourceInputs["status"] = state?.status;
            resourceInputs["target"] = state?.target;
            resourceInputs["targetResourceOrn"] = state?.targetResourceOrn;
        } else {
            const args = argsOrState as EntitlementBundleArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["entitlements"] = args?.entitlements;
            resourceInputs["name"] = args?.name;
            resourceInputs["status"] = args?.status;
            resourceInputs["target"] = args?.target;
            resourceInputs["targetResourceOrn"] = args?.targetResourceOrn;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntitlementBundle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntitlementBundle resources.
 */
export interface EntitlementBundleState {
    /**
     * The description of an entitlement property.
     */
    description?: pulumi.Input<string>;
    /**
     * List of entitlements in the bundle
     */
    entitlements?: pulumi.Input<pulumi.Input<inputs.EntitlementBundleEntitlement>[]>;
    /**
     * The display name for an entitlement bundle.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the entitlement bundle.
     */
    status?: pulumi.Input<string>;
    /**
     * Representation of a resource
     */
    target?: pulumi.Input<inputs.EntitlementBundleTarget>;
    /**
     * The ORN of the target resource. Required when updating the entitlement bundle.
     */
    targetResourceOrn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntitlementBundle resource.
 */
export interface EntitlementBundleArgs {
    /**
     * The description of an entitlement property.
     */
    description?: pulumi.Input<string>;
    /**
     * List of entitlements in the bundle
     */
    entitlements?: pulumi.Input<pulumi.Input<inputs.EntitlementBundleEntitlement>[]>;
    /**
     * The display name for an entitlement bundle.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the entitlement bundle.
     */
    status?: pulumi.Input<string>;
    /**
     * Representation of a resource
     */
    target?: pulumi.Input<inputs.EntitlementBundleTarget>;
    /**
     * The ORN of the target resource. Required when updating the entitlement bundle.
     */
    targetResourceOrn?: pulumi.Input<string>;
}
