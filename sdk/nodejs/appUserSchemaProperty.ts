// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.AppUserSchemaProperty("example", {
 *     appId: "<app id>",
 *     index: "customPropertyName",
 *     title: "customPropertyName",
 *     type: "string",
 *     description: "My custom property name",
 *     master: "OKTA",
 *     scope: "SELF",
 *     arrayEnums: [
 *         "1",
 *         "2",
 *     ],
 *     arrayOneOfs: [
 *         {
 *             "const": "1",
 *             title: "one",
 *         },
 *         {
 *             "const": "2",
 *             title: "two",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/appUserSchemaProperty:AppUserSchemaProperty example <app_id>/<property_name>
 * ```
 */
export class AppUserSchemaProperty extends pulumi.CustomResource {
    /**
     * Get an existing AppUserSchemaProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppUserSchemaPropertyState, opts?: pulumi.CustomResourceOptions): AppUserSchemaProperty {
        return new AppUserSchemaProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appUserSchemaProperty:AppUserSchemaProperty';

    /**
     * Returns true if the given object is an instance of AppUserSchemaProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppUserSchemaProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppUserSchemaProperty.__pulumiType;
    }

    /**
     * The Application's ID the user custom schema property should be assigned to.
     */
    declare public readonly appId: pulumi.Output<string>;
    /**
     * Array of values that an array property's items can be set to.
     */
    declare public readonly arrayEnums: pulumi.Output<string[] | undefined>;
    /**
     * Display name and value an enum array can be set to.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    declare public readonly arrayOneOfs: pulumi.Output<outputs.AppUserSchemaPropertyArrayOneOf[] | undefined>;
    /**
     * The type of the array elements if `type` is set to `array`
     */
    declare public readonly arrayType: pulumi.Output<string | undefined>;
    /**
     * The description of the user schema property.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    declare public readonly enums: pulumi.Output<string[] | undefined>;
    /**
     * External name of the user schema property.
     */
    declare public readonly externalName: pulumi.Output<string | undefined>;
    /**
     * External namespace of the user schema property.
     */
    declare public readonly externalNamespace: pulumi.Output<string | undefined>;
    /**
     * Subschema unique string identifier
     */
    declare public readonly index: pulumi.Output<string>;
    /**
     * Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
     */
    declare public readonly master: pulumi.Output<string | undefined>;
    /**
     * The maximum length of the user property value. Only applies to type `string`
     */
    declare public readonly maxLength: pulumi.Output<number | undefined>;
    /**
     * The minimum length of the user property value. Only applies to type `string`
     */
    declare public readonly minLength: pulumi.Output<number | undefined>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    declare public readonly oneOfs: pulumi.Output<outputs.AppUserSchemaPropertyOneOf[] | undefined>;
    /**
     * Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     */
    declare public readonly permissions: pulumi.Output<string | undefined>;
    /**
     * Whether the subschema is required
     */
    declare public readonly required: pulumi.Output<boolean | undefined>;
    /**
     * determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Subschema title (display name)
     */
    declare public readonly title: pulumi.Output<string>;
    /**
     * The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
     */
    declare public readonly union: pulumi.Output<boolean | undefined>;
    /**
     * Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
     */
    declare public readonly unique: pulumi.Output<string | undefined>;
    /**
     * User type ID. By default, it is `default`
     */
    declare public readonly userType: pulumi.Output<string | undefined>;

    /**
     * Create a AppUserSchemaProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppUserSchemaPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppUserSchemaPropertyArgs | AppUserSchemaPropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppUserSchemaPropertyState | undefined;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["arrayEnums"] = state?.arrayEnums;
            resourceInputs["arrayOneOfs"] = state?.arrayOneOfs;
            resourceInputs["arrayType"] = state?.arrayType;
            resourceInputs["description"] = state?.description;
            resourceInputs["enums"] = state?.enums;
            resourceInputs["externalName"] = state?.externalName;
            resourceInputs["externalNamespace"] = state?.externalNamespace;
            resourceInputs["index"] = state?.index;
            resourceInputs["master"] = state?.master;
            resourceInputs["maxLength"] = state?.maxLength;
            resourceInputs["minLength"] = state?.minLength;
            resourceInputs["oneOfs"] = state?.oneOfs;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["required"] = state?.required;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["title"] = state?.title;
            resourceInputs["type"] = state?.type;
            resourceInputs["union"] = state?.union;
            resourceInputs["unique"] = state?.unique;
            resourceInputs["userType"] = state?.userType;
        } else {
            const args = argsOrState as AppUserSchemaPropertyArgs | undefined;
            if (args?.appId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if (args?.index === undefined && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if (args?.title === undefined && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appId"] = args?.appId;
            resourceInputs["arrayEnums"] = args?.arrayEnums;
            resourceInputs["arrayOneOfs"] = args?.arrayOneOfs;
            resourceInputs["arrayType"] = args?.arrayType;
            resourceInputs["description"] = args?.description;
            resourceInputs["enums"] = args?.enums;
            resourceInputs["externalName"] = args?.externalName;
            resourceInputs["externalNamespace"] = args?.externalNamespace;
            resourceInputs["index"] = args?.index;
            resourceInputs["master"] = args?.master;
            resourceInputs["maxLength"] = args?.maxLength;
            resourceInputs["minLength"] = args?.minLength;
            resourceInputs["oneOfs"] = args?.oneOfs;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["required"] = args?.required;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["title"] = args?.title;
            resourceInputs["type"] = args?.type;
            resourceInputs["union"] = args?.union;
            resourceInputs["unique"] = args?.unique;
            resourceInputs["userType"] = args?.userType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppUserSchemaProperty.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppUserSchemaProperty resources.
 */
export interface AppUserSchemaPropertyState {
    /**
     * The Application's ID the user custom schema property should be assigned to.
     */
    appId?: pulumi.Input<string>;
    /**
     * Array of values that an array property's items can be set to.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name and value an enum array can be set to.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.AppUserSchemaPropertyArrayOneOf>[]>;
    /**
     * The type of the array elements if `type` is set to `array`
     */
    arrayType?: pulumi.Input<string>;
    /**
     * The description of the user schema property.
     */
    description?: pulumi.Input<string>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * External name of the user schema property.
     */
    externalName?: pulumi.Input<string>;
    /**
     * External namespace of the user schema property.
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * Subschema unique string identifier
     */
    index?: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
     */
    master?: pulumi.Input<string>;
    /**
     * The maximum length of the user property value. Only applies to type `string`
     */
    maxLength?: pulumi.Input<number>;
    /**
     * The minimum length of the user property value. Only applies to type `string`
     */
    minLength?: pulumi.Input<number>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.AppUserSchemaPropertyOneOf>[]>;
    /**
     * Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the subschema is required
     */
    required?: pulumi.Input<boolean>;
    /**
     * determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
     */
    scope?: pulumi.Input<string>;
    /**
     * Subschema title (display name)
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     */
    type?: pulumi.Input<string>;
    /**
     * If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
     */
    union?: pulumi.Input<boolean>;
    /**
     * Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
     */
    unique?: pulumi.Input<string>;
    /**
     * User type ID. By default, it is `default`
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppUserSchemaProperty resource.
 */
export interface AppUserSchemaPropertyArgs {
    /**
     * The Application's ID the user custom schema property should be assigned to.
     */
    appId: pulumi.Input<string>;
    /**
     * Array of values that an array property's items can be set to.
     */
    arrayEnums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name and value an enum array can be set to.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    arrayOneOfs?: pulumi.Input<pulumi.Input<inputs.AppUserSchemaPropertyArrayOneOf>[]>;
    /**
     * The type of the array elements if `type` is set to `array`
     */
    arrayType?: pulumi.Input<string>;
    /**
     * The description of the user schema property.
     */
    description?: pulumi.Input<string>;
    /**
     * Array of values a primitive property can be set to. See `arrayEnum` for arrays.
     */
    enums?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * External name of the user schema property.
     */
    externalName?: pulumi.Input<string>;
    /**
     * External namespace of the user schema property.
     */
    externalNamespace?: pulumi.Input<string>;
    /**
     * Subschema unique string identifier
     */
    index: pulumi.Input<string>;
    /**
     * Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
     */
    master?: pulumi.Input<string>;
    /**
     * The maximum length of the user property value. Only applies to type `string`
     */
    maxLength?: pulumi.Input<number>;
    /**
     * The minimum length of the user property value. Only applies to type `string`
     */
    minLength?: pulumi.Input<number>;
    /**
     * Array of maps containing a mapping for display name to enum value.
     * 	- 'const' - (Required) value mapping to member of 'enum'.
     * 	- 'title' - (Required) display name for the enum value.
     */
    oneOfs?: pulumi.Input<pulumi.Input<inputs.AppUserSchemaPropertyOneOf>[]>;
    /**
     * Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     */
    permissions?: pulumi.Input<string>;
    /**
     * Whether the subschema is required
     */
    required?: pulumi.Input<boolean>;
    /**
     * determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
     */
    scope?: pulumi.Input<string>;
    /**
     * Subschema title (display name)
     */
    title: pulumi.Input<string>;
    /**
     * The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     */
    type: pulumi.Input<string>;
    /**
     * If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
     */
    union?: pulumi.Input<boolean>;
    /**
     * Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
     */
    unique?: pulumi.Input<string>;
    /**
     * User type ID. By default, it is `default`
     */
    userType?: pulumi.Input<string>;
}
