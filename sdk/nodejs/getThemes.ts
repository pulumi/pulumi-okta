// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve
 * [Themes](https://developer.okta.com/docs/reference/api/brands/#theme-response-object)
 * of a brand for an Okta orgnanization.
 */
export function getThemes(args: GetThemesArgs, opts?: pulumi.InvokeOptions): Promise<GetThemesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("okta:index/getThemes:getThemes", {
        "brandId": args.brandId,
    }, opts);
}

/**
 * A collection of arguments for invoking getThemes.
 */
export interface GetThemesArgs {
    /**
     * Brand ID
     */
    brandId: string;
}

/**
 * A collection of values returned by getThemes.
 */
export interface GetThemesResult {
    readonly brandId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * List of `okta.Theme` belonging to the brand.
     */
    readonly themes: outputs.GetThemesTheme[];
}

export function getThemesOutput(args: GetThemesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetThemesResult> {
    return pulumi.output(args).apply(a => getThemes(a, opts))
}

/**
 * A collection of arguments for invoking getThemes.
 */
export interface GetThemesOutputArgs {
    /**
     * Brand ID
     */
    brandId: pulumi.Input<string>;
}
