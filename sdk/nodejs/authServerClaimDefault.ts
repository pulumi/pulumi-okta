// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configures Default Authorization Server Claim.
 * This resource allows you to configure Default Authorization Server Claims.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.AuthServerClaimDefault("example", {
 *     authServerId: "<auth server id>",
 *     name: "sub",
 *     value: "(appuser != null) ? appuser.userName : app.clientId",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/authServerClaimDefault:AuthServerClaimDefault example <auth_server_id>/<claim_name>
 * ```
 */
export class AuthServerClaimDefault extends pulumi.CustomResource {
    /**
     * Get an existing AuthServerClaimDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerClaimDefaultState, opts?: pulumi.CustomResourceOptions): AuthServerClaimDefault {
        return new AuthServerClaimDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authServerClaimDefault:AuthServerClaimDefault';

    /**
     * Returns true if the given object is an instance of AuthServerClaimDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServerClaimDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServerClaimDefault.__pulumiType;
    }

    /**
     * Specifies whether to include claims in token.
     */
    public readonly alwaysIncludeInToken!: pulumi.Output<boolean>;
    /**
     * ID of the authorization server.
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     */
    public /*out*/ readonly claimType!: pulumi.Output<string>;
    /**
     * The name of the claim. Can be set to `sub`, `address`, `birthdate`, `email`,`emailVerified`, `familyName`, `gender`, `givenName`, `locale`, `middleName`, `name`, `nickname`,`phoneNumber`, `picture`, `preferredUsername`, `profile`, `updatedAt`, `website`, `zoneinfo`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Auth server claim list of scopes
     */
    public /*out*/ readonly scopes!: pulumi.Output<string[]>;
    /**
     * The status of the application.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The value of the claim. Only required for `sub` claim.
     */
    public readonly value!: pulumi.Output<string | undefined>;
    /**
     * The type of value of the claim.
     */
    public /*out*/ readonly valueType!: pulumi.Output<string>;

    /**
     * Create a AuthServerClaimDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthServerClaimDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerClaimDefaultArgs | AuthServerClaimDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerClaimDefaultState | undefined;
            resourceInputs["alwaysIncludeInToken"] = state ? state.alwaysIncludeInToken : undefined;
            resourceInputs["authServerId"] = state ? state.authServerId : undefined;
            resourceInputs["claimType"] = state ? state.claimType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
        } else {
            const args = argsOrState as AuthServerClaimDefaultArgs | undefined;
            if ((!args || args.authServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            resourceInputs["alwaysIncludeInToken"] = args ? args.alwaysIncludeInToken : undefined;
            resourceInputs["authServerId"] = args ? args.authServerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["claimType"] = undefined /*out*/;
            resourceInputs["scopes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["valueType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServerClaimDefault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthServerClaimDefault resources.
 */
export interface AuthServerClaimDefaultState {
    /**
     * Specifies whether to include claims in token.
     */
    alwaysIncludeInToken?: pulumi.Input<boolean>;
    /**
     * ID of the authorization server.
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     */
    claimType?: pulumi.Input<string>;
    /**
     * The name of the claim. Can be set to `sub`, `address`, `birthdate`, `email`,`emailVerified`, `familyName`, `gender`, `givenName`, `locale`, `middleName`, `name`, `nickname`,`phoneNumber`, `picture`, `preferredUsername`, `profile`, `updatedAt`, `website`, `zoneinfo`
     */
    name?: pulumi.Input<string>;
    /**
     * Auth server claim list of scopes
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the application.
     */
    status?: pulumi.Input<string>;
    /**
     * The value of the claim. Only required for `sub` claim.
     */
    value?: pulumi.Input<string>;
    /**
     * The type of value of the claim.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthServerClaimDefault resource.
 */
export interface AuthServerClaimDefaultArgs {
    /**
     * Specifies whether to include claims in token.
     */
    alwaysIncludeInToken?: pulumi.Input<boolean>;
    /**
     * ID of the authorization server.
     */
    authServerId: pulumi.Input<string>;
    /**
     * The name of the claim. Can be set to `sub`, `address`, `birthdate`, `email`,`emailVerified`, `familyName`, `gender`, `givenName`, `locale`, `middleName`, `name`, `nickname`,`phoneNumber`, `picture`, `preferredUsername`, `profile`, `updatedAt`, `website`, `zoneinfo`
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the claim. Only required for `sub` claim.
     */
    value?: pulumi.Input<string>;
}
