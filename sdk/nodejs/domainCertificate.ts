// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages certificate for the domain.
 * This resource's 'certificate', 'private_key', and 'certificate_chain' attributes
 * hold actual PEM values and can be referred to by other configs requiring
 * certificate and private key inputs. This is inline with TF's best
 * practices
 * of not encrypting state.
 * See Let's Encrypt Certbot notes at the end of this
 * documentation for notes on how to generate a domain certificate with Let's Encrypt Certbot
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.Domain("example", {name: "www.example.com"});
 * const test = new okta.DomainCertificate("test", {
 *     domainId: testOktaDomain.id,
 *     type: "PEM",
 *     certificate: `-----BEGIN CERTIFICATE-----
 * MIIFNzCCBB+gAwIBAgISBAXomJWRama3ypu8TIxdA9wzMA0GCSqGSIb3DQEBCwUA
 * ...
 * NSgRtSXq11j8O4JONi8EXe7cEtvzUiLR5PL3itsK2svtrZ9jIwQ95wOPaA==
 * -----END CERTIFICATE-----
 * `,
 *     certificateChain: `-----BEGIN CERTIFICATE-----
 * MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw
 * ...
 * Dfvp7OOGAN6dEOM4+qR9sdjoSYKEBpsr6GtPAQw4dy753ec5
 * -----END CERTIFICATE-----
 * `,
 *     privateKey: `-----BEGIN PRIVATE KEY-----
 * MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5cyk6x63iBJSW
 * ...
 * nUFLNE8pXSnsqb0eOL74f3uQ
 * -----END PRIVATE KEY-----
 * `,
 * });
 * ```
 *
 * ## Let's Encrypt Certbot
 *
 * This example demonstrates generatoring a domain certificate with letsencrypt
 * certbot https://letsencrypt.org/getting-started/
 *
 * Use letsencrypt's certbot to generate domain certificates in RSA output mode.
 * The generator's output corresponds to `okta.DomainCertificate` fields in the
 * following manner.
 *
 * Okta Field          | Certbot file
 * --------------------|--------------
 * `certificate`       | `cert.pem`
 * `certificateChain` | `chain.pem`
 * `privateKey`       | `privkey.pem`
 */
export class DomainCertificate extends pulumi.CustomResource {
    /**
     * Get an existing DomainCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainCertificateState, opts?: pulumi.CustomResourceOptions): DomainCertificate {
        return new DomainCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/domainCertificate:DomainCertificate';

    /**
     * Returns true if the given object is an instance of DomainCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainCertificate.__pulumiType;
    }

    /**
     * Certificate content
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * Certificate chain
     */
    public readonly certificateChain!: pulumi.Output<string>;
    /**
     * Domain's ID
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * Certificate private key
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * Certificate type. Valid value is `PEM`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DomainCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainCertificateArgs | DomainCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DomainCertificateArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.certificateChain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateChain'");
            }
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainCertificate resources.
 */
export interface DomainCertificateState {
    /**
     * Certificate content
     */
    certificate?: pulumi.Input<string>;
    /**
     * Certificate chain
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Domain's ID
     */
    domainId?: pulumi.Input<string>;
    /**
     * Certificate private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Certificate type. Valid value is `PEM`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainCertificate resource.
 */
export interface DomainCertificateArgs {
    /**
     * Certificate content
     */
    certificate: pulumi.Input<string>;
    /**
     * Certificate chain
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Domain's ID
     */
    domainId: pulumi.Input<string>;
    /**
     * Certificate private key
     */
    privateKey: pulumi.Input<string>;
    /**
     * Certificate type. Valid value is `PEM`
     */
    type?: pulumi.Input<string>;
}
