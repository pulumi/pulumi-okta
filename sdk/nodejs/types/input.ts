// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface EventHookAuth {
    /**
     * Key to use for authentication, usually the header name, for example `"Authorization"`.
     */
    key: pulumi.Input<string>;
    /**
     * The type of hook to trigger. Currently only `"HTTP"` is supported.
     */
    type: pulumi.Input<string>;
    /**
     * Authentication secret.
     */
    value: pulumi.Input<string>;
}

export interface EventHookChannel {
    /**
     * The type of hook to trigger. Currently only `"HTTP"` is supported.
     */
    type: pulumi.Input<string>;
    /**
     * The URI the hook will hit.
     */
    uri: pulumi.Input<string>;
    /**
     * The version of the channel. Currently only `"1.0.0"` is supported.
     */
    version: pulumi.Input<string>;
}

export interface EventHookHeader {
    /**
     * Key to use for authentication, usually the header name, for example `"Authorization"`.
     */
    key?: pulumi.Input<string>;
    /**
     * Authentication secret.
     */
    value?: pulumi.Input<string>;
}

export interface TemplateSmsTranslation {
    /**
     * The language to map the template to.
     */
    language: pulumi.Input<string>;
    /**
     * The SMS message.
     */
    template: pulumi.Input<string>;
}
export namespace app {
    export interface AutoLoginUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BasicAuthUser {
        /**
         * ID of the Application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BookmarkUser {
        /**
         * ID of the Application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface GetSamlAttributeStatement {
        filterType?: string;
        filterValue?: string;
        /**
         * name of application.
         */
        name: string;
        namespace?: string;
        type?: string;
        values?: string[];
    }

    export interface OAuthJwk {
        e?: pulumi.Input<string>;
        kid: pulumi.Input<string>;
        kty: pulumi.Input<string>;
        n?: pulumi.Input<string>;
    }

    export interface OAuthUser {
        /**
         * ID of the application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter.
         */
        filterType?: pulumi.Input<string>;
        /**
         * Filter value to use.
         */
        filterValue?: pulumi.Input<string>;
        /**
         * The name of the attribute statement.
         */
        name: pulumi.Input<string>;
        /**
         * The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
         */
        namespace?: pulumi.Input<string>;
        /**
         * The type of attribute statement value. Can be `"EXPRESSION"` or `"GROUP"`.
         */
        type?: pulumi.Input<string>;
        /**
         * Array of values to use.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SamlUser {
        /**
         * id of application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SecurePasswordStoreUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SwaUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface ThreeFieldUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface UserSchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }

    export interface UserSchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }
}

export namespace deprecated {
    export interface AuthLoginAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BookmarkAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface MfaPolicyDuo {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyFidoU2f {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyFidoWebauthn {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyGoogleOtp {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaCall {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaOtp {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaPassword {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaPush {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaQuestion {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyOktaSms {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyRsaToken {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicySymantecVip {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface MfaPolicyYubikeyToken {
        consentType?: pulumi.Input<string>;
        enroll?: pulumi.Input<string>;
    }

    export interface OauthAppJwk {
        e?: pulumi.Input<string>;
        kid: pulumi.Input<string>;
        kty: pulumi.Input<string>;
        n?: pulumi.Input<string>;
    }

    export interface OauthAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SamlAppAttributeStatement {
        filterType?: pulumi.Input<string>;
        filterValue?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SamlAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SecurePasswordStoreAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SwaAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface ThreeFieldAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }
}

export namespace inline {
    export interface HookAuth {
        /**
         * Key to use for authentication, usually the header name, for example `"Authorization"`.
         */
        key?: pulumi.Input<string>;
        /**
         * The type of hook to trigger. Currently only `"HTTP"` is supported.
         */
        type?: pulumi.Input<string>;
        /**
         * Authentication secret.
         */
        value?: pulumi.Input<string>;
    }

    export interface HookChannel {
        /**
         * The request method to use. Default is `"POST"`.
         */
        method?: pulumi.Input<string>;
        /**
         * The type of hook to trigger. Currently only `"HTTP"` is supported.
         */
        type?: pulumi.Input<boolean>;
        /**
         * The URI the hook will hit.
         */
        uri: pulumi.Input<string>;
        /**
         * The version of the endpoint.
         */
        version: pulumi.Input<string>;
    }

    export interface HookHeader {
        /**
         * Key to use for authentication, usually the header name, for example `"Authorization"`.
         */
        key?: pulumi.Input<string>;
        /**
         * Authentication secret.
         */
        value?: pulumi.Input<string>;
    }
}

export namespace policy {
    export interface MfaDuo {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaFidoU2f {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaFidoWebauthn {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaGoogleOtp {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaCall {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaOtp {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaPassword {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaPush {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaQuestion {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaOktaSms {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaRsaToken {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaSymantecVip {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface MfaYubikeyToken {
        /**
         * User consent type required before enrolling in the factor: `"NONE"` or `"TERMS_OF_SERVICE"`. By default it is `"NONE"`.
         */
        consentType?: pulumi.Input<string>;
        /**
         * Requirements for user initiated enrollment. Can be `"NOT_ALLOWED"`, `"OPTIONAL"`, or `"REQUIRED"`. By default it is `"OPTIONAL"`.
         */
        enroll?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryAppExclude {
        /**
         * ID of the Rule.
         */
        id?: pulumi.Input<string>;
        /**
         * Policy Rule Name.
         */
        name?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryAppInclude {
        /**
         * ID of the Rule.
         */
        id?: pulumi.Input<string>;
        /**
         * Policy Rule Name.
         */
        name?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        osExpression?: pulumi.Input<string>;
        osType?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        matchType?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }
}

export namespace profile {
    export interface MappingMapping {
        /**
         * Combination or single source properties that will be mapped to the target property.
         */
        expression: pulumi.Input<string>;
        /**
         * Key of mapping.
         */
        id: pulumi.Input<string>;
        /**
         * Whether to update target properties on user create & update or just on create.
         */
        pushStatus?: pulumi.Input<string>;
    }
}

export namespace template {
    export interface EmailTranslation {
        /**
         * The language to map tthe template to.
         */
        language: pulumi.Input<string>;
        /**
         * The email subject line.
         */
        subject: pulumi.Input<string>;
        /**
         * The email body.
         */
        template: pulumi.Input<string>;
    }
}

export namespace user {
    export interface GetUserSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface GetUsersSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface GetUsersUser {
        /**
         * Administrator roles assigned to user.
         */
        adminRoles?: string[];
        /**
         * user profile property.
         */
        city?: string;
        /**
         * user profile property.
         */
        costCenter?: string;
        /**
         * user profile property.
         */
        countryCode?: string;
        /**
         * raw JSON containing all custom profile attributes.
         */
        customProfileAttributes?: string;
        /**
         * user profile property.
         */
        department?: string;
        /**
         * user profile property.
         */
        displayName?: string;
        /**
         * user profile property.
         */
        division?: string;
        /**
         * user profile property.
         */
        email?: string;
        /**
         * user profile property.
         */
        employeeNumber?: string;
        /**
         * user profile property.
         */
        firstName?: string;
        /**
         * user profile property.
         */
        groupMemberships?: string[];
        /**
         * user profile property.
         */
        honorificPrefix?: string;
        /**
         * user profile property.
         */
        honorificSuffix?: string;
        /**
         * user profile property.
         */
        lastName?: string;
        /**
         * user profile property.
         */
        locale?: string;
        /**
         * user profile property.
         */
        login?: string;
        /**
         * user profile property.
         */
        manager?: string;
        /**
         * user profile property.
         */
        managerId?: string;
        /**
         * user profile property.
         */
        middleName?: string;
        /**
         * user profile property.
         */
        mobilePhone?: string;
        /**
         * user profile property.
         */
        nickName?: string;
        /**
         * user profile property.
         */
        organization?: string;
        /**
         * user profile property.
         */
        postalAddress?: string;
        /**
         * user profile property.
         */
        preferredLanguage?: string;
        /**
         * user profile property.
         */
        primaryPhone?: string;
        /**
         * user profile property.
         */
        profileUrl?: string;
        /**
         * user profile property.
         */
        secondEmail?: string;
        /**
         * user profile property.
         */
        state?: string;
        /**
         * user profile property.
         */
        status?: string;
        /**
         * user profile property.
         */
        streetAddress?: string;
        /**
         * user profile property.
         */
        timezone?: string;
        /**
         * user profile property.
         */
        title?: string;
        /**
         * user profile property.
         */
        userType?: string;
        /**
         * user profile property.
         */
        zipCode?: string;
    }

    export interface SchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }

    export interface SchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }
}
