// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppGroupAssignmentsGroup {
    /**
     * A group to associate with the application
     */
    id: pulumi.Input<string>;
    /**
     * Priority of group assignment
     */
    priority?: pulumi.Input<number>;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile: pulumi.Input<string>;
}

export interface AppSignonPolicyRulePlatformInclude {
    /**
     * Only available with OTHER OS type
     */
    osExpression?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}

export interface DomainDnsRecord {
    expiration?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EmailSenderDnsRecord {
    fqdn?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface EventHookHeader {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GroupSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}

export interface GroupSchemaPropertyMasterOverridePriority {
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GroupSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}

export interface PolicyRuleProfileEnrollmentProfileAttribute {
    /**
     * A display-friendly label for this property
     */
    label: pulumi.Input<string>;
    /**
     * The name of a User Profile property
     */
    name: pulumi.Input<string>;
    /**
     * Indicates if this property is required for enrollment
     */
    required?: pulumi.Input<boolean>;
}

export interface TemplateSmsTranslation {
    language: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}

export interface UserSchemaPropertyMasterOverridePriority {
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface UserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: pulumi.Input<string>;
    /**
     * Enum title
     */
    title: pulumi.Input<string>;
}
export namespace Index {
    export interface EmailDomainDnsValidationRecord {
        /**
         * @deprecated This field has been removed in the newest go sdk version and has become noop
         */
        expiration?: pulumi.Input<string>;
        fqdn?: pulumi.Input<string>;
        recordType?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetOrgMetadataDomains {
        /**
         * Custom Domain Org URI
         */
        alternate?: string;
        /**
         * Standard Org URI
         */
        organization?: string;
    }

    export interface GetOrgMetadataDomainsArgs {
        /**
         * Custom Domain Org URI
         */
        alternate?: pulumi.Input<string>;
        /**
         * Standard Org URI
         */
        organization?: pulumi.Input<string>;
    }

    export interface GetOrgMetadataSettings {
        analyticsCollectionEnabled?: boolean;
        bugReportingEnabled?: boolean;
        /**
         * Whether the legacy Okta Mobile application is enabled for the org
         */
        omEnabled?: boolean;
    }

    export interface GetOrgMetadataSettingsArgs {
        analyticsCollectionEnabled?: pulumi.Input<boolean>;
        bugReportingEnabled?: pulumi.Input<boolean>;
        /**
         * Whether the legacy Okta Mobile application is enabled for the org
         */
        omEnabled?: pulumi.Input<boolean>;
    }
}

export namespace app {
    export interface OAuthGroupsClaim {
        /**
         * Groups claim filter. Can only be set if type is FILTER.
         */
        filterType?: pulumi.Input<string>;
        /**
         * Issuer mode inherited from OAuth App
         */
        issuerMode?: pulumi.Input<string>;
        /**
         * Name of the claim that will be used in the token.
         */
        name: pulumi.Input<string>;
        /**
         * Groups claim type.
         */
        type: pulumi.Input<string>;
        /**
         * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         */
        value: pulumi.Input<string>;
    }

    export interface OAuthJwk {
        /**
         * RSA Exponent
         */
        e?: pulumi.Input<string>;
        /**
         * Key ID
         */
        kid: pulumi.Input<string>;
        /**
         * Key type
         */
        kty: pulumi.Input<string>;
        /**
         * RSA Modulus
         */
        n?: pulumi.Input<string>;
        x?: pulumi.Input<string>;
        y?: pulumi.Input<string>;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter
         */
        filterType?: pulumi.Input<string>;
        /**
         * Filter value to use
         */
        filterValue?: pulumi.Input<string>;
        /**
         * The reference name of the attribute statement
         */
        name: pulumi.Input<string>;
        /**
         * The name format of the attribute
         */
        namespace?: pulumi.Input<string>;
        /**
         * The type of attribute statements object
         */
        type?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SamlKey {
        created?: pulumi.Input<string>;
        e?: pulumi.Input<string>;
        expiresAt?: pulumi.Input<string>;
        kid?: pulumi.Input<string>;
        kty?: pulumi.Input<string>;
        lastUpdated?: pulumi.Input<string>;
        n?: pulumi.Input<string>;
        use?: pulumi.Input<string>;
        x5cs?: pulumi.Input<pulumi.Input<string>[]>;
        x5tS256?: pulumi.Input<string>;
    }
}

export namespace auth {
}

export namespace inline {
    export interface HookHeader {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }
}

export namespace policy {
    export interface RuleIdpDiscoveryAppExclude {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryAppInclude {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        /**
         * Only available with OTHER OS type
         */
        osExpression?: pulumi.Input<string>;
        osType?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        matchType?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface RuleMfaAppExclude {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface RuleMfaAppInclude {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface RuleSignonFactorSequence {
        /**
         * Type of a Factor
         */
        primaryCriteriaFactorType: pulumi.Input<string>;
        /**
         * Factor provider
         */
        primaryCriteriaProvider: pulumi.Input<string>;
        secondaryCriterias?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequenceSecondaryCriteria>[]>;
    }

    export interface RuleSignonFactorSequenceSecondaryCriteria {
        /**
         * Type of a Factor
         */
        factorType: pulumi.Input<string>;
        /**
         * Factor provider
         */
        provider: pulumi.Input<string>;
    }
}

export namespace profile {
    export interface MappingMapping {
        expression: pulumi.Input<string>;
        /**
         * The mapping property key.
         */
        id: pulumi.Input<string>;
        pushStatus?: pulumi.Input<string>;
    }
}

export namespace user {
    export interface GetUserSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUserSearchArgs {
        comparison?: pulumi.Input<string>;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: pulumi.Input<string>;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetUsersSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUsersSearchArgs {
        comparison?: pulumi.Input<string>;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: pulumi.Input<string>;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface UserPasswordHash {
        /**
         * The algorithm used to generate the hash using the password
         */
        algorithm: pulumi.Input<string>;
        /**
         * Only required for salted hashes
         */
        salt?: pulumi.Input<string>;
        /**
         * Specifies whether salt was pre- or postfixed to the password before hashing
         */
        saltOrder?: pulumi.Input<string>;
        /**
         * For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         */
        value: pulumi.Input<string>;
        /**
         * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
         */
        workFactor?: pulumi.Input<number>;
    }
}
