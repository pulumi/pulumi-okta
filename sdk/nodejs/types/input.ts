// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AppGroupAssignmentsGroup {
    /**
     * ID of the group to assign.
     */
    id: pulumi.Input<string>;
    /**
     * Priority of group assignment
     */
    priority?: pulumi.Input<number>;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile: pulumi.Input<string>;
}

export interface AppSharedCredentialsUser {
    /**
     * ID of an app.
     */
    id?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface AppSignonPolicyRulePlatformInclude {
    /**
     * Only available when using `osType = "OTHER"`
     */
    osExpression?: pulumi.Input<string>;
    /**
     * One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`, `"MACOS"`
     */
    osType?: pulumi.Input<string>;
    /**
     * The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
     */
    type?: pulumi.Input<string>;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export interface DomainDnsRecord {
    /**
     * TXT record expiration.
     */
    expiration?: pulumi.Input<string>;
    /**
     * DNS record name.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Record type can be TXT or CNAME.
     */
    recordType?: pulumi.Input<string>;
    /**
     * DNS verification value
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EmailSenderDnsRecord {
    /**
     * DNS record name.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Record type can be TXT or CNAME.
     */
    recordType?: pulumi.Input<string>;
    /**
     * DNS verification value
     */
    value?: pulumi.Input<string>;
}

export interface EventHookHeader {
    /**
     * Key to use for authentication, usually the header name, for example `"Authorization"`.
     */
    key?: pulumi.Input<string>;
    /**
     * Authentication secret.
     */
    value?: pulumi.Input<string>;
}

export interface GroupSchemaPropertyArrayOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export interface GroupSchemaPropertyMasterOverridePriority {
    /**
     * - Type of profile source.
     */
    type?: pulumi.Input<string>;
    /**
     * - ID of profile source.
     */
    value: pulumi.Input<string>;
}

export interface GroupSchemaPropertyOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export interface PolicyRuleProfileEnrollmentProfileAttribute {
    /**
     * A display-friendly label for this property
     */
    label: pulumi.Input<string>;
    /**
     * The name of a User Profile property
     */
    name: pulumi.Input<string>;
    /**
     * Indicates if this property is required for enrollment. Default is `false`.
     */
    required?: pulumi.Input<boolean>;
}

export interface TemplateSmsTranslation {
    /**
     * The language to map the template to.
     */
    language: pulumi.Input<string>;
    /**
     * The SMS message.
     */
    template: pulumi.Input<string>;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export interface UserSchemaPropertyMasterOverridePriority {
    /**
     * - Type of profile source.
     */
    type?: pulumi.Input<string>;
    /**
     * - ID of profile source.
     */
    value: pulumi.Input<string>;
}

export interface UserSchemaPropertyOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: pulumi.Input<string>;
    /**
     * display name for the enum value.
     */
    title: pulumi.Input<string>;
}

export namespace app {
    export interface AutoLoginUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BasicAuthUser {
        /**
         * ID of the Application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BookmarkUser {
        /**
         * ID of the Application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface OAuthGroupsClaim {
        /**
         * Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
         */
        filterType?: pulumi.Input<string>;
        /**
         * Name of the claim that will be used in the token.
         */
        name: pulumi.Input<string>;
        /**
         * Groups claim type. Valid values: `"FILTER"`, `"EXPRESSION"`.
         */
        type: pulumi.Input<string>;
        /**
         * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         */
        value: pulumi.Input<string>;
    }

    export interface OAuthJwk {
        e?: pulumi.Input<string>;
        kid: pulumi.Input<string>;
        kty: pulumi.Input<string>;
        n?: pulumi.Input<string>;
    }

    export interface OAuthUser {
        /**
         * ID of the application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter. Valid values are: `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, or `"REGEX"`
         */
        filterType?: pulumi.Input<string>;
        /**
         * Filter value to use.
         */
        filterValue?: pulumi.Input<string>;
        /**
         * The name of the attribute statement.
         */
        name: pulumi.Input<string>;
        /**
         * The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
         */
        namespace?: pulumi.Input<string>;
        /**
         * The type of attribute statement value. Valid values are: `"EXPRESSION"` or `"GROUP"`. Default is `"EXPRESSION"`.
         */
        type?: pulumi.Input<string>;
        /**
         * Array of values to use.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SamlUser {
        /**
         * id of application.
         */
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SecurePasswordStoreUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SwaUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface ThreeFieldUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface UserSchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }

    export interface UserSchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }
}

export namespace auth {
}

export namespace deprecated {
    export interface AuthLoginAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface BookmarkAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface MfaPolicyRuleAppExclude {
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface MfaPolicyRuleAppInclude {
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface OauthAppGroupsClaim {
        filterType?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        type: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface OauthAppJwk {
        e?: pulumi.Input<string>;
        kid: pulumi.Input<string>;
        kty: pulumi.Input<string>;
        n?: pulumi.Input<string>;
    }

    export interface OauthAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SamlAppAttributeStatement {
        filterType?: pulumi.Input<string>;
        filterValue?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SamlAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SecurePasswordStoreAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface SignonPolicyRuleFactorSequence {
        primaryCriteriaFactorType: pulumi.Input<string>;
        primaryCriteriaProvider: pulumi.Input<string>;
        secondaryCriterias?: pulumi.Input<pulumi.Input<inputs.deprecated.SignonPolicyRuleFactorSequenceSecondaryCriteria>[]>;
    }

    export interface SignonPolicyRuleFactorSequenceSecondaryCriteria {
        factorType: pulumi.Input<string>;
        provider: pulumi.Input<string>;
    }

    export interface SwaAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface ThreeFieldAppUser {
        id?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        scope?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }
}

export namespace inline {
    export interface HookHeader {
        /**
         * Key to use for authentication, usually the header name, for example `"Authorization"`.
         */
        key?: pulumi.Input<string>;
        /**
         * Authentication secret.
         */
        value?: pulumi.Input<string>;
    }
}

export namespace policy {
    export interface RuleIdpDiscoveryAppExclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: pulumi.Input<string>;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: pulumi.Input<string>;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryAppInclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: pulumi.Input<string>;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: pulumi.Input<string>;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        /**
         * Only available when using `osType = "OTHER"`
         */
        osExpression?: pulumi.Input<string>;
        /**
         * One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`
         */
        osType?: pulumi.Input<string>;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type?: pulumi.Input<string>;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        /**
         * The kind of pattern. For regex, use `"EXPRESSION"`. For simple string matches, use one of the following: `"SUFFIX"`, `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`
         */
        matchType?: pulumi.Input<string>;
        /**
         * The regex or simple match string to match against.
         */
        value?: pulumi.Input<string>;
    }

    export interface RuleMfaAppExclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: pulumi.Input<string>;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: pulumi.Input<string>;
        /**
         * One of: `"APP"`, `"APP_TYPE"`
         */
        type: pulumi.Input<string>;
    }

    export interface RuleMfaAppInclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: pulumi.Input<string>;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: pulumi.Input<string>;
        /**
         * One of: `"APP"`, `"APP_TYPE"`
         */
        type: pulumi.Input<string>;
    }

    export interface RuleSignonFactorSequence {
        /**
         * Primary factor type of the auth section.
         */
        primaryCriteriaFactorType: pulumi.Input<string>;
        /**
         * Primary provider of the auth section.
         */
        primaryCriteriaProvider: pulumi.Input<string>;
        /**
         * Additional authentication steps.
         */
        secondaryCriterias?: pulumi.Input<pulumi.Input<inputs.policy.RuleSignonFactorSequenceSecondaryCriteria>[]>;
    }

    export interface RuleSignonFactorSequenceSecondaryCriteria {
        /**
         * Factor type of the additional authentication step.
         */
        factorType: pulumi.Input<string>;
        /**
         * Provider of the additional authentication step.
         */
        provider: pulumi.Input<string>;
    }
}

export namespace profile {
    export interface MappingMapping {
        /**
         * Combination or single source properties that will be mapped to the target property.
         */
        expression: pulumi.Input<string>;
        /**
         * Key of mapping.
         */
        id: pulumi.Input<string>;
        /**
         * Whether to update target properties on user create & update or just on create.
         */
        pushStatus?: pulumi.Input<string>;
    }
}

export namespace template {
    export interface EmailTranslation {
        /**
         * The language to map the template to.
         */
        language: pulumi.Input<string>;
        /**
         * The email subject line.
         */
        subject: pulumi.Input<string>;
        /**
         * The email body.
         */
        template: pulumi.Input<string>;
    }
}

export namespace user {
    export interface GetUserSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface GetUserSearchArgs {
        /**
         * Comparison to use.
         */
        comparison?: pulumi.Input<string>;
        /**
         * Name of property to search against.
         */
        name: pulumi.Input<string>;
        /**
         * Value to compare with.
         */
        value: pulumi.Input<string>;
    }

    export interface GetUsersSearchArgs {
        /**
         * Comparison to use.
         */
        comparison?: pulumi.Input<string>;
        /**
         * Name of property to search against.
         */
        name: pulumi.Input<string>;
        /**
         * Value to compare with.
         */
        value: pulumi.Input<string>;
    }

    export interface GetUsersSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface SchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }

    export interface SchemaMasterOverridePriority {
        /**
         * - Type of profile source.
         */
        type?: pulumi.Input<string>;
        /**
         * - ID of profile source.
         */
        value: pulumi.Input<string>;
    }

    export interface SchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: pulumi.Input<string>;
        /**
         * display name for the enum value.
         */
        title: pulumi.Input<string>;
    }

    export interface UserPasswordHash {
        algorithm: pulumi.Input<string>;
        /**
         * Only required for salted hashes. For BCRYPT, this specifies the radix64-encoded salt used to generate 
         * the hash, which must be 22 characters long. For other salted hashes, this specifies the base64-encoded salt used to generate the hash.
         */
        salt?: pulumi.Input<string>;
        /**
         * Specifies whether salt was pre- or postfixed to the password before hashing. Only required for salted algorithms.
         */
        saltOrder?: pulumi.Input<string>;
        /**
         * For SHA-512, SHA-256, SHA-1, MD5, this is the actual base64-encoded hash of the password (and salt, if used). 
         * This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing
         * the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be
         * the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         */
        value: pulumi.Input<string>;
        /**
         * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm. Minimum value is 1, and maximum is 20.
         */
        workFactor?: pulumi.Input<number>;
    }
}
