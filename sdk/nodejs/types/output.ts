// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppGroupAssignmentsGroup {
    /**
     * A group to associate with the application
     */
    id: string;
    /**
     * Priority of group assignment
     */
    priority?: number;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile: string;
}

export interface AppSignonPolicyRulePlatformInclude {
    /**
     * Only available with OTHER OS type
     */
    osExpression?: string;
    osType?: string;
    type?: string;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `arrayEnum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface CustomizedSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode?: string;
    reportUri?: string;
    srcLists?: string[];
}

export interface CustomizedSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel?: string;
    authenticatorPageCustomLinkUrl?: string;
    classicRecoveryFlowEmailOrUsernameLabel?: string;
    customLink1Label?: string;
    customLink1Url?: string;
    customLink2Label?: string;
    customLink2Url?: string;
    forgotPasswordLabel?: string;
    forgotPasswordUrl?: string;
    helpLabel?: string;
    helpUrl?: string;
    passwordInfoTip?: string;
    passwordLabel?: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel?: string;
    unlockAccountLabel?: string;
    unlockAccountUrl?: string;
    usernameInfoTip?: string;
    usernameLabel?: string;
    widgetGeneration: string;
}

export interface DomainDnsRecord {
    /**
     * TXT record expiration
     */
    expiration: string;
    /**
     * DNS record name
     */
    fqdn: string;
    /**
     * Record type can be TXT or CNAME
     */
    recordType: string;
    /**
     * DNS verification value
     */
    values: string[];
}

export interface EmailDomainDnsValidationRecord {
    /**
     * DNS TXT record expiration
     *
     * @deprecated This field has been removed in the newest go sdk version and has become noop
     */
    expiration: string;
    /**
     * DNS record name
     */
    fqdn: string;
    /**
     * Record type can be TXT or cname
     */
    recordType: string;
    /**
     * DNS record value
     */
    value: string;
}

export interface EmailSenderDnsRecord {
    /**
     * DNS record name
     */
    fqdn: string;
    /**
     * Record type can be TXT or CNAME
     */
    recordType: string;
    /**
     * DNS verification value
     */
    value: string;
}

export interface EventHookHeader {
    key?: string;
    value?: string;
}

export interface GetAppsApp {
    adminNote: string;
    created: string;
    enduserNote: string;
    features: string[];
    id: string;
    label: string;
    lastUpdated: string;
    name: string;
    signOnMode: string;
    status: string;
    visibility: outputs.GetAppsAppVisibility;
}

export interface GetAppsAppVisibility {
    autoLaunch: boolean;
    autoSubmitToolbar: boolean;
    hide: outputs.GetAppsAppVisibilityHide;
}

export interface GetAppsAppVisibilityHide {
    ios: boolean;
    web: boolean;
}

export interface GetAuthServerClaimsClaim {
    /**
     * Specifies whether to include Claims in the token.
     */
    alwaysIncludeInToken: boolean;
    /**
     * Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
     */
    claimType: string;
    /**
     * ID of the claim.
     */
    id: string;
    /**
     * Name of the claim.
     */
    name: string;
    /**
     * Specifies the scopes for this Claim.
     */
    scopes: string[];
    /**
     * Status of the claim.
     */
    status: string;
    /**
     * Value of the claim.
     */
    value: string;
    /**
     * Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
     */
    valueType: string;
}

export interface GetBehavioursBehavior {
    /**
     * Behavior ID.
     */
    id: string;
    /**
     * Behavior name.
     */
    name: string;
    /**
     * Map of behavior settings.
     */
    settings: {[key: string]: string};
    /**
     * Behavior status.
     */
    status: string;
    /**
     * Behavior type.
     */
    type: string;
}

export interface GetBrandsBrand {
    /**
     * Custom privacy policy URL
     */
    customPrivacyPolicyUrl: string;
    /**
     * The ID of the Brand
     */
    id: string;
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the brand
     */
    links: string;
    /**
     * Brand name
     */
    name: string;
    /**
     * Removes "Powered by Okta" from the Okta-hosted sign-in page and "Â© 2021 Okta, Inc." from the Okta End-User Dashboard
     */
    removePoweredByOkta: boolean;
}

export interface GetDefaultSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode: string;
    reportUri: string;
    srcLists: string[];
}

export interface GetDefaultSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel: string;
    authenticatorPageCustomLinkUrl: string;
    classicRecoveryFlowEmailOrUsernameLabel: string;
    customLink1Label: string;
    customLink1Url: string;
    customLink2Label: string;
    customLink2Url: string;
    forgotPasswordLabel: string;
    forgotPasswordUrl: string;
    helpLabel: string;
    helpUrl: string;
    passwordInfoTip: string;
    passwordLabel: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel: string;
    unlockAccountLabel: string;
    unlockAccountUrl: string;
    usernameInfoTip: string;
    usernameLabel: string;
    widgetGeneration: string;
}

export interface GetDeviceAssurancePolicyDiskEncryptionType {
    includes: string[];
}

export interface GetDeviceAssurancePolicyOsVersion {
    dynamicVersionRequirement: outputs.GetDeviceAssurancePolicyOsVersionDynamicVersionRequirement;
    minimum: string;
}

export interface GetDeviceAssurancePolicyOsVersionConstraint {
    dynamicVersionRequirement: outputs.GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirement;
    majorVersionConstraint: string;
}

export interface GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirement {
    distanceFromLatestMajor: number;
    latestSecurityPatch: boolean;
    type: string;
}

export interface GetDeviceAssurancePolicyOsVersionDynamicVersionRequirement {
    distanceFromLatestMajor: number;
    latestSecurityPatch: boolean;
    type: string;
}

export interface GetDeviceAssurancePolicyScreenlockType {
    includes: string[];
}

export interface GetDeviceAssurancePolicyThirdPartySignalProvider {
    dtc: outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtc;
}

export interface GetDeviceAssurancePolicyThirdPartySignalProviderDtc {
    allowScreenLock: boolean;
    browserVersion: outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion;
    builtInDnsClientEnabled: boolean;
    chromeRemoteDesktopAppBlocked: boolean;
    crowdStrikeAgentId: string;
    crowdStrikeCustomerId: string;
    deviceEnrollmentDomain: string;
    diskEncrypted: boolean;
    keyTrustLevel: string;
    managedDevice: boolean;
    osFirewall: boolean;
    osVersion: outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion;
    passwordProtectionWarningTrigger: string;
    realtimeUrlCheckMode: boolean;
    safeBrowsingProtectionLevel: string;
    screenLockSecured: boolean;
    siteIsolationEnabled: boolean;
    thirdPartyBlockingEnabled: boolean;
    windowsMachineDomain: string;
    windowsUserDomain: string;
}

export interface GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion {
    minimum: string;
}

export interface GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion {
    minimum: string;
}

export interface GetDomainDnsRecord {
    /**
     * TXT record expiration
     */
    expiration: string;
    /**
     * DNS record name
     */
    fqdn: string;
    /**
     * Record type can be TXT or CNAME
     */
    recordType: string;
    /**
     * DNS verification value
     */
    values: string[];
}

export interface GetEmailCustomizationsEmailCustomization {
    /**
     * The body of the customization
     */
    body: string;
    /**
     * The ID of the customization
     */
    id: string;
    /**
     * Whether the customization is the default
     */
    isDefault: boolean;
    /**
     * The language supported by the customization
     */
    language: string;
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the email template
     */
    links: string;
    /**
     * The subject of the customization
     */
    subject: string;
}

export interface GetGroupsGroup {
    /**
     * Raw JSON containing all custom profile attributes. Likely only useful on groups of type
     */
    customProfileAttributes: string;
    /**
     * Group description.
     */
    description: string;
    /**
     * Group ID.
     */
    id: string;
    /**
     * Group name.
     */
    name: string;
    /**
     * The ID of the application the Group is sourced/imported from (only present for groups of type APP_GROUP).
     */
    source: string;
    /**
     * Group type, either 'APP_GROUP' or 'OKTA_GROUP'.
     */
    type: string;
}

export interface GetLogStreamSettings {
    /**
     * AWS account ID. Required only for 'aws_eventbridge' type
     */
    accountId: string;
    /**
     * Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
     */
    edition: string;
    /**
     * An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
     */
    eventSourceName: string;
    /**
     * The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
     */
    host: string;
    /**
     * The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
     */
    region: string;
    /**
     * The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
     */
    token: string;
}

export interface GetOrgMetadataDomains {
    /**
     * Custom Domain Org URI
     */
    alternate: string;
    /**
     * Standard Org URI
     */
    organization: string;
}

export interface GetOrgMetadataSettings {
    analyticsCollectionEnabled: boolean;
    bugReportingEnabled: boolean;
    /**
     * Whether the legacy Okta Mobile application is enabled for the org
     */
    omEnabled: boolean;
}

export interface GetTemplatesEmailTemplate {
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the email template
     */
    links: string;
    /**
     * The name of the email template
     */
    name: string;
}

export interface GetThemesTheme {
    /**
     * Background image URL
     */
    backgroundImageUrl: string;
    /**
     * Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     */
    emailTemplateTouchPointVariant: string;
    /**
     * Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     */
    endUserDashboardTouchPointVariant: string;
    /**
     * Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    errorPageTouchPointVariant: string;
    /**
     * Favicon URL
     */
    faviconUrl: string;
    /**
     * The ID of the theme
     */
    id: string;
    /**
     * Link relations for this object - JSON HAL - Discoverable resources related to the email template
     */
    links: string;
    /**
     * Logo URL
     */
    logoUrl: string;
    /**
     * Primary color contrast hex code
     */
    primaryColorContrastHex: string;
    /**
     * Primary color hex code
     */
    primaryColorHex: string;
    /**
     * Secondary color contrast hex code
     */
    secondaryColorContrastHex: string;
    /**
     * Secondary color hex code
     */
    secondaryColorHex: string;
    /**
     * Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     */
    signInPageTouchPointVariant: string;
}

export interface GetTrustedOriginsTrustedOrigin {
    /**
     * Whether the Trusted Origin is active or not - can only be issued post-creation
     */
    active: boolean;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Unique name for this trusted origin
     */
    name: string;
    /**
     * Unique origin URL for this trusted origin
     */
    origin: string;
    /**
     * Scopes of the Trusted Origin - can either be CORS or REDIRECT only
     */
    scopes: string[];
}

export interface GetUserSecurityQuestionsQuestion {
    key: string;
    text: string;
}

export interface GroupSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `arrayEnum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface GroupSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface GroupSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface LogStreamSettings {
    /**
     * AWS account ID. Required only for 'aws_eventbridge' type
     */
    accountId?: string;
    /**
     * Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
     */
    edition?: string;
    /**
     * An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
     */
    eventSourceName?: string;
    /**
     * The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
     */
    host?: string;
    /**
     * The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
     */
    region?: string;
    /**
     * The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
     */
    token?: string;
}

export interface PolicyRuleProfileEnrollmentProfileAttribute {
    /**
     * A display-friendly label for this property
     */
    label: string;
    /**
     * The name of a User Profile property
     */
    name: string;
    /**
     * Indicates if this property is required for enrollment
     */
    required?: boolean;
}

export interface PreviewSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode?: string;
    reportUri?: string;
    srcLists?: string[];
}

export interface PreviewSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel?: string;
    authenticatorPageCustomLinkUrl?: string;
    classicRecoveryFlowEmailOrUsernameLabel?: string;
    customLink1Label?: string;
    customLink1Url?: string;
    customLink2Label?: string;
    customLink2Url?: string;
    forgotPasswordLabel?: string;
    forgotPasswordUrl?: string;
    helpLabel?: string;
    helpUrl?: string;
    passwordInfoTip?: string;
    passwordLabel?: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel?: string;
    unlockAccountLabel?: string;
    unlockAccountUrl?: string;
    usernameInfoTip?: string;
    usernameLabel?: string;
    widgetGeneration: string;
}

export interface TemplateSmsTranslation {
    /**
     * The language to map the template to.
     */
    language: string;
    /**
     * The SMS message.
     */
    template: string;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `arrayEnum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface UserSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface UserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export namespace app {
    export interface GetSamlAttributeStatement {
        /**
         * Type of group attribute filter
         */
        filterType: string;
        /**
         * Filter value to use
         */
        filterValue: string;
        /**
         * The reference name of the attribute statement
         */
        name: string;
        /**
         * The name format of the attribute
         */
        namespace: string;
        /**
         * The type of attribute statements object
         */
        type: string;
        values: string[];
    }

    export interface OAuthGroupsClaim {
        /**
         * Groups claim filter. Can only be set if type is FILTER.
         */
        filterType?: string;
        /**
         * Issuer mode inherited from OAuth App
         */
        issuerMode: string;
        /**
         * Name of the claim that will be used in the token.
         */
        name: string;
        /**
         * Groups claim type.
         */
        type: string;
        /**
         * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         */
        value: string;
    }

    export interface OAuthJwk {
        /**
         * RSA Exponent
         */
        e?: string;
        /**
         * Key ID
         */
        kid: string;
        /**
         * Key type
         */
        kty: string;
        /**
         * RSA Modulus
         */
        n?: string;
        /**
         * X coordinate of the elliptic curve point
         */
        x?: string;
        /**
         * Y coordinate of the elliptic curve point
         */
        y?: string;
    }

    export interface SamlAcsEndpointsIndex {
        index: number;
        url: string;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter. Valid values are: `STARTS_WITH`, `EQUALS`, `CONTAINS`, or `REGEX`
         */
        filterType?: string;
        /**
         * Filter value to use
         */
        filterValue?: string;
        /**
         * The reference name of the attribute statement
         */
        name: string;
        /**
         * The attribute namespace. It can be set to `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified`, `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`, or `urn:oasis:names:tc:SAML:2.0:attrname-format:basic`
         */
        namespace?: string;
        /**
         * The type of attribute statements object
         */
        type?: string;
        values?: string[];
    }

    export interface SamlKey {
        /**
         * Created date
         */
        created: string;
        /**
         * RSA exponent
         */
        e: string;
        /**
         * Expiration date
         */
        expiresAt: string;
        /**
         * Key ID
         */
        kid: string;
        /**
         * Key type. Identifies the cryptographic algorithm family used with the key.
         */
        kty: string;
        /**
         * Last updated date
         */
        lastUpdated: string;
        /**
         * RSA modulus
         */
        n: string;
        /**
         * Intended use of the public key.
         */
        use: string;
        /**
         * X.509 Certificate Chain
         */
        x5cs: string[];
        /**
         * X.509 certificate SHA-256 thumbprint
         */
        x5tS256: string;
    }

}

export namespace auth {
    export interface GetServerScopesScope {
        /**
         * Indicates whether a consent dialog is needed for the Scope
         */
        consent: string;
        /**
         * Whether the Scope is a default Scope
         */
        default: boolean;
        /**
         * Description of the Scope
         */
        description: string;
        /**
         * Name of the end user displayed in a consent dialog box
         */
        displayName: string;
        /**
         * ID of the Scope
         */
        id: string;
        /**
         * Whether the Scope should be included in the metadata
         */
        metadataPublish: string;
        /**
         * Name of the Scope
         */
        name: string;
        /**
         * Whether the Scope is optional
         */
        optional: boolean;
        /**
         * Whether Okta created the Scope
         */
        system: boolean;
    }

}

export namespace inline {
    export interface HookHeader {
        key?: string;
        value?: string;
    }

}

export namespace policy {
    export interface RuleIdpDiscoveryAppExclude {
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleIdpDiscoveryAppInclude {
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        /**
         * Only available with OTHER OS type
         */
        osExpression?: string;
        osType?: string;
        type?: string;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        matchType?: string;
        value?: string;
    }

    export interface RuleMfaAppExclude {
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleMfaAppInclude {
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleSignonFactorSequence {
        /**
         * Type of a Factor
         */
        primaryCriteriaFactorType: string;
        /**
         * Factor provider
         */
        primaryCriteriaProvider: string;
        secondaryCriterias?: outputs.policy.RuleSignonFactorSequenceSecondaryCriteria[];
    }

    export interface RuleSignonFactorSequenceSecondaryCriteria {
        /**
         * Type of a Factor
         */
        factorType: string;
        /**
         * Factor provider
         */
        provider: string;
    }

}

export namespace profile {
    export interface MappingMapping {
        expression: string;
        /**
         * The mapping property key.
         */
        id: string;
        pushStatus?: string;
    }

}

export namespace user {
    export interface GetUserSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUsersSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUsersUser {
        adminRoles: string[];
        city: string;
        costCenter: string;
        countryCode: string;
        customProfileAttributes: string;
        department: string;
        displayName: string;
        division: string;
        email: string;
        employeeNumber: string;
        firstName: string;
        groupMemberships: string[];
        honorificPrefix: string;
        honorificSuffix: string;
        id: string;
        lastName: string;
        locale: string;
        login: string;
        manager: string;
        managerId: string;
        middleName: string;
        mobilePhone: string;
        nickName: string;
        organization: string;
        postalAddress: string;
        preferredLanguage: string;
        primaryPhone: string;
        profileUrl: string;
        roles: string[];
        secondEmail: string;
        state: string;
        status: string;
        streetAddress: string;
        timezone: string;
        title: string;
        userType: string;
        zipCode: string;
    }

    export interface UserPasswordHash {
        /**
         * The algorithm used to generate the hash using the password
         */
        algorithm: string;
        /**
         * Only required for salted hashes
         */
        salt?: string;
        /**
         * Specifies whether salt was pre- or postfixed to the password before hashing
         */
        saltOrder?: string;
        /**
         * For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         */
        value: string;
        /**
         * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
         */
        workFactor?: number;
    }

}
