// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AppGroupAssignmentsGroup {
    /**
     * ID of the group to assign.
     */
    id: string;
    /**
     * Priority of group assignment
     */
    priority?: number;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile: string;
}

export interface AppSharedCredentialsUser {
    /**
     * ID of an app.
     */
    id?: string;
    password?: string;
    scope: string;
    username?: string;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: string;
    /**
     * display name for the enum value.
     */
    title: string;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: string;
    /**
     * display name for the enum value.
     */
    title: string;
}

export interface DomainDnsRecord {
    /**
     * TXT record expiration.
     */
    expiration: string;
    /**
     * DNS record name.
     */
    fqdn: string;
    /**
     * Record type can be TXT or CNAME.
     */
    recordType: string;
    /**
     * DNS verification value
     */
    values: string[];
}

export interface EventHookHeader {
    /**
     * Key to use for authentication, usually the header name, for example `"Authorization"`.
     */
    key?: string;
    /**
     * Authentication secret.
     */
    value?: string;
}

export interface GetBehavioursBehavior {
    /**
     * Behavior ID.
     */
    id: string;
    /**
     * Behavior name.
     */
    name: string;
    /**
     * Map of behavior settings.
     */
    settings: {[key: string]: string};
    /**
     * Behavior status.
     */
    status: string;
    /**
     * Behavior type.
     */
    type: string;
}

export interface GetGroupsGroup {
    /**
     * Group description.
     */
    description: string;
    /**
     * Group ID.
     */
    id: string;
    /**
     * Group name.
     */
    name: string;
    /**
     * type of the group to retrieve. Can only be one of `OKTA_GROUP` (Native Okta Groups), `APP_GROUP`
     * (Imported App Groups), or `BUILT_IN` (Okta System Groups).
     */
    type: string;
}

export interface GetUserSecurityQuestionsQuestion {
    /**
     * Security question unique key.
     */
    key: string;
    /**
     * Display text for security question.
     */
    text: string;
}

export interface TemplateSmsTranslation {
    /**
     * The language to map the template to.
     */
    language: string;
    /**
     * The SMS message.
     */
    template: string;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: string;
    /**
     * display name for the enum value.
     */
    title: string;
}

export interface UserSchemaPropertyMasterOverridePriority {
    /**
     * - Type of profile source.
     */
    type?: string;
    /**
     * - ID of profile source.
     */
    value: string;
}

export interface UserSchemaPropertyOneOf {
    /**
     * value mapping to member of `enum`.
     */
    const: string;
    /**
     * display name for the enum value.
     */
    title: string;
}

export namespace app {
    export interface AutoLoginUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface BasicAuthUser {
        /**
         * ID of the Application.
         */
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface BookmarkUser {
        /**
         * ID of the Application.
         */
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface GetSamlAttributeStatement {
        /**
         * Type of group attribute filter.
         */
        filterType: string;
        /**
         * Filter value to use.
         */
        filterValue: string;
        /**
         * The name of the attribute statement.
         */
        name: string;
        /**
         * The attribute namespace.
         */
        namespace: string;
        /**
         * The type of attribute statement value.
         */
        type: string;
        /**
         * Array of values to use.
         */
        values: string[];
    }

    export interface OAuthGroupsClaim {
        /**
         * Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
         */
        filterType?: string;
        /**
         * Name of the claim that will be used in the token.
         */
        name: string;
        /**
         * Groups claim type. Valid values: `"FILTER"`, `"EXPRESSION"`.
         */
        type: string;
        /**
         * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         */
        value: string;
    }

    export interface OAuthJwk {
        e?: string;
        kid: string;
        kty: string;
        n?: string;
    }

    export interface OAuthUser {
        /**
         * ID of the application.
         */
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter. Valid values are: `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, or `"REGEX"`
         */
        filterType?: string;
        /**
         * Filter value to use.
         */
        filterValue?: string;
        /**
         * The name of the attribute statement.
         */
        name: string;
        /**
         * The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
         */
        namespace?: string;
        /**
         * The type of attribute statement value. Valid values are: `"EXPRESSION"` or `"GROUP"`. Default is `"EXPRESSION"`.
         */
        type?: string;
        /**
         * Array of values to use.
         */
        values?: string[];
    }

    export interface SamlUser {
        /**
         * id of application.
         */
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SecurePasswordStoreUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SwaUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface ThreeFieldUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface UserSchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: string;
        /**
         * display name for the enum value.
         */
        title: string;
    }

    export interface UserSchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: string;
        /**
         * display name for the enum value.
         */
        title: string;
    }

}

export namespace auth {
    export interface GetServerScopesScope {
        /**
         * Indicates whether a consent dialog is needed for the Scope
         */
        consent: string;
        /**
         * Whether the Scope is a default Scope
         */
        default: boolean;
        /**
         * Description of the Scope
         */
        description: string;
        /**
         * Name of the end user displayed in a consent dialog box
         */
        displayName: string;
        /**
         * ID of the Scope
         */
        id: string;
        /**
         * Whether the Scope should be included in the metadata
         */
        metadataPublish: string;
        /**
         * Name of the Scope
         */
        name: string;
        /**
         * Whether Okta created the Scope
         */
        system: boolean;
    }

}

export namespace deprecated {
    export interface AuthLoginAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface BookmarkAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface OauthAppGroupsClaim {
        filterType?: string;
        name: string;
        type: string;
        value: string;
    }

    export interface OauthAppJwk {
        e?: string;
        kid: string;
        kty: string;
        n?: string;
    }

    export interface OauthAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SamlAppAttributeStatement {
        filterType?: string;
        filterValue?: string;
        name: string;
        namespace?: string;
        type?: string;
        values?: string[];
    }

    export interface SamlAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SecurePasswordStoreAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface SignonPolicyRuleFactorSequence {
        primaryCriteriaFactorType: string;
        primaryCriteriaProvider: string;
        secondaryCriterias?: outputs.deprecated.SignonPolicyRuleFactorSequenceSecondaryCriteria[];
    }

    export interface SignonPolicyRuleFactorSequenceSecondaryCriteria {
        factorType: string;
        provider: string;
    }

    export interface SwaAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

    export interface ThreeFieldAppUser {
        id?: string;
        password?: string;
        scope: string;
        username?: string;
    }

}

export namespace inline {
    export interface HookHeader {
        /**
         * Key to use for authentication, usually the header name, for example `"Authorization"`.
         */
        key?: string;
        /**
         * Authentication secret.
         */
        value?: string;
    }

}

export namespace policy {
    export interface RuleIdpDiscoveryAppExclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: string;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: string;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type: string;
    }

    export interface RuleIdpDiscoveryAppInclude {
        /**
         * Use if `type` is `"APP"` to indicate the application id to include.
         */
        id?: string;
        /**
         * Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
         */
        name?: string;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type: string;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        /**
         * Only available when using `osType = "OTHER"`
         */
        osExpression?: string;
        /**
         * One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`
         */
        osType?: string;
        /**
         * One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
         */
        type?: string;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        /**
         * The kind of pattern. For regex, use `"EXPRESSION"`. For simple string matches, use one of the following: `"SUFFIX"`, `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`
         */
        matchType?: string;
        /**
         * The regex or simple match string to match against.
         */
        value?: string;
    }

    export interface RuleSignonFactorSequence {
        /**
         * Primary factor type of the auth section.
         */
        primaryCriteriaFactorType: string;
        /**
         * Primary provider of the auth section.
         */
        primaryCriteriaProvider: string;
        /**
         * Additional authentication steps.
         */
        secondaryCriterias?: outputs.policy.RuleSignonFactorSequenceSecondaryCriteria[];
    }

    export interface RuleSignonFactorSequenceSecondaryCriteria {
        /**
         * Factor type of the additional authentication step.
         */
        factorType: string;
        /**
         * Provider of the additional authentication step.
         */
        provider: string;
    }

}

export namespace profile {
    export interface MappingMapping {
        /**
         * Combination or single source properties that will be mapped to the target property.
         */
        expression: string;
        /**
         * Key of mapping.
         */
        id: string;
        /**
         * Whether to update target properties on user create & update or just on create.
         */
        pushStatus?: string;
    }

}

export namespace template {
    export interface EmailTranslation {
        /**
         * The language to map the template to.
         */
        language: string;
        /**
         * The email subject line.
         */
        subject: string;
        /**
         * The email body.
         */
        template: string;
    }

}

export namespace user {
    export interface GetUserSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface GetUsersSearch {
        /**
         * Comparison to use.
         */
        comparison?: string;
        /**
         * Name of property to search against.
         */
        name: string;
        /**
         * Value to compare with.
         */
        value: string;
    }

    export interface GetUsersUser {
        /**
         * Administrator roles assigned to user.
         */
        adminRoles: string[];
        /**
         * user profile property.
         */
        city: string;
        /**
         * user profile property.
         */
        costCenter: string;
        /**
         * user profile property.
         */
        countryCode: string;
        /**
         * raw JSON containing all custom profile attributes.
         */
        customProfileAttributes: string;
        /**
         * user profile property.
         */
        department: string;
        /**
         * user profile property.
         */
        displayName: string;
        /**
         * user profile property.
         */
        division: string;
        /**
         * user profile property.
         */
        email: string;
        /**
         * user profile property.
         */
        employeeNumber: string;
        /**
         * user profile property.
         */
        firstName: string;
        /**
         * user profile property.
         */
        groupMemberships: string[];
        /**
         * user profile property.
         */
        honorificPrefix: string;
        /**
         * user profile property.
         */
        honorificSuffix: string;
        id: string;
        /**
         * user profile property.
         */
        lastName: string;
        /**
         * user profile property.
         */
        locale: string;
        /**
         * user profile property.
         */
        login: string;
        /**
         * user profile property.
         */
        manager: string;
        /**
         * user profile property.
         */
        managerId: string;
        /**
         * user profile property.
         */
        middleName: string;
        /**
         * user profile property.
         */
        mobilePhone: string;
        /**
         * user profile property.
         */
        nickName: string;
        /**
         * user profile property.
         */
        organization: string;
        /**
         * user profile property.
         */
        postalAddress: string;
        /**
         * user profile property.
         */
        preferredLanguage: string;
        /**
         * user profile property.
         */
        primaryPhone: string;
        /**
         * user profile property.
         */
        profileUrl: string;
        /**
         * user profile property.
         */
        secondEmail: string;
        /**
         * user profile property.
         */
        state: string;
        /**
         * user profile property.
         */
        status: string;
        /**
         * user profile property.
         */
        streetAddress: string;
        /**
         * user profile property.
         */
        timezone: string;
        /**
         * user profile property.
         */
        title: string;
        /**
         * user profile property.
         */
        userType: string;
        /**
         * user profile property.
         */
        zipCode: string;
    }

    export interface SchemaArrayOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: string;
        /**
         * display name for the enum value.
         */
        title: string;
    }

    export interface SchemaMasterOverridePriority {
        /**
         * - Type of profile source.
         */
        type?: string;
        /**
         * - ID of profile source.
         */
        value: string;
    }

    export interface SchemaOneOf {
        /**
         * value mapping to member of `enum`.
         */
        const: string;
        /**
         * display name for the enum value.
         */
        title: string;
    }

    export interface UserPasswordHash {
        algorithm: string;
        /**
         * Only required for salted hashes. For BCRYPT, this specifies the radix64-encoded salt used to generate 
         * the hash, which must be 22 characters long. For other salted hashes, this specifies the base64-encoded salt used to generate the hash.
         */
        salt?: string;
        /**
         * Specifies whether salt was pre- or postfixed to the password before hashing. Only required for salted algorithms.
         */
        saltOrder?: string;
        /**
         * . 
         * This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing
         * the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be
         * the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         */
        value: string;
        /**
         * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm. Minimum value is 1, and maximum is 20.
         */
        workFactor?: number;
    }

}
