// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppGroupAssignmentsGroup {
    /**
     * A group to associate with the application
     */
    id: string;
    /**
     * Priority of group assignment
     */
    priority?: number;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile: string;
}

export interface AppSignonPolicyRulePlatformInclude {
    /**
     * Only available with OTHER OS type
     */
    osExpression?: string;
    osType?: string;
    type?: string;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface DomainDnsRecord {
    expiration: string;
    fqdn: string;
    recordType: string;
    values: string[];
}

export interface EmailSenderDnsRecord {
    fqdn: string;
    recordType: string;
    value: string;
}

export interface EventHookHeader {
    key?: string;
    value?: string;
}

export interface GetAuthServerClaimsClaim {
    alwaysIncludeInToken: boolean;
    claimType: string;
    id: string;
    name: string;
    scopes: string[];
    status: string;
    value: string;
    valueType: string;
}

export interface GetBehavioursBehavior {
    id: string;
    name: string;
    settings: {[key: string]: string};
    status: string;
    type: string;
}

export interface GetBrandsBrand {
    customPrivacyPolicyUrl: string;
    id: string;
    links: string;
    name: string;
    removePoweredByOkta: boolean;
}

export interface GetEmailCustomizationsEmailCustomization {
    body: string;
    id: string;
    isDefault: boolean;
    language: string;
    links: string;
    subject: string;
}

export interface GetGroupsGroup {
    customProfileAttributes: string;
    description: string;
    id: string;
    name: string;
    type: string;
}

export interface GetTemplatesEmailTemplate {
    links: string;
    name: string;
}

export interface GetThemesTheme {
    backgroundImageUrl: string;
    emailTemplateTouchPointVariant: string;
    endUserDashboardTouchPointVariant: string;
    errorPageTouchPointVariant: string;
    faviconUrl: string;
    id: string;
    links: string;
    logoUrl: string;
    primaryColorContrastHex: string;
    primaryColorHex: string;
    secondaryColorContrastHex: string;
    secondaryColorHex: string;
    signInPageTouchPointVariant: string;
}

export interface GetTrustedOriginsTrustedOrigin {
    active: boolean;
    id: string;
    name: string;
    origin: string;
    scopes: string[];
}

export interface GetUserSecurityQuestionsQuestion {
    key: string;
    text: string;
}

export interface GroupSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface GroupSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface GroupSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface PolicyRuleProfileEnrollmentProfileAttribute {
    /**
     * A display-friendly label for this property
     */
    label: string;
    /**
     * The name of a User Profile property
     */
    name: string;
    /**
     * Indicates if this property is required for enrollment
     */
    required?: boolean;
}

export interface TemplateSmsTranslation {
    language: string;
    template: string;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface UserSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface UserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export namespace Index {
    export interface EmailDomainDnsValidationRecord {
        /**
         * @deprecated This field has been removed in the newest go sdk version and has become noop
         */
        expiration: string;
        fqdn: string;
        recordType: string;
        value: string;
    }

    export interface GetDomainDnsRecord {
        expiration: string;
        fqdn: string;
        recordType: string;
        values: string[];
    }

}

export namespace app {
    export interface GetSamlAttributeStatement {
        filterType: string;
        filterValue: string;
        name: string;
        namespace: string;
        type: string;
        values: string[];
    }

    export interface OAuthGroupsClaim {
        /**
         * Groups claim filter. Can only be set if type is FILTER.
         */
        filterType?: string;
        /**
         * Issuer mode inherited from OAuth App
         */
        issuerMode: string;
        /**
         * Name of the claim that will be used in the token.
         */
        name: string;
        /**
         * Groups claim type.
         */
        type: string;
        /**
         * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         */
        value: string;
    }

    export interface OAuthJwk {
        /**
         * RSA Exponent
         */
        e?: string;
        /**
         * Key ID
         */
        kid: string;
        /**
         * Key type
         */
        kty: string;
        /**
         * RSA Modulus
         */
        n?: string;
        x?: string;
        y?: string;
    }

    export interface SamlAttributeStatement {
        /**
         * Type of group attribute filter
         */
        filterType?: string;
        /**
         * Filter value to use
         */
        filterValue?: string;
        /**
         * The reference name of the attribute statement
         */
        name: string;
        /**
         * The name format of the attribute
         */
        namespace?: string;
        /**
         * The type of attribute statements object
         */
        type?: string;
        values?: string[];
    }

    export interface SamlKey {
        created: string;
        e: string;
        expiresAt: string;
        kid: string;
        kty: string;
        lastUpdated: string;
        n: string;
        use: string;
        x5cs: string[];
        x5tS256: string;
    }

}

export namespace auth {
    export interface GetServerScopesScope {
        consent: string;
        default: boolean;
        description: string;
        displayName: string;
        id: string;
        metadataPublish: string;
        name: string;
        optional: boolean;
        system: boolean;
    }

}

export namespace inline {
    export interface HookHeader {
        key?: string;
        value?: string;
    }

}

export namespace policy {
    export interface RuleIdpDiscoveryAppExclude {
        /**
         * The ID of this resource.
         */
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleIdpDiscoveryAppInclude {
        /**
         * The ID of this resource.
         */
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleIdpDiscoveryPlatformInclude {
        /**
         * Only available with OTHER OS type
         */
        osExpression?: string;
        osType?: string;
        type?: string;
    }

    export interface RuleIdpDiscoveryUserIdentifierPattern {
        matchType?: string;
        value?: string;
    }

    export interface RuleMfaAppExclude {
        /**
         * The ID of this resource.
         */
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleMfaAppInclude {
        /**
         * The ID of this resource.
         */
        id?: string;
        name?: string;
        type: string;
    }

    export interface RuleSignonFactorSequence {
        /**
         * Type of a Factor
         */
        primaryCriteriaFactorType: string;
        /**
         * Factor provider
         */
        primaryCriteriaProvider: string;
        secondaryCriterias?: outputs.policy.RuleSignonFactorSequenceSecondaryCriteria[];
    }

    export interface RuleSignonFactorSequenceSecondaryCriteria {
        /**
         * Type of a Factor
         */
        factorType: string;
        /**
         * Factor provider
         */
        provider: string;
    }

}

export namespace profile {
    export interface MappingMapping {
        expression: string;
        /**
         * The mapping property key.
         */
        id: string;
        pushStatus?: string;
    }

}

export namespace user {
    export interface GetUserSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUsersSearch {
        comparison?: string;
        /**
         * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        expression?: string;
        /**
         * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
         */
        name?: string;
        value?: string;
    }

    export interface GetUsersUser {
        adminRoles: string[];
        city: string;
        costCenter: string;
        countryCode: string;
        customProfileAttributes: string;
        department: string;
        displayName: string;
        division: string;
        email: string;
        employeeNumber: string;
        firstName: string;
        groupMemberships: string[];
        honorificPrefix: string;
        honorificSuffix: string;
        id: string;
        lastName: string;
        locale: string;
        login: string;
        manager: string;
        managerId: string;
        middleName: string;
        mobilePhone: string;
        nickName: string;
        organization: string;
        postalAddress: string;
        preferredLanguage: string;
        primaryPhone: string;
        profileUrl: string;
        roles: string[];
        secondEmail: string;
        state: string;
        status: string;
        streetAddress: string;
        timezone: string;
        title: string;
        userType: string;
        zipCode: string;
    }

    export interface UserPasswordHash {
        /**
         * The algorithm used to generate the hash using the password
         */
        algorithm: string;
        /**
         * Only required for salted hashes
         */
        salt?: string;
        /**
         * Specifies whether salt was pre- or postfixed to the password before hashing
         */
        saltOrder?: string;
        /**
         * For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         */
        value: string;
        /**
         * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
         */
        workFactor?: number;
    }

}
