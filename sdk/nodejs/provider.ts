// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the okta package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'okta';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Bearer token granting privileges to Okta API.
     */
    declare public readonly accessToken: pulumi.Output<string | undefined>;
    /**
     * API Token granting privileges to Okta API.
     */
    declare public readonly apiToken: pulumi.Output<string | undefined>;
    /**
     * The Okta url. (Use 'oktapreview.com' for Okta testing)
     */
    declare public readonly baseUrl: pulumi.Output<string | undefined>;
    /**
     * API Token granting privileges to Okta API.
     */
    declare public readonly clientId: pulumi.Output<string | undefined>;
    /**
     * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
     */
    declare public readonly httpProxy: pulumi.Output<string | undefined>;
    /**
     * The organization to manage in Okta.
     */
    declare public readonly orgName: pulumi.Output<string | undefined>;
    /**
     * API Token granting privileges to Okta API.
     */
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * API Token Id granting privileges to Okta API.
     */
    declare public readonly privateKeyId: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["apiToken"] = args?.apiToken ? pulumi.secret(args.apiToken) : undefined;
            resourceInputs["backoff"] = pulumi.output(args?.backoff).apply(JSON.stringify);
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["httpProxy"] = args?.httpProxy;
            resourceInputs["logLevel"] = pulumi.output(args?.logLevel).apply(JSON.stringify);
            resourceInputs["maxApiCapacity"] = pulumi.output(args?.maxApiCapacity).apply(JSON.stringify);
            resourceInputs["maxRetries"] = pulumi.output(args?.maxRetries).apply(JSON.stringify);
            resourceInputs["maxWaitSeconds"] = pulumi.output(args?.maxWaitSeconds).apply(JSON.stringify);
            resourceInputs["minWaitSeconds"] = pulumi.output(args?.minWaitSeconds).apply(JSON.stringify);
            resourceInputs["orgName"] = args?.orgName;
            resourceInputs["parallelism"] = pulumi.output(args?.parallelism).apply(JSON.stringify);
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyId"] = args?.privateKeyId;
            resourceInputs["requestTimeout"] = pulumi.output(args?.requestTimeout).apply(JSON.stringify);
            resourceInputs["scopes"] = pulumi.output(args?.scopes).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "apiToken", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:okta/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Bearer token granting privileges to Okta API.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * API Token granting privileges to Okta API.
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Use exponential back off strategy for rate limits.
     */
    backoff?: pulumi.Input<boolean>;
    /**
     * The Okta url. (Use 'oktapreview.com' for Okta testing)
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * API Token granting privileges to Okta API.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
     */
    httpProxy?: pulumi.Input<string>;
    /**
     * providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
     */
    logLevel?: pulumi.Input<number>;
    /**
     * Sets what percentage of capacity the provider can use of the total rate limit capacity while making calls to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits: https://developer.okta.com/docs/reference/rl-global-mgmt/
     */
    maxApiCapacity?: pulumi.Input<number>;
    /**
     * maximum number of retries to attempt before erroring out.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     */
    maxWaitSeconds?: pulumi.Input<number>;
    /**
     * minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     */
    minWaitSeconds?: pulumi.Input<number>;
    /**
     * The organization to manage in Okta.
     */
    orgName?: pulumi.Input<string>;
    /**
     * Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of https://developer.okta.com/docs/api/getting_started/rate-limits.
     */
    parallelism?: pulumi.Input<number>;
    /**
     * API Token granting privileges to Okta API.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * API Token Id granting privileges to Okta API.
     */
    privateKeyId?: pulumi.Input<string>;
    /**
     * Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum value can be `300`.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * API Token granting privileges to Okta API.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
