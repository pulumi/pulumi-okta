// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./adminRoleTargets";
export * from "./eventHook";
export * from "./provider";
export * from "./templateSms";

// Export sub-modules:
import * as app from "./app";
import * as auth from "./auth";
import * as config from "./config";
import * as deprecated from "./deprecated";
import * as factor from "./factor";
import * as group from "./group";
import * as idp from "./idp";
import * as inline from "./inline";
import * as network from "./network";
import * as policy from "./policy";
import * as profile from "./profile";
import * as template from "./template";
import * as trustedorigin from "./trustedorigin";
import * as types from "./types";
import * as user from "./user";

export {
    app,
    auth,
    config,
    deprecated,
    factor,
    group,
    idp,
    inline,
    network,
    policy,
    profile,
    template,
    trustedorigin,
    types,
    user,
};

// Import resources to register:
import { AdminRoleTargets } from "./adminRoleTargets";
import { EventHook } from "./eventHook";
import { TemplateSms } from "./templateSms";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:index/adminRoleTargets:AdminRoleTargets":
                return new AdminRoleTargets(name, <any>undefined, { urn })
            case "okta:index/eventHook:EventHook":
                return new EventHook(name, <any>undefined, { urn })
            case "okta:index/templateSms:TemplateSms":
                return new TemplateSms(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "index/adminRoleTargets", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHook", _module)
pulumi.runtime.registerResourceModule("okta", "index/templateSms", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("okta", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:okta") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
