// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./adminRoleCustom";
export * from "./adminRoleCustomAssignments";
export * from "./adminRoleTargets";
export * from "./appGroupAssignments";
export * from "./appOauthApiScope";
export * from "./appSamlAppSettings";
export * from "./appSharedCredentials";
export * from "./appSignonPolicyRule";
export * from "./appUserBaseSchemaProperty";
export * from "./appUserSchemaProperty";
export * from "./authServerClaimDefault";
export * from "./authServerDefault";
export * from "./authenticator";
export * from "./behaviour";
export * from "./captcha";
export * from "./captchaOrgWideSettings";
export * from "./domain";
export * from "./domainCertificate";
export * from "./domainVerification";
export * from "./emailSender";
export * from "./emailSenderVerification";
export * from "./eventHook";
export * from "./eventHookVerification";
export * from "./factorTotp";
export * from "./getAppGroupAssignments";
export * from "./getAppSignonPolicy";
export * from "./getAppUserAssignments";
export * from "./getAuthServerClaim";
export * from "./getAuthServerClaims";
export * from "./getAuthenticator";
export * from "./getBehaviour";
export * from "./getBehaviours";
export * from "./getGroups";
export * from "./getNetworkZone";
export * from "./getRoleSubscription";
export * from "./getTrustedOrigins";
export * from "./getUserSecurityQuestions";
export * from "./groupMemberships";
export * from "./groupSchemaProperty";
export * from "./linkDefinition";
export * from "./linkValue";
export * from "./orgConfiguration";
export * from "./orgSupport";
export * from "./policyMfaDefault";
export * from "./policyPasswordDefault";
export * from "./policyProfileEnrollment";
export * from "./policyProfileEnrollmentApps";
export * from "./policyRuleProfileEnrollment";
export * from "./provider";
export * from "./rateLimiting";
export * from "./resourceSet";
export * from "./roleSubscription";
export * from "./securityNotificationEmails";
export * from "./templateSms";
export * from "./threatInsightSettings";
export * from "./userAdminRoles";
export * from "./userBaseSchemaProperty";
export * from "./userFactorQuestion";
export * from "./userGroupMemberships";
export * from "./userSchemaProperty";

// Export sub-modules:
import * as app from "./app";
import * as auth from "./auth";
import * as config from "./config";
import * as deprecated from "./deprecated";
import * as factor from "./factor";
import * as group from "./group";
import * as idp from "./idp";
import * as inline from "./inline";
import * as network from "./network";
import * as policy from "./policy";
import * as profile from "./profile";
import * as template from "./template";
import * as trustedorigin from "./trustedorigin";
import * as types from "./types";
import * as user from "./user";

export {
    app,
    auth,
    config,
    deprecated,
    factor,
    group,
    idp,
    inline,
    network,
    policy,
    profile,
    template,
    trustedorigin,
    types,
    user,
};

// Import resources to register:
import { AdminRoleCustom } from "./adminRoleCustom";
import { AdminRoleCustomAssignments } from "./adminRoleCustomAssignments";
import { AdminRoleTargets } from "./adminRoleTargets";
import { AppGroupAssignments } from "./appGroupAssignments";
import { AppOauthApiScope } from "./appOauthApiScope";
import { AppSamlAppSettings } from "./appSamlAppSettings";
import { AppSharedCredentials } from "./appSharedCredentials";
import { AppSignonPolicyRule } from "./appSignonPolicyRule";
import { AppUserBaseSchemaProperty } from "./appUserBaseSchemaProperty";
import { AppUserSchemaProperty } from "./appUserSchemaProperty";
import { AuthServerClaimDefault } from "./authServerClaimDefault";
import { AuthServerDefault } from "./authServerDefault";
import { Authenticator } from "./authenticator";
import { Behaviour } from "./behaviour";
import { Captcha } from "./captcha";
import { CaptchaOrgWideSettings } from "./captchaOrgWideSettings";
import { Domain } from "./domain";
import { DomainCertificate } from "./domainCertificate";
import { DomainVerification } from "./domainVerification";
import { EmailSender } from "./emailSender";
import { EmailSenderVerification } from "./emailSenderVerification";
import { EventHook } from "./eventHook";
import { EventHookVerification } from "./eventHookVerification";
import { FactorTotp } from "./factorTotp";
import { GroupMemberships } from "./groupMemberships";
import { GroupSchemaProperty } from "./groupSchemaProperty";
import { LinkDefinition } from "./linkDefinition";
import { LinkValue } from "./linkValue";
import { OrgConfiguration } from "./orgConfiguration";
import { OrgSupport } from "./orgSupport";
import { PolicyMfaDefault } from "./policyMfaDefault";
import { PolicyPasswordDefault } from "./policyPasswordDefault";
import { PolicyProfileEnrollment } from "./policyProfileEnrollment";
import { PolicyProfileEnrollmentApps } from "./policyProfileEnrollmentApps";
import { PolicyRuleProfileEnrollment } from "./policyRuleProfileEnrollment";
import { RateLimiting } from "./rateLimiting";
import { ResourceSet } from "./resourceSet";
import { RoleSubscription } from "./roleSubscription";
import { SecurityNotificationEmails } from "./securityNotificationEmails";
import { TemplateSms } from "./templateSms";
import { ThreatInsightSettings } from "./threatInsightSettings";
import { UserAdminRoles } from "./userAdminRoles";
import { UserBaseSchemaProperty } from "./userBaseSchemaProperty";
import { UserFactorQuestion } from "./userFactorQuestion";
import { UserGroupMemberships } from "./userGroupMemberships";
import { UserSchemaProperty } from "./userSchemaProperty";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:index/adminRoleCustom:AdminRoleCustom":
                return new AdminRoleCustom(name, <any>undefined, { urn })
            case "okta:index/adminRoleCustomAssignments:AdminRoleCustomAssignments":
                return new AdminRoleCustomAssignments(name, <any>undefined, { urn })
            case "okta:index/adminRoleTargets:AdminRoleTargets":
                return new AdminRoleTargets(name, <any>undefined, { urn })
            case "okta:index/appGroupAssignments:AppGroupAssignments":
                return new AppGroupAssignments(name, <any>undefined, { urn })
            case "okta:index/appOauthApiScope:AppOauthApiScope":
                return new AppOauthApiScope(name, <any>undefined, { urn })
            case "okta:index/appSamlAppSettings:AppSamlAppSettings":
                return new AppSamlAppSettings(name, <any>undefined, { urn })
            case "okta:index/appSharedCredentials:AppSharedCredentials":
                return new AppSharedCredentials(name, <any>undefined, { urn })
            case "okta:index/appSignonPolicyRule:AppSignonPolicyRule":
                return new AppSignonPolicyRule(name, <any>undefined, { urn })
            case "okta:index/appUserBaseSchemaProperty:AppUserBaseSchemaProperty":
                return new AppUserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/appUserSchemaProperty:AppUserSchemaProperty":
                return new AppUserSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/authServerClaimDefault:AuthServerClaimDefault":
                return new AuthServerClaimDefault(name, <any>undefined, { urn })
            case "okta:index/authServerDefault:AuthServerDefault":
                return new AuthServerDefault(name, <any>undefined, { urn })
            case "okta:index/authenticator:Authenticator":
                return new Authenticator(name, <any>undefined, { urn })
            case "okta:index/behaviour:Behaviour":
                return new Behaviour(name, <any>undefined, { urn })
            case "okta:index/captcha:Captcha":
                return new Captcha(name, <any>undefined, { urn })
            case "okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings":
                return new CaptchaOrgWideSettings(name, <any>undefined, { urn })
            case "okta:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "okta:index/domainCertificate:DomainCertificate":
                return new DomainCertificate(name, <any>undefined, { urn })
            case "okta:index/domainVerification:DomainVerification":
                return new DomainVerification(name, <any>undefined, { urn })
            case "okta:index/emailSender:EmailSender":
                return new EmailSender(name, <any>undefined, { urn })
            case "okta:index/emailSenderVerification:EmailSenderVerification":
                return new EmailSenderVerification(name, <any>undefined, { urn })
            case "okta:index/eventHook:EventHook":
                return new EventHook(name, <any>undefined, { urn })
            case "okta:index/eventHookVerification:EventHookVerification":
                return new EventHookVerification(name, <any>undefined, { urn })
            case "okta:index/factorTotp:FactorTotp":
                return new FactorTotp(name, <any>undefined, { urn })
            case "okta:index/groupMemberships:GroupMemberships":
                return new GroupMemberships(name, <any>undefined, { urn })
            case "okta:index/groupSchemaProperty:GroupSchemaProperty":
                return new GroupSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/linkDefinition:LinkDefinition":
                return new LinkDefinition(name, <any>undefined, { urn })
            case "okta:index/linkValue:LinkValue":
                return new LinkValue(name, <any>undefined, { urn })
            case "okta:index/orgConfiguration:OrgConfiguration":
                return new OrgConfiguration(name, <any>undefined, { urn })
            case "okta:index/orgSupport:OrgSupport":
                return new OrgSupport(name, <any>undefined, { urn })
            case "okta:index/policyMfaDefault:PolicyMfaDefault":
                return new PolicyMfaDefault(name, <any>undefined, { urn })
            case "okta:index/policyPasswordDefault:PolicyPasswordDefault":
                return new PolicyPasswordDefault(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollment:PolicyProfileEnrollment":
                return new PolicyProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollmentApps:PolicyProfileEnrollmentApps":
                return new PolicyProfileEnrollmentApps(name, <any>undefined, { urn })
            case "okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment":
                return new PolicyRuleProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/rateLimiting:RateLimiting":
                return new RateLimiting(name, <any>undefined, { urn })
            case "okta:index/resourceSet:ResourceSet":
                return new ResourceSet(name, <any>undefined, { urn })
            case "okta:index/roleSubscription:RoleSubscription":
                return new RoleSubscription(name, <any>undefined, { urn })
            case "okta:index/securityNotificationEmails:SecurityNotificationEmails":
                return new SecurityNotificationEmails(name, <any>undefined, { urn })
            case "okta:index/templateSms:TemplateSms":
                return new TemplateSms(name, <any>undefined, { urn })
            case "okta:index/threatInsightSettings:ThreatInsightSettings":
                return new ThreatInsightSettings(name, <any>undefined, { urn })
            case "okta:index/userAdminRoles:UserAdminRoles":
                return new UserAdminRoles(name, <any>undefined, { urn })
            case "okta:index/userBaseSchemaProperty:UserBaseSchemaProperty":
                return new UserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/userFactorQuestion:UserFactorQuestion":
                return new UserFactorQuestion(name, <any>undefined, { urn })
            case "okta:index/userGroupMemberships:UserGroupMemberships":
                return new UserGroupMemberships(name, <any>undefined, { urn })
            case "okta:index/userSchemaProperty:UserSchemaProperty":
                return new UserSchemaProperty(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustom", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustomAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleTargets", _module)
pulumi.runtime.registerResourceModule("okta", "index/appGroupAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthApiScope", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSamlAppSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSharedCredentials", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSignonPolicyRule", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerClaimDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authenticator", _module)
pulumi.runtime.registerResourceModule("okta", "index/behaviour", _module)
pulumi.runtime.registerResourceModule("okta", "index/captcha", _module)
pulumi.runtime.registerResourceModule("okta", "index/captchaOrgWideSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/domain", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainCertificate", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSender", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSenderVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHook", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHookVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/factorTotp", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkDefinition", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkValue", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgConfiguration", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgSupport", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyMfaDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyPasswordDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollmentApps", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/rateLimiting", _module)
pulumi.runtime.registerResourceModule("okta", "index/resourceSet", _module)
pulumi.runtime.registerResourceModule("okta", "index/roleSubscription", _module)
pulumi.runtime.registerResourceModule("okta", "index/securityNotificationEmails", _module)
pulumi.runtime.registerResourceModule("okta", "index/templateSms", _module)
pulumi.runtime.registerResourceModule("okta", "index/threatInsightSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/userAdminRoles", _module)
pulumi.runtime.registerResourceModule("okta", "index/userBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/userFactorQuestion", _module)
pulumi.runtime.registerResourceModule("okta", "index/userGroupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/userSchemaProperty", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("okta", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:okta") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
