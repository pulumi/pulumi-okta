// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdminRoleCustomArgs, AdminRoleCustomState } from "./adminRoleCustom";
export type AdminRoleCustom = import("./adminRoleCustom").AdminRoleCustom;
export const AdminRoleCustom: typeof import("./adminRoleCustom").AdminRoleCustom = null as any;
utilities.lazyLoad(exports, ["AdminRoleCustom"], () => require("./adminRoleCustom"));

export { AdminRoleCustomAssignmentsArgs, AdminRoleCustomAssignmentsState } from "./adminRoleCustomAssignments";
export type AdminRoleCustomAssignments = import("./adminRoleCustomAssignments").AdminRoleCustomAssignments;
export const AdminRoleCustomAssignments: typeof import("./adminRoleCustomAssignments").AdminRoleCustomAssignments = null as any;
utilities.lazyLoad(exports, ["AdminRoleCustomAssignments"], () => require("./adminRoleCustomAssignments"));

export { AdminRoleTargetsArgs, AdminRoleTargetsState } from "./adminRoleTargets";
export type AdminRoleTargets = import("./adminRoleTargets").AdminRoleTargets;
export const AdminRoleTargets: typeof import("./adminRoleTargets").AdminRoleTargets = null as any;
utilities.lazyLoad(exports, ["AdminRoleTargets"], () => require("./adminRoleTargets"));

export { AppGroupAssignmentsArgs, AppGroupAssignmentsState } from "./appGroupAssignments";
export type AppGroupAssignments = import("./appGroupAssignments").AppGroupAssignments;
export const AppGroupAssignments: typeof import("./appGroupAssignments").AppGroupAssignments = null as any;
utilities.lazyLoad(exports, ["AppGroupAssignments"], () => require("./appGroupAssignments"));

export { AppOauthApiScopeArgs, AppOauthApiScopeState } from "./appOauthApiScope";
export type AppOauthApiScope = import("./appOauthApiScope").AppOauthApiScope;
export const AppOauthApiScope: typeof import("./appOauthApiScope").AppOauthApiScope = null as any;
utilities.lazyLoad(exports, ["AppOauthApiScope"], () => require("./appOauthApiScope"));

export { AppSamlAppSettingsArgs, AppSamlAppSettingsState } from "./appSamlAppSettings";
export type AppSamlAppSettings = import("./appSamlAppSettings").AppSamlAppSettings;
export const AppSamlAppSettings: typeof import("./appSamlAppSettings").AppSamlAppSettings = null as any;
utilities.lazyLoad(exports, ["AppSamlAppSettings"], () => require("./appSamlAppSettings"));

export { AppSharedCredentialsArgs, AppSharedCredentialsState } from "./appSharedCredentials";
export type AppSharedCredentials = import("./appSharedCredentials").AppSharedCredentials;
export const AppSharedCredentials: typeof import("./appSharedCredentials").AppSharedCredentials = null as any;
utilities.lazyLoad(exports, ["AppSharedCredentials"], () => require("./appSharedCredentials"));

export { AppSignonPolicyArgs, AppSignonPolicyState } from "./appSignonPolicy";
export type AppSignonPolicy = import("./appSignonPolicy").AppSignonPolicy;
export const AppSignonPolicy: typeof import("./appSignonPolicy").AppSignonPolicy = null as any;
utilities.lazyLoad(exports, ["AppSignonPolicy"], () => require("./appSignonPolicy"));

export { AppSignonPolicyRuleArgs, AppSignonPolicyRuleState } from "./appSignonPolicyRule";
export type AppSignonPolicyRule = import("./appSignonPolicyRule").AppSignonPolicyRule;
export const AppSignonPolicyRule: typeof import("./appSignonPolicyRule").AppSignonPolicyRule = null as any;
utilities.lazyLoad(exports, ["AppSignonPolicyRule"], () => require("./appSignonPolicyRule"));

export { AppUserBaseSchemaPropertyArgs, AppUserBaseSchemaPropertyState } from "./appUserBaseSchemaProperty";
export type AppUserBaseSchemaProperty = import("./appUserBaseSchemaProperty").AppUserBaseSchemaProperty;
export const AppUserBaseSchemaProperty: typeof import("./appUserBaseSchemaProperty").AppUserBaseSchemaProperty = null as any;
utilities.lazyLoad(exports, ["AppUserBaseSchemaProperty"], () => require("./appUserBaseSchemaProperty"));

export { AppUserSchemaPropertyArgs, AppUserSchemaPropertyState } from "./appUserSchemaProperty";
export type AppUserSchemaProperty = import("./appUserSchemaProperty").AppUserSchemaProperty;
export const AppUserSchemaProperty: typeof import("./appUserSchemaProperty").AppUserSchemaProperty = null as any;
utilities.lazyLoad(exports, ["AppUserSchemaProperty"], () => require("./appUserSchemaProperty"));

export { AuthServerClaimDefaultArgs, AuthServerClaimDefaultState } from "./authServerClaimDefault";
export type AuthServerClaimDefault = import("./authServerClaimDefault").AuthServerClaimDefault;
export const AuthServerClaimDefault: typeof import("./authServerClaimDefault").AuthServerClaimDefault = null as any;
utilities.lazyLoad(exports, ["AuthServerClaimDefault"], () => require("./authServerClaimDefault"));

export { AuthServerDefaultArgs, AuthServerDefaultState } from "./authServerDefault";
export type AuthServerDefault = import("./authServerDefault").AuthServerDefault;
export const AuthServerDefault: typeof import("./authServerDefault").AuthServerDefault = null as any;
utilities.lazyLoad(exports, ["AuthServerDefault"], () => require("./authServerDefault"));

export { AuthenticatorArgs, AuthenticatorState } from "./authenticator";
export type Authenticator = import("./authenticator").Authenticator;
export const Authenticator: typeof import("./authenticator").Authenticator = null as any;
utilities.lazyLoad(exports, ["Authenticator"], () => require("./authenticator"));

export { BehaviourArgs, BehaviourState } from "./behaviour";
export type Behaviour = import("./behaviour").Behaviour;
export const Behaviour: typeof import("./behaviour").Behaviour = null as any;
utilities.lazyLoad(exports, ["Behaviour"], () => require("./behaviour"));

export { BrandArgs, BrandState } from "./brand";
export type Brand = import("./brand").Brand;
export const Brand: typeof import("./brand").Brand = null as any;
utilities.lazyLoad(exports, ["Brand"], () => require("./brand"));

export { CaptchaArgs, CaptchaState } from "./captcha";
export type Captcha = import("./captcha").Captcha;
export const Captcha: typeof import("./captcha").Captcha = null as any;
utilities.lazyLoad(exports, ["Captcha"], () => require("./captcha"));

export { CaptchaOrgWideSettingsArgs, CaptchaOrgWideSettingsState } from "./captchaOrgWideSettings";
export type CaptchaOrgWideSettings = import("./captchaOrgWideSettings").CaptchaOrgWideSettings;
export const CaptchaOrgWideSettings: typeof import("./captchaOrgWideSettings").CaptchaOrgWideSettings = null as any;
utilities.lazyLoad(exports, ["CaptchaOrgWideSettings"], () => require("./captchaOrgWideSettings"));

export { CustomizedSigninPageArgs, CustomizedSigninPageState } from "./customizedSigninPage";
export type CustomizedSigninPage = import("./customizedSigninPage").CustomizedSigninPage;
export const CustomizedSigninPage: typeof import("./customizedSigninPage").CustomizedSigninPage = null as any;
utilities.lazyLoad(exports, ["CustomizedSigninPage"], () => require("./customizedSigninPage"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainCertificateArgs, DomainCertificateState } from "./domainCertificate";
export type DomainCertificate = import("./domainCertificate").DomainCertificate;
export const DomainCertificate: typeof import("./domainCertificate").DomainCertificate = null as any;
utilities.lazyLoad(exports, ["DomainCertificate"], () => require("./domainCertificate"));

export { DomainVerificationArgs, DomainVerificationState } from "./domainVerification";
export type DomainVerification = import("./domainVerification").DomainVerification;
export const DomainVerification: typeof import("./domainVerification").DomainVerification = null as any;
utilities.lazyLoad(exports, ["DomainVerification"], () => require("./domainVerification"));

export { EmailCustomizationArgs, EmailCustomizationState } from "./emailCustomization";
export type EmailCustomization = import("./emailCustomization").EmailCustomization;
export const EmailCustomization: typeof import("./emailCustomization").EmailCustomization = null as any;
utilities.lazyLoad(exports, ["EmailCustomization"], () => require("./emailCustomization"));

export { EmailDomainArgs, EmailDomainState } from "./emailDomain";
export type EmailDomain = import("./emailDomain").EmailDomain;
export const EmailDomain: typeof import("./emailDomain").EmailDomain = null as any;
utilities.lazyLoad(exports, ["EmailDomain"], () => require("./emailDomain"));

export { EmailDomainVerificationArgs, EmailDomainVerificationState } from "./emailDomainVerification";
export type EmailDomainVerification = import("./emailDomainVerification").EmailDomainVerification;
export const EmailDomainVerification: typeof import("./emailDomainVerification").EmailDomainVerification = null as any;
utilities.lazyLoad(exports, ["EmailDomainVerification"], () => require("./emailDomainVerification"));

export { EmailSenderArgs, EmailSenderState } from "./emailSender";
export type EmailSender = import("./emailSender").EmailSender;
export const EmailSender: typeof import("./emailSender").EmailSender = null as any;
utilities.lazyLoad(exports, ["EmailSender"], () => require("./emailSender"));

export { EmailSenderVerificationArgs, EmailSenderVerificationState } from "./emailSenderVerification";
export type EmailSenderVerification = import("./emailSenderVerification").EmailSenderVerification;
export const EmailSenderVerification: typeof import("./emailSenderVerification").EmailSenderVerification = null as any;
utilities.lazyLoad(exports, ["EmailSenderVerification"], () => require("./emailSenderVerification"));

export { EmailTemplateSettingsArgs, EmailTemplateSettingsState } from "./emailTemplateSettings";
export type EmailTemplateSettings = import("./emailTemplateSettings").EmailTemplateSettings;
export const EmailTemplateSettings: typeof import("./emailTemplateSettings").EmailTemplateSettings = null as any;
utilities.lazyLoad(exports, ["EmailTemplateSettings"], () => require("./emailTemplateSettings"));

export { EventHookArgs, EventHookState } from "./eventHook";
export type EventHook = import("./eventHook").EventHook;
export const EventHook: typeof import("./eventHook").EventHook = null as any;
utilities.lazyLoad(exports, ["EventHook"], () => require("./eventHook"));

export { EventHookVerificationArgs, EventHookVerificationState } from "./eventHookVerification";
export type EventHookVerification = import("./eventHookVerification").EventHookVerification;
export const EventHookVerification: typeof import("./eventHookVerification").EventHookVerification = null as any;
utilities.lazyLoad(exports, ["EventHookVerification"], () => require("./eventHookVerification"));

export { FactorTotpArgs, FactorTotpState } from "./factorTotp";
export type FactorTotp = import("./factorTotp").FactorTotp;
export const FactorTotp: typeof import("./factorTotp").FactorTotp = null as any;
utilities.lazyLoad(exports, ["FactorTotp"], () => require("./factorTotp"));

export { GetAppGroupAssignmentsArgs, GetAppGroupAssignmentsResult, GetAppGroupAssignmentsOutputArgs } from "./getAppGroupAssignments";
export const getAppGroupAssignments: typeof import("./getAppGroupAssignments").getAppGroupAssignments = null as any;
export const getAppGroupAssignmentsOutput: typeof import("./getAppGroupAssignments").getAppGroupAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAppGroupAssignments","getAppGroupAssignmentsOutput"], () => require("./getAppGroupAssignments"));

export { GetAppSignonPolicyArgs, GetAppSignonPolicyResult, GetAppSignonPolicyOutputArgs } from "./getAppSignonPolicy";
export const getAppSignonPolicy: typeof import("./getAppSignonPolicy").getAppSignonPolicy = null as any;
export const getAppSignonPolicyOutput: typeof import("./getAppSignonPolicy").getAppSignonPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppSignonPolicy","getAppSignonPolicyOutput"], () => require("./getAppSignonPolicy"));

export { GetAppUserAssignmentsArgs, GetAppUserAssignmentsResult, GetAppUserAssignmentsOutputArgs } from "./getAppUserAssignments";
export const getAppUserAssignments: typeof import("./getAppUserAssignments").getAppUserAssignments = null as any;
export const getAppUserAssignmentsOutput: typeof import("./getAppUserAssignments").getAppUserAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAppUserAssignments","getAppUserAssignmentsOutput"], () => require("./getAppUserAssignments"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetAuthServerClaimArgs, GetAuthServerClaimResult, GetAuthServerClaimOutputArgs } from "./getAuthServerClaim";
export const getAuthServerClaim: typeof import("./getAuthServerClaim").getAuthServerClaim = null as any;
export const getAuthServerClaimOutput: typeof import("./getAuthServerClaim").getAuthServerClaimOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerClaim","getAuthServerClaimOutput"], () => require("./getAuthServerClaim"));

export { GetAuthServerClaimsArgs, GetAuthServerClaimsResult, GetAuthServerClaimsOutputArgs } from "./getAuthServerClaims";
export const getAuthServerClaims: typeof import("./getAuthServerClaims").getAuthServerClaims = null as any;
export const getAuthServerClaimsOutput: typeof import("./getAuthServerClaims").getAuthServerClaimsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerClaims","getAuthServerClaimsOutput"], () => require("./getAuthServerClaims"));

export { GetAuthenticatorArgs, GetAuthenticatorResult, GetAuthenticatorOutputArgs } from "./getAuthenticator";
export const getAuthenticator: typeof import("./getAuthenticator").getAuthenticator = null as any;
export const getAuthenticatorOutput: typeof import("./getAuthenticator").getAuthenticatorOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticator","getAuthenticatorOutput"], () => require("./getAuthenticator"));

export { GetBehaviourArgs, GetBehaviourResult, GetBehaviourOutputArgs } from "./getBehaviour";
export const getBehaviour: typeof import("./getBehaviour").getBehaviour = null as any;
export const getBehaviourOutput: typeof import("./getBehaviour").getBehaviourOutput = null as any;
utilities.lazyLoad(exports, ["getBehaviour","getBehaviourOutput"], () => require("./getBehaviour"));

export { GetBehavioursArgs, GetBehavioursResult, GetBehavioursOutputArgs } from "./getBehaviours";
export const getBehaviours: typeof import("./getBehaviours").getBehaviours = null as any;
export const getBehavioursOutput: typeof import("./getBehaviours").getBehavioursOutput = null as any;
utilities.lazyLoad(exports, ["getBehaviours","getBehavioursOutput"], () => require("./getBehaviours"));

export { GetBrandArgs, GetBrandResult, GetBrandOutputArgs } from "./getBrand";
export const getBrand: typeof import("./getBrand").getBrand = null as any;
export const getBrandOutput: typeof import("./getBrand").getBrandOutput = null as any;
utilities.lazyLoad(exports, ["getBrand","getBrandOutput"], () => require("./getBrand"));

export { GetBrandsResult } from "./getBrands";
export const getBrands: typeof import("./getBrands").getBrands = null as any;
export const getBrandsOutput: typeof import("./getBrands").getBrandsOutput = null as any;
utilities.lazyLoad(exports, ["getBrands","getBrandsOutput"], () => require("./getBrands"));

export { GetDefaultSigninPageArgs, GetDefaultSigninPageResult, GetDefaultSigninPageOutputArgs } from "./getDefaultSigninPage";
export const getDefaultSigninPage: typeof import("./getDefaultSigninPage").getDefaultSigninPage = null as any;
export const getDefaultSigninPageOutput: typeof import("./getDefaultSigninPage").getDefaultSigninPageOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultSigninPage","getDefaultSigninPageOutput"], () => require("./getDefaultSigninPage"));

export { GetDeviceAssurancePolicyArgs, GetDeviceAssurancePolicyResult, GetDeviceAssurancePolicyOutputArgs } from "./getDeviceAssurancePolicy";
export const getDeviceAssurancePolicy: typeof import("./getDeviceAssurancePolicy").getDeviceAssurancePolicy = null as any;
export const getDeviceAssurancePolicyOutput: typeof import("./getDeviceAssurancePolicy").getDeviceAssurancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAssurancePolicy","getDeviceAssurancePolicyOutput"], () => require("./getDeviceAssurancePolicy"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetEmailCustomizationArgs, GetEmailCustomizationResult, GetEmailCustomizationOutputArgs } from "./getEmailCustomization";
export const getEmailCustomization: typeof import("./getEmailCustomization").getEmailCustomization = null as any;
export const getEmailCustomizationOutput: typeof import("./getEmailCustomization").getEmailCustomizationOutput = null as any;
utilities.lazyLoad(exports, ["getEmailCustomization","getEmailCustomizationOutput"], () => require("./getEmailCustomization"));

export { GetEmailCustomizationsArgs, GetEmailCustomizationsResult, GetEmailCustomizationsOutputArgs } from "./getEmailCustomizations";
export const getEmailCustomizations: typeof import("./getEmailCustomizations").getEmailCustomizations = null as any;
export const getEmailCustomizationsOutput: typeof import("./getEmailCustomizations").getEmailCustomizationsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailCustomizations","getEmailCustomizationsOutput"], () => require("./getEmailCustomizations"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetLogStreamArgs, GetLogStreamResult, GetLogStreamOutputArgs } from "./getLogStream";
export const getLogStream: typeof import("./getLogStream").getLogStream = null as any;
export const getLogStreamOutput: typeof import("./getLogStream").getLogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getLogStream","getLogStreamOutput"], () => require("./getLogStream"));

export { GetNetworkZoneArgs, GetNetworkZoneResult, GetNetworkZoneOutputArgs } from "./getNetworkZone";
export const getNetworkZone: typeof import("./getNetworkZone").getNetworkZone = null as any;
export const getNetworkZoneOutput: typeof import("./getNetworkZone").getNetworkZoneOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkZone","getNetworkZoneOutput"], () => require("./getNetworkZone"));

export { GetOrgMetadataArgs, GetOrgMetadataResult, GetOrgMetadataOutputArgs } from "./getOrgMetadata";
export const getOrgMetadata: typeof import("./getOrgMetadata").getOrgMetadata = null as any;
export const getOrgMetadataOutput: typeof import("./getOrgMetadata").getOrgMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getOrgMetadata","getOrgMetadataOutput"], () => require("./getOrgMetadata"));

export { GetRoleSubscriptionArgs, GetRoleSubscriptionResult, GetRoleSubscriptionOutputArgs } from "./getRoleSubscription";
export const getRoleSubscription: typeof import("./getRoleSubscription").getRoleSubscription = null as any;
export const getRoleSubscriptionOutput: typeof import("./getRoleSubscription").getRoleSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getRoleSubscription","getRoleSubscriptionOutput"], () => require("./getRoleSubscription"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTemplatesArgs, GetTemplatesResult, GetTemplatesOutputArgs } from "./getTemplates";
export const getTemplates: typeof import("./getTemplates").getTemplates = null as any;
export const getTemplatesOutput: typeof import("./getTemplates").getTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getTemplates","getTemplatesOutput"], () => require("./getTemplates"));

export { GetThemeArgs, GetThemeResult, GetThemeOutputArgs } from "./getTheme";
export const getTheme: typeof import("./getTheme").getTheme = null as any;
export const getThemeOutput: typeof import("./getTheme").getThemeOutput = null as any;
utilities.lazyLoad(exports, ["getTheme","getThemeOutput"], () => require("./getTheme"));

export { GetThemesArgs, GetThemesResult, GetThemesOutputArgs } from "./getThemes";
export const getThemes: typeof import("./getThemes").getThemes = null as any;
export const getThemesOutput: typeof import("./getThemes").getThemesOutput = null as any;
utilities.lazyLoad(exports, ["getThemes","getThemesOutput"], () => require("./getThemes"));

export { GetTrustedOriginsArgs, GetTrustedOriginsResult, GetTrustedOriginsOutputArgs } from "./getTrustedOrigins";
export const getTrustedOrigins: typeof import("./getTrustedOrigins").getTrustedOrigins = null as any;
export const getTrustedOriginsOutput: typeof import("./getTrustedOrigins").getTrustedOriginsOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedOrigins","getTrustedOriginsOutput"], () => require("./getTrustedOrigins"));

export { GetUserSecurityQuestionsArgs, GetUserSecurityQuestionsResult, GetUserSecurityQuestionsOutputArgs } from "./getUserSecurityQuestions";
export const getUserSecurityQuestions: typeof import("./getUserSecurityQuestions").getUserSecurityQuestions = null as any;
export const getUserSecurityQuestionsOutput: typeof import("./getUserSecurityQuestions").getUserSecurityQuestionsOutput = null as any;
utilities.lazyLoad(exports, ["getUserSecurityQuestions","getUserSecurityQuestionsOutput"], () => require("./getUserSecurityQuestions"));

export { GroupMembershipsArgs, GroupMembershipsState } from "./groupMemberships";
export type GroupMemberships = import("./groupMemberships").GroupMemberships;
export const GroupMemberships: typeof import("./groupMemberships").GroupMemberships = null as any;
utilities.lazyLoad(exports, ["GroupMemberships"], () => require("./groupMemberships"));

export { GroupSchemaPropertyArgs, GroupSchemaPropertyState } from "./groupSchemaProperty";
export type GroupSchemaProperty = import("./groupSchemaProperty").GroupSchemaProperty;
export const GroupSchemaProperty: typeof import("./groupSchemaProperty").GroupSchemaProperty = null as any;
utilities.lazyLoad(exports, ["GroupSchemaProperty"], () => require("./groupSchemaProperty"));

export { LinkDefinitionArgs, LinkDefinitionState } from "./linkDefinition";
export type LinkDefinition = import("./linkDefinition").LinkDefinition;
export const LinkDefinition: typeof import("./linkDefinition").LinkDefinition = null as any;
utilities.lazyLoad(exports, ["LinkDefinition"], () => require("./linkDefinition"));

export { LinkValueArgs, LinkValueState } from "./linkValue";
export type LinkValue = import("./linkValue").LinkValue;
export const LinkValue: typeof import("./linkValue").LinkValue = null as any;
utilities.lazyLoad(exports, ["LinkValue"], () => require("./linkValue"));

export { LogStreamArgs, LogStreamState } from "./logStream";
export type LogStream = import("./logStream").LogStream;
export const LogStream: typeof import("./logStream").LogStream = null as any;
utilities.lazyLoad(exports, ["LogStream"], () => require("./logStream"));

export { OrgConfigurationArgs, OrgConfigurationState } from "./orgConfiguration";
export type OrgConfiguration = import("./orgConfiguration").OrgConfiguration;
export const OrgConfiguration: typeof import("./orgConfiguration").OrgConfiguration = null as any;
utilities.lazyLoad(exports, ["OrgConfiguration"], () => require("./orgConfiguration"));

export { OrgSupportArgs, OrgSupportState } from "./orgSupport";
export type OrgSupport = import("./orgSupport").OrgSupport;
export const OrgSupport: typeof import("./orgSupport").OrgSupport = null as any;
utilities.lazyLoad(exports, ["OrgSupport"], () => require("./orgSupport"));

export { PolicyMfaDefaultArgs, PolicyMfaDefaultState } from "./policyMfaDefault";
export type PolicyMfaDefault = import("./policyMfaDefault").PolicyMfaDefault;
export const PolicyMfaDefault: typeof import("./policyMfaDefault").PolicyMfaDefault = null as any;
utilities.lazyLoad(exports, ["PolicyMfaDefault"], () => require("./policyMfaDefault"));

export { PolicyPasswordDefaultArgs, PolicyPasswordDefaultState } from "./policyPasswordDefault";
export type PolicyPasswordDefault = import("./policyPasswordDefault").PolicyPasswordDefault;
export const PolicyPasswordDefault: typeof import("./policyPasswordDefault").PolicyPasswordDefault = null as any;
utilities.lazyLoad(exports, ["PolicyPasswordDefault"], () => require("./policyPasswordDefault"));

export { PolicyProfileEnrollmentArgs, PolicyProfileEnrollmentState } from "./policyProfileEnrollment";
export type PolicyProfileEnrollment = import("./policyProfileEnrollment").PolicyProfileEnrollment;
export const PolicyProfileEnrollment: typeof import("./policyProfileEnrollment").PolicyProfileEnrollment = null as any;
utilities.lazyLoad(exports, ["PolicyProfileEnrollment"], () => require("./policyProfileEnrollment"));

export { PolicyProfileEnrollmentAppsArgs, PolicyProfileEnrollmentAppsState } from "./policyProfileEnrollmentApps";
export type PolicyProfileEnrollmentApps = import("./policyProfileEnrollmentApps").PolicyProfileEnrollmentApps;
export const PolicyProfileEnrollmentApps: typeof import("./policyProfileEnrollmentApps").PolicyProfileEnrollmentApps = null as any;
utilities.lazyLoad(exports, ["PolicyProfileEnrollmentApps"], () => require("./policyProfileEnrollmentApps"));

export { PolicyRuleProfileEnrollmentArgs, PolicyRuleProfileEnrollmentState } from "./policyRuleProfileEnrollment";
export type PolicyRuleProfileEnrollment = import("./policyRuleProfileEnrollment").PolicyRuleProfileEnrollment;
export const PolicyRuleProfileEnrollment: typeof import("./policyRuleProfileEnrollment").PolicyRuleProfileEnrollment = null as any;
utilities.lazyLoad(exports, ["PolicyRuleProfileEnrollment"], () => require("./policyRuleProfileEnrollment"));

export { PreviewSigninPageArgs, PreviewSigninPageState } from "./previewSigninPage";
export type PreviewSigninPage = import("./previewSigninPage").PreviewSigninPage;
export const PreviewSigninPage: typeof import("./previewSigninPage").PreviewSigninPage = null as any;
utilities.lazyLoad(exports, ["PreviewSigninPage"], () => require("./previewSigninPage"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RateLimitingArgs, RateLimitingState } from "./rateLimiting";
export type RateLimiting = import("./rateLimiting").RateLimiting;
export const RateLimiting: typeof import("./rateLimiting").RateLimiting = null as any;
utilities.lazyLoad(exports, ["RateLimiting"], () => require("./rateLimiting"));

export { ResourceSetArgs, ResourceSetState } from "./resourceSet";
export type ResourceSet = import("./resourceSet").ResourceSet;
export const ResourceSet: typeof import("./resourceSet").ResourceSet = null as any;
utilities.lazyLoad(exports, ["ResourceSet"], () => require("./resourceSet"));

export { RoleSubscriptionArgs, RoleSubscriptionState } from "./roleSubscription";
export type RoleSubscription = import("./roleSubscription").RoleSubscription;
export const RoleSubscription: typeof import("./roleSubscription").RoleSubscription = null as any;
utilities.lazyLoad(exports, ["RoleSubscription"], () => require("./roleSubscription"));

export { SecurityNotificationEmailsArgs, SecurityNotificationEmailsState } from "./securityNotificationEmails";
export type SecurityNotificationEmails = import("./securityNotificationEmails").SecurityNotificationEmails;
export const SecurityNotificationEmails: typeof import("./securityNotificationEmails").SecurityNotificationEmails = null as any;
utilities.lazyLoad(exports, ["SecurityNotificationEmails"], () => require("./securityNotificationEmails"));

export { TemplateSmsArgs, TemplateSmsState } from "./templateSms";
export type TemplateSms = import("./templateSms").TemplateSms;
export const TemplateSms: typeof import("./templateSms").TemplateSms = null as any;
utilities.lazyLoad(exports, ["TemplateSms"], () => require("./templateSms"));

export { ThemeArgs, ThemeState } from "./theme";
export type Theme = import("./theme").Theme;
export const Theme: typeof import("./theme").Theme = null as any;
utilities.lazyLoad(exports, ["Theme"], () => require("./theme"));

export { ThreatInsightSettingsArgs, ThreatInsightSettingsState } from "./threatInsightSettings";
export type ThreatInsightSettings = import("./threatInsightSettings").ThreatInsightSettings;
export const ThreatInsightSettings: typeof import("./threatInsightSettings").ThreatInsightSettings = null as any;
utilities.lazyLoad(exports, ["ThreatInsightSettings"], () => require("./threatInsightSettings"));

export { TrustedServerArgs, TrustedServerState } from "./trustedServer";
export type TrustedServer = import("./trustedServer").TrustedServer;
export const TrustedServer: typeof import("./trustedServer").TrustedServer = null as any;
utilities.lazyLoad(exports, ["TrustedServer"], () => require("./trustedServer"));

export { UserAdminRolesArgs, UserAdminRolesState } from "./userAdminRoles";
export type UserAdminRoles = import("./userAdminRoles").UserAdminRoles;
export const UserAdminRoles: typeof import("./userAdminRoles").UserAdminRoles = null as any;
utilities.lazyLoad(exports, ["UserAdminRoles"], () => require("./userAdminRoles"));

export { UserBaseSchemaPropertyArgs, UserBaseSchemaPropertyState } from "./userBaseSchemaProperty";
export type UserBaseSchemaProperty = import("./userBaseSchemaProperty").UserBaseSchemaProperty;
export const UserBaseSchemaProperty: typeof import("./userBaseSchemaProperty").UserBaseSchemaProperty = null as any;
utilities.lazyLoad(exports, ["UserBaseSchemaProperty"], () => require("./userBaseSchemaProperty"));

export { UserFactorQuestionArgs, UserFactorQuestionState } from "./userFactorQuestion";
export type UserFactorQuestion = import("./userFactorQuestion").UserFactorQuestion;
export const UserFactorQuestion: typeof import("./userFactorQuestion").UserFactorQuestion = null as any;
utilities.lazyLoad(exports, ["UserFactorQuestion"], () => require("./userFactorQuestion"));

export { UserGroupMembershipsArgs, UserGroupMembershipsState } from "./userGroupMemberships";
export type UserGroupMemberships = import("./userGroupMemberships").UserGroupMemberships;
export const UserGroupMemberships: typeof import("./userGroupMemberships").UserGroupMemberships = null as any;
utilities.lazyLoad(exports, ["UserGroupMemberships"], () => require("./userGroupMemberships"));

export { UserSchemaPropertyArgs, UserSchemaPropertyState } from "./userSchemaProperty";
export type UserSchemaProperty = import("./userSchemaProperty").UserSchemaProperty;
export const UserSchemaProperty: typeof import("./userSchemaProperty").UserSchemaProperty = null as any;
utilities.lazyLoad(exports, ["UserSchemaProperty"], () => require("./userSchemaProperty"));


// Export sub-modules:
import * as app from "./app";
import * as auth from "./auth";
import * as config from "./config";
import * as factor from "./factor";
import * as group from "./group";
import * as idp from "./idp";
import * as inline from "./inline";
import * as network from "./network";
import * as policy from "./policy";
import * as profile from "./profile";
import * as trustedorigin from "./trustedorigin";
import * as types from "./types";
import * as user from "./user";

export {
    app,
    auth,
    config,
    factor,
    group,
    idp,
    inline,
    network,
    policy,
    profile,
    trustedorigin,
    types,
    user,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:index/adminRoleCustom:AdminRoleCustom":
                return new AdminRoleCustom(name, <any>undefined, { urn })
            case "okta:index/adminRoleCustomAssignments:AdminRoleCustomAssignments":
                return new AdminRoleCustomAssignments(name, <any>undefined, { urn })
            case "okta:index/adminRoleTargets:AdminRoleTargets":
                return new AdminRoleTargets(name, <any>undefined, { urn })
            case "okta:index/appGroupAssignments:AppGroupAssignments":
                return new AppGroupAssignments(name, <any>undefined, { urn })
            case "okta:index/appOauthApiScope:AppOauthApiScope":
                return new AppOauthApiScope(name, <any>undefined, { urn })
            case "okta:index/appSamlAppSettings:AppSamlAppSettings":
                return new AppSamlAppSettings(name, <any>undefined, { urn })
            case "okta:index/appSharedCredentials:AppSharedCredentials":
                return new AppSharedCredentials(name, <any>undefined, { urn })
            case "okta:index/appSignonPolicy:AppSignonPolicy":
                return new AppSignonPolicy(name, <any>undefined, { urn })
            case "okta:index/appSignonPolicyRule:AppSignonPolicyRule":
                return new AppSignonPolicyRule(name, <any>undefined, { urn })
            case "okta:index/appUserBaseSchemaProperty:AppUserBaseSchemaProperty":
                return new AppUserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/appUserSchemaProperty:AppUserSchemaProperty":
                return new AppUserSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/authServerClaimDefault:AuthServerClaimDefault":
                return new AuthServerClaimDefault(name, <any>undefined, { urn })
            case "okta:index/authServerDefault:AuthServerDefault":
                return new AuthServerDefault(name, <any>undefined, { urn })
            case "okta:index/authenticator:Authenticator":
                return new Authenticator(name, <any>undefined, { urn })
            case "okta:index/behaviour:Behaviour":
                return new Behaviour(name, <any>undefined, { urn })
            case "okta:index/brand:Brand":
                return new Brand(name, <any>undefined, { urn })
            case "okta:index/captcha:Captcha":
                return new Captcha(name, <any>undefined, { urn })
            case "okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings":
                return new CaptchaOrgWideSettings(name, <any>undefined, { urn })
            case "okta:index/customizedSigninPage:CustomizedSigninPage":
                return new CustomizedSigninPage(name, <any>undefined, { urn })
            case "okta:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "okta:index/domainCertificate:DomainCertificate":
                return new DomainCertificate(name, <any>undefined, { urn })
            case "okta:index/domainVerification:DomainVerification":
                return new DomainVerification(name, <any>undefined, { urn })
            case "okta:index/emailCustomization:EmailCustomization":
                return new EmailCustomization(name, <any>undefined, { urn })
            case "okta:index/emailDomain:EmailDomain":
                return new EmailDomain(name, <any>undefined, { urn })
            case "okta:index/emailDomainVerification:EmailDomainVerification":
                return new EmailDomainVerification(name, <any>undefined, { urn })
            case "okta:index/emailSender:EmailSender":
                return new EmailSender(name, <any>undefined, { urn })
            case "okta:index/emailSenderVerification:EmailSenderVerification":
                return new EmailSenderVerification(name, <any>undefined, { urn })
            case "okta:index/emailTemplateSettings:EmailTemplateSettings":
                return new EmailTemplateSettings(name, <any>undefined, { urn })
            case "okta:index/eventHook:EventHook":
                return new EventHook(name, <any>undefined, { urn })
            case "okta:index/eventHookVerification:EventHookVerification":
                return new EventHookVerification(name, <any>undefined, { urn })
            case "okta:index/factorTotp:FactorTotp":
                return new FactorTotp(name, <any>undefined, { urn })
            case "okta:index/groupMemberships:GroupMemberships":
                return new GroupMemberships(name, <any>undefined, { urn })
            case "okta:index/groupSchemaProperty:GroupSchemaProperty":
                return new GroupSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/linkDefinition:LinkDefinition":
                return new LinkDefinition(name, <any>undefined, { urn })
            case "okta:index/linkValue:LinkValue":
                return new LinkValue(name, <any>undefined, { urn })
            case "okta:index/logStream:LogStream":
                return new LogStream(name, <any>undefined, { urn })
            case "okta:index/orgConfiguration:OrgConfiguration":
                return new OrgConfiguration(name, <any>undefined, { urn })
            case "okta:index/orgSupport:OrgSupport":
                return new OrgSupport(name, <any>undefined, { urn })
            case "okta:index/policyMfaDefault:PolicyMfaDefault":
                return new PolicyMfaDefault(name, <any>undefined, { urn })
            case "okta:index/policyPasswordDefault:PolicyPasswordDefault":
                return new PolicyPasswordDefault(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollment:PolicyProfileEnrollment":
                return new PolicyProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollmentApps:PolicyProfileEnrollmentApps":
                return new PolicyProfileEnrollmentApps(name, <any>undefined, { urn })
            case "okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment":
                return new PolicyRuleProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/previewSigninPage:PreviewSigninPage":
                return new PreviewSigninPage(name, <any>undefined, { urn })
            case "okta:index/rateLimiting:RateLimiting":
                return new RateLimiting(name, <any>undefined, { urn })
            case "okta:index/resourceSet:ResourceSet":
                return new ResourceSet(name, <any>undefined, { urn })
            case "okta:index/roleSubscription:RoleSubscription":
                return new RoleSubscription(name, <any>undefined, { urn })
            case "okta:index/securityNotificationEmails:SecurityNotificationEmails":
                return new SecurityNotificationEmails(name, <any>undefined, { urn })
            case "okta:index/templateSms:TemplateSms":
                return new TemplateSms(name, <any>undefined, { urn })
            case "okta:index/theme:Theme":
                return new Theme(name, <any>undefined, { urn })
            case "okta:index/threatInsightSettings:ThreatInsightSettings":
                return new ThreatInsightSettings(name, <any>undefined, { urn })
            case "okta:index/trustedServer:TrustedServer":
                return new TrustedServer(name, <any>undefined, { urn })
            case "okta:index/userAdminRoles:UserAdminRoles":
                return new UserAdminRoles(name, <any>undefined, { urn })
            case "okta:index/userBaseSchemaProperty:UserBaseSchemaProperty":
                return new UserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/userFactorQuestion:UserFactorQuestion":
                return new UserFactorQuestion(name, <any>undefined, { urn })
            case "okta:index/userGroupMemberships:UserGroupMemberships":
                return new UserGroupMemberships(name, <any>undefined, { urn })
            case "okta:index/userSchemaProperty:UserSchemaProperty":
                return new UserSchemaProperty(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustom", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustomAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleTargets", _module)
pulumi.runtime.registerResourceModule("okta", "index/appGroupAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthApiScope", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSamlAppSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSharedCredentials", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSignonPolicy", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSignonPolicyRule", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerClaimDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authenticator", _module)
pulumi.runtime.registerResourceModule("okta", "index/behaviour", _module)
pulumi.runtime.registerResourceModule("okta", "index/brand", _module)
pulumi.runtime.registerResourceModule("okta", "index/captcha", _module)
pulumi.runtime.registerResourceModule("okta", "index/captchaOrgWideSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/customizedSigninPage", _module)
pulumi.runtime.registerResourceModule("okta", "index/domain", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainCertificate", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailCustomization", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailDomain", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailDomainVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSender", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSenderVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailTemplateSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHook", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHookVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/factorTotp", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkDefinition", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkValue", _module)
pulumi.runtime.registerResourceModule("okta", "index/logStream", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgConfiguration", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgSupport", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyMfaDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyPasswordDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollmentApps", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/previewSigninPage", _module)
pulumi.runtime.registerResourceModule("okta", "index/rateLimiting", _module)
pulumi.runtime.registerResourceModule("okta", "index/resourceSet", _module)
pulumi.runtime.registerResourceModule("okta", "index/roleSubscription", _module)
pulumi.runtime.registerResourceModule("okta", "index/securityNotificationEmails", _module)
pulumi.runtime.registerResourceModule("okta", "index/templateSms", _module)
pulumi.runtime.registerResourceModule("okta", "index/theme", _module)
pulumi.runtime.registerResourceModule("okta", "index/threatInsightSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/trustedServer", _module)
pulumi.runtime.registerResourceModule("okta", "index/userAdminRoles", _module)
pulumi.runtime.registerResourceModule("okta", "index/userBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/userFactorQuestion", _module)
pulumi.runtime.registerResourceModule("okta", "index/userGroupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/userSchemaProperty", _module)
pulumi.runtime.registerResourcePackage("okta", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:okta") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
