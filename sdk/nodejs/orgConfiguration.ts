// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages org settings, logo, support and communication.
 *
 * > **IMPORTANT:** You must specify all Org Setting properties when you update an org's profile. Any property not specified in the script will be deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const example = new okta.OrgConfiguration("example", {
 *     companyName: "Umbrella Corporation",
 *     website: "https://terraform.io",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/orgConfiguration:OrgConfiguration example _
 * ```
 */
export class OrgConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing OrgConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgConfigurationState, opts?: pulumi.CustomResourceOptions): OrgConfiguration {
        return new OrgConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/orgConfiguration:OrgConfiguration';

    /**
     * Returns true if the given object is an instance of OrgConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgConfiguration.__pulumiType;
    }

    /**
     * Primary address of org
     */
    declare public readonly address1: pulumi.Output<string | undefined>;
    /**
     * Secondary address of org
     */
    declare public readonly address2: pulumi.Output<string | undefined>;
    /**
     * User ID representing the billing contact
     */
    declare public readonly billingContactUser: pulumi.Output<string | undefined>;
    /**
     * City of org
     */
    declare public readonly city: pulumi.Output<string | undefined>;
    /**
     * Name of org
     */
    declare public readonly companyName: pulumi.Output<string>;
    /**
     * Country of org
     */
    declare public readonly country: pulumi.Output<string | undefined>;
    /**
     * Support link of org
     */
    declare public readonly endUserSupportHelpUrl: pulumi.Output<string | undefined>;
    /**
     * Expiration of org
     */
    declare public /*out*/ readonly expiresAt: pulumi.Output<string>;
    /**
     * Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the org's users receive Okta Communication emails
     */
    declare public readonly optOutCommunicationEmails: pulumi.Output<boolean | undefined>;
    /**
     * Support help phone of org
     */
    declare public readonly phoneNumber: pulumi.Output<string | undefined>;
    /**
     * Postal code of org
     */
    declare public readonly postalCode: pulumi.Output<string | undefined>;
    /**
     * State of org
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * Subdomain of org
     */
    declare public /*out*/ readonly subdomain: pulumi.Output<string>;
    /**
     * Support help phone of org
     */
    declare public readonly supportPhoneNumber: pulumi.Output<string | undefined>;
    /**
     * User ID representing the technical contact
     */
    declare public readonly technicalContactUser: pulumi.Output<string | undefined>;
    /**
     * The org's website
     */
    declare public readonly website: pulumi.Output<string | undefined>;

    /**
     * Create a OrgConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgConfigurationArgs | OrgConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgConfigurationState | undefined;
            resourceInputs["address1"] = state?.address1;
            resourceInputs["address2"] = state?.address2;
            resourceInputs["billingContactUser"] = state?.billingContactUser;
            resourceInputs["city"] = state?.city;
            resourceInputs["companyName"] = state?.companyName;
            resourceInputs["country"] = state?.country;
            resourceInputs["endUserSupportHelpUrl"] = state?.endUserSupportHelpUrl;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["optOutCommunicationEmails"] = state?.optOutCommunicationEmails;
            resourceInputs["phoneNumber"] = state?.phoneNumber;
            resourceInputs["postalCode"] = state?.postalCode;
            resourceInputs["state"] = state?.state;
            resourceInputs["subdomain"] = state?.subdomain;
            resourceInputs["supportPhoneNumber"] = state?.supportPhoneNumber;
            resourceInputs["technicalContactUser"] = state?.technicalContactUser;
            resourceInputs["website"] = state?.website;
        } else {
            const args = argsOrState as OrgConfigurationArgs | undefined;
            if (args?.companyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'companyName'");
            }
            resourceInputs["address1"] = args?.address1;
            resourceInputs["address2"] = args?.address2;
            resourceInputs["billingContactUser"] = args?.billingContactUser;
            resourceInputs["city"] = args?.city;
            resourceInputs["companyName"] = args?.companyName;
            resourceInputs["country"] = args?.country;
            resourceInputs["endUserSupportHelpUrl"] = args?.endUserSupportHelpUrl;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["optOutCommunicationEmails"] = args?.optOutCommunicationEmails;
            resourceInputs["phoneNumber"] = args?.phoneNumber;
            resourceInputs["postalCode"] = args?.postalCode;
            resourceInputs["state"] = args?.state;
            resourceInputs["supportPhoneNumber"] = args?.supportPhoneNumber;
            resourceInputs["technicalContactUser"] = args?.technicalContactUser;
            resourceInputs["website"] = args?.website;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["subdomain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgConfiguration resources.
 */
export interface OrgConfigurationState {
    /**
     * Primary address of org
     */
    address1?: pulumi.Input<string>;
    /**
     * Secondary address of org
     */
    address2?: pulumi.Input<string>;
    /**
     * User ID representing the billing contact
     */
    billingContactUser?: pulumi.Input<string>;
    /**
     * City of org
     */
    city?: pulumi.Input<string>;
    /**
     * Name of org
     */
    companyName?: pulumi.Input<string>;
    /**
     * Country of org
     */
    country?: pulumi.Input<string>;
    /**
     * Support link of org
     */
    endUserSupportHelpUrl?: pulumi.Input<string>;
    /**
     * Expiration of org
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
     */
    logo?: pulumi.Input<string>;
    /**
     * Indicates whether the org's users receive Okta Communication emails
     */
    optOutCommunicationEmails?: pulumi.Input<boolean>;
    /**
     * Support help phone of org
     */
    phoneNumber?: pulumi.Input<string>;
    /**
     * Postal code of org
     */
    postalCode?: pulumi.Input<string>;
    /**
     * State of org
     */
    state?: pulumi.Input<string>;
    /**
     * Subdomain of org
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Support help phone of org
     */
    supportPhoneNumber?: pulumi.Input<string>;
    /**
     * User ID representing the technical contact
     */
    technicalContactUser?: pulumi.Input<string>;
    /**
     * The org's website
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgConfiguration resource.
 */
export interface OrgConfigurationArgs {
    /**
     * Primary address of org
     */
    address1?: pulumi.Input<string>;
    /**
     * Secondary address of org
     */
    address2?: pulumi.Input<string>;
    /**
     * User ID representing the billing contact
     */
    billingContactUser?: pulumi.Input<string>;
    /**
     * City of org
     */
    city?: pulumi.Input<string>;
    /**
     * Name of org
     */
    companyName: pulumi.Input<string>;
    /**
     * Country of org
     */
    country?: pulumi.Input<string>;
    /**
     * Support link of org
     */
    endUserSupportHelpUrl?: pulumi.Input<string>;
    /**
     * Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
     */
    logo?: pulumi.Input<string>;
    /**
     * Indicates whether the org's users receive Okta Communication emails
     */
    optOutCommunicationEmails?: pulumi.Input<boolean>;
    /**
     * Support help phone of org
     */
    phoneNumber?: pulumi.Input<string>;
    /**
     * Postal code of org
     */
    postalCode?: pulumi.Input<string>;
    /**
     * State of org
     */
    state?: pulumi.Input<string>;
    /**
     * Support help phone of org
     */
    supportPhoneNumber?: pulumi.Input<string>;
    /**
     * User ID representing the technical contact
     */
    technicalContactUser?: pulumi.Input<string>;
    /**
     * The org's website
     */
    website?: pulumi.Input<string>;
}
