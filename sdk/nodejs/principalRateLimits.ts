// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PrincipalRateLimits extends pulumi.CustomResource {
    /**
     * Get an existing PrincipalRateLimits resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrincipalRateLimitsState, opts?: pulumi.CustomResourceOptions): PrincipalRateLimits {
        return new PrincipalRateLimits(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/principalRateLimits:PrincipalRateLimits';

    /**
     * Returns true if the given object is an instance of PrincipalRateLimits.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrincipalRateLimits {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrincipalRateLimits.__pulumiType;
    }

    /**
     * The Okta user ID of the user who created the principle rate limit entity.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The date and time the principle rate limit entity was created.
     */
    declare public /*out*/ readonly createdDate: pulumi.Output<string>;
    /**
     * The default percentage of a given concurrency limit threshold that the owning principal can consume.
     */
    declare public readonly defaultConcurrencyPercentage: pulumi.Output<number>;
    /**
     * The default percentage of a given rate limit threshold that the owning principal can consume.
     */
    declare public readonly defaultPercentage: pulumi.Output<number>;
    /**
     * The date and time the principle rate limit entity was last updated.
     */
    declare public /*out*/ readonly lastUpdate: pulumi.Output<string>;
    /**
     * The Okta user ID of the user who last updated the principle rate limit entity.
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * The unique identifier of the Okta org.
     */
    declare public /*out*/ readonly orgId: pulumi.Output<string>;
    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     */
    declare public readonly principalType: pulumi.Output<string>;

    /**
     * Create a PrincipalRateLimits resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrincipalRateLimitsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrincipalRateLimitsArgs | PrincipalRateLimitsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrincipalRateLimitsState | undefined;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["createdDate"] = state?.createdDate;
            resourceInputs["defaultConcurrencyPercentage"] = state?.defaultConcurrencyPercentage;
            resourceInputs["defaultPercentage"] = state?.defaultPercentage;
            resourceInputs["lastUpdate"] = state?.lastUpdate;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
        } else {
            const args = argsOrState as PrincipalRateLimitsArgs | undefined;
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.principalType === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            resourceInputs["defaultConcurrencyPercentage"] = args?.defaultConcurrencyPercentage;
            resourceInputs["defaultPercentage"] = args?.defaultPercentage;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastUpdate"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrincipalRateLimits.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrincipalRateLimits resources.
 */
export interface PrincipalRateLimitsState {
    /**
     * The Okta user ID of the user who created the principle rate limit entity.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The date and time the principle rate limit entity was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * The default percentage of a given concurrency limit threshold that the owning principal can consume.
     */
    defaultConcurrencyPercentage?: pulumi.Input<number>;
    /**
     * The default percentage of a given rate limit threshold that the owning principal can consume.
     */
    defaultPercentage?: pulumi.Input<number>;
    /**
     * The date and time the principle rate limit entity was last updated.
     */
    lastUpdate?: pulumi.Input<string>;
    /**
     * The Okta user ID of the user who last updated the principle rate limit entity.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * The unique identifier of the Okta org.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     */
    principalType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrincipalRateLimits resource.
 */
export interface PrincipalRateLimitsArgs {
    /**
     * The default percentage of a given concurrency limit threshold that the owning principal can consume.
     */
    defaultConcurrencyPercentage?: pulumi.Input<number>;
    /**
     * The default percentage of a given rate limit threshold that the owning principal can consume.
     */
    defaultPercentage?: pulumi.Input<number>;
    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     */
    principalId: pulumi.Input<string>;
    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     */
    principalType: pulumi.Input<string>;
}
