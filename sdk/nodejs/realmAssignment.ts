// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RealmAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RealmAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmAssignmentState, opts?: pulumi.CustomResourceOptions): RealmAssignment {
        return new RealmAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/realmAssignment:RealmAssignment';

    /**
     * Returns true if the given object is an instance of RealmAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RealmAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RealmAssignment.__pulumiType;
    }

    /**
     * Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
     * `user.profile.state.contains("example")`.
     */
    public readonly conditionExpression!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the realm assignment is the default.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * The name of the Okta Realm Assignment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Priority of the Realm Assignment. The lower the number, the higher the priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The ID of the Profile Source.
     */
    public readonly profileSourceId!: pulumi.Output<string>;
    /**
     * The ID of the Realm asscociated with the Realm Assignment.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a RealmAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmAssignmentArgs | RealmAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmAssignmentState | undefined;
            resourceInputs["conditionExpression"] = state ? state.conditionExpression : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["profileSourceId"] = state ? state.profileSourceId : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RealmAssignmentArgs | undefined;
            if ((!args || args.profileSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileSourceId'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["conditionExpression"] = args ? args.conditionExpression : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["profileSourceId"] = args ? args.profileSourceId : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RealmAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RealmAssignment resources.
 */
export interface RealmAssignmentState {
    /**
     * Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
     * `user.profile.state.contains("example")`.
     */
    conditionExpression?: pulumi.Input<string>;
    /**
     * Indicates whether the realm assignment is the default.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Okta Realm Assignment.
     */
    name?: pulumi.Input<string>;
    /**
     * The Priority of the Realm Assignment. The lower the number, the higher the priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * The ID of the Profile Source.
     */
    profileSourceId?: pulumi.Input<string>;
    /**
     * The ID of the Realm asscociated with the Realm Assignment.
     */
    realmId?: pulumi.Input<string>;
    /**
     * Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RealmAssignment resource.
 */
export interface RealmAssignmentArgs {
    /**
     * Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
     * `user.profile.state.contains("example")`.
     */
    conditionExpression?: pulumi.Input<string>;
    /**
     * The name of the Okta Realm Assignment.
     */
    name?: pulumi.Input<string>;
    /**
     * The Priority of the Realm Assignment. The lower the number, the higher the priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * The ID of the Profile Source.
     */
    profileSourceId: pulumi.Input<string>;
    /**
     * The ID of the Realm asscociated with the Realm Assignment.
     */
    realmId: pulumi.Input<string>;
    /**
     * Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     */
    status?: pulumi.Input<string>;
}
