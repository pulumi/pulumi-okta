// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 *
 * This resource allows you to create and configure a sign-on policy for the application. (Inside the product this is referenced as an _authentication policy_)
 *
 * A newly create app sign-on policy will always contain a default `Catch-all Rule`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const myAppPolicy = new okta.AppSignonPolicy("myAppPolicy", {description: "Authentication Policy to be used on my app."});
 * const myApp = new okta.app.OAuth("myApp", {
 *     label: "My App",
 *     type: "web",
 *     grantTypes: ["authorization_code"],
 *     redirectUris: ["http://localhost:3000"],
 *     postLogoutRedirectUris: ["http://localhost:3000"],
 *     responseTypes: ["code"],
 *     authenticationPolicy: myAppPolicy.id,
 * });
 * ```
 *
 * \_The same mechanism is in place for `okta.app.OAuth` and `okta.app.Saml`.
 *
 * The created policy can be extended using `appSignonPolicyRules`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as okta from "@pulumi/okta";
 *
 * const myAppPolicy = new okta.AppSignonPolicy("myAppPolicy", {description: "Authentication Policy to be used on my app."});
 * const someRule = new okta.AppSignonPolicyRule("someRule", {
 *     policyId: resource.okta_app_signon_policy.my_app_policy.id,
 *     factorMode: "1FA",
 *     reAuthenticationFrequency: "PT43800H",
 *     constraints: [JSON.stringify({
 *         knowledge: {
 *             types: ["password"],
 *         },
 *     })],
 * });
 * ```
 */
export class AppSignonPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AppSignonPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSignonPolicyState, opts?: pulumi.CustomResourceOptions): AppSignonPolicy {
        return new AppSignonPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appSignonPolicy:AppSignonPolicy';

    /**
     * Returns true if the given object is an instance of AppSignonPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSignonPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSignonPolicy.__pulumiType;
    }

    /**
     * Description of the policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the policy.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AppSignonPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSignonPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSignonPolicyArgs | AppSignonPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSignonPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AppSignonPolicyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSignonPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSignonPolicy resources.
 */
export interface AppSignonPolicyState {
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSignonPolicy resource.
 */
export interface AppSignonPolicyArgs {
    /**
     * Description of the policy.
     */
    description: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
}
