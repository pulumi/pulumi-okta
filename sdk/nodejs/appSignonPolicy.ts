// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import okta:index/appSignonPolicy:AppSignonPolicy example <policy_id>
 * ```
 */
export class AppSignonPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AppSignonPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSignonPolicyState, opts?: pulumi.CustomResourceOptions): AppSignonPolicy {
        return new AppSignonPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/appSignonPolicy:AppSignonPolicy';

    /**
     * Returns true if the given object is an instance of AppSignonPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSignonPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSignonPolicy.__pulumiType;
    }

    /**
     * If false, the default rule of the policy is set access to `DENY`. Otherwise default behavior of the default rule is to leave access at `ALLOW`.  **WARNING** setting this attribute to false changes policy rule's default behavior. Use at your own risk. This is only applied during creation and does not affect import or update.
     */
    declare public readonly catchAll: pulumi.Output<boolean>;
    /**
     * Default rule (system=true) id of the policy
     */
    declare public /*out*/ readonly defaultRuleId: pulumi.Output<string>;
    /**
     * Description of the policy.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Name of the policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the order in which this policy is evaluated in relation to the other policies.
     */
    declare public readonly priority: pulumi.Output<number>;

    /**
     * Create a AppSignonPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSignonPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSignonPolicyArgs | AppSignonPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSignonPolicyState | undefined;
            resourceInputs["catchAll"] = state?.catchAll;
            resourceInputs["defaultRuleId"] = state?.defaultRuleId;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
        } else {
            const args = argsOrState as AppSignonPolicyArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["catchAll"] = args?.catchAll;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["defaultRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSignonPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSignonPolicy resources.
 */
export interface AppSignonPolicyState {
    /**
     * If false, the default rule of the policy is set access to `DENY`. Otherwise default behavior of the default rule is to leave access at `ALLOW`.  **WARNING** setting this attribute to false changes policy rule's default behavior. Use at your own risk. This is only applied during creation and does not affect import or update.
     */
    catchAll?: pulumi.Input<boolean>;
    /**
     * Default rule (system=true) id of the policy
     */
    defaultRuleId?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the order in which this policy is evaluated in relation to the other policies.
     */
    priority?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppSignonPolicy resource.
 */
export interface AppSignonPolicyArgs {
    /**
     * If false, the default rule of the policy is set access to `DENY`. Otherwise default behavior of the default rule is to leave access at `ALLOW`.  **WARNING** setting this attribute to false changes policy rule's default behavior. Use at your own risk. This is only applied during creation and does not affect import or update.
     */
    catchAll?: pulumi.Input<boolean>;
    /**
     * Description of the policy.
     */
    description: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the order in which this policy is evaluated in relation to the other policies.
     */
    priority?: pulumi.Input<number>;
}
