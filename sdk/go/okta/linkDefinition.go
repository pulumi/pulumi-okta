// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Link definition operations allow you to manage the creation and removal of the link definitions. If you remove a link
// definition, links based on that definition are unavailable. Note that this resource is immutable, thus can not be modified.
//
// > **NOTE:** Links reappear if you recreate the definition. However, Okta is likely to change this behavior so that links don't reappear. Don't rely on this behavior in production environments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewLinkDefinition(ctx, "example", &okta.LinkDefinitionArgs{
//				AssociatedDescription: pulumi.String("Elite military force member"),
//				AssociatedName:        pulumi.String("sardaukar"),
//				AssociatedTitle:       pulumi.String("Sardaukar"),
//				PrimaryDescription:    pulumi.String("Hereditary ruler of the Imperium and the Known Universe"),
//				PrimaryName:           pulumi.String("emperor"),
//				PrimaryTitle:          pulumi.String("Emperor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Okta Link Definition can be imported via the Okta Primary Link Name.
//
// ```sh
//
//	$ pulumi import okta:index/linkDefinition:LinkDefinition example &#60;primary_name&#62;
//
// ```
type LinkDefinition struct {
	pulumi.CustomResourceState

	// Description of the associated relationship.
	AssociatedDescription pulumi.StringOutput `pulumi:"associatedDescription"`
	// API name of the associated link.
	AssociatedName pulumi.StringOutput `pulumi:"associatedName"`
	// Display name of the associated link.
	AssociatedTitle pulumi.StringOutput `pulumi:"associatedTitle"`
	// Description of the primary relationship.
	PrimaryDescription pulumi.StringOutput `pulumi:"primaryDescription"`
	// API name of the primary link.
	PrimaryName pulumi.StringOutput `pulumi:"primaryName"`
	// Display name of the primary link.
	PrimaryTitle pulumi.StringOutput `pulumi:"primaryTitle"`
}

// NewLinkDefinition registers a new resource with the given unique name, arguments, and options.
func NewLinkDefinition(ctx *pulumi.Context,
	name string, args *LinkDefinitionArgs, opts ...pulumi.ResourceOption) (*LinkDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociatedDescription == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedDescription'")
	}
	if args.AssociatedName == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedName'")
	}
	if args.AssociatedTitle == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedTitle'")
	}
	if args.PrimaryDescription == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryDescription'")
	}
	if args.PrimaryName == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryName'")
	}
	if args.PrimaryTitle == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryTitle'")
	}
	var resource LinkDefinition
	err := ctx.RegisterResource("okta:index/linkDefinition:LinkDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkDefinition gets an existing LinkDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkDefinitionState, opts ...pulumi.ResourceOption) (*LinkDefinition, error) {
	var resource LinkDefinition
	err := ctx.ReadResource("okta:index/linkDefinition:LinkDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkDefinition resources.
type linkDefinitionState struct {
	// Description of the associated relationship.
	AssociatedDescription *string `pulumi:"associatedDescription"`
	// API name of the associated link.
	AssociatedName *string `pulumi:"associatedName"`
	// Display name of the associated link.
	AssociatedTitle *string `pulumi:"associatedTitle"`
	// Description of the primary relationship.
	PrimaryDescription *string `pulumi:"primaryDescription"`
	// API name of the primary link.
	PrimaryName *string `pulumi:"primaryName"`
	// Display name of the primary link.
	PrimaryTitle *string `pulumi:"primaryTitle"`
}

type LinkDefinitionState struct {
	// Description of the associated relationship.
	AssociatedDescription pulumi.StringPtrInput
	// API name of the associated link.
	AssociatedName pulumi.StringPtrInput
	// Display name of the associated link.
	AssociatedTitle pulumi.StringPtrInput
	// Description of the primary relationship.
	PrimaryDescription pulumi.StringPtrInput
	// API name of the primary link.
	PrimaryName pulumi.StringPtrInput
	// Display name of the primary link.
	PrimaryTitle pulumi.StringPtrInput
}

func (LinkDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkDefinitionState)(nil)).Elem()
}

type linkDefinitionArgs struct {
	// Description of the associated relationship.
	AssociatedDescription string `pulumi:"associatedDescription"`
	// API name of the associated link.
	AssociatedName string `pulumi:"associatedName"`
	// Display name of the associated link.
	AssociatedTitle string `pulumi:"associatedTitle"`
	// Description of the primary relationship.
	PrimaryDescription string `pulumi:"primaryDescription"`
	// API name of the primary link.
	PrimaryName string `pulumi:"primaryName"`
	// Display name of the primary link.
	PrimaryTitle string `pulumi:"primaryTitle"`
}

// The set of arguments for constructing a LinkDefinition resource.
type LinkDefinitionArgs struct {
	// Description of the associated relationship.
	AssociatedDescription pulumi.StringInput
	// API name of the associated link.
	AssociatedName pulumi.StringInput
	// Display name of the associated link.
	AssociatedTitle pulumi.StringInput
	// Description of the primary relationship.
	PrimaryDescription pulumi.StringInput
	// API name of the primary link.
	PrimaryName pulumi.StringInput
	// Display name of the primary link.
	PrimaryTitle pulumi.StringInput
}

func (LinkDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkDefinitionArgs)(nil)).Elem()
}

type LinkDefinitionInput interface {
	pulumi.Input

	ToLinkDefinitionOutput() LinkDefinitionOutput
	ToLinkDefinitionOutputWithContext(ctx context.Context) LinkDefinitionOutput
}

func (*LinkDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkDefinition)(nil)).Elem()
}

func (i *LinkDefinition) ToLinkDefinitionOutput() LinkDefinitionOutput {
	return i.ToLinkDefinitionOutputWithContext(context.Background())
}

func (i *LinkDefinition) ToLinkDefinitionOutputWithContext(ctx context.Context) LinkDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionOutput)
}

// LinkDefinitionArrayInput is an input type that accepts LinkDefinitionArray and LinkDefinitionArrayOutput values.
// You can construct a concrete instance of `LinkDefinitionArrayInput` via:
//
//	LinkDefinitionArray{ LinkDefinitionArgs{...} }
type LinkDefinitionArrayInput interface {
	pulumi.Input

	ToLinkDefinitionArrayOutput() LinkDefinitionArrayOutput
	ToLinkDefinitionArrayOutputWithContext(context.Context) LinkDefinitionArrayOutput
}

type LinkDefinitionArray []LinkDefinitionInput

func (LinkDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkDefinition)(nil)).Elem()
}

func (i LinkDefinitionArray) ToLinkDefinitionArrayOutput() LinkDefinitionArrayOutput {
	return i.ToLinkDefinitionArrayOutputWithContext(context.Background())
}

func (i LinkDefinitionArray) ToLinkDefinitionArrayOutputWithContext(ctx context.Context) LinkDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionArrayOutput)
}

// LinkDefinitionMapInput is an input type that accepts LinkDefinitionMap and LinkDefinitionMapOutput values.
// You can construct a concrete instance of `LinkDefinitionMapInput` via:
//
//	LinkDefinitionMap{ "key": LinkDefinitionArgs{...} }
type LinkDefinitionMapInput interface {
	pulumi.Input

	ToLinkDefinitionMapOutput() LinkDefinitionMapOutput
	ToLinkDefinitionMapOutputWithContext(context.Context) LinkDefinitionMapOutput
}

type LinkDefinitionMap map[string]LinkDefinitionInput

func (LinkDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkDefinition)(nil)).Elem()
}

func (i LinkDefinitionMap) ToLinkDefinitionMapOutput() LinkDefinitionMapOutput {
	return i.ToLinkDefinitionMapOutputWithContext(context.Background())
}

func (i LinkDefinitionMap) ToLinkDefinitionMapOutputWithContext(ctx context.Context) LinkDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionMapOutput)
}

type LinkDefinitionOutput struct{ *pulumi.OutputState }

func (LinkDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkDefinition)(nil)).Elem()
}

func (o LinkDefinitionOutput) ToLinkDefinitionOutput() LinkDefinitionOutput {
	return o
}

func (o LinkDefinitionOutput) ToLinkDefinitionOutputWithContext(ctx context.Context) LinkDefinitionOutput {
	return o
}

// Description of the associated relationship.
func (o LinkDefinitionOutput) AssociatedDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.AssociatedDescription }).(pulumi.StringOutput)
}

// API name of the associated link.
func (o LinkDefinitionOutput) AssociatedName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.AssociatedName }).(pulumi.StringOutput)
}

// Display name of the associated link.
func (o LinkDefinitionOutput) AssociatedTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.AssociatedTitle }).(pulumi.StringOutput)
}

// Description of the primary relationship.
func (o LinkDefinitionOutput) PrimaryDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.PrimaryDescription }).(pulumi.StringOutput)
}

// API name of the primary link.
func (o LinkDefinitionOutput) PrimaryName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.PrimaryName }).(pulumi.StringOutput)
}

// Display name of the primary link.
func (o LinkDefinitionOutput) PrimaryTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkDefinition) pulumi.StringOutput { return v.PrimaryTitle }).(pulumi.StringOutput)
}

type LinkDefinitionArrayOutput struct{ *pulumi.OutputState }

func (LinkDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkDefinition)(nil)).Elem()
}

func (o LinkDefinitionArrayOutput) ToLinkDefinitionArrayOutput() LinkDefinitionArrayOutput {
	return o
}

func (o LinkDefinitionArrayOutput) ToLinkDefinitionArrayOutputWithContext(ctx context.Context) LinkDefinitionArrayOutput {
	return o
}

func (o LinkDefinitionArrayOutput) Index(i pulumi.IntInput) LinkDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkDefinition {
		return vs[0].([]*LinkDefinition)[vs[1].(int)]
	}).(LinkDefinitionOutput)
}

type LinkDefinitionMapOutput struct{ *pulumi.OutputState }

func (LinkDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkDefinition)(nil)).Elem()
}

func (o LinkDefinitionMapOutput) ToLinkDefinitionMapOutput() LinkDefinitionMapOutput {
	return o
}

func (o LinkDefinitionMapOutput) ToLinkDefinitionMapOutputWithContext(ctx context.Context) LinkDefinitionMapOutput {
	return o
}

func (o LinkDefinitionMapOutput) MapIndex(k pulumi.StringInput) LinkDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkDefinition {
		return vs[0].(map[string]*LinkDefinition)[vs[1].(string)]
	}).(LinkDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkDefinitionInput)(nil)).Elem(), &LinkDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkDefinitionArrayInput)(nil)).Elem(), LinkDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkDefinitionMapInput)(nil)).Elem(), LinkDefinitionMap{})
	pulumi.RegisterOutputType(LinkDefinitionOutput{})
	pulumi.RegisterOutputType(LinkDefinitionArrayOutput{})
	pulumi.RegisterOutputType(LinkDefinitionMapOutput{})
}
