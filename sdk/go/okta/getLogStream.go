// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Log Streams
func LookupLogStream(ctx *pulumi.Context, args *LookupLogStreamArgs, opts ...pulumi.InvokeOption) (*LookupLogStreamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogStreamResult
	err := ctx.Invoke("okta:index/getLogStream:getLogStream", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogStream.
type LookupLogStreamArgs struct {
	// ID of the log stream to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// Unique name for the Log Stream object, conflicts with `id`.
	Name     *string               `pulumi:"name"`
	Settings *GetLogStreamSettings `pulumi:"settings"`
}

// A collection of values returned by getLogStream.
type LookupLogStreamResult struct {
	// ID of the log stream to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// Unique name for the Log Stream object, conflicts with `id`.
	Name     *string               `pulumi:"name"`
	Settings *GetLogStreamSettings `pulumi:"settings"`
	// Log Stream Status - can either be ACTIVE or INACTIVE only
	Status string `pulumi:"status"`
	// Streaming provider used - aws*eventbridge or splunk*cloud_logstreaming
	Type string `pulumi:"type"`
}

func LookupLogStreamOutput(ctx *pulumi.Context, args LookupLogStreamOutputArgs, opts ...pulumi.InvokeOption) LookupLogStreamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLogStreamResultOutput, error) {
			args := v.(LookupLogStreamArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupLogStreamResult
			secret, err := ctx.InvokePackageRaw("okta:index/getLogStream:getLogStream", args, &rv, "", opts...)
			if err != nil {
				return LookupLogStreamResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupLogStreamResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupLogStreamResultOutput), nil
			}
			return output, nil
		}).(LookupLogStreamResultOutput)
}

// A collection of arguments for invoking getLogStream.
type LookupLogStreamOutputArgs struct {
	// ID of the log stream to retrieve, conflicts with `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for the Log Stream object, conflicts with `id`.
	Name     pulumi.StringPtrInput        `pulumi:"name"`
	Settings GetLogStreamSettingsPtrInput `pulumi:"settings"`
}

func (LookupLogStreamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogStreamArgs)(nil)).Elem()
}

// A collection of values returned by getLogStream.
type LookupLogStreamResultOutput struct{ *pulumi.OutputState }

func (LookupLogStreamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogStreamResult)(nil)).Elem()
}

func (o LookupLogStreamResultOutput) ToLookupLogStreamResultOutput() LookupLogStreamResultOutput {
	return o
}

func (o LookupLogStreamResultOutput) ToLookupLogStreamResultOutputWithContext(ctx context.Context) LookupLogStreamResultOutput {
	return o
}

// ID of the log stream to retrieve, conflicts with `name`.
func (o LookupLogStreamResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogStreamResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for the Log Stream object, conflicts with `id`.
func (o LookupLogStreamResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogStreamResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupLogStreamResultOutput) Settings() GetLogStreamSettingsPtrOutput {
	return o.ApplyT(func(v LookupLogStreamResult) *GetLogStreamSettings { return v.Settings }).(GetLogStreamSettingsPtrOutput)
}

// Log Stream Status - can either be ACTIVE or INACTIVE only
func (o LookupLogStreamResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogStreamResult) string { return v.Status }).(pulumi.StringOutput)
}

// Streaming provider used - aws*eventbridge or splunk*cloud_logstreaming
func (o LookupLogStreamResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogStreamResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogStreamResultOutput{})
}
