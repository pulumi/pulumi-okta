// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Okta Group Rule.
//
// This resource allows you to create and configure an Okta Group Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/group"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := group.NewRule(ctx, "example", &group.RuleArgs{
// 			ExpressionType:  pulumi.String("urn:okta:expression:1.0"),
// 			ExpressionValue: pulumi.String("String.startsWith(user.firstName,\"andy\")"),
// 			GroupAssignments: pulumi.StringArray{
// 				pulumi.String("<group id>"),
// 			},
// 			Status: pulumi.String("ACTIVE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An Okta Group Rule can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:group/rule:Rule example <group rule id>
// ```
type Rule struct {
	pulumi.CustomResourceState

	// The expression type to use to invoke the rule. The default
	// is `"urn:okta:expression:1.0"`.
	ExpressionType pulumi.StringPtrOutput `pulumi:"expressionType"`
	// The expression value.
	ExpressionValue pulumi.StringOutput `pulumi:"expressionValue"`
	// The list of group ids to assign the users to.
	GroupAssignments pulumi.StringArrayOutput `pulumi:"groupAssignments"`
	// The name of the Group Rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// This tells the provider to remove users added by this rule from the assigned
	// group after destroying this resource. Default is `false`.
	RemoveAssignedUsers pulumi.BoolPtrOutput `pulumi:"removeAssignedUsers"`
	// The status of the group rule.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpressionValue == nil {
		return nil, errors.New("invalid value for required argument 'ExpressionValue'")
	}
	if args.GroupAssignments == nil {
		return nil, errors.New("invalid value for required argument 'GroupAssignments'")
	}
	var resource Rule
	err := ctx.RegisterResource("okta:group/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("okta:group/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// The expression type to use to invoke the rule. The default
	// is `"urn:okta:expression:1.0"`.
	ExpressionType *string `pulumi:"expressionType"`
	// The expression value.
	ExpressionValue *string `pulumi:"expressionValue"`
	// The list of group ids to assign the users to.
	GroupAssignments []string `pulumi:"groupAssignments"`
	// The name of the Group Rule.
	Name *string `pulumi:"name"`
	// This tells the provider to remove users added by this rule from the assigned
	// group after destroying this resource. Default is `false`.
	RemoveAssignedUsers *bool `pulumi:"removeAssignedUsers"`
	// The status of the group rule.
	Status *string `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type RuleState struct {
	// The expression type to use to invoke the rule. The default
	// is `"urn:okta:expression:1.0"`.
	ExpressionType pulumi.StringPtrInput
	// The expression value.
	ExpressionValue pulumi.StringPtrInput
	// The list of group ids to assign the users to.
	GroupAssignments pulumi.StringArrayInput
	// The name of the Group Rule.
	Name pulumi.StringPtrInput
	// This tells the provider to remove users added by this rule from the assigned
	// group after destroying this resource. Default is `false`.
	RemoveAssignedUsers pulumi.BoolPtrInput
	// The status of the group rule.
	Status pulumi.StringPtrInput
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The expression type to use to invoke the rule. The default
	// is `"urn:okta:expression:1.0"`.
	ExpressionType *string `pulumi:"expressionType"`
	// The expression value.
	ExpressionValue string `pulumi:"expressionValue"`
	// The list of group ids to assign the users to.
	GroupAssignments []string `pulumi:"groupAssignments"`
	// The name of the Group Rule.
	Name *string `pulumi:"name"`
	// This tells the provider to remove users added by this rule from the assigned
	// group after destroying this resource. Default is `false`.
	RemoveAssignedUsers *bool `pulumi:"removeAssignedUsers"`
	// The status of the group rule.
	Status *string `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The expression type to use to invoke the rule. The default
	// is `"urn:okta:expression:1.0"`.
	ExpressionType pulumi.StringPtrInput
	// The expression value.
	ExpressionValue pulumi.StringInput
	// The list of group ids to assign the users to.
	GroupAssignments pulumi.StringArrayInput
	// The name of the Group Rule.
	Name pulumi.StringPtrInput
	// This tells the provider to remove users added by this rule from the assigned
	// group after destroying this resource. Default is `false`.
	RemoveAssignedUsers pulumi.BoolPtrInput
	// The status of the group rule.
	Status pulumi.StringPtrInput
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//          RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// RuleMapInput is an input type that accepts RuleMap and RuleMapOutput values.
// You can construct a concrete instance of `RuleMapInput` via:
//
//          RuleMap{ "key": RuleArgs{...} }
type RuleMapInput interface {
	pulumi.Input

	ToRuleMapOutput() RuleMapOutput
	ToRuleMapOutputWithContext(context.Context) RuleMapOutput
}

type RuleMap map[string]RuleInput

func (RuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (i RuleMap) ToRuleMapOutput() RuleMapOutput {
	return i.ToRuleMapOutputWithContext(context.Background())
}

func (i RuleMap) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMapOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].([]*Rule)[vs[1].(int)]
	}).(RuleOutput)
}

type RuleMapOutput struct{ *pulumi.OutputState }

func (RuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (o RuleMapOutput) ToRuleMapOutput() RuleMapOutput {
	return o
}

func (o RuleMapOutput) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return o
}

func (o RuleMapOutput) MapIndex(k pulumi.StringInput) RuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].(map[string]*Rule)[vs[1].(string)]
	}).(RuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMapInput)(nil)).Elem(), RuleMap{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleMapOutput{})
}
