// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Okta Group.
//
// This resource allows you to create and configure an Okta Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/group"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := group.NewGroup(ctx, "example", &group.GroupArgs{
// 			Description: pulumi.String("My Example Group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An Okta Group can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:group/group:Group example <group id>
// ```
type Group struct {
	pulumi.CustomResourceState

	// The description of the Okta Group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Okta Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The users associated with the group. This can also be done per user.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		args = &GroupArgs{}
	}
	var resource Group
	err := ctx.RegisterResource("okta:group/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("okta:group/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The description of the Okta Group.
	Description *string `pulumi:"description"`
	// The name of the Okta Group.
	Name *string `pulumi:"name"`
	// The users associated with the group. This can also be done per user.
	Users []string `pulumi:"users"`
}

type GroupState struct {
	// The description of the Okta Group.
	Description pulumi.StringPtrInput
	// The name of the Okta Group.
	Name pulumi.StringPtrInput
	// The users associated with the group. This can also be done per user.
	Users pulumi.StringArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The description of the Okta Group.
	Description *string `pulumi:"description"`
	// The name of the Okta Group.
	Name *string `pulumi:"name"`
	// The users associated with the group. This can also be done per user.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The description of the Okta Group.
	Description pulumi.StringPtrInput
	// The name of the Okta Group.
	Name pulumi.StringPtrInput
	// The users associated with the group. This can also be done per user.
	Users pulumi.StringArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (Group) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (i Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

type GroupOutput struct {
	*pulumi.OutputState
}

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupOutput)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
}
