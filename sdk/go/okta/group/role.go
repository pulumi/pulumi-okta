// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Assigns Admin roles to Okta Groups. This resource allows you to assign Okta administrator roles to Okta Groups. This resource provides a one-to-one interface between the Okta group and the admin role.
//
// ## Import
//
// ```sh
// $ pulumi import okta:group/role:Role example <group_id>/<role_id>
// ```
type Role struct {
	pulumi.CustomResourceState

	// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrOutput `pulumi:"disableNotifications"`
	// ID of group to attach admin roles to
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Resource Set ID. Required for roleType = `CUSTOM`
	ResourceSetId pulumi.StringPtrOutput `pulumi:"resourceSetId"`
	// Role ID. Required for roleType = `CUSTOM`
	RoleId pulumi.StringPtrOutput `pulumi:"roleId"`
	// Admin role assigned to the group. It can be any one of the following values:
	// 	"API_ADMIN",
	// 	"APP_ADMIN",
	// 	"CUSTOM",
	// 	"GROUP_MEMBERSHIP_ADMIN",
	// 	"HELP_DESK_ADMIN",
	// 	"MOBILE_ADMIN",
	// 	"ORG_ADMIN",
	// 	"READ_ONLY_ADMIN",
	// 	"REPORT_ADMIN",
	// 	"SUPER_ADMIN",
	// 	"USER_ADMIN"
	// 	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
	// 	- "USER_ADMIN" is the Group Administrator.
	RoleType pulumi.StringOutput `pulumi:"roleType"`
	// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
	TargetAppLists pulumi.StringArrayOutput `pulumi:"targetAppLists"`
	// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
	TargetGroupLists pulumi.StringArrayOutput `pulumi:"targetGroupLists"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RoleType == nil {
		return nil, errors.New("invalid value for required argument 'RoleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("okta:group/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("okta:group/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// ID of group to attach admin roles to
	GroupId *string `pulumi:"groupId"`
	// Resource Set ID. Required for roleType = `CUSTOM`
	ResourceSetId *string `pulumi:"resourceSetId"`
	// Role ID. Required for roleType = `CUSTOM`
	RoleId *string `pulumi:"roleId"`
	// Admin role assigned to the group. It can be any one of the following values:
	// 	"API_ADMIN",
	// 	"APP_ADMIN",
	// 	"CUSTOM",
	// 	"GROUP_MEMBERSHIP_ADMIN",
	// 	"HELP_DESK_ADMIN",
	// 	"MOBILE_ADMIN",
	// 	"ORG_ADMIN",
	// 	"READ_ONLY_ADMIN",
	// 	"REPORT_ADMIN",
	// 	"SUPER_ADMIN",
	// 	"USER_ADMIN"
	// 	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
	// 	- "USER_ADMIN" is the Group Administrator.
	RoleType *string `pulumi:"roleType"`
	// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
	TargetAppLists []string `pulumi:"targetAppLists"`
	// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
	TargetGroupLists []string `pulumi:"targetGroupLists"`
}

type RoleState struct {
	// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrInput
	// ID of group to attach admin roles to
	GroupId pulumi.StringPtrInput
	// Resource Set ID. Required for roleType = `CUSTOM`
	ResourceSetId pulumi.StringPtrInput
	// Role ID. Required for roleType = `CUSTOM`
	RoleId pulumi.StringPtrInput
	// Admin role assigned to the group. It can be any one of the following values:
	// 	"API_ADMIN",
	// 	"APP_ADMIN",
	// 	"CUSTOM",
	// 	"GROUP_MEMBERSHIP_ADMIN",
	// 	"HELP_DESK_ADMIN",
	// 	"MOBILE_ADMIN",
	// 	"ORG_ADMIN",
	// 	"READ_ONLY_ADMIN",
	// 	"REPORT_ADMIN",
	// 	"SUPER_ADMIN",
	// 	"USER_ADMIN"
	// 	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
	// 	- "USER_ADMIN" is the Group Administrator.
	RoleType pulumi.StringPtrInput
	// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
	TargetAppLists pulumi.StringArrayInput
	// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
	TargetGroupLists pulumi.StringArrayInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// ID of group to attach admin roles to
	GroupId string `pulumi:"groupId"`
	// Resource Set ID. Required for roleType = `CUSTOM`
	ResourceSetId *string `pulumi:"resourceSetId"`
	// Role ID. Required for roleType = `CUSTOM`
	RoleId *string `pulumi:"roleId"`
	// Admin role assigned to the group. It can be any one of the following values:
	// 	"API_ADMIN",
	// 	"APP_ADMIN",
	// 	"CUSTOM",
	// 	"GROUP_MEMBERSHIP_ADMIN",
	// 	"HELP_DESK_ADMIN",
	// 	"MOBILE_ADMIN",
	// 	"ORG_ADMIN",
	// 	"READ_ONLY_ADMIN",
	// 	"REPORT_ADMIN",
	// 	"SUPER_ADMIN",
	// 	"USER_ADMIN"
	// 	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
	// 	- "USER_ADMIN" is the Group Administrator.
	RoleType string `pulumi:"roleType"`
	// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
	TargetAppLists []string `pulumi:"targetAppLists"`
	// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
	TargetGroupLists []string `pulumi:"targetGroupLists"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrInput
	// ID of group to attach admin roles to
	GroupId pulumi.StringInput
	// Resource Set ID. Required for roleType = `CUSTOM`
	ResourceSetId pulumi.StringPtrInput
	// Role ID. Required for roleType = `CUSTOM`
	RoleId pulumi.StringPtrInput
	// Admin role assigned to the group. It can be any one of the following values:
	// 	"API_ADMIN",
	// 	"APP_ADMIN",
	// 	"CUSTOM",
	// 	"GROUP_MEMBERSHIP_ADMIN",
	// 	"HELP_DESK_ADMIN",
	// 	"MOBILE_ADMIN",
	// 	"ORG_ADMIN",
	// 	"READ_ONLY_ADMIN",
	// 	"REPORT_ADMIN",
	// 	"SUPER_ADMIN",
	// 	"USER_ADMIN"
	// 	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
	// 	- "USER_ADMIN" is the Group Administrator.
	RoleType pulumi.StringInput
	// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
	TargetAppLists pulumi.StringArrayInput
	// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
	TargetGroupLists pulumi.StringArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// RoleMapInput is an input type that accepts RoleMap and RoleMapOutput values.
// You can construct a concrete instance of `RoleMapInput` via:
//
//	RoleMap{ "key": RoleArgs{...} }
type RoleMapInput interface {
	pulumi.Input

	ToRoleMapOutput() RoleMapOutput
	ToRoleMapOutputWithContext(context.Context) RoleMapOutput
}

type RoleMap map[string]RoleInput

func (RoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (i RoleMap) ToRoleMapOutput() RoleMapOutput {
	return i.ToRoleMapOutputWithContext(context.Background())
}

func (i RoleMap) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// When this setting is enabled, the admins won't receive any of the default Okta administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
func (o RoleOutput) DisableNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.DisableNotifications }).(pulumi.BoolPtrOutput)
}

// ID of group to attach admin roles to
func (o RoleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Resource Set ID. Required for roleType = `CUSTOM`
func (o RoleOutput) ResourceSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.ResourceSetId }).(pulumi.StringPtrOutput)
}

// Role ID. Required for roleType = `CUSTOM`
func (o RoleOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.RoleId }).(pulumi.StringPtrOutput)
}

// Admin role assigned to the group. It can be any one of the following values:
//
//	"API_ADMIN",
//	"APP_ADMIN",
//	"CUSTOM",
//	"GROUP_MEMBERSHIP_ADMIN",
//	"HELP_DESK_ADMIN",
//	"MOBILE_ADMIN",
//	"ORG_ADMIN",
//	"READ_ONLY_ADMIN",
//	"REPORT_ADMIN",
//	"SUPER_ADMIN",
//	"USER_ADMIN"
//	. See [API Docs](https://developer.okta.com/docs/api/openapi/okta-management/guides/roles/#standard-roles).
//	- "USER_ADMIN" is the Group Administrator.
func (o RoleOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.RoleType }).(pulumi.StringOutput)
}

// A list of app names (name represents set of app instances, like 'salesforce' or 'facebook'), or a combination of app name and app instance ID (like 'facebook.0oapsqQ6dv19pqyEo0g3') you would like as the targets of the admin role. - Only supported when used with the role type `APP_ADMIN`.
func (o RoleOutput) TargetAppLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.TargetAppLists }).(pulumi.StringArrayOutput)
}

// A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
func (o RoleOutput) TargetGroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.TargetGroupLists }).(pulumi.StringArrayOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Role {
		return vs[0].([]*Role)[vs[1].(int)]
	}).(RoleOutput)
}

type RoleMapOutput struct{ *pulumi.OutputState }

func (RoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (o RoleMapOutput) ToRoleMapOutput() RoleMapOutput {
	return o
}

func (o RoleMapOutput) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return o
}

func (o RoleMapOutput) MapIndex(k pulumi.StringInput) RoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Role {
		return vs[0].(map[string]*Role)[vs[1].(string)]
	}).(RoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleArrayInput)(nil)).Elem(), RoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMapInput)(nil)).Elem(), RoleMap{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleMapOutput{})
}
