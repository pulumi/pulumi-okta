// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a group rule from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/group"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := group.LookupRule(ctx, &group.LookupRuleArgs{
//				Id: pulumi.StringRef(example.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRule(ctx *pulumi.Context, args *LookupRuleArgs, opts ...pulumi.InvokeOption) (*LookupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuleResult
	err := ctx.Invoke("okta:group/getRule:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRule.
type LookupRuleArgs struct {
	// The ID of the Group Rule.
	Id *string `pulumi:"id"`
	// The name of the Group Rule.
	Name *string `pulumi:"name"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
}

// A collection of values returned by getRule.
type LookupRuleResult struct {
	// The expression type to use to invoke the rule.
	ExpressionType string `pulumi:"expressionType"`
	// The expression value.
	ExpressionValue string `pulumi:"expressionValue"`
	// The list of group ids to assign the users to.
	GroupAssignments []string `pulumi:"groupAssignments"`
	// The ID of the Group Rule.
	Id *string `pulumi:"id"`
	// The name of the Group Rule.
	Name *string `pulumi:"name"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

func LookupRuleOutput(ctx *pulumi.Context, args LookupRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRuleResultOutput, error) {
			args := v.(LookupRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:group/getRule:getRule", args, LookupRuleResultOutput{}, options).(LookupRuleResultOutput), nil
		}).(LookupRuleResultOutput)
}

// A collection of arguments for invoking getRule.
type LookupRuleOutputArgs struct {
	// The ID of the Group Rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Group Rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (LookupRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleArgs)(nil)).Elem()
}

// A collection of values returned by getRule.
type LookupRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleResult)(nil)).Elem()
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutput() LookupRuleResultOutput {
	return o
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutputWithContext(ctx context.Context) LookupRuleResultOutput {
	return o
}

// The expression type to use to invoke the rule.
func (o LookupRuleResultOutput) ExpressionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuleResult) string { return v.ExpressionType }).(pulumi.StringOutput)
}

// The expression value.
func (o LookupRuleResultOutput) ExpressionValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuleResult) string { return v.ExpressionValue }).(pulumi.StringOutput)
}

// The list of group ids to assign the users to.
func (o LookupRuleResultOutput) GroupAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []string { return v.GroupAssignments }).(pulumi.StringArrayOutput)
}

// The ID of the Group Rule.
func (o LookupRuleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Group Rule.
func (o LookupRuleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Default to `ACTIVE`
func (o LookupRuleResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The list of user IDs that would be excluded when rules are processed.
func (o LookupRuleResultOutput) UsersExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []string { return v.UsersExcludeds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuleResultOutput{})
}
