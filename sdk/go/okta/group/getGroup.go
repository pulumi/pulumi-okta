// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a group from Okta.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("okta:group/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// ID of group.
	Id *string `pulumi:"id"`
	// Fetch group users, having default off cuts down on API calls.
	IncludeUsers *bool `pulumi:"includeUsers"`
	// Name of group.
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// Description of group.
	Description string `pulumi:"description"`
	// ID of group.
	Id string `pulumi:"id"`
	// Fetch group users, having default off cuts down on API calls.
	IncludeUsers *bool `pulumi:"includeUsers"`
	// Name of group.
	Name string  `pulumi:"name"`
	Type *string `pulumi:"type"`
	// Users associated with the group. This can also be done per user.
	Users []string `pulumi:"users"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupResult, error) {
			args := v.(LookupGroupArgs)
			r, err := LookupGroup(ctx, &args, opts...)
			var s LookupGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGroupResultOutput)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
	DelayReadSeconds pulumi.StringPtrInput `pulumi:"delayReadSeconds"`
	// ID of group.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Fetch group users, having default off cuts down on API calls.
	IncludeUsers pulumi.BoolPtrInput `pulumi:"includeUsers"`
	// Name of group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

// A collection of values returned by getGroup.
type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupGroupResult] {
	return pulumix.Output[LookupGroupResult]{
		OutputState: o.OutputState,
	}
}

// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
func (o LookupGroupResultOutput) DelayReadSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupResult) *string { return v.DelayReadSeconds }).(pulumi.StringPtrOutput)
}

// Description of group.
func (o LookupGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of group.
func (o LookupGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Fetch group users, having default off cuts down on API calls.
func (o LookupGroupResultOutput) IncludeUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupGroupResult) *bool { return v.IncludeUsers }).(pulumi.BoolPtrOutput)
}

// Name of group.
func (o LookupGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupGroupResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Users associated with the group. This can also be done per user.
func (o LookupGroupResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGroupResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
