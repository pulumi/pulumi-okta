// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages group owner resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/group"
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := user.NewUser(ctx, "test", &user.UserArgs{
//				FirstName: pulumi.String("TestAcc"),
//				LastName:  pulumi.String("Smith"),
//				Login:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//				Email:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			testGroup, err := group.NewGroup(ctx, "test", &group.GroupArgs{
//				Name: pulumi.String("testAcc_replace_with_uuid"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = group.NewOwner(ctx, "test", &group.OwnerArgs{
//				GroupId:        testGroup.ID(),
//				IdOfGroupOwner: test.ID(),
//				Type:           pulumi.String("USER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Owner struct {
	pulumi.CustomResourceState

	// The display name of the group owner
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The id of the group
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The user id of the group owner
	IdOfGroupOwner pulumi.StringOutput `pulumi:"idOfGroupOwner"`
	// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
	OriginId pulumi.StringOutput `pulumi:"originId"`
	// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
	OriginType pulumi.StringOutput `pulumi:"originType"`
	// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
	Resolved pulumi.BoolOutput `pulumi:"resolved"`
	// The entity type of the owner. Enum: "GROUP" "USER"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOwner registers a new resource with the given unique name, arguments, and options.
func NewOwner(ctx *pulumi.Context,
	name string, args *OwnerArgs, opts ...pulumi.ResourceOption) (*Owner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IdOfGroupOwner == nil {
		return nil, errors.New("invalid value for required argument 'IdOfGroupOwner'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Owner
	err := ctx.RegisterResource("okta:group/owner:Owner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOwner gets an existing Owner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOwner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OwnerState, opts ...pulumi.ResourceOption) (*Owner, error) {
	var resource Owner
	err := ctx.ReadResource("okta:group/owner:Owner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Owner resources.
type ownerState struct {
	// The display name of the group owner
	DisplayName *string `pulumi:"displayName"`
	// The id of the group
	GroupId *string `pulumi:"groupId"`
	// The user id of the group owner
	IdOfGroupOwner *string `pulumi:"idOfGroupOwner"`
	// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
	OriginId *string `pulumi:"originId"`
	// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
	OriginType *string `pulumi:"originType"`
	// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
	Resolved *bool `pulumi:"resolved"`
	// The entity type of the owner. Enum: "GROUP" "USER"
	Type *string `pulumi:"type"`
}

type OwnerState struct {
	// The display name of the group owner
	DisplayName pulumi.StringPtrInput
	// The id of the group
	GroupId pulumi.StringPtrInput
	// The user id of the group owner
	IdOfGroupOwner pulumi.StringPtrInput
	// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
	OriginId pulumi.StringPtrInput
	// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
	OriginType pulumi.StringPtrInput
	// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
	Resolved pulumi.BoolPtrInput
	// The entity type of the owner. Enum: "GROUP" "USER"
	Type pulumi.StringPtrInput
}

func (OwnerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ownerState)(nil)).Elem()
}

type ownerArgs struct {
	// The id of the group
	GroupId string `pulumi:"groupId"`
	// The user id of the group owner
	IdOfGroupOwner string `pulumi:"idOfGroupOwner"`
	// The entity type of the owner. Enum: "GROUP" "USER"
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Owner resource.
type OwnerArgs struct {
	// The id of the group
	GroupId pulumi.StringInput
	// The user id of the group owner
	IdOfGroupOwner pulumi.StringInput
	// The entity type of the owner. Enum: "GROUP" "USER"
	Type pulumi.StringInput
}

func (OwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ownerArgs)(nil)).Elem()
}

type OwnerInput interface {
	pulumi.Input

	ToOwnerOutput() OwnerOutput
	ToOwnerOutputWithContext(ctx context.Context) OwnerOutput
}

func (*Owner) ElementType() reflect.Type {
	return reflect.TypeOf((**Owner)(nil)).Elem()
}

func (i *Owner) ToOwnerOutput() OwnerOutput {
	return i.ToOwnerOutputWithContext(context.Background())
}

func (i *Owner) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerOutput)
}

// OwnerArrayInput is an input type that accepts OwnerArray and OwnerArrayOutput values.
// You can construct a concrete instance of `OwnerArrayInput` via:
//
//	OwnerArray{ OwnerArgs{...} }
type OwnerArrayInput interface {
	pulumi.Input

	ToOwnerArrayOutput() OwnerArrayOutput
	ToOwnerArrayOutputWithContext(context.Context) OwnerArrayOutput
}

type OwnerArray []OwnerInput

func (OwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Owner)(nil)).Elem()
}

func (i OwnerArray) ToOwnerArrayOutput() OwnerArrayOutput {
	return i.ToOwnerArrayOutputWithContext(context.Background())
}

func (i OwnerArray) ToOwnerArrayOutputWithContext(ctx context.Context) OwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerArrayOutput)
}

// OwnerMapInput is an input type that accepts OwnerMap and OwnerMapOutput values.
// You can construct a concrete instance of `OwnerMapInput` via:
//
//	OwnerMap{ "key": OwnerArgs{...} }
type OwnerMapInput interface {
	pulumi.Input

	ToOwnerMapOutput() OwnerMapOutput
	ToOwnerMapOutputWithContext(context.Context) OwnerMapOutput
}

type OwnerMap map[string]OwnerInput

func (OwnerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Owner)(nil)).Elem()
}

func (i OwnerMap) ToOwnerMapOutput() OwnerMapOutput {
	return i.ToOwnerMapOutputWithContext(context.Background())
}

func (i OwnerMap) ToOwnerMapOutputWithContext(ctx context.Context) OwnerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerMapOutput)
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

// The display name of the group owner
func (o OwnerOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The id of the group
func (o OwnerOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The user id of the group owner
func (o OwnerOutput) IdOfGroupOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.IdOfGroupOwner }).(pulumi.StringOutput)
}

// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
func (o OwnerOutput) OriginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.OriginId }).(pulumi.StringOutput)
}

// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
func (o OwnerOutput) OriginType() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.OriginType }).(pulumi.StringOutput)
}

// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
func (o OwnerOutput) Resolved() pulumi.BoolOutput {
	return o.ApplyT(func(v *Owner) pulumi.BoolOutput { return v.Resolved }).(pulumi.BoolOutput)
}

// The entity type of the owner. Enum: "GROUP" "USER"
func (o OwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type OwnerArrayOutput struct{ *pulumi.OutputState }

func (OwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Owner)(nil)).Elem()
}

func (o OwnerArrayOutput) ToOwnerArrayOutput() OwnerArrayOutput {
	return o
}

func (o OwnerArrayOutput) ToOwnerArrayOutputWithContext(ctx context.Context) OwnerArrayOutput {
	return o
}

func (o OwnerArrayOutput) Index(i pulumi.IntInput) OwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Owner {
		return vs[0].([]*Owner)[vs[1].(int)]
	}).(OwnerOutput)
}

type OwnerMapOutput struct{ *pulumi.OutputState }

func (OwnerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Owner)(nil)).Elem()
}

func (o OwnerMapOutput) ToOwnerMapOutput() OwnerMapOutput {
	return o
}

func (o OwnerMapOutput) ToOwnerMapOutputWithContext(ctx context.Context) OwnerMapOutput {
	return o
}

func (o OwnerMapOutput) MapIndex(k pulumi.StringInput) OwnerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Owner {
		return vs[0].(map[string]*Owner)[vs[1].(string)]
	}).(OwnerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerInput)(nil)).Elem(), &Owner{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerArrayInput)(nil)).Elem(), OwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerMapInput)(nil)).Elem(), OwnerMap{})
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(OwnerArrayOutput{})
	pulumi.RegisterOutputType(OwnerMapOutput{})
}
