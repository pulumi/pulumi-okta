// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Membership struct {
	pulumi.CustomResourceState

	// The ID of the Okta Group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The ID of the Okta User.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewMembership registers a new resource with the given unique name, arguments, and options.
func NewMembership(ctx *pulumi.Context,
	name string, args *MembershipArgs, opts ...pulumi.ResourceOption) (*Membership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource Membership
	err := ctx.RegisterResource("okta:group/membership:Membership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembership gets an existing Membership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipState, opts ...pulumi.ResourceOption) (*Membership, error) {
	var resource Membership
	err := ctx.ReadResource("okta:group/membership:Membership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Membership resources.
type membershipState struct {
	// The ID of the Okta Group.
	GroupId *string `pulumi:"groupId"`
	// The ID of the Okta User.
	UserId *string `pulumi:"userId"`
}

type MembershipState struct {
	// The ID of the Okta Group.
	GroupId pulumi.StringPtrInput
	// The ID of the Okta User.
	UserId pulumi.StringPtrInput
}

func (MembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipState)(nil)).Elem()
}

type membershipArgs struct {
	// The ID of the Okta Group.
	GroupId string `pulumi:"groupId"`
	// The ID of the Okta User.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a Membership resource.
type MembershipArgs struct {
	// The ID of the Okta Group.
	GroupId pulumi.StringInput
	// The ID of the Okta User.
	UserId pulumi.StringInput
}

func (MembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipArgs)(nil)).Elem()
}

type MembershipInput interface {
	pulumi.Input

	ToMembershipOutput() MembershipOutput
	ToMembershipOutputWithContext(ctx context.Context) MembershipOutput
}

func (*Membership) ElementType() reflect.Type {
	return reflect.TypeOf((*Membership)(nil))
}

func (i *Membership) ToMembershipOutput() MembershipOutput {
	return i.ToMembershipOutputWithContext(context.Background())
}

func (i *Membership) ToMembershipOutputWithContext(ctx context.Context) MembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipOutput)
}

type MembershipOutput struct {
	*pulumi.OutputState
}

func (MembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Membership)(nil))
}

func (o MembershipOutput) ToMembershipOutput() MembershipOutput {
	return o
}

func (o MembershipOutput) ToMembershipOutputWithContext(ctx context.Context) MembershipOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MembershipOutput{})
}
