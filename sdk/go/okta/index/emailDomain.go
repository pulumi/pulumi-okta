// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package index

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EmailDomain struct {
	pulumi.CustomResourceState

	// Brand id
	BrandId pulumi.StringOutput `pulumi:"brandId"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// TXT and cname records to be registered for the email Domain
	DnsValidationRecords EmailDomainDnsValidationRecordArrayOutput `pulumi:"dnsValidationRecords"`
	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// User name
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
	ValidationStatus pulumi.StringOutput `pulumi:"validationStatus"`
}

// NewEmailDomain registers a new resource with the given unique name, arguments, and options.
func NewEmailDomain(ctx *pulumi.Context,
	name string, args *EmailDomainArgs, opts ...pulumi.ResourceOption) (*EmailDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrandId == nil {
		return nil, errors.New("invalid value for required argument 'BrandId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailDomain
	err := ctx.RegisterResource("okta:Index/emailDomain:EmailDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailDomain gets an existing EmailDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailDomainState, opts ...pulumi.ResourceOption) (*EmailDomain, error) {
	var resource EmailDomain
	err := ctx.ReadResource("okta:Index/emailDomain:EmailDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailDomain resources.
type emailDomainState struct {
	// Brand id
	BrandId *string `pulumi:"brandId"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// TXT and cname records to be registered for the email Domain
	DnsValidationRecords []EmailDomainDnsValidationRecord `pulumi:"dnsValidationRecords"`
	// Domain name
	Domain *string `pulumi:"domain"`
	// User name
	UserName *string `pulumi:"userName"`
	// Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
	ValidationStatus *string `pulumi:"validationStatus"`
}

type EmailDomainState struct {
	// Brand id
	BrandId pulumi.StringPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// TXT and cname records to be registered for the email Domain
	DnsValidationRecords EmailDomainDnsValidationRecordArrayInput
	// Domain name
	Domain pulumi.StringPtrInput
	// User name
	UserName pulumi.StringPtrInput
	// Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
	ValidationStatus pulumi.StringPtrInput
}

func (EmailDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailDomainState)(nil)).Elem()
}

type emailDomainArgs struct {
	// Brand id
	BrandId string `pulumi:"brandId"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Domain name
	Domain string `pulumi:"domain"`
	// User name
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a EmailDomain resource.
type EmailDomainArgs struct {
	// Brand id
	BrandId pulumi.StringInput
	// Display name
	DisplayName pulumi.StringInput
	// Domain name
	Domain pulumi.StringInput
	// User name
	UserName pulumi.StringInput
}

func (EmailDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailDomainArgs)(nil)).Elem()
}

type EmailDomainInput interface {
	pulumi.Input

	ToEmailDomainOutput() EmailDomainOutput
	ToEmailDomainOutputWithContext(ctx context.Context) EmailDomainOutput
}

func (*EmailDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailDomain)(nil)).Elem()
}

func (i *EmailDomain) ToEmailDomainOutput() EmailDomainOutput {
	return i.ToEmailDomainOutputWithContext(context.Background())
}

func (i *EmailDomain) ToEmailDomainOutputWithContext(ctx context.Context) EmailDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDomainOutput)
}

func (i *EmailDomain) ToOutput(ctx context.Context) pulumix.Output[*EmailDomain] {
	return pulumix.Output[*EmailDomain]{
		OutputState: i.ToEmailDomainOutputWithContext(ctx).OutputState,
	}
}

// EmailDomainArrayInput is an input type that accepts EmailDomainArray and EmailDomainArrayOutput values.
// You can construct a concrete instance of `EmailDomainArrayInput` via:
//
//	EmailDomainArray{ EmailDomainArgs{...} }
type EmailDomainArrayInput interface {
	pulumi.Input

	ToEmailDomainArrayOutput() EmailDomainArrayOutput
	ToEmailDomainArrayOutputWithContext(context.Context) EmailDomainArrayOutput
}

type EmailDomainArray []EmailDomainInput

func (EmailDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailDomain)(nil)).Elem()
}

func (i EmailDomainArray) ToEmailDomainArrayOutput() EmailDomainArrayOutput {
	return i.ToEmailDomainArrayOutputWithContext(context.Background())
}

func (i EmailDomainArray) ToEmailDomainArrayOutputWithContext(ctx context.Context) EmailDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDomainArrayOutput)
}

func (i EmailDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]*EmailDomain] {
	return pulumix.Output[[]*EmailDomain]{
		OutputState: i.ToEmailDomainArrayOutputWithContext(ctx).OutputState,
	}
}

// EmailDomainMapInput is an input type that accepts EmailDomainMap and EmailDomainMapOutput values.
// You can construct a concrete instance of `EmailDomainMapInput` via:
//
//	EmailDomainMap{ "key": EmailDomainArgs{...} }
type EmailDomainMapInput interface {
	pulumi.Input

	ToEmailDomainMapOutput() EmailDomainMapOutput
	ToEmailDomainMapOutputWithContext(context.Context) EmailDomainMapOutput
}

type EmailDomainMap map[string]EmailDomainInput

func (EmailDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailDomain)(nil)).Elem()
}

func (i EmailDomainMap) ToEmailDomainMapOutput() EmailDomainMapOutput {
	return i.ToEmailDomainMapOutputWithContext(context.Background())
}

func (i EmailDomainMap) ToEmailDomainMapOutputWithContext(ctx context.Context) EmailDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDomainMapOutput)
}

func (i EmailDomainMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailDomain] {
	return pulumix.Output[map[string]*EmailDomain]{
		OutputState: i.ToEmailDomainMapOutputWithContext(ctx).OutputState,
	}
}

type EmailDomainOutput struct{ *pulumi.OutputState }

func (EmailDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailDomain)(nil)).Elem()
}

func (o EmailDomainOutput) ToEmailDomainOutput() EmailDomainOutput {
	return o
}

func (o EmailDomainOutput) ToEmailDomainOutputWithContext(ctx context.Context) EmailDomainOutput {
	return o
}

func (o EmailDomainOutput) ToOutput(ctx context.Context) pulumix.Output[*EmailDomain] {
	return pulumix.Output[*EmailDomain]{
		OutputState: o.OutputState,
	}
}

// Brand id
func (o EmailDomainOutput) BrandId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailDomain) pulumi.StringOutput { return v.BrandId }).(pulumi.StringOutput)
}

// Display name
func (o EmailDomainOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailDomain) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// TXT and cname records to be registered for the email Domain
func (o EmailDomainOutput) DnsValidationRecords() EmailDomainDnsValidationRecordArrayOutput {
	return o.ApplyT(func(v *EmailDomain) EmailDomainDnsValidationRecordArrayOutput { return v.DnsValidationRecords }).(EmailDomainDnsValidationRecordArrayOutput)
}

// Domain name
func (o EmailDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// User name
func (o EmailDomainOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailDomain) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
func (o EmailDomainOutput) ValidationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailDomain) pulumi.StringOutput { return v.ValidationStatus }).(pulumi.StringOutput)
}

type EmailDomainArrayOutput struct{ *pulumi.OutputState }

func (EmailDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailDomain)(nil)).Elem()
}

func (o EmailDomainArrayOutput) ToEmailDomainArrayOutput() EmailDomainArrayOutput {
	return o
}

func (o EmailDomainArrayOutput) ToEmailDomainArrayOutputWithContext(ctx context.Context) EmailDomainArrayOutput {
	return o
}

func (o EmailDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EmailDomain] {
	return pulumix.Output[[]*EmailDomain]{
		OutputState: o.OutputState,
	}
}

func (o EmailDomainArrayOutput) Index(i pulumi.IntInput) EmailDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailDomain {
		return vs[0].([]*EmailDomain)[vs[1].(int)]
	}).(EmailDomainOutput)
}

type EmailDomainMapOutput struct{ *pulumi.OutputState }

func (EmailDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailDomain)(nil)).Elem()
}

func (o EmailDomainMapOutput) ToEmailDomainMapOutput() EmailDomainMapOutput {
	return o
}

func (o EmailDomainMapOutput) ToEmailDomainMapOutputWithContext(ctx context.Context) EmailDomainMapOutput {
	return o
}

func (o EmailDomainMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailDomain] {
	return pulumix.Output[map[string]*EmailDomain]{
		OutputState: o.OutputState,
	}
}

func (o EmailDomainMapOutput) MapIndex(k pulumi.StringInput) EmailDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailDomain {
		return vs[0].(map[string]*EmailDomain)[vs[1].(string)]
	}).(EmailDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailDomainInput)(nil)).Elem(), &EmailDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailDomainArrayInput)(nil)).Elem(), EmailDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailDomainMapInput)(nil)).Elem(), EmailDomainMap{})
	pulumi.RegisterOutputType(EmailDomainOutput{})
	pulumi.RegisterOutputType(EmailDomainArrayOutput{})
	pulumi.RegisterOutputType(EmailDomainMapOutput{})
}
