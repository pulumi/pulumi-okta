// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to manage a set of admin roles for a specific user.
//
// This resource allows you to manage admin roles for a single user, independent of the user schema itself.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := user.NewUser(ctx, "test", &user.UserArgs{
//				FirstName: pulumi.String("TestAcc"),
//				LastName:  pulumi.String("Smith"),
//				Login:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//				Email:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewUserAdminRoles(ctx, "test", &okta.UserAdminRolesArgs{
//				UserId: test.ID(),
//				AdminRoles: pulumi.StringArray{
//					pulumi.String("APP_ADMIN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Existing user admin roles can be imported via the Okta User ID.
//
// ```sh
// $ pulumi import okta:index/userAdminRoles:UserAdminRoles example &#60;user id&#62;
// ```
type UserAdminRoles struct {
	pulumi.CustomResourceState

	// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
	AdminRoles pulumi.StringArrayOutput `pulumi:"adminRoles"`
	// When this setting is enabled, the admins won't receive any of the default Okta
	// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrOutput `pulumi:"disableNotifications"`
	// Okta user ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserAdminRoles registers a new resource with the given unique name, arguments, and options.
func NewUserAdminRoles(ctx *pulumi.Context,
	name string, args *UserAdminRolesArgs, opts ...pulumi.ResourceOption) (*UserAdminRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminRoles == nil {
		return nil, errors.New("invalid value for required argument 'AdminRoles'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAdminRoles
	err := ctx.RegisterResource("okta:index/userAdminRoles:UserAdminRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAdminRoles gets an existing UserAdminRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAdminRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAdminRolesState, opts ...pulumi.ResourceOption) (*UserAdminRoles, error) {
	var resource UserAdminRoles
	err := ctx.ReadResource("okta:index/userAdminRoles:UserAdminRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAdminRoles resources.
type userAdminRolesState struct {
	// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
	AdminRoles []string `pulumi:"adminRoles"`
	// When this setting is enabled, the admins won't receive any of the default Okta
	// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// Okta user ID.
	UserId *string `pulumi:"userId"`
}

type UserAdminRolesState struct {
	// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
	AdminRoles pulumi.StringArrayInput
	// When this setting is enabled, the admins won't receive any of the default Okta
	// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrInput
	// Okta user ID.
	UserId pulumi.StringPtrInput
}

func (UserAdminRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAdminRolesState)(nil)).Elem()
}

type userAdminRolesArgs struct {
	// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
	AdminRoles []string `pulumi:"adminRoles"`
	// When this setting is enabled, the admins won't receive any of the default Okta
	// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// Okta user ID.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserAdminRoles resource.
type UserAdminRolesArgs struct {
	// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
	AdminRoles pulumi.StringArrayInput
	// When this setting is enabled, the admins won't receive any of the default Okta
	// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
	DisableNotifications pulumi.BoolPtrInput
	// Okta user ID.
	UserId pulumi.StringInput
}

func (UserAdminRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAdminRolesArgs)(nil)).Elem()
}

type UserAdminRolesInput interface {
	pulumi.Input

	ToUserAdminRolesOutput() UserAdminRolesOutput
	ToUserAdminRolesOutputWithContext(ctx context.Context) UserAdminRolesOutput
}

func (*UserAdminRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAdminRoles)(nil)).Elem()
}

func (i *UserAdminRoles) ToUserAdminRolesOutput() UserAdminRolesOutput {
	return i.ToUserAdminRolesOutputWithContext(context.Background())
}

func (i *UserAdminRoles) ToUserAdminRolesOutputWithContext(ctx context.Context) UserAdminRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdminRolesOutput)
}

// UserAdminRolesArrayInput is an input type that accepts UserAdminRolesArray and UserAdminRolesArrayOutput values.
// You can construct a concrete instance of `UserAdminRolesArrayInput` via:
//
//	UserAdminRolesArray{ UserAdminRolesArgs{...} }
type UserAdminRolesArrayInput interface {
	pulumi.Input

	ToUserAdminRolesArrayOutput() UserAdminRolesArrayOutput
	ToUserAdminRolesArrayOutputWithContext(context.Context) UserAdminRolesArrayOutput
}

type UserAdminRolesArray []UserAdminRolesInput

func (UserAdminRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAdminRoles)(nil)).Elem()
}

func (i UserAdminRolesArray) ToUserAdminRolesArrayOutput() UserAdminRolesArrayOutput {
	return i.ToUserAdminRolesArrayOutputWithContext(context.Background())
}

func (i UserAdminRolesArray) ToUserAdminRolesArrayOutputWithContext(ctx context.Context) UserAdminRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdminRolesArrayOutput)
}

// UserAdminRolesMapInput is an input type that accepts UserAdminRolesMap and UserAdminRolesMapOutput values.
// You can construct a concrete instance of `UserAdminRolesMapInput` via:
//
//	UserAdminRolesMap{ "key": UserAdminRolesArgs{...} }
type UserAdminRolesMapInput interface {
	pulumi.Input

	ToUserAdminRolesMapOutput() UserAdminRolesMapOutput
	ToUserAdminRolesMapOutputWithContext(context.Context) UserAdminRolesMapOutput
}

type UserAdminRolesMap map[string]UserAdminRolesInput

func (UserAdminRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAdminRoles)(nil)).Elem()
}

func (i UserAdminRolesMap) ToUserAdminRolesMapOutput() UserAdminRolesMapOutput {
	return i.ToUserAdminRolesMapOutputWithContext(context.Background())
}

func (i UserAdminRolesMap) ToUserAdminRolesMapOutputWithContext(ctx context.Context) UserAdminRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAdminRolesMapOutput)
}

type UserAdminRolesOutput struct{ *pulumi.OutputState }

func (UserAdminRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAdminRoles)(nil)).Elem()
}

func (o UserAdminRolesOutput) ToUserAdminRolesOutput() UserAdminRolesOutput {
	return o
}

func (o UserAdminRolesOutput) ToUserAdminRolesOutputWithContext(ctx context.Context) UserAdminRolesOutput {
	return o
}

// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
func (o UserAdminRolesOutput) AdminRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAdminRoles) pulumi.StringArrayOutput { return v.AdminRoles }).(pulumi.StringArrayOutput)
}

// When this setting is enabled, the admins won't receive any of the default Okta
// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
func (o UserAdminRolesOutput) DisableNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserAdminRoles) pulumi.BoolPtrOutput { return v.DisableNotifications }).(pulumi.BoolPtrOutput)
}

// Okta user ID.
func (o UserAdminRolesOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAdminRoles) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserAdminRolesArrayOutput struct{ *pulumi.OutputState }

func (UserAdminRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAdminRoles)(nil)).Elem()
}

func (o UserAdminRolesArrayOutput) ToUserAdminRolesArrayOutput() UserAdminRolesArrayOutput {
	return o
}

func (o UserAdminRolesArrayOutput) ToUserAdminRolesArrayOutputWithContext(ctx context.Context) UserAdminRolesArrayOutput {
	return o
}

func (o UserAdminRolesArrayOutput) Index(i pulumi.IntInput) UserAdminRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAdminRoles {
		return vs[0].([]*UserAdminRoles)[vs[1].(int)]
	}).(UserAdminRolesOutput)
}

type UserAdminRolesMapOutput struct{ *pulumi.OutputState }

func (UserAdminRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAdminRoles)(nil)).Elem()
}

func (o UserAdminRolesMapOutput) ToUserAdminRolesMapOutput() UserAdminRolesMapOutput {
	return o
}

func (o UserAdminRolesMapOutput) ToUserAdminRolesMapOutputWithContext(ctx context.Context) UserAdminRolesMapOutput {
	return o
}

func (o UserAdminRolesMapOutput) MapIndex(k pulumi.StringInput) UserAdminRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAdminRoles {
		return vs[0].(map[string]*UserAdminRoles)[vs[1].(string)]
	}).(UserAdminRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdminRolesInput)(nil)).Elem(), &UserAdminRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdminRolesArrayInput)(nil)).Elem(), UserAdminRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAdminRolesMapInput)(nil)).Elem(), UserAdminRolesMap{})
	pulumi.RegisterOutputType(UserAdminRolesOutput{})
	pulumi.RegisterOutputType(UserAdminRolesArrayOutput{})
	pulumi.RegisterOutputType(UserAdminRolesMapOutput{})
}
