// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages request conditions. This resource allows you to create and configure an Okta [request-condition](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Conditions/#tag/Request-Conditions).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewRequestCondition(ctx, "example", &okta.RequestConditionArgs{
//				ResourceId:         pulumi.String("<resource_id>"),
//				ApprovalSequenceId: pulumi.String("<approval_sequence_id>"),
//				Name:               pulumi.String("<name>"),
//				AccessScopeSettings: okta.RequestConditionAccessScopeSettingsArgs{
//					map[string]interface{}{
//						"type": "RESOURCE_DEFAULT",
//					},
//				},
//				RequesterSettings: okta.RequestConditionRequesterSettingsArgs{
//					map[string]interface{}{
//						"type": "EVERYONE",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/requestCondition:RequestCondition example <resource_id>/<request_condition_id>
// ```
type RequestCondition struct {
	pulumi.CustomResourceState

	// The access duration settings for the request condition
	AccessDurationSettings RequestConditionAccessDurationSettingsPtrOutput `pulumi:"accessDurationSettings"`
	AccessScopeSettings    RequestConditionAccessScopeSettingsPtrOutput    `pulumi:"accessScopeSettings"`
	// The ID of the approval sequence.
	ApprovalSequenceId pulumi.StringOutput `pulumi:"approvalSequenceId"`
	// The date and time when the request condition was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The id of the user who created the request condition.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The description of the request condition.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The date and time when the request condition was last updated.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The id of the user who last updated the request condition.
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// The name of the request condition.
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the request condition. Lower numbers indicate higher priority.
	Priority          pulumi.IntOutput                           `pulumi:"priority"`
	RequesterSettings RequestConditionRequesterSettingsPtrOutput `pulumi:"requesterSettings"`
	// The id of the resource in Okta ID format.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewRequestCondition registers a new resource with the given unique name, arguments, and options.
func NewRequestCondition(ctx *pulumi.Context,
	name string, args *RequestConditionArgs, opts ...pulumi.ResourceOption) (*RequestCondition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApprovalSequenceId == nil {
		return nil, errors.New("invalid value for required argument 'ApprovalSequenceId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RequestCondition
	err := ctx.RegisterResource("okta:index/requestCondition:RequestCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRequestCondition gets an existing RequestCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRequestCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RequestConditionState, opts ...pulumi.ResourceOption) (*RequestCondition, error) {
	var resource RequestCondition
	err := ctx.ReadResource("okta:index/requestCondition:RequestCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RequestCondition resources.
type requestConditionState struct {
	// The access duration settings for the request condition
	AccessDurationSettings *RequestConditionAccessDurationSettings `pulumi:"accessDurationSettings"`
	AccessScopeSettings    *RequestConditionAccessScopeSettings    `pulumi:"accessScopeSettings"`
	// The ID of the approval sequence.
	ApprovalSequenceId *string `pulumi:"approvalSequenceId"`
	// The date and time when the request condition was created.
	Created *string `pulumi:"created"`
	// The id of the user who created the request condition.
	CreatedBy *string `pulumi:"createdBy"`
	// The description of the request condition.
	Description *string `pulumi:"description"`
	// The date and time when the request condition was last updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// The id of the user who last updated the request condition.
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// The name of the request condition.
	Name *string `pulumi:"name"`
	// The priority of the request condition. Lower numbers indicate higher priority.
	Priority          *int                               `pulumi:"priority"`
	RequesterSettings *RequestConditionRequesterSettings `pulumi:"requesterSettings"`
	// The id of the resource in Okta ID format.
	ResourceId *string `pulumi:"resourceId"`
	// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
	Status *string `pulumi:"status"`
}

type RequestConditionState struct {
	// The access duration settings for the request condition
	AccessDurationSettings RequestConditionAccessDurationSettingsPtrInput
	AccessScopeSettings    RequestConditionAccessScopeSettingsPtrInput
	// The ID of the approval sequence.
	ApprovalSequenceId pulumi.StringPtrInput
	// The date and time when the request condition was created.
	Created pulumi.StringPtrInput
	// The id of the user who created the request condition.
	CreatedBy pulumi.StringPtrInput
	// The description of the request condition.
	Description pulumi.StringPtrInput
	// The date and time when the request condition was last updated.
	LastUpdated pulumi.StringPtrInput
	// The id of the user who last updated the request condition.
	LastUpdatedBy pulumi.StringPtrInput
	// The name of the request condition.
	Name pulumi.StringPtrInput
	// The priority of the request condition. Lower numbers indicate higher priority.
	Priority          pulumi.IntPtrInput
	RequesterSettings RequestConditionRequesterSettingsPtrInput
	// The id of the resource in Okta ID format.
	ResourceId pulumi.StringPtrInput
	// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
	Status pulumi.StringPtrInput
}

func (RequestConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*requestConditionState)(nil)).Elem()
}

type requestConditionArgs struct {
	// The access duration settings for the request condition
	AccessDurationSettings *RequestConditionAccessDurationSettings `pulumi:"accessDurationSettings"`
	AccessScopeSettings    *RequestConditionAccessScopeSettings    `pulumi:"accessScopeSettings"`
	// The ID of the approval sequence.
	ApprovalSequenceId string `pulumi:"approvalSequenceId"`
	// The description of the request condition.
	Description *string `pulumi:"description"`
	// The name of the request condition.
	Name *string `pulumi:"name"`
	// The priority of the request condition. Lower numbers indicate higher priority.
	Priority          *int                               `pulumi:"priority"`
	RequesterSettings *RequestConditionRequesterSettings `pulumi:"requesterSettings"`
	// The id of the resource in Okta ID format.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a RequestCondition resource.
type RequestConditionArgs struct {
	// The access duration settings for the request condition
	AccessDurationSettings RequestConditionAccessDurationSettingsPtrInput
	AccessScopeSettings    RequestConditionAccessScopeSettingsPtrInput
	// The ID of the approval sequence.
	ApprovalSequenceId pulumi.StringInput
	// The description of the request condition.
	Description pulumi.StringPtrInput
	// The name of the request condition.
	Name pulumi.StringPtrInput
	// The priority of the request condition. Lower numbers indicate higher priority.
	Priority          pulumi.IntPtrInput
	RequesterSettings RequestConditionRequesterSettingsPtrInput
	// The id of the resource in Okta ID format.
	ResourceId pulumi.StringInput
}

func (RequestConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*requestConditionArgs)(nil)).Elem()
}

type RequestConditionInput interface {
	pulumi.Input

	ToRequestConditionOutput() RequestConditionOutput
	ToRequestConditionOutputWithContext(ctx context.Context) RequestConditionOutput
}

func (*RequestCondition) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestCondition)(nil)).Elem()
}

func (i *RequestCondition) ToRequestConditionOutput() RequestConditionOutput {
	return i.ToRequestConditionOutputWithContext(context.Background())
}

func (i *RequestCondition) ToRequestConditionOutputWithContext(ctx context.Context) RequestConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConditionOutput)
}

// RequestConditionArrayInput is an input type that accepts RequestConditionArray and RequestConditionArrayOutput values.
// You can construct a concrete instance of `RequestConditionArrayInput` via:
//
//	RequestConditionArray{ RequestConditionArgs{...} }
type RequestConditionArrayInput interface {
	pulumi.Input

	ToRequestConditionArrayOutput() RequestConditionArrayOutput
	ToRequestConditionArrayOutputWithContext(context.Context) RequestConditionArrayOutput
}

type RequestConditionArray []RequestConditionInput

func (RequestConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RequestCondition)(nil)).Elem()
}

func (i RequestConditionArray) ToRequestConditionArrayOutput() RequestConditionArrayOutput {
	return i.ToRequestConditionArrayOutputWithContext(context.Background())
}

func (i RequestConditionArray) ToRequestConditionArrayOutputWithContext(ctx context.Context) RequestConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConditionArrayOutput)
}

// RequestConditionMapInput is an input type that accepts RequestConditionMap and RequestConditionMapOutput values.
// You can construct a concrete instance of `RequestConditionMapInput` via:
//
//	RequestConditionMap{ "key": RequestConditionArgs{...} }
type RequestConditionMapInput interface {
	pulumi.Input

	ToRequestConditionMapOutput() RequestConditionMapOutput
	ToRequestConditionMapOutputWithContext(context.Context) RequestConditionMapOutput
}

type RequestConditionMap map[string]RequestConditionInput

func (RequestConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RequestCondition)(nil)).Elem()
}

func (i RequestConditionMap) ToRequestConditionMapOutput() RequestConditionMapOutput {
	return i.ToRequestConditionMapOutputWithContext(context.Background())
}

func (i RequestConditionMap) ToRequestConditionMapOutputWithContext(ctx context.Context) RequestConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConditionMapOutput)
}

type RequestConditionOutput struct{ *pulumi.OutputState }

func (RequestConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestCondition)(nil)).Elem()
}

func (o RequestConditionOutput) ToRequestConditionOutput() RequestConditionOutput {
	return o
}

func (o RequestConditionOutput) ToRequestConditionOutputWithContext(ctx context.Context) RequestConditionOutput {
	return o
}

// The access duration settings for the request condition
func (o RequestConditionOutput) AccessDurationSettings() RequestConditionAccessDurationSettingsPtrOutput {
	return o.ApplyT(func(v *RequestCondition) RequestConditionAccessDurationSettingsPtrOutput {
		return v.AccessDurationSettings
	}).(RequestConditionAccessDurationSettingsPtrOutput)
}

func (o RequestConditionOutput) AccessScopeSettings() RequestConditionAccessScopeSettingsPtrOutput {
	return o.ApplyT(func(v *RequestCondition) RequestConditionAccessScopeSettingsPtrOutput { return v.AccessScopeSettings }).(RequestConditionAccessScopeSettingsPtrOutput)
}

// The ID of the approval sequence.
func (o RequestConditionOutput) ApprovalSequenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.ApprovalSequenceId }).(pulumi.StringOutput)
}

// The date and time when the request condition was created.
func (o RequestConditionOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The id of the user who created the request condition.
func (o RequestConditionOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The description of the request condition.
func (o RequestConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The date and time when the request condition was last updated.
func (o RequestConditionOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The id of the user who last updated the request condition.
func (o RequestConditionOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// The name of the request condition.
func (o RequestConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority of the request condition. Lower numbers indicate higher priority.
func (o RequestConditionOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o RequestConditionOutput) RequesterSettings() RequestConditionRequesterSettingsPtrOutput {
	return o.ApplyT(func(v *RequestCondition) RequestConditionRequesterSettingsPtrOutput { return v.RequesterSettings }).(RequestConditionRequesterSettingsPtrOutput)
}

// The id of the resource in Okta ID format.
func (o RequestConditionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
func (o RequestConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestCondition) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type RequestConditionArrayOutput struct{ *pulumi.OutputState }

func (RequestConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RequestCondition)(nil)).Elem()
}

func (o RequestConditionArrayOutput) ToRequestConditionArrayOutput() RequestConditionArrayOutput {
	return o
}

func (o RequestConditionArrayOutput) ToRequestConditionArrayOutputWithContext(ctx context.Context) RequestConditionArrayOutput {
	return o
}

func (o RequestConditionArrayOutput) Index(i pulumi.IntInput) RequestConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RequestCondition {
		return vs[0].([]*RequestCondition)[vs[1].(int)]
	}).(RequestConditionOutput)
}

type RequestConditionMapOutput struct{ *pulumi.OutputState }

func (RequestConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RequestCondition)(nil)).Elem()
}

func (o RequestConditionMapOutput) ToRequestConditionMapOutput() RequestConditionMapOutput {
	return o
}

func (o RequestConditionMapOutput) ToRequestConditionMapOutputWithContext(ctx context.Context) RequestConditionMapOutput {
	return o
}

func (o RequestConditionMapOutput) MapIndex(k pulumi.StringInput) RequestConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RequestCondition {
		return vs[0].(map[string]*RequestCondition)[vs[1].(string)]
	}).(RequestConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RequestConditionInput)(nil)).Elem(), &RequestCondition{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestConditionArrayInput)(nil)).Elem(), RequestConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestConditionMapInput)(nil)).Elem(), RequestConditionMap{})
	pulumi.RegisterOutputType(RequestConditionOutput{})
	pulumi.RegisterOutputType(RequestConditionArrayOutput{})
	pulumi.RegisterOutputType(RequestConditionMapOutput{})
}
