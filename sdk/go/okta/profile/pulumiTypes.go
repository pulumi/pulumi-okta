// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package profile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MappingMapping struct {
	Expression string  `pulumi:"expression"`
	Id         string  `pulumi:"id"`
	PushStatus *string `pulumi:"pushStatus"`
}

// MappingMappingInput is an input type that accepts MappingMappingArgs and MappingMappingOutput values.
// You can construct a concrete instance of `MappingMappingInput` via:
//
// 		 MappingMappingArgs{...}
//
type MappingMappingInput interface {
	pulumi.Input

	ToMappingMappingOutput() MappingMappingOutput
	ToMappingMappingOutputWithContext(context.Context) MappingMappingOutput
}

type MappingMappingArgs struct {
	Expression pulumi.StringInput    `pulumi:"expression"`
	Id         pulumi.StringInput    `pulumi:"id"`
	PushStatus pulumi.StringPtrInput `pulumi:"pushStatus"`
}

func (MappingMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingMapping)(nil)).Elem()
}

func (i MappingMappingArgs) ToMappingMappingOutput() MappingMappingOutput {
	return i.ToMappingMappingOutputWithContext(context.Background())
}

func (i MappingMappingArgs) ToMappingMappingOutputWithContext(ctx context.Context) MappingMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingMappingOutput)
}

// MappingMappingArrayInput is an input type that accepts MappingMappingArray and MappingMappingArrayOutput values.
// You can construct a concrete instance of `MappingMappingArrayInput` via:
//
// 		 MappingMappingArray{ MappingMappingArgs{...} }
//
type MappingMappingArrayInput interface {
	pulumi.Input

	ToMappingMappingArrayOutput() MappingMappingArrayOutput
	ToMappingMappingArrayOutputWithContext(context.Context) MappingMappingArrayOutput
}

type MappingMappingArray []MappingMappingInput

func (MappingMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingMapping)(nil)).Elem()
}

func (i MappingMappingArray) ToMappingMappingArrayOutput() MappingMappingArrayOutput {
	return i.ToMappingMappingArrayOutputWithContext(context.Background())
}

func (i MappingMappingArray) ToMappingMappingArrayOutputWithContext(ctx context.Context) MappingMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingMappingArrayOutput)
}

type MappingMappingOutput struct{ *pulumi.OutputState }

func (MappingMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingMapping)(nil)).Elem()
}

func (o MappingMappingOutput) ToMappingMappingOutput() MappingMappingOutput {
	return o
}

func (o MappingMappingOutput) ToMappingMappingOutputWithContext(ctx context.Context) MappingMappingOutput {
	return o
}

func (o MappingMappingOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v MappingMapping) string { return v.Expression }).(pulumi.StringOutput)
}

func (o MappingMappingOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MappingMapping) string { return v.Id }).(pulumi.StringOutput)
}

func (o MappingMappingOutput) PushStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingMapping) *string { return v.PushStatus }).(pulumi.StringPtrOutput)
}

type MappingMappingArrayOutput struct{ *pulumi.OutputState }

func (MappingMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingMapping)(nil)).Elem()
}

func (o MappingMappingArrayOutput) ToMappingMappingArrayOutput() MappingMappingArrayOutput {
	return o
}

func (o MappingMappingArrayOutput) ToMappingMappingArrayOutputWithContext(ctx context.Context) MappingMappingArrayOutput {
	return o
}

func (o MappingMappingArrayOutput) Index(i pulumi.IntInput) MappingMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MappingMapping {
		return vs[0].([]MappingMapping)[vs[1].(int)]
	}).(MappingMappingOutput)
}

func init() {
	pulumi.RegisterOutputType(MappingMappingOutput{})
	pulumi.RegisterOutputType(MappingMappingArrayOutput{})
}
