// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package profile

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a profile mapping.
//
// This resource allows you to manage a profile mapping by source id.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/profile"
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		user, err := user.GetUserProfileMappingSource(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = profile.NewMapping(ctx, "example", &profile.MappingArgs{
// 			DeleteWhenAbsent: pulumi.Bool(true),
// 			Mappings: profile.MappingMappingArray{
// 				&profile.MappingMappingArgs{
// 					Expression: pulumi.String("appuser.firstName"),
// 					Id:         pulumi.String("firstName"),
// 				},
// 				&profile.MappingMappingArgs{
// 					Expression: pulumi.String("appuser.lastName"),
// 					Id:         pulumi.String("lastName"),
// 				},
// 				&profile.MappingMappingArgs{
// 					Expression: pulumi.String("appuser.email"),
// 					Id:         pulumi.String("email"),
// 				},
// 				&profile.MappingMappingArgs{
// 					Expression: pulumi.String("appuser.email"),
// 					Id:         pulumi.String("login"),
// 				},
// 			},
// 			SourceId: pulumi.String("<source id>"),
// 			TargetId: pulumi.String(user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Mapping struct {
	pulumi.CustomResourceState

	// Tells the provider whether to attempt to delete missing mappings under profile mapping.
	DeleteWhenAbsent pulumi.BoolPtrOutput `pulumi:"deleteWhenAbsent"`
	// Priority of the policy.
	Mappings MappingMappingArrayOutput `pulumi:"mappings"`
	// Source id of the profile mapping.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// Name of the mapping source.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// ID of the mapping source.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// ID of the mapping target.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// Name of the mapping target.
	TargetName pulumi.StringOutput `pulumi:"targetName"`
	// ID of the mapping target.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewMapping registers a new resource with the given unique name, arguments, and options.
func NewMapping(ctx *pulumi.Context,
	name string, args *MappingArgs, opts ...pulumi.ResourceOption) (*Mapping, error) {
	if args == nil || args.SourceId == nil {
		return nil, errors.New("missing required argument 'SourceId'")
	}
	if args == nil || args.TargetId == nil {
		return nil, errors.New("missing required argument 'TargetId'")
	}
	if args == nil {
		args = &MappingArgs{}
	}
	var resource Mapping
	err := ctx.RegisterResource("okta:profile/mapping:Mapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMapping gets an existing Mapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MappingState, opts ...pulumi.ResourceOption) (*Mapping, error) {
	var resource Mapping
	err := ctx.ReadResource("okta:profile/mapping:Mapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mapping resources.
type mappingState struct {
	// Tells the provider whether to attempt to delete missing mappings under profile mapping.
	DeleteWhenAbsent *bool `pulumi:"deleteWhenAbsent"`
	// Priority of the policy.
	Mappings []MappingMapping `pulumi:"mappings"`
	// Source id of the profile mapping.
	SourceId *string `pulumi:"sourceId"`
	// Name of the mapping source.
	SourceName *string `pulumi:"sourceName"`
	// ID of the mapping source.
	SourceType *string `pulumi:"sourceType"`
	// ID of the mapping target.
	TargetId *string `pulumi:"targetId"`
	// Name of the mapping target.
	TargetName *string `pulumi:"targetName"`
	// ID of the mapping target.
	TargetType *string `pulumi:"targetType"`
}

type MappingState struct {
	// Tells the provider whether to attempt to delete missing mappings under profile mapping.
	DeleteWhenAbsent pulumi.BoolPtrInput
	// Priority of the policy.
	Mappings MappingMappingArrayInput
	// Source id of the profile mapping.
	SourceId pulumi.StringPtrInput
	// Name of the mapping source.
	SourceName pulumi.StringPtrInput
	// ID of the mapping source.
	SourceType pulumi.StringPtrInput
	// ID of the mapping target.
	TargetId pulumi.StringPtrInput
	// Name of the mapping target.
	TargetName pulumi.StringPtrInput
	// ID of the mapping target.
	TargetType pulumi.StringPtrInput
}

func (MappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingState)(nil)).Elem()
}

type mappingArgs struct {
	// Tells the provider whether to attempt to delete missing mappings under profile mapping.
	DeleteWhenAbsent *bool `pulumi:"deleteWhenAbsent"`
	// Priority of the policy.
	Mappings []MappingMapping `pulumi:"mappings"`
	// Source id of the profile mapping.
	SourceId string `pulumi:"sourceId"`
	// ID of the mapping target.
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a Mapping resource.
type MappingArgs struct {
	// Tells the provider whether to attempt to delete missing mappings under profile mapping.
	DeleteWhenAbsent pulumi.BoolPtrInput
	// Priority of the policy.
	Mappings MappingMappingArrayInput
	// Source id of the profile mapping.
	SourceId pulumi.StringInput
	// ID of the mapping target.
	TargetId pulumi.StringInput
}

func (MappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingArgs)(nil)).Elem()
}
