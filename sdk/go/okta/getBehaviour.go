// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a behavior from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.LookupBehaviour(ctx, &GetBehaviourArgs{
// 			Label: "New City",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupBehaviour(ctx *pulumi.Context, args *LookupBehaviourArgs, opts ...pulumi.InvokeOption) (*LookupBehaviourResult, error) {
	var rv LookupBehaviourResult
	err := ctx.Invoke("okta:index/getBehaviour:getBehaviour", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBehaviour.
type LookupBehaviourArgs struct {
	// `id` of behavior to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// The name of the behavior to retrieve. Name uses the `?q=<name>` query parameter exposed by
	// Okta's API.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getBehaviour.
type LookupBehaviourResult struct {
	// Behavior ID.
	Id *string `pulumi:"id"`
	// Behavior name.
	Name *string `pulumi:"name"`
	// Map of behavior settings.
	Settings map[string]string `pulumi:"settings"`
	// Behavior status.
	Status string `pulumi:"status"`
	// Behavior type.
	Type string `pulumi:"type"`
}

func LookupBehaviourOutput(ctx *pulumi.Context, args LookupBehaviourOutputArgs, opts ...pulumi.InvokeOption) LookupBehaviourResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBehaviourResult, error) {
			args := v.(LookupBehaviourArgs)
			r, err := LookupBehaviour(ctx, &args, opts...)
			return *r, err
		}).(LookupBehaviourResultOutput)
}

// A collection of arguments for invoking getBehaviour.
type LookupBehaviourOutputArgs struct {
	// `id` of behavior to retrieve, conflicts with `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the behavior to retrieve. Name uses the `?q=<name>` query parameter exposed by
	// Okta's API.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupBehaviourOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBehaviourArgs)(nil)).Elem()
}

// A collection of values returned by getBehaviour.
type LookupBehaviourResultOutput struct{ *pulumi.OutputState }

func (LookupBehaviourResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBehaviourResult)(nil)).Elem()
}

func (o LookupBehaviourResultOutput) ToLookupBehaviourResultOutput() LookupBehaviourResultOutput {
	return o
}

func (o LookupBehaviourResultOutput) ToLookupBehaviourResultOutputWithContext(ctx context.Context) LookupBehaviourResultOutput {
	return o
}

// Behavior ID.
func (o LookupBehaviourResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBehaviourResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Behavior name.
func (o LookupBehaviourResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBehaviourResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Map of behavior settings.
func (o LookupBehaviourResultOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBehaviourResult) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Behavior status.
func (o LookupBehaviourResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBehaviourResult) string { return v.Status }).(pulumi.StringOutput)
}

// Behavior type.
func (o LookupBehaviourResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBehaviourResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBehaviourResultOutput{})
}
