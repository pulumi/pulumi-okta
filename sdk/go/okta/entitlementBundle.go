// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Entitlement Bundles. This resource allows you to create and configure an Okta [Entitlement Bundle](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlement-Bundles/#tag/Entitlement-Bundles).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewEntitlementBundle(ctx, "example", &okta.EntitlementBundleArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/entitlementBundle:EntitlementBundle example <entitlement_bundle_id>
// ```
type EntitlementBundle struct {
	pulumi.CustomResourceState

	// The description of an entitlement property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of entitlements in the bundle
	Entitlements EntitlementBundleEntitlementArrayOutput `pulumi:"entitlements"`
	// The display name for an entitlement bundle.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the entitlement bundle.
	Status pulumi.StringOutput `pulumi:"status"`
	// Representation of a resource
	Target EntitlementBundleTargetPtrOutput `pulumi:"target"`
	// The ORN of the target resource. Required when updating the entitlement bundle.
	TargetResourceOrn pulumi.StringOutput `pulumi:"targetResourceOrn"`
}

// NewEntitlementBundle registers a new resource with the given unique name, arguments, and options.
func NewEntitlementBundle(ctx *pulumi.Context,
	name string, args *EntitlementBundleArgs, opts ...pulumi.ResourceOption) (*EntitlementBundle, error) {
	if args == nil {
		args = &EntitlementBundleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntitlementBundle
	err := ctx.RegisterResource("okta:index/entitlementBundle:EntitlementBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntitlementBundle gets an existing EntitlementBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntitlementBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntitlementBundleState, opts ...pulumi.ResourceOption) (*EntitlementBundle, error) {
	var resource EntitlementBundle
	err := ctx.ReadResource("okta:index/entitlementBundle:EntitlementBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntitlementBundle resources.
type entitlementBundleState struct {
	// The description of an entitlement property.
	Description *string `pulumi:"description"`
	// List of entitlements in the bundle
	Entitlements []EntitlementBundleEntitlement `pulumi:"entitlements"`
	// The display name for an entitlement bundle.
	Name *string `pulumi:"name"`
	// The status of the entitlement bundle.
	Status *string `pulumi:"status"`
	// Representation of a resource
	Target *EntitlementBundleTarget `pulumi:"target"`
	// The ORN of the target resource. Required when updating the entitlement bundle.
	TargetResourceOrn *string `pulumi:"targetResourceOrn"`
}

type EntitlementBundleState struct {
	// The description of an entitlement property.
	Description pulumi.StringPtrInput
	// List of entitlements in the bundle
	Entitlements EntitlementBundleEntitlementArrayInput
	// The display name for an entitlement bundle.
	Name pulumi.StringPtrInput
	// The status of the entitlement bundle.
	Status pulumi.StringPtrInput
	// Representation of a resource
	Target EntitlementBundleTargetPtrInput
	// The ORN of the target resource. Required when updating the entitlement bundle.
	TargetResourceOrn pulumi.StringPtrInput
}

func (EntitlementBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementBundleState)(nil)).Elem()
}

type entitlementBundleArgs struct {
	// The description of an entitlement property.
	Description *string `pulumi:"description"`
	// List of entitlements in the bundle
	Entitlements []EntitlementBundleEntitlement `pulumi:"entitlements"`
	// The display name for an entitlement bundle.
	Name *string `pulumi:"name"`
	// The status of the entitlement bundle.
	Status *string `pulumi:"status"`
	// Representation of a resource
	Target *EntitlementBundleTarget `pulumi:"target"`
	// The ORN of the target resource. Required when updating the entitlement bundle.
	TargetResourceOrn *string `pulumi:"targetResourceOrn"`
}

// The set of arguments for constructing a EntitlementBundle resource.
type EntitlementBundleArgs struct {
	// The description of an entitlement property.
	Description pulumi.StringPtrInput
	// List of entitlements in the bundle
	Entitlements EntitlementBundleEntitlementArrayInput
	// The display name for an entitlement bundle.
	Name pulumi.StringPtrInput
	// The status of the entitlement bundle.
	Status pulumi.StringPtrInput
	// Representation of a resource
	Target EntitlementBundleTargetPtrInput
	// The ORN of the target resource. Required when updating the entitlement bundle.
	TargetResourceOrn pulumi.StringPtrInput
}

func (EntitlementBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementBundleArgs)(nil)).Elem()
}

type EntitlementBundleInput interface {
	pulumi.Input

	ToEntitlementBundleOutput() EntitlementBundleOutput
	ToEntitlementBundleOutputWithContext(ctx context.Context) EntitlementBundleOutput
}

func (*EntitlementBundle) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitlementBundle)(nil)).Elem()
}

func (i *EntitlementBundle) ToEntitlementBundleOutput() EntitlementBundleOutput {
	return i.ToEntitlementBundleOutputWithContext(context.Background())
}

func (i *EntitlementBundle) ToEntitlementBundleOutputWithContext(ctx context.Context) EntitlementBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementBundleOutput)
}

// EntitlementBundleArrayInput is an input type that accepts EntitlementBundleArray and EntitlementBundleArrayOutput values.
// You can construct a concrete instance of `EntitlementBundleArrayInput` via:
//
//	EntitlementBundleArray{ EntitlementBundleArgs{...} }
type EntitlementBundleArrayInput interface {
	pulumi.Input

	ToEntitlementBundleArrayOutput() EntitlementBundleArrayOutput
	ToEntitlementBundleArrayOutputWithContext(context.Context) EntitlementBundleArrayOutput
}

type EntitlementBundleArray []EntitlementBundleInput

func (EntitlementBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntitlementBundle)(nil)).Elem()
}

func (i EntitlementBundleArray) ToEntitlementBundleArrayOutput() EntitlementBundleArrayOutput {
	return i.ToEntitlementBundleArrayOutputWithContext(context.Background())
}

func (i EntitlementBundleArray) ToEntitlementBundleArrayOutputWithContext(ctx context.Context) EntitlementBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementBundleArrayOutput)
}

// EntitlementBundleMapInput is an input type that accepts EntitlementBundleMap and EntitlementBundleMapOutput values.
// You can construct a concrete instance of `EntitlementBundleMapInput` via:
//
//	EntitlementBundleMap{ "key": EntitlementBundleArgs{...} }
type EntitlementBundleMapInput interface {
	pulumi.Input

	ToEntitlementBundleMapOutput() EntitlementBundleMapOutput
	ToEntitlementBundleMapOutputWithContext(context.Context) EntitlementBundleMapOutput
}

type EntitlementBundleMap map[string]EntitlementBundleInput

func (EntitlementBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntitlementBundle)(nil)).Elem()
}

func (i EntitlementBundleMap) ToEntitlementBundleMapOutput() EntitlementBundleMapOutput {
	return i.ToEntitlementBundleMapOutputWithContext(context.Background())
}

func (i EntitlementBundleMap) ToEntitlementBundleMapOutputWithContext(ctx context.Context) EntitlementBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementBundleMapOutput)
}

type EntitlementBundleOutput struct{ *pulumi.OutputState }

func (EntitlementBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitlementBundle)(nil)).Elem()
}

func (o EntitlementBundleOutput) ToEntitlementBundleOutput() EntitlementBundleOutput {
	return o
}

func (o EntitlementBundleOutput) ToEntitlementBundleOutputWithContext(ctx context.Context) EntitlementBundleOutput {
	return o
}

// The description of an entitlement property.
func (o EntitlementBundleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntitlementBundle) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of entitlements in the bundle
func (o EntitlementBundleOutput) Entitlements() EntitlementBundleEntitlementArrayOutput {
	return o.ApplyT(func(v *EntitlementBundle) EntitlementBundleEntitlementArrayOutput { return v.Entitlements }).(EntitlementBundleEntitlementArrayOutput)
}

// The display name for an entitlement bundle.
func (o EntitlementBundleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementBundle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the entitlement bundle.
func (o EntitlementBundleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementBundle) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Representation of a resource
func (o EntitlementBundleOutput) Target() EntitlementBundleTargetPtrOutput {
	return o.ApplyT(func(v *EntitlementBundle) EntitlementBundleTargetPtrOutput { return v.Target }).(EntitlementBundleTargetPtrOutput)
}

// The ORN of the target resource. Required when updating the entitlement bundle.
func (o EntitlementBundleOutput) TargetResourceOrn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntitlementBundle) pulumi.StringOutput { return v.TargetResourceOrn }).(pulumi.StringOutput)
}

type EntitlementBundleArrayOutput struct{ *pulumi.OutputState }

func (EntitlementBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntitlementBundle)(nil)).Elem()
}

func (o EntitlementBundleArrayOutput) ToEntitlementBundleArrayOutput() EntitlementBundleArrayOutput {
	return o
}

func (o EntitlementBundleArrayOutput) ToEntitlementBundleArrayOutputWithContext(ctx context.Context) EntitlementBundleArrayOutput {
	return o
}

func (o EntitlementBundleArrayOutput) Index(i pulumi.IntInput) EntitlementBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntitlementBundle {
		return vs[0].([]*EntitlementBundle)[vs[1].(int)]
	}).(EntitlementBundleOutput)
}

type EntitlementBundleMapOutput struct{ *pulumi.OutputState }

func (EntitlementBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntitlementBundle)(nil)).Elem()
}

func (o EntitlementBundleMapOutput) ToEntitlementBundleMapOutput() EntitlementBundleMapOutput {
	return o
}

func (o EntitlementBundleMapOutput) ToEntitlementBundleMapOutputWithContext(ctx context.Context) EntitlementBundleMapOutput {
	return o
}

func (o EntitlementBundleMapOutput) MapIndex(k pulumi.StringInput) EntitlementBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntitlementBundle {
		return vs[0].(map[string]*EntitlementBundle)[vs[1].(string)]
	}).(EntitlementBundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementBundleInput)(nil)).Elem(), &EntitlementBundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementBundleArrayInput)(nil)).Elem(), EntitlementBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementBundleMapInput)(nil)).Elem(), EntitlementBundleMap{})
	pulumi.RegisterOutputType(EntitlementBundleOutput{})
	pulumi.RegisterOutputType(EntitlementBundleArrayOutput{})
	pulumi.RegisterOutputType(EntitlementBundleMapOutput{})
}
