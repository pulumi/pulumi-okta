// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package factor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allows you to manage the activation of Okta MFA methods.
//
// This resource allows you to manage Okta MFA methods.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/factor"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := factor.NewFactor(ctx, "example", &factor.FactorArgs{
// 			ProviderId: pulumi.String("google_otp"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Factor struct {
	pulumi.CustomResourceState

	// Whether or not to activate the provider, by default it is set to `true`.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"rsaToken"`, `"symantecVip"` or `"yubikeyToken"`.
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
}

// NewFactor registers a new resource with the given unique name, arguments, and options.
func NewFactor(ctx *pulumi.Context,
	name string, args *FactorArgs, opts ...pulumi.ResourceOption) (*Factor, error) {
	if args == nil || args.ProviderId == nil {
		return nil, errors.New("missing required argument 'ProviderId'")
	}
	if args == nil {
		args = &FactorArgs{}
	}
	var resource Factor
	err := ctx.RegisterResource("okta:factor/factor:Factor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactor gets an existing Factor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactorState, opts ...pulumi.ResourceOption) (*Factor, error) {
	var resource Factor
	err := ctx.ReadResource("okta:factor/factor:Factor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Factor resources.
type factorState struct {
	// Whether or not to activate the provider, by default it is set to `true`.
	Active *bool `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"rsaToken"`, `"symantecVip"` or `"yubikeyToken"`.
	ProviderId *string `pulumi:"providerId"`
}

type FactorState struct {
	// Whether or not to activate the provider, by default it is set to `true`.
	Active pulumi.BoolPtrInput
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"rsaToken"`, `"symantecVip"` or `"yubikeyToken"`.
	ProviderId pulumi.StringPtrInput
}

func (FactorState) ElementType() reflect.Type {
	return reflect.TypeOf((*factorState)(nil)).Elem()
}

type factorArgs struct {
	// Whether or not to activate the provider, by default it is set to `true`.
	Active *bool `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"rsaToken"`, `"symantecVip"` or `"yubikeyToken"`.
	ProviderId string `pulumi:"providerId"`
}

// The set of arguments for constructing a Factor resource.
type FactorArgs struct {
	// Whether or not to activate the provider, by default it is set to `true`.
	Active pulumi.BoolPtrInput
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"rsaToken"`, `"symantecVip"` or `"yubikeyToken"`.
	ProviderId pulumi.StringInput
}

func (FactorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factorArgs)(nil)).Elem()
}

type FactorInput interface {
	pulumi.Input

	ToFactorOutput() FactorOutput
	ToFactorOutputWithContext(ctx context.Context) FactorOutput
}

func (Factor) ElementType() reflect.Type {
	return reflect.TypeOf((*Factor)(nil)).Elem()
}

func (i Factor) ToFactorOutput() FactorOutput {
	return i.ToFactorOutputWithContext(context.Background())
}

func (i Factor) ToFactorOutputWithContext(ctx context.Context) FactorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorOutput)
}

type FactorOutput struct {
	*pulumi.OutputState
}

func (FactorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactorOutput)(nil)).Elem()
}

func (o FactorOutput) ToFactorOutput() FactorOutput {
	return o
}

func (o FactorOutput) ToFactorOutputWithContext(ctx context.Context) FactorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FactorOutput{})
}
