// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package factor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to manage the activation of Okta MFA methods.
//
// This resource allows you to manage Okta MFA methods.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/factor"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := factor.NewFactor(ctx, "example", &factor.FactorArgs{
// 			ProviderId: pulumi.String("google_otp"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Factor struct {
	pulumi.CustomResourceState

	// Whether to activate the provider, by default, it is set to `true`.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPassword"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"oktaEmail"`, `"rsaToken"`, `"symantecVip"`, `"yubikeyToken"`, or `"hotp"`.
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
}

// NewFactor registers a new resource with the given unique name, arguments, and options.
func NewFactor(ctx *pulumi.Context,
	name string, args *FactorArgs, opts ...pulumi.ResourceOption) (*Factor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	var resource Factor
	err := ctx.RegisterResource("okta:factor/factor:Factor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactor gets an existing Factor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactorState, opts ...pulumi.ResourceOption) (*Factor, error) {
	var resource Factor
	err := ctx.ReadResource("okta:factor/factor:Factor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Factor resources.
type factorState struct {
	// Whether to activate the provider, by default, it is set to `true`.
	Active *bool `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPassword"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"oktaEmail"`, `"rsaToken"`, `"symantecVip"`, `"yubikeyToken"`, or `"hotp"`.
	ProviderId *string `pulumi:"providerId"`
}

type FactorState struct {
	// Whether to activate the provider, by default, it is set to `true`.
	Active pulumi.BoolPtrInput
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPassword"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"oktaEmail"`, `"rsaToken"`, `"symantecVip"`, `"yubikeyToken"`, or `"hotp"`.
	ProviderId pulumi.StringPtrInput
}

func (FactorState) ElementType() reflect.Type {
	return reflect.TypeOf((*factorState)(nil)).Elem()
}

type factorArgs struct {
	// Whether to activate the provider, by default, it is set to `true`.
	Active *bool `pulumi:"active"`
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPassword"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"oktaEmail"`, `"rsaToken"`, `"symantecVip"`, `"yubikeyToken"`, or `"hotp"`.
	ProviderId string `pulumi:"providerId"`
}

// The set of arguments for constructing a Factor resource.
type FactorArgs struct {
	// Whether to activate the provider, by default, it is set to `true`.
	Active pulumi.BoolPtrInput
	// The MFA provider name.
	// Allowed values are `"duo"`, `"fidoU2f"`, `"fidoWebauthn"`, `"googleOtp"`, `"oktaCall"`, `"oktaOtp"`, `"oktaPassword"`, `"oktaPush"`, `"oktaQuestion"`, `"oktaSms"`, `"oktaEmail"`, `"rsaToken"`, `"symantecVip"`, `"yubikeyToken"`, or `"hotp"`.
	ProviderId pulumi.StringInput
}

func (FactorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factorArgs)(nil)).Elem()
}

type FactorInput interface {
	pulumi.Input

	ToFactorOutput() FactorOutput
	ToFactorOutputWithContext(ctx context.Context) FactorOutput
}

func (*Factor) ElementType() reflect.Type {
	return reflect.TypeOf((**Factor)(nil)).Elem()
}

func (i *Factor) ToFactorOutput() FactorOutput {
	return i.ToFactorOutputWithContext(context.Background())
}

func (i *Factor) ToFactorOutputWithContext(ctx context.Context) FactorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorOutput)
}

// FactorArrayInput is an input type that accepts FactorArray and FactorArrayOutput values.
// You can construct a concrete instance of `FactorArrayInput` via:
//
//          FactorArray{ FactorArgs{...} }
type FactorArrayInput interface {
	pulumi.Input

	ToFactorArrayOutput() FactorArrayOutput
	ToFactorArrayOutputWithContext(context.Context) FactorArrayOutput
}

type FactorArray []FactorInput

func (FactorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Factor)(nil)).Elem()
}

func (i FactorArray) ToFactorArrayOutput() FactorArrayOutput {
	return i.ToFactorArrayOutputWithContext(context.Background())
}

func (i FactorArray) ToFactorArrayOutputWithContext(ctx context.Context) FactorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorArrayOutput)
}

// FactorMapInput is an input type that accepts FactorMap and FactorMapOutput values.
// You can construct a concrete instance of `FactorMapInput` via:
//
//          FactorMap{ "key": FactorArgs{...} }
type FactorMapInput interface {
	pulumi.Input

	ToFactorMapOutput() FactorMapOutput
	ToFactorMapOutputWithContext(context.Context) FactorMapOutput
}

type FactorMap map[string]FactorInput

func (FactorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Factor)(nil)).Elem()
}

func (i FactorMap) ToFactorMapOutput() FactorMapOutput {
	return i.ToFactorMapOutputWithContext(context.Background())
}

func (i FactorMap) ToFactorMapOutputWithContext(ctx context.Context) FactorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorMapOutput)
}

type FactorOutput struct{ *pulumi.OutputState }

func (FactorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Factor)(nil)).Elem()
}

func (o FactorOutput) ToFactorOutput() FactorOutput {
	return o
}

func (o FactorOutput) ToFactorOutputWithContext(ctx context.Context) FactorOutput {
	return o
}

type FactorArrayOutput struct{ *pulumi.OutputState }

func (FactorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Factor)(nil)).Elem()
}

func (o FactorArrayOutput) ToFactorArrayOutput() FactorArrayOutput {
	return o
}

func (o FactorArrayOutput) ToFactorArrayOutputWithContext(ctx context.Context) FactorArrayOutput {
	return o
}

func (o FactorArrayOutput) Index(i pulumi.IntInput) FactorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Factor {
		return vs[0].([]*Factor)[vs[1].(int)]
	}).(FactorOutput)
}

type FactorMapOutput struct{ *pulumi.OutputState }

func (FactorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Factor)(nil)).Elem()
}

func (o FactorMapOutput) ToFactorMapOutput() FactorMapOutput {
	return o
}

func (o FactorMapOutput) ToFactorMapOutputWithContext(ctx context.Context) FactorMapOutput {
	return o
}

func (o FactorMapOutput) MapIndex(k pulumi.StringInput) FactorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Factor {
		return vs[0].(map[string]*Factor)[vs[1].(string)]
	}).(FactorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FactorInput)(nil)).Elem(), &Factor{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactorArrayInput)(nil)).Elem(), FactorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactorMapInput)(nil)).Elem(), FactorMap{})
	pulumi.RegisterOutputType(FactorOutput{})
	pulumi.RegisterOutputType(FactorArrayOutput{})
	pulumi.RegisterOutputType(FactorMapOutput{})
}
