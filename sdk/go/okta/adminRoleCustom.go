// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// These operations allow the creation and manipulation of custom roles as custom collections of permissions.
//
// > **NOTE:** This an `Early Access` feature.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewAdminRoleCustom(ctx, "example", &okta.AdminRoleCustomArgs{
//				Description: pulumi.String("This role allows app assignment management"),
//				Label:       pulumi.String("AppAssignmentManager"),
//				Permissions: pulumi.StringArray{
//					pulumi.String("okta.apps.assignment.manage"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Okta Custom Admin Role can be imported via the Okta ID.
//
// ```sh
// $ pulumi import okta:index/adminRoleCustom:AdminRoleCustom example &#60;custom role id&#62;
// ```
type AdminRoleCustom struct {
	pulumi.CustomResourceState

	// A human-readable description of the new Role.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name given to the new Role.
	Label pulumi.StringOutput `pulumi:"label"`
	// The permissions that the new Role grants. At least one
	// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
	// `"okta.authzServers.read"`,
	// `"okta.apps.assignment.manage"`,
	// `"okta.apps.manage"`,
	// `"okta.apps.read"`,
	// `"okta.customizations.manage"`,
	// `"okta.customizations.read"`,
	// `"okta.groups.appAssignment.manage"`,
	// `"okta.groups.create"`,
	// `"okta.groups.manage"`,
	// `"okta.groups.members.manage"`,
	// `"okta.groups.read"`,
	// `"okta.profilesources.import.run"`,
	// `"okta.users.appAssignment.manage"`,
	// `"okta.users.create"`,
	// `"okta.users.credentials.expirePassword"`,
	// `"okta.users.credentials.manage"`,
	// `"okta.users.credentials.resetFactors"`,
	// `"okta.users.credentials.resetPassword"`,
	// `"okta.users.groupMembership.manage"`,
	// `"okta.users.lifecycle.activate"`,
	// `"okta.users.lifecycle.clearSessions"`,
	// `"okta.users.lifecycle.deactivate"`,
	// `"okta.users.lifecycle.delete"`,
	// `"okta.users.lifecycle.manage"`,
	// `"okta.users.lifecycle.suspend"`,
	// `"okta.users.lifecycle.unlock"`,
	// `"okta.users.lifecycle.unsuspend"`,
	// `"okta.users.manage"`,
	// `"okta.users.read"`,
	// `"okta.users.userprofile.manage"`,
	// `"okta.workflows.invoke"`.,
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewAdminRoleCustom registers a new resource with the given unique name, arguments, and options.
func NewAdminRoleCustom(ctx *pulumi.Context,
	name string, args *AdminRoleCustomArgs, opts ...pulumi.ResourceOption) (*AdminRoleCustom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminRoleCustom
	err := ctx.RegisterResource("okta:index/adminRoleCustom:AdminRoleCustom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminRoleCustom gets an existing AdminRoleCustom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminRoleCustom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminRoleCustomState, opts ...pulumi.ResourceOption) (*AdminRoleCustom, error) {
	var resource AdminRoleCustom
	err := ctx.ReadResource("okta:index/adminRoleCustom:AdminRoleCustom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminRoleCustom resources.
type adminRoleCustomState struct {
	// A human-readable description of the new Role.
	Description *string `pulumi:"description"`
	// The name given to the new Role.
	Label *string `pulumi:"label"`
	// The permissions that the new Role grants. At least one
	// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
	// `"okta.authzServers.read"`,
	// `"okta.apps.assignment.manage"`,
	// `"okta.apps.manage"`,
	// `"okta.apps.read"`,
	// `"okta.customizations.manage"`,
	// `"okta.customizations.read"`,
	// `"okta.groups.appAssignment.manage"`,
	// `"okta.groups.create"`,
	// `"okta.groups.manage"`,
	// `"okta.groups.members.manage"`,
	// `"okta.groups.read"`,
	// `"okta.profilesources.import.run"`,
	// `"okta.users.appAssignment.manage"`,
	// `"okta.users.create"`,
	// `"okta.users.credentials.expirePassword"`,
	// `"okta.users.credentials.manage"`,
	// `"okta.users.credentials.resetFactors"`,
	// `"okta.users.credentials.resetPassword"`,
	// `"okta.users.groupMembership.manage"`,
	// `"okta.users.lifecycle.activate"`,
	// `"okta.users.lifecycle.clearSessions"`,
	// `"okta.users.lifecycle.deactivate"`,
	// `"okta.users.lifecycle.delete"`,
	// `"okta.users.lifecycle.manage"`,
	// `"okta.users.lifecycle.suspend"`,
	// `"okta.users.lifecycle.unlock"`,
	// `"okta.users.lifecycle.unsuspend"`,
	// `"okta.users.manage"`,
	// `"okta.users.read"`,
	// `"okta.users.userprofile.manage"`,
	// `"okta.workflows.invoke"`.,
	Permissions []string `pulumi:"permissions"`
}

type AdminRoleCustomState struct {
	// A human-readable description of the new Role.
	Description pulumi.StringPtrInput
	// The name given to the new Role.
	Label pulumi.StringPtrInput
	// The permissions that the new Role grants. At least one
	// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
	// `"okta.authzServers.read"`,
	// `"okta.apps.assignment.manage"`,
	// `"okta.apps.manage"`,
	// `"okta.apps.read"`,
	// `"okta.customizations.manage"`,
	// `"okta.customizations.read"`,
	// `"okta.groups.appAssignment.manage"`,
	// `"okta.groups.create"`,
	// `"okta.groups.manage"`,
	// `"okta.groups.members.manage"`,
	// `"okta.groups.read"`,
	// `"okta.profilesources.import.run"`,
	// `"okta.users.appAssignment.manage"`,
	// `"okta.users.create"`,
	// `"okta.users.credentials.expirePassword"`,
	// `"okta.users.credentials.manage"`,
	// `"okta.users.credentials.resetFactors"`,
	// `"okta.users.credentials.resetPassword"`,
	// `"okta.users.groupMembership.manage"`,
	// `"okta.users.lifecycle.activate"`,
	// `"okta.users.lifecycle.clearSessions"`,
	// `"okta.users.lifecycle.deactivate"`,
	// `"okta.users.lifecycle.delete"`,
	// `"okta.users.lifecycle.manage"`,
	// `"okta.users.lifecycle.suspend"`,
	// `"okta.users.lifecycle.unlock"`,
	// `"okta.users.lifecycle.unsuspend"`,
	// `"okta.users.manage"`,
	// `"okta.users.read"`,
	// `"okta.users.userprofile.manage"`,
	// `"okta.workflows.invoke"`.,
	Permissions pulumi.StringArrayInput
}

func (AdminRoleCustomState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminRoleCustomState)(nil)).Elem()
}

type adminRoleCustomArgs struct {
	// A human-readable description of the new Role.
	Description string `pulumi:"description"`
	// The name given to the new Role.
	Label string `pulumi:"label"`
	// The permissions that the new Role grants. At least one
	// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
	// `"okta.authzServers.read"`,
	// `"okta.apps.assignment.manage"`,
	// `"okta.apps.manage"`,
	// `"okta.apps.read"`,
	// `"okta.customizations.manage"`,
	// `"okta.customizations.read"`,
	// `"okta.groups.appAssignment.manage"`,
	// `"okta.groups.create"`,
	// `"okta.groups.manage"`,
	// `"okta.groups.members.manage"`,
	// `"okta.groups.read"`,
	// `"okta.profilesources.import.run"`,
	// `"okta.users.appAssignment.manage"`,
	// `"okta.users.create"`,
	// `"okta.users.credentials.expirePassword"`,
	// `"okta.users.credentials.manage"`,
	// `"okta.users.credentials.resetFactors"`,
	// `"okta.users.credentials.resetPassword"`,
	// `"okta.users.groupMembership.manage"`,
	// `"okta.users.lifecycle.activate"`,
	// `"okta.users.lifecycle.clearSessions"`,
	// `"okta.users.lifecycle.deactivate"`,
	// `"okta.users.lifecycle.delete"`,
	// `"okta.users.lifecycle.manage"`,
	// `"okta.users.lifecycle.suspend"`,
	// `"okta.users.lifecycle.unlock"`,
	// `"okta.users.lifecycle.unsuspend"`,
	// `"okta.users.manage"`,
	// `"okta.users.read"`,
	// `"okta.users.userprofile.manage"`,
	// `"okta.workflows.invoke"`.,
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a AdminRoleCustom resource.
type AdminRoleCustomArgs struct {
	// A human-readable description of the new Role.
	Description pulumi.StringInput
	// The name given to the new Role.
	Label pulumi.StringInput
	// The permissions that the new Role grants. At least one
	// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
	// `"okta.authzServers.read"`,
	// `"okta.apps.assignment.manage"`,
	// `"okta.apps.manage"`,
	// `"okta.apps.read"`,
	// `"okta.customizations.manage"`,
	// `"okta.customizations.read"`,
	// `"okta.groups.appAssignment.manage"`,
	// `"okta.groups.create"`,
	// `"okta.groups.manage"`,
	// `"okta.groups.members.manage"`,
	// `"okta.groups.read"`,
	// `"okta.profilesources.import.run"`,
	// `"okta.users.appAssignment.manage"`,
	// `"okta.users.create"`,
	// `"okta.users.credentials.expirePassword"`,
	// `"okta.users.credentials.manage"`,
	// `"okta.users.credentials.resetFactors"`,
	// `"okta.users.credentials.resetPassword"`,
	// `"okta.users.groupMembership.manage"`,
	// `"okta.users.lifecycle.activate"`,
	// `"okta.users.lifecycle.clearSessions"`,
	// `"okta.users.lifecycle.deactivate"`,
	// `"okta.users.lifecycle.delete"`,
	// `"okta.users.lifecycle.manage"`,
	// `"okta.users.lifecycle.suspend"`,
	// `"okta.users.lifecycle.unlock"`,
	// `"okta.users.lifecycle.unsuspend"`,
	// `"okta.users.manage"`,
	// `"okta.users.read"`,
	// `"okta.users.userprofile.manage"`,
	// `"okta.workflows.invoke"`.,
	Permissions pulumi.StringArrayInput
}

func (AdminRoleCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminRoleCustomArgs)(nil)).Elem()
}

type AdminRoleCustomInput interface {
	pulumi.Input

	ToAdminRoleCustomOutput() AdminRoleCustomOutput
	ToAdminRoleCustomOutputWithContext(ctx context.Context) AdminRoleCustomOutput
}

func (*AdminRoleCustom) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRoleCustom)(nil)).Elem()
}

func (i *AdminRoleCustom) ToAdminRoleCustomOutput() AdminRoleCustomOutput {
	return i.ToAdminRoleCustomOutputWithContext(context.Background())
}

func (i *AdminRoleCustom) ToAdminRoleCustomOutputWithContext(ctx context.Context) AdminRoleCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleCustomOutput)
}

// AdminRoleCustomArrayInput is an input type that accepts AdminRoleCustomArray and AdminRoleCustomArrayOutput values.
// You can construct a concrete instance of `AdminRoleCustomArrayInput` via:
//
//	AdminRoleCustomArray{ AdminRoleCustomArgs{...} }
type AdminRoleCustomArrayInput interface {
	pulumi.Input

	ToAdminRoleCustomArrayOutput() AdminRoleCustomArrayOutput
	ToAdminRoleCustomArrayOutputWithContext(context.Context) AdminRoleCustomArrayOutput
}

type AdminRoleCustomArray []AdminRoleCustomInput

func (AdminRoleCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminRoleCustom)(nil)).Elem()
}

func (i AdminRoleCustomArray) ToAdminRoleCustomArrayOutput() AdminRoleCustomArrayOutput {
	return i.ToAdminRoleCustomArrayOutputWithContext(context.Background())
}

func (i AdminRoleCustomArray) ToAdminRoleCustomArrayOutputWithContext(ctx context.Context) AdminRoleCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleCustomArrayOutput)
}

// AdminRoleCustomMapInput is an input type that accepts AdminRoleCustomMap and AdminRoleCustomMapOutput values.
// You can construct a concrete instance of `AdminRoleCustomMapInput` via:
//
//	AdminRoleCustomMap{ "key": AdminRoleCustomArgs{...} }
type AdminRoleCustomMapInput interface {
	pulumi.Input

	ToAdminRoleCustomMapOutput() AdminRoleCustomMapOutput
	ToAdminRoleCustomMapOutputWithContext(context.Context) AdminRoleCustomMapOutput
}

type AdminRoleCustomMap map[string]AdminRoleCustomInput

func (AdminRoleCustomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminRoleCustom)(nil)).Elem()
}

func (i AdminRoleCustomMap) ToAdminRoleCustomMapOutput() AdminRoleCustomMapOutput {
	return i.ToAdminRoleCustomMapOutputWithContext(context.Background())
}

func (i AdminRoleCustomMap) ToAdminRoleCustomMapOutputWithContext(ctx context.Context) AdminRoleCustomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleCustomMapOutput)
}

type AdminRoleCustomOutput struct{ *pulumi.OutputState }

func (AdminRoleCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRoleCustom)(nil)).Elem()
}

func (o AdminRoleCustomOutput) ToAdminRoleCustomOutput() AdminRoleCustomOutput {
	return o
}

func (o AdminRoleCustomOutput) ToAdminRoleCustomOutputWithContext(ctx context.Context) AdminRoleCustomOutput {
	return o
}

// A human-readable description of the new Role.
func (o AdminRoleCustomOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoleCustom) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name given to the new Role.
func (o AdminRoleCustomOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoleCustom) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The permissions that the new Role grants. At least one
// permission must be specified when creating custom role. Valid values: `"okta.authzServers.manage"`,
// `"okta.authzServers.read"`,
// `"okta.apps.assignment.manage"`,
// `"okta.apps.manage"`,
// `"okta.apps.read"`,
// `"okta.customizations.manage"`,
// `"okta.customizations.read"`,
// `"okta.groups.appAssignment.manage"`,
// `"okta.groups.create"`,
// `"okta.groups.manage"`,
// `"okta.groups.members.manage"`,
// `"okta.groups.read"`,
// `"okta.profilesources.import.run"`,
// `"okta.users.appAssignment.manage"`,
// `"okta.users.create"`,
// `"okta.users.credentials.expirePassword"`,
// `"okta.users.credentials.manage"`,
// `"okta.users.credentials.resetFactors"`,
// `"okta.users.credentials.resetPassword"`,
// `"okta.users.groupMembership.manage"`,
// `"okta.users.lifecycle.activate"`,
// `"okta.users.lifecycle.clearSessions"`,
// `"okta.users.lifecycle.deactivate"`,
// `"okta.users.lifecycle.delete"`,
// `"okta.users.lifecycle.manage"`,
// `"okta.users.lifecycle.suspend"`,
// `"okta.users.lifecycle.unlock"`,
// `"okta.users.lifecycle.unsuspend"`,
// `"okta.users.manage"`,
// `"okta.users.read"`,
// `"okta.users.userprofile.manage"`,
// `"okta.workflows.invoke"`.,
func (o AdminRoleCustomOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdminRoleCustom) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

type AdminRoleCustomArrayOutput struct{ *pulumi.OutputState }

func (AdminRoleCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminRoleCustom)(nil)).Elem()
}

func (o AdminRoleCustomArrayOutput) ToAdminRoleCustomArrayOutput() AdminRoleCustomArrayOutput {
	return o
}

func (o AdminRoleCustomArrayOutput) ToAdminRoleCustomArrayOutputWithContext(ctx context.Context) AdminRoleCustomArrayOutput {
	return o
}

func (o AdminRoleCustomArrayOutput) Index(i pulumi.IntInput) AdminRoleCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminRoleCustom {
		return vs[0].([]*AdminRoleCustom)[vs[1].(int)]
	}).(AdminRoleCustomOutput)
}

type AdminRoleCustomMapOutput struct{ *pulumi.OutputState }

func (AdminRoleCustomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminRoleCustom)(nil)).Elem()
}

func (o AdminRoleCustomMapOutput) ToAdminRoleCustomMapOutput() AdminRoleCustomMapOutput {
	return o
}

func (o AdminRoleCustomMapOutput) ToAdminRoleCustomMapOutputWithContext(ctx context.Context) AdminRoleCustomMapOutput {
	return o
}

func (o AdminRoleCustomMapOutput) MapIndex(k pulumi.StringInput) AdminRoleCustomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminRoleCustom {
		return vs[0].(map[string]*AdminRoleCustom)[vs[1].(string)]
	}).(AdminRoleCustomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRoleCustomInput)(nil)).Elem(), &AdminRoleCustom{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRoleCustomArrayInput)(nil)).Elem(), AdminRoleCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRoleCustomMapInput)(nil)).Elem(), AdminRoleCustomMap{})
	pulumi.RegisterOutputType(AdminRoleCustomOutput{})
	pulumi.RegisterOutputType(AdminRoleCustomArrayOutput{})
	pulumi.RegisterOutputType(AdminRoleCustomMapOutput{})
}
