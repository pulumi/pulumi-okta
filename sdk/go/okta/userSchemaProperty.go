// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserSchemaProperty struct {
	pulumi.CustomResourceState

	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs UserSchemaPropertyArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// Custom Subschema description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// Subschema external name
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index pulumi.StringOutput `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master                   pulumi.StringPtrOutput                              `pulumi:"master"`
	MasterOverridePriorities UserSchemaPropertyMasterOverridePriorityArrayOutput `pulumi:"masterOverridePriorities"`
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs UserSchemaPropertyOneOfArrayOutput `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the subschema is required
	Required pulumi.BoolPtrOutput   `pulumi:"required"`
	Scope    pulumi.StringPtrOutput `pulumi:"scope"`
	// Enum title
	Title pulumi.StringOutput `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringOutput `pulumi:"type"`
	// Subschema unique restriction
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewUserSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewUserSchemaProperty(ctx *pulumi.Context,
	name string, args *UserSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*UserSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserSchemaProperty
	err := ctx.RegisterResource("okta:index/userSchemaProperty:UserSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSchemaProperty gets an existing UserSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSchemaPropertyState, opts ...pulumi.ResourceOption) (*UserSchemaProperty, error) {
	var resource UserSchemaProperty
	err := ctx.ReadResource("okta:index/userSchemaProperty:UserSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSchemaProperty resources.
type userSchemaPropertyState struct {
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs []UserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType *string `pulumi:"arrayType"`
	// Custom Subschema description
	Description *string `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums []string `pulumi:"enums"`
	// Subschema external name
	ExternalName *string `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index *string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master                   *string                                    `pulumi:"master"`
	MasterOverridePriorities []UserSchemaPropertyMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// Subschema of type string maximum length
	MaxLength *int `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength *int `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs []UserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool   `pulumi:"required"`
	Scope    *string `pulumi:"scope"`
	// Enum title
	Title *string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type *string `pulumi:"type"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type UserSchemaPropertyState struct {
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayInput
	// array of valid JSON schemas for property type array.
	ArrayOneOfs UserSchemaPropertyArrayOneOfArrayInput
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrInput
	// Custom Subschema description
	Description pulumi.StringPtrInput
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayInput
	// Subschema external name
	ExternalName pulumi.StringPtrInput
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringPtrInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master                   pulumi.StringPtrInput
	MasterOverridePriorities UserSchemaPropertyMasterOverridePriorityArrayInput
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrInput
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrInput
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs UserSchemaPropertyOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	Scope    pulumi.StringPtrInput
	// Enum title
	Title pulumi.StringPtrInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSchemaPropertyState)(nil)).Elem()
}

type userSchemaPropertyArgs struct {
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs []UserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType *string `pulumi:"arrayType"`
	// Custom Subschema description
	Description *string `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums []string `pulumi:"enums"`
	// Subschema external name
	ExternalName *string `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master                   *string                                    `pulumi:"master"`
	MasterOverridePriorities []UserSchemaPropertyMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// Subschema of type string maximum length
	MaxLength *int `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength *int `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs []UserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool   `pulumi:"required"`
	Scope    *string `pulumi:"scope"`
	// Enum title
	Title string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type string `pulumi:"type"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a UserSchemaProperty resource.
type UserSchemaPropertyArgs struct {
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayInput
	// array of valid JSON schemas for property type array.
	ArrayOneOfs UserSchemaPropertyArrayOneOfArrayInput
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrInput
	// Custom Subschema description
	Description pulumi.StringPtrInput
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayInput
	// Subschema external name
	ExternalName pulumi.StringPtrInput
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master                   pulumi.StringPtrInput
	MasterOverridePriorities UserSchemaPropertyMasterOverridePriorityArrayInput
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrInput
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrInput
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs UserSchemaPropertyOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	Scope    pulumi.StringPtrInput
	// Enum title
	Title pulumi.StringInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSchemaPropertyArgs)(nil)).Elem()
}

type UserSchemaPropertyInput interface {
	pulumi.Input

	ToUserSchemaPropertyOutput() UserSchemaPropertyOutput
	ToUserSchemaPropertyOutputWithContext(ctx context.Context) UserSchemaPropertyOutput
}

func (*UserSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSchemaProperty)(nil)).Elem()
}

func (i *UserSchemaProperty) ToUserSchemaPropertyOutput() UserSchemaPropertyOutput {
	return i.ToUserSchemaPropertyOutputWithContext(context.Background())
}

func (i *UserSchemaProperty) ToUserSchemaPropertyOutputWithContext(ctx context.Context) UserSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaPropertyOutput)
}

func (i *UserSchemaProperty) ToOutput(ctx context.Context) pulumix.Output[*UserSchemaProperty] {
	return pulumix.Output[*UserSchemaProperty]{
		OutputState: i.ToUserSchemaPropertyOutputWithContext(ctx).OutputState,
	}
}

// UserSchemaPropertyArrayInput is an input type that accepts UserSchemaPropertyArray and UserSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `UserSchemaPropertyArrayInput` via:
//
//	UserSchemaPropertyArray{ UserSchemaPropertyArgs{...} }
type UserSchemaPropertyArrayInput interface {
	pulumi.Input

	ToUserSchemaPropertyArrayOutput() UserSchemaPropertyArrayOutput
	ToUserSchemaPropertyArrayOutputWithContext(context.Context) UserSchemaPropertyArrayOutput
}

type UserSchemaPropertyArray []UserSchemaPropertyInput

func (UserSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSchemaProperty)(nil)).Elem()
}

func (i UserSchemaPropertyArray) ToUserSchemaPropertyArrayOutput() UserSchemaPropertyArrayOutput {
	return i.ToUserSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i UserSchemaPropertyArray) ToUserSchemaPropertyArrayOutputWithContext(ctx context.Context) UserSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaPropertyArrayOutput)
}

func (i UserSchemaPropertyArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserSchemaProperty] {
	return pulumix.Output[[]*UserSchemaProperty]{
		OutputState: i.ToUserSchemaPropertyArrayOutputWithContext(ctx).OutputState,
	}
}

// UserSchemaPropertyMapInput is an input type that accepts UserSchemaPropertyMap and UserSchemaPropertyMapOutput values.
// You can construct a concrete instance of `UserSchemaPropertyMapInput` via:
//
//	UserSchemaPropertyMap{ "key": UserSchemaPropertyArgs{...} }
type UserSchemaPropertyMapInput interface {
	pulumi.Input

	ToUserSchemaPropertyMapOutput() UserSchemaPropertyMapOutput
	ToUserSchemaPropertyMapOutputWithContext(context.Context) UserSchemaPropertyMapOutput
}

type UserSchemaPropertyMap map[string]UserSchemaPropertyInput

func (UserSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSchemaProperty)(nil)).Elem()
}

func (i UserSchemaPropertyMap) ToUserSchemaPropertyMapOutput() UserSchemaPropertyMapOutput {
	return i.ToUserSchemaPropertyMapOutputWithContext(context.Background())
}

func (i UserSchemaPropertyMap) ToUserSchemaPropertyMapOutputWithContext(ctx context.Context) UserSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaPropertyMapOutput)
}

func (i UserSchemaPropertyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserSchemaProperty] {
	return pulumix.Output[map[string]*UserSchemaProperty]{
		OutputState: i.ToUserSchemaPropertyMapOutputWithContext(ctx).OutputState,
	}
}

type UserSchemaPropertyOutput struct{ *pulumi.OutputState }

func (UserSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSchemaProperty)(nil)).Elem()
}

func (o UserSchemaPropertyOutput) ToUserSchemaPropertyOutput() UserSchemaPropertyOutput {
	return o
}

func (o UserSchemaPropertyOutput) ToUserSchemaPropertyOutputWithContext(ctx context.Context) UserSchemaPropertyOutput {
	return o
}

func (o UserSchemaPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[*UserSchemaProperty] {
	return pulumix.Output[*UserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

// Custom Subschema enumerated value of a property of type array.
func (o UserSchemaPropertyOutput) ArrayEnums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringArrayOutput { return v.ArrayEnums }).(pulumi.StringArrayOutput)
}

// array of valid JSON schemas for property type array.
func (o UserSchemaPropertyOutput) ArrayOneOfs() UserSchemaPropertyArrayOneOfArrayOutput {
	return o.ApplyT(func(v *UserSchemaProperty) UserSchemaPropertyArrayOneOfArrayOutput { return v.ArrayOneOfs }).(UserSchemaPropertyArrayOneOfArrayOutput)
}

// Subschema array type: string, number, integer, reference. Type field must be an array.
func (o UserSchemaPropertyOutput) ArrayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.ArrayType }).(pulumi.StringPtrOutput)
}

// Custom Subschema description
func (o UserSchemaPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
func (o UserSchemaPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringArrayOutput { return v.Enums }).(pulumi.StringArrayOutput)
}

// Subschema external name
func (o UserSchemaPropertyOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// Subschema external namespace
func (o UserSchemaPropertyOutput) ExternalNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalNamespace }).(pulumi.StringPtrOutput)
}

// Subschema unique string identifier
func (o UserSchemaPropertyOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// SubSchema profile manager, if not set it will inherit its setting.
func (o UserSchemaPropertyOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

func (o UserSchemaPropertyOutput) MasterOverridePriorities() UserSchemaPropertyMasterOverridePriorityArrayOutput {
	return o.ApplyT(func(v *UserSchemaProperty) UserSchemaPropertyMasterOverridePriorityArrayOutput {
		return v.MasterOverridePriorities
	}).(UserSchemaPropertyMasterOverridePriorityArrayOutput)
}

// Subschema of type string maximum length
func (o UserSchemaPropertyOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.IntPtrOutput { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// Subschema of type string minimum length
func (o UserSchemaPropertyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.IntPtrOutput { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
func (o UserSchemaPropertyOutput) OneOfs() UserSchemaPropertyOneOfArrayOutput {
	return o.ApplyT(func(v *UserSchemaProperty) UserSchemaPropertyOneOfArrayOutput { return v.OneOfs }).(UserSchemaPropertyOneOfArrayOutput)
}

// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
func (o UserSchemaPropertyOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
func (o UserSchemaPropertyOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the subschema is required
func (o UserSchemaPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o UserSchemaPropertyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Enum title
func (o UserSchemaPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Subschema type: string, boolean, number, integer, array, or object
func (o UserSchemaPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Subschema unique restriction
func (o UserSchemaPropertyOutput) Unique() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.Unique }).(pulumi.StringPtrOutput)
}

// Custom subschema user type
func (o UserSchemaPropertyOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSchemaProperty) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSchemaProperty)(nil)).Elem()
}

func (o UserSchemaPropertyArrayOutput) ToUserSchemaPropertyArrayOutput() UserSchemaPropertyArrayOutput {
	return o
}

func (o UserSchemaPropertyArrayOutput) ToUserSchemaPropertyArrayOutputWithContext(ctx context.Context) UserSchemaPropertyArrayOutput {
	return o
}

func (o UserSchemaPropertyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserSchemaProperty] {
	return pulumix.Output[[]*UserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o UserSchemaPropertyArrayOutput) Index(i pulumi.IntInput) UserSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSchemaProperty {
		return vs[0].([]*UserSchemaProperty)[vs[1].(int)]
	}).(UserSchemaPropertyOutput)
}

type UserSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (UserSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSchemaProperty)(nil)).Elem()
}

func (o UserSchemaPropertyMapOutput) ToUserSchemaPropertyMapOutput() UserSchemaPropertyMapOutput {
	return o
}

func (o UserSchemaPropertyMapOutput) ToUserSchemaPropertyMapOutputWithContext(ctx context.Context) UserSchemaPropertyMapOutput {
	return o
}

func (o UserSchemaPropertyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserSchemaProperty] {
	return pulumix.Output[map[string]*UserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o UserSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) UserSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSchemaProperty {
		return vs[0].(map[string]*UserSchemaProperty)[vs[1].(string)]
	}).(UserSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaPropertyInput)(nil)).Elem(), &UserSchemaProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaPropertyArrayInput)(nil)).Elem(), UserSchemaPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaPropertyMapInput)(nil)).Elem(), UserSchemaPropertyMap{})
	pulumi.RegisterOutputType(UserSchemaPropertyOutput{})
	pulumi.RegisterOutputType(UserSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserSchemaPropertyMapOutput{})
}
