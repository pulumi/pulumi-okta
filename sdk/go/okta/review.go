// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages reassignment of review.
//
// This resource allows you to reassign an already existing review.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewReview(ctx, "test", &okta.ReviewArgs{
//				CampaignId: pulumi.String("icizigd86iM9sOcbN1d6"),
//				ReviewerId: pulumi.String("00unli90kor62oF5Z1d7"),
//				ReviewIds: pulumi.StringArray{
//					pulumi.String("icrztblxbBFiVKepb1d6"),
//				},
//				ReviewerLevel: pulumi.String("FIRST"),
//				Note:          pulumi.String("John Smith is on leave for this month. His manager Tim will be the reviewer instead."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/review:Review example <review_id?
// ```
type Review struct {
	pulumi.CustomResourceState

	// The id of the campaign.
	CampaignId pulumi.StringOutput `pulumi:"campaignId"`
	// The ISO 8601 formatted date and time when the resource was created
	Created pulumi.StringOutput `pulumi:"created"`
	// The id of user who created the resource.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The decision of the reviewer.
	Decision pulumi.StringOutput `pulumi:"decision"`
	// The ISO 8601 formatted date and time when the object was last updated.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The id of user who last updated the object.
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// A note to justify the reassignment decision for the specified review.
	Note       pulumi.StringOutput `pulumi:"note"`
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// A list of reviews (review id values) that are reassigned to the new reviewer.
	ReviewIds pulumi.StringArrayOutput `pulumi:"reviewIds"`
	// The Okta user id of the new reviewer.
	ReviewerId pulumi.StringOutput `pulumi:"reviewerId"`
	// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
	ReviewerLevel pulumi.StringPtrOutput `pulumi:"reviewerLevel"`
	// The type of reviewer to which the review is assigned.
	ReviewerType pulumi.StringOutput `pulumi:"reviewerType"`
}

// NewReview registers a new resource with the given unique name, arguments, and options.
func NewReview(ctx *pulumi.Context,
	name string, args *ReviewArgs, opts ...pulumi.ResourceOption) (*Review, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CampaignId == nil {
		return nil, errors.New("invalid value for required argument 'CampaignId'")
	}
	if args.Note == nil {
		return nil, errors.New("invalid value for required argument 'Note'")
	}
	if args.ReviewIds == nil {
		return nil, errors.New("invalid value for required argument 'ReviewIds'")
	}
	if args.ReviewerId == nil {
		return nil, errors.New("invalid value for required argument 'ReviewerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Review
	err := ctx.RegisterResource("okta:index/review:Review", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReview gets an existing Review resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReview(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReviewState, opts ...pulumi.ResourceOption) (*Review, error) {
	var resource Review
	err := ctx.ReadResource("okta:index/review:Review", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Review resources.
type reviewState struct {
	// The id of the campaign.
	CampaignId *string `pulumi:"campaignId"`
	// The ISO 8601 formatted date and time when the resource was created
	Created *string `pulumi:"created"`
	// The id of user who created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The decision of the reviewer.
	Decision *string `pulumi:"decision"`
	// The ISO 8601 formatted date and time when the object was last updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// The id of user who last updated the object.
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// A note to justify the reassignment decision for the specified review.
	Note       *string `pulumi:"note"`
	ResourceId *string `pulumi:"resourceId"`
	// A list of reviews (review id values) that are reassigned to the new reviewer.
	ReviewIds []string `pulumi:"reviewIds"`
	// The Okta user id of the new reviewer.
	ReviewerId *string `pulumi:"reviewerId"`
	// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
	ReviewerLevel *string `pulumi:"reviewerLevel"`
	// The type of reviewer to which the review is assigned.
	ReviewerType *string `pulumi:"reviewerType"`
}

type ReviewState struct {
	// The id of the campaign.
	CampaignId pulumi.StringPtrInput
	// The ISO 8601 formatted date and time when the resource was created
	Created pulumi.StringPtrInput
	// The id of user who created the resource.
	CreatedBy pulumi.StringPtrInput
	// The decision of the reviewer.
	Decision pulumi.StringPtrInput
	// The ISO 8601 formatted date and time when the object was last updated.
	LastUpdated pulumi.StringPtrInput
	// The id of user who last updated the object.
	LastUpdatedBy pulumi.StringPtrInput
	// A note to justify the reassignment decision for the specified review.
	Note       pulumi.StringPtrInput
	ResourceId pulumi.StringPtrInput
	// A list of reviews (review id values) that are reassigned to the new reviewer.
	ReviewIds pulumi.StringArrayInput
	// The Okta user id of the new reviewer.
	ReviewerId pulumi.StringPtrInput
	// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
	ReviewerLevel pulumi.StringPtrInput
	// The type of reviewer to which the review is assigned.
	ReviewerType pulumi.StringPtrInput
}

func (ReviewState) ElementType() reflect.Type {
	return reflect.TypeOf((*reviewState)(nil)).Elem()
}

type reviewArgs struct {
	// The id of the campaign.
	CampaignId string `pulumi:"campaignId"`
	// A note to justify the reassignment decision for the specified review.
	Note string `pulumi:"note"`
	// A list of reviews (review id values) that are reassigned to the new reviewer.
	ReviewIds []string `pulumi:"reviewIds"`
	// The Okta user id of the new reviewer.
	ReviewerId string `pulumi:"reviewerId"`
	// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
	ReviewerLevel *string `pulumi:"reviewerLevel"`
}

// The set of arguments for constructing a Review resource.
type ReviewArgs struct {
	// The id of the campaign.
	CampaignId pulumi.StringInput
	// A note to justify the reassignment decision for the specified review.
	Note pulumi.StringInput
	// A list of reviews (review id values) that are reassigned to the new reviewer.
	ReviewIds pulumi.StringArrayInput
	// The Okta user id of the new reviewer.
	ReviewerId pulumi.StringInput
	// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
	ReviewerLevel pulumi.StringPtrInput
}

func (ReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reviewArgs)(nil)).Elem()
}

type ReviewInput interface {
	pulumi.Input

	ToReviewOutput() ReviewOutput
	ToReviewOutputWithContext(ctx context.Context) ReviewOutput
}

func (*Review) ElementType() reflect.Type {
	return reflect.TypeOf((**Review)(nil)).Elem()
}

func (i *Review) ToReviewOutput() ReviewOutput {
	return i.ToReviewOutputWithContext(context.Background())
}

func (i *Review) ToReviewOutputWithContext(ctx context.Context) ReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReviewOutput)
}

// ReviewArrayInput is an input type that accepts ReviewArray and ReviewArrayOutput values.
// You can construct a concrete instance of `ReviewArrayInput` via:
//
//	ReviewArray{ ReviewArgs{...} }
type ReviewArrayInput interface {
	pulumi.Input

	ToReviewArrayOutput() ReviewArrayOutput
	ToReviewArrayOutputWithContext(context.Context) ReviewArrayOutput
}

type ReviewArray []ReviewInput

func (ReviewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Review)(nil)).Elem()
}

func (i ReviewArray) ToReviewArrayOutput() ReviewArrayOutput {
	return i.ToReviewArrayOutputWithContext(context.Background())
}

func (i ReviewArray) ToReviewArrayOutputWithContext(ctx context.Context) ReviewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReviewArrayOutput)
}

// ReviewMapInput is an input type that accepts ReviewMap and ReviewMapOutput values.
// You can construct a concrete instance of `ReviewMapInput` via:
//
//	ReviewMap{ "key": ReviewArgs{...} }
type ReviewMapInput interface {
	pulumi.Input

	ToReviewMapOutput() ReviewMapOutput
	ToReviewMapOutputWithContext(context.Context) ReviewMapOutput
}

type ReviewMap map[string]ReviewInput

func (ReviewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Review)(nil)).Elem()
}

func (i ReviewMap) ToReviewMapOutput() ReviewMapOutput {
	return i.ToReviewMapOutputWithContext(context.Background())
}

func (i ReviewMap) ToReviewMapOutputWithContext(ctx context.Context) ReviewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReviewMapOutput)
}

type ReviewOutput struct{ *pulumi.OutputState }

func (ReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Review)(nil)).Elem()
}

func (o ReviewOutput) ToReviewOutput() ReviewOutput {
	return o
}

func (o ReviewOutput) ToReviewOutputWithContext(ctx context.Context) ReviewOutput {
	return o
}

// The id of the campaign.
func (o ReviewOutput) CampaignId() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.CampaignId }).(pulumi.StringOutput)
}

// The ISO 8601 formatted date and time when the resource was created
func (o ReviewOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The id of user who created the resource.
func (o ReviewOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The decision of the reviewer.
func (o ReviewOutput) Decision() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.Decision }).(pulumi.StringOutput)
}

// The ISO 8601 formatted date and time when the object was last updated.
func (o ReviewOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The id of user who last updated the object.
func (o ReviewOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// A note to justify the reassignment decision for the specified review.
func (o ReviewOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.Note }).(pulumi.StringOutput)
}

func (o ReviewOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// A list of reviews (review id values) that are reassigned to the new reviewer.
func (o ReviewOutput) ReviewIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Review) pulumi.StringArrayOutput { return v.ReviewIds }).(pulumi.StringArrayOutput)
}

// The Okta user id of the new reviewer.
func (o ReviewOutput) ReviewerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.ReviewerId }).(pulumi.StringOutput)
}

// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
func (o ReviewOutput) ReviewerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Review) pulumi.StringPtrOutput { return v.ReviewerLevel }).(pulumi.StringPtrOutput)
}

// The type of reviewer to which the review is assigned.
func (o ReviewOutput) ReviewerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Review) pulumi.StringOutput { return v.ReviewerType }).(pulumi.StringOutput)
}

type ReviewArrayOutput struct{ *pulumi.OutputState }

func (ReviewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Review)(nil)).Elem()
}

func (o ReviewArrayOutput) ToReviewArrayOutput() ReviewArrayOutput {
	return o
}

func (o ReviewArrayOutput) ToReviewArrayOutputWithContext(ctx context.Context) ReviewArrayOutput {
	return o
}

func (o ReviewArrayOutput) Index(i pulumi.IntInput) ReviewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Review {
		return vs[0].([]*Review)[vs[1].(int)]
	}).(ReviewOutput)
}

type ReviewMapOutput struct{ *pulumi.OutputState }

func (ReviewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Review)(nil)).Elem()
}

func (o ReviewMapOutput) ToReviewMapOutput() ReviewMapOutput {
	return o
}

func (o ReviewMapOutput) ToReviewMapOutputWithContext(ctx context.Context) ReviewMapOutput {
	return o
}

func (o ReviewMapOutput) MapIndex(k pulumi.StringInput) ReviewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Review {
		return vs[0].(map[string]*Review)[vs[1].(string)]
	}).(ReviewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReviewInput)(nil)).Elem(), &Review{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReviewArrayInput)(nil)).Elem(), ReviewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReviewMapInput)(nil)).Elem(), ReviewMap{})
	pulumi.RegisterOutputType(ReviewOutput{})
	pulumi.RegisterOutputType(ReviewArrayOutput{})
	pulumi.RegisterOutputType(ReviewMapOutput{})
}
