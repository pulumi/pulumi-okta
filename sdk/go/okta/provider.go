// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The provider type for the okta package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}
	if args.ApiToken == nil {
		args.ApiToken = pulumi.StringPtr(getEnvOrDefault("", nil, "OKTA_API_TOKEN").(string))
	}
	if args.BaseUrl == nil {
		args.BaseUrl = pulumi.StringPtr(getEnvOrDefault("", nil, "OKTA_BASE_URL").(string))
	}
	if args.OrgName == nil {
		args.OrgName = pulumi.StringPtr(getEnvOrDefault("", nil, "OKTA_ORG_NAME").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:okta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API Token granting privileges to Okta API.
	ApiToken *string `pulumi:"apiToken"`
	// Use exponential back off strategy for rate limits.
	Backoff *bool `pulumi:"backoff"`
	// The Okta url. (Use 'oktapreview.com' for Okta testing)
	BaseUrl *string `pulumi:"baseUrl"`
	// maximum number of retries to attempt before erroring out.
	MaxRetries *int `pulumi:"maxRetries"`
	// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
	MaxWaitSeconds *int `pulumi:"maxWaitSeconds"`
	// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
	MinWaitSeconds *int `pulumi:"minWaitSeconds"`
	// The organization to manage in Okta.
	OrgName *string `pulumi:"orgName"`
	// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
	// https://developer.okta.com/docs/api/getting_started/rate-limits.
	Parallelism *int `pulumi:"parallelism"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API Token granting privileges to Okta API.
	ApiToken pulumi.StringPtrInput
	// Use exponential back off strategy for rate limits.
	Backoff pulumi.BoolPtrInput
	// The Okta url. (Use 'oktapreview.com' for Okta testing)
	BaseUrl pulumi.StringPtrInput
	// maximum number of retries to attempt before erroring out.
	MaxRetries pulumi.IntPtrInput
	// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
	MaxWaitSeconds pulumi.IntPtrInput
	// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
	MinWaitSeconds pulumi.IntPtrInput
	// The organization to manage in Okta.
	OrgName pulumi.StringPtrInput
	// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
	// https://developer.okta.com/docs/api/getting_started/rate-limits.
	Parallelism pulumi.IntPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}
