// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package template

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Okta Email Template.
//
// This resource allows you to create and configure an Okta Email Template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/template"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := template.NewEmail(ctx, "example", &template.EmailArgs{
// 			Translations: template.EmailTranslationArray{
// 				&template.EmailTranslationArgs{
// 					Language: pulumi.String("en"),
// 					Subject:  pulumi.String("Stuff"),
// 					Template: pulumi.String(fmt.Sprintf("%v%v%v%v", "Hi ", user.FirstName, ",<br/><br/>Blah blah ", resetPasswordLink)),
// 				},
// 				&template.EmailTranslationArgs{
// 					Language: pulumi.String("es"),
// 					Subject:  pulumi.String("Cosas"),
// 					Template: pulumi.String(fmt.Sprintf("%v%v%v%v", "Hola ", user.FirstName, ",<br/><br/>Puedo ir al bano ", resetPasswordLink)),
// 				},
// 			},
// 			Type: pulumi.String("email.forgotPassword"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An Okta Email Template can be imported via the template type.
//
// ```sh
//  $ pulumi import okta:template/email:Email example <template type>
// ```
type Email struct {
	pulumi.CustomResourceState

	// The default language, by default is set to `"en"`.
	DefaultLanguage pulumi.StringPtrOutput `pulumi:"defaultLanguage"`
	// Set of translations for a particular template.
	Translations EmailTranslationArrayOutput `pulumi:"translations"`
	// Email template type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEmail registers a new resource with the given unique name, arguments, and options.
func NewEmail(ctx *pulumi.Context,
	name string, args *EmailArgs, opts ...pulumi.ResourceOption) (*Email, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Translations == nil {
		return nil, errors.New("invalid value for required argument 'Translations'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Email
	err := ctx.RegisterResource("okta:template/email:Email", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmail gets an existing Email resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailState, opts ...pulumi.ResourceOption) (*Email, error) {
	var resource Email
	err := ctx.ReadResource("okta:template/email:Email", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Email resources.
type emailState struct {
	// The default language, by default is set to `"en"`.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// Set of translations for a particular template.
	Translations []EmailTranslation `pulumi:"translations"`
	// Email template type
	Type *string `pulumi:"type"`
}

type EmailState struct {
	// The default language, by default is set to `"en"`.
	DefaultLanguage pulumi.StringPtrInput
	// Set of translations for a particular template.
	Translations EmailTranslationArrayInput
	// Email template type
	Type pulumi.StringPtrInput
}

func (EmailState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailState)(nil)).Elem()
}

type emailArgs struct {
	// The default language, by default is set to `"en"`.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// Set of translations for a particular template.
	Translations []EmailTranslation `pulumi:"translations"`
	// Email template type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Email resource.
type EmailArgs struct {
	// The default language, by default is set to `"en"`.
	DefaultLanguage pulumi.StringPtrInput
	// Set of translations for a particular template.
	Translations EmailTranslationArrayInput
	// Email template type
	Type pulumi.StringInput
}

func (EmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailArgs)(nil)).Elem()
}

type EmailInput interface {
	pulumi.Input

	ToEmailOutput() EmailOutput
	ToEmailOutputWithContext(ctx context.Context) EmailOutput
}

func (*Email) ElementType() reflect.Type {
	return reflect.TypeOf((*Email)(nil))
}

func (i *Email) ToEmailOutput() EmailOutput {
	return i.ToEmailOutputWithContext(context.Background())
}

func (i *Email) ToEmailOutputWithContext(ctx context.Context) EmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailOutput)
}

func (i *Email) ToEmailPtrOutput() EmailPtrOutput {
	return i.ToEmailPtrOutputWithContext(context.Background())
}

func (i *Email) ToEmailPtrOutputWithContext(ctx context.Context) EmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailPtrOutput)
}

type EmailPtrInput interface {
	pulumi.Input

	ToEmailPtrOutput() EmailPtrOutput
	ToEmailPtrOutputWithContext(ctx context.Context) EmailPtrOutput
}

type emailPtrType EmailArgs

func (*emailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Email)(nil))
}

func (i *emailPtrType) ToEmailPtrOutput() EmailPtrOutput {
	return i.ToEmailPtrOutputWithContext(context.Background())
}

func (i *emailPtrType) ToEmailPtrOutputWithContext(ctx context.Context) EmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailPtrOutput)
}

// EmailArrayInput is an input type that accepts EmailArray and EmailArrayOutput values.
// You can construct a concrete instance of `EmailArrayInput` via:
//
//          EmailArray{ EmailArgs{...} }
type EmailArrayInput interface {
	pulumi.Input

	ToEmailArrayOutput() EmailArrayOutput
	ToEmailArrayOutputWithContext(context.Context) EmailArrayOutput
}

type EmailArray []EmailInput

func (EmailArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Email)(nil))
}

func (i EmailArray) ToEmailArrayOutput() EmailArrayOutput {
	return i.ToEmailArrayOutputWithContext(context.Background())
}

func (i EmailArray) ToEmailArrayOutputWithContext(ctx context.Context) EmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailArrayOutput)
}

// EmailMapInput is an input type that accepts EmailMap and EmailMapOutput values.
// You can construct a concrete instance of `EmailMapInput` via:
//
//          EmailMap{ "key": EmailArgs{...} }
type EmailMapInput interface {
	pulumi.Input

	ToEmailMapOutput() EmailMapOutput
	ToEmailMapOutputWithContext(context.Context) EmailMapOutput
}

type EmailMap map[string]EmailInput

func (EmailMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Email)(nil))
}

func (i EmailMap) ToEmailMapOutput() EmailMapOutput {
	return i.ToEmailMapOutputWithContext(context.Background())
}

func (i EmailMap) ToEmailMapOutputWithContext(ctx context.Context) EmailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailMapOutput)
}

type EmailOutput struct {
	*pulumi.OutputState
}

func (EmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Email)(nil))
}

func (o EmailOutput) ToEmailOutput() EmailOutput {
	return o
}

func (o EmailOutput) ToEmailOutputWithContext(ctx context.Context) EmailOutput {
	return o
}

func (o EmailOutput) ToEmailPtrOutput() EmailPtrOutput {
	return o.ToEmailPtrOutputWithContext(context.Background())
}

func (o EmailOutput) ToEmailPtrOutputWithContext(ctx context.Context) EmailPtrOutput {
	return o.ApplyT(func(v Email) *Email {
		return &v
	}).(EmailPtrOutput)
}

type EmailPtrOutput struct {
	*pulumi.OutputState
}

func (EmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Email)(nil))
}

func (o EmailPtrOutput) ToEmailPtrOutput() EmailPtrOutput {
	return o
}

func (o EmailPtrOutput) ToEmailPtrOutputWithContext(ctx context.Context) EmailPtrOutput {
	return o
}

type EmailArrayOutput struct{ *pulumi.OutputState }

func (EmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Email)(nil))
}

func (o EmailArrayOutput) ToEmailArrayOutput() EmailArrayOutput {
	return o
}

func (o EmailArrayOutput) ToEmailArrayOutputWithContext(ctx context.Context) EmailArrayOutput {
	return o
}

func (o EmailArrayOutput) Index(i pulumi.IntInput) EmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Email {
		return vs[0].([]Email)[vs[1].(int)]
	}).(EmailOutput)
}

type EmailMapOutput struct{ *pulumi.OutputState }

func (EmailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Email)(nil))
}

func (o EmailMapOutput) ToEmailMapOutput() EmailMapOutput {
	return o
}

func (o EmailMapOutput) ToEmailMapOutputWithContext(ctx context.Context) EmailMapOutput {
	return o
}

func (o EmailMapOutput) MapIndex(k pulumi.StringInput) EmailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Email {
		return vs[0].(map[string]Email)[vs[1].(string)]
	}).(EmailOutput)
}

func init() {
	pulumi.RegisterOutputType(EmailOutput{})
	pulumi.RegisterOutputType(EmailPtrOutput{})
	pulumi.RegisterOutputType(EmailArrayOutput{})
	pulumi.RegisterOutputType(EmailMapOutput{})
}
