// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HookHeader struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// HookHeaderInput is an input type that accepts HookHeaderArgs and HookHeaderOutput values.
// You can construct a concrete instance of `HookHeaderInput` via:
//
//	HookHeaderArgs{...}
type HookHeaderInput interface {
	pulumi.Input

	ToHookHeaderOutput() HookHeaderOutput
	ToHookHeaderOutputWithContext(context.Context) HookHeaderOutput
}

type HookHeaderArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HookHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HookHeader)(nil)).Elem()
}

func (i HookHeaderArgs) ToHookHeaderOutput() HookHeaderOutput {
	return i.ToHookHeaderOutputWithContext(context.Background())
}

func (i HookHeaderArgs) ToHookHeaderOutputWithContext(ctx context.Context) HookHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookHeaderOutput)
}

// HookHeaderArrayInput is an input type that accepts HookHeaderArray and HookHeaderArrayOutput values.
// You can construct a concrete instance of `HookHeaderArrayInput` via:
//
//	HookHeaderArray{ HookHeaderArgs{...} }
type HookHeaderArrayInput interface {
	pulumi.Input

	ToHookHeaderArrayOutput() HookHeaderArrayOutput
	ToHookHeaderArrayOutputWithContext(context.Context) HookHeaderArrayOutput
}

type HookHeaderArray []HookHeaderInput

func (HookHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HookHeader)(nil)).Elem()
}

func (i HookHeaderArray) ToHookHeaderArrayOutput() HookHeaderArrayOutput {
	return i.ToHookHeaderArrayOutputWithContext(context.Background())
}

func (i HookHeaderArray) ToHookHeaderArrayOutputWithContext(ctx context.Context) HookHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookHeaderArrayOutput)
}

type HookHeaderOutput struct{ *pulumi.OutputState }

func (HookHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HookHeader)(nil)).Elem()
}

func (o HookHeaderOutput) ToHookHeaderOutput() HookHeaderOutput {
	return o
}

func (o HookHeaderOutput) ToHookHeaderOutputWithContext(ctx context.Context) HookHeaderOutput {
	return o
}

func (o HookHeaderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookHeader) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o HookHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HookHeaderArrayOutput struct{ *pulumi.OutputState }

func (HookHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HookHeader)(nil)).Elem()
}

func (o HookHeaderArrayOutput) ToHookHeaderArrayOutput() HookHeaderArrayOutput {
	return o
}

func (o HookHeaderArrayOutput) ToHookHeaderArrayOutputWithContext(ctx context.Context) HookHeaderArrayOutput {
	return o
}

func (o HookHeaderArrayOutput) Index(i pulumi.IntInput) HookHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HookHeader {
		return vs[0].([]HookHeader)[vs[1].(int)]
	}).(HookHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookHeaderInput)(nil)).Elem(), HookHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookHeaderArrayInput)(nil)).Elem(), HookHeaderArray{})
	pulumi.RegisterOutputType(HookHeaderOutput{})
	pulumi.RegisterOutputType(HookHeaderArrayOutput{})
}
