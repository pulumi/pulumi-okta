// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package inline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type HookAuth struct {
	// Key to use for authentication, usually the header name, for example `"Authorization"`.
	Key *string `pulumi:"key"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type *string `pulumi:"type"`
	// Authentication secret.
	Value *string `pulumi:"value"`
}

type HookAuthInput interface {
	pulumi.Input

	ToHookAuthOutput() HookAuthOutput
	ToHookAuthOutputWithContext(context.Context) HookAuthOutput
}

type HookAuthArgs struct {
	// Key to use for authentication, usually the header name, for example `"Authorization"`.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Authentication secret.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HookAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HookAuth)(nil)).Elem()
}

func (i HookAuthArgs) ToHookAuthOutput() HookAuthOutput {
	return i.ToHookAuthOutputWithContext(context.Background())
}

func (i HookAuthArgs) ToHookAuthOutputWithContext(ctx context.Context) HookAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookAuthOutput)
}

func (i HookAuthArgs) ToHookAuthPtrOutput() HookAuthPtrOutput {
	return i.ToHookAuthPtrOutputWithContext(context.Background())
}

func (i HookAuthArgs) ToHookAuthPtrOutputWithContext(ctx context.Context) HookAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookAuthOutput).ToHookAuthPtrOutputWithContext(ctx)
}

type HookAuthPtrInput interface {
	pulumi.Input

	ToHookAuthPtrOutput() HookAuthPtrOutput
	ToHookAuthPtrOutputWithContext(context.Context) HookAuthPtrOutput
}

type hookAuthPtrType HookAuthArgs

func HookAuthPtr(v *HookAuthArgs) HookAuthPtrInput {
	return (*hookAuthPtrType)(v)
}

func (*hookAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HookAuth)(nil)).Elem()
}

func (i *hookAuthPtrType) ToHookAuthPtrOutput() HookAuthPtrOutput {
	return i.ToHookAuthPtrOutputWithContext(context.Background())
}

func (i *hookAuthPtrType) ToHookAuthPtrOutputWithContext(ctx context.Context) HookAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookAuthPtrOutput)
}

type HookAuthOutput struct{ *pulumi.OutputState }

func (HookAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HookAuth)(nil)).Elem()
}

func (o HookAuthOutput) ToHookAuthOutput() HookAuthOutput {
	return o
}

func (o HookAuthOutput) ToHookAuthOutputWithContext(ctx context.Context) HookAuthOutput {
	return o
}

func (o HookAuthOutput) ToHookAuthPtrOutput() HookAuthPtrOutput {
	return o.ToHookAuthPtrOutputWithContext(context.Background())
}

func (o HookAuthOutput) ToHookAuthPtrOutputWithContext(ctx context.Context) HookAuthPtrOutput {
	return o.ApplyT(func(v HookAuth) *HookAuth {
		return &v
	}).(HookAuthPtrOutput)
}

// Key to use for authentication, usually the header name, for example `"Authorization"`.
func (o HookAuthOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The type of hook to trigger. Currently only `"HTTP"` is supported.
func (o HookAuthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Authentication secret.
func (o HookAuthOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HookAuthPtrOutput struct{ *pulumi.OutputState }

func (HookAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HookAuth)(nil)).Elem()
}

func (o HookAuthPtrOutput) ToHookAuthPtrOutput() HookAuthPtrOutput {
	return o
}

func (o HookAuthPtrOutput) ToHookAuthPtrOutputWithContext(ctx context.Context) HookAuthPtrOutput {
	return o
}

func (o HookAuthPtrOutput) Elem() HookAuthOutput {
	return o.ApplyT(func(v *HookAuth) HookAuth { return *v }).(HookAuthOutput)
}

// Key to use for authentication, usually the header name, for example `"Authorization"`.
func (o HookAuthPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The type of hook to trigger. Currently only `"HTTP"` is supported.
func (o HookAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Authentication secret.
func (o HookAuthPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookAuth) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HookChannel struct {
	// The request method to use. Default is `"POST"`.
	Method *string `pulumi:"method"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type *bool `pulumi:"type"`
	// The URI the hook will hit.
	Uri string `pulumi:"uri"`
	// The version of the endpoint.
	Version string `pulumi:"version"`
}

type HookChannelInput interface {
	pulumi.Input

	ToHookChannelOutput() HookChannelOutput
	ToHookChannelOutputWithContext(context.Context) HookChannelOutput
}

type HookChannelArgs struct {
	// The request method to use. Default is `"POST"`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type pulumi.BoolPtrInput `pulumi:"type"`
	// The URI the hook will hit.
	Uri pulumi.StringInput `pulumi:"uri"`
	// The version of the endpoint.
	Version pulumi.StringInput `pulumi:"version"`
}

func (HookChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HookChannel)(nil)).Elem()
}

func (i HookChannelArgs) ToHookChannelOutput() HookChannelOutput {
	return i.ToHookChannelOutputWithContext(context.Background())
}

func (i HookChannelArgs) ToHookChannelOutputWithContext(ctx context.Context) HookChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookChannelOutput)
}

func (i HookChannelArgs) ToHookChannelPtrOutput() HookChannelPtrOutput {
	return i.ToHookChannelPtrOutputWithContext(context.Background())
}

func (i HookChannelArgs) ToHookChannelPtrOutputWithContext(ctx context.Context) HookChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookChannelOutput).ToHookChannelPtrOutputWithContext(ctx)
}

type HookChannelPtrInput interface {
	pulumi.Input

	ToHookChannelPtrOutput() HookChannelPtrOutput
	ToHookChannelPtrOutputWithContext(context.Context) HookChannelPtrOutput
}

type hookChannelPtrType HookChannelArgs

func HookChannelPtr(v *HookChannelArgs) HookChannelPtrInput {
	return (*hookChannelPtrType)(v)
}

func (*hookChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HookChannel)(nil)).Elem()
}

func (i *hookChannelPtrType) ToHookChannelPtrOutput() HookChannelPtrOutput {
	return i.ToHookChannelPtrOutputWithContext(context.Background())
}

func (i *hookChannelPtrType) ToHookChannelPtrOutputWithContext(ctx context.Context) HookChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookChannelPtrOutput)
}

type HookChannelOutput struct{ *pulumi.OutputState }

func (HookChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HookChannel)(nil)).Elem()
}

func (o HookChannelOutput) ToHookChannelOutput() HookChannelOutput {
	return o
}

func (o HookChannelOutput) ToHookChannelOutputWithContext(ctx context.Context) HookChannelOutput {
	return o
}

func (o HookChannelOutput) ToHookChannelPtrOutput() HookChannelPtrOutput {
	return o.ToHookChannelPtrOutputWithContext(context.Background())
}

func (o HookChannelOutput) ToHookChannelPtrOutputWithContext(ctx context.Context) HookChannelPtrOutput {
	return o.ApplyT(func(v HookChannel) *HookChannel {
		return &v
	}).(HookChannelPtrOutput)
}

// The request method to use. Default is `"POST"`.
func (o HookChannelOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookChannel) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The type of hook to trigger. Currently only `"HTTP"` is supported.
func (o HookChannelOutput) Type() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HookChannel) *bool { return v.Type }).(pulumi.BoolPtrOutput)
}

// The URI the hook will hit.
func (o HookChannelOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HookChannel) string { return v.Uri }).(pulumi.StringOutput)
}

// The version of the endpoint.
func (o HookChannelOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v HookChannel) string { return v.Version }).(pulumi.StringOutput)
}

type HookChannelPtrOutput struct{ *pulumi.OutputState }

func (HookChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HookChannel)(nil)).Elem()
}

func (o HookChannelPtrOutput) ToHookChannelPtrOutput() HookChannelPtrOutput {
	return o
}

func (o HookChannelPtrOutput) ToHookChannelPtrOutputWithContext(ctx context.Context) HookChannelPtrOutput {
	return o
}

func (o HookChannelPtrOutput) Elem() HookChannelOutput {
	return o.ApplyT(func(v *HookChannel) HookChannel { return *v }).(HookChannelOutput)
}

// The request method to use. Default is `"POST"`.
func (o HookChannelPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookChannel) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The type of hook to trigger. Currently only `"HTTP"` is supported.
func (o HookChannelPtrOutput) Type() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HookChannel) *bool { return v.Type }).(pulumi.BoolPtrOutput)
}

// The URI the hook will hit.
func (o HookChannelPtrOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HookChannel) string { return v.Uri }).(pulumi.StringOutput)
}

// The version of the endpoint.
func (o HookChannelPtrOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v HookChannel) string { return v.Version }).(pulumi.StringOutput)
}

type HookHeader struct {
	// Key to use for authentication, usually the header name, for example `"Authorization"`.
	Key *string `pulumi:"key"`
	// Authentication secret.
	Value *string `pulumi:"value"`
}

type HookHeaderInput interface {
	pulumi.Input

	ToHookHeaderOutput() HookHeaderOutput
	ToHookHeaderOutputWithContext(context.Context) HookHeaderOutput
}

type HookHeaderArgs struct {
	// Key to use for authentication, usually the header name, for example `"Authorization"`.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Authentication secret.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HookHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HookHeader)(nil)).Elem()
}

func (i HookHeaderArgs) ToHookHeaderOutput() HookHeaderOutput {
	return i.ToHookHeaderOutputWithContext(context.Background())
}

func (i HookHeaderArgs) ToHookHeaderOutputWithContext(ctx context.Context) HookHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookHeaderOutput)
}

type HookHeaderArrayInput interface {
	pulumi.Input

	ToHookHeaderArrayOutput() HookHeaderArrayOutput
	ToHookHeaderArrayOutputWithContext(context.Context) HookHeaderArrayOutput
}

type HookHeaderArray []HookHeaderInput

func (HookHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HookHeader)(nil)).Elem()
}

func (i HookHeaderArray) ToHookHeaderArrayOutput() HookHeaderArrayOutput {
	return i.ToHookHeaderArrayOutputWithContext(context.Background())
}

func (i HookHeaderArray) ToHookHeaderArrayOutputWithContext(ctx context.Context) HookHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookHeaderArrayOutput)
}

type HookHeaderOutput struct{ *pulumi.OutputState }

func (HookHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HookHeader)(nil)).Elem()
}

func (o HookHeaderOutput) ToHookHeaderOutput() HookHeaderOutput {
	return o
}

func (o HookHeaderOutput) ToHookHeaderOutputWithContext(ctx context.Context) HookHeaderOutput {
	return o
}

// Key to use for authentication, usually the header name, for example `"Authorization"`.
func (o HookHeaderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookHeader) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Authentication secret.
func (o HookHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HookHeaderArrayOutput struct{ *pulumi.OutputState }

func (HookHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HookHeader)(nil)).Elem()
}

func (o HookHeaderArrayOutput) ToHookHeaderArrayOutput() HookHeaderArrayOutput {
	return o
}

func (o HookHeaderArrayOutput) ToHookHeaderArrayOutputWithContext(ctx context.Context) HookHeaderArrayOutput {
	return o
}

func (o HookHeaderArrayOutput) Index(i pulumi.IntInput) HookHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HookHeader {
		return vs[0].([]HookHeader)[vs[1].(int)]
	}).(HookHeaderOutput)
}

func init() {
	pulumi.RegisterOutputType(HookAuthOutput{})
	pulumi.RegisterOutputType(HookAuthPtrOutput{})
	pulumi.RegisterOutputType(HookChannelOutput{})
	pulumi.RegisterOutputType(HookChannelPtrOutput{})
	pulumi.RegisterOutputType(HookHeaderOutput{})
	pulumi.RegisterOutputType(HookHeaderArrayOutput{})
}
