// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package inline

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an inline hook.
//
// This resource allows you to create and configure an inline hook.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/inline"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := inline.NewHook(ctx, "example", &inline.HookArgs{
// 			Auth: pulumi.StringMap{
// 				"key":   pulumi.String("Authorization"),
// 				"type":  pulumi.String("HEADER"),
// 				"value": pulumi.String("secret"),
// 			},
// 			Channel: pulumi.StringMap{
// 				"method":  pulumi.String("POST"),
// 				"uri":     pulumi.String("https://example.com/test"),
// 				"version": pulumi.String("1.0.0"),
// 			},
// 			Type:    pulumi.String("com.okta.oauth2.tokens.transform"),
// 			Version: pulumi.String("1.0.0"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An inline hook can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:inline/hook:Hook example <hook id>
// ```
type Hook struct {
	pulumi.CustomResourceState

	// Authentication required for inline hook request.
	Auth pulumi.StringMapOutput `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel pulumi.StringMapOutput `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayOutput `pulumi:"headers"`
	// The inline hook display name.
	Name   pulumi.StringOutput    `pulumi:"name"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of hook to trigger. Currently, the only supported type is `"HTTP"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Version of the channel. The currently-supported version is `"1.0.0"`.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource Hook
	err := ctx.RegisterResource("okta:inline/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("okta:inline/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	// Authentication required for inline hook request.
	Auth map[string]string `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel map[string]string `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
	// The type of hook to trigger. Currently, the only supported type is `"HTTP"`.
	Type *string `pulumi:"type"`
	// Version of the channel. The currently-supported version is `"1.0.0"`.
	Version *string `pulumi:"version"`
}

type HookState struct {
	// Authentication required for inline hook request.
	Auth pulumi.StringMapInput
	// Details of the endpoint the inline hook will hit.
	Channel pulumi.StringMapInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
	// The type of hook to trigger. Currently, the only supported type is `"HTTP"`.
	Type pulumi.StringPtrInput
	// Version of the channel. The currently-supported version is `"1.0.0"`.
	Version pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	// Authentication required for inline hook request.
	Auth map[string]string `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel map[string]string `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
	// The type of hook to trigger. Currently, the only supported type is `"HTTP"`.
	Type string `pulumi:"type"`
	// Version of the channel. The currently-supported version is `"1.0.0"`.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	// Authentication required for inline hook request.
	Auth pulumi.StringMapInput
	// Details of the endpoint the inline hook will hit.
	Channel pulumi.StringMapInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
	// The type of hook to trigger. Currently, the only supported type is `"HTTP"`.
	Type pulumi.StringInput
	// Version of the channel. The currently-supported version is `"1.0.0"`.
	Version pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil))
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

func (i *Hook) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i *Hook) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookPtrOutput)
}

type HookPtrInput interface {
	pulumi.Input

	ToHookPtrOutput() HookPtrOutput
	ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput
}

type hookPtrType HookArgs

func (*hookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil))
}

func (i *hookPtrType) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i *hookPtrType) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookPtrOutput)
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//          HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Hook)(nil))
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//          HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Hook)(nil))
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

type HookOutput struct {
	*pulumi.OutputState
}

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil))
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

func (o HookOutput) ToHookPtrOutput() HookPtrOutput {
	return o.ToHookPtrOutputWithContext(context.Background())
}

func (o HookOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o.ApplyT(func(v Hook) *Hook {
		return &v
	}).(HookPtrOutput)
}

type HookPtrOutput struct {
	*pulumi.OutputState
}

func (HookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil))
}

func (o HookPtrOutput) ToHookPtrOutput() HookPtrOutput {
	return o
}

func (o HookPtrOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hook)(nil))
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hook {
		return vs[0].([]Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Hook)(nil))
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Hook {
		return vs[0].(map[string]Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookPtrOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
