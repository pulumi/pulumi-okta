// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package inline

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an inline hook.
//
// This resource allows you to create and configure an inline hook.
type Hook struct {
	pulumi.CustomResourceState

	// Authentication required for inline hook request.
	Auth HookAuthPtrOutput `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel HookChannelPtrOutput `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayOutput `pulumi:"headers"`
	// The inline hook display name.
	Name   pulumi.StringOutput    `pulumi:"name"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the endpoint.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Version == nil {
		return nil, errors.New("missing required argument 'Version'")
	}
	if args == nil {
		args = &HookArgs{}
	}
	var resource Hook
	err := ctx.RegisterResource("okta:inline/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("okta:inline/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	// Authentication required for inline hook request.
	Auth *HookAuth `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel *HookChannel `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type *string `pulumi:"type"`
	// The version of the endpoint.
	Version *string `pulumi:"version"`
}

type HookState struct {
	// Authentication required for inline hook request.
	Auth HookAuthPtrInput
	// Details of the endpoint the inline hook will hit.
	Channel HookChannelPtrInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type pulumi.StringPtrInput
	// The version of the endpoint.
	Version pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	// Authentication required for inline hook request.
	Auth *HookAuth `pulumi:"auth"`
	// Details of the endpoint the inline hook will hit.
	Channel *HookChannel `pulumi:"channel"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type string `pulumi:"type"`
	// The version of the endpoint.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	// Authentication required for inline hook request.
	Auth HookAuthPtrInput
	// Details of the endpoint the inline hook will hit.
	Channel HookChannelPtrInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
	// The type of hook to trigger. Currently only `"HTTP"` is supported.
	Type pulumi.StringInput
	// The version of the endpoint.
	Version pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}
