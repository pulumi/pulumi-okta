// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an inline hook. This resource allows you to create and configure an inline hook.
//
// ## Example Usage
//
// ### HTTP Auth
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/inline"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inline.NewHook(ctx, "example", &inline.HookArgs{
//				Name:    pulumi.String("example"),
//				Version: pulumi.String("1.0.0"),
//				Type:    pulumi.String("com.okta.oauth2.tokens.transform"),
//				Channel: pulumi.StringMap{
//					"version": pulumi.String("1.0.0"),
//					"uri":     pulumi.String("https://example.com/test"),
//					"method":  pulumi.String("POST"),
//				},
//				Auth: pulumi.StringMap{
//					"key":   pulumi.String("Authorization"),
//					"type":  pulumi.String("HEADER"),
//					"value": pulumi.String("secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### OAuth2.0 Auth
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/inline"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inline.NewHook(ctx, "example", &inline.HookArgs{
//				Name:    pulumi.String("example"),
//				Version: pulumi.String("1.0.0"),
//				Type:    pulumi.String("com.okta.saml.tokens.transform"),
//				Status:  pulumi.String("ACTIVE"),
//				ChannelJson: pulumi.String(`{
//	        "type": "OAUTH",
//	        "version": "1.0.0",
//	        "config": {
//	            "headers": [
//	                {
//	                    "key": "Field 1",
//	                    "value": "Value 1"
//	                },
//	                {
//	                    "key": "Field 2",
//	                    "value": "Value 2"
//	                }
//	            ],
//	            "method": "POST",
//	            "authType": "client_secret_post",
//	            "uri": "https://example.com/service",
//	            "clientId": "abc123",
//	            "clientSecret": "fake-secret",
//	            "tokenUrl": "https://example.com/token",
//	            "scope": "api"
//	        }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:inline/hook:Hook example <hook_id>
// ```
type Hook struct {
	pulumi.CustomResourceState

	Auth    pulumi.StringMapOutput `pulumi:"auth"`
	Channel pulumi.StringMapOutput `pulumi:"channel"`
	// true channel object for the inline hook API contract
	ChannelJson pulumi.StringPtrOutput `pulumi:"channelJson"`
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayOutput `pulumi:"headers"`
	// The inline hook display name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Default to `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the hook. The currently-supported version is `1.0.0`.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hook
	err := ctx.RegisterResource("okta:inline/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("okta:inline/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	Auth    map[string]string `pulumi:"auth"`
	Channel map[string]string `pulumi:"channel"`
	// true channel object for the inline hook API contract
	ChannelJson *string `pulumi:"channelJson"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name *string `pulumi:"name"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
	Type *string `pulumi:"type"`
	// The version of the hook. The currently-supported version is `1.0.0`.
	Version *string `pulumi:"version"`
}

type HookState struct {
	Auth    pulumi.StringMapInput
	Channel pulumi.StringMapInput
	// true channel object for the inline hook API contract
	ChannelJson pulumi.StringPtrInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name pulumi.StringPtrInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
	Type pulumi.StringPtrInput
	// The version of the hook. The currently-supported version is `1.0.0`.
	Version pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	Auth    map[string]string `pulumi:"auth"`
	Channel map[string]string `pulumi:"channel"`
	// true channel object for the inline hook API contract
	ChannelJson *string `pulumi:"channelJson"`
	// Map of headers to send along in inline hook request.
	Headers []HookHeader `pulumi:"headers"`
	// The inline hook display name.
	Name *string `pulumi:"name"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
	Type string `pulumi:"type"`
	// The version of the hook. The currently-supported version is `1.0.0`.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	Auth    pulumi.StringMapInput
	Channel pulumi.StringMapInput
	// true channel object for the inline hook API contract
	ChannelJson pulumi.StringPtrInput
	// Map of headers to send along in inline hook request.
	Headers HookHeaderArrayInput
	// The inline hook display name.
	Name pulumi.StringPtrInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
	Type pulumi.StringInput
	// The version of the hook. The currently-supported version is `1.0.0`.
	Version pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//	HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//	HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

type HookOutput struct{ *pulumi.OutputState }

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

func (o HookOutput) Auth() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringMapOutput { return v.Auth }).(pulumi.StringMapOutput)
}

func (o HookOutput) Channel() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringMapOutput { return v.Channel }).(pulumi.StringMapOutput)
}

// true channel object for the inline hook API contract
func (o HookOutput) ChannelJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringPtrOutput { return v.ChannelJson }).(pulumi.StringPtrOutput)
}

// Map of headers to send along in inline hook request.
func (o HookOutput) Headers() HookHeaderArrayOutput {
	return o.ApplyT(func(v *Hook) HookHeaderArrayOutput { return v.Headers }).(HookHeaderArrayOutput)
}

// The inline hook display name.
func (o HookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Default to `ACTIVE`
func (o HookOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
func (o HookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the hook. The currently-supported version is `1.0.0`.
func (o HookOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].([]*Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].(map[string]*Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookInput)(nil)).Elem(), &Hook{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookArrayInput)(nil)).Elem(), HookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookMapInput)(nil)).Elem(), HookMap{})
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
