// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Campaign. This resource allows you to create and configure an Okta [Campaign](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Campaigns/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewCampaign(ctx, "example", &okta.CampaignArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/campaign:Campaign example <campaign_id>
// ```
type Campaign struct {
	pulumi.CustomResourceState

	// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
	CampaignTier pulumi.StringPtrOutput `pulumi:"campaignTier"`
	// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
	CampaignType pulumi.StringOutput `pulumi:"campaignType"`
	// Human readable description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the campaign
	Name                 pulumi.StringOutput                   `pulumi:"name"`
	NotificationSettings CampaignNotificationSettingsPtrOutput `pulumi:"notificationSettings"`
	// User scope specific settings
	PrincipalScopeSettings CampaignPrincipalScopeSettingsPtrOutput `pulumi:"principalScopeSettings"`
	// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
	RemediationSettings CampaignRemediationSettingsPtrOutput `pulumi:"remediationSettings"`
	// Resource specific properties.
	ResourceSettings CampaignResourceSettingsPtrOutput `pulumi:"resourceSettings"`
	// Identifies the kind of reviewer for Access Certification.
	ReviewerSettings CampaignReviewerSettingsPtrOutput `pulumi:"reviewerSettings"`
	// Scheduler specific settings.
	ScheduleSettings CampaignScheduleSettingsPtrOutput `pulumi:"scheduleSettings"`
	// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
	SkipRemediation pulumi.BoolPtrOutput `pulumi:"skipRemediation"`
}

// NewCampaign registers a new resource with the given unique name, arguments, and options.
func NewCampaign(ctx *pulumi.Context,
	name string, args *CampaignArgs, opts ...pulumi.ResourceOption) (*Campaign, error) {
	if args == nil {
		args = &CampaignArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Campaign
	err := ctx.RegisterResource("okta:index/campaign:Campaign", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCampaign gets an existing Campaign resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCampaign(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CampaignState, opts ...pulumi.ResourceOption) (*Campaign, error) {
	var resource Campaign
	err := ctx.ReadResource("okta:index/campaign:Campaign", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Campaign resources.
type campaignState struct {
	// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
	CampaignTier *string `pulumi:"campaignTier"`
	// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
	CampaignType *string `pulumi:"campaignType"`
	// Human readable description.
	Description *string `pulumi:"description"`
	// Name of the campaign
	Name                 *string                       `pulumi:"name"`
	NotificationSettings *CampaignNotificationSettings `pulumi:"notificationSettings"`
	// User scope specific settings
	PrincipalScopeSettings *CampaignPrincipalScopeSettings `pulumi:"principalScopeSettings"`
	// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
	RemediationSettings *CampaignRemediationSettings `pulumi:"remediationSettings"`
	// Resource specific properties.
	ResourceSettings *CampaignResourceSettings `pulumi:"resourceSettings"`
	// Identifies the kind of reviewer for Access Certification.
	ReviewerSettings *CampaignReviewerSettings `pulumi:"reviewerSettings"`
	// Scheduler specific settings.
	ScheduleSettings *CampaignScheduleSettings `pulumi:"scheduleSettings"`
	// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
	SkipRemediation *bool `pulumi:"skipRemediation"`
}

type CampaignState struct {
	// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
	CampaignTier pulumi.StringPtrInput
	// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
	CampaignType pulumi.StringPtrInput
	// Human readable description.
	Description pulumi.StringPtrInput
	// Name of the campaign
	Name                 pulumi.StringPtrInput
	NotificationSettings CampaignNotificationSettingsPtrInput
	// User scope specific settings
	PrincipalScopeSettings CampaignPrincipalScopeSettingsPtrInput
	// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
	RemediationSettings CampaignRemediationSettingsPtrInput
	// Resource specific properties.
	ResourceSettings CampaignResourceSettingsPtrInput
	// Identifies the kind of reviewer for Access Certification.
	ReviewerSettings CampaignReviewerSettingsPtrInput
	// Scheduler specific settings.
	ScheduleSettings CampaignScheduleSettingsPtrInput
	// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
	SkipRemediation pulumi.BoolPtrInput
}

func (CampaignState) ElementType() reflect.Type {
	return reflect.TypeOf((*campaignState)(nil)).Elem()
}

type campaignArgs struct {
	// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
	CampaignTier *string `pulumi:"campaignTier"`
	// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
	CampaignType *string `pulumi:"campaignType"`
	// Human readable description.
	Description *string `pulumi:"description"`
	// Name of the campaign
	Name                 *string                       `pulumi:"name"`
	NotificationSettings *CampaignNotificationSettings `pulumi:"notificationSettings"`
	// User scope specific settings
	PrincipalScopeSettings *CampaignPrincipalScopeSettings `pulumi:"principalScopeSettings"`
	// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
	RemediationSettings *CampaignRemediationSettings `pulumi:"remediationSettings"`
	// Resource specific properties.
	ResourceSettings *CampaignResourceSettings `pulumi:"resourceSettings"`
	// Identifies the kind of reviewer for Access Certification.
	ReviewerSettings *CampaignReviewerSettings `pulumi:"reviewerSettings"`
	// Scheduler specific settings.
	ScheduleSettings *CampaignScheduleSettings `pulumi:"scheduleSettings"`
	// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
	SkipRemediation *bool `pulumi:"skipRemediation"`
}

// The set of arguments for constructing a Campaign resource.
type CampaignArgs struct {
	// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
	CampaignTier pulumi.StringPtrInput
	// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
	CampaignType pulumi.StringPtrInput
	// Human readable description.
	Description pulumi.StringPtrInput
	// Name of the campaign
	Name                 pulumi.StringPtrInput
	NotificationSettings CampaignNotificationSettingsPtrInput
	// User scope specific settings
	PrincipalScopeSettings CampaignPrincipalScopeSettingsPtrInput
	// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
	RemediationSettings CampaignRemediationSettingsPtrInput
	// Resource specific properties.
	ResourceSettings CampaignResourceSettingsPtrInput
	// Identifies the kind of reviewer for Access Certification.
	ReviewerSettings CampaignReviewerSettingsPtrInput
	// Scheduler specific settings.
	ScheduleSettings CampaignScheduleSettingsPtrInput
	// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
	SkipRemediation pulumi.BoolPtrInput
}

func (CampaignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*campaignArgs)(nil)).Elem()
}

type CampaignInput interface {
	pulumi.Input

	ToCampaignOutput() CampaignOutput
	ToCampaignOutputWithContext(ctx context.Context) CampaignOutput
}

func (*Campaign) ElementType() reflect.Type {
	return reflect.TypeOf((**Campaign)(nil)).Elem()
}

func (i *Campaign) ToCampaignOutput() CampaignOutput {
	return i.ToCampaignOutputWithContext(context.Background())
}

func (i *Campaign) ToCampaignOutputWithContext(ctx context.Context) CampaignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignOutput)
}

// CampaignArrayInput is an input type that accepts CampaignArray and CampaignArrayOutput values.
// You can construct a concrete instance of `CampaignArrayInput` via:
//
//	CampaignArray{ CampaignArgs{...} }
type CampaignArrayInput interface {
	pulumi.Input

	ToCampaignArrayOutput() CampaignArrayOutput
	ToCampaignArrayOutputWithContext(context.Context) CampaignArrayOutput
}

type CampaignArray []CampaignInput

func (CampaignArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Campaign)(nil)).Elem()
}

func (i CampaignArray) ToCampaignArrayOutput() CampaignArrayOutput {
	return i.ToCampaignArrayOutputWithContext(context.Background())
}

func (i CampaignArray) ToCampaignArrayOutputWithContext(ctx context.Context) CampaignArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignArrayOutput)
}

// CampaignMapInput is an input type that accepts CampaignMap and CampaignMapOutput values.
// You can construct a concrete instance of `CampaignMapInput` via:
//
//	CampaignMap{ "key": CampaignArgs{...} }
type CampaignMapInput interface {
	pulumi.Input

	ToCampaignMapOutput() CampaignMapOutput
	ToCampaignMapOutputWithContext(context.Context) CampaignMapOutput
}

type CampaignMap map[string]CampaignInput

func (CampaignMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Campaign)(nil)).Elem()
}

func (i CampaignMap) ToCampaignMapOutput() CampaignMapOutput {
	return i.ToCampaignMapOutputWithContext(context.Background())
}

func (i CampaignMap) ToCampaignMapOutputWithContext(ctx context.Context) CampaignMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignMapOutput)
}

type CampaignOutput struct{ *pulumi.OutputState }

func (CampaignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Campaign)(nil)).Elem()
}

func (o CampaignOutput) ToCampaignOutput() CampaignOutput {
	return o
}

func (o CampaignOutput) ToCampaignOutputWithContext(ctx context.Context) CampaignOutput {
	return o
}

// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
func (o CampaignOutput) CampaignTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Campaign) pulumi.StringPtrOutput { return v.CampaignTier }).(pulumi.StringPtrOutput)
}

// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
func (o CampaignOutput) CampaignType() pulumi.StringOutput {
	return o.ApplyT(func(v *Campaign) pulumi.StringOutput { return v.CampaignType }).(pulumi.StringOutput)
}

// Human readable description.
func (o CampaignOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Campaign) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the campaign
func (o CampaignOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Campaign) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CampaignOutput) NotificationSettings() CampaignNotificationSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignNotificationSettingsPtrOutput { return v.NotificationSettings }).(CampaignNotificationSettingsPtrOutput)
}

// User scope specific settings
func (o CampaignOutput) PrincipalScopeSettings() CampaignPrincipalScopeSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignPrincipalScopeSettingsPtrOutput { return v.PrincipalScopeSettings }).(CampaignPrincipalScopeSettingsPtrOutput)
}

// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
func (o CampaignOutput) RemediationSettings() CampaignRemediationSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignRemediationSettingsPtrOutput { return v.RemediationSettings }).(CampaignRemediationSettingsPtrOutput)
}

// Resource specific properties.
func (o CampaignOutput) ResourceSettings() CampaignResourceSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignResourceSettingsPtrOutput { return v.ResourceSettings }).(CampaignResourceSettingsPtrOutput)
}

// Identifies the kind of reviewer for Access Certification.
func (o CampaignOutput) ReviewerSettings() CampaignReviewerSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignReviewerSettingsPtrOutput { return v.ReviewerSettings }).(CampaignReviewerSettingsPtrOutput)
}

// Scheduler specific settings.
func (o CampaignOutput) ScheduleSettings() CampaignScheduleSettingsPtrOutput {
	return o.ApplyT(func(v *Campaign) CampaignScheduleSettingsPtrOutput { return v.ScheduleSettings }).(CampaignScheduleSettingsPtrOutput)
}

// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
func (o CampaignOutput) SkipRemediation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Campaign) pulumi.BoolPtrOutput { return v.SkipRemediation }).(pulumi.BoolPtrOutput)
}

type CampaignArrayOutput struct{ *pulumi.OutputState }

func (CampaignArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Campaign)(nil)).Elem()
}

func (o CampaignArrayOutput) ToCampaignArrayOutput() CampaignArrayOutput {
	return o
}

func (o CampaignArrayOutput) ToCampaignArrayOutputWithContext(ctx context.Context) CampaignArrayOutput {
	return o
}

func (o CampaignArrayOutput) Index(i pulumi.IntInput) CampaignOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Campaign {
		return vs[0].([]*Campaign)[vs[1].(int)]
	}).(CampaignOutput)
}

type CampaignMapOutput struct{ *pulumi.OutputState }

func (CampaignMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Campaign)(nil)).Elem()
}

func (o CampaignMapOutput) ToCampaignMapOutput() CampaignMapOutput {
	return o
}

func (o CampaignMapOutput) ToCampaignMapOutputWithContext(ctx context.Context) CampaignMapOutput {
	return o
}

func (o CampaignMapOutput) MapIndex(k pulumi.StringInput) CampaignOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Campaign {
		return vs[0].(map[string]*Campaign)[vs[1].(string)]
	}).(CampaignOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignInput)(nil)).Elem(), &Campaign{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignArrayInput)(nil)).Elem(), CampaignArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignMapInput)(nil)).Elem(), CampaignMap{})
	pulumi.RegisterOutputType(CampaignOutput{})
	pulumi.RegisterOutputType(CampaignArrayOutput{})
	pulumi.RegisterOutputType(CampaignMapOutput{})
}
