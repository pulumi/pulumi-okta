// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates different types of captcha.
//
//	> **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//	This resource allows you to create and configure a CAPTCHA.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewCaptcha(ctx, "example", &okta.CaptchaArgs{
//				Name:      pulumi.String("My CAPTCHA"),
//				Type:      pulumi.String("HCAPTCHA"),
//				SiteKey:   pulumi.String("some_key"),
//				SecretKey: pulumi.String("some_secret_key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/captcha:Captcha example <captcha_id>
// ```
type Captcha struct {
	pulumi.CustomResourceState

	// Name of the CAPTCHA
	Name pulumi.StringOutput `pulumi:"name"`
	// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
	SiteKey pulumi.StringOutput `pulumi:"siteKey"`
	// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCaptcha registers a new resource with the given unique name, arguments, and options.
func NewCaptcha(ctx *pulumi.Context,
	name string, args *CaptchaArgs, opts ...pulumi.ResourceOption) (*Captcha, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	if args.SiteKey == nil {
		return nil, errors.New("invalid value for required argument 'SiteKey'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Captcha
	err := ctx.RegisterResource("okta:index/captcha:Captcha", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaptcha gets an existing Captcha resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaptcha(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaptchaState, opts ...pulumi.ResourceOption) (*Captcha, error) {
	var resource Captcha
	err := ctx.ReadResource("okta:index/captcha:Captcha", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Captcha resources.
type captchaState struct {
	// Name of the CAPTCHA
	Name *string `pulumi:"name"`
	// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
	SecretKey *string `pulumi:"secretKey"`
	// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
	SiteKey *string `pulumi:"siteKey"`
	// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
	Type *string `pulumi:"type"`
}

type CaptchaState struct {
	// Name of the CAPTCHA
	Name pulumi.StringPtrInput
	// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
	SecretKey pulumi.StringPtrInput
	// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
	SiteKey pulumi.StringPtrInput
	// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
	Type pulumi.StringPtrInput
}

func (CaptchaState) ElementType() reflect.Type {
	return reflect.TypeOf((*captchaState)(nil)).Elem()
}

type captchaArgs struct {
	// Name of the CAPTCHA
	Name *string `pulumi:"name"`
	// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
	SecretKey string `pulumi:"secretKey"`
	// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
	SiteKey string `pulumi:"siteKey"`
	// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Captcha resource.
type CaptchaArgs struct {
	// Name of the CAPTCHA
	Name pulumi.StringPtrInput
	// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
	SecretKey pulumi.StringInput
	// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
	SiteKey pulumi.StringInput
	// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
	Type pulumi.StringInput
}

func (CaptchaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*captchaArgs)(nil)).Elem()
}

type CaptchaInput interface {
	pulumi.Input

	ToCaptchaOutput() CaptchaOutput
	ToCaptchaOutputWithContext(ctx context.Context) CaptchaOutput
}

func (*Captcha) ElementType() reflect.Type {
	return reflect.TypeOf((**Captcha)(nil)).Elem()
}

func (i *Captcha) ToCaptchaOutput() CaptchaOutput {
	return i.ToCaptchaOutputWithContext(context.Background())
}

func (i *Captcha) ToCaptchaOutputWithContext(ctx context.Context) CaptchaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaOutput)
}

// CaptchaArrayInput is an input type that accepts CaptchaArray and CaptchaArrayOutput values.
// You can construct a concrete instance of `CaptchaArrayInput` via:
//
//	CaptchaArray{ CaptchaArgs{...} }
type CaptchaArrayInput interface {
	pulumi.Input

	ToCaptchaArrayOutput() CaptchaArrayOutput
	ToCaptchaArrayOutputWithContext(context.Context) CaptchaArrayOutput
}

type CaptchaArray []CaptchaInput

func (CaptchaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Captcha)(nil)).Elem()
}

func (i CaptchaArray) ToCaptchaArrayOutput() CaptchaArrayOutput {
	return i.ToCaptchaArrayOutputWithContext(context.Background())
}

func (i CaptchaArray) ToCaptchaArrayOutputWithContext(ctx context.Context) CaptchaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaArrayOutput)
}

// CaptchaMapInput is an input type that accepts CaptchaMap and CaptchaMapOutput values.
// You can construct a concrete instance of `CaptchaMapInput` via:
//
//	CaptchaMap{ "key": CaptchaArgs{...} }
type CaptchaMapInput interface {
	pulumi.Input

	ToCaptchaMapOutput() CaptchaMapOutput
	ToCaptchaMapOutputWithContext(context.Context) CaptchaMapOutput
}

type CaptchaMap map[string]CaptchaInput

func (CaptchaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Captcha)(nil)).Elem()
}

func (i CaptchaMap) ToCaptchaMapOutput() CaptchaMapOutput {
	return i.ToCaptchaMapOutputWithContext(context.Background())
}

func (i CaptchaMap) ToCaptchaMapOutputWithContext(ctx context.Context) CaptchaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaMapOutput)
}

type CaptchaOutput struct{ *pulumi.OutputState }

func (CaptchaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Captcha)(nil)).Elem()
}

func (o CaptchaOutput) ToCaptchaOutput() CaptchaOutput {
	return o
}

func (o CaptchaOutput) ToCaptchaOutputWithContext(ctx context.Context) CaptchaOutput {
	return o
}

// Name of the CAPTCHA
func (o CaptchaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Captcha) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
func (o CaptchaOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Captcha) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
func (o CaptchaOutput) SiteKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Captcha) pulumi.StringOutput { return v.SiteKey }).(pulumi.StringOutput)
}

// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
func (o CaptchaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Captcha) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CaptchaArrayOutput struct{ *pulumi.OutputState }

func (CaptchaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Captcha)(nil)).Elem()
}

func (o CaptchaArrayOutput) ToCaptchaArrayOutput() CaptchaArrayOutput {
	return o
}

func (o CaptchaArrayOutput) ToCaptchaArrayOutputWithContext(ctx context.Context) CaptchaArrayOutput {
	return o
}

func (o CaptchaArrayOutput) Index(i pulumi.IntInput) CaptchaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Captcha {
		return vs[0].([]*Captcha)[vs[1].(int)]
	}).(CaptchaOutput)
}

type CaptchaMapOutput struct{ *pulumi.OutputState }

func (CaptchaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Captcha)(nil)).Elem()
}

func (o CaptchaMapOutput) ToCaptchaMapOutput() CaptchaMapOutput {
	return o
}

func (o CaptchaMapOutput) ToCaptchaMapOutputWithContext(ctx context.Context) CaptchaMapOutput {
	return o
}

func (o CaptchaMapOutput) MapIndex(k pulumi.StringInput) CaptchaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Captcha {
		return vs[0].(map[string]*Captcha)[vs[1].(string)]
	}).(CaptchaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaInput)(nil)).Elem(), &Captcha{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaArrayInput)(nil)).Elem(), CaptchaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaMapInput)(nil)).Elem(), CaptchaMap{})
	pulumi.RegisterOutputType(CaptchaOutput{})
	pulumi.RegisterOutputType(CaptchaArrayOutput{})
	pulumi.RegisterOutputType(CaptchaMapOutput{})
}
