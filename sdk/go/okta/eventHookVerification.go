// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventHookVerification struct {
	pulumi.CustomResourceState

	// Event hook ID
	EventHookId pulumi.StringOutput `pulumi:"eventHookId"`
}

// NewEventHookVerification registers a new resource with the given unique name, arguments, and options.
func NewEventHookVerification(ctx *pulumi.Context,
	name string, args *EventHookVerificationArgs, opts ...pulumi.ResourceOption) (*EventHookVerification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventHookId == nil {
		return nil, errors.New("invalid value for required argument 'EventHookId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventHookVerification
	err := ctx.RegisterResource("okta:index/eventHookVerification:EventHookVerification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHookVerification gets an existing EventHookVerification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHookVerification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHookVerificationState, opts ...pulumi.ResourceOption) (*EventHookVerification, error) {
	var resource EventHookVerification
	err := ctx.ReadResource("okta:index/eventHookVerification:EventHookVerification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHookVerification resources.
type eventHookVerificationState struct {
	// Event hook ID
	EventHookId *string `pulumi:"eventHookId"`
}

type EventHookVerificationState struct {
	// Event hook ID
	EventHookId pulumi.StringPtrInput
}

func (EventHookVerificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookVerificationState)(nil)).Elem()
}

type eventHookVerificationArgs struct {
	// Event hook ID
	EventHookId string `pulumi:"eventHookId"`
}

// The set of arguments for constructing a EventHookVerification resource.
type EventHookVerificationArgs struct {
	// Event hook ID
	EventHookId pulumi.StringInput
}

func (EventHookVerificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookVerificationArgs)(nil)).Elem()
}

type EventHookVerificationInput interface {
	pulumi.Input

	ToEventHookVerificationOutput() EventHookVerificationOutput
	ToEventHookVerificationOutputWithContext(ctx context.Context) EventHookVerificationOutput
}

func (*EventHookVerification) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHookVerification)(nil)).Elem()
}

func (i *EventHookVerification) ToEventHookVerificationOutput() EventHookVerificationOutput {
	return i.ToEventHookVerificationOutputWithContext(context.Background())
}

func (i *EventHookVerification) ToEventHookVerificationOutputWithContext(ctx context.Context) EventHookVerificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookVerificationOutput)
}

// EventHookVerificationArrayInput is an input type that accepts EventHookVerificationArray and EventHookVerificationArrayOutput values.
// You can construct a concrete instance of `EventHookVerificationArrayInput` via:
//
//	EventHookVerificationArray{ EventHookVerificationArgs{...} }
type EventHookVerificationArrayInput interface {
	pulumi.Input

	ToEventHookVerificationArrayOutput() EventHookVerificationArrayOutput
	ToEventHookVerificationArrayOutputWithContext(context.Context) EventHookVerificationArrayOutput
}

type EventHookVerificationArray []EventHookVerificationInput

func (EventHookVerificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHookVerification)(nil)).Elem()
}

func (i EventHookVerificationArray) ToEventHookVerificationArrayOutput() EventHookVerificationArrayOutput {
	return i.ToEventHookVerificationArrayOutputWithContext(context.Background())
}

func (i EventHookVerificationArray) ToEventHookVerificationArrayOutputWithContext(ctx context.Context) EventHookVerificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookVerificationArrayOutput)
}

// EventHookVerificationMapInput is an input type that accepts EventHookVerificationMap and EventHookVerificationMapOutput values.
// You can construct a concrete instance of `EventHookVerificationMapInput` via:
//
//	EventHookVerificationMap{ "key": EventHookVerificationArgs{...} }
type EventHookVerificationMapInput interface {
	pulumi.Input

	ToEventHookVerificationMapOutput() EventHookVerificationMapOutput
	ToEventHookVerificationMapOutputWithContext(context.Context) EventHookVerificationMapOutput
}

type EventHookVerificationMap map[string]EventHookVerificationInput

func (EventHookVerificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHookVerification)(nil)).Elem()
}

func (i EventHookVerificationMap) ToEventHookVerificationMapOutput() EventHookVerificationMapOutput {
	return i.ToEventHookVerificationMapOutputWithContext(context.Background())
}

func (i EventHookVerificationMap) ToEventHookVerificationMapOutputWithContext(ctx context.Context) EventHookVerificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookVerificationMapOutput)
}

type EventHookVerificationOutput struct{ *pulumi.OutputState }

func (EventHookVerificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHookVerification)(nil)).Elem()
}

func (o EventHookVerificationOutput) ToEventHookVerificationOutput() EventHookVerificationOutput {
	return o
}

func (o EventHookVerificationOutput) ToEventHookVerificationOutputWithContext(ctx context.Context) EventHookVerificationOutput {
	return o
}

// Event hook ID
func (o EventHookVerificationOutput) EventHookId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHookVerification) pulumi.StringOutput { return v.EventHookId }).(pulumi.StringOutput)
}

type EventHookVerificationArrayOutput struct{ *pulumi.OutputState }

func (EventHookVerificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHookVerification)(nil)).Elem()
}

func (o EventHookVerificationArrayOutput) ToEventHookVerificationArrayOutput() EventHookVerificationArrayOutput {
	return o
}

func (o EventHookVerificationArrayOutput) ToEventHookVerificationArrayOutputWithContext(ctx context.Context) EventHookVerificationArrayOutput {
	return o
}

func (o EventHookVerificationArrayOutput) Index(i pulumi.IntInput) EventHookVerificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventHookVerification {
		return vs[0].([]*EventHookVerification)[vs[1].(int)]
	}).(EventHookVerificationOutput)
}

type EventHookVerificationMapOutput struct{ *pulumi.OutputState }

func (EventHookVerificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHookVerification)(nil)).Elem()
}

func (o EventHookVerificationMapOutput) ToEventHookVerificationMapOutput() EventHookVerificationMapOutput {
	return o
}

func (o EventHookVerificationMapOutput) ToEventHookVerificationMapOutputWithContext(ctx context.Context) EventHookVerificationMapOutput {
	return o
}

func (o EventHookVerificationMapOutput) MapIndex(k pulumi.StringInput) EventHookVerificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventHookVerification {
		return vs[0].(map[string]*EventHookVerification)[vs[1].(string)]
	}).(EventHookVerificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventHookVerificationInput)(nil)).Elem(), &EventHookVerification{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHookVerificationArrayInput)(nil)).Elem(), EventHookVerificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHookVerificationMapInput)(nil)).Elem(), EventHookVerificationMap{})
	pulumi.RegisterOutputType(EventHookVerificationOutput{})
	pulumi.RegisterOutputType(EventHookVerificationArrayOutput{})
	pulumi.RegisterOutputType(EventHookVerificationMapOutput{})
}
