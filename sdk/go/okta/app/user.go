// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Application User.
//
// This resource allows you to create and configure an Application User.
//
// **When using this resource, make sure to add the following `lifefycle` argument to the application resource you are assigning to:**
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/app"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := app.NewUser(ctx, "example", &app.UserArgs{
// 			AppId:    pulumi.String("<app_id>"),
// 			UserId:   pulumi.String("<user id>"),
// 			Username: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An Application User can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:app/user:User example <app id>/<user id>
// ```
type User struct {
	pulumi.CustomResourceState

	// App to associate user with.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The password to use.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The JSON profile of the App User.
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// User to associate the application with.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The username to use for the app user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource User
	err := ctx.RegisterResource("okta:app/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("okta:app/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// App to associate user with.
	AppId *string `pulumi:"appId"`
	// The password to use.
	Password *string `pulumi:"password"`
	// The JSON profile of the App User.
	Profile *string `pulumi:"profile"`
	// User to associate the application with.
	UserId *string `pulumi:"userId"`
	// The username to use for the app user.
	Username *string `pulumi:"username"`
}

type UserState struct {
	// App to associate user with.
	AppId pulumi.StringPtrInput
	// The password to use.
	Password pulumi.StringPtrInput
	// The JSON profile of the App User.
	Profile pulumi.StringPtrInput
	// User to associate the application with.
	UserId pulumi.StringPtrInput
	// The username to use for the app user.
	Username pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// App to associate user with.
	AppId string `pulumi:"appId"`
	// The password to use.
	Password *string `pulumi:"password"`
	// The JSON profile of the App User.
	Profile *string `pulumi:"profile"`
	// User to associate the application with.
	UserId string `pulumi:"userId"`
	// The username to use for the app user.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// App to associate user with.
	AppId pulumi.StringInput
	// The password to use.
	Password pulumi.StringPtrInput
	// The JSON profile of the App User.
	Profile pulumi.StringPtrInput
	// User to associate the application with.
	UserId pulumi.StringInput
	// The username to use for the app user.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct {
	*pulumi.OutputState
}

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
