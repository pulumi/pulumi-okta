// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an SAML Application.
//
// This resource allows you to create and configure an SAML Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/app"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := app.NewSaml(ctx, "example", &app.SamlArgs{
// 			AttributeStatements: app.SamlAttributeStatementArray{
// 				&app.SamlAttributeStatementArgs{
// 					FilterType:  pulumi.String("REGEX"),
// 					FilterValue: pulumi.String(".*"),
// 					Name:        pulumi.String("groups"),
// 					Type:        pulumi.String("GROUP"),
// 				},
// 			},
// 			Audience:              pulumi.String("http://example.com/audience"),
// 			AuthnContextClassRef:  pulumi.String("urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"),
// 			Destination:           pulumi.String("http://example.com"),
// 			DigestAlgorithm:       pulumi.String("SHA256"),
// 			HonorForceAuthn:       pulumi.Bool(false),
// 			Label:                 pulumi.String("example"),
// 			Recipient:             pulumi.String("http://example.com"),
// 			ResponseSigned:        pulumi.Bool(true),
// 			SignatureAlgorithm:    pulumi.String("RSA_SHA256"),
// 			SsoUrl:                pulumi.String("http://example.com"),
// 			SubjectNameIdFormat:   pulumi.String("urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"),
// 			SubjectNameIdTemplate: pulumi.Any(user.UserName),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A SAML App can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:app/saml:Saml example <app id>
// ```
type Saml struct {
	pulumi.CustomResourceState

	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL.
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service.
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
	AcsEndpoints pulumi.StringArrayOutput `pulumi:"acsEndpoints"`
	// Application settings in JSON format.
	AppSettingsJson pulumi.StringPtrOutput `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned pulumi.BoolPtrOutput `pulumi:"assertionSigned"`
	// List of SAML Attribute statements.
	AttributeStatements SamlAttributeStatementArrayOutput `pulumi:"attributeStatements"`
	// Audience restriction.
	Audience pulumi.StringPtrOutput `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef pulumi.StringPtrOutput `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// The raw signing certificate.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrOutput `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm pulumi.StringPtrOutput `pulumi:"digestAlgorithm"`
	// Entity ID, the ID portion of the `entityUrl`.
	EntityKey pulumi.StringOutput `pulumi:"entityKey"`
	// Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
	EntityUrl pulumi.StringOutput `pulumi:"entityUrl"`
	// features enabled. Notice: you can't currently configure provisioning features via the API.
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// Groups associated with the application.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn pulumi.BoolPtrOutput `pulumi:"honorForceAuthn"`
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
	HttpPostBinding pulumi.StringOutput `pulumi:"httpPostBinding"`
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
	HttpRedirectBinding pulumi.StringOutput `pulumi:"httpRedirectBinding"`
	// SAML issuer ID.
	IdpIssuer pulumi.StringPtrOutput `pulumi:"idpIssuer"`
	// Certificate key ID.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Number of years the certificate is valid (2 - 10 years).
	KeyYearsValid pulumi.IntPtrOutput `pulumi:"keyYearsValid"`
	// label of application.
	Label pulumi.StringOutput `pulumi:"label"`
	// The raw SAML metadata in XML.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// SAML xml metadata URL.
	MetadataUrl pulumi.StringOutput `pulumi:"metadataUrl"`
	// The name of the attribute statement.
	Name pulumi.StringOutput `pulumi:"name"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrOutput `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion.
	Recipient pulumi.StringPtrOutput `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrOutput `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned pulumi.BoolPtrOutput `pulumi:"responseSigned"`
	// Sign-on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm pulumi.StringPtrOutput `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
	// Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
	SingleLogoutCertificate pulumi.StringPtrOutput `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request.
	SingleLogoutIssuer pulumi.StringPtrOutput `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent.
	SingleLogoutUrl pulumi.StringPtrOutput `pulumi:"singleLogoutUrl"`
	// SAML service provider issuer.
	SpIssuer pulumi.StringPtrOutput `pulumi:"spIssuer"`
	// Single Sign-on Url.
	SsoUrl pulumi.StringPtrOutput `pulumi:"ssoUrl"`
	// status of application.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrOutput `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate pulumi.StringPtrOutput `pulumi:"subjectNameIdTemplate"`
	// Username template.
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Username template suffix.
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type.
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Users associated with the application.
	Users SamlUserArrayOutput `pulumi:"users"`
}

// NewSaml registers a new resource with the given unique name, arguments, and options.
func NewSaml(ctx *pulumi.Context,
	name string, args *SamlArgs, opts ...pulumi.ResourceOption) (*Saml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	var resource Saml
	err := ctx.RegisterResource("okta:app/saml:Saml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaml gets an existing Saml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlState, opts ...pulumi.ResourceOption) (*Saml, error) {
	var resource Saml
	err := ctx.ReadResource("okta:app/saml:Saml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saml resources.
type samlState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL.
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application settings in JSON format.
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned *bool `pulumi:"assertionSigned"`
	// List of SAML Attribute statements.
	AttributeStatements []SamlAttributeStatement `pulumi:"attributeStatements"`
	// Audience restriction.
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// The raw signing certificate.
	Certificate *string `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Entity ID, the ID portion of the `entityUrl`.
	EntityKey *string `pulumi:"entityKey"`
	// Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
	EntityUrl *string `pulumi:"entityUrl"`
	// features enabled. Notice: you can't currently configure provisioning features via the API.
	Features []string `pulumi:"features"`
	// Groups associated with the application.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
	HttpPostBinding *string `pulumi:"httpPostBinding"`
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
	HttpRedirectBinding *string `pulumi:"httpRedirectBinding"`
	// SAML issuer ID.
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Certificate key ID.
	KeyId *string `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid (2 - 10 years).
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// label of application.
	Label *string `pulumi:"label"`
	// The raw SAML metadata in XML.
	Metadata *string `pulumi:"metadata"`
	// SAML xml metadata URL.
	MetadataUrl *string `pulumi:"metadataUrl"`
	// The name of the attribute statement.
	Name *string `pulumi:"name"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion.
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned *bool `pulumi:"responseSigned"`
	// Sign-on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
	// Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request.
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent.
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// SAML service provider issuer.
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign-on Url.
	SsoUrl *string `pulumi:"ssoUrl"`
	// status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix.
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application.
	Users []SamlUser `pulumi:"users"`
}

type SamlState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL.
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self-service.
	AccessibilitySelfService pulumi.BoolPtrInput
	// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
	AcsEndpoints pulumi.StringArrayInput
	// Application settings in JSON format.
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned pulumi.BoolPtrInput
	// List of SAML Attribute statements.
	AttributeStatements SamlAttributeStatementArrayInput
	// Audience restriction.
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// The raw signing certificate.
	Certificate pulumi.StringPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm pulumi.StringPtrInput
	// Entity ID, the ID portion of the `entityUrl`.
	EntityKey pulumi.StringPtrInput
	// Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
	EntityUrl pulumi.StringPtrInput
	// features enabled. Notice: you can't currently configure provisioning features via the API.
	Features pulumi.StringArrayInput
	// Groups associated with the application.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn pulumi.BoolPtrInput
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
	HttpPostBinding pulumi.StringPtrInput
	// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
	HttpRedirectBinding pulumi.StringPtrInput
	// SAML issuer ID.
	IdpIssuer pulumi.StringPtrInput
	// Certificate key ID.
	KeyId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid (2 - 10 years).
	KeyYearsValid pulumi.IntPtrInput
	// label of application.
	Label pulumi.StringPtrInput
	// The raw SAML metadata in XML.
	Metadata pulumi.StringPtrInput
	// SAML xml metadata URL.
	MetadataUrl pulumi.StringPtrInput
	// The name of the attribute statement.
	Name pulumi.StringPtrInput
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion.
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned pulumi.BoolPtrInput
	// Sign-on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
	// Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request.
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent.
	SingleLogoutUrl pulumi.StringPtrInput
	// SAML service provider issuer.
	SpIssuer pulumi.StringPtrInput
	// Single Sign-on Url.
	SsoUrl pulumi.StringPtrInput
	// status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix.
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application.
	Users SamlUserArrayInput
}

func (SamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlState)(nil)).Elem()
}

type samlArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL.
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application settings in JSON format.
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned *bool `pulumi:"assertionSigned"`
	// List of SAML Attribute statements.
	AttributeStatements []SamlAttributeStatement `pulumi:"attributeStatements"`
	// Audience restriction.
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// features enabled. Notice: you can't currently configure provisioning features via the API.
	Features []string `pulumi:"features"`
	// Groups associated with the application.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// SAML issuer ID.
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid (2 - 10 years).
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// label of application.
	Label string `pulumi:"label"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion.
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned *bool `pulumi:"responseSigned"`
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
	// Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request.
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent.
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// SAML service provider issuer.
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign-on Url.
	SsoUrl *string `pulumi:"ssoUrl"`
	// status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix.
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application.
	Users []SamlUser `pulumi:"users"`
}

// The set of arguments for constructing a Saml resource.
type SamlArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL.
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self-service.
	AccessibilitySelfService pulumi.BoolPtrInput
	// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
	AcsEndpoints pulumi.StringArrayInput
	// Application settings in JSON format.
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned pulumi.BoolPtrInput
	// List of SAML Attribute statements.
	AttributeStatements SamlAttributeStatementArrayInput
	// Audience restriction.
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm pulumi.StringPtrInput
	// features enabled. Notice: you can't currently configure provisioning features via the API.
	Features pulumi.StringArrayInput
	// Groups associated with the application.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn pulumi.BoolPtrInput
	// SAML issuer ID.
	IdpIssuer pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `keyYearsValid`.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid (2 - 10 years).
	KeyYearsValid pulumi.IntPtrInput
	// label of application.
	Label pulumi.StringInput
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion.
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned pulumi.BoolPtrInput
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
	// Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request.
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent.
	SingleLogoutUrl pulumi.StringPtrInput
	// SAML service provider issuer.
	SpIssuer pulumi.StringPtrInput
	// Single Sign-on Url.
	SsoUrl pulumi.StringPtrInput
	// status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix.
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application.
	Users SamlUserArrayInput
}

func (SamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlArgs)(nil)).Elem()
}

type SamlInput interface {
	pulumi.Input

	ToSamlOutput() SamlOutput
	ToSamlOutputWithContext(ctx context.Context) SamlOutput
}

func (*Saml) ElementType() reflect.Type {
	return reflect.TypeOf((*Saml)(nil))
}

func (i *Saml) ToSamlOutput() SamlOutput {
	return i.ToSamlOutputWithContext(context.Background())
}

func (i *Saml) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlOutput)
}

type SamlOutput struct {
	*pulumi.OutputState
}

func (SamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Saml)(nil))
}

func (o SamlOutput) ToSamlOutput() SamlOutput {
	return o
}

func (o SamlOutput) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SamlOutput{})
}
