// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Saml struct {
	pulumi.CustomResourceState

	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayOutput `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote pulumi.StringPtrOutput `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrOutput `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrOutput `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrOutput              `pulumi:"assertionSigned"`
	AttributeStatements SamlAttributeStatementArrayOutput `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience pulumi.StringPtrOutput `pulumi:"audience"`
	// Id of this apps authentication policy
	AuthenticationPolicy pulumi.StringPtrOutput `pulumi:"authenticationPolicy"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrOutput `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrOutput `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrOutput `pulumi:"digestAlgorithm"`
	// The url that can be used to embed this application in other portals.
	EmbedUrl pulumi.StringOutput `pulumi:"embedUrl"`
	// Application notes for end users.
	EnduserNote pulumi.StringPtrOutput `pulumi:"enduserNote"`
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringOutput `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringOutput `pulumi:"entityUrl"`
	// features to enable
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrOutput `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringOutput `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringOutput `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrOutput `pulumi:"idpIssuer"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrOutput `pulumi:"implicitAssignment"`
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrOutput `pulumi:"inlineHookId"`
	// Certificate ID
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrOutput `pulumi:"keyYearsValid"`
	// Application keys
	Keys SamlKeyArrayOutput `pulumi:"keys"`
	// Pretty name of app.
	Label pulumi.StringOutput `pulumi:"label"`
	// Local path to logo of the application.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// SAML xml metadata payload
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// SAML xml metadata URL
	MetadataUrl pulumi.StringOutput `pulumi:"metadataUrl"`
	// The reference name of the attribute statement
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrOutput `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrOutput `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrOutput `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrOutput `pulumi:"responseSigned"`
	// SAML Signed Request enabled
	SamlSignedRequestEnabled pulumi.BoolPtrOutput `pulumi:"samlSignedRequestEnabled"`
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrOutput `pulumi:"samlVersion"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrOutput `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrOutput `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrOutput `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrOutput `pulumi:"singleLogoutUrl"`
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrOutput `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl pulumi.StringPtrOutput `pulumi:"ssoUrl"`
	// Status of application.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrOutput `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrOutput `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Push username on update
	UserNameTemplatePushStatus pulumi.StringPtrOutput `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
}

// NewSaml registers a new resource with the given unique name, arguments, and options.
func NewSaml(ctx *pulumi.Context,
	name string, args *SamlArgs, opts ...pulumi.ResourceOption) (*Saml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Saml
	err := ctx.RegisterResource("okta:app/saml:Saml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaml gets an existing Saml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlState, opts ...pulumi.ResourceOption) (*Saml, error) {
	var resource Saml
	err := ctx.ReadResource("okta:app/saml:Saml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saml resources.
type samlState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                    `pulumi:"assertionSigned"`
	AttributeStatements []SamlAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Id of this apps authentication policy
	AuthenticationPolicy *string `pulumi:"authenticationPolicy"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate *string `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// The url that can be used to embed this application in other portals.
	EmbedUrl *string `pulumi:"embedUrl"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Entity ID, the ID portion of the entity_url
	EntityKey *string `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl *string `pulumi:"entityUrl"`
	// features to enable
	Features []string `pulumi:"features"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding *string `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding *string `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment *bool `pulumi:"implicitAssignment"`
	// Saml Inline Hook setting
	InlineHookId *string `pulumi:"inlineHookId"`
	// Certificate ID
	KeyId *string `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Application keys
	Keys []SamlKey `pulumi:"keys"`
	// Pretty name of app.
	Label *string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl *string `pulumi:"logoUrl"`
	// SAML xml metadata payload
	Metadata *string `pulumi:"metadata"`
	// SAML xml metadata URL
	MetadataUrl *string `pulumi:"metadataUrl"`
	// The reference name of the attribute statement
	Name *string `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// SAML Signed Request enabled
	SamlSignedRequestEnabled *bool `pulumi:"samlSignedRequestEnabled"`
	// SAML version for the app's sign-on mode
	SamlVersion *string `pulumi:"samlVersion"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
}

type SamlState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Id of this apps authentication policy
	AuthenticationPolicy pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// cert from SAML XML metadata payload
	Certificate pulumi.StringPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// The url that can be used to embed this application in other portals.
	EmbedUrl pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringPtrInput
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringPtrInput
	// features to enable
	Features pulumi.StringArrayInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrInput
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrInput
	// Certificate ID
	KeyId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Application keys
	Keys SamlKeyArrayInput
	// Pretty name of app.
	Label pulumi.StringPtrInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// URL of the application's logo
	LogoUrl pulumi.StringPtrInput
	// SAML xml metadata payload
	Metadata pulumi.StringPtrInput
	// SAML xml metadata URL
	MetadataUrl pulumi.StringPtrInput
	// The reference name of the attribute statement
	Name pulumi.StringPtrInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// SAML Signed Request enabled
	SamlSignedRequestEnabled pulumi.BoolPtrInput
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
}

func (SamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlState)(nil)).Elem()
}

type samlArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                    `pulumi:"assertionSigned"`
	AttributeStatements []SamlAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Id of this apps authentication policy
	AuthenticationPolicy *string `pulumi:"authenticationPolicy"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment *bool `pulumi:"implicitAssignment"`
	// Saml Inline Hook setting
	InlineHookId *string `pulumi:"inlineHookId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// SAML Signed Request enabled
	SamlSignedRequestEnabled *bool `pulumi:"samlSignedRequestEnabled"`
	// SAML version for the app's sign-on mode
	SamlVersion *string `pulumi:"samlVersion"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
}

// The set of arguments for constructing a Saml resource.
type SamlArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Id of this apps authentication policy
	AuthenticationPolicy pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrInput
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Pretty name of app.
	Label pulumi.StringInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// SAML Signed Request enabled
	SamlSignedRequestEnabled pulumi.BoolPtrInput
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
}

func (SamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlArgs)(nil)).Elem()
}

type SamlInput interface {
	pulumi.Input

	ToSamlOutput() SamlOutput
	ToSamlOutputWithContext(ctx context.Context) SamlOutput
}

func (*Saml) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (i *Saml) ToSamlOutput() SamlOutput {
	return i.ToSamlOutputWithContext(context.Background())
}

func (i *Saml) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlOutput)
}

// SamlArrayInput is an input type that accepts SamlArray and SamlArrayOutput values.
// You can construct a concrete instance of `SamlArrayInput` via:
//
//	SamlArray{ SamlArgs{...} }
type SamlArrayInput interface {
	pulumi.Input

	ToSamlArrayOutput() SamlArrayOutput
	ToSamlArrayOutputWithContext(context.Context) SamlArrayOutput
}

type SamlArray []SamlInput

func (SamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml)(nil)).Elem()
}

func (i SamlArray) ToSamlArrayOutput() SamlArrayOutput {
	return i.ToSamlArrayOutputWithContext(context.Background())
}

func (i SamlArray) ToSamlArrayOutputWithContext(ctx context.Context) SamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlArrayOutput)
}

// SamlMapInput is an input type that accepts SamlMap and SamlMapOutput values.
// You can construct a concrete instance of `SamlMapInput` via:
//
//	SamlMap{ "key": SamlArgs{...} }
type SamlMapInput interface {
	pulumi.Input

	ToSamlMapOutput() SamlMapOutput
	ToSamlMapOutputWithContext(context.Context) SamlMapOutput
}

type SamlMap map[string]SamlInput

func (SamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml)(nil)).Elem()
}

func (i SamlMap) ToSamlMapOutput() SamlMapOutput {
	return i.ToSamlMapOutputWithContext(context.Background())
}

func (i SamlMap) ToSamlMapOutputWithContext(ctx context.Context) SamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlMapOutput)
}

type SamlOutput struct{ *pulumi.OutputState }

func (SamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (o SamlOutput) ToSamlOutput() SamlOutput {
	return o
}

func (o SamlOutput) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return o
}

// Custom error page URL
func (o SamlOutput) AccessibilityErrorRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AccessibilityErrorRedirectUrl }).(pulumi.StringPtrOutput)
}

// Custom login page URL
func (o SamlOutput) AccessibilityLoginRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AccessibilityLoginRedirectUrl }).(pulumi.StringPtrOutput)
}

// Enable self service
func (o SamlOutput) AccessibilitySelfService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.AccessibilitySelfService }).(pulumi.BoolPtrOutput)
}

// List of ACS endpoints for this SAML application
func (o SamlOutput) AcsEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.AcsEndpoints }).(pulumi.StringArrayOutput)
}

// Application notes for admins.
func (o SamlOutput) AdminNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AdminNote }).(pulumi.StringPtrOutput)
}

// Displays specific appLinks for the app
func (o SamlOutput) AppLinksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AppLinksJson }).(pulumi.StringPtrOutput)
}

// Application settings in JSON format
func (o SamlOutput) AppSettingsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AppSettingsJson }).(pulumi.StringPtrOutput)
}

// Determines whether the SAML assertion is digitally signed
func (o SamlOutput) AssertionSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.AssertionSigned }).(pulumi.BoolPtrOutput)
}

func (o SamlOutput) AttributeStatements() SamlAttributeStatementArrayOutput {
	return o.ApplyT(func(v *Saml) SamlAttributeStatementArrayOutput { return v.AttributeStatements }).(SamlAttributeStatementArrayOutput)
}

// Audience Restriction
func (o SamlOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Audience }).(pulumi.StringPtrOutput)
}

// Id of this apps authentication policy
func (o SamlOutput) AuthenticationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AuthenticationPolicy }).(pulumi.StringPtrOutput)
}

// Identifies the SAML authentication context class for the assertion’s authentication statement
func (o SamlOutput) AuthnContextClassRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AuthnContextClassRef }).(pulumi.StringPtrOutput)
}

// Display auto submit toolbar
func (o SamlOutput) AutoSubmitToolbar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.AutoSubmitToolbar }).(pulumi.BoolPtrOutput)
}

// cert from SAML XML metadata payload
func (o SamlOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Identifies a specific application resource in an IDP initiated SSO scenario.
func (o SamlOutput) DefaultRelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.DefaultRelayState }).(pulumi.StringPtrOutput)
}

// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
func (o SamlOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Destination }).(pulumi.StringPtrOutput)
}

// Determines the digest algorithm used to digitally sign the SAML assertion and response
func (o SamlOutput) DigestAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.DigestAlgorithm }).(pulumi.StringPtrOutput)
}

// The url that can be used to embed this application in other portals.
func (o SamlOutput) EmbedUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.EmbedUrl }).(pulumi.StringOutput)
}

// Application notes for end users.
func (o SamlOutput) EnduserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.EnduserNote }).(pulumi.StringPtrOutput)
}

// Entity ID, the ID portion of the entity_url
func (o SamlOutput) EntityKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.EntityKey }).(pulumi.StringOutput)
}

// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
func (o SamlOutput) EntityUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.EntityUrl }).(pulumi.StringOutput)
}

// features to enable
func (o SamlOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.Features }).(pulumi.StringArrayOutput)
}

// Do not display application icon on mobile app
func (o SamlOutput) HideIos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.HideIos }).(pulumi.BoolPtrOutput)
}

// Do not display application icon to users
func (o SamlOutput) HideWeb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.HideWeb }).(pulumi.BoolPtrOutput)
}

// Prompt user to re-authenticate if SP asks for it
func (o SamlOutput) HonorForceAuthn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.HonorForceAuthn }).(pulumi.BoolPtrOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
func (o SamlOutput) HttpPostBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.HttpPostBinding }).(pulumi.StringOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
func (o SamlOutput) HttpRedirectBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.HttpRedirectBinding }).(pulumi.StringOutput)
}

// SAML issuer ID
func (o SamlOutput) IdpIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.IdpIssuer }).(pulumi.StringPtrOutput)
}

// *Early Access Property*. Enable Federation Broker Mode.
func (o SamlOutput) ImplicitAssignment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.ImplicitAssignment }).(pulumi.BoolPtrOutput)
}

// Saml Inline Hook setting
func (o SamlOutput) InlineHookId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.InlineHookId }).(pulumi.StringPtrOutput)
}

// Certificate ID
func (o SamlOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// Certificate name. This modulates the rotation of keys. New name == new key.
func (o SamlOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Number of years the certificate is valid.
func (o SamlOutput) KeyYearsValid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.IntPtrOutput { return v.KeyYearsValid }).(pulumi.IntPtrOutput)
}

// Application keys
func (o SamlOutput) Keys() SamlKeyArrayOutput {
	return o.ApplyT(func(v *Saml) SamlKeyArrayOutput { return v.Keys }).(SamlKeyArrayOutput)
}

// Pretty name of app.
func (o SamlOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Local path to logo of the application.
func (o SamlOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Logo }).(pulumi.StringPtrOutput)
}

// URL of the application's logo
func (o SamlOutput) LogoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.LogoUrl }).(pulumi.StringOutput)
}

// SAML xml metadata payload
func (o SamlOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// SAML xml metadata URL
func (o SamlOutput) MetadataUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.MetadataUrl }).(pulumi.StringOutput)
}

// The reference name of the attribute statement
func (o SamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of preexisting SAML application. For instance 'slack'
func (o SamlOutput) PreconfiguredApp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.PreconfiguredApp }).(pulumi.StringPtrOutput)
}

// The location where the app may present the SAML assertion
func (o SamlOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Recipient }).(pulumi.StringPtrOutput)
}

// Denotes whether the request is compressed or not.
func (o SamlOutput) RequestCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.RequestCompressed }).(pulumi.BoolPtrOutput)
}

// Determines whether the SAML auth response message is digitally signed
func (o SamlOutput) ResponseSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.ResponseSigned }).(pulumi.BoolPtrOutput)
}

// SAML Signed Request enabled
func (o SamlOutput) SamlSignedRequestEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.SamlSignedRequestEnabled }).(pulumi.BoolPtrOutput)
}

// SAML version for the app's sign-on mode
func (o SamlOutput) SamlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SamlVersion }).(pulumi.StringPtrOutput)
}

// Sign on mode of application.
func (o SamlOutput) SignOnMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.SignOnMode }).(pulumi.StringOutput)
}

// Signature algorithm used ot digitally sign the assertion and response
func (o SamlOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
func (o SamlOutput) SingleLogoutCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SingleLogoutCertificate }).(pulumi.StringPtrOutput)
}

// The issuer of the Service Provider that generates the Single Logout request
func (o SamlOutput) SingleLogoutIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SingleLogoutIssuer }).(pulumi.StringPtrOutput)
}

// The location where the logout response is sent
func (o SamlOutput) SingleLogoutUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SingleLogoutUrl }).(pulumi.StringPtrOutput)
}

// SAML SP issuer ID
func (o SamlOutput) SpIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SpIssuer }).(pulumi.StringPtrOutput)
}

// Single Sign On URL
func (o SamlOutput) SsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SsoUrl }).(pulumi.StringPtrOutput)
}

// Status of application.
func (o SamlOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Identifies the SAML processing rules.
func (o SamlOutput) SubjectNameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SubjectNameIdFormat }).(pulumi.StringPtrOutput)
}

// Template for app user's username when a user is assigned to the app
func (o SamlOutput) SubjectNameIdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SubjectNameIdTemplate }).(pulumi.StringPtrOutput)
}

// Username template
func (o SamlOutput) UserNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.UserNameTemplate }).(pulumi.StringPtrOutput)
}

// Push username on update
func (o SamlOutput) UserNameTemplatePushStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.UserNameTemplatePushStatus }).(pulumi.StringPtrOutput)
}

// Username template suffix
func (o SamlOutput) UserNameTemplateSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.UserNameTemplateSuffix }).(pulumi.StringPtrOutput)
}

// Username template type
func (o SamlOutput) UserNameTemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.UserNameTemplateType }).(pulumi.StringPtrOutput)
}

type SamlArrayOutput struct{ *pulumi.OutputState }

func (SamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml)(nil)).Elem()
}

func (o SamlArrayOutput) ToSamlArrayOutput() SamlArrayOutput {
	return o
}

func (o SamlArrayOutput) ToSamlArrayOutputWithContext(ctx context.Context) SamlArrayOutput {
	return o
}

func (o SamlArrayOutput) Index(i pulumi.IntInput) SamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Saml {
		return vs[0].([]*Saml)[vs[1].(int)]
	}).(SamlOutput)
}

type SamlMapOutput struct{ *pulumi.OutputState }

func (SamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml)(nil)).Elem()
}

func (o SamlMapOutput) ToSamlMapOutput() SamlMapOutput {
	return o
}

func (o SamlMapOutput) ToSamlMapOutputWithContext(ctx context.Context) SamlMapOutput {
	return o
}

func (o SamlMapOutput) MapIndex(k pulumi.StringInput) SamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Saml {
		return vs[0].(map[string]*Saml)[vs[1].(string)]
	}).(SamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlInput)(nil)).Elem(), &Saml{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlArrayInput)(nil)).Elem(), SamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlMapInput)(nil)).Elem(), SamlMap{})
	pulumi.RegisterOutputType(SamlOutput{})
	pulumi.RegisterOutputType(SamlArrayOutput{})
	pulumi.RegisterOutputType(SamlMapOutput{})
}
