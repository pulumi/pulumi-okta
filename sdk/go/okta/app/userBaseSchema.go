// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **DEPRECATED** use `AppUserBaseSchemaProperty` instead.
//
// This resource allows you to configure a base app user schema property.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/app"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := app.NewUserBaseSchema(ctx, "example", &app.UserBaseSchemaArgs{
//				AppId:  pulumi.String("<app id>"),
//				Index:  pulumi.String("customPropertyName"),
//				Master: pulumi.String("OKTA"),
//				Title:  pulumi.String("customPropertyName"),
//				Type:   pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// App user base schema property can be imported via the property index and app id.
//
// ```sh
//
//	$ pulumi import okta:app/userBaseSchema:UserBaseSchema example &#60;app id&#62;/&#60;property name&#62;
//
// ```
type UserBaseSchema struct {
	pulumi.CustomResourceState

	// The Application's ID the user schema property should be assigned to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The property display name.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewUserBaseSchema registers a new resource with the given unique name, arguments, and options.
func NewUserBaseSchema(ctx *pulumi.Context,
	name string, args *UserBaseSchemaArgs, opts ...pulumi.ResourceOption) (*UserBaseSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource UserBaseSchema
	err := ctx.RegisterResource("okta:app/userBaseSchema:UserBaseSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserBaseSchema gets an existing UserBaseSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserBaseSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserBaseSchemaState, opts ...pulumi.ResourceOption) (*UserBaseSchema, error) {
	var resource UserBaseSchema
	err := ctx.ReadResource("okta:app/userBaseSchema:UserBaseSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserBaseSchema resources.
type userBaseSchemaState struct {
	// The Application's ID the user schema property should be assigned to.
	AppId *string `pulumi:"appId"`
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type UserBaseSchemaState struct {
	// The Application's ID the user schema property should be assigned to.
	AppId pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaState)(nil)).Elem()
}

type userBaseSchemaArgs struct {
	// The Application's ID the user schema property should be assigned to.
	AppId string `pulumi:"appId"`
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a UserBaseSchema resource.
type UserBaseSchemaArgs struct {
	// The Application's ID the user schema property should be assigned to.
	AppId pulumi.StringInput
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaArgs)(nil)).Elem()
}

type UserBaseSchemaInput interface {
	pulumi.Input

	ToUserBaseSchemaOutput() UserBaseSchemaOutput
	ToUserBaseSchemaOutputWithContext(ctx context.Context) UserBaseSchemaOutput
}

func (*UserBaseSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchema)(nil)).Elem()
}

func (i *UserBaseSchema) ToUserBaseSchemaOutput() UserBaseSchemaOutput {
	return i.ToUserBaseSchemaOutputWithContext(context.Background())
}

func (i *UserBaseSchema) ToUserBaseSchemaOutputWithContext(ctx context.Context) UserBaseSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaOutput)
}

// UserBaseSchemaArrayInput is an input type that accepts UserBaseSchemaArray and UserBaseSchemaArrayOutput values.
// You can construct a concrete instance of `UserBaseSchemaArrayInput` via:
//
//	UserBaseSchemaArray{ UserBaseSchemaArgs{...} }
type UserBaseSchemaArrayInput interface {
	pulumi.Input

	ToUserBaseSchemaArrayOutput() UserBaseSchemaArrayOutput
	ToUserBaseSchemaArrayOutputWithContext(context.Context) UserBaseSchemaArrayOutput
}

type UserBaseSchemaArray []UserBaseSchemaInput

func (UserBaseSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserBaseSchema)(nil)).Elem()
}

func (i UserBaseSchemaArray) ToUserBaseSchemaArrayOutput() UserBaseSchemaArrayOutput {
	return i.ToUserBaseSchemaArrayOutputWithContext(context.Background())
}

func (i UserBaseSchemaArray) ToUserBaseSchemaArrayOutputWithContext(ctx context.Context) UserBaseSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaArrayOutput)
}

// UserBaseSchemaMapInput is an input type that accepts UserBaseSchemaMap and UserBaseSchemaMapOutput values.
// You can construct a concrete instance of `UserBaseSchemaMapInput` via:
//
//	UserBaseSchemaMap{ "key": UserBaseSchemaArgs{...} }
type UserBaseSchemaMapInput interface {
	pulumi.Input

	ToUserBaseSchemaMapOutput() UserBaseSchemaMapOutput
	ToUserBaseSchemaMapOutputWithContext(context.Context) UserBaseSchemaMapOutput
}

type UserBaseSchemaMap map[string]UserBaseSchemaInput

func (UserBaseSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserBaseSchema)(nil)).Elem()
}

func (i UserBaseSchemaMap) ToUserBaseSchemaMapOutput() UserBaseSchemaMapOutput {
	return i.ToUserBaseSchemaMapOutputWithContext(context.Background())
}

func (i UserBaseSchemaMap) ToUserBaseSchemaMapOutputWithContext(ctx context.Context) UserBaseSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaMapOutput)
}

type UserBaseSchemaOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchema)(nil)).Elem()
}

func (o UserBaseSchemaOutput) ToUserBaseSchemaOutput() UserBaseSchemaOutput {
	return o
}

func (o UserBaseSchemaOutput) ToUserBaseSchemaOutputWithContext(ctx context.Context) UserBaseSchemaOutput {
	return o
}

// The Application's ID the user schema property should be assigned to.
func (o UserBaseSchemaOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The property name.
func (o UserBaseSchemaOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
func (o UserBaseSchemaOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
func (o UserBaseSchemaOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
func (o UserBaseSchemaOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the property is required for this application's users.
func (o UserBaseSchemaOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// The property display name.
func (o UserBaseSchemaOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
func (o UserBaseSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Custom subschema user type
func (o UserBaseSchemaOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchema) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserBaseSchemaArrayOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserBaseSchema)(nil)).Elem()
}

func (o UserBaseSchemaArrayOutput) ToUserBaseSchemaArrayOutput() UserBaseSchemaArrayOutput {
	return o
}

func (o UserBaseSchemaArrayOutput) ToUserBaseSchemaArrayOutputWithContext(ctx context.Context) UserBaseSchemaArrayOutput {
	return o
}

func (o UserBaseSchemaArrayOutput) Index(i pulumi.IntInput) UserBaseSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserBaseSchema {
		return vs[0].([]*UserBaseSchema)[vs[1].(int)]
	}).(UserBaseSchemaOutput)
}

type UserBaseSchemaMapOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserBaseSchema)(nil)).Elem()
}

func (o UserBaseSchemaMapOutput) ToUserBaseSchemaMapOutput() UserBaseSchemaMapOutput {
	return o
}

func (o UserBaseSchemaMapOutput) ToUserBaseSchemaMapOutputWithContext(ctx context.Context) UserBaseSchemaMapOutput {
	return o
}

func (o UserBaseSchemaMapOutput) MapIndex(k pulumi.StringInput) UserBaseSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserBaseSchema {
		return vs[0].(map[string]*UserBaseSchema)[vs[1].(string)]
	}).(UserBaseSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaInput)(nil)).Elem(), &UserBaseSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaArrayInput)(nil)).Elem(), UserBaseSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaMapInput)(nil)).Elem(), UserBaseSchemaMap{})
	pulumi.RegisterOutputType(UserBaseSchemaOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaArrayOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaMapOutput{})
}
