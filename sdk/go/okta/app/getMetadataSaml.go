// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a SAML application's metadata from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := app.GetMetadataSaml(ctx, &app.GetMetadataSamlArgs{
//				AppId: "<app id>",
//				KeyId: pulumi.StringRef("<cert key id>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMetadataSaml(ctx *pulumi.Context, args *GetMetadataSamlArgs, opts ...pulumi.InvokeOption) (*GetMetadataSamlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMetadataSamlResult
	err := ctx.Invoke("okta:app/getMetadataSaml:getMetadataSaml", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetadataSaml.
type GetMetadataSamlArgs struct {
	// The application ID.
	AppId string `pulumi:"appId"`
	// Certificate Key ID.
	KeyId *string `pulumi:"keyId"`
}

// A collection of values returned by getMetadataSaml.
type GetMetadataSamlResult struct {
	// The application ID.
	AppId string `pulumi:"appId"`
	// Public certificate from application metadata.
	Certificate string `pulumi:"certificate"`
	// Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
	EntityId string `pulumi:"entityId"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding string `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding string `pulumi:"httpRedirectBinding"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Certificate Key ID.
	KeyId *string `pulumi:"keyId"`
	// Raw metadata of application.
	Metadata string `pulumi:"metadata"`
	// Whether authn requests are signed.
	WantAuthnRequestsSigned bool `pulumi:"wantAuthnRequestsSigned"`
}

func GetMetadataSamlOutput(ctx *pulumi.Context, args GetMetadataSamlOutputArgs, opts ...pulumi.InvokeOption) GetMetadataSamlResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMetadataSamlResultOutput, error) {
			args := v.(GetMetadataSamlArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:app/getMetadataSaml:getMetadataSaml", args, GetMetadataSamlResultOutput{}, options).(GetMetadataSamlResultOutput), nil
		}).(GetMetadataSamlResultOutput)
}

// A collection of arguments for invoking getMetadataSaml.
type GetMetadataSamlOutputArgs struct {
	// The application ID.
	AppId pulumi.StringInput `pulumi:"appId"`
	// Certificate Key ID.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
}

func (GetMetadataSamlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataSamlArgs)(nil)).Elem()
}

// A collection of values returned by getMetadataSaml.
type GetMetadataSamlResultOutput struct{ *pulumi.OutputState }

func (GetMetadataSamlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataSamlResult)(nil)).Elem()
}

func (o GetMetadataSamlResultOutput) ToGetMetadataSamlResultOutput() GetMetadataSamlResultOutput {
	return o
}

func (o GetMetadataSamlResultOutput) ToGetMetadataSamlResultOutputWithContext(ctx context.Context) GetMetadataSamlResultOutput {
	return o
}

// The application ID.
func (o GetMetadataSamlResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.AppId }).(pulumi.StringOutput)
}

// Public certificate from application metadata.
func (o GetMetadataSamlResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
func (o GetMetadataSamlResultOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.EntityId }).(pulumi.StringOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
func (o GetMetadataSamlResultOutput) HttpPostBinding() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.HttpPostBinding }).(pulumi.StringOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
func (o GetMetadataSamlResultOutput) HttpRedirectBinding() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.HttpRedirectBinding }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMetadataSamlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate Key ID.
func (o GetMetadataSamlResultOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// Raw metadata of application.
func (o GetMetadataSamlResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// Whether authn requests are signed.
func (o GetMetadataSamlResultOutput) WantAuthnRequestsSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) bool { return v.WantAuthnRequestsSigned }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMetadataSamlResultOutput{})
}
