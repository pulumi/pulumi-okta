// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// An application group assignment can be imported via the `app_id` and the `group_id`.
//
// ```sh
// $ pulumi import okta:app/groupAssignment:GroupAssignment example &#60;app_id&#62;/&#60;group_id&#62;
// ```
type GroupAssignment struct {
	pulumi.CustomResourceState

	// The ID of the application to assign a group to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The ID of the group to assign the app to.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Priority of group assignment.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
	RetainAssignment pulumi.BoolPtrOutput `pulumi:"retainAssignment"`
}

// NewGroupAssignment registers a new resource with the given unique name, arguments, and options.
func NewGroupAssignment(ctx *pulumi.Context,
	name string, args *GroupAssignmentArgs, opts ...pulumi.ResourceOption) (*GroupAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupAssignment
	err := ctx.RegisterResource("okta:app/groupAssignment:GroupAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupAssignment gets an existing GroupAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupAssignmentState, opts ...pulumi.ResourceOption) (*GroupAssignment, error) {
	var resource GroupAssignment
	err := ctx.ReadResource("okta:app/groupAssignment:GroupAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupAssignment resources.
type groupAssignmentState struct {
	// The ID of the application to assign a group to.
	AppId *string `pulumi:"appId"`
	// The ID of the group to assign the app to.
	GroupId *string `pulumi:"groupId"`
	// Priority of group assignment.
	Priority *int `pulumi:"priority"`
	// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
	Profile *string `pulumi:"profile"`
	// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
	RetainAssignment *bool `pulumi:"retainAssignment"`
}

type GroupAssignmentState struct {
	// The ID of the application to assign a group to.
	AppId pulumi.StringPtrInput
	// The ID of the group to assign the app to.
	GroupId pulumi.StringPtrInput
	// Priority of group assignment.
	Priority pulumi.IntPtrInput
	// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
	Profile pulumi.StringPtrInput
	// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
	RetainAssignment pulumi.BoolPtrInput
}

func (GroupAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupAssignmentState)(nil)).Elem()
}

type groupAssignmentArgs struct {
	// The ID of the application to assign a group to.
	AppId string `pulumi:"appId"`
	// The ID of the group to assign the app to.
	GroupId string `pulumi:"groupId"`
	// Priority of group assignment.
	Priority *int `pulumi:"priority"`
	// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
	Profile *string `pulumi:"profile"`
	// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
	RetainAssignment *bool `pulumi:"retainAssignment"`
}

// The set of arguments for constructing a GroupAssignment resource.
type GroupAssignmentArgs struct {
	// The ID of the application to assign a group to.
	AppId pulumi.StringInput
	// The ID of the group to assign the app to.
	GroupId pulumi.StringInput
	// Priority of group assignment.
	Priority pulumi.IntPtrInput
	// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
	Profile pulumi.StringPtrInput
	// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
	RetainAssignment pulumi.BoolPtrInput
}

func (GroupAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupAssignmentArgs)(nil)).Elem()
}

type GroupAssignmentInput interface {
	pulumi.Input

	ToGroupAssignmentOutput() GroupAssignmentOutput
	ToGroupAssignmentOutputWithContext(ctx context.Context) GroupAssignmentOutput
}

func (*GroupAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupAssignment)(nil)).Elem()
}

func (i *GroupAssignment) ToGroupAssignmentOutput() GroupAssignmentOutput {
	return i.ToGroupAssignmentOutputWithContext(context.Background())
}

func (i *GroupAssignment) ToGroupAssignmentOutputWithContext(ctx context.Context) GroupAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAssignmentOutput)
}

// GroupAssignmentArrayInput is an input type that accepts GroupAssignmentArray and GroupAssignmentArrayOutput values.
// You can construct a concrete instance of `GroupAssignmentArrayInput` via:
//
//	GroupAssignmentArray{ GroupAssignmentArgs{...} }
type GroupAssignmentArrayInput interface {
	pulumi.Input

	ToGroupAssignmentArrayOutput() GroupAssignmentArrayOutput
	ToGroupAssignmentArrayOutputWithContext(context.Context) GroupAssignmentArrayOutput
}

type GroupAssignmentArray []GroupAssignmentInput

func (GroupAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupAssignment)(nil)).Elem()
}

func (i GroupAssignmentArray) ToGroupAssignmentArrayOutput() GroupAssignmentArrayOutput {
	return i.ToGroupAssignmentArrayOutputWithContext(context.Background())
}

func (i GroupAssignmentArray) ToGroupAssignmentArrayOutputWithContext(ctx context.Context) GroupAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAssignmentArrayOutput)
}

// GroupAssignmentMapInput is an input type that accepts GroupAssignmentMap and GroupAssignmentMapOutput values.
// You can construct a concrete instance of `GroupAssignmentMapInput` via:
//
//	GroupAssignmentMap{ "key": GroupAssignmentArgs{...} }
type GroupAssignmentMapInput interface {
	pulumi.Input

	ToGroupAssignmentMapOutput() GroupAssignmentMapOutput
	ToGroupAssignmentMapOutputWithContext(context.Context) GroupAssignmentMapOutput
}

type GroupAssignmentMap map[string]GroupAssignmentInput

func (GroupAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupAssignment)(nil)).Elem()
}

func (i GroupAssignmentMap) ToGroupAssignmentMapOutput() GroupAssignmentMapOutput {
	return i.ToGroupAssignmentMapOutputWithContext(context.Background())
}

func (i GroupAssignmentMap) ToGroupAssignmentMapOutputWithContext(ctx context.Context) GroupAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAssignmentMapOutput)
}

type GroupAssignmentOutput struct{ *pulumi.OutputState }

func (GroupAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupAssignment)(nil)).Elem()
}

func (o GroupAssignmentOutput) ToGroupAssignmentOutput() GroupAssignmentOutput {
	return o
}

func (o GroupAssignmentOutput) ToGroupAssignmentOutputWithContext(ctx context.Context) GroupAssignmentOutput {
	return o
}

// The ID of the application to assign a group to.
func (o GroupAssignmentOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupAssignment) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The ID of the group to assign the app to.
func (o GroupAssignmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupAssignment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Priority of group assignment.
func (o GroupAssignmentOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupAssignment) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
func (o GroupAssignmentOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupAssignment) pulumi.StringPtrOutput { return v.Profile }).(pulumi.StringPtrOutput)
}

// Retain the group assignment on destroy. If set to true, the resource will be removed from state but not from the Okta app.
func (o GroupAssignmentOutput) RetainAssignment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupAssignment) pulumi.BoolPtrOutput { return v.RetainAssignment }).(pulumi.BoolPtrOutput)
}

type GroupAssignmentArrayOutput struct{ *pulumi.OutputState }

func (GroupAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupAssignment)(nil)).Elem()
}

func (o GroupAssignmentArrayOutput) ToGroupAssignmentArrayOutput() GroupAssignmentArrayOutput {
	return o
}

func (o GroupAssignmentArrayOutput) ToGroupAssignmentArrayOutputWithContext(ctx context.Context) GroupAssignmentArrayOutput {
	return o
}

func (o GroupAssignmentArrayOutput) Index(i pulumi.IntInput) GroupAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupAssignment {
		return vs[0].([]*GroupAssignment)[vs[1].(int)]
	}).(GroupAssignmentOutput)
}

type GroupAssignmentMapOutput struct{ *pulumi.OutputState }

func (GroupAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupAssignment)(nil)).Elem()
}

func (o GroupAssignmentMapOutput) ToGroupAssignmentMapOutput() GroupAssignmentMapOutput {
	return o
}

func (o GroupAssignmentMapOutput) ToGroupAssignmentMapOutputWithContext(ctx context.Context) GroupAssignmentMapOutput {
	return o
}

func (o GroupAssignmentMapOutput) MapIndex(k pulumi.StringInput) GroupAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupAssignment {
		return vs[0].(map[string]*GroupAssignment)[vs[1].(string)]
	}).(GroupAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAssignmentInput)(nil)).Elem(), &GroupAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAssignmentArrayInput)(nil)).Elem(), GroupAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAssignmentMapInput)(nil)).Elem(), GroupAssignmentMap{})
	pulumi.RegisterOutputType(GroupAssignmentOutput{})
	pulumi.RegisterOutputType(GroupAssignmentArrayOutput{})
	pulumi.RegisterOutputType(GroupAssignmentMapOutput{})
}
