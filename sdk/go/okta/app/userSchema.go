// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// App user schema property can be imported via the property index and app id.
//
// ```sh
//  $ pulumi import okta:app/userSchema:UserSchema example <app id>/<property name>
// ```
type UserSchema struct {
	pulumi.CustomResourceState

	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs UserSchemaArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// The description of the user schema property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs UserSchemaOneOfArrayOutput `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// display name for the enum value.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrOutput `pulumi:"union"`
	// Subschema unique restriction
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewUserSchema registers a new resource with the given unique name, arguments, and options.
func NewUserSchema(ctx *pulumi.Context,
	name string, args *UserSchemaArgs, opts ...pulumi.ResourceOption) (*UserSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource UserSchema
	err := ctx.RegisterResource("okta:app/userSchema:UserSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSchema gets an existing UserSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSchemaState, opts ...pulumi.ResourceOption) (*UserSchema, error) {
	var resource UserSchema
	err := ctx.ReadResource("okta:app/userSchema:UserSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSchema resources.
type userSchemaState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId *string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []UserSchemaArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []UserSchemaOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type UserSchemaState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringPtrInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs UserSchemaArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs UserSchemaOneOfArrayInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSchemaState)(nil)).Elem()
}

type userSchemaArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []UserSchemaArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []UserSchemaOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a UserSchema resource.
type UserSchemaArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs UserSchemaArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs UserSchemaOneOfArrayInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSchemaArgs)(nil)).Elem()
}

type UserSchemaInput interface {
	pulumi.Input

	ToUserSchemaOutput() UserSchemaOutput
	ToUserSchemaOutputWithContext(ctx context.Context) UserSchemaOutput
}

func (*UserSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSchema)(nil)).Elem()
}

func (i *UserSchema) ToUserSchemaOutput() UserSchemaOutput {
	return i.ToUserSchemaOutputWithContext(context.Background())
}

func (i *UserSchema) ToUserSchemaOutputWithContext(ctx context.Context) UserSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaOutput)
}

// UserSchemaArrayInput is an input type that accepts UserSchemaArray and UserSchemaArrayOutput values.
// You can construct a concrete instance of `UserSchemaArrayInput` via:
//
//          UserSchemaArray{ UserSchemaArgs{...} }
type UserSchemaArrayInput interface {
	pulumi.Input

	ToUserSchemaArrayOutput() UserSchemaArrayOutput
	ToUserSchemaArrayOutputWithContext(context.Context) UserSchemaArrayOutput
}

type UserSchemaArray []UserSchemaInput

func (UserSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSchema)(nil)).Elem()
}

func (i UserSchemaArray) ToUserSchemaArrayOutput() UserSchemaArrayOutput {
	return i.ToUserSchemaArrayOutputWithContext(context.Background())
}

func (i UserSchemaArray) ToUserSchemaArrayOutputWithContext(ctx context.Context) UserSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaArrayOutput)
}

// UserSchemaMapInput is an input type that accepts UserSchemaMap and UserSchemaMapOutput values.
// You can construct a concrete instance of `UserSchemaMapInput` via:
//
//          UserSchemaMap{ "key": UserSchemaArgs{...} }
type UserSchemaMapInput interface {
	pulumi.Input

	ToUserSchemaMapOutput() UserSchemaMapOutput
	ToUserSchemaMapOutputWithContext(context.Context) UserSchemaMapOutput
}

type UserSchemaMap map[string]UserSchemaInput

func (UserSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSchema)(nil)).Elem()
}

func (i UserSchemaMap) ToUserSchemaMapOutput() UserSchemaMapOutput {
	return i.ToUserSchemaMapOutputWithContext(context.Background())
}

func (i UserSchemaMap) ToUserSchemaMapOutputWithContext(ctx context.Context) UserSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaMapOutput)
}

type UserSchemaOutput struct{ *pulumi.OutputState }

func (UserSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSchema)(nil)).Elem()
}

func (o UserSchemaOutput) ToUserSchemaOutput() UserSchemaOutput {
	return o
}

func (o UserSchemaOutput) ToUserSchemaOutputWithContext(ctx context.Context) UserSchemaOutput {
	return o
}

type UserSchemaArrayOutput struct{ *pulumi.OutputState }

func (UserSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSchema)(nil)).Elem()
}

func (o UserSchemaArrayOutput) ToUserSchemaArrayOutput() UserSchemaArrayOutput {
	return o
}

func (o UserSchemaArrayOutput) ToUserSchemaArrayOutputWithContext(ctx context.Context) UserSchemaArrayOutput {
	return o
}

func (o UserSchemaArrayOutput) Index(i pulumi.IntInput) UserSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSchema {
		return vs[0].([]*UserSchema)[vs[1].(int)]
	}).(UserSchemaOutput)
}

type UserSchemaMapOutput struct{ *pulumi.OutputState }

func (UserSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSchema)(nil)).Elem()
}

func (o UserSchemaMapOutput) ToUserSchemaMapOutput() UserSchemaMapOutput {
	return o
}

func (o UserSchemaMapOutput) ToUserSchemaMapOutputWithContext(ctx context.Context) UserSchemaMapOutput {
	return o
}

func (o UserSchemaMapOutput) MapIndex(k pulumi.StringInput) UserSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSchema {
		return vs[0].(map[string]*UserSchema)[vs[1].(string)]
	}).(UserSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaInput)(nil)).Elem(), &UserSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaArrayInput)(nil)).Elem(), UserSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSchemaMapInput)(nil)).Elem(), UserSchemaMap{})
	pulumi.RegisterOutputType(UserSchemaOutput{})
	pulumi.RegisterOutputType(UserSchemaArrayOutput{})
	pulumi.RegisterOutputType(UserSchemaMapOutput{})
}
