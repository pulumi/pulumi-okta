// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and configure an OIDC Application.
// > During an apply if there is change in status the app will first be
// activated or deactivated in accordance with the status change. Then, all
// other arguments that changed will be applied.
//
// > `app.OAuthRedirectUri` has been marked deprecated and will be removed
// in the v5 release of the provider. Operators should manage the redirect URIs for
// an oauth app directly on that resource.
//
// ### Private Keys
//
// The private key format that an Okta OAuth app expects is PKCS#8 (unencrypted).
// The operator either uploads their own private key or Okta can generate one in
// the Admin UI Panel under the apps Client Credentials. PKCS#8 format can be
// identified by a header that starts with `-----BEGIN PRIVATE KEY-----`. If the
// operator has a PKCS#1 (unencrypted) format private key (the header starts with
// `-----BEGIN RSA PRIVATE KEY-----`) they can generate a PKCS#8 format
// key with `openssl`:
//
// ## Import
//
// ```sh
// $ pulumi import okta:app/oAuth:OAuth example <app_id>
// ```
type OAuth struct {
	pulumi.CustomResourceState

	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote pulumi.StringPtrOutput `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrOutput `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrOutput `pulumi:"appSettingsJson"`
	// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
	AuthenticationPolicy pulumi.StringOutput `pulumi:"authenticationPolicy"`
	// Requested key rotation mode. If
	// 			auto*key*rotation isn't specified, the client automatically opts in for Okta's
	// 			key rotation. You can update this property via the API or via the administrator
	// 			UI.
	// 			See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
	AutoKeyRotation pulumi.BoolPtrOutput `pulumi:"autoKeyRotation"`
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
	ClientBasicSecret pulumi.StringPtrOutput `pulumi:"clientBasicSecret"`
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// OAuth client secret value, this is output only. This will be in plain text in your statefile unless you set omitSecret above.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// URI to a web page providing information about the client.
	ClientUri pulumi.StringPtrOutput `pulumi:"clientUri"`
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
	ConsentMethod pulumi.StringPtrOutput `pulumi:"consentMethod"`
	// Application notes for end users.
	EnduserNote pulumi.StringPtrOutput `pulumi:"enduserNote"`
	// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
	GrantTypes pulumi.StringArrayOutput `pulumi:"grantTypes"`
	// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
	GroupsClaim OAuthGroupsClaimPtrOutput `pulumi:"groupsClaim"`
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrOutput `pulumi:"implicitAssignment"`
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	Jwks       OAuthJwkArrayOutput    `pulumi:"jwks"`
	// URL reference to JWKS
	JwksUri pulumi.StringPtrOutput `pulumi:"jwksUri"`
	// The Application's display name.
	Label pulumi.StringOutput `pulumi:"label"`
	// The type of Idp-Initiated login that the client supports, if any
	LoginMode pulumi.StringPtrOutput `pulumi:"loginMode"`
	// List of scopes to use for the request
	LoginScopes pulumi.StringArrayOutput `pulumi:"loginScopes"`
	// URI that initiates login.
	LoginUri pulumi.StringPtrOutput `pulumi:"loginUri"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// URI that references a logo for the client.
	LogoUri pulumi.StringPtrOutput `pulumi:"logoUri"`
	// URL of the application's logo
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// Name of the app.
	Name pulumi.StringOutput `pulumi:"name"`
	// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
	OmitSecret pulumi.BoolPtrOutput `pulumi:"omitSecret"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	PkceRequired pulumi.BoolOutput `pulumi:"pkceRequired"`
	// URI to web page providing client policy document.
	PolicyUri pulumi.StringPtrOutput `pulumi:"policyUri"`
	// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
	PostLogoutRedirectUris pulumi.StringArrayOutput `pulumi:"postLogoutRedirectUris"`
	// Custom JSON that represents an OAuth application's profile
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
	RedirectUris pulumi.StringArrayOutput `pulumi:"redirectUris"`
	// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
	RefreshTokenLeeway pulumi.IntPtrOutput `pulumi:"refreshTokenLeeway"`
	// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
	RefreshTokenRotation pulumi.StringPtrOutput `pulumi:"refreshTokenRotation"`
	// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
	ResponseTypes pulumi.StringArrayOutput `pulumi:"responseTypes"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
	TokenEndpointAuthMethod pulumi.StringPtrOutput `pulumi:"tokenEndpointAuthMethod"`
	// URI to web page providing client tos (terms of service).
	TosUri pulumi.StringPtrOutput `pulumi:"tosUri"`
	// The type of client application.
	Type pulumi.StringOutput `pulumi:"type"`
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrOutput `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
	WildcardRedirect pulumi.StringPtrOutput `pulumi:"wildcardRedirect"`
}

// NewOAuth registers a new resource with the given unique name, arguments, and options.
func NewOAuth(ctx *pulumi.Context,
	name string, args *OAuthArgs, opts ...pulumi.ResourceOption) (*OAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ClientBasicSecret != nil {
		args.ClientBasicSecret = pulumi.ToSecret(args.ClientBasicSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientBasicSecret",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OAuth
	err := ctx.RegisterResource("okta:app/oAuth:OAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOAuth gets an existing OAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OAuthState, opts ...pulumi.ResourceOption) (*OAuth, error) {
	var resource OAuth
	err := ctx.ReadResource("okta:app/oAuth:OAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OAuth resources.
type oauthState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
	AuthenticationPolicy *string `pulumi:"authenticationPolicy"`
	// Requested key rotation mode. If
	// 			auto*key*rotation isn't specified, the client automatically opts in for Okta's
	// 			key rotation. You can update this property via the API or via the administrator
	// 			UI.
	// 			See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
	AutoKeyRotation *bool `pulumi:"autoKeyRotation"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
	ClientBasicSecret *string `pulumi:"clientBasicSecret"`
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId *string `pulumi:"clientId"`
	// OAuth client secret value, this is output only. This will be in plain text in your statefile unless you set omitSecret above.
	ClientSecret *string `pulumi:"clientSecret"`
	// URI to a web page providing information about the client.
	ClientUri *string `pulumi:"clientUri"`
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
	ConsentMethod *string `pulumi:"consentMethod"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
	GrantTypes []string `pulumi:"grantTypes"`
	// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
	GroupsClaim *OAuthGroupsClaim `pulumi:"groupsClaim"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment *bool `pulumi:"implicitAssignment"`
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	IssuerMode *string    `pulumi:"issuerMode"`
	Jwks       []OAuthJwk `pulumi:"jwks"`
	// URL reference to JWKS
	JwksUri *string `pulumi:"jwksUri"`
	// The Application's display name.
	Label *string `pulumi:"label"`
	// The type of Idp-Initiated login that the client supports, if any
	LoginMode *string `pulumi:"loginMode"`
	// List of scopes to use for the request
	LoginScopes []string `pulumi:"loginScopes"`
	// URI that initiates login.
	LoginUri *string `pulumi:"loginUri"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo *string `pulumi:"logo"`
	// URI that references a logo for the client.
	LogoUri *string `pulumi:"logoUri"`
	// URL of the application's logo
	LogoUrl *string `pulumi:"logoUrl"`
	// Name of the app.
	Name *string `pulumi:"name"`
	// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
	OmitSecret *bool `pulumi:"omitSecret"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	PkceRequired *bool `pulumi:"pkceRequired"`
	// URI to web page providing client policy document.
	PolicyUri *string `pulumi:"policyUri"`
	// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
	PostLogoutRedirectUris []string `pulumi:"postLogoutRedirectUris"`
	// Custom JSON that represents an OAuth application's profile
	Profile *string `pulumi:"profile"`
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
	RedirectUris []string `pulumi:"redirectUris"`
	// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
	RefreshTokenLeeway *int `pulumi:"refreshTokenLeeway"`
	// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
	RefreshTokenRotation *string `pulumi:"refreshTokenRotation"`
	// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
	ResponseTypes []string `pulumi:"responseTypes"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Status of application. By default, it is `ACTIVE`
	Status *string `pulumi:"status"`
	// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
	TokenEndpointAuthMethod *string `pulumi:"tokenEndpointAuthMethod"`
	// URI to web page providing client tos (terms of service).
	TosUri *string `pulumi:"tosUri"`
	// The type of client application.
	Type *string `pulumi:"type"`
	// Username template. Default: `${source.login}`
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
	WildcardRedirect *string `pulumi:"wildcardRedirect"`
}

type OAuthState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
	AuthenticationPolicy pulumi.StringPtrInput
	// Requested key rotation mode. If
	// 			auto*key*rotation isn't specified, the client automatically opts in for Okta's
	// 			key rotation. You can update this property via the API or via the administrator
	// 			UI.
	// 			See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
	AutoKeyRotation pulumi.BoolPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
	ClientBasicSecret pulumi.StringPtrInput
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId pulumi.StringPtrInput
	// OAuth client secret value, this is output only. This will be in plain text in your statefile unless you set omitSecret above.
	ClientSecret pulumi.StringPtrInput
	// URI to a web page providing information about the client.
	ClientUri pulumi.StringPtrInput
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
	ConsentMethod pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
	GrantTypes pulumi.StringArrayInput
	// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
	GroupsClaim OAuthGroupsClaimPtrInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrInput
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	IssuerMode pulumi.StringPtrInput
	Jwks       OAuthJwkArrayInput
	// URL reference to JWKS
	JwksUri pulumi.StringPtrInput
	// The Application's display name.
	Label pulumi.StringPtrInput
	// The type of Idp-Initiated login that the client supports, if any
	LoginMode pulumi.StringPtrInput
	// List of scopes to use for the request
	LoginScopes pulumi.StringArrayInput
	// URI that initiates login.
	LoginUri pulumi.StringPtrInput
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrInput
	// URI that references a logo for the client.
	LogoUri pulumi.StringPtrInput
	// URL of the application's logo
	LogoUrl pulumi.StringPtrInput
	// Name of the app.
	Name pulumi.StringPtrInput
	// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
	OmitSecret pulumi.BoolPtrInput
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	PkceRequired pulumi.BoolPtrInput
	// URI to web page providing client policy document.
	PolicyUri pulumi.StringPtrInput
	// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
	PostLogoutRedirectUris pulumi.StringArrayInput
	// Custom JSON that represents an OAuth application's profile
	Profile pulumi.StringPtrInput
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
	RedirectUris pulumi.StringArrayInput
	// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
	RefreshTokenLeeway pulumi.IntPtrInput
	// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
	RefreshTokenRotation pulumi.StringPtrInput
	// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
	ResponseTypes pulumi.StringArrayInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrInput
	// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
	TokenEndpointAuthMethod pulumi.StringPtrInput
	// URI to web page providing client tos (terms of service).
	TosUri pulumi.StringPtrInput
	// The type of client application.
	Type pulumi.StringPtrInput
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrInput
	// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
	WildcardRedirect pulumi.StringPtrInput
}

func (OAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthState)(nil)).Elem()
}

type oauthArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
	AuthenticationPolicy *string `pulumi:"authenticationPolicy"`
	// Requested key rotation mode. If
	// 			auto*key*rotation isn't specified, the client automatically opts in for Okta's
	// 			key rotation. You can update this property via the API or via the administrator
	// 			UI.
	// 			See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
	AutoKeyRotation *bool `pulumi:"autoKeyRotation"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
	ClientBasicSecret *string `pulumi:"clientBasicSecret"`
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId *string `pulumi:"clientId"`
	// URI to a web page providing information about the client.
	ClientUri *string `pulumi:"clientUri"`
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
	ConsentMethod *string `pulumi:"consentMethod"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
	GrantTypes []string `pulumi:"grantTypes"`
	// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
	GroupsClaim *OAuthGroupsClaim `pulumi:"groupsClaim"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment *bool `pulumi:"implicitAssignment"`
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	IssuerMode *string    `pulumi:"issuerMode"`
	Jwks       []OAuthJwk `pulumi:"jwks"`
	// URL reference to JWKS
	JwksUri *string `pulumi:"jwksUri"`
	// The Application's display name.
	Label string `pulumi:"label"`
	// The type of Idp-Initiated login that the client supports, if any
	LoginMode *string `pulumi:"loginMode"`
	// List of scopes to use for the request
	LoginScopes []string `pulumi:"loginScopes"`
	// URI that initiates login.
	LoginUri *string `pulumi:"loginUri"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo *string `pulumi:"logo"`
	// URI that references a logo for the client.
	LogoUri *string `pulumi:"logoUri"`
	// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
	OmitSecret *bool `pulumi:"omitSecret"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	PkceRequired *bool `pulumi:"pkceRequired"`
	// URI to web page providing client policy document.
	PolicyUri *string `pulumi:"policyUri"`
	// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
	PostLogoutRedirectUris []string `pulumi:"postLogoutRedirectUris"`
	// Custom JSON that represents an OAuth application's profile
	Profile *string `pulumi:"profile"`
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
	RedirectUris []string `pulumi:"redirectUris"`
	// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
	RefreshTokenLeeway *int `pulumi:"refreshTokenLeeway"`
	// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
	RefreshTokenRotation *string `pulumi:"refreshTokenRotation"`
	// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
	ResponseTypes []string `pulumi:"responseTypes"`
	// Status of application. By default, it is `ACTIVE`
	Status *string `pulumi:"status"`
	// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
	TokenEndpointAuthMethod *string `pulumi:"tokenEndpointAuthMethod"`
	// URI to web page providing client tos (terms of service).
	TosUri *string `pulumi:"tosUri"`
	// The type of client application.
	Type string `pulumi:"type"`
	// Username template. Default: `${source.login}`
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
	WildcardRedirect *string `pulumi:"wildcardRedirect"`
}

// The set of arguments for constructing a OAuth resource.
type OAuthArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
	AuthenticationPolicy pulumi.StringPtrInput
	// Requested key rotation mode. If
	// 			auto*key*rotation isn't specified, the client automatically opts in for Okta's
	// 			key rotation. You can update this property via the API or via the administrator
	// 			UI.
	// 			See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
	AutoKeyRotation pulumi.BoolPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
	ClientBasicSecret pulumi.StringPtrInput
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId pulumi.StringPtrInput
	// URI to a web page providing information about the client.
	ClientUri pulumi.StringPtrInput
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
	ConsentMethod pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
	GrantTypes pulumi.StringArrayInput
	// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
	GroupsClaim OAuthGroupsClaimPtrInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// *Early Access Property*. Enable Federation Broker Mode.
	ImplicitAssignment pulumi.BoolPtrInput
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	IssuerMode pulumi.StringPtrInput
	Jwks       OAuthJwkArrayInput
	// URL reference to JWKS
	JwksUri pulumi.StringPtrInput
	// The Application's display name.
	Label pulumi.StringInput
	// The type of Idp-Initiated login that the client supports, if any
	LoginMode pulumi.StringPtrInput
	// List of scopes to use for the request
	LoginScopes pulumi.StringArrayInput
	// URI that initiates login.
	LoginUri pulumi.StringPtrInput
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrInput
	// URI that references a logo for the client.
	LogoUri pulumi.StringPtrInput
	// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
	OmitSecret pulumi.BoolPtrInput
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	PkceRequired pulumi.BoolPtrInput
	// URI to web page providing client policy document.
	PolicyUri pulumi.StringPtrInput
	// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
	PostLogoutRedirectUris pulumi.StringArrayInput
	// Custom JSON that represents an OAuth application's profile
	Profile pulumi.StringPtrInput
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
	RedirectUris pulumi.StringArrayInput
	// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
	RefreshTokenLeeway pulumi.IntPtrInput
	// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
	RefreshTokenRotation pulumi.StringPtrInput
	// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
	ResponseTypes pulumi.StringArrayInput
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrInput
	// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
	TokenEndpointAuthMethod pulumi.StringPtrInput
	// URI to web page providing client tos (terms of service).
	TosUri pulumi.StringPtrInput
	// The type of client application.
	Type pulumi.StringInput
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrInput
	// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
	WildcardRedirect pulumi.StringPtrInput
}

func (OAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthArgs)(nil)).Elem()
}

type OAuthInput interface {
	pulumi.Input

	ToOAuthOutput() OAuthOutput
	ToOAuthOutputWithContext(ctx context.Context) OAuthOutput
}

func (*OAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuth)(nil)).Elem()
}

func (i *OAuth) ToOAuthOutput() OAuthOutput {
	return i.ToOAuthOutputWithContext(context.Background())
}

func (i *OAuth) ToOAuthOutputWithContext(ctx context.Context) OAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthOutput)
}

// OAuthArrayInput is an input type that accepts OAuthArray and OAuthArrayOutput values.
// You can construct a concrete instance of `OAuthArrayInput` via:
//
//	OAuthArray{ OAuthArgs{...} }
type OAuthArrayInput interface {
	pulumi.Input

	ToOAuthArrayOutput() OAuthArrayOutput
	ToOAuthArrayOutputWithContext(context.Context) OAuthArrayOutput
}

type OAuthArray []OAuthInput

func (OAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OAuth)(nil)).Elem()
}

func (i OAuthArray) ToOAuthArrayOutput() OAuthArrayOutput {
	return i.ToOAuthArrayOutputWithContext(context.Background())
}

func (i OAuthArray) ToOAuthArrayOutputWithContext(ctx context.Context) OAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthArrayOutput)
}

// OAuthMapInput is an input type that accepts OAuthMap and OAuthMapOutput values.
// You can construct a concrete instance of `OAuthMapInput` via:
//
//	OAuthMap{ "key": OAuthArgs{...} }
type OAuthMapInput interface {
	pulumi.Input

	ToOAuthMapOutput() OAuthMapOutput
	ToOAuthMapOutputWithContext(context.Context) OAuthMapOutput
}

type OAuthMap map[string]OAuthInput

func (OAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OAuth)(nil)).Elem()
}

func (i OAuthMap) ToOAuthMapOutput() OAuthMapOutput {
	return i.ToOAuthMapOutputWithContext(context.Background())
}

func (i OAuthMap) ToOAuthMapOutputWithContext(ctx context.Context) OAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthMapOutput)
}

type OAuthOutput struct{ *pulumi.OutputState }

func (OAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuth)(nil)).Elem()
}

func (o OAuthOutput) ToOAuthOutput() OAuthOutput {
	return o
}

func (o OAuthOutput) ToOAuthOutputWithContext(ctx context.Context) OAuthOutput {
	return o
}

// Custom error page URL
func (o OAuthOutput) AccessibilityErrorRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.AccessibilityErrorRedirectUrl }).(pulumi.StringPtrOutput)
}

// Custom login page URL
func (o OAuthOutput) AccessibilityLoginRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.AccessibilityLoginRedirectUrl }).(pulumi.StringPtrOutput)
}

// Enable self service. Default is `false`
func (o OAuthOutput) AccessibilitySelfService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.AccessibilitySelfService }).(pulumi.BoolPtrOutput)
}

// Application notes for admins.
func (o OAuthOutput) AdminNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.AdminNote }).(pulumi.StringPtrOutput)
}

// Displays specific appLinks for the app. The value for each application link should be boolean.
func (o OAuthOutput) AppLinksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.AppLinksJson }).(pulumi.StringPtrOutput)
}

// Application settings in JSON format
func (o OAuthOutput) AppSettingsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.AppSettingsJson }).(pulumi.StringPtrOutput)
}

// The ID of the associated app*signon*policy. If this property is removed from the application the default sign-on-policy will be associated with this application. From now on, there is no need to attach authenticationPolicy for applications of type `SERVICE` in the upcoming release.
func (o OAuthOutput) AuthenticationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.AuthenticationPolicy }).(pulumi.StringOutput)
}

// Requested key rotation mode. If
//
//	auto*key*rotation isn't specified, the client automatically opts in for Okta's
//	key rotation. You can update this property via the API or via the administrator
//	UI.
//	See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object"
func (o OAuthOutput) AutoKeyRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.AutoKeyRotation }).(pulumi.BoolPtrOutput)
}

// Display auto submit toolbar
func (o OAuthOutput) AutoSubmitToolbar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.AutoSubmitToolbar }).(pulumi.BoolPtrOutput)
}

// The user provided OAuth client secret key value, this can be set when token*endpoint*auth*method is client*secret*basic. This does nothing when `omit*secret is set to true.
func (o OAuthOutput) ClientBasicSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.ClientBasicSecret }).(pulumi.StringPtrOutput)
}

// OAuth client ID. If set during creation, app is created with this id.
func (o OAuthOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// OAuth client secret value, this is output only. This will be in plain text in your statefile unless you set omitSecret above.
func (o OAuthOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// URI to a web page providing information about the client.
func (o OAuthOutput) ClientUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.ClientUri }).(pulumi.StringPtrOutput)
}

// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED. Default value is TRUSTED
func (o OAuthOutput) ConsentMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.ConsentMethod }).(pulumi.StringPtrOutput)
}

// Application notes for end users.
func (o OAuthOutput) EnduserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.EnduserNote }).(pulumi.StringPtrOutput)
}

// List of OAuth 2.0 grant types. Conditional validation params found here https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per app type.
func (o OAuthOutput) GrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringArrayOutput { return v.GrantTypes }).(pulumi.StringArrayOutput)
}

// Groups claim for an OpenID Connect client application (argument is ignored when API auth is done with OAuth 2.0 credentials)
func (o OAuthOutput) GroupsClaim() OAuthGroupsClaimPtrOutput {
	return o.ApplyT(func(v *OAuth) OAuthGroupsClaimPtrOutput { return v.GroupsClaim }).(OAuthGroupsClaimPtrOutput)
}

// Do not display application icon on mobile app
func (o OAuthOutput) HideIos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.HideIos }).(pulumi.BoolPtrOutput)
}

// Do not display application icon to users
func (o OAuthOutput) HideWeb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.HideWeb }).(pulumi.BoolPtrOutput)
}

// *Early Access Property*. Enable Federation Broker Mode.
func (o OAuthOutput) ImplicitAssignment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.ImplicitAssignment }).(pulumi.BoolPtrOutput)
}

// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
func (o OAuthOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

func (o OAuthOutput) Jwks() OAuthJwkArrayOutput {
	return o.ApplyT(func(v *OAuth) OAuthJwkArrayOutput { return v.Jwks }).(OAuthJwkArrayOutput)
}

// URL reference to JWKS
func (o OAuthOutput) JwksUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.JwksUri }).(pulumi.StringPtrOutput)
}

// The Application's display name.
func (o OAuthOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The type of Idp-Initiated login that the client supports, if any
func (o OAuthOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.LoginMode }).(pulumi.StringPtrOutput)
}

// List of scopes to use for the request
func (o OAuthOutput) LoginScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringArrayOutput { return v.LoginScopes }).(pulumi.StringArrayOutput)
}

// URI that initiates login.
func (o OAuthOutput) LoginUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.LoginUri }).(pulumi.StringPtrOutput)
}

// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
func (o OAuthOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.Logo }).(pulumi.StringPtrOutput)
}

// URI that references a logo for the client.
func (o OAuthOutput) LogoUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.LogoUri }).(pulumi.StringPtrOutput)
}

// URL of the application's logo
func (o OAuthOutput) LogoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.LogoUrl }).(pulumi.StringOutput)
}

// Name of the app.
func (o OAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This tells the provider not manage the client*secret value in state. When this is false (the default), it will cause the auto-generated client*secret to be persisted in the clientSecret attribute in state. This also means that every time an update to this app is run, this value is also set on the API. If this changes from false => true, the `clientSecret` is dropped from state and the secret at the time of the apply is what remains. If this is ever changes from true => false your app will be recreated, due to the need to regenerate a secret we can store in state.
func (o OAuthOutput) OmitSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolPtrOutput { return v.OmitSecret }).(pulumi.BoolPtrOutput)
}

// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
func (o OAuthOutput) PkceRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *OAuth) pulumi.BoolOutput { return v.PkceRequired }).(pulumi.BoolOutput)
}

// URI to web page providing client policy document.
func (o OAuthOutput) PolicyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.PolicyUri }).(pulumi.StringPtrOutput)
}

// List of URIs for redirection after logout. Note: see okta*app*oauth*post*logout*redirect*uri for appending to this list in a decentralized way.
func (o OAuthOutput) PostLogoutRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringArrayOutput { return v.PostLogoutRedirectUris }).(pulumi.StringArrayOutput)
}

// Custom JSON that represents an OAuth application's profile
func (o OAuthOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.Profile }).(pulumi.StringPtrOutput)
}

// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see okta*app*oauth*redirect*uri for appending to this list in a decentralized way.
func (o OAuthOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringArrayOutput { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

// *Early Access Property* Grace period for token rotation, required with grant types refresh_token
func (o OAuthOutput) RefreshTokenLeeway() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.IntPtrOutput { return v.RefreshTokenLeeway }).(pulumi.IntPtrOutput)
}

// *Early Access Property* Refresh token rotation behavior, required with grant types refresh_token
func (o OAuthOutput) RefreshTokenRotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.RefreshTokenRotation }).(pulumi.StringPtrOutput)
}

// List of OAuth 2.0 response type strings. Valid values are any combination of: `code`, `token`, and `idToken`.
func (o OAuthOutput) ResponseTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringArrayOutput { return v.ResponseTypes }).(pulumi.StringArrayOutput)
}

// Sign on mode of application.
func (o OAuthOutput) SignOnMode() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.SignOnMode }).(pulumi.StringOutput)
}

// Status of application. By default, it is `ACTIVE`
func (o OAuthOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Requested authentication method for the token endpoint, valid values include:  'client*secret*basic', 'client*secret*post', 'client*secret*jwt', 'private*key*jwt', 'none', etc.
func (o OAuthOutput) TokenEndpointAuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.TokenEndpointAuthMethod }).(pulumi.StringPtrOutput)
}

// URI to web page providing client tos (terms of service).
func (o OAuthOutput) TosUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.TosUri }).(pulumi.StringPtrOutput)
}

// The type of client application.
func (o OAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Username template. Default: `${source.login}`
func (o OAuthOutput) UserNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.UserNameTemplate }).(pulumi.StringPtrOutput)
}

// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
func (o OAuthOutput) UserNameTemplatePushStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.UserNameTemplatePushStatus }).(pulumi.StringPtrOutput)
}

// Username template suffix
func (o OAuthOutput) UserNameTemplateSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.UserNameTemplateSuffix }).(pulumi.StringPtrOutput)
}

// Username template type. Default: `BUILT_IN`
func (o OAuthOutput) UserNameTemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.UserNameTemplateType }).(pulumi.StringPtrOutput)
}

// *Early Access Property*. Indicates if the client is allowed to use wildcard matching of redirect_uris
func (o OAuthOutput) WildcardRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuth) pulumi.StringPtrOutput { return v.WildcardRedirect }).(pulumi.StringPtrOutput)
}

type OAuthArrayOutput struct{ *pulumi.OutputState }

func (OAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OAuth)(nil)).Elem()
}

func (o OAuthArrayOutput) ToOAuthArrayOutput() OAuthArrayOutput {
	return o
}

func (o OAuthArrayOutput) ToOAuthArrayOutputWithContext(ctx context.Context) OAuthArrayOutput {
	return o
}

func (o OAuthArrayOutput) Index(i pulumi.IntInput) OAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OAuth {
		return vs[0].([]*OAuth)[vs[1].(int)]
	}).(OAuthOutput)
}

type OAuthMapOutput struct{ *pulumi.OutputState }

func (OAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OAuth)(nil)).Elem()
}

func (o OAuthMapOutput) ToOAuthMapOutput() OAuthMapOutput {
	return o
}

func (o OAuthMapOutput) ToOAuthMapOutputWithContext(ctx context.Context) OAuthMapOutput {
	return o
}

func (o OAuthMapOutput) MapIndex(k pulumi.StringInput) OAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OAuth {
		return vs[0].(map[string]*OAuth)[vs[1].(string)]
	}).(OAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthInput)(nil)).Elem(), &OAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthArrayInput)(nil)).Elem(), OAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthMapInput)(nil)).Elem(), OAuthMap{})
	pulumi.RegisterOutputType(OAuthOutput{})
	pulumi.RegisterOutputType(OAuthArrayOutput{})
	pulumi.RegisterOutputType(OAuthMapOutput{})
}
