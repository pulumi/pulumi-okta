// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages assignment of Access Policy to an Application.
//
// **Warning**: do not use as this will update okta_app_*.authentication_policy and vice versa
//
// Assigns an access policy (colloquially known as a sign-on policy and/or an
// authentication policy) to an application. This resource does not perform true
// delete as it will not delete an application and the app's access policy can't be
// removed; it can only be changed to a different access policy. This resource is
// only logical within the context of an application therefore `appId` is
// immutable once set. Use this resource to manage assigning an access policy to an
// application. It will assign the given `policyId` to the application at creation
// and during update.
//
// > Inside the product a sign-on policy is referenced as an *authentication
// policy*, in the public API the policy is of type
// [`ACCESS_POLICY`](https://developer.okta.com/docs/reference/api/policy/#policy-object).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			access, err := policy.GetPolicy(ctx, &policy.GetPolicyArgs{
//				Name: "Any two factors",
//				Type: "ACCESS_POLICY",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := app.GetApp(ctx, &app.GetAppArgs{
//				Label: pulumi.StringRef("Example App"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = app.NewAccessPolicyAssignment(ctx, "assignment", &app.AccessPolicyAssignmentArgs{
//				AppId:    pulumi.String(example.Id),
//				PolicyId: pulumi.String(access.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:app/accessPolicyAssignment:AccessPolicyAssignment example &#60;app id&#62;
// ```
type AccessPolicyAssignment struct {
	pulumi.CustomResourceState

	// The application ID; this value is immutable and can not be updated.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The access policy ID.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
}

// NewAccessPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicyAssignment(ctx *pulumi.Context,
	name string, args *AccessPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*AccessPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPolicyAssignment
	err := ctx.RegisterResource("okta:app/accessPolicyAssignment:AccessPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicyAssignment gets an existing AccessPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyAssignmentState, opts ...pulumi.ResourceOption) (*AccessPolicyAssignment, error) {
	var resource AccessPolicyAssignment
	err := ctx.ReadResource("okta:app/accessPolicyAssignment:AccessPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicyAssignment resources.
type accessPolicyAssignmentState struct {
	// The application ID; this value is immutable and can not be updated.
	AppId *string `pulumi:"appId"`
	// The access policy ID.
	PolicyId *string `pulumi:"policyId"`
}

type AccessPolicyAssignmentState struct {
	// The application ID; this value is immutable and can not be updated.
	AppId pulumi.StringPtrInput
	// The access policy ID.
	PolicyId pulumi.StringPtrInput
}

func (AccessPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyAssignmentState)(nil)).Elem()
}

type accessPolicyAssignmentArgs struct {
	// The application ID; this value is immutable and can not be updated.
	AppId string `pulumi:"appId"`
	// The access policy ID.
	PolicyId string `pulumi:"policyId"`
}

// The set of arguments for constructing a AccessPolicyAssignment resource.
type AccessPolicyAssignmentArgs struct {
	// The application ID; this value is immutable and can not be updated.
	AppId pulumi.StringInput
	// The access policy ID.
	PolicyId pulumi.StringInput
}

func (AccessPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyAssignmentArgs)(nil)).Elem()
}

type AccessPolicyAssignmentInput interface {
	pulumi.Input

	ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput
	ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput
}

func (*AccessPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyAssignment)(nil)).Elem()
}

func (i *AccessPolicyAssignment) ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput {
	return i.ToAccessPolicyAssignmentOutputWithContext(context.Background())
}

func (i *AccessPolicyAssignment) ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyAssignmentOutput)
}

// AccessPolicyAssignmentArrayInput is an input type that accepts AccessPolicyAssignmentArray and AccessPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `AccessPolicyAssignmentArrayInput` via:
//
//	AccessPolicyAssignmentArray{ AccessPolicyAssignmentArgs{...} }
type AccessPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToAccessPolicyAssignmentArrayOutput() AccessPolicyAssignmentArrayOutput
	ToAccessPolicyAssignmentArrayOutputWithContext(context.Context) AccessPolicyAssignmentArrayOutput
}

type AccessPolicyAssignmentArray []AccessPolicyAssignmentInput

func (AccessPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyAssignment)(nil)).Elem()
}

func (i AccessPolicyAssignmentArray) ToAccessPolicyAssignmentArrayOutput() AccessPolicyAssignmentArrayOutput {
	return i.ToAccessPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i AccessPolicyAssignmentArray) ToAccessPolicyAssignmentArrayOutputWithContext(ctx context.Context) AccessPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyAssignmentArrayOutput)
}

// AccessPolicyAssignmentMapInput is an input type that accepts AccessPolicyAssignmentMap and AccessPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `AccessPolicyAssignmentMapInput` via:
//
//	AccessPolicyAssignmentMap{ "key": AccessPolicyAssignmentArgs{...} }
type AccessPolicyAssignmentMapInput interface {
	pulumi.Input

	ToAccessPolicyAssignmentMapOutput() AccessPolicyAssignmentMapOutput
	ToAccessPolicyAssignmentMapOutputWithContext(context.Context) AccessPolicyAssignmentMapOutput
}

type AccessPolicyAssignmentMap map[string]AccessPolicyAssignmentInput

func (AccessPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyAssignment)(nil)).Elem()
}

func (i AccessPolicyAssignmentMap) ToAccessPolicyAssignmentMapOutput() AccessPolicyAssignmentMapOutput {
	return i.ToAccessPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i AccessPolicyAssignmentMap) ToAccessPolicyAssignmentMapOutputWithContext(ctx context.Context) AccessPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyAssignmentMapOutput)
}

type AccessPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (AccessPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyAssignment)(nil)).Elem()
}

func (o AccessPolicyAssignmentOutput) ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput {
	return o
}

func (o AccessPolicyAssignmentOutput) ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput {
	return o
}

// The application ID; this value is immutable and can not be updated.
func (o AccessPolicyAssignmentOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The access policy ID.
func (o AccessPolicyAssignmentOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

type AccessPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AccessPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyAssignment)(nil)).Elem()
}

func (o AccessPolicyAssignmentArrayOutput) ToAccessPolicyAssignmentArrayOutput() AccessPolicyAssignmentArrayOutput {
	return o
}

func (o AccessPolicyAssignmentArrayOutput) ToAccessPolicyAssignmentArrayOutputWithContext(ctx context.Context) AccessPolicyAssignmentArrayOutput {
	return o
}

func (o AccessPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) AccessPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPolicyAssignment {
		return vs[0].([]*AccessPolicyAssignment)[vs[1].(int)]
	}).(AccessPolicyAssignmentOutput)
}

type AccessPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (AccessPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyAssignment)(nil)).Elem()
}

func (o AccessPolicyAssignmentMapOutput) ToAccessPolicyAssignmentMapOutput() AccessPolicyAssignmentMapOutput {
	return o
}

func (o AccessPolicyAssignmentMapOutput) ToAccessPolicyAssignmentMapOutputWithContext(ctx context.Context) AccessPolicyAssignmentMapOutput {
	return o
}

func (o AccessPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) AccessPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPolicyAssignment {
		return vs[0].(map[string]*AccessPolicyAssignment)[vs[1].(string)]
	}).(AccessPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyAssignmentInput)(nil)).Elem(), &AccessPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyAssignmentArrayInput)(nil)).Elem(), AccessPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyAssignmentMapInput)(nil)).Elem(), AccessPolicyAssignmentMap{})
	pulumi.RegisterOutputType(AccessPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(AccessPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AccessPolicyAssignmentMapOutput{})
}
