// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get an application of any kind from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := app.GetApp(ctx, &app.GetAppArgs{
//				Label: pulumi.StringRef("Example App"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetApp(ctx *pulumi.Context, args *GetAppArgs, opts ...pulumi.InvokeOption) (*GetAppResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAppResult
	err := ctx.Invoke("okta:app/getApp:getApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApp.
type GetAppArgs struct {
	// Search only ACTIVE applications.
	ActiveOnly *bool `pulumi:"activeOnly"`
	// Id of application to retrieve, conflicts with label and label_prefix.
	Id *string `pulumi:"id"`
	// The label of the app to retrieve, conflicts with
	// labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
	// Okta's List Apps API. The API will search both name and label using that
	// query. Therefore similarily named and labeled apps may be returned in the query
	// and have the unitended result of associating the wrong app with this data
	// source. See:
	// [https://developer.okta.com/docs/reference/api/apps/#list-applications](https://developer.okta.com/docs/reference/api/apps/#list-applications)
	Label *string `pulumi:"label"`
	// Label prefix of the app to retrieve, conflicts with label and id. This will tell the
	// provider to do a starts with query as opposed to an equals query.
	LabelPrefix *string `pulumi:"labelPrefix"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	//
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups *bool `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	//
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers *bool `pulumi:"skipUsers"`
}

// A collection of values returned by getApp.
type GetAppResult struct {
	// Search only ACTIVE applications.
	ActiveOnly *bool `pulumi:"activeOnly"`
	// Groups associated with the application
	//
	// Deprecated: The `groups` field is now deprecated for the data source `app.getApp`, please replace all uses of this with: `AppGroupAssignments`
	Groups []string `pulumi:"groups"`
	// Id of application to retrieve, conflicts with label and label_prefix.
	Id *string `pulumi:"id"`
	// The label of the app to retrieve, conflicts with
	// labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
	// Okta's List Apps API. The API will search both name and label using that
	// query. Therefore similarily named and labeled apps may be returned in the query
	// and have the unitended result of associating the wrong app with this data
	// source. See:
	// [https://developer.okta.com/docs/reference/api/apps/#list-applications](https://developer.okta.com/docs/reference/api/apps/#list-applications)
	Label *string `pulumi:"label"`
	// Label prefix of the app to retrieve, conflicts with label and id. This will tell the
	// provider to do a starts with query as opposed to an equals query.
	LabelPrefix *string `pulumi:"labelPrefix"`
	// Discoverable resources related to the app
	Links string `pulumi:"links"`
	// Name of application.
	Name string `pulumi:"name"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	//
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups *bool `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	//
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers *bool `pulumi:"skipUsers"`
	// Status of application.
	Status string `pulumi:"status"`
	// Users associated with the application
	//
	// Deprecated: The `users` field is now deprecated for the data source `app.getApp`, please replace all uses of this with: `getAppUserAssignments`
	Users []string `pulumi:"users"`
}

func GetAppOutput(ctx *pulumi.Context, args GetAppOutputArgs, opts ...pulumi.InvokeOption) GetAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAppResult, error) {
			args := v.(GetAppArgs)
			r, err := GetApp(ctx, &args, opts...)
			var s GetAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAppResultOutput)
}

// A collection of arguments for invoking getApp.
type GetAppOutputArgs struct {
	// Search only ACTIVE applications.
	ActiveOnly pulumi.BoolPtrInput `pulumi:"activeOnly"`
	// Id of application to retrieve, conflicts with label and label_prefix.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The label of the app to retrieve, conflicts with
	// labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
	// Okta's List Apps API. The API will search both name and label using that
	// query. Therefore similarily named and labeled apps may be returned in the query
	// and have the unitended result of associating the wrong app with this data
	// source. See:
	// [https://developer.okta.com/docs/reference/api/apps/#list-applications](https://developer.okta.com/docs/reference/api/apps/#list-applications)
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Label prefix of the app to retrieve, conflicts with label and id. This will tell the
	// provider to do a starts with query as opposed to an equals query.
	LabelPrefix pulumi.StringPtrInput `pulumi:"labelPrefix"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	//
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups pulumi.BoolPtrInput `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	//
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers pulumi.BoolPtrInput `pulumi:"skipUsers"`
}

func (GetAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppArgs)(nil)).Elem()
}

// A collection of values returned by getApp.
type GetAppResultOutput struct{ *pulumi.OutputState }

func (GetAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppResult)(nil)).Elem()
}

func (o GetAppResultOutput) ToGetAppResultOutput() GetAppResultOutput {
	return o
}

func (o GetAppResultOutput) ToGetAppResultOutputWithContext(ctx context.Context) GetAppResultOutput {
	return o
}

// Search only ACTIVE applications.
func (o GetAppResultOutput) ActiveOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppResult) *bool { return v.ActiveOnly }).(pulumi.BoolPtrOutput)
}

// Groups associated with the application
//
// Deprecated: The `groups` field is now deprecated for the data source `app.getApp`, please replace all uses of this with: `AppGroupAssignments`
func (o GetAppResultOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppResult) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Id of application to retrieve, conflicts with label and label_prefix.
func (o GetAppResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The label of the app to retrieve, conflicts with
// labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
// Okta's List Apps API. The API will search both name and label using that
// query. Therefore similarily named and labeled apps may be returned in the query
// and have the unitended result of associating the wrong app with this data
// source. See:
// [https://developer.okta.com/docs/reference/api/apps/#list-applications](https://developer.okta.com/docs/reference/api/apps/#list-applications)
func (o GetAppResultOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppResult) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Label prefix of the app to retrieve, conflicts with label and id. This will tell the
// provider to do a starts with query as opposed to an equals query.
func (o GetAppResultOutput) LabelPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppResult) *string { return v.LabelPrefix }).(pulumi.StringPtrOutput)
}

// Discoverable resources related to the app
func (o GetAppResultOutput) Links() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppResult) string { return v.Links }).(pulumi.StringOutput)
}

// Name of application.
func (o GetAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
//
// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
func (o GetAppResultOutput) SkipGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppResult) *bool { return v.SkipGroups }).(pulumi.BoolPtrOutput)
}

// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
//
// Deprecated: Because users has been removed, this attribute is a no op and will be removed
func (o GetAppResultOutput) SkipUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppResult) *bool { return v.SkipUsers }).(pulumi.BoolPtrOutput)
}

// Status of application.
func (o GetAppResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppResult) string { return v.Status }).(pulumi.StringOutput)
}

// Users associated with the application
//
// Deprecated: The `users` field is now deprecated for the data source `app.getApp`, please replace all uses of this with: `getAppUserAssignments`
func (o GetAppResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAppResultOutput{})
}
