// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an SWA Application.
//
// This resource allows you to create and configure an SWA Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/app"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := app.NewSwa(ctx, "example", &app.SwaArgs{
// 			ButtonField:   pulumi.String("btn-login"),
// 			Label:         pulumi.String("example"),
// 			PasswordField: pulumi.String("txtbox-password"),
// 			Url:           pulumi.String("https://example.com/login.html"),
// 			UsernameField: pulumi.String("txtbox-username"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Okta SWA App can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:app/swa:Swa example <app id>
// ```
type Swa struct {
	pulumi.CustomResourceState

	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Enable self service. By default it is `false`.
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// Login button field.
	ButtonField pulumi.StringPtrOutput `pulumi:"buttonField"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// The display name of the Application.
	Label pulumi.StringOutput `pulumi:"label"`
	// Name assigned to the application by Okta.
	Name pulumi.StringOutput `pulumi:"name"`
	// Login password field.
	PasswordField pulumi.StringPtrOutput `pulumi:"passwordField"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrOutput `pulumi:"preconfiguredApp"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Status of application. By default it is `"ACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Login URL.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// A regex that further restricts URL to the specified regex.
	UrlRegex pulumi.StringPtrOutput `pulumi:"urlRegex"`
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField pulumi.StringPtrOutput `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users SwaUserArrayOutput `pulumi:"users"`
}

// NewSwa registers a new resource with the given unique name, arguments, and options.
func NewSwa(ctx *pulumi.Context,
	name string, args *SwaArgs, opts ...pulumi.ResourceOption) (*Swa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	var resource Swa
	err := ctx.RegisterResource("okta:app/swa:Swa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwa gets an existing Swa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwaState, opts ...pulumi.ResourceOption) (*Swa, error) {
	var resource Swa
	err := ctx.ReadResource("okta:app/swa:Swa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Swa resources.
type swaState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Enable self service. By default it is `false`.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Login button field.
	ButtonField *string `pulumi:"buttonField"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb *bool `pulumi:"hideWeb"`
	// The display name of the Application.
	Label *string `pulumi:"label"`
	// Name assigned to the application by Okta.
	Name *string `pulumi:"name"`
	// Login password field.
	PasswordField *string `pulumi:"passwordField"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Status of application. By default it is `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// Login URL.
	Url *string `pulumi:"url"`
	// A regex that further restricts URL to the specified regex.
	UrlRegex *string `pulumi:"urlRegex"`
	// The default username assigned to each user.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField *string `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users []SwaUser `pulumi:"users"`
}

type SwaState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Enable self service. By default it is `false`.
	AccessibilitySelfService pulumi.BoolPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Login button field.
	ButtonField pulumi.StringPtrInput
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrInput
	// The display name of the Application.
	Label pulumi.StringPtrInput
	// Name assigned to the application by Okta.
	Name pulumi.StringPtrInput
	// Login password field.
	PasswordField pulumi.StringPtrInput
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Status of application. By default it is `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// Login URL.
	Url pulumi.StringPtrInput
	// A regex that further restricts URL to the specified regex.
	UrlRegex pulumi.StringPtrInput
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field.
	UsernameField pulumi.StringPtrInput
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users SwaUserArrayInput
}

func (SwaState) ElementType() reflect.Type {
	return reflect.TypeOf((*swaState)(nil)).Elem()
}

type swaArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Enable self service. By default it is `false`.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Login button field.
	ButtonField *string `pulumi:"buttonField"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb *bool `pulumi:"hideWeb"`
	// The display name of the Application.
	Label string `pulumi:"label"`
	// Login password field.
	PasswordField *string `pulumi:"passwordField"`
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// Status of application. By default it is `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// Login URL.
	Url *string `pulumi:"url"`
	// A regex that further restricts URL to the specified regex.
	UrlRegex *string `pulumi:"urlRegex"`
	// The default username assigned to each user.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField *string `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users []SwaUser `pulumi:"users"`
}

// The set of arguments for constructing a Swa resource.
type SwaArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Enable self service. By default it is `false`.
	AccessibilitySelfService pulumi.BoolPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Login button field.
	ButtonField pulumi.StringPtrInput
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrInput
	// The display name of the Application.
	Label pulumi.StringInput
	// Login password field.
	PasswordField pulumi.StringPtrInput
	// name of application from the Okta Integration Network, if not included a custom app will be created.
	PreconfiguredApp pulumi.StringPtrInput
	// Status of application. By default it is `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// Login URL.
	Url pulumi.StringPtrInput
	// A regex that further restricts URL to the specified regex.
	UrlRegex pulumi.StringPtrInput
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field.
	UsernameField pulumi.StringPtrInput
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users SwaUserArrayInput
}

func (SwaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*swaArgs)(nil)).Elem()
}

type SwaInput interface {
	pulumi.Input

	ToSwaOutput() SwaOutput
	ToSwaOutputWithContext(ctx context.Context) SwaOutput
}

func (*Swa) ElementType() reflect.Type {
	return reflect.TypeOf((*Swa)(nil))
}

func (i *Swa) ToSwaOutput() SwaOutput {
	return i.ToSwaOutputWithContext(context.Background())
}

func (i *Swa) ToSwaOutputWithContext(ctx context.Context) SwaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwaOutput)
}

type SwaOutput struct {
	*pulumi.OutputState
}

func (SwaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Swa)(nil))
}

func (o SwaOutput) ToSwaOutput() SwaOutput {
	return o
}

func (o SwaOutput) ToSwaOutputWithContext(ctx context.Context) SwaOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SwaOutput{})
}
