// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve an OIDC application from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := app.GetOauth(ctx, &app.GetOauthArgs{
//				Label: pulumi.StringRef("Example App"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOauth(ctx *pulumi.Context, args *GetOauthArgs, opts ...pulumi.InvokeOption) (*GetOauthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOauthResult
	err := ctx.Invoke("okta:app/getOauth:getOauth", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOauth.
type GetOauthArgs struct {
	// tells the provider to query for only `ACTIVE` applications.
	ActiveOnly *bool `pulumi:"activeOnly"`
	// `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
	Id *string `pulumi:"id"`
	// The label of the app to retrieve, conflicts with
	// `labelPrefix` and `id`. Label uses the `?q=<label>` query parameter exposed by
	// Okta's List Apps API. The API will search both `name` and `label` using that
	// query. Therefore similarily named and labeled apps may be returned in the query
	// and have the unitended result of associating the wrong app with this data
	// source. See:
	// https://developer.okta.com/docs/reference/api/apps/#list-applications
	Label *string `pulumi:"label"`
	// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
	// provider to do a `starts with` query as opposed to an `equals` query.
	LabelPrefix *string `pulumi:"labelPrefix"`
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups *bool `pulumi:"skipGroups"`
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers *bool `pulumi:"skipUsers"`
}

// A collection of values returned by getOauth.
type GetOauthResult struct {
	ActiveOnly *bool `pulumi:"activeOnly"`
	// Display auto submit toolbar.
	AutoSubmitToolbar bool `pulumi:"autoSubmitToolbar"`
	// OAuth client ID. If set during creation, app is created with this id.
	ClientId string `pulumi:"clientId"`
	// The latest active client secret of the application. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
	ClientSecret string `pulumi:"clientSecret"`
	// URI to a web page providing information about the client.
	ClientUri string `pulumi:"clientUri"`
	// List of OAuth 2.0 grant types.
	GrantTypes []string `pulumi:"grantTypes"`
	// Do not display application icon on mobile app.
	HideIos bool `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb bool `pulumi:"hideWeb"`
	// ID of application.
	Id *string `pulumi:"id"`
	// Label of application.
	Label       *string `pulumi:"label"`
	LabelPrefix *string `pulumi:"labelPrefix"`
	// generic JSON containing discoverable resources related to the app
	Links string `pulumi:"links"`
	// The type of Idp-Initiated login that the client supports, if any.
	LoginMode string `pulumi:"loginMode"`
	// List of scopes to use for the request.
	LoginScopes []string `pulumi:"loginScopes"`
	// URI that initiates login.
	LoginUri string `pulumi:"loginUri"`
	// URI that references a logo for the client.
	LogoUri string `pulumi:"logoUri"`
	// Name of application.
	Name string `pulumi:"name"`
	// URI to web page providing client policy document.
	PolicyUri string `pulumi:"policyUri"`
	// List of URIs for redirection after logout.
	PostLogoutRedirectUris []string `pulumi:"postLogoutRedirectUris"`
	// List of URIs for use in the redirect-based flow.
	RedirectUris []string `pulumi:"redirectUris"`
	// List of OAuth 2.0 response type strings.
	ResponseTypes []string `pulumi:"responseTypes"`
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups *bool `pulumi:"skipGroups"`
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers *bool `pulumi:"skipUsers"`
	// Status of application.
	Status string `pulumi:"status"`
	// The type of OAuth application.
	Type             string `pulumi:"type"`
	WildcardRedirect string `pulumi:"wildcardRedirect"`
}

func GetOauthOutput(ctx *pulumi.Context, args GetOauthOutputArgs, opts ...pulumi.InvokeOption) GetOauthResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetOauthResult, error) {
			args := v.(GetOauthArgs)
			r, err := GetOauth(ctx, &args, opts...)
			var s GetOauthResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetOauthResultOutput)
}

// A collection of arguments for invoking getOauth.
type GetOauthOutputArgs struct {
	// tells the provider to query for only `ACTIVE` applications.
	ActiveOnly pulumi.BoolPtrInput `pulumi:"activeOnly"`
	// `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The label of the app to retrieve, conflicts with
	// `labelPrefix` and `id`. Label uses the `?q=<label>` query parameter exposed by
	// Okta's List Apps API. The API will search both `name` and `label` using that
	// query. Therefore similarily named and labeled apps may be returned in the query
	// and have the unitended result of associating the wrong app with this data
	// source. See:
	// https://developer.okta.com/docs/reference/api/apps/#list-applications
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
	// provider to do a `starts with` query as opposed to an `equals` query.
	LabelPrefix pulumi.StringPtrInput `pulumi:"labelPrefix"`
	// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
	SkipGroups pulumi.BoolPtrInput `pulumi:"skipGroups"`
	// Deprecated: Because users has been removed, this attribute is a no op and will be removed
	SkipUsers pulumi.BoolPtrInput `pulumi:"skipUsers"`
}

func (GetOauthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOauthArgs)(nil)).Elem()
}

// A collection of values returned by getOauth.
type GetOauthResultOutput struct{ *pulumi.OutputState }

func (GetOauthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOauthResult)(nil)).Elem()
}

func (o GetOauthResultOutput) ToGetOauthResultOutput() GetOauthResultOutput {
	return o
}

func (o GetOauthResultOutput) ToGetOauthResultOutputWithContext(ctx context.Context) GetOauthResultOutput {
	return o
}

func (o GetOauthResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetOauthResult] {
	return pulumix.Output[GetOauthResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOauthResultOutput) ActiveOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *bool { return v.ActiveOnly }).(pulumi.BoolPtrOutput)
}

// Display auto submit toolbar.
func (o GetOauthResultOutput) AutoSubmitToolbar() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOauthResult) bool { return v.AutoSubmitToolbar }).(pulumi.BoolOutput)
}

// OAuth client ID. If set during creation, app is created with this id.
func (o GetOauthResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// The latest active client secret of the application. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
func (o GetOauthResultOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// URI to a web page providing information about the client.
func (o GetOauthResultOutput) ClientUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.ClientUri }).(pulumi.StringOutput)
}

// List of OAuth 2.0 grant types.
func (o GetOauthResultOutput) GrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthResult) []string { return v.GrantTypes }).(pulumi.StringArrayOutput)
}

// Do not display application icon on mobile app.
func (o GetOauthResultOutput) HideIos() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOauthResult) bool { return v.HideIos }).(pulumi.BoolOutput)
}

// Do not display application icon to users.
func (o GetOauthResultOutput) HideWeb() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOauthResult) bool { return v.HideWeb }).(pulumi.BoolOutput)
}

// ID of application.
func (o GetOauthResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Label of application.
func (o GetOauthResultOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o GetOauthResultOutput) LabelPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *string { return v.LabelPrefix }).(pulumi.StringPtrOutput)
}

// generic JSON containing discoverable resources related to the app
func (o GetOauthResultOutput) Links() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.Links }).(pulumi.StringOutput)
}

// The type of Idp-Initiated login that the client supports, if any.
func (o GetOauthResultOutput) LoginMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.LoginMode }).(pulumi.StringOutput)
}

// List of scopes to use for the request.
func (o GetOauthResultOutput) LoginScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthResult) []string { return v.LoginScopes }).(pulumi.StringArrayOutput)
}

// URI that initiates login.
func (o GetOauthResultOutput) LoginUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.LoginUri }).(pulumi.StringOutput)
}

// URI that references a logo for the client.
func (o GetOauthResultOutput) LogoUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.LogoUri }).(pulumi.StringOutput)
}

// Name of application.
func (o GetOauthResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.Name }).(pulumi.StringOutput)
}

// URI to web page providing client policy document.
func (o GetOauthResultOutput) PolicyUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.PolicyUri }).(pulumi.StringOutput)
}

// List of URIs for redirection after logout.
func (o GetOauthResultOutput) PostLogoutRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthResult) []string { return v.PostLogoutRedirectUris }).(pulumi.StringArrayOutput)
}

// List of URIs for use in the redirect-based flow.
func (o GetOauthResultOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthResult) []string { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

// List of OAuth 2.0 response type strings.
func (o GetOauthResultOutput) ResponseTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthResult) []string { return v.ResponseTypes }).(pulumi.StringArrayOutput)
}

// Deprecated: Because groups has been removed, this attribute is a no op and will be removed
func (o GetOauthResultOutput) SkipGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *bool { return v.SkipGroups }).(pulumi.BoolPtrOutput)
}

// Deprecated: Because users has been removed, this attribute is a no op and will be removed
func (o GetOauthResultOutput) SkipUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetOauthResult) *bool { return v.SkipUsers }).(pulumi.BoolPtrOutput)
}

// Status of application.
func (o GetOauthResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of OAuth application.
func (o GetOauthResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetOauthResultOutput) WildcardRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthResult) string { return v.WildcardRedirect }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOauthResultOutput{})
}
