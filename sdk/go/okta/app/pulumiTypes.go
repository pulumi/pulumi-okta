// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type OAuthGroupsClaim struct {
	// Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
	FilterType *string `pulumi:"filterType"`
	// Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	// Valid values: `"CUSTOM_URL"`,`"ORG_URL"` or `"DYNAMIC"`. Default is `"ORG_URL"`.
	IssuerMode *string `pulumi:"issuerMode"`
	// Name of the claim that will be used in the token.
	Name string `pulumi:"name"`
	// The type of OAuth application. Valid values: `"web"`, `"native"`, `"browser"`, `"service"`. For SPA apps use `browser`.
	Type string `pulumi:"type"`
	// Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
	Value string `pulumi:"value"`
}

// OAuthGroupsClaimInput is an input type that accepts OAuthGroupsClaimArgs and OAuthGroupsClaimOutput values.
// You can construct a concrete instance of `OAuthGroupsClaimInput` via:
//
//	OAuthGroupsClaimArgs{...}
type OAuthGroupsClaimInput interface {
	pulumi.Input

	ToOAuthGroupsClaimOutput() OAuthGroupsClaimOutput
	ToOAuthGroupsClaimOutputWithContext(context.Context) OAuthGroupsClaimOutput
}

type OAuthGroupsClaimArgs struct {
	// Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
	// Valid values: `"CUSTOM_URL"`,`"ORG_URL"` or `"DYNAMIC"`. Default is `"ORG_URL"`.
	IssuerMode pulumi.StringPtrInput `pulumi:"issuerMode"`
	// Name of the claim that will be used in the token.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of OAuth application. Valid values: `"web"`, `"native"`, `"browser"`, `"service"`. For SPA apps use `browser`.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OAuthGroupsClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthGroupsClaim)(nil)).Elem()
}

func (i OAuthGroupsClaimArgs) ToOAuthGroupsClaimOutput() OAuthGroupsClaimOutput {
	return i.ToOAuthGroupsClaimOutputWithContext(context.Background())
}

func (i OAuthGroupsClaimArgs) ToOAuthGroupsClaimOutputWithContext(ctx context.Context) OAuthGroupsClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthGroupsClaimOutput)
}

func (i OAuthGroupsClaimArgs) ToOAuthGroupsClaimPtrOutput() OAuthGroupsClaimPtrOutput {
	return i.ToOAuthGroupsClaimPtrOutputWithContext(context.Background())
}

func (i OAuthGroupsClaimArgs) ToOAuthGroupsClaimPtrOutputWithContext(ctx context.Context) OAuthGroupsClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthGroupsClaimOutput).ToOAuthGroupsClaimPtrOutputWithContext(ctx)
}

// OAuthGroupsClaimPtrInput is an input type that accepts OAuthGroupsClaimArgs, OAuthGroupsClaimPtr and OAuthGroupsClaimPtrOutput values.
// You can construct a concrete instance of `OAuthGroupsClaimPtrInput` via:
//
//	        OAuthGroupsClaimArgs{...}
//
//	or:
//
//	        nil
type OAuthGroupsClaimPtrInput interface {
	pulumi.Input

	ToOAuthGroupsClaimPtrOutput() OAuthGroupsClaimPtrOutput
	ToOAuthGroupsClaimPtrOutputWithContext(context.Context) OAuthGroupsClaimPtrOutput
}

type oauthGroupsClaimPtrType OAuthGroupsClaimArgs

func OAuthGroupsClaimPtr(v *OAuthGroupsClaimArgs) OAuthGroupsClaimPtrInput {
	return (*oauthGroupsClaimPtrType)(v)
}

func (*oauthGroupsClaimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthGroupsClaim)(nil)).Elem()
}

func (i *oauthGroupsClaimPtrType) ToOAuthGroupsClaimPtrOutput() OAuthGroupsClaimPtrOutput {
	return i.ToOAuthGroupsClaimPtrOutputWithContext(context.Background())
}

func (i *oauthGroupsClaimPtrType) ToOAuthGroupsClaimPtrOutputWithContext(ctx context.Context) OAuthGroupsClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthGroupsClaimPtrOutput)
}

type OAuthGroupsClaimOutput struct{ *pulumi.OutputState }

func (OAuthGroupsClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthGroupsClaim)(nil)).Elem()
}

func (o OAuthGroupsClaimOutput) ToOAuthGroupsClaimOutput() OAuthGroupsClaimOutput {
	return o
}

func (o OAuthGroupsClaimOutput) ToOAuthGroupsClaimOutputWithContext(ctx context.Context) OAuthGroupsClaimOutput {
	return o
}

func (o OAuthGroupsClaimOutput) ToOAuthGroupsClaimPtrOutput() OAuthGroupsClaimPtrOutput {
	return o.ToOAuthGroupsClaimPtrOutputWithContext(context.Background())
}

func (o OAuthGroupsClaimOutput) ToOAuthGroupsClaimPtrOutputWithContext(ctx context.Context) OAuthGroupsClaimPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OAuthGroupsClaim) *OAuthGroupsClaim {
		return &v
	}).(OAuthGroupsClaimPtrOutput)
}

// Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
func (o OAuthGroupsClaimOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthGroupsClaim) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
// Valid values: `"CUSTOM_URL"`,`"ORG_URL"` or `"DYNAMIC"`. Default is `"ORG_URL"`.
func (o OAuthGroupsClaimOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthGroupsClaim) *string { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

// Name of the claim that will be used in the token.
func (o OAuthGroupsClaimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthGroupsClaim) string { return v.Name }).(pulumi.StringOutput)
}

// The type of OAuth application. Valid values: `"web"`, `"native"`, `"browser"`, `"service"`. For SPA apps use `browser`.
func (o OAuthGroupsClaimOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthGroupsClaim) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
func (o OAuthGroupsClaimOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthGroupsClaim) string { return v.Value }).(pulumi.StringOutput)
}

type OAuthGroupsClaimPtrOutput struct{ *pulumi.OutputState }

func (OAuthGroupsClaimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthGroupsClaim)(nil)).Elem()
}

func (o OAuthGroupsClaimPtrOutput) ToOAuthGroupsClaimPtrOutput() OAuthGroupsClaimPtrOutput {
	return o
}

func (o OAuthGroupsClaimPtrOutput) ToOAuthGroupsClaimPtrOutputWithContext(ctx context.Context) OAuthGroupsClaimPtrOutput {
	return o
}

func (o OAuthGroupsClaimPtrOutput) Elem() OAuthGroupsClaimOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) OAuthGroupsClaim {
		if v != nil {
			return *v
		}
		var ret OAuthGroupsClaim
		return ret
	}).(OAuthGroupsClaimOutput)
}

// Groups claim filter. Can only be set if type is `"FILTER"`. Valid values: `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`, `"REGEX"`.
func (o OAuthGroupsClaimPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) *string {
		if v == nil {
			return nil
		}
		return v.FilterType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
// Valid values: `"CUSTOM_URL"`,`"ORG_URL"` or `"DYNAMIC"`. Default is `"ORG_URL"`.
func (o OAuthGroupsClaimPtrOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) *string {
		if v == nil {
			return nil
		}
		return v.IssuerMode
	}).(pulumi.StringPtrOutput)
}

// Name of the claim that will be used in the token.
func (o OAuthGroupsClaimPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of OAuth application. Valid values: `"web"`, `"native"`, `"browser"`, `"service"`. For SPA apps use `browser`.
func (o OAuthGroupsClaimPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
func (o OAuthGroupsClaimPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthGroupsClaim) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type OAuthJwk struct {
	E   *string `pulumi:"e"`
	Kid string  `pulumi:"kid"`
	Kty string  `pulumi:"kty"`
	N   *string `pulumi:"n"`
	X   *string `pulumi:"x"`
	Y   *string `pulumi:"y"`
}

// OAuthJwkInput is an input type that accepts OAuthJwkArgs and OAuthJwkOutput values.
// You can construct a concrete instance of `OAuthJwkInput` via:
//
//	OAuthJwkArgs{...}
type OAuthJwkInput interface {
	pulumi.Input

	ToOAuthJwkOutput() OAuthJwkOutput
	ToOAuthJwkOutputWithContext(context.Context) OAuthJwkOutput
}

type OAuthJwkArgs struct {
	E   pulumi.StringPtrInput `pulumi:"e"`
	Kid pulumi.StringInput    `pulumi:"kid"`
	Kty pulumi.StringInput    `pulumi:"kty"`
	N   pulumi.StringPtrInput `pulumi:"n"`
	X   pulumi.StringPtrInput `pulumi:"x"`
	Y   pulumi.StringPtrInput `pulumi:"y"`
}

func (OAuthJwkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthJwk)(nil)).Elem()
}

func (i OAuthJwkArgs) ToOAuthJwkOutput() OAuthJwkOutput {
	return i.ToOAuthJwkOutputWithContext(context.Background())
}

func (i OAuthJwkArgs) ToOAuthJwkOutputWithContext(ctx context.Context) OAuthJwkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthJwkOutput)
}

// OAuthJwkArrayInput is an input type that accepts OAuthJwkArray and OAuthJwkArrayOutput values.
// You can construct a concrete instance of `OAuthJwkArrayInput` via:
//
//	OAuthJwkArray{ OAuthJwkArgs{...} }
type OAuthJwkArrayInput interface {
	pulumi.Input

	ToOAuthJwkArrayOutput() OAuthJwkArrayOutput
	ToOAuthJwkArrayOutputWithContext(context.Context) OAuthJwkArrayOutput
}

type OAuthJwkArray []OAuthJwkInput

func (OAuthJwkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OAuthJwk)(nil)).Elem()
}

func (i OAuthJwkArray) ToOAuthJwkArrayOutput() OAuthJwkArrayOutput {
	return i.ToOAuthJwkArrayOutputWithContext(context.Background())
}

func (i OAuthJwkArray) ToOAuthJwkArrayOutputWithContext(ctx context.Context) OAuthJwkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthJwkArrayOutput)
}

type OAuthJwkOutput struct{ *pulumi.OutputState }

func (OAuthJwkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthJwk)(nil)).Elem()
}

func (o OAuthJwkOutput) ToOAuthJwkOutput() OAuthJwkOutput {
	return o
}

func (o OAuthJwkOutput) ToOAuthJwkOutputWithContext(ctx context.Context) OAuthJwkOutput {
	return o
}

func (o OAuthJwkOutput) E() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthJwk) *string { return v.E }).(pulumi.StringPtrOutput)
}

func (o OAuthJwkOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthJwk) string { return v.Kid }).(pulumi.StringOutput)
}

func (o OAuthJwkOutput) Kty() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthJwk) string { return v.Kty }).(pulumi.StringOutput)
}

func (o OAuthJwkOutput) N() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthJwk) *string { return v.N }).(pulumi.StringPtrOutput)
}

func (o OAuthJwkOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthJwk) *string { return v.X }).(pulumi.StringPtrOutput)
}

func (o OAuthJwkOutput) Y() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthJwk) *string { return v.Y }).(pulumi.StringPtrOutput)
}

type OAuthJwkArrayOutput struct{ *pulumi.OutputState }

func (OAuthJwkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OAuthJwk)(nil)).Elem()
}

func (o OAuthJwkArrayOutput) ToOAuthJwkArrayOutput() OAuthJwkArrayOutput {
	return o
}

func (o OAuthJwkArrayOutput) ToOAuthJwkArrayOutputWithContext(ctx context.Context) OAuthJwkArrayOutput {
	return o
}

func (o OAuthJwkArrayOutput) Index(i pulumi.IntInput) OAuthJwkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OAuthJwk {
		return vs[0].([]OAuthJwk)[vs[1].(int)]
	}).(OAuthJwkOutput)
}

type SamlAttributeStatement struct {
	// Type of group attribute filter. Valid values are: `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, or `"REGEX"`
	FilterType *string `pulumi:"filterType"`
	// Filter value to use.
	FilterValue *string `pulumi:"filterValue"`
	// The name of the attribute statement.
	Name string `pulumi:"name"`
	// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
	Namespace *string `pulumi:"namespace"`
	// The type of attribute statement value. Valid values are: `"EXPRESSION"` or `"GROUP"`. Default is `"EXPRESSION"`.
	Type *string `pulumi:"type"`
	// Array of values to use.
	Values []string `pulumi:"values"`
}

// SamlAttributeStatementInput is an input type that accepts SamlAttributeStatementArgs and SamlAttributeStatementOutput values.
// You can construct a concrete instance of `SamlAttributeStatementInput` via:
//
//	SamlAttributeStatementArgs{...}
type SamlAttributeStatementInput interface {
	pulumi.Input

	ToSamlAttributeStatementOutput() SamlAttributeStatementOutput
	ToSamlAttributeStatementOutputWithContext(context.Context) SamlAttributeStatementOutput
}

type SamlAttributeStatementArgs struct {
	// Type of group attribute filter. Valid values are: `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, or `"REGEX"`
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Filter value to use.
	FilterValue pulumi.StringPtrInput `pulumi:"filterValue"`
	// The name of the attribute statement.
	Name pulumi.StringInput `pulumi:"name"`
	// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of attribute statement value. Valid values are: `"EXPRESSION"` or `"GROUP"`. Default is `"EXPRESSION"`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Array of values to use.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SamlAttributeStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlAttributeStatement)(nil)).Elem()
}

func (i SamlAttributeStatementArgs) ToSamlAttributeStatementOutput() SamlAttributeStatementOutput {
	return i.ToSamlAttributeStatementOutputWithContext(context.Background())
}

func (i SamlAttributeStatementArgs) ToSamlAttributeStatementOutputWithContext(ctx context.Context) SamlAttributeStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAttributeStatementOutput)
}

// SamlAttributeStatementArrayInput is an input type that accepts SamlAttributeStatementArray and SamlAttributeStatementArrayOutput values.
// You can construct a concrete instance of `SamlAttributeStatementArrayInput` via:
//
//	SamlAttributeStatementArray{ SamlAttributeStatementArgs{...} }
type SamlAttributeStatementArrayInput interface {
	pulumi.Input

	ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput
	ToSamlAttributeStatementArrayOutputWithContext(context.Context) SamlAttributeStatementArrayOutput
}

type SamlAttributeStatementArray []SamlAttributeStatementInput

func (SamlAttributeStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlAttributeStatement)(nil)).Elem()
}

func (i SamlAttributeStatementArray) ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput {
	return i.ToSamlAttributeStatementArrayOutputWithContext(context.Background())
}

func (i SamlAttributeStatementArray) ToSamlAttributeStatementArrayOutputWithContext(ctx context.Context) SamlAttributeStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAttributeStatementArrayOutput)
}

type SamlAttributeStatementOutput struct{ *pulumi.OutputState }

func (SamlAttributeStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlAttributeStatement)(nil)).Elem()
}

func (o SamlAttributeStatementOutput) ToSamlAttributeStatementOutput() SamlAttributeStatementOutput {
	return o
}

func (o SamlAttributeStatementOutput) ToSamlAttributeStatementOutputWithContext(ctx context.Context) SamlAttributeStatementOutput {
	return o
}

// Type of group attribute filter. Valid values are: `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, or `"REGEX"`
func (o SamlAttributeStatementOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Filter value to use.
func (o SamlAttributeStatementOutput) FilterValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.FilterValue }).(pulumi.StringPtrOutput)
}

// The name of the attribute statement.
func (o SamlAttributeStatementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SamlAttributeStatement) string { return v.Name }).(pulumi.StringOutput)
}

// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
func (o SamlAttributeStatementOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of attribute statement value. Valid values are: `"EXPRESSION"` or `"GROUP"`. Default is `"EXPRESSION"`.
func (o SamlAttributeStatementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Array of values to use.
func (o SamlAttributeStatementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SamlAttributeStatement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SamlAttributeStatementArrayOutput struct{ *pulumi.OutputState }

func (SamlAttributeStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlAttributeStatement)(nil)).Elem()
}

func (o SamlAttributeStatementArrayOutput) ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput {
	return o
}

func (o SamlAttributeStatementArrayOutput) ToSamlAttributeStatementArrayOutputWithContext(ctx context.Context) SamlAttributeStatementArrayOutput {
	return o
}

func (o SamlAttributeStatementArrayOutput) Index(i pulumi.IntInput) SamlAttributeStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlAttributeStatement {
		return vs[0].([]SamlAttributeStatement)[vs[1].(int)]
	}).(SamlAttributeStatementOutput)
}

type SamlKey struct {
	// Date created.
	Created *string `pulumi:"created"`
	// RSA exponent.
	E *string `pulumi:"e"`
	// Date the key expires.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Key ID.
	Kid *string `pulumi:"kid"`
	// Identifies the cryptographic algorithm family used with the key.
	Kty *string `pulumi:"kty"`
	// Date the key was last updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// RSA modulus.
	N *string `pulumi:"n"`
	// Intended use of the public key.
	Use *string `pulumi:"use"`
	// X.509 certificate chain.
	X5cs []string `pulumi:"x5cs"`
	// X.509 certificate SHA-256 thumbprint.
	X5tS256 *string `pulumi:"x5tS256"`
}

// SamlKeyInput is an input type that accepts SamlKeyArgs and SamlKeyOutput values.
// You can construct a concrete instance of `SamlKeyInput` via:
//
//	SamlKeyArgs{...}
type SamlKeyInput interface {
	pulumi.Input

	ToSamlKeyOutput() SamlKeyOutput
	ToSamlKeyOutputWithContext(context.Context) SamlKeyOutput
}

type SamlKeyArgs struct {
	// Date created.
	Created pulumi.StringPtrInput `pulumi:"created"`
	// RSA exponent.
	E pulumi.StringPtrInput `pulumi:"e"`
	// Date the key expires.
	ExpiresAt pulumi.StringPtrInput `pulumi:"expiresAt"`
	// Key ID.
	Kid pulumi.StringPtrInput `pulumi:"kid"`
	// Identifies the cryptographic algorithm family used with the key.
	Kty pulumi.StringPtrInput `pulumi:"kty"`
	// Date the key was last updated.
	LastUpdated pulumi.StringPtrInput `pulumi:"lastUpdated"`
	// RSA modulus.
	N pulumi.StringPtrInput `pulumi:"n"`
	// Intended use of the public key.
	Use pulumi.StringPtrInput `pulumi:"use"`
	// X.509 certificate chain.
	X5cs pulumi.StringArrayInput `pulumi:"x5cs"`
	// X.509 certificate SHA-256 thumbprint.
	X5tS256 pulumi.StringPtrInput `pulumi:"x5tS256"`
}

func (SamlKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlKey)(nil)).Elem()
}

func (i SamlKeyArgs) ToSamlKeyOutput() SamlKeyOutput {
	return i.ToSamlKeyOutputWithContext(context.Background())
}

func (i SamlKeyArgs) ToSamlKeyOutputWithContext(ctx context.Context) SamlKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlKeyOutput)
}

// SamlKeyArrayInput is an input type that accepts SamlKeyArray and SamlKeyArrayOutput values.
// You can construct a concrete instance of `SamlKeyArrayInput` via:
//
//	SamlKeyArray{ SamlKeyArgs{...} }
type SamlKeyArrayInput interface {
	pulumi.Input

	ToSamlKeyArrayOutput() SamlKeyArrayOutput
	ToSamlKeyArrayOutputWithContext(context.Context) SamlKeyArrayOutput
}

type SamlKeyArray []SamlKeyInput

func (SamlKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlKey)(nil)).Elem()
}

func (i SamlKeyArray) ToSamlKeyArrayOutput() SamlKeyArrayOutput {
	return i.ToSamlKeyArrayOutputWithContext(context.Background())
}

func (i SamlKeyArray) ToSamlKeyArrayOutputWithContext(ctx context.Context) SamlKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlKeyArrayOutput)
}

type SamlKeyOutput struct{ *pulumi.OutputState }

func (SamlKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlKey)(nil)).Elem()
}

func (o SamlKeyOutput) ToSamlKeyOutput() SamlKeyOutput {
	return o
}

func (o SamlKeyOutput) ToSamlKeyOutputWithContext(ctx context.Context) SamlKeyOutput {
	return o
}

// Date created.
func (o SamlKeyOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.Created }).(pulumi.StringPtrOutput)
}

// RSA exponent.
func (o SamlKeyOutput) E() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.E }).(pulumi.StringPtrOutput)
}

// Date the key expires.
func (o SamlKeyOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// Key ID.
func (o SamlKeyOutput) Kid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.Kid }).(pulumi.StringPtrOutput)
}

// Identifies the cryptographic algorithm family used with the key.
func (o SamlKeyOutput) Kty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.Kty }).(pulumi.StringPtrOutput)
}

// Date the key was last updated.
func (o SamlKeyOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.LastUpdated }).(pulumi.StringPtrOutput)
}

// RSA modulus.
func (o SamlKeyOutput) N() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.N }).(pulumi.StringPtrOutput)
}

// Intended use of the public key.
func (o SamlKeyOutput) Use() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.Use }).(pulumi.StringPtrOutput)
}

// X.509 certificate chain.
func (o SamlKeyOutput) X5cs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SamlKey) []string { return v.X5cs }).(pulumi.StringArrayOutput)
}

// X.509 certificate SHA-256 thumbprint.
func (o SamlKeyOutput) X5tS256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlKey) *string { return v.X5tS256 }).(pulumi.StringPtrOutput)
}

type SamlKeyArrayOutput struct{ *pulumi.OutputState }

func (SamlKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlKey)(nil)).Elem()
}

func (o SamlKeyArrayOutput) ToSamlKeyArrayOutput() SamlKeyArrayOutput {
	return o
}

func (o SamlKeyArrayOutput) ToSamlKeyArrayOutputWithContext(ctx context.Context) SamlKeyArrayOutput {
	return o
}

func (o SamlKeyArrayOutput) Index(i pulumi.IntInput) SamlKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlKey {
		return vs[0].([]SamlKey)[vs[1].(int)]
	}).(SamlKeyOutput)
}

type GetSamlAttributeStatement struct {
	// Type of group attribute filter.
	FilterType string `pulumi:"filterType"`
	// Filter value to use.
	FilterValue string `pulumi:"filterValue"`
	// name of application.
	Name string `pulumi:"name"`
	// The attribute namespace.
	Namespace string `pulumi:"namespace"`
	// The type of attribute statement value.
	Type string `pulumi:"type"`
	// Array of values to use.
	Values []string `pulumi:"values"`
}

// GetSamlAttributeStatementInput is an input type that accepts GetSamlAttributeStatementArgs and GetSamlAttributeStatementOutput values.
// You can construct a concrete instance of `GetSamlAttributeStatementInput` via:
//
//	GetSamlAttributeStatementArgs{...}
type GetSamlAttributeStatementInput interface {
	pulumi.Input

	ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput
	ToGetSamlAttributeStatementOutputWithContext(context.Context) GetSamlAttributeStatementOutput
}

type GetSamlAttributeStatementArgs struct {
	// Type of group attribute filter.
	FilterType pulumi.StringInput `pulumi:"filterType"`
	// Filter value to use.
	FilterValue pulumi.StringInput `pulumi:"filterValue"`
	// name of application.
	Name pulumi.StringInput `pulumi:"name"`
	// The attribute namespace.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The type of attribute statement value.
	Type pulumi.StringInput `pulumi:"type"`
	// Array of values to use.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSamlAttributeStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSamlAttributeStatement)(nil)).Elem()
}

func (i GetSamlAttributeStatementArgs) ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput {
	return i.ToGetSamlAttributeStatementOutputWithContext(context.Background())
}

func (i GetSamlAttributeStatementArgs) ToGetSamlAttributeStatementOutputWithContext(ctx context.Context) GetSamlAttributeStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSamlAttributeStatementOutput)
}

// GetSamlAttributeStatementArrayInput is an input type that accepts GetSamlAttributeStatementArray and GetSamlAttributeStatementArrayOutput values.
// You can construct a concrete instance of `GetSamlAttributeStatementArrayInput` via:
//
//	GetSamlAttributeStatementArray{ GetSamlAttributeStatementArgs{...} }
type GetSamlAttributeStatementArrayInput interface {
	pulumi.Input

	ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput
	ToGetSamlAttributeStatementArrayOutputWithContext(context.Context) GetSamlAttributeStatementArrayOutput
}

type GetSamlAttributeStatementArray []GetSamlAttributeStatementInput

func (GetSamlAttributeStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSamlAttributeStatement)(nil)).Elem()
}

func (i GetSamlAttributeStatementArray) ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput {
	return i.ToGetSamlAttributeStatementArrayOutputWithContext(context.Background())
}

func (i GetSamlAttributeStatementArray) ToGetSamlAttributeStatementArrayOutputWithContext(ctx context.Context) GetSamlAttributeStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSamlAttributeStatementArrayOutput)
}

type GetSamlAttributeStatementOutput struct{ *pulumi.OutputState }

func (GetSamlAttributeStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSamlAttributeStatement)(nil)).Elem()
}

func (o GetSamlAttributeStatementOutput) ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput {
	return o
}

func (o GetSamlAttributeStatementOutput) ToGetSamlAttributeStatementOutputWithContext(ctx context.Context) GetSamlAttributeStatementOutput {
	return o
}

// Type of group attribute filter.
func (o GetSamlAttributeStatementOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.FilterType }).(pulumi.StringOutput)
}

// Filter value to use.
func (o GetSamlAttributeStatementOutput) FilterValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.FilterValue }).(pulumi.StringOutput)
}

// name of application.
func (o GetSamlAttributeStatementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.Name }).(pulumi.StringOutput)
}

// The attribute namespace.
func (o GetSamlAttributeStatementOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.Namespace }).(pulumi.StringOutput)
}

// The type of attribute statement value.
func (o GetSamlAttributeStatementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.Type }).(pulumi.StringOutput)
}

// Array of values to use.
func (o GetSamlAttributeStatementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSamlAttributeStatementArrayOutput struct{ *pulumi.OutputState }

func (GetSamlAttributeStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSamlAttributeStatement)(nil)).Elem()
}

func (o GetSamlAttributeStatementArrayOutput) ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput {
	return o
}

func (o GetSamlAttributeStatementArrayOutput) ToGetSamlAttributeStatementArrayOutputWithContext(ctx context.Context) GetSamlAttributeStatementArrayOutput {
	return o
}

func (o GetSamlAttributeStatementArrayOutput) Index(i pulumi.IntInput) GetSamlAttributeStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSamlAttributeStatement {
		return vs[0].([]GetSamlAttributeStatement)[vs[1].(int)]
	}).(GetSamlAttributeStatementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthGroupsClaimInput)(nil)).Elem(), OAuthGroupsClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthGroupsClaimPtrInput)(nil)).Elem(), OAuthGroupsClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthJwkInput)(nil)).Elem(), OAuthJwkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthJwkArrayInput)(nil)).Elem(), OAuthJwkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlAttributeStatementInput)(nil)).Elem(), SamlAttributeStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlAttributeStatementArrayInput)(nil)).Elem(), SamlAttributeStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlKeyInput)(nil)).Elem(), SamlKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlKeyArrayInput)(nil)).Elem(), SamlKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSamlAttributeStatementInput)(nil)).Elem(), GetSamlAttributeStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSamlAttributeStatementArrayInput)(nil)).Elem(), GetSamlAttributeStatementArray{})
	pulumi.RegisterOutputType(OAuthGroupsClaimOutput{})
	pulumi.RegisterOutputType(OAuthGroupsClaimPtrOutput{})
	pulumi.RegisterOutputType(OAuthJwkOutput{})
	pulumi.RegisterOutputType(OAuthJwkArrayOutput{})
	pulumi.RegisterOutputType(SamlAttributeStatementOutput{})
	pulumi.RegisterOutputType(SamlAttributeStatementArrayOutput{})
	pulumi.RegisterOutputType(SamlKeyOutput{})
	pulumi.RegisterOutputType(SamlKeyArrayOutput{})
	pulumi.RegisterOutputType(GetSamlAttributeStatementOutput{})
	pulumi.RegisterOutputType(GetSamlAttributeStatementArrayOutput{})
}
