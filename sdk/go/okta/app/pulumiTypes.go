// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AutoLoginUser struct {
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type AutoLoginUserInput interface {
	pulumi.Input

	ToAutoLoginUserOutput() AutoLoginUserOutput
	ToAutoLoginUserOutputWithContext(context.Context) AutoLoginUserOutput
}

type AutoLoginUserArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (AutoLoginUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoLoginUser)(nil)).Elem()
}

func (i AutoLoginUserArgs) ToAutoLoginUserOutput() AutoLoginUserOutput {
	return i.ToAutoLoginUserOutputWithContext(context.Background())
}

func (i AutoLoginUserArgs) ToAutoLoginUserOutputWithContext(ctx context.Context) AutoLoginUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoLoginUserOutput)
}

type AutoLoginUserArrayInput interface {
	pulumi.Input

	ToAutoLoginUserArrayOutput() AutoLoginUserArrayOutput
	ToAutoLoginUserArrayOutputWithContext(context.Context) AutoLoginUserArrayOutput
}

type AutoLoginUserArray []AutoLoginUserInput

func (AutoLoginUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoLoginUser)(nil)).Elem()
}

func (i AutoLoginUserArray) ToAutoLoginUserArrayOutput() AutoLoginUserArrayOutput {
	return i.ToAutoLoginUserArrayOutputWithContext(context.Background())
}

func (i AutoLoginUserArray) ToAutoLoginUserArrayOutputWithContext(ctx context.Context) AutoLoginUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoLoginUserArrayOutput)
}

type AutoLoginUserOutput struct{ *pulumi.OutputState }

func (AutoLoginUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoLoginUser)(nil)).Elem()
}

func (o AutoLoginUserOutput) ToAutoLoginUserOutput() AutoLoginUserOutput {
	return o
}

func (o AutoLoginUserOutput) ToAutoLoginUserOutputWithContext(ctx context.Context) AutoLoginUserOutput {
	return o
}

func (o AutoLoginUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoLoginUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o AutoLoginUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoLoginUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o AutoLoginUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoLoginUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o AutoLoginUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoLoginUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type AutoLoginUserArrayOutput struct{ *pulumi.OutputState }

func (AutoLoginUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoLoginUser)(nil)).Elem()
}

func (o AutoLoginUserArrayOutput) ToAutoLoginUserArrayOutput() AutoLoginUserArrayOutput {
	return o
}

func (o AutoLoginUserArrayOutput) ToAutoLoginUserArrayOutputWithContext(ctx context.Context) AutoLoginUserArrayOutput {
	return o
}

func (o AutoLoginUserArrayOutput) Index(i pulumi.IntInput) AutoLoginUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoLoginUser {
		return vs[0].([]AutoLoginUser)[vs[1].(int)]
	}).(AutoLoginUserOutput)
}

type BasicAuthUser struct {
	// ID of the Application.
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type BasicAuthUserInput interface {
	pulumi.Input

	ToBasicAuthUserOutput() BasicAuthUserOutput
	ToBasicAuthUserOutputWithContext(context.Context) BasicAuthUserOutput
}

type BasicAuthUserArgs struct {
	// ID of the Application.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (BasicAuthUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicAuthUser)(nil)).Elem()
}

func (i BasicAuthUserArgs) ToBasicAuthUserOutput() BasicAuthUserOutput {
	return i.ToBasicAuthUserOutputWithContext(context.Background())
}

func (i BasicAuthUserArgs) ToBasicAuthUserOutputWithContext(ctx context.Context) BasicAuthUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicAuthUserOutput)
}

type BasicAuthUserArrayInput interface {
	pulumi.Input

	ToBasicAuthUserArrayOutput() BasicAuthUserArrayOutput
	ToBasicAuthUserArrayOutputWithContext(context.Context) BasicAuthUserArrayOutput
}

type BasicAuthUserArray []BasicAuthUserInput

func (BasicAuthUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BasicAuthUser)(nil)).Elem()
}

func (i BasicAuthUserArray) ToBasicAuthUserArrayOutput() BasicAuthUserArrayOutput {
	return i.ToBasicAuthUserArrayOutputWithContext(context.Background())
}

func (i BasicAuthUserArray) ToBasicAuthUserArrayOutputWithContext(ctx context.Context) BasicAuthUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicAuthUserArrayOutput)
}

type BasicAuthUserOutput struct{ *pulumi.OutputState }

func (BasicAuthUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicAuthUser)(nil)).Elem()
}

func (o BasicAuthUserOutput) ToBasicAuthUserOutput() BasicAuthUserOutput {
	return o
}

func (o BasicAuthUserOutput) ToBasicAuthUserOutputWithContext(ctx context.Context) BasicAuthUserOutput {
	return o
}

// ID of the Application.
func (o BasicAuthUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicAuthUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o BasicAuthUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicAuthUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o BasicAuthUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicAuthUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o BasicAuthUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicAuthUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BasicAuthUserArrayOutput struct{ *pulumi.OutputState }

func (BasicAuthUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BasicAuthUser)(nil)).Elem()
}

func (o BasicAuthUserArrayOutput) ToBasicAuthUserArrayOutput() BasicAuthUserArrayOutput {
	return o
}

func (o BasicAuthUserArrayOutput) ToBasicAuthUserArrayOutputWithContext(ctx context.Context) BasicAuthUserArrayOutput {
	return o
}

func (o BasicAuthUserArrayOutput) Index(i pulumi.IntInput) BasicAuthUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BasicAuthUser {
		return vs[0].([]BasicAuthUser)[vs[1].(int)]
	}).(BasicAuthUserOutput)
}

type BookmarkUser struct {
	// ID of the Application.
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type BookmarkUserInput interface {
	pulumi.Input

	ToBookmarkUserOutput() BookmarkUserOutput
	ToBookmarkUserOutputWithContext(context.Context) BookmarkUserOutput
}

type BookmarkUserArgs struct {
	// ID of the Application.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (BookmarkUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BookmarkUser)(nil)).Elem()
}

func (i BookmarkUserArgs) ToBookmarkUserOutput() BookmarkUserOutput {
	return i.ToBookmarkUserOutputWithContext(context.Background())
}

func (i BookmarkUserArgs) ToBookmarkUserOutputWithContext(ctx context.Context) BookmarkUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BookmarkUserOutput)
}

type BookmarkUserArrayInput interface {
	pulumi.Input

	ToBookmarkUserArrayOutput() BookmarkUserArrayOutput
	ToBookmarkUserArrayOutputWithContext(context.Context) BookmarkUserArrayOutput
}

type BookmarkUserArray []BookmarkUserInput

func (BookmarkUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BookmarkUser)(nil)).Elem()
}

func (i BookmarkUserArray) ToBookmarkUserArrayOutput() BookmarkUserArrayOutput {
	return i.ToBookmarkUserArrayOutputWithContext(context.Background())
}

func (i BookmarkUserArray) ToBookmarkUserArrayOutputWithContext(ctx context.Context) BookmarkUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BookmarkUserArrayOutput)
}

type BookmarkUserOutput struct{ *pulumi.OutputState }

func (BookmarkUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BookmarkUser)(nil)).Elem()
}

func (o BookmarkUserOutput) ToBookmarkUserOutput() BookmarkUserOutput {
	return o
}

func (o BookmarkUserOutput) ToBookmarkUserOutputWithContext(ctx context.Context) BookmarkUserOutput {
	return o
}

// ID of the Application.
func (o BookmarkUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o BookmarkUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o BookmarkUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o BookmarkUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BookmarkUserArrayOutput struct{ *pulumi.OutputState }

func (BookmarkUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BookmarkUser)(nil)).Elem()
}

func (o BookmarkUserArrayOutput) ToBookmarkUserArrayOutput() BookmarkUserArrayOutput {
	return o
}

func (o BookmarkUserArrayOutput) ToBookmarkUserArrayOutputWithContext(ctx context.Context) BookmarkUserArrayOutput {
	return o
}

func (o BookmarkUserArrayOutput) Index(i pulumi.IntInput) BookmarkUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BookmarkUser {
		return vs[0].([]BookmarkUser)[vs[1].(int)]
	}).(BookmarkUserOutput)
}

type OAuthUser struct {
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type OAuthUserInput interface {
	pulumi.Input

	ToOAuthUserOutput() OAuthUserOutput
	ToOAuthUserOutputWithContext(context.Context) OAuthUserOutput
}

type OAuthUserArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (OAuthUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthUser)(nil)).Elem()
}

func (i OAuthUserArgs) ToOAuthUserOutput() OAuthUserOutput {
	return i.ToOAuthUserOutputWithContext(context.Background())
}

func (i OAuthUserArgs) ToOAuthUserOutputWithContext(ctx context.Context) OAuthUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthUserOutput)
}

type OAuthUserArrayInput interface {
	pulumi.Input

	ToOAuthUserArrayOutput() OAuthUserArrayOutput
	ToOAuthUserArrayOutputWithContext(context.Context) OAuthUserArrayOutput
}

type OAuthUserArray []OAuthUserInput

func (OAuthUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OAuthUser)(nil)).Elem()
}

func (i OAuthUserArray) ToOAuthUserArrayOutput() OAuthUserArrayOutput {
	return i.ToOAuthUserArrayOutputWithContext(context.Background())
}

func (i OAuthUserArray) ToOAuthUserArrayOutputWithContext(ctx context.Context) OAuthUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthUserArrayOutput)
}

type OAuthUserOutput struct{ *pulumi.OutputState }

func (OAuthUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthUser)(nil)).Elem()
}

func (o OAuthUserOutput) ToOAuthUserOutput() OAuthUserOutput {
	return o
}

func (o OAuthUserOutput) ToOAuthUserOutputWithContext(ctx context.Context) OAuthUserOutput {
	return o
}

func (o OAuthUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OAuthUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o OAuthUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o OAuthUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type OAuthUserArrayOutput struct{ *pulumi.OutputState }

func (OAuthUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OAuthUser)(nil)).Elem()
}

func (o OAuthUserArrayOutput) ToOAuthUserArrayOutput() OAuthUserArrayOutput {
	return o
}

func (o OAuthUserArrayOutput) ToOAuthUserArrayOutputWithContext(ctx context.Context) OAuthUserArrayOutput {
	return o
}

func (o OAuthUserArrayOutput) Index(i pulumi.IntInput) OAuthUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OAuthUser {
		return vs[0].([]OAuthUser)[vs[1].(int)]
	}).(OAuthUserOutput)
}

type SamlAttributeStatement struct {
	// Type of group attribute filter.
	FilterType *string `pulumi:"filterType"`
	// Filter value to use.
	FilterValue *string `pulumi:"filterValue"`
	// The name of the attribute statement.
	Name string `pulumi:"name"`
	// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
	Namespace *string `pulumi:"namespace"`
	// The type of attribute statement value. Can be `"EXPRESSION"` or `"GROUP"`.
	Type *string `pulumi:"type"`
	// Array of values to use.
	Values []string `pulumi:"values"`
}

type SamlAttributeStatementInput interface {
	pulumi.Input

	ToSamlAttributeStatementOutput() SamlAttributeStatementOutput
	ToSamlAttributeStatementOutputWithContext(context.Context) SamlAttributeStatementOutput
}

type SamlAttributeStatementArgs struct {
	// Type of group attribute filter.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Filter value to use.
	FilterValue pulumi.StringPtrInput `pulumi:"filterValue"`
	// The name of the attribute statement.
	Name pulumi.StringInput `pulumi:"name"`
	// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of attribute statement value. Can be `"EXPRESSION"` or `"GROUP"`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Array of values to use.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SamlAttributeStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlAttributeStatement)(nil)).Elem()
}

func (i SamlAttributeStatementArgs) ToSamlAttributeStatementOutput() SamlAttributeStatementOutput {
	return i.ToSamlAttributeStatementOutputWithContext(context.Background())
}

func (i SamlAttributeStatementArgs) ToSamlAttributeStatementOutputWithContext(ctx context.Context) SamlAttributeStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAttributeStatementOutput)
}

type SamlAttributeStatementArrayInput interface {
	pulumi.Input

	ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput
	ToSamlAttributeStatementArrayOutputWithContext(context.Context) SamlAttributeStatementArrayOutput
}

type SamlAttributeStatementArray []SamlAttributeStatementInput

func (SamlAttributeStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlAttributeStatement)(nil)).Elem()
}

func (i SamlAttributeStatementArray) ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput {
	return i.ToSamlAttributeStatementArrayOutputWithContext(context.Background())
}

func (i SamlAttributeStatementArray) ToSamlAttributeStatementArrayOutputWithContext(ctx context.Context) SamlAttributeStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAttributeStatementArrayOutput)
}

type SamlAttributeStatementOutput struct{ *pulumi.OutputState }

func (SamlAttributeStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlAttributeStatement)(nil)).Elem()
}

func (o SamlAttributeStatementOutput) ToSamlAttributeStatementOutput() SamlAttributeStatementOutput {
	return o
}

func (o SamlAttributeStatementOutput) ToSamlAttributeStatementOutputWithContext(ctx context.Context) SamlAttributeStatementOutput {
	return o
}

// Type of group attribute filter.
func (o SamlAttributeStatementOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Filter value to use.
func (o SamlAttributeStatementOutput) FilterValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.FilterValue }).(pulumi.StringPtrOutput)
}

// The name of the attribute statement.
func (o SamlAttributeStatementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SamlAttributeStatement) string { return v.Name }).(pulumi.StringOutput)
}

// The attribute namespace. It can be set to `"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified"`, `"urn:oasis:names:tc:SAML:2.0:attrname-format:uri"`, or `"urn:oasis:names:tc:SAML:2.0:attrname-format:basic"`.
func (o SamlAttributeStatementOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of attribute statement value. Can be `"EXPRESSION"` or `"GROUP"`.
func (o SamlAttributeStatementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlAttributeStatement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Array of values to use.
func (o SamlAttributeStatementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SamlAttributeStatement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SamlAttributeStatementArrayOutput struct{ *pulumi.OutputState }

func (SamlAttributeStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlAttributeStatement)(nil)).Elem()
}

func (o SamlAttributeStatementArrayOutput) ToSamlAttributeStatementArrayOutput() SamlAttributeStatementArrayOutput {
	return o
}

func (o SamlAttributeStatementArrayOutput) ToSamlAttributeStatementArrayOutputWithContext(ctx context.Context) SamlAttributeStatementArrayOutput {
	return o
}

func (o SamlAttributeStatementArrayOutput) Index(i pulumi.IntInput) SamlAttributeStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlAttributeStatement {
		return vs[0].([]SamlAttributeStatement)[vs[1].(int)]
	}).(SamlAttributeStatementOutput)
}

type SamlUser struct {
	// id of application.
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type SamlUserInput interface {
	pulumi.Input

	ToSamlUserOutput() SamlUserOutput
	ToSamlUserOutputWithContext(context.Context) SamlUserOutput
}

type SamlUserArgs struct {
	// id of application.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SamlUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlUser)(nil)).Elem()
}

func (i SamlUserArgs) ToSamlUserOutput() SamlUserOutput {
	return i.ToSamlUserOutputWithContext(context.Background())
}

func (i SamlUserArgs) ToSamlUserOutputWithContext(ctx context.Context) SamlUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlUserOutput)
}

type SamlUserArrayInput interface {
	pulumi.Input

	ToSamlUserArrayOutput() SamlUserArrayOutput
	ToSamlUserArrayOutputWithContext(context.Context) SamlUserArrayOutput
}

type SamlUserArray []SamlUserInput

func (SamlUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlUser)(nil)).Elem()
}

func (i SamlUserArray) ToSamlUserArrayOutput() SamlUserArrayOutput {
	return i.ToSamlUserArrayOutputWithContext(context.Background())
}

func (i SamlUserArray) ToSamlUserArrayOutputWithContext(ctx context.Context) SamlUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlUserArrayOutput)
}

type SamlUserOutput struct{ *pulumi.OutputState }

func (SamlUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlUser)(nil)).Elem()
}

func (o SamlUserOutput) ToSamlUserOutput() SamlUserOutput {
	return o
}

func (o SamlUserOutput) ToSamlUserOutputWithContext(ctx context.Context) SamlUserOutput {
	return o
}

// id of application.
func (o SamlUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o SamlUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o SamlUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o SamlUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SamlUserArrayOutput struct{ *pulumi.OutputState }

func (SamlUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlUser)(nil)).Elem()
}

func (o SamlUserArrayOutput) ToSamlUserArrayOutput() SamlUserArrayOutput {
	return o
}

func (o SamlUserArrayOutput) ToSamlUserArrayOutputWithContext(ctx context.Context) SamlUserArrayOutput {
	return o
}

func (o SamlUserArrayOutput) Index(i pulumi.IntInput) SamlUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlUser {
		return vs[0].([]SamlUser)[vs[1].(int)]
	}).(SamlUserOutput)
}

type SecurePasswordStoreUser struct {
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type SecurePasswordStoreUserInput interface {
	pulumi.Input

	ToSecurePasswordStoreUserOutput() SecurePasswordStoreUserOutput
	ToSecurePasswordStoreUserOutputWithContext(context.Context) SecurePasswordStoreUserOutput
}

type SecurePasswordStoreUserArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecurePasswordStoreUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurePasswordStoreUser)(nil)).Elem()
}

func (i SecurePasswordStoreUserArgs) ToSecurePasswordStoreUserOutput() SecurePasswordStoreUserOutput {
	return i.ToSecurePasswordStoreUserOutputWithContext(context.Background())
}

func (i SecurePasswordStoreUserArgs) ToSecurePasswordStoreUserOutputWithContext(ctx context.Context) SecurePasswordStoreUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreUserOutput)
}

type SecurePasswordStoreUserArrayInput interface {
	pulumi.Input

	ToSecurePasswordStoreUserArrayOutput() SecurePasswordStoreUserArrayOutput
	ToSecurePasswordStoreUserArrayOutputWithContext(context.Context) SecurePasswordStoreUserArrayOutput
}

type SecurePasswordStoreUserArray []SecurePasswordStoreUserInput

func (SecurePasswordStoreUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurePasswordStoreUser)(nil)).Elem()
}

func (i SecurePasswordStoreUserArray) ToSecurePasswordStoreUserArrayOutput() SecurePasswordStoreUserArrayOutput {
	return i.ToSecurePasswordStoreUserArrayOutputWithContext(context.Background())
}

func (i SecurePasswordStoreUserArray) ToSecurePasswordStoreUserArrayOutputWithContext(ctx context.Context) SecurePasswordStoreUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreUserArrayOutput)
}

type SecurePasswordStoreUserOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurePasswordStoreUser)(nil)).Elem()
}

func (o SecurePasswordStoreUserOutput) ToSecurePasswordStoreUserOutput() SecurePasswordStoreUserOutput {
	return o
}

func (o SecurePasswordStoreUserOutput) ToSecurePasswordStoreUserOutputWithContext(ctx context.Context) SecurePasswordStoreUserOutput {
	return o
}

func (o SecurePasswordStoreUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurePasswordStoreUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o SecurePasswordStoreUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurePasswordStoreUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o SecurePasswordStoreUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurePasswordStoreUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o SecurePasswordStoreUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurePasswordStoreUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecurePasswordStoreUserArrayOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurePasswordStoreUser)(nil)).Elem()
}

func (o SecurePasswordStoreUserArrayOutput) ToSecurePasswordStoreUserArrayOutput() SecurePasswordStoreUserArrayOutput {
	return o
}

func (o SecurePasswordStoreUserArrayOutput) ToSecurePasswordStoreUserArrayOutputWithContext(ctx context.Context) SecurePasswordStoreUserArrayOutput {
	return o
}

func (o SecurePasswordStoreUserArrayOutput) Index(i pulumi.IntInput) SecurePasswordStoreUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurePasswordStoreUser {
		return vs[0].([]SecurePasswordStoreUser)[vs[1].(int)]
	}).(SecurePasswordStoreUserOutput)
}

type SwaUser struct {
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type SwaUserInput interface {
	pulumi.Input

	ToSwaUserOutput() SwaUserOutput
	ToSwaUserOutputWithContext(context.Context) SwaUserOutput
}

type SwaUserArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SwaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SwaUser)(nil)).Elem()
}

func (i SwaUserArgs) ToSwaUserOutput() SwaUserOutput {
	return i.ToSwaUserOutputWithContext(context.Background())
}

func (i SwaUserArgs) ToSwaUserOutputWithContext(ctx context.Context) SwaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwaUserOutput)
}

type SwaUserArrayInput interface {
	pulumi.Input

	ToSwaUserArrayOutput() SwaUserArrayOutput
	ToSwaUserArrayOutputWithContext(context.Context) SwaUserArrayOutput
}

type SwaUserArray []SwaUserInput

func (SwaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwaUser)(nil)).Elem()
}

func (i SwaUserArray) ToSwaUserArrayOutput() SwaUserArrayOutput {
	return i.ToSwaUserArrayOutputWithContext(context.Background())
}

func (i SwaUserArray) ToSwaUserArrayOutputWithContext(ctx context.Context) SwaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwaUserArrayOutput)
}

type SwaUserOutput struct{ *pulumi.OutputState }

func (SwaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwaUser)(nil)).Elem()
}

func (o SwaUserOutput) ToSwaUserOutput() SwaUserOutput {
	return o
}

func (o SwaUserOutput) ToSwaUserOutputWithContext(ctx context.Context) SwaUserOutput {
	return o
}

func (o SwaUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwaUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o SwaUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwaUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o SwaUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwaUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o SwaUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwaUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SwaUserArrayOutput struct{ *pulumi.OutputState }

func (SwaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwaUser)(nil)).Elem()
}

func (o SwaUserArrayOutput) ToSwaUserArrayOutput() SwaUserArrayOutput {
	return o
}

func (o SwaUserArrayOutput) ToSwaUserArrayOutputWithContext(ctx context.Context) SwaUserArrayOutput {
	return o
}

func (o SwaUserArrayOutput) Index(i pulumi.IntInput) SwaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwaUser {
		return vs[0].([]SwaUser)[vs[1].(int)]
	}).(SwaUserOutput)
}

type ThreeFieldUser struct {
	Id       *string `pulumi:"id"`
	Password *string `pulumi:"password"`
	Scope    *string `pulumi:"scope"`
	Username *string `pulumi:"username"`
}

type ThreeFieldUserInput interface {
	pulumi.Input

	ToThreeFieldUserOutput() ThreeFieldUserOutput
	ToThreeFieldUserOutputWithContext(context.Context) ThreeFieldUserOutput
}

type ThreeFieldUserArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Scope    pulumi.StringPtrInput `pulumi:"scope"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ThreeFieldUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeFieldUser)(nil)).Elem()
}

func (i ThreeFieldUserArgs) ToThreeFieldUserOutput() ThreeFieldUserOutput {
	return i.ToThreeFieldUserOutputWithContext(context.Background())
}

func (i ThreeFieldUserArgs) ToThreeFieldUserOutputWithContext(ctx context.Context) ThreeFieldUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeFieldUserOutput)
}

type ThreeFieldUserArrayInput interface {
	pulumi.Input

	ToThreeFieldUserArrayOutput() ThreeFieldUserArrayOutput
	ToThreeFieldUserArrayOutputWithContext(context.Context) ThreeFieldUserArrayOutput
}

type ThreeFieldUserArray []ThreeFieldUserInput

func (ThreeFieldUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreeFieldUser)(nil)).Elem()
}

func (i ThreeFieldUserArray) ToThreeFieldUserArrayOutput() ThreeFieldUserArrayOutput {
	return i.ToThreeFieldUserArrayOutputWithContext(context.Background())
}

func (i ThreeFieldUserArray) ToThreeFieldUserArrayOutputWithContext(ctx context.Context) ThreeFieldUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeFieldUserArrayOutput)
}

type ThreeFieldUserOutput struct{ *pulumi.OutputState }

func (ThreeFieldUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeFieldUser)(nil)).Elem()
}

func (o ThreeFieldUserOutput) ToThreeFieldUserOutput() ThreeFieldUserOutput {
	return o
}

func (o ThreeFieldUserOutput) ToThreeFieldUserOutputWithContext(ctx context.Context) ThreeFieldUserOutput {
	return o
}

func (o ThreeFieldUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreeFieldUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ThreeFieldUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreeFieldUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ThreeFieldUserOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreeFieldUser) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o ThreeFieldUserOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreeFieldUser) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ThreeFieldUserArrayOutput struct{ *pulumi.OutputState }

func (ThreeFieldUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreeFieldUser)(nil)).Elem()
}

func (o ThreeFieldUserArrayOutput) ToThreeFieldUserArrayOutput() ThreeFieldUserArrayOutput {
	return o
}

func (o ThreeFieldUserArrayOutput) ToThreeFieldUserArrayOutputWithContext(ctx context.Context) ThreeFieldUserArrayOutput {
	return o
}

func (o ThreeFieldUserArrayOutput) Index(i pulumi.IntInput) ThreeFieldUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreeFieldUser {
		return vs[0].([]ThreeFieldUser)[vs[1].(int)]
	}).(ThreeFieldUserOutput)
}

type UserSchemaArrayOneOf struct {
	// value mapping to member of `enum`.
	Const string `pulumi:"const"`
	// display name for the enum value.
	Title string `pulumi:"title"`
}

type UserSchemaArrayOneOfInput interface {
	pulumi.Input

	ToUserSchemaArrayOneOfOutput() UserSchemaArrayOneOfOutput
	ToUserSchemaArrayOneOfOutputWithContext(context.Context) UserSchemaArrayOneOfOutput
}

type UserSchemaArrayOneOfArgs struct {
	// value mapping to member of `enum`.
	Const pulumi.StringInput `pulumi:"const"`
	// display name for the enum value.
	Title pulumi.StringInput `pulumi:"title"`
}

func (UserSchemaArrayOneOfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSchemaArrayOneOf)(nil)).Elem()
}

func (i UserSchemaArrayOneOfArgs) ToUserSchemaArrayOneOfOutput() UserSchemaArrayOneOfOutput {
	return i.ToUserSchemaArrayOneOfOutputWithContext(context.Background())
}

func (i UserSchemaArrayOneOfArgs) ToUserSchemaArrayOneOfOutputWithContext(ctx context.Context) UserSchemaArrayOneOfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaArrayOneOfOutput)
}

type UserSchemaArrayOneOfArrayInput interface {
	pulumi.Input

	ToUserSchemaArrayOneOfArrayOutput() UserSchemaArrayOneOfArrayOutput
	ToUserSchemaArrayOneOfArrayOutputWithContext(context.Context) UserSchemaArrayOneOfArrayOutput
}

type UserSchemaArrayOneOfArray []UserSchemaArrayOneOfInput

func (UserSchemaArrayOneOfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSchemaArrayOneOf)(nil)).Elem()
}

func (i UserSchemaArrayOneOfArray) ToUserSchemaArrayOneOfArrayOutput() UserSchemaArrayOneOfArrayOutput {
	return i.ToUserSchemaArrayOneOfArrayOutputWithContext(context.Background())
}

func (i UserSchemaArrayOneOfArray) ToUserSchemaArrayOneOfArrayOutputWithContext(ctx context.Context) UserSchemaArrayOneOfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaArrayOneOfArrayOutput)
}

type UserSchemaArrayOneOfOutput struct{ *pulumi.OutputState }

func (UserSchemaArrayOneOfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSchemaArrayOneOf)(nil)).Elem()
}

func (o UserSchemaArrayOneOfOutput) ToUserSchemaArrayOneOfOutput() UserSchemaArrayOneOfOutput {
	return o
}

func (o UserSchemaArrayOneOfOutput) ToUserSchemaArrayOneOfOutputWithContext(ctx context.Context) UserSchemaArrayOneOfOutput {
	return o
}

// value mapping to member of `enum`.
func (o UserSchemaArrayOneOfOutput) Const() pulumi.StringOutput {
	return o.ApplyT(func(v UserSchemaArrayOneOf) string { return v.Const }).(pulumi.StringOutput)
}

// display name for the enum value.
func (o UserSchemaArrayOneOfOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v UserSchemaArrayOneOf) string { return v.Title }).(pulumi.StringOutput)
}

type UserSchemaArrayOneOfArrayOutput struct{ *pulumi.OutputState }

func (UserSchemaArrayOneOfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSchemaArrayOneOf)(nil)).Elem()
}

func (o UserSchemaArrayOneOfArrayOutput) ToUserSchemaArrayOneOfArrayOutput() UserSchemaArrayOneOfArrayOutput {
	return o
}

func (o UserSchemaArrayOneOfArrayOutput) ToUserSchemaArrayOneOfArrayOutputWithContext(ctx context.Context) UserSchemaArrayOneOfArrayOutput {
	return o
}

func (o UserSchemaArrayOneOfArrayOutput) Index(i pulumi.IntInput) UserSchemaArrayOneOfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSchemaArrayOneOf {
		return vs[0].([]UserSchemaArrayOneOf)[vs[1].(int)]
	}).(UserSchemaArrayOneOfOutput)
}

type UserSchemaOneOf struct {
	// value mapping to member of `enum`.
	Const string `pulumi:"const"`
	// display name for the enum value.
	Title string `pulumi:"title"`
}

type UserSchemaOneOfInput interface {
	pulumi.Input

	ToUserSchemaOneOfOutput() UserSchemaOneOfOutput
	ToUserSchemaOneOfOutputWithContext(context.Context) UserSchemaOneOfOutput
}

type UserSchemaOneOfArgs struct {
	// value mapping to member of `enum`.
	Const pulumi.StringInput `pulumi:"const"`
	// display name for the enum value.
	Title pulumi.StringInput `pulumi:"title"`
}

func (UserSchemaOneOfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSchemaOneOf)(nil)).Elem()
}

func (i UserSchemaOneOfArgs) ToUserSchemaOneOfOutput() UserSchemaOneOfOutput {
	return i.ToUserSchemaOneOfOutputWithContext(context.Background())
}

func (i UserSchemaOneOfArgs) ToUserSchemaOneOfOutputWithContext(ctx context.Context) UserSchemaOneOfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaOneOfOutput)
}

type UserSchemaOneOfArrayInput interface {
	pulumi.Input

	ToUserSchemaOneOfArrayOutput() UserSchemaOneOfArrayOutput
	ToUserSchemaOneOfArrayOutputWithContext(context.Context) UserSchemaOneOfArrayOutput
}

type UserSchemaOneOfArray []UserSchemaOneOfInput

func (UserSchemaOneOfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSchemaOneOf)(nil)).Elem()
}

func (i UserSchemaOneOfArray) ToUserSchemaOneOfArrayOutput() UserSchemaOneOfArrayOutput {
	return i.ToUserSchemaOneOfArrayOutputWithContext(context.Background())
}

func (i UserSchemaOneOfArray) ToUserSchemaOneOfArrayOutputWithContext(ctx context.Context) UserSchemaOneOfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSchemaOneOfArrayOutput)
}

type UserSchemaOneOfOutput struct{ *pulumi.OutputState }

func (UserSchemaOneOfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSchemaOneOf)(nil)).Elem()
}

func (o UserSchemaOneOfOutput) ToUserSchemaOneOfOutput() UserSchemaOneOfOutput {
	return o
}

func (o UserSchemaOneOfOutput) ToUserSchemaOneOfOutputWithContext(ctx context.Context) UserSchemaOneOfOutput {
	return o
}

// value mapping to member of `enum`.
func (o UserSchemaOneOfOutput) Const() pulumi.StringOutput {
	return o.ApplyT(func(v UserSchemaOneOf) string { return v.Const }).(pulumi.StringOutput)
}

// display name for the enum value.
func (o UserSchemaOneOfOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v UserSchemaOneOf) string { return v.Title }).(pulumi.StringOutput)
}

type UserSchemaOneOfArrayOutput struct{ *pulumi.OutputState }

func (UserSchemaOneOfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSchemaOneOf)(nil)).Elem()
}

func (o UserSchemaOneOfArrayOutput) ToUserSchemaOneOfArrayOutput() UserSchemaOneOfArrayOutput {
	return o
}

func (o UserSchemaOneOfArrayOutput) ToUserSchemaOneOfArrayOutputWithContext(ctx context.Context) UserSchemaOneOfArrayOutput {
	return o
}

func (o UserSchemaOneOfArrayOutput) Index(i pulumi.IntInput) UserSchemaOneOfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSchemaOneOf {
		return vs[0].([]UserSchemaOneOf)[vs[1].(int)]
	}).(UserSchemaOneOfOutput)
}

type GetSamlAttributeStatement struct {
	FilterType  *string `pulumi:"filterType"`
	FilterValue *string `pulumi:"filterValue"`
	// name of application.
	Name      string   `pulumi:"name"`
	Namespace *string  `pulumi:"namespace"`
	Type      *string  `pulumi:"type"`
	Values    []string `pulumi:"values"`
}

type GetSamlAttributeStatementInput interface {
	pulumi.Input

	ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput
	ToGetSamlAttributeStatementOutputWithContext(context.Context) GetSamlAttributeStatementOutput
}

type GetSamlAttributeStatementArgs struct {
	FilterType  pulumi.StringPtrInput `pulumi:"filterType"`
	FilterValue pulumi.StringPtrInput `pulumi:"filterValue"`
	// name of application.
	Name      pulumi.StringInput      `pulumi:"name"`
	Namespace pulumi.StringPtrInput   `pulumi:"namespace"`
	Type      pulumi.StringPtrInput   `pulumi:"type"`
	Values    pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSamlAttributeStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSamlAttributeStatement)(nil)).Elem()
}

func (i GetSamlAttributeStatementArgs) ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput {
	return i.ToGetSamlAttributeStatementOutputWithContext(context.Background())
}

func (i GetSamlAttributeStatementArgs) ToGetSamlAttributeStatementOutputWithContext(ctx context.Context) GetSamlAttributeStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSamlAttributeStatementOutput)
}

type GetSamlAttributeStatementArrayInput interface {
	pulumi.Input

	ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput
	ToGetSamlAttributeStatementArrayOutputWithContext(context.Context) GetSamlAttributeStatementArrayOutput
}

type GetSamlAttributeStatementArray []GetSamlAttributeStatementInput

func (GetSamlAttributeStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSamlAttributeStatement)(nil)).Elem()
}

func (i GetSamlAttributeStatementArray) ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput {
	return i.ToGetSamlAttributeStatementArrayOutputWithContext(context.Background())
}

func (i GetSamlAttributeStatementArray) ToGetSamlAttributeStatementArrayOutputWithContext(ctx context.Context) GetSamlAttributeStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSamlAttributeStatementArrayOutput)
}

type GetSamlAttributeStatementOutput struct{ *pulumi.OutputState }

func (GetSamlAttributeStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSamlAttributeStatement)(nil)).Elem()
}

func (o GetSamlAttributeStatementOutput) ToGetSamlAttributeStatementOutput() GetSamlAttributeStatementOutput {
	return o
}

func (o GetSamlAttributeStatementOutput) ToGetSamlAttributeStatementOutputWithContext(ctx context.Context) GetSamlAttributeStatementOutput {
	return o
}

func (o GetSamlAttributeStatementOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

func (o GetSamlAttributeStatementOutput) FilterValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) *string { return v.FilterValue }).(pulumi.StringPtrOutput)
}

// name of application.
func (o GetSamlAttributeStatementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSamlAttributeStatementOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetSamlAttributeStatementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetSamlAttributeStatementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSamlAttributeStatement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSamlAttributeStatementArrayOutput struct{ *pulumi.OutputState }

func (GetSamlAttributeStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSamlAttributeStatement)(nil)).Elem()
}

func (o GetSamlAttributeStatementArrayOutput) ToGetSamlAttributeStatementArrayOutput() GetSamlAttributeStatementArrayOutput {
	return o
}

func (o GetSamlAttributeStatementArrayOutput) ToGetSamlAttributeStatementArrayOutputWithContext(ctx context.Context) GetSamlAttributeStatementArrayOutput {
	return o
}

func (o GetSamlAttributeStatementArrayOutput) Index(i pulumi.IntInput) GetSamlAttributeStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSamlAttributeStatement {
		return vs[0].([]GetSamlAttributeStatement)[vs[1].(int)]
	}).(GetSamlAttributeStatementOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoLoginUserOutput{})
	pulumi.RegisterOutputType(AutoLoginUserArrayOutput{})
	pulumi.RegisterOutputType(BasicAuthUserOutput{})
	pulumi.RegisterOutputType(BasicAuthUserArrayOutput{})
	pulumi.RegisterOutputType(BookmarkUserOutput{})
	pulumi.RegisterOutputType(BookmarkUserArrayOutput{})
	pulumi.RegisterOutputType(OAuthUserOutput{})
	pulumi.RegisterOutputType(OAuthUserArrayOutput{})
	pulumi.RegisterOutputType(SamlAttributeStatementOutput{})
	pulumi.RegisterOutputType(SamlAttributeStatementArrayOutput{})
	pulumi.RegisterOutputType(SamlUserOutput{})
	pulumi.RegisterOutputType(SamlUserArrayOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreUserOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreUserArrayOutput{})
	pulumi.RegisterOutputType(SwaUserOutput{})
	pulumi.RegisterOutputType(SwaUserArrayOutput{})
	pulumi.RegisterOutputType(ThreeFieldUserOutput{})
	pulumi.RegisterOutputType(ThreeFieldUserArrayOutput{})
	pulumi.RegisterOutputType(UserSchemaArrayOneOfOutput{})
	pulumi.RegisterOutputType(UserSchemaArrayOneOfArrayOutput{})
	pulumi.RegisterOutputType(UserSchemaOneOfOutput{})
	pulumi.RegisterOutputType(UserSchemaOneOfArrayOutput{})
	pulumi.RegisterOutputType(GetSamlAttributeStatementOutput{})
	pulumi.RegisterOutputType(GetSamlAttributeStatementArrayOutput{})
}
