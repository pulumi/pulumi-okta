// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Secure Password Store Application.
//
// This resource allows you to create and configure a Secure Password Store Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/app"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := app.NewSecurePasswordStore(ctx, "example", &app.SecurePasswordStoreArgs{
// 			CredentialsScheme: pulumi.String("ADMIN_SETS_CREDENTIALS"),
// 			Label:             pulumi.String("example"),
// 			PasswordField:     pulumi.String("pass"),
// 			Url:               pulumi.String("http://test.com"),
// 			UsernameField:     pulumi.String("user"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Secure Password Store Application can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example <app id>
// ```
//
//  It's also possible to import app without groups or/and users. In this case ID may look like this
//
// ```sh
//  $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example <app id>/skip_users
// ```
//
// ```sh
//  $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example <app id>/skip_users/skip_groups
// ```
//
// ```sh
//  $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example <app id>/skip_groups
// ```
type SecurePasswordStore struct {
	pulumi.CustomResourceState

	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page for this application.
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service. By default, it is `false`.
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote pulumi.StringPtrOutput `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrOutput `pulumi:"appLinksJson"`
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme pulumi.StringPtrOutput `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote pulumi.StringPtrOutput `pulumi:"enduserNote"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `AppGroupAssignments` (or `app.GroupAssignment`) resource.
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// The display name of the Application.
	Label pulumi.StringOutput `pulumi:"label"`
	// Local path to logo of the application.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// Name assigned to the application by Okta.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of optional param in the login form.
	OptionalField1 pulumi.StringPtrOutput `pulumi:"optionalField1"`
	// Name of optional value in the login form.
	OptionalField1Value pulumi.StringPtrOutput `pulumi:"optionalField1Value"`
	// Name of optional param in the login form.
	OptionalField2 pulumi.StringPtrOutput `pulumi:"optionalField2"`
	// Name of optional value in the login form.
	OptionalField2Value pulumi.StringPtrOutput `pulumi:"optionalField2Value"`
	// Name of optional param in the login form.
	OptionalField3 pulumi.StringPtrOutput `pulumi:"optionalField3"`
	// Name of optional value in the login form.
	OptionalField3Value pulumi.StringPtrOutput `pulumi:"optionalField3Value"`
	// Login password field.
	PasswordField pulumi.StringOutput `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `"ADMIN_SETS_CREDENTIALS"`, `"SHARED_USERNAME_AND_PASSWORD"` or `"EXTERNAL_PASSWORD_SYNC"`.
	RevealPassword pulumi.BoolPtrOutput `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrOutput `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrOutput `pulumi:"sharedUsername"`
	// Sign-on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Indicator that allows the app to skip `groups` sync (it's also can be provided during import). Default is `false`.
	SkipGroups pulumi.BoolPtrOutput `pulumi:"skipGroups"`
	// Indicator that allows the app to skip `users` sync (it's also can be provided during import). Default is `false`.
	SkipUsers pulumi.BoolPtrOutput `pulumi:"skipUsers"`
	// Status of application. By default, it is `"ACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Login URL.
	Url pulumi.StringOutput `pulumi:"url"`
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField pulumi.StringOutput `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `app.User` resource.
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SecurePasswordStoreUserArrayOutput `pulumi:"users"`
}

// NewSecurePasswordStore registers a new resource with the given unique name, arguments, and options.
func NewSecurePasswordStore(ctx *pulumi.Context,
	name string, args *SecurePasswordStoreArgs, opts ...pulumi.ResourceOption) (*SecurePasswordStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.PasswordField == nil {
		return nil, errors.New("invalid value for required argument 'PasswordField'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.UsernameField == nil {
		return nil, errors.New("invalid value for required argument 'UsernameField'")
	}
	var resource SecurePasswordStore
	err := ctx.RegisterResource("okta:app/securePasswordStore:SecurePasswordStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurePasswordStore gets an existing SecurePasswordStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurePasswordStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurePasswordStoreState, opts ...pulumi.ResourceOption) (*SecurePasswordStore, error) {
	var resource SecurePasswordStore
	err := ctx.ReadResource("okta:app/securePasswordStore:SecurePasswordStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurePasswordStore resources.
type securePasswordStoreState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page for this application.
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service. By default, it is `false`.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme *string `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `AppGroupAssignments` (or `app.GroupAssignment`) resource.
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb *bool `pulumi:"hideWeb"`
	// The display name of the Application.
	Label *string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl *string `pulumi:"logoUrl"`
	// Name assigned to the application by Okta.
	Name *string `pulumi:"name"`
	// Name of optional param in the login form.
	OptionalField1 *string `pulumi:"optionalField1"`
	// Name of optional value in the login form.
	OptionalField1Value *string `pulumi:"optionalField1Value"`
	// Name of optional param in the login form.
	OptionalField2 *string `pulumi:"optionalField2"`
	// Name of optional value in the login form.
	OptionalField2Value *string `pulumi:"optionalField2Value"`
	// Name of optional param in the login form.
	OptionalField3 *string `pulumi:"optionalField3"`
	// Name of optional value in the login form.
	OptionalField3Value *string `pulumi:"optionalField3Value"`
	// Login password field.
	PasswordField *string `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `"ADMIN_SETS_CREDENTIALS"`, `"SHARED_USERNAME_AND_PASSWORD"` or `"EXTERNAL_PASSWORD_SYNC"`.
	RevealPassword *bool `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword *string `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername *string `pulumi:"sharedUsername"`
	// Sign-on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Indicator that allows the app to skip `groups` sync (it's also can be provided during import). Default is `false`.
	SkipGroups *bool `pulumi:"skipGroups"`
	// Indicator that allows the app to skip `users` sync (it's also can be provided during import). Default is `false`.
	SkipUsers *bool `pulumi:"skipUsers"`
	// Status of application. By default, it is `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// Login URL.
	Url *string `pulumi:"url"`
	// The default username assigned to each user.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField *string `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `app.User` resource.
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users []SecurePasswordStoreUser `pulumi:"users"`
}

type SecurePasswordStoreState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page for this application.
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self-service. By default, it is `false`.
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `AppGroupAssignments` (or `app.GroupAssignment`) resource.
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrInput
	// The display name of the Application.
	Label pulumi.StringPtrInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// URL of the application's logo
	LogoUrl pulumi.StringPtrInput
	// Name assigned to the application by Okta.
	Name pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField1 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField1Value pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField2 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField2Value pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField3 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField3Value pulumi.StringPtrInput
	// Login password field.
	PasswordField pulumi.StringPtrInput
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `"ADMIN_SETS_CREDENTIALS"`, `"SHARED_USERNAME_AND_PASSWORD"` or `"EXTERNAL_PASSWORD_SYNC"`.
	RevealPassword pulumi.BoolPtrInput
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrInput
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrInput
	// Sign-on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Indicator that allows the app to skip `groups` sync (it's also can be provided during import). Default is `false`.
	SkipGroups pulumi.BoolPtrInput
	// Indicator that allows the app to skip `users` sync (it's also can be provided during import). Default is `false`.
	SkipUsers pulumi.BoolPtrInput
	// Status of application. By default, it is `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// Login URL.
	Url pulumi.StringPtrInput
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field.
	UsernameField pulumi.StringPtrInput
	// The users assigned to the application. See `app.User` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `app.User` resource.
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SecurePasswordStoreUserArrayInput
}

func (SecurePasswordStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*securePasswordStoreState)(nil)).Elem()
}

type securePasswordStoreArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page for this application.
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self-service. By default, it is `false`.
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Display auto submit toolbar.
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme *string `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `AppGroupAssignments` (or `app.GroupAssignment`) resource.
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app.
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users.
	HideWeb *bool `pulumi:"hideWeb"`
	// The display name of the Application.
	Label string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// Name of optional param in the login form.
	OptionalField1 *string `pulumi:"optionalField1"`
	// Name of optional value in the login form.
	OptionalField1Value *string `pulumi:"optionalField1Value"`
	// Name of optional param in the login form.
	OptionalField2 *string `pulumi:"optionalField2"`
	// Name of optional value in the login form.
	OptionalField2Value *string `pulumi:"optionalField2Value"`
	// Name of optional param in the login form.
	OptionalField3 *string `pulumi:"optionalField3"`
	// Name of optional value in the login form.
	OptionalField3Value *string `pulumi:"optionalField3Value"`
	// Login password field.
	PasswordField string `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `"ADMIN_SETS_CREDENTIALS"`, `"SHARED_USERNAME_AND_PASSWORD"` or `"EXTERNAL_PASSWORD_SYNC"`.
	RevealPassword *bool `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword *string `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername *string `pulumi:"sharedUsername"`
	// Indicator that allows the app to skip `groups` sync (it's also can be provided during import). Default is `false`.
	SkipGroups *bool `pulumi:"skipGroups"`
	// Indicator that allows the app to skip `users` sync (it's also can be provided during import). Default is `false`.
	SkipUsers *bool `pulumi:"skipUsers"`
	// Status of application. By default, it is `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// Login URL.
	Url string `pulumi:"url"`
	// The default username assigned to each user.
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// The Username template type.
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field.
	UsernameField string `pulumi:"usernameField"`
	// The users assigned to the application. See `app.User` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `app.User` resource.
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users []SecurePasswordStoreUser `pulumi:"users"`
}

// The set of arguments for constructing a SecurePasswordStore resource.
type SecurePasswordStoreArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page for this application.
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self-service. By default, it is `false`.
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Display auto submit toolbar.
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `AppGroupAssignments` (or `app.GroupAssignment`) resource.
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app.
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users.
	HideWeb pulumi.BoolPtrInput
	// The display name of the Application.
	Label pulumi.StringInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField1 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField1Value pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField2 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField2Value pulumi.StringPtrInput
	// Name of optional param in the login form.
	OptionalField3 pulumi.StringPtrInput
	// Name of optional value in the login form.
	OptionalField3Value pulumi.StringPtrInput
	// Login password field.
	PasswordField pulumi.StringInput
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `"ADMIN_SETS_CREDENTIALS"`, `"SHARED_USERNAME_AND_PASSWORD"` or `"EXTERNAL_PASSWORD_SYNC"`.
	RevealPassword pulumi.BoolPtrInput
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrInput
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrInput
	// Indicator that allows the app to skip `groups` sync (it's also can be provided during import). Default is `false`.
	SkipGroups pulumi.BoolPtrInput
	// Indicator that allows the app to skip `users` sync (it's also can be provided during import). Default is `false`.
	SkipUsers pulumi.BoolPtrInput
	// Status of application. By default, it is `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// Login URL.
	Url pulumi.StringInput
	// The default username assigned to each user.
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// The Username template type.
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field.
	UsernameField pulumi.StringInput
	// The users assigned to the application. See `app.User` for a more flexible approach.
	// - `DEPRECATED`: Please replace usage with the `app.User` resource.
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SecurePasswordStoreUserArrayInput
}

func (SecurePasswordStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securePasswordStoreArgs)(nil)).Elem()
}

type SecurePasswordStoreInput interface {
	pulumi.Input

	ToSecurePasswordStoreOutput() SecurePasswordStoreOutput
	ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput
}

func (*SecurePasswordStore) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurePasswordStore)(nil))
}

func (i *SecurePasswordStore) ToSecurePasswordStoreOutput() SecurePasswordStoreOutput {
	return i.ToSecurePasswordStoreOutputWithContext(context.Background())
}

func (i *SecurePasswordStore) ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreOutput)
}

func (i *SecurePasswordStore) ToSecurePasswordStorePtrOutput() SecurePasswordStorePtrOutput {
	return i.ToSecurePasswordStorePtrOutputWithContext(context.Background())
}

func (i *SecurePasswordStore) ToSecurePasswordStorePtrOutputWithContext(ctx context.Context) SecurePasswordStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStorePtrOutput)
}

type SecurePasswordStorePtrInput interface {
	pulumi.Input

	ToSecurePasswordStorePtrOutput() SecurePasswordStorePtrOutput
	ToSecurePasswordStorePtrOutputWithContext(ctx context.Context) SecurePasswordStorePtrOutput
}

type securePasswordStorePtrType SecurePasswordStoreArgs

func (*securePasswordStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurePasswordStore)(nil))
}

func (i *securePasswordStorePtrType) ToSecurePasswordStorePtrOutput() SecurePasswordStorePtrOutput {
	return i.ToSecurePasswordStorePtrOutputWithContext(context.Background())
}

func (i *securePasswordStorePtrType) ToSecurePasswordStorePtrOutputWithContext(ctx context.Context) SecurePasswordStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStorePtrOutput)
}

// SecurePasswordStoreArrayInput is an input type that accepts SecurePasswordStoreArray and SecurePasswordStoreArrayOutput values.
// You can construct a concrete instance of `SecurePasswordStoreArrayInput` via:
//
//          SecurePasswordStoreArray{ SecurePasswordStoreArgs{...} }
type SecurePasswordStoreArrayInput interface {
	pulumi.Input

	ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput
	ToSecurePasswordStoreArrayOutputWithContext(context.Context) SecurePasswordStoreArrayOutput
}

type SecurePasswordStoreArray []SecurePasswordStoreInput

func (SecurePasswordStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurePasswordStore)(nil)).Elem()
}

func (i SecurePasswordStoreArray) ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput {
	return i.ToSecurePasswordStoreArrayOutputWithContext(context.Background())
}

func (i SecurePasswordStoreArray) ToSecurePasswordStoreArrayOutputWithContext(ctx context.Context) SecurePasswordStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreArrayOutput)
}

// SecurePasswordStoreMapInput is an input type that accepts SecurePasswordStoreMap and SecurePasswordStoreMapOutput values.
// You can construct a concrete instance of `SecurePasswordStoreMapInput` via:
//
//          SecurePasswordStoreMap{ "key": SecurePasswordStoreArgs{...} }
type SecurePasswordStoreMapInput interface {
	pulumi.Input

	ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput
	ToSecurePasswordStoreMapOutputWithContext(context.Context) SecurePasswordStoreMapOutput
}

type SecurePasswordStoreMap map[string]SecurePasswordStoreInput

func (SecurePasswordStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurePasswordStore)(nil)).Elem()
}

func (i SecurePasswordStoreMap) ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput {
	return i.ToSecurePasswordStoreMapOutputWithContext(context.Background())
}

func (i SecurePasswordStoreMap) ToSecurePasswordStoreMapOutputWithContext(ctx context.Context) SecurePasswordStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreMapOutput)
}

type SecurePasswordStoreOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurePasswordStore)(nil))
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStoreOutput() SecurePasswordStoreOutput {
	return o
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput {
	return o
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStorePtrOutput() SecurePasswordStorePtrOutput {
	return o.ToSecurePasswordStorePtrOutputWithContext(context.Background())
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStorePtrOutputWithContext(ctx context.Context) SecurePasswordStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurePasswordStore) *SecurePasswordStore {
		return &v
	}).(SecurePasswordStorePtrOutput)
}

type SecurePasswordStorePtrOutput struct{ *pulumi.OutputState }

func (SecurePasswordStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurePasswordStore)(nil))
}

func (o SecurePasswordStorePtrOutput) ToSecurePasswordStorePtrOutput() SecurePasswordStorePtrOutput {
	return o
}

func (o SecurePasswordStorePtrOutput) ToSecurePasswordStorePtrOutputWithContext(ctx context.Context) SecurePasswordStorePtrOutput {
	return o
}

func (o SecurePasswordStorePtrOutput) Elem() SecurePasswordStoreOutput {
	return o.ApplyT(func(v *SecurePasswordStore) SecurePasswordStore {
		if v != nil {
			return *v
		}
		var ret SecurePasswordStore
		return ret
	}).(SecurePasswordStoreOutput)
}

type SecurePasswordStoreArrayOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurePasswordStore)(nil))
}

func (o SecurePasswordStoreArrayOutput) ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput {
	return o
}

func (o SecurePasswordStoreArrayOutput) ToSecurePasswordStoreArrayOutputWithContext(ctx context.Context) SecurePasswordStoreArrayOutput {
	return o
}

func (o SecurePasswordStoreArrayOutput) Index(i pulumi.IntInput) SecurePasswordStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurePasswordStore {
		return vs[0].([]SecurePasswordStore)[vs[1].(int)]
	}).(SecurePasswordStoreOutput)
}

type SecurePasswordStoreMapOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecurePasswordStore)(nil))
}

func (o SecurePasswordStoreMapOutput) ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput {
	return o
}

func (o SecurePasswordStoreMapOutput) ToSecurePasswordStoreMapOutputWithContext(ctx context.Context) SecurePasswordStoreMapOutput {
	return o
}

func (o SecurePasswordStoreMapOutput) MapIndex(k pulumi.StringInput) SecurePasswordStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecurePasswordStore {
		return vs[0].(map[string]SecurePasswordStore)[vs[1].(string)]
	}).(SecurePasswordStoreOutput)
}

func init() {
	pulumi.RegisterOutputType(SecurePasswordStoreOutput{})
	pulumi.RegisterOutputType(SecurePasswordStorePtrOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreArrayOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreMapOutput{})
}
