// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Secure Password Store Application.
//
//	This resource allows you to create and configure a Secure Password Store Application.
//	> During an apply if there is change in 'status' the app will first be
//	activated or deactivated in accordance with the 'status' change. Then, all
//	other arguments that changed will be applied.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/app"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := app.NewSecurePasswordStore(ctx, "example", &app.SecurePasswordStoreArgs{
//				Label:             pulumi.String("example"),
//				UsernameField:     pulumi.String("user"),
//				PasswordField:     pulumi.String("pass"),
//				Url:               pulumi.String("https://test.com"),
//				CredentialsScheme: pulumi.String("ADMIN_SETS_CREDENTIALS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:app/securePasswordStore:SecurePasswordStore example &#60;app id&#62
// ```
type SecurePasswordStore struct {
	pulumi.CustomResourceState

	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote pulumi.StringPtrOutput `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrOutput `pulumi:"appLinksJson"`
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
	CredentialsScheme pulumi.StringPtrOutput `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote pulumi.StringPtrOutput `pulumi:"enduserNote"`
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// The Application's display name.
	Label pulumi.StringOutput `pulumi:"label"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// Name of the app.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of optional param in the login form
	OptionalField1 pulumi.StringPtrOutput `pulumi:"optionalField1"`
	// Name of optional value in login form
	OptionalField1Value pulumi.StringPtrOutput `pulumi:"optionalField1Value"`
	// Name of optional param in the login form
	OptionalField2 pulumi.StringPtrOutput `pulumi:"optionalField2"`
	// Name of optional value in login form
	OptionalField2Value pulumi.StringPtrOutput `pulumi:"optionalField2Value"`
	// Name of optional param in the login form
	OptionalField3 pulumi.StringPtrOutput `pulumi:"optionalField3"`
	// Name of optional value in login form
	OptionalField3Value pulumi.StringPtrOutput `pulumi:"optionalField3Value"`
	// Login password field
	PasswordField pulumi.StringOutput `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
	RevealPassword pulumi.BoolPtrOutput `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrOutput `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrOutput `pulumi:"sharedUsername"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Login URL
	Url pulumi.StringOutput `pulumi:"url"`
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrOutput `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Login username field
	UsernameField pulumi.StringOutput `pulumi:"usernameField"`
}

// NewSecurePasswordStore registers a new resource with the given unique name, arguments, and options.
func NewSecurePasswordStore(ctx *pulumi.Context,
	name string, args *SecurePasswordStoreArgs, opts ...pulumi.ResourceOption) (*SecurePasswordStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.PasswordField == nil {
		return nil, errors.New("invalid value for required argument 'PasswordField'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.UsernameField == nil {
		return nil, errors.New("invalid value for required argument 'UsernameField'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurePasswordStore
	err := ctx.RegisterResource("okta:app/securePasswordStore:SecurePasswordStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurePasswordStore gets an existing SecurePasswordStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurePasswordStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurePasswordStoreState, opts ...pulumi.ResourceOption) (*SecurePasswordStore, error) {
	var resource SecurePasswordStore
	err := ctx.ReadResource("okta:app/securePasswordStore:SecurePasswordStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurePasswordStore resources.
type securePasswordStoreState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
	CredentialsScheme *string `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// The Application's display name.
	Label *string `pulumi:"label"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo *string `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl *string `pulumi:"logoUrl"`
	// Name of the app.
	Name *string `pulumi:"name"`
	// Name of optional param in the login form
	OptionalField1 *string `pulumi:"optionalField1"`
	// Name of optional value in login form
	OptionalField1Value *string `pulumi:"optionalField1Value"`
	// Name of optional param in the login form
	OptionalField2 *string `pulumi:"optionalField2"`
	// Name of optional value in login form
	OptionalField2Value *string `pulumi:"optionalField2Value"`
	// Name of optional param in the login form
	OptionalField3 *string `pulumi:"optionalField3"`
	// Name of optional value in login form
	OptionalField3Value *string `pulumi:"optionalField3Value"`
	// Login password field
	PasswordField *string `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
	RevealPassword *bool `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword *string `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername *string `pulumi:"sharedUsername"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Status of application. By default, it is `ACTIVE`
	Status *string `pulumi:"status"`
	// Login URL
	Url *string `pulumi:"url"`
	// Username template. Default: `${source.login}`
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field
	UsernameField *string `pulumi:"usernameField"`
}

type SecurePasswordStoreState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
	CredentialsScheme pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// The Application's display name.
	Label pulumi.StringPtrInput
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrInput
	// URL of the application's logo
	LogoUrl pulumi.StringPtrInput
	// Name of the app.
	Name pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField1 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField1Value pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField2 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField2Value pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField3 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField3Value pulumi.StringPtrInput
	// Login password field
	PasswordField pulumi.StringPtrInput
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
	RevealPassword pulumi.BoolPtrInput
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrInput
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrInput
	// Login URL
	Url pulumi.StringPtrInput
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field
	UsernameField pulumi.StringPtrInput
}

func (SecurePasswordStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*securePasswordStoreState)(nil)).Elem()
}

type securePasswordStoreArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service. Default is `false`
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
	CredentialsScheme *string `pulumi:"credentialsScheme"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// The Application's display name.
	Label string `pulumi:"label"`
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo *string `pulumi:"logo"`
	// Name of optional param in the login form
	OptionalField1 *string `pulumi:"optionalField1"`
	// Name of optional value in login form
	OptionalField1Value *string `pulumi:"optionalField1Value"`
	// Name of optional param in the login form
	OptionalField2 *string `pulumi:"optionalField2"`
	// Name of optional value in login form
	OptionalField2Value *string `pulumi:"optionalField2Value"`
	// Name of optional param in the login form
	OptionalField3 *string `pulumi:"optionalField3"`
	// Name of optional value in login form
	OptionalField3Value *string `pulumi:"optionalField3Value"`
	// Login password field
	PasswordField string `pulumi:"passwordField"`
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
	RevealPassword *bool `pulumi:"revealPassword"`
	// Shared password, required for certain schemes.
	SharedPassword *string `pulumi:"sharedPassword"`
	// Shared username, required for certain schemes.
	SharedUsername *string `pulumi:"sharedUsername"`
	// Status of application. By default, it is `ACTIVE`
	Status *string `pulumi:"status"`
	// Login URL
	Url string `pulumi:"url"`
	// Username template. Default: `${source.login}`
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus *string `pulumi:"userNameTemplatePushStatus"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Login username field
	UsernameField string `pulumi:"usernameField"`
}

// The set of arguments for constructing a SecurePasswordStore resource.
type SecurePasswordStoreArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service. Default is `false`
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app. The value for each application link should be boolean.
	AppLinksJson pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
	CredentialsScheme pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// The Application's display name.
	Label pulumi.StringInput
	// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
	Logo pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField1 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField1Value pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField2 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField2Value pulumi.StringPtrInput
	// Name of optional param in the login form
	OptionalField3 pulumi.StringPtrInput
	// Name of optional value in login form
	OptionalField3Value pulumi.StringPtrInput
	// Login password field
	PasswordField pulumi.StringInput
	// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
	RevealPassword pulumi.BoolPtrInput
	// Shared password, required for certain schemes.
	SharedPassword pulumi.StringPtrInput
	// Shared username, required for certain schemes.
	SharedUsername pulumi.StringPtrInput
	// Status of application. By default, it is `ACTIVE`
	Status pulumi.StringPtrInput
	// Login URL
	Url pulumi.StringInput
	// Username template. Default: `${source.login}`
	UserNameTemplate pulumi.StringPtrInput
	// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
	UserNameTemplatePushStatus pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type. Default: `BUILT_IN`
	UserNameTemplateType pulumi.StringPtrInput
	// Login username field
	UsernameField pulumi.StringInput
}

func (SecurePasswordStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securePasswordStoreArgs)(nil)).Elem()
}

type SecurePasswordStoreInput interface {
	pulumi.Input

	ToSecurePasswordStoreOutput() SecurePasswordStoreOutput
	ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput
}

func (*SecurePasswordStore) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurePasswordStore)(nil)).Elem()
}

func (i *SecurePasswordStore) ToSecurePasswordStoreOutput() SecurePasswordStoreOutput {
	return i.ToSecurePasswordStoreOutputWithContext(context.Background())
}

func (i *SecurePasswordStore) ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreOutput)
}

// SecurePasswordStoreArrayInput is an input type that accepts SecurePasswordStoreArray and SecurePasswordStoreArrayOutput values.
// You can construct a concrete instance of `SecurePasswordStoreArrayInput` via:
//
//	SecurePasswordStoreArray{ SecurePasswordStoreArgs{...} }
type SecurePasswordStoreArrayInput interface {
	pulumi.Input

	ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput
	ToSecurePasswordStoreArrayOutputWithContext(context.Context) SecurePasswordStoreArrayOutput
}

type SecurePasswordStoreArray []SecurePasswordStoreInput

func (SecurePasswordStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurePasswordStore)(nil)).Elem()
}

func (i SecurePasswordStoreArray) ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput {
	return i.ToSecurePasswordStoreArrayOutputWithContext(context.Background())
}

func (i SecurePasswordStoreArray) ToSecurePasswordStoreArrayOutputWithContext(ctx context.Context) SecurePasswordStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreArrayOutput)
}

// SecurePasswordStoreMapInput is an input type that accepts SecurePasswordStoreMap and SecurePasswordStoreMapOutput values.
// You can construct a concrete instance of `SecurePasswordStoreMapInput` via:
//
//	SecurePasswordStoreMap{ "key": SecurePasswordStoreArgs{...} }
type SecurePasswordStoreMapInput interface {
	pulumi.Input

	ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput
	ToSecurePasswordStoreMapOutputWithContext(context.Context) SecurePasswordStoreMapOutput
}

type SecurePasswordStoreMap map[string]SecurePasswordStoreInput

func (SecurePasswordStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurePasswordStore)(nil)).Elem()
}

func (i SecurePasswordStoreMap) ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput {
	return i.ToSecurePasswordStoreMapOutputWithContext(context.Background())
}

func (i SecurePasswordStoreMap) ToSecurePasswordStoreMapOutputWithContext(ctx context.Context) SecurePasswordStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurePasswordStoreMapOutput)
}

type SecurePasswordStoreOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurePasswordStore)(nil)).Elem()
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStoreOutput() SecurePasswordStoreOutput {
	return o
}

func (o SecurePasswordStoreOutput) ToSecurePasswordStoreOutputWithContext(ctx context.Context) SecurePasswordStoreOutput {
	return o
}

// Custom error page URL
func (o SecurePasswordStoreOutput) AccessibilityErrorRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.AccessibilityErrorRedirectUrl }).(pulumi.StringPtrOutput)
}

// Custom login page URL
func (o SecurePasswordStoreOutput) AccessibilityLoginRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.AccessibilityLoginRedirectUrl }).(pulumi.StringPtrOutput)
}

// Enable self service. Default is `false`
func (o SecurePasswordStoreOutput) AccessibilitySelfService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.BoolPtrOutput { return v.AccessibilitySelfService }).(pulumi.BoolPtrOutput)
}

// Application notes for admins.
func (o SecurePasswordStoreOutput) AdminNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.AdminNote }).(pulumi.StringPtrOutput)
}

// Displays specific appLinks for the app. The value for each application link should be boolean.
func (o SecurePasswordStoreOutput) AppLinksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.AppLinksJson }).(pulumi.StringPtrOutput)
}

// Display auto submit toolbar
func (o SecurePasswordStoreOutput) AutoSubmitToolbar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.BoolPtrOutput { return v.AutoSubmitToolbar }).(pulumi.BoolPtrOutput)
}

// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
func (o SecurePasswordStoreOutput) CredentialsScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.CredentialsScheme }).(pulumi.StringPtrOutput)
}

// Application notes for end users.
func (o SecurePasswordStoreOutput) EnduserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.EnduserNote }).(pulumi.StringPtrOutput)
}

// Do not display application icon on mobile app
func (o SecurePasswordStoreOutput) HideIos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.BoolPtrOutput { return v.HideIos }).(pulumi.BoolPtrOutput)
}

// Do not display application icon to users
func (o SecurePasswordStoreOutput) HideWeb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.BoolPtrOutput { return v.HideWeb }).(pulumi.BoolPtrOutput)
}

// The Application's display name.
func (o SecurePasswordStoreOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
func (o SecurePasswordStoreOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.Logo }).(pulumi.StringPtrOutput)
}

// URL of the application's logo
func (o SecurePasswordStoreOutput) LogoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.LogoUrl }).(pulumi.StringOutput)
}

// Name of the app.
func (o SecurePasswordStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of optional param in the login form
func (o SecurePasswordStoreOutput) OptionalField1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField1 }).(pulumi.StringPtrOutput)
}

// Name of optional value in login form
func (o SecurePasswordStoreOutput) OptionalField1Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField1Value }).(pulumi.StringPtrOutput)
}

// Name of optional param in the login form
func (o SecurePasswordStoreOutput) OptionalField2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField2 }).(pulumi.StringPtrOutput)
}

// Name of optional value in login form
func (o SecurePasswordStoreOutput) OptionalField2Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField2Value }).(pulumi.StringPtrOutput)
}

// Name of optional param in the login form
func (o SecurePasswordStoreOutput) OptionalField3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField3 }).(pulumi.StringPtrOutput)
}

// Name of optional value in login form
func (o SecurePasswordStoreOutput) OptionalField3Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.OptionalField3Value }).(pulumi.StringPtrOutput)
}

// Login password field
func (o SecurePasswordStoreOutput) PasswordField() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.PasswordField }).(pulumi.StringOutput)
}

// Allow user to reveal password. It can not be set to `true` if `credentialsScheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
func (o SecurePasswordStoreOutput) RevealPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.BoolPtrOutput { return v.RevealPassword }).(pulumi.BoolPtrOutput)
}

// Shared password, required for certain schemes.
func (o SecurePasswordStoreOutput) SharedPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.SharedPassword }).(pulumi.StringPtrOutput)
}

// Shared username, required for certain schemes.
func (o SecurePasswordStoreOutput) SharedUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.SharedUsername }).(pulumi.StringPtrOutput)
}

// Sign on mode of application.
func (o SecurePasswordStoreOutput) SignOnMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.SignOnMode }).(pulumi.StringOutput)
}

// Status of application. By default, it is `ACTIVE`
func (o SecurePasswordStoreOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Login URL
func (o SecurePasswordStoreOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username template. Default: `${source.login}`
func (o SecurePasswordStoreOutput) UserNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.UserNameTemplate }).(pulumi.StringPtrOutput)
}

// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
func (o SecurePasswordStoreOutput) UserNameTemplatePushStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.UserNameTemplatePushStatus }).(pulumi.StringPtrOutput)
}

// Username template suffix
func (o SecurePasswordStoreOutput) UserNameTemplateSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.UserNameTemplateSuffix }).(pulumi.StringPtrOutput)
}

// Username template type. Default: `BUILT_IN`
func (o SecurePasswordStoreOutput) UserNameTemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringPtrOutput { return v.UserNameTemplateType }).(pulumi.StringPtrOutput)
}

// Login username field
func (o SecurePasswordStoreOutput) UsernameField() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurePasswordStore) pulumi.StringOutput { return v.UsernameField }).(pulumi.StringOutput)
}

type SecurePasswordStoreArrayOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurePasswordStore)(nil)).Elem()
}

func (o SecurePasswordStoreArrayOutput) ToSecurePasswordStoreArrayOutput() SecurePasswordStoreArrayOutput {
	return o
}

func (o SecurePasswordStoreArrayOutput) ToSecurePasswordStoreArrayOutputWithContext(ctx context.Context) SecurePasswordStoreArrayOutput {
	return o
}

func (o SecurePasswordStoreArrayOutput) Index(i pulumi.IntInput) SecurePasswordStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurePasswordStore {
		return vs[0].([]*SecurePasswordStore)[vs[1].(int)]
	}).(SecurePasswordStoreOutput)
}

type SecurePasswordStoreMapOutput struct{ *pulumi.OutputState }

func (SecurePasswordStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurePasswordStore)(nil)).Elem()
}

func (o SecurePasswordStoreMapOutput) ToSecurePasswordStoreMapOutput() SecurePasswordStoreMapOutput {
	return o
}

func (o SecurePasswordStoreMapOutput) ToSecurePasswordStoreMapOutputWithContext(ctx context.Context) SecurePasswordStoreMapOutput {
	return o
}

func (o SecurePasswordStoreMapOutput) MapIndex(k pulumi.StringInput) SecurePasswordStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurePasswordStore {
		return vs[0].(map[string]*SecurePasswordStore)[vs[1].(string)]
	}).(SecurePasswordStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurePasswordStoreInput)(nil)).Elem(), &SecurePasswordStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurePasswordStoreArrayInput)(nil)).Elem(), SecurePasswordStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurePasswordStoreMapInput)(nil)).Elem(), SecurePasswordStoreMap{})
	pulumi.RegisterOutputType(SecurePasswordStoreOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreArrayOutput{})
	pulumi.RegisterOutputType(SecurePasswordStoreMapOutput{})
}
