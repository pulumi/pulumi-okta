// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a policy assurance from Okta.
func GetDeviceAssurancePolicy(ctx *pulumi.Context, args *GetDeviceAssurancePolicyArgs, opts ...pulumi.InvokeOption) (*GetDeviceAssurancePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeviceAssurancePolicyResult
	err := ctx.Invoke("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeviceAssurancePolicy.
type GetDeviceAssurancePolicyArgs struct {
	// ID of the user type to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// Name of user type to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
	// Indicates if the device contains a secure hardware functionality
	SecureHardwarePresent *bool `pulumi:"secureHardwarePresent"`
	// Indicates if the device contains a secure hardware functionality
	ThirdPartySignalProvider *GetDeviceAssurancePolicyThirdPartySignalProvider `pulumi:"thirdPartySignalProvider"`
}

// A collection of values returned by getDeviceAssurancePolicy.
type GetDeviceAssurancePolicyResult struct {
	// List of disk encryption type, can be `FULL`, `USER`
	DiskEncryptionType GetDeviceAssurancePolicyDiskEncryptionType `pulumi:"diskEncryptionType"`
	// ID of the user type to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// Is the device jailbroken in the device assurance policy.
	Jailbreak bool `pulumi:"jailbreak"`
	// Name of user type to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
	// Minimum os version of the device in the device assurance policy.
	OsVersion GetDeviceAssurancePolicyOsVersion `pulumi:"osVersion"`
	// The list of os version constraints.
	OsVersionConstraints []GetDeviceAssurancePolicyOsVersionConstraint `pulumi:"osVersionConstraints"`
	// Policy device assurance platform
	Platform string `pulumi:"platform"`
	// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
	ScreenlockType GetDeviceAssurancePolicyScreenlockType `pulumi:"screenlockType"`
	// Indicates if the device contains a secure hardware functionality
	SecureHardwarePresent *bool `pulumi:"secureHardwarePresent"`
	// Indicates if the device contains a secure hardware functionality
	ThirdPartySignalProvider *GetDeviceAssurancePolicyThirdPartySignalProvider `pulumi:"thirdPartySignalProvider"`
}

func GetDeviceAssurancePolicyOutput(ctx *pulumi.Context, args GetDeviceAssurancePolicyOutputArgs, opts ...pulumi.InvokeOption) GetDeviceAssurancePolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDeviceAssurancePolicyResultOutput, error) {
			args := v.(GetDeviceAssurancePolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", args, GetDeviceAssurancePolicyResultOutput{}, options).(GetDeviceAssurancePolicyResultOutput), nil
		}).(GetDeviceAssurancePolicyResultOutput)
}

// A collection of arguments for invoking getDeviceAssurancePolicy.
type GetDeviceAssurancePolicyOutputArgs struct {
	// ID of the user type to retrieve, conflicts with `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of user type to retrieve, conflicts with `id`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates if the device contains a secure hardware functionality
	SecureHardwarePresent pulumi.BoolPtrInput `pulumi:"secureHardwarePresent"`
	// Indicates if the device contains a secure hardware functionality
	ThirdPartySignalProvider GetDeviceAssurancePolicyThirdPartySignalProviderPtrInput `pulumi:"thirdPartySignalProvider"`
}

func (GetDeviceAssurancePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceAssurancePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getDeviceAssurancePolicy.
type GetDeviceAssurancePolicyResultOutput struct{ *pulumi.OutputState }

func (GetDeviceAssurancePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceAssurancePolicyResult)(nil)).Elem()
}

func (o GetDeviceAssurancePolicyResultOutput) ToGetDeviceAssurancePolicyResultOutput() GetDeviceAssurancePolicyResultOutput {
	return o
}

func (o GetDeviceAssurancePolicyResultOutput) ToGetDeviceAssurancePolicyResultOutputWithContext(ctx context.Context) GetDeviceAssurancePolicyResultOutput {
	return o
}

// List of disk encryption type, can be `FULL`, `USER`
func (o GetDeviceAssurancePolicyResultOutput) DiskEncryptionType() GetDeviceAssurancePolicyDiskEncryptionTypeOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) GetDeviceAssurancePolicyDiskEncryptionType {
		return v.DiskEncryptionType
	}).(GetDeviceAssurancePolicyDiskEncryptionTypeOutput)
}

// ID of the user type to retrieve, conflicts with `name`.
func (o GetDeviceAssurancePolicyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is the device jailbroken in the device assurance policy.
func (o GetDeviceAssurancePolicyResultOutput) Jailbreak() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) bool { return v.Jailbreak }).(pulumi.BoolOutput)
}

// Name of user type to retrieve, conflicts with `id`.
func (o GetDeviceAssurancePolicyResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Minimum os version of the device in the device assurance policy.
func (o GetDeviceAssurancePolicyResultOutput) OsVersion() GetDeviceAssurancePolicyOsVersionOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) GetDeviceAssurancePolicyOsVersion { return v.OsVersion }).(GetDeviceAssurancePolicyOsVersionOutput)
}

// The list of os version constraints.
func (o GetDeviceAssurancePolicyResultOutput) OsVersionConstraints() GetDeviceAssurancePolicyOsVersionConstraintArrayOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) []GetDeviceAssurancePolicyOsVersionConstraint {
		return v.OsVersionConstraints
	}).(GetDeviceAssurancePolicyOsVersionConstraintArrayOutput)
}

// Policy device assurance platform
func (o GetDeviceAssurancePolicyResultOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) string { return v.Platform }).(pulumi.StringOutput)
}

// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
func (o GetDeviceAssurancePolicyResultOutput) ScreenlockType() GetDeviceAssurancePolicyScreenlockTypeOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) GetDeviceAssurancePolicyScreenlockType { return v.ScreenlockType }).(GetDeviceAssurancePolicyScreenlockTypeOutput)
}

// Indicates if the device contains a secure hardware functionality
func (o GetDeviceAssurancePolicyResultOutput) SecureHardwarePresent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) *bool { return v.SecureHardwarePresent }).(pulumi.BoolPtrOutput)
}

// Indicates if the device contains a secure hardware functionality
func (o GetDeviceAssurancePolicyResultOutput) ThirdPartySignalProvider() GetDeviceAssurancePolicyThirdPartySignalProviderPtrOutput {
	return o.ApplyT(func(v GetDeviceAssurancePolicyResult) *GetDeviceAssurancePolicyThirdPartySignalProvider {
		return v.ThirdPartySignalProvider
	}).(GetDeviceAssurancePolicyThirdPartySignalProviderPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeviceAssurancePolicyResultOutput{})
}
