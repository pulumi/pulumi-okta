// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type UserBaseSchemaProperty struct {
	pulumi.CustomResourceState

	// Subschema unique string identifier
	Index pulumi.StringOutput `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the subschema is required
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// Subschema title (display name)
	Title pulumi.StringOutput `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringOutput `pulumi:"type"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewUserBaseSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewUserBaseSchemaProperty(ctx *pulumi.Context,
	name string, args *UserBaseSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*UserBaseSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserBaseSchemaProperty
	err := ctx.RegisterResource("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserBaseSchemaProperty gets an existing UserBaseSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserBaseSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserBaseSchemaPropertyState, opts ...pulumi.ResourceOption) (*UserBaseSchemaProperty, error) {
	var resource UserBaseSchemaProperty
	err := ctx.ReadResource("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserBaseSchemaProperty resources.
type userBaseSchemaPropertyState struct {
	// Subschema unique string identifier
	Index *string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// Subschema title (display name)
	Title *string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type *string `pulumi:"type"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type UserBaseSchemaPropertyState struct {
	// Subschema unique string identifier
	Index pulumi.StringPtrInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// Subschema title (display name)
	Title pulumi.StringPtrInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaPropertyState)(nil)).Elem()
}

type userBaseSchemaPropertyArgs struct {
	// Subschema unique string identifier
	Index string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// Subschema title (display name)
	Title string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type string `pulumi:"type"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a UserBaseSchemaProperty resource.
type UserBaseSchemaPropertyArgs struct {
	// Subschema unique string identifier
	Index pulumi.StringInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
	Pattern pulumi.StringPtrInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// Subschema title (display name)
	Title pulumi.StringInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaPropertyArgs)(nil)).Elem()
}

type UserBaseSchemaPropertyInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput
	ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput
}

func (*UserBaseSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchemaProperty)(nil)).Elem()
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput {
	return i.ToUserBaseSchemaPropertyOutputWithContext(context.Background())
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyOutput)
}

func (i *UserBaseSchemaProperty) ToOutput(ctx context.Context) pulumix.Output[*UserBaseSchemaProperty] {
	return pulumix.Output[*UserBaseSchemaProperty]{
		OutputState: i.ToUserBaseSchemaPropertyOutputWithContext(ctx).OutputState,
	}
}

// UserBaseSchemaPropertyArrayInput is an input type that accepts UserBaseSchemaPropertyArray and UserBaseSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `UserBaseSchemaPropertyArrayInput` via:
//
//	UserBaseSchemaPropertyArray{ UserBaseSchemaPropertyArgs{...} }
type UserBaseSchemaPropertyArrayInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput
	ToUserBaseSchemaPropertyArrayOutputWithContext(context.Context) UserBaseSchemaPropertyArrayOutput
}

type UserBaseSchemaPropertyArray []UserBaseSchemaPropertyInput

func (UserBaseSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserBaseSchemaProperty)(nil)).Elem()
}

func (i UserBaseSchemaPropertyArray) ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput {
	return i.ToUserBaseSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i UserBaseSchemaPropertyArray) ToUserBaseSchemaPropertyArrayOutputWithContext(ctx context.Context) UserBaseSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyArrayOutput)
}

func (i UserBaseSchemaPropertyArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserBaseSchemaProperty] {
	return pulumix.Output[[]*UserBaseSchemaProperty]{
		OutputState: i.ToUserBaseSchemaPropertyArrayOutputWithContext(ctx).OutputState,
	}
}

// UserBaseSchemaPropertyMapInput is an input type that accepts UserBaseSchemaPropertyMap and UserBaseSchemaPropertyMapOutput values.
// You can construct a concrete instance of `UserBaseSchemaPropertyMapInput` via:
//
//	UserBaseSchemaPropertyMap{ "key": UserBaseSchemaPropertyArgs{...} }
type UserBaseSchemaPropertyMapInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput
	ToUserBaseSchemaPropertyMapOutputWithContext(context.Context) UserBaseSchemaPropertyMapOutput
}

type UserBaseSchemaPropertyMap map[string]UserBaseSchemaPropertyInput

func (UserBaseSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserBaseSchemaProperty)(nil)).Elem()
}

func (i UserBaseSchemaPropertyMap) ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput {
	return i.ToUserBaseSchemaPropertyMapOutputWithContext(context.Background())
}

func (i UserBaseSchemaPropertyMap) ToUserBaseSchemaPropertyMapOutputWithContext(ctx context.Context) UserBaseSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyMapOutput)
}

func (i UserBaseSchemaPropertyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserBaseSchemaProperty] {
	return pulumix.Output[map[string]*UserBaseSchemaProperty]{
		OutputState: i.ToUserBaseSchemaPropertyMapOutputWithContext(ctx).OutputState,
	}
}

type UserBaseSchemaPropertyOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchemaProperty)(nil)).Elem()
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput {
	return o
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput {
	return o
}

func (o UserBaseSchemaPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[*UserBaseSchemaProperty] {
	return pulumix.Output[*UserBaseSchemaProperty]{
		OutputState: o.OutputState,
	}
}

// Subschema unique string identifier
func (o UserBaseSchemaPropertyOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// SubSchema profile manager, if not set it will inherit its setting.
func (o UserBaseSchemaPropertyOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

// The validation pattern to use for the subschema. Must be in form of '.+', or '[\n\n]+' if present.'
func (o UserBaseSchemaPropertyOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
func (o UserBaseSchemaPropertyOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the subschema is required
func (o UserBaseSchemaPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// Subschema title (display name)
func (o UserBaseSchemaPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Subschema type: string, boolean, number, integer, array, or object
func (o UserBaseSchemaPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Custom subschema user type
func (o UserBaseSchemaPropertyOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserBaseSchemaProperty) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserBaseSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserBaseSchemaProperty)(nil)).Elem()
}

func (o UserBaseSchemaPropertyArrayOutput) ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput {
	return o
}

func (o UserBaseSchemaPropertyArrayOutput) ToUserBaseSchemaPropertyArrayOutputWithContext(ctx context.Context) UserBaseSchemaPropertyArrayOutput {
	return o
}

func (o UserBaseSchemaPropertyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserBaseSchemaProperty] {
	return pulumix.Output[[]*UserBaseSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o UserBaseSchemaPropertyArrayOutput) Index(i pulumi.IntInput) UserBaseSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserBaseSchemaProperty {
		return vs[0].([]*UserBaseSchemaProperty)[vs[1].(int)]
	}).(UserBaseSchemaPropertyOutput)
}

type UserBaseSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserBaseSchemaProperty)(nil)).Elem()
}

func (o UserBaseSchemaPropertyMapOutput) ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput {
	return o
}

func (o UserBaseSchemaPropertyMapOutput) ToUserBaseSchemaPropertyMapOutputWithContext(ctx context.Context) UserBaseSchemaPropertyMapOutput {
	return o
}

func (o UserBaseSchemaPropertyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserBaseSchemaProperty] {
	return pulumix.Output[map[string]*UserBaseSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o UserBaseSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) UserBaseSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserBaseSchemaProperty {
		return vs[0].(map[string]*UserBaseSchemaProperty)[vs[1].(string)]
	}).(UserBaseSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaPropertyInput)(nil)).Elem(), &UserBaseSchemaProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaPropertyArrayInput)(nil)).Elem(), UserBaseSchemaPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserBaseSchemaPropertyMapInput)(nil)).Elem(), UserBaseSchemaPropertyMap{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyMapOutput{})
}
