// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a User Base Schema property.
//
// This resource allows you to configure a base user schema property.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewUserBaseSchemaProperty(ctx, "example", &okta.UserBaseSchemaPropertyArgs{
// 			Index:    pulumi.String("customPropertyName"),
// 			Master:   pulumi.String("OKTA"),
// 			Title:    pulumi.String("customPropertyName"),
// 			Type:     pulumi.String("string"),
// 			UserType: pulumi.Any(data.Okta_user_type.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User schema property of default user type can be imported via the property index.
//
// ```sh
//  $ pulumi import okta:index/userBaseSchemaProperty:UserBaseSchemaProperty example <property name>
// ```
//
//  User schema property of custom user type can be imported via user type id and property index
//
// ```sh
//  $ pulumi import okta:index/userBaseSchemaProperty:UserBaseSchemaProperty example <user type id>.<property name>
// ```
type UserBaseSchemaProperty struct {
	pulumi.CustomResourceState

	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The property display name.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// User type ID
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewUserBaseSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewUserBaseSchemaProperty(ctx *pulumi.Context,
	name string, args *UserBaseSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*UserBaseSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource UserBaseSchemaProperty
	err := ctx.RegisterResource("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserBaseSchemaProperty gets an existing UserBaseSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserBaseSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserBaseSchemaPropertyState, opts ...pulumi.ResourceOption) (*UserBaseSchemaProperty, error) {
	var resource UserBaseSchemaProperty
	err := ctx.ReadResource("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserBaseSchemaProperty resources.
type userBaseSchemaPropertyState struct {
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

type UserBaseSchemaPropertyState struct {
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaPropertyState)(nil)).Elem()
}

type userBaseSchemaPropertyArgs struct {
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a UserBaseSchemaProperty resource.
type UserBaseSchemaPropertyArgs struct {
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (UserBaseSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userBaseSchemaPropertyArgs)(nil)).Elem()
}

type UserBaseSchemaPropertyInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput
	ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput
}

func (*UserBaseSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((*UserBaseSchemaProperty)(nil))
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput {
	return i.ToUserBaseSchemaPropertyOutputWithContext(context.Background())
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyOutput)
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyPtrOutput() UserBaseSchemaPropertyPtrOutput {
	return i.ToUserBaseSchemaPropertyPtrOutputWithContext(context.Background())
}

func (i *UserBaseSchemaProperty) ToUserBaseSchemaPropertyPtrOutputWithContext(ctx context.Context) UserBaseSchemaPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyPtrOutput)
}

type UserBaseSchemaPropertyPtrInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyPtrOutput() UserBaseSchemaPropertyPtrOutput
	ToUserBaseSchemaPropertyPtrOutputWithContext(ctx context.Context) UserBaseSchemaPropertyPtrOutput
}

type userBaseSchemaPropertyPtrType UserBaseSchemaPropertyArgs

func (*userBaseSchemaPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchemaProperty)(nil))
}

func (i *userBaseSchemaPropertyPtrType) ToUserBaseSchemaPropertyPtrOutput() UserBaseSchemaPropertyPtrOutput {
	return i.ToUserBaseSchemaPropertyPtrOutputWithContext(context.Background())
}

func (i *userBaseSchemaPropertyPtrType) ToUserBaseSchemaPropertyPtrOutputWithContext(ctx context.Context) UserBaseSchemaPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyPtrOutput)
}

// UserBaseSchemaPropertyArrayInput is an input type that accepts UserBaseSchemaPropertyArray and UserBaseSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `UserBaseSchemaPropertyArrayInput` via:
//
//          UserBaseSchemaPropertyArray{ UserBaseSchemaPropertyArgs{...} }
type UserBaseSchemaPropertyArrayInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput
	ToUserBaseSchemaPropertyArrayOutputWithContext(context.Context) UserBaseSchemaPropertyArrayOutput
}

type UserBaseSchemaPropertyArray []UserBaseSchemaPropertyInput

func (UserBaseSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*UserBaseSchemaProperty)(nil))
}

func (i UserBaseSchemaPropertyArray) ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput {
	return i.ToUserBaseSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i UserBaseSchemaPropertyArray) ToUserBaseSchemaPropertyArrayOutputWithContext(ctx context.Context) UserBaseSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyArrayOutput)
}

// UserBaseSchemaPropertyMapInput is an input type that accepts UserBaseSchemaPropertyMap and UserBaseSchemaPropertyMapOutput values.
// You can construct a concrete instance of `UserBaseSchemaPropertyMapInput` via:
//
//          UserBaseSchemaPropertyMap{ "key": UserBaseSchemaPropertyArgs{...} }
type UserBaseSchemaPropertyMapInput interface {
	pulumi.Input

	ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput
	ToUserBaseSchemaPropertyMapOutputWithContext(context.Context) UserBaseSchemaPropertyMapOutput
}

type UserBaseSchemaPropertyMap map[string]UserBaseSchemaPropertyInput

func (UserBaseSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*UserBaseSchemaProperty)(nil))
}

func (i UserBaseSchemaPropertyMap) ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput {
	return i.ToUserBaseSchemaPropertyMapOutputWithContext(context.Background())
}

func (i UserBaseSchemaPropertyMap) ToUserBaseSchemaPropertyMapOutputWithContext(ctx context.Context) UserBaseSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserBaseSchemaPropertyMapOutput)
}

type UserBaseSchemaPropertyOutput struct {
	*pulumi.OutputState
}

func (UserBaseSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserBaseSchemaProperty)(nil))
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyOutput() UserBaseSchemaPropertyOutput {
	return o
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyOutputWithContext(ctx context.Context) UserBaseSchemaPropertyOutput {
	return o
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyPtrOutput() UserBaseSchemaPropertyPtrOutput {
	return o.ToUserBaseSchemaPropertyPtrOutputWithContext(context.Background())
}

func (o UserBaseSchemaPropertyOutput) ToUserBaseSchemaPropertyPtrOutputWithContext(ctx context.Context) UserBaseSchemaPropertyPtrOutput {
	return o.ApplyT(func(v UserBaseSchemaProperty) *UserBaseSchemaProperty {
		return &v
	}).(UserBaseSchemaPropertyPtrOutput)
}

type UserBaseSchemaPropertyPtrOutput struct {
	*pulumi.OutputState
}

func (UserBaseSchemaPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserBaseSchemaProperty)(nil))
}

func (o UserBaseSchemaPropertyPtrOutput) ToUserBaseSchemaPropertyPtrOutput() UserBaseSchemaPropertyPtrOutput {
	return o
}

func (o UserBaseSchemaPropertyPtrOutput) ToUserBaseSchemaPropertyPtrOutputWithContext(ctx context.Context) UserBaseSchemaPropertyPtrOutput {
	return o
}

type UserBaseSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserBaseSchemaProperty)(nil))
}

func (o UserBaseSchemaPropertyArrayOutput) ToUserBaseSchemaPropertyArrayOutput() UserBaseSchemaPropertyArrayOutput {
	return o
}

func (o UserBaseSchemaPropertyArrayOutput) ToUserBaseSchemaPropertyArrayOutputWithContext(ctx context.Context) UserBaseSchemaPropertyArrayOutput {
	return o
}

func (o UserBaseSchemaPropertyArrayOutput) Index(i pulumi.IntInput) UserBaseSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserBaseSchemaProperty {
		return vs[0].([]UserBaseSchemaProperty)[vs[1].(int)]
	}).(UserBaseSchemaPropertyOutput)
}

type UserBaseSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (UserBaseSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserBaseSchemaProperty)(nil))
}

func (o UserBaseSchemaPropertyMapOutput) ToUserBaseSchemaPropertyMapOutput() UserBaseSchemaPropertyMapOutput {
	return o
}

func (o UserBaseSchemaPropertyMapOutput) ToUserBaseSchemaPropertyMapOutputWithContext(ctx context.Context) UserBaseSchemaPropertyMapOutput {
	return o
}

func (o UserBaseSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) UserBaseSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserBaseSchemaProperty {
		return vs[0].(map[string]UserBaseSchemaProperty)[vs[1].(string)]
	}).(UserBaseSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterOutputType(UserBaseSchemaPropertyOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyPtrOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserBaseSchemaPropertyMapOutput{})
}
