// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get subscriptions of a Role with a specific type
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.LookupRoleSubscription(ctx, &okta.LookupRoleSubscriptionArgs{
//				NotificationType: "APP_IMPORT",
//				RoleType:         "SUPER_ADMIN",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRoleSubscription(ctx *pulumi.Context, args *LookupRoleSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupRoleSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoleSubscriptionResult
	err := ctx.Invoke("okta:index/getRoleSubscription:getRoleSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoleSubscription.
type LookupRoleSubscriptionArgs struct {
	// Type of the notification
	NotificationType string `pulumi:"notificationType"`
	// Type of the role
	RoleType string `pulumi:"roleType"`
}

// A collection of values returned by getRoleSubscription.
type LookupRoleSubscriptionResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Type of the notification
	NotificationType string `pulumi:"notificationType"`
	// Type of the role
	RoleType string `pulumi:"roleType"`
	// Status of subscription
	Status string `pulumi:"status"`
}

func LookupRoleSubscriptionOutput(ctx *pulumi.Context, args LookupRoleSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupRoleSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRoleSubscriptionResultOutput, error) {
			args := v.(LookupRoleSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:index/getRoleSubscription:getRoleSubscription", args, LookupRoleSubscriptionResultOutput{}, options).(LookupRoleSubscriptionResultOutput), nil
		}).(LookupRoleSubscriptionResultOutput)
}

// A collection of arguments for invoking getRoleSubscription.
type LookupRoleSubscriptionOutputArgs struct {
	// Type of the notification
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// Type of the role
	RoleType pulumi.StringInput `pulumi:"roleType"`
}

func (LookupRoleSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getRoleSubscription.
type LookupRoleSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupRoleSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleSubscriptionResult)(nil)).Elem()
}

func (o LookupRoleSubscriptionResultOutput) ToLookupRoleSubscriptionResultOutput() LookupRoleSubscriptionResultOutput {
	return o
}

func (o LookupRoleSubscriptionResultOutput) ToLookupRoleSubscriptionResultOutputWithContext(ctx context.Context) LookupRoleSubscriptionResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRoleSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Type of the notification
func (o LookupRoleSubscriptionResultOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleSubscriptionResult) string { return v.NotificationType }).(pulumi.StringOutput)
}

// Type of the role
func (o LookupRoleSubscriptionResultOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleSubscriptionResult) string { return v.RoleType }).(pulumi.StringOutput)
}

// Status of subscription
func (o LookupRoleSubscriptionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleSubscriptionResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleSubscriptionResultOutput{})
}
