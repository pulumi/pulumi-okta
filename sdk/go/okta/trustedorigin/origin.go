// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trustedorigin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Origin struct {
	pulumi.CustomResourceState

	// Whether the Trusted Origin is active or not - can only be issued post-creation
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// Unique name for this trusted origin
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique origin URL for this trusted origin
	Origin pulumi.StringOutput `pulumi:"origin"`
	// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewOrigin registers a new resource with the given unique name, arguments, and options.
func NewOrigin(ctx *pulumi.Context,
	name string, args *OriginArgs, opts ...pulumi.ResourceOption) (*Origin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Origin == nil {
		return nil, errors.New("invalid value for required argument 'Origin'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Origin
	err := ctx.RegisterResource("okta:trustedorigin/origin:Origin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrigin gets an existing Origin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrigin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OriginState, opts ...pulumi.ResourceOption) (*Origin, error) {
	var resource Origin
	err := ctx.ReadResource("okta:trustedorigin/origin:Origin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Origin resources.
type originState struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation
	Active *bool `pulumi:"active"`
	// Unique name for this trusted origin
	Name *string `pulumi:"name"`
	// Unique origin URL for this trusted origin
	Origin *string `pulumi:"origin"`
	// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
	Scopes []string `pulumi:"scopes"`
}

type OriginState struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation
	Active pulumi.BoolPtrInput
	// Unique name for this trusted origin
	Name pulumi.StringPtrInput
	// Unique origin URL for this trusted origin
	Origin pulumi.StringPtrInput
	// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
	Scopes pulumi.StringArrayInput
}

func (OriginState) ElementType() reflect.Type {
	return reflect.TypeOf((*originState)(nil)).Elem()
}

type originArgs struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation
	Active *bool `pulumi:"active"`
	// Unique name for this trusted origin
	Name *string `pulumi:"name"`
	// Unique origin URL for this trusted origin
	Origin string `pulumi:"origin"`
	// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a Origin resource.
type OriginArgs struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation
	Active pulumi.BoolPtrInput
	// Unique name for this trusted origin
	Name pulumi.StringPtrInput
	// Unique origin URL for this trusted origin
	Origin pulumi.StringInput
	// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
	Scopes pulumi.StringArrayInput
}

func (OriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*originArgs)(nil)).Elem()
}

type OriginInput interface {
	pulumi.Input

	ToOriginOutput() OriginOutput
	ToOriginOutputWithContext(ctx context.Context) OriginOutput
}

func (*Origin) ElementType() reflect.Type {
	return reflect.TypeOf((**Origin)(nil)).Elem()
}

func (i *Origin) ToOriginOutput() OriginOutput {
	return i.ToOriginOutputWithContext(context.Background())
}

func (i *Origin) ToOriginOutputWithContext(ctx context.Context) OriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginOutput)
}

func (i *Origin) ToOutput(ctx context.Context) pulumix.Output[*Origin] {
	return pulumix.Output[*Origin]{
		OutputState: i.ToOriginOutputWithContext(ctx).OutputState,
	}
}

// OriginArrayInput is an input type that accepts OriginArray and OriginArrayOutput values.
// You can construct a concrete instance of `OriginArrayInput` via:
//
//	OriginArray{ OriginArgs{...} }
type OriginArrayInput interface {
	pulumi.Input

	ToOriginArrayOutput() OriginArrayOutput
	ToOriginArrayOutputWithContext(context.Context) OriginArrayOutput
}

type OriginArray []OriginInput

func (OriginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Origin)(nil)).Elem()
}

func (i OriginArray) ToOriginArrayOutput() OriginArrayOutput {
	return i.ToOriginArrayOutputWithContext(context.Background())
}

func (i OriginArray) ToOriginArrayOutputWithContext(ctx context.Context) OriginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginArrayOutput)
}

func (i OriginArray) ToOutput(ctx context.Context) pulumix.Output[[]*Origin] {
	return pulumix.Output[[]*Origin]{
		OutputState: i.ToOriginArrayOutputWithContext(ctx).OutputState,
	}
}

// OriginMapInput is an input type that accepts OriginMap and OriginMapOutput values.
// You can construct a concrete instance of `OriginMapInput` via:
//
//	OriginMap{ "key": OriginArgs{...} }
type OriginMapInput interface {
	pulumi.Input

	ToOriginMapOutput() OriginMapOutput
	ToOriginMapOutputWithContext(context.Context) OriginMapOutput
}

type OriginMap map[string]OriginInput

func (OriginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Origin)(nil)).Elem()
}

func (i OriginMap) ToOriginMapOutput() OriginMapOutput {
	return i.ToOriginMapOutputWithContext(context.Background())
}

func (i OriginMap) ToOriginMapOutputWithContext(ctx context.Context) OriginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginMapOutput)
}

func (i OriginMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Origin] {
	return pulumix.Output[map[string]*Origin]{
		OutputState: i.ToOriginMapOutputWithContext(ctx).OutputState,
	}
}

type OriginOutput struct{ *pulumi.OutputState }

func (OriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Origin)(nil)).Elem()
}

func (o OriginOutput) ToOriginOutput() OriginOutput {
	return o
}

func (o OriginOutput) ToOriginOutputWithContext(ctx context.Context) OriginOutput {
	return o
}

func (o OriginOutput) ToOutput(ctx context.Context) pulumix.Output[*Origin] {
	return pulumix.Output[*Origin]{
		OutputState: o.OutputState,
	}
}

// Whether the Trusted Origin is active or not - can only be issued post-creation
func (o OriginOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Origin) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// Unique name for this trusted origin
func (o OriginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Origin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique origin URL for this trusted origin
func (o OriginOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Origin) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// Scopes of the Trusted Origin - can either be CORS or REDIRECT only
func (o OriginOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Origin) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OriginArrayOutput struct{ *pulumi.OutputState }

func (OriginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Origin)(nil)).Elem()
}

func (o OriginArrayOutput) ToOriginArrayOutput() OriginArrayOutput {
	return o
}

func (o OriginArrayOutput) ToOriginArrayOutputWithContext(ctx context.Context) OriginArrayOutput {
	return o
}

func (o OriginArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Origin] {
	return pulumix.Output[[]*Origin]{
		OutputState: o.OutputState,
	}
}

func (o OriginArrayOutput) Index(i pulumi.IntInput) OriginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Origin {
		return vs[0].([]*Origin)[vs[1].(int)]
	}).(OriginOutput)
}

type OriginMapOutput struct{ *pulumi.OutputState }

func (OriginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Origin)(nil)).Elem()
}

func (o OriginMapOutput) ToOriginMapOutput() OriginMapOutput {
	return o
}

func (o OriginMapOutput) ToOriginMapOutputWithContext(ctx context.Context) OriginMapOutput {
	return o
}

func (o OriginMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Origin] {
	return pulumix.Output[map[string]*Origin]{
		OutputState: o.OutputState,
	}
}

func (o OriginMapOutput) MapIndex(k pulumi.StringInput) OriginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Origin {
		return vs[0].(map[string]*Origin)[vs[1].(string)]
	}).(OriginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OriginInput)(nil)).Elem(), &Origin{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginArrayInput)(nil)).Elem(), OriginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginMapInput)(nil)).Elem(), OriginMap{})
	pulumi.RegisterOutputType(OriginOutput{})
	pulumi.RegisterOutputType(OriginArrayOutput{})
	pulumi.RegisterOutputType(OriginMapOutput{})
}
