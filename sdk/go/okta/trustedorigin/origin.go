// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package trustedorigin

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a Trusted Origin.
//
// This resource allows you to create and configure an Trusted Origin.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/trustedorigin"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := trustedorigin.NewOrigin(ctx, "example", &trustedorigin.OriginArgs{
// 			Origin: pulumi.String("https://example.com"),
// 			Scopes: pulumi.StringArray{
// 				pulumi.String("CORS"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Origin struct {
	pulumi.CustomResourceState

	// Whether the Trusted Origin is active or not - can only be issued post-creation.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// Name of the Trusted Origin Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The origin to trust.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// Scopes of the Trusted Origin - can be `"CORS"` and/or `"REDIRECT"`.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewOrigin registers a new resource with the given unique name, arguments, and options.
func NewOrigin(ctx *pulumi.Context,
	name string, args *OriginArgs, opts ...pulumi.ResourceOption) (*Origin, error) {
	if args == nil || args.Origin == nil {
		return nil, errors.New("missing required argument 'Origin'")
	}
	if args == nil || args.Scopes == nil {
		return nil, errors.New("missing required argument 'Scopes'")
	}
	if args == nil {
		args = &OriginArgs{}
	}
	var resource Origin
	err := ctx.RegisterResource("okta:trustedorigin/origin:Origin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrigin gets an existing Origin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrigin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OriginState, opts ...pulumi.ResourceOption) (*Origin, error) {
	var resource Origin
	err := ctx.ReadResource("okta:trustedorigin/origin:Origin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Origin resources.
type originState struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation.
	Active *bool `pulumi:"active"`
	// Name of the Trusted Origin Resource.
	Name *string `pulumi:"name"`
	// The origin to trust.
	Origin *string `pulumi:"origin"`
	// Scopes of the Trusted Origin - can be `"CORS"` and/or `"REDIRECT"`.
	Scopes []string `pulumi:"scopes"`
}

type OriginState struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation.
	Active pulumi.BoolPtrInput
	// Name of the Trusted Origin Resource.
	Name pulumi.StringPtrInput
	// The origin to trust.
	Origin pulumi.StringPtrInput
	// Scopes of the Trusted Origin - can be `"CORS"` and/or `"REDIRECT"`.
	Scopes pulumi.StringArrayInput
}

func (OriginState) ElementType() reflect.Type {
	return reflect.TypeOf((*originState)(nil)).Elem()
}

type originArgs struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation.
	Active *bool `pulumi:"active"`
	// Name of the Trusted Origin Resource.
	Name *string `pulumi:"name"`
	// The origin to trust.
	Origin string `pulumi:"origin"`
	// Scopes of the Trusted Origin - can be `"CORS"` and/or `"REDIRECT"`.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a Origin resource.
type OriginArgs struct {
	// Whether the Trusted Origin is active or not - can only be issued post-creation.
	Active pulumi.BoolPtrInput
	// Name of the Trusted Origin Resource.
	Name pulumi.StringPtrInput
	// The origin to trust.
	Origin pulumi.StringInput
	// Scopes of the Trusted Origin - can be `"CORS"` and/or `"REDIRECT"`.
	Scopes pulumi.StringArrayInput
}

func (OriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*originArgs)(nil)).Elem()
}
