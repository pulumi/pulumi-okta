// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testUser, err := user.NewUser(ctx, "testUser", &user.UserArgs{
//				FirstName: pulumi.String("TestAcc"),
//				LastName:  pulumi.String("Smith"),
//				Login:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//				Email:     pulumi.String("testAcc-replace_with_uuid@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewUserGroupMemberships(ctx, "testUserGroupMemberships", &okta.UserGroupMembershipsArgs{
//				UserId: testUser.ID(),
//				Groups: pulumi.StringArray{
//					okta_group.Test_1.Id,
//					okta_group.Test_2.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserGroupMemberships struct {
	pulumi.CustomResourceState

	// The list of Okta group IDs which the user should have membership managed for.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Okta user ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserGroupMemberships registers a new resource with the given unique name, arguments, and options.
func NewUserGroupMemberships(ctx *pulumi.Context,
	name string, args *UserGroupMembershipsArgs, opts ...pulumi.ResourceOption) (*UserGroupMemberships, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupMemberships
	err := ctx.RegisterResource("okta:index/userGroupMemberships:UserGroupMemberships", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupMemberships gets an existing UserGroupMemberships resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupMemberships(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupMembershipsState, opts ...pulumi.ResourceOption) (*UserGroupMemberships, error) {
	var resource UserGroupMemberships
	err := ctx.ReadResource("okta:index/userGroupMemberships:UserGroupMemberships", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupMemberships resources.
type userGroupMembershipsState struct {
	// The list of Okta group IDs which the user should have membership managed for.
	Groups []string `pulumi:"groups"`
	// Okta user ID.
	UserId *string `pulumi:"userId"`
}

type UserGroupMembershipsState struct {
	// The list of Okta group IDs which the user should have membership managed for.
	Groups pulumi.StringArrayInput
	// Okta user ID.
	UserId pulumi.StringPtrInput
}

func (UserGroupMembershipsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipsState)(nil)).Elem()
}

type userGroupMembershipsArgs struct {
	// The list of Okta group IDs which the user should have membership managed for.
	Groups []string `pulumi:"groups"`
	// Okta user ID.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserGroupMemberships resource.
type UserGroupMembershipsArgs struct {
	// The list of Okta group IDs which the user should have membership managed for.
	Groups pulumi.StringArrayInput
	// Okta user ID.
	UserId pulumi.StringInput
}

func (UserGroupMembershipsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipsArgs)(nil)).Elem()
}

type UserGroupMembershipsInput interface {
	pulumi.Input

	ToUserGroupMembershipsOutput() UserGroupMembershipsOutput
	ToUserGroupMembershipsOutputWithContext(ctx context.Context) UserGroupMembershipsOutput
}

func (*UserGroupMemberships) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMemberships)(nil)).Elem()
}

func (i *UserGroupMemberships) ToUserGroupMembershipsOutput() UserGroupMembershipsOutput {
	return i.ToUserGroupMembershipsOutputWithContext(context.Background())
}

func (i *UserGroupMemberships) ToUserGroupMembershipsOutputWithContext(ctx context.Context) UserGroupMembershipsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipsOutput)
}

func (i *UserGroupMemberships) ToOutput(ctx context.Context) pulumix.Output[*UserGroupMemberships] {
	return pulumix.Output[*UserGroupMemberships]{
		OutputState: i.ToUserGroupMembershipsOutputWithContext(ctx).OutputState,
	}
}

// UserGroupMembershipsArrayInput is an input type that accepts UserGroupMembershipsArray and UserGroupMembershipsArrayOutput values.
// You can construct a concrete instance of `UserGroupMembershipsArrayInput` via:
//
//	UserGroupMembershipsArray{ UserGroupMembershipsArgs{...} }
type UserGroupMembershipsArrayInput interface {
	pulumi.Input

	ToUserGroupMembershipsArrayOutput() UserGroupMembershipsArrayOutput
	ToUserGroupMembershipsArrayOutputWithContext(context.Context) UserGroupMembershipsArrayOutput
}

type UserGroupMembershipsArray []UserGroupMembershipsInput

func (UserGroupMembershipsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMemberships)(nil)).Elem()
}

func (i UserGroupMembershipsArray) ToUserGroupMembershipsArrayOutput() UserGroupMembershipsArrayOutput {
	return i.ToUserGroupMembershipsArrayOutputWithContext(context.Background())
}

func (i UserGroupMembershipsArray) ToUserGroupMembershipsArrayOutputWithContext(ctx context.Context) UserGroupMembershipsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipsArrayOutput)
}

func (i UserGroupMembershipsArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserGroupMemberships] {
	return pulumix.Output[[]*UserGroupMemberships]{
		OutputState: i.ToUserGroupMembershipsArrayOutputWithContext(ctx).OutputState,
	}
}

// UserGroupMembershipsMapInput is an input type that accepts UserGroupMembershipsMap and UserGroupMembershipsMapOutput values.
// You can construct a concrete instance of `UserGroupMembershipsMapInput` via:
//
//	UserGroupMembershipsMap{ "key": UserGroupMembershipsArgs{...} }
type UserGroupMembershipsMapInput interface {
	pulumi.Input

	ToUserGroupMembershipsMapOutput() UserGroupMembershipsMapOutput
	ToUserGroupMembershipsMapOutputWithContext(context.Context) UserGroupMembershipsMapOutput
}

type UserGroupMembershipsMap map[string]UserGroupMembershipsInput

func (UserGroupMembershipsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMemberships)(nil)).Elem()
}

func (i UserGroupMembershipsMap) ToUserGroupMembershipsMapOutput() UserGroupMembershipsMapOutput {
	return i.ToUserGroupMembershipsMapOutputWithContext(context.Background())
}

func (i UserGroupMembershipsMap) ToUserGroupMembershipsMapOutputWithContext(ctx context.Context) UserGroupMembershipsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipsMapOutput)
}

func (i UserGroupMembershipsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserGroupMemberships] {
	return pulumix.Output[map[string]*UserGroupMemberships]{
		OutputState: i.ToUserGroupMembershipsMapOutputWithContext(ctx).OutputState,
	}
}

type UserGroupMembershipsOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMemberships)(nil)).Elem()
}

func (o UserGroupMembershipsOutput) ToUserGroupMembershipsOutput() UserGroupMembershipsOutput {
	return o
}

func (o UserGroupMembershipsOutput) ToUserGroupMembershipsOutputWithContext(ctx context.Context) UserGroupMembershipsOutput {
	return o
}

func (o UserGroupMembershipsOutput) ToOutput(ctx context.Context) pulumix.Output[*UserGroupMemberships] {
	return pulumix.Output[*UserGroupMemberships]{
		OutputState: o.OutputState,
	}
}

// The list of Okta group IDs which the user should have membership managed for.
func (o UserGroupMembershipsOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserGroupMemberships) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// Okta user ID.
func (o UserGroupMembershipsOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupMemberships) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserGroupMembershipsArrayOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMemberships)(nil)).Elem()
}

func (o UserGroupMembershipsArrayOutput) ToUserGroupMembershipsArrayOutput() UserGroupMembershipsArrayOutput {
	return o
}

func (o UserGroupMembershipsArrayOutput) ToUserGroupMembershipsArrayOutputWithContext(ctx context.Context) UserGroupMembershipsArrayOutput {
	return o
}

func (o UserGroupMembershipsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserGroupMemberships] {
	return pulumix.Output[[]*UserGroupMemberships]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupMembershipsArrayOutput) Index(i pulumi.IntInput) UserGroupMembershipsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupMemberships {
		return vs[0].([]*UserGroupMemberships)[vs[1].(int)]
	}).(UserGroupMembershipsOutput)
}

type UserGroupMembershipsMapOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMemberships)(nil)).Elem()
}

func (o UserGroupMembershipsMapOutput) ToUserGroupMembershipsMapOutput() UserGroupMembershipsMapOutput {
	return o
}

func (o UserGroupMembershipsMapOutput) ToUserGroupMembershipsMapOutputWithContext(ctx context.Context) UserGroupMembershipsMapOutput {
	return o
}

func (o UserGroupMembershipsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserGroupMemberships] {
	return pulumix.Output[map[string]*UserGroupMemberships]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupMembershipsMapOutput) MapIndex(k pulumi.StringInput) UserGroupMembershipsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupMemberships {
		return vs[0].(map[string]*UserGroupMemberships)[vs[1].(string)]
	}).(UserGroupMembershipsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipsInput)(nil)).Elem(), &UserGroupMemberships{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipsArrayInput)(nil)).Elem(), UserGroupMembershipsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipsMapInput)(nil)).Elem(), UserGroupMembershipsMap{})
	pulumi.RegisterOutputType(UserGroupMembershipsOutput{})
	pulumi.RegisterOutputType(UserGroupMembershipsArrayOutput{})
	pulumi.RegisterOutputType(UserGroupMembershipsMapOutput{})
}
