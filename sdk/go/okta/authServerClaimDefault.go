// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AuthServerClaimDefault struct {
	pulumi.CustomResourceState

	// Specifies whether to include claims in token.
	AlwaysIncludeInToken pulumi.BoolOutput `pulumi:"alwaysIncludeInToken"`
	// Auth server ID
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
	ClaimType pulumi.StringOutput `pulumi:"claimType"`
	// Default auth server claim name
	Name pulumi.StringOutput `pulumi:"name"`
	// Auth server claim list of scopes
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The status of the application.
	Status pulumi.StringOutput `pulumi:"status"`
	// The value of the claim.
	Value pulumi.StringPtrOutput `pulumi:"value"`
	// The type of value of the claim.
	ValueType pulumi.StringOutput `pulumi:"valueType"`
}

// NewAuthServerClaimDefault registers a new resource with the given unique name, arguments, and options.
func NewAuthServerClaimDefault(ctx *pulumi.Context,
	name string, args *AuthServerClaimDefaultArgs, opts ...pulumi.ResourceOption) (*AuthServerClaimDefault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthServerClaimDefault
	err := ctx.RegisterResource("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthServerClaimDefault gets an existing AuthServerClaimDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthServerClaimDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthServerClaimDefaultState, opts ...pulumi.ResourceOption) (*AuthServerClaimDefault, error) {
	var resource AuthServerClaimDefault
	err := ctx.ReadResource("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthServerClaimDefault resources.
type authServerClaimDefaultState struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// Auth server ID
	AuthServerId *string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
	ClaimType *string `pulumi:"claimType"`
	// Default auth server claim name
	Name *string `pulumi:"name"`
	// Auth server claim list of scopes
	Scopes []string `pulumi:"scopes"`
	// The status of the application.
	Status *string `pulumi:"status"`
	// The value of the claim.
	Value *string `pulumi:"value"`
	// The type of value of the claim.
	ValueType *string `pulumi:"valueType"`
}

type AuthServerClaimDefaultState struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// Auth server ID
	AuthServerId pulumi.StringPtrInput
	// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
	ClaimType pulumi.StringPtrInput
	// Default auth server claim name
	Name pulumi.StringPtrInput
	// Auth server claim list of scopes
	Scopes pulumi.StringArrayInput
	// The status of the application.
	Status pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringPtrInput
	// The type of value of the claim.
	ValueType pulumi.StringPtrInput
}

func (AuthServerClaimDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerClaimDefaultState)(nil)).Elem()
}

type authServerClaimDefaultArgs struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
	// Default auth server claim name
	Name *string `pulumi:"name"`
	// The value of the claim.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a AuthServerClaimDefault resource.
type AuthServerClaimDefaultArgs struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// Auth server ID
	AuthServerId pulumi.StringInput
	// Default auth server claim name
	Name pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringPtrInput
}

func (AuthServerClaimDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerClaimDefaultArgs)(nil)).Elem()
}

type AuthServerClaimDefaultInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput
	ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput
}

func (*AuthServerClaimDefault) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerClaimDefault)(nil)).Elem()
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput {
	return i.ToAuthServerClaimDefaultOutputWithContext(context.Background())
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultOutput)
}

func (i *AuthServerClaimDefault) ToOutput(ctx context.Context) pulumix.Output[*AuthServerClaimDefault] {
	return pulumix.Output[*AuthServerClaimDefault]{
		OutputState: i.ToAuthServerClaimDefaultOutputWithContext(ctx).OutputState,
	}
}

// AuthServerClaimDefaultArrayInput is an input type that accepts AuthServerClaimDefaultArray and AuthServerClaimDefaultArrayOutput values.
// You can construct a concrete instance of `AuthServerClaimDefaultArrayInput` via:
//
//	AuthServerClaimDefaultArray{ AuthServerClaimDefaultArgs{...} }
type AuthServerClaimDefaultArrayInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput
	ToAuthServerClaimDefaultArrayOutputWithContext(context.Context) AuthServerClaimDefaultArrayOutput
}

type AuthServerClaimDefaultArray []AuthServerClaimDefaultInput

func (AuthServerClaimDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthServerClaimDefault)(nil)).Elem()
}

func (i AuthServerClaimDefaultArray) ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput {
	return i.ToAuthServerClaimDefaultArrayOutputWithContext(context.Background())
}

func (i AuthServerClaimDefaultArray) ToAuthServerClaimDefaultArrayOutputWithContext(ctx context.Context) AuthServerClaimDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultArrayOutput)
}

func (i AuthServerClaimDefaultArray) ToOutput(ctx context.Context) pulumix.Output[[]*AuthServerClaimDefault] {
	return pulumix.Output[[]*AuthServerClaimDefault]{
		OutputState: i.ToAuthServerClaimDefaultArrayOutputWithContext(ctx).OutputState,
	}
}

// AuthServerClaimDefaultMapInput is an input type that accepts AuthServerClaimDefaultMap and AuthServerClaimDefaultMapOutput values.
// You can construct a concrete instance of `AuthServerClaimDefaultMapInput` via:
//
//	AuthServerClaimDefaultMap{ "key": AuthServerClaimDefaultArgs{...} }
type AuthServerClaimDefaultMapInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput
	ToAuthServerClaimDefaultMapOutputWithContext(context.Context) AuthServerClaimDefaultMapOutput
}

type AuthServerClaimDefaultMap map[string]AuthServerClaimDefaultInput

func (AuthServerClaimDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthServerClaimDefault)(nil)).Elem()
}

func (i AuthServerClaimDefaultMap) ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput {
	return i.ToAuthServerClaimDefaultMapOutputWithContext(context.Background())
}

func (i AuthServerClaimDefaultMap) ToAuthServerClaimDefaultMapOutputWithContext(ctx context.Context) AuthServerClaimDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultMapOutput)
}

func (i AuthServerClaimDefaultMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AuthServerClaimDefault] {
	return pulumix.Output[map[string]*AuthServerClaimDefault]{
		OutputState: i.ToAuthServerClaimDefaultMapOutputWithContext(ctx).OutputState,
	}
}

type AuthServerClaimDefaultOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerClaimDefault)(nil)).Elem()
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput {
	return o
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput {
	return o
}

func (o AuthServerClaimDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthServerClaimDefault] {
	return pulumix.Output[*AuthServerClaimDefault]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to include claims in token.
func (o AuthServerClaimDefaultOutput) AlwaysIncludeInToken() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.BoolOutput { return v.AlwaysIncludeInToken }).(pulumi.BoolOutput)
}

// Auth server ID
func (o AuthServerClaimDefaultOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringOutput { return v.AuthServerId }).(pulumi.StringOutput)
}

// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
func (o AuthServerClaimDefaultOutput) ClaimType() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringOutput { return v.ClaimType }).(pulumi.StringOutput)
}

// Default auth server claim name
func (o AuthServerClaimDefaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Auth server claim list of scopes
func (o AuthServerClaimDefaultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The status of the application.
func (o AuthServerClaimDefaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The value of the claim.
func (o AuthServerClaimDefaultOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

// The type of value of the claim.
func (o AuthServerClaimDefaultOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) pulumi.StringOutput { return v.ValueType }).(pulumi.StringOutput)
}

type AuthServerClaimDefaultArrayOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthServerClaimDefault)(nil)).Elem()
}

func (o AuthServerClaimDefaultArrayOutput) ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput {
	return o
}

func (o AuthServerClaimDefaultArrayOutput) ToAuthServerClaimDefaultArrayOutputWithContext(ctx context.Context) AuthServerClaimDefaultArrayOutput {
	return o
}

func (o AuthServerClaimDefaultArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AuthServerClaimDefault] {
	return pulumix.Output[[]*AuthServerClaimDefault]{
		OutputState: o.OutputState,
	}
}

func (o AuthServerClaimDefaultArrayOutput) Index(i pulumi.IntInput) AuthServerClaimDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthServerClaimDefault {
		return vs[0].([]*AuthServerClaimDefault)[vs[1].(int)]
	}).(AuthServerClaimDefaultOutput)
}

type AuthServerClaimDefaultMapOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthServerClaimDefault)(nil)).Elem()
}

func (o AuthServerClaimDefaultMapOutput) ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput {
	return o
}

func (o AuthServerClaimDefaultMapOutput) ToAuthServerClaimDefaultMapOutputWithContext(ctx context.Context) AuthServerClaimDefaultMapOutput {
	return o
}

func (o AuthServerClaimDefaultMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AuthServerClaimDefault] {
	return pulumix.Output[map[string]*AuthServerClaimDefault]{
		OutputState: o.OutputState,
	}
}

func (o AuthServerClaimDefaultMapOutput) MapIndex(k pulumi.StringInput) AuthServerClaimDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthServerClaimDefault {
		return vs[0].(map[string]*AuthServerClaimDefault)[vs[1].(string)]
	}).(AuthServerClaimDefaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultInput)(nil)).Elem(), &AuthServerClaimDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultArrayInput)(nil)).Elem(), AuthServerClaimDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultMapInput)(nil)).Elem(), AuthServerClaimDefaultMap{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultOutput{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultArrayOutput{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultMapOutput{})
}
