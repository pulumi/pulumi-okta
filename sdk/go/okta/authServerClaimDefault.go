// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures Default Authorization Server Claim.
//
// This resource allows you to configure Default Authorization Server Claims.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewAuthServerClaimDefault(ctx, "example", &okta.AuthServerClaimDefaultArgs{
// 			AuthServerId: pulumi.String("<auth server id>"),
// 			Value:        pulumi.String("(appuser != null) ? appuser.userName : app.clientId"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Authorization Server Claim can be imported via the Auth Server ID and Claim ID or Claim Name.
//
// ```sh
//  $ pulumi import okta:index/authServerClaimDefault:AuthServerClaimDefault example <auth server id>/<claim id>
// ```
//
//  or
//
// ```sh
//  $ pulumi import okta:index/authServerClaimDefault:AuthServerClaimDefault example <auth server id>/<claim name>
// ```
type AuthServerClaimDefault struct {
	pulumi.CustomResourceState

	// Specifies whether to include claims in token.
	AlwaysIncludeInToken pulumi.BoolOutput `pulumi:"alwaysIncludeInToken"`
	// ID of the authorization server.
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringOutput `pulumi:"claimType"`
	// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
	// `"emailVerified"`, `"familyName"`, `"gender"`, `"givenName"`, `"locale"`, `"middleName"`, `"name"`, `"nickname"`,
	// `"phoneNumber"`, `"picture"`, `"preferredUsername"`, `"profile"`, `"updatedAt"`, `"website"`, `"zoneinfo"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The status of the application.
	Status pulumi.StringOutput `pulumi:"status"`
	// The value of the claim. Only required for `"sub"` claim.
	Value pulumi.StringPtrOutput `pulumi:"value"`
	// The type of value of the claim.
	ValueType pulumi.StringOutput `pulumi:"valueType"`
}

// NewAuthServerClaimDefault registers a new resource with the given unique name, arguments, and options.
func NewAuthServerClaimDefault(ctx *pulumi.Context,
	name string, args *AuthServerClaimDefaultArgs, opts ...pulumi.ResourceOption) (*AuthServerClaimDefault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	var resource AuthServerClaimDefault
	err := ctx.RegisterResource("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthServerClaimDefault gets an existing AuthServerClaimDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthServerClaimDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthServerClaimDefaultState, opts ...pulumi.ResourceOption) (*AuthServerClaimDefault, error) {
	var resource AuthServerClaimDefault
	err := ctx.ReadResource("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthServerClaimDefault resources.
type authServerClaimDefaultState struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// ID of the authorization server.
	AuthServerId *string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType *string `pulumi:"claimType"`
	// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
	// `"emailVerified"`, `"familyName"`, `"gender"`, `"givenName"`, `"locale"`, `"middleName"`, `"name"`, `"nickname"`,
	// `"phoneNumber"`, `"picture"`, `"preferredUsername"`, `"profile"`, `"updatedAt"`, `"website"`, `"zoneinfo"`.
	Name *string `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes []string `pulumi:"scopes"`
	// The status of the application.
	Status *string `pulumi:"status"`
	// The value of the claim. Only required for `"sub"` claim.
	Value *string `pulumi:"value"`
	// The type of value of the claim.
	ValueType *string `pulumi:"valueType"`
}

type AuthServerClaimDefaultState struct {
	// Specifies whether to include claims in token.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// ID of the authorization server.
	AuthServerId pulumi.StringPtrInput
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringPtrInput
	// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
	// `"emailVerified"`, `"familyName"`, `"gender"`, `"givenName"`, `"locale"`, `"middleName"`, `"name"`, `"nickname"`,
	// `"phoneNumber"`, `"picture"`, `"preferredUsername"`, `"profile"`, `"updatedAt"`, `"website"`, `"zoneinfo"`.
	Name pulumi.StringPtrInput
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayInput
	// The status of the application.
	Status pulumi.StringPtrInput
	// The value of the claim. Only required for `"sub"` claim.
	Value pulumi.StringPtrInput
	// The type of value of the claim.
	ValueType pulumi.StringPtrInput
}

func (AuthServerClaimDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerClaimDefaultState)(nil)).Elem()
}

type authServerClaimDefaultArgs struct {
	// ID of the authorization server.
	AuthServerId string `pulumi:"authServerId"`
	// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
	// `"emailVerified"`, `"familyName"`, `"gender"`, `"givenName"`, `"locale"`, `"middleName"`, `"name"`, `"nickname"`,
	// `"phoneNumber"`, `"picture"`, `"preferredUsername"`, `"profile"`, `"updatedAt"`, `"website"`, `"zoneinfo"`.
	Name *string `pulumi:"name"`
	// The value of the claim. Only required for `"sub"` claim.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a AuthServerClaimDefault resource.
type AuthServerClaimDefaultArgs struct {
	// ID of the authorization server.
	AuthServerId pulumi.StringInput
	// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
	// `"emailVerified"`, `"familyName"`, `"gender"`, `"givenName"`, `"locale"`, `"middleName"`, `"name"`, `"nickname"`,
	// `"phoneNumber"`, `"picture"`, `"preferredUsername"`, `"profile"`, `"updatedAt"`, `"website"`, `"zoneinfo"`.
	Name pulumi.StringPtrInput
	// The value of the claim. Only required for `"sub"` claim.
	Value pulumi.StringPtrInput
}

func (AuthServerClaimDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerClaimDefaultArgs)(nil)).Elem()
}

type AuthServerClaimDefaultInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput
	ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput
}

func (*AuthServerClaimDefault) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServerClaimDefault)(nil))
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput {
	return i.ToAuthServerClaimDefaultOutputWithContext(context.Background())
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultOutput)
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultPtrOutput() AuthServerClaimDefaultPtrOutput {
	return i.ToAuthServerClaimDefaultPtrOutputWithContext(context.Background())
}

func (i *AuthServerClaimDefault) ToAuthServerClaimDefaultPtrOutputWithContext(ctx context.Context) AuthServerClaimDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultPtrOutput)
}

type AuthServerClaimDefaultPtrInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultPtrOutput() AuthServerClaimDefaultPtrOutput
	ToAuthServerClaimDefaultPtrOutputWithContext(ctx context.Context) AuthServerClaimDefaultPtrOutput
}

type authServerClaimDefaultPtrType AuthServerClaimDefaultArgs

func (*authServerClaimDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerClaimDefault)(nil))
}

func (i *authServerClaimDefaultPtrType) ToAuthServerClaimDefaultPtrOutput() AuthServerClaimDefaultPtrOutput {
	return i.ToAuthServerClaimDefaultPtrOutputWithContext(context.Background())
}

func (i *authServerClaimDefaultPtrType) ToAuthServerClaimDefaultPtrOutputWithContext(ctx context.Context) AuthServerClaimDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultPtrOutput)
}

// AuthServerClaimDefaultArrayInput is an input type that accepts AuthServerClaimDefaultArray and AuthServerClaimDefaultArrayOutput values.
// You can construct a concrete instance of `AuthServerClaimDefaultArrayInput` via:
//
//          AuthServerClaimDefaultArray{ AuthServerClaimDefaultArgs{...} }
type AuthServerClaimDefaultArrayInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput
	ToAuthServerClaimDefaultArrayOutputWithContext(context.Context) AuthServerClaimDefaultArrayOutput
}

type AuthServerClaimDefaultArray []AuthServerClaimDefaultInput

func (AuthServerClaimDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthServerClaimDefault)(nil)).Elem()
}

func (i AuthServerClaimDefaultArray) ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput {
	return i.ToAuthServerClaimDefaultArrayOutputWithContext(context.Background())
}

func (i AuthServerClaimDefaultArray) ToAuthServerClaimDefaultArrayOutputWithContext(ctx context.Context) AuthServerClaimDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultArrayOutput)
}

// AuthServerClaimDefaultMapInput is an input type that accepts AuthServerClaimDefaultMap and AuthServerClaimDefaultMapOutput values.
// You can construct a concrete instance of `AuthServerClaimDefaultMapInput` via:
//
//          AuthServerClaimDefaultMap{ "key": AuthServerClaimDefaultArgs{...} }
type AuthServerClaimDefaultMapInput interface {
	pulumi.Input

	ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput
	ToAuthServerClaimDefaultMapOutputWithContext(context.Context) AuthServerClaimDefaultMapOutput
}

type AuthServerClaimDefaultMap map[string]AuthServerClaimDefaultInput

func (AuthServerClaimDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthServerClaimDefault)(nil)).Elem()
}

func (i AuthServerClaimDefaultMap) ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput {
	return i.ToAuthServerClaimDefaultMapOutputWithContext(context.Background())
}

func (i AuthServerClaimDefaultMap) ToAuthServerClaimDefaultMapOutputWithContext(ctx context.Context) AuthServerClaimDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerClaimDefaultMapOutput)
}

type AuthServerClaimDefaultOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServerClaimDefault)(nil))
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultOutput() AuthServerClaimDefaultOutput {
	return o
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultOutputWithContext(ctx context.Context) AuthServerClaimDefaultOutput {
	return o
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultPtrOutput() AuthServerClaimDefaultPtrOutput {
	return o.ToAuthServerClaimDefaultPtrOutputWithContext(context.Background())
}

func (o AuthServerClaimDefaultOutput) ToAuthServerClaimDefaultPtrOutputWithContext(ctx context.Context) AuthServerClaimDefaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthServerClaimDefault) *AuthServerClaimDefault {
		return &v
	}).(AuthServerClaimDefaultPtrOutput)
}

type AuthServerClaimDefaultPtrOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerClaimDefault)(nil))
}

func (o AuthServerClaimDefaultPtrOutput) ToAuthServerClaimDefaultPtrOutput() AuthServerClaimDefaultPtrOutput {
	return o
}

func (o AuthServerClaimDefaultPtrOutput) ToAuthServerClaimDefaultPtrOutputWithContext(ctx context.Context) AuthServerClaimDefaultPtrOutput {
	return o
}

func (o AuthServerClaimDefaultPtrOutput) Elem() AuthServerClaimDefaultOutput {
	return o.ApplyT(func(v *AuthServerClaimDefault) AuthServerClaimDefault {
		if v != nil {
			return *v
		}
		var ret AuthServerClaimDefault
		return ret
	}).(AuthServerClaimDefaultOutput)
}

type AuthServerClaimDefaultArrayOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthServerClaimDefault)(nil))
}

func (o AuthServerClaimDefaultArrayOutput) ToAuthServerClaimDefaultArrayOutput() AuthServerClaimDefaultArrayOutput {
	return o
}

func (o AuthServerClaimDefaultArrayOutput) ToAuthServerClaimDefaultArrayOutputWithContext(ctx context.Context) AuthServerClaimDefaultArrayOutput {
	return o
}

func (o AuthServerClaimDefaultArrayOutput) Index(i pulumi.IntInput) AuthServerClaimDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthServerClaimDefault {
		return vs[0].([]AuthServerClaimDefault)[vs[1].(int)]
	}).(AuthServerClaimDefaultOutput)
}

type AuthServerClaimDefaultMapOutput struct{ *pulumi.OutputState }

func (AuthServerClaimDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AuthServerClaimDefault)(nil))
}

func (o AuthServerClaimDefaultMapOutput) ToAuthServerClaimDefaultMapOutput() AuthServerClaimDefaultMapOutput {
	return o
}

func (o AuthServerClaimDefaultMapOutput) ToAuthServerClaimDefaultMapOutputWithContext(ctx context.Context) AuthServerClaimDefaultMapOutput {
	return o
}

func (o AuthServerClaimDefaultMapOutput) MapIndex(k pulumi.StringInput) AuthServerClaimDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AuthServerClaimDefault {
		return vs[0].(map[string]AuthServerClaimDefault)[vs[1].(string)]
	}).(AuthServerClaimDefaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultInput)(nil)).Elem(), &AuthServerClaimDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultPtrInput)(nil)).Elem(), &AuthServerClaimDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultArrayInput)(nil)).Elem(), AuthServerClaimDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthServerClaimDefaultMapInput)(nil)).Elem(), AuthServerClaimDefaultMap{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultOutput{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultPtrOutput{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultArrayOutput{})
	pulumi.RegisterOutputType(AuthServerClaimDefaultMapOutput{})
}
