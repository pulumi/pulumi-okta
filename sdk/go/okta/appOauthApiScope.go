// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages API scopes for OAuth applications.
//
// This resource allows you to grant or revoke API scopes for OAuth2 applications within your organization.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewAppOauthApiScope(ctx, "example", &okta.AppOauthApiScopeArgs{
// 			AppId:  pulumi.String("<application_id>"),
// 			Issuer: pulumi.String("<your org domain>"),
// 			Scopes: pulumi.StringArray{
// 				pulumi.String("okta.users.read"),
// 				pulumi.String("okta.users.manage"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// OAuth API scopes can be imported via the Okta Application ID.
//
// ```sh
//  $ pulumi import okta:index/appOauthApiScope:AppOauthApiScope example <app id>
// ```
type AppOauthApiScope struct {
	pulumi.CustomResourceState

	// ID of the application.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The issuer of your Org Authorization Server, your Org URL.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// List of scopes for which consent is granted.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewAppOauthApiScope registers a new resource with the given unique name, arguments, and options.
func NewAppOauthApiScope(ctx *pulumi.Context,
	name string, args *AppOauthApiScopeArgs, opts ...pulumi.ResourceOption) (*AppOauthApiScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	var resource AppOauthApiScope
	err := ctx.RegisterResource("okta:index/appOauthApiScope:AppOauthApiScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppOauthApiScope gets an existing AppOauthApiScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppOauthApiScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppOauthApiScopeState, opts ...pulumi.ResourceOption) (*AppOauthApiScope, error) {
	var resource AppOauthApiScope
	err := ctx.ReadResource("okta:index/appOauthApiScope:AppOauthApiScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppOauthApiScope resources.
type appOauthApiScopeState struct {
	// ID of the application.
	AppId *string `pulumi:"appId"`
	// The issuer of your Org Authorization Server, your Org URL.
	Issuer *string `pulumi:"issuer"`
	// List of scopes for which consent is granted.
	Scopes []string `pulumi:"scopes"`
}

type AppOauthApiScopeState struct {
	// ID of the application.
	AppId pulumi.StringPtrInput
	// The issuer of your Org Authorization Server, your Org URL.
	Issuer pulumi.StringPtrInput
	// List of scopes for which consent is granted.
	Scopes pulumi.StringArrayInput
}

func (AppOauthApiScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*appOauthApiScopeState)(nil)).Elem()
}

type appOauthApiScopeArgs struct {
	// ID of the application.
	AppId string `pulumi:"appId"`
	// The issuer of your Org Authorization Server, your Org URL.
	Issuer string `pulumi:"issuer"`
	// List of scopes for which consent is granted.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a AppOauthApiScope resource.
type AppOauthApiScopeArgs struct {
	// ID of the application.
	AppId pulumi.StringInput
	// The issuer of your Org Authorization Server, your Org URL.
	Issuer pulumi.StringInput
	// List of scopes for which consent is granted.
	Scopes pulumi.StringArrayInput
}

func (AppOauthApiScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appOauthApiScopeArgs)(nil)).Elem()
}

type AppOauthApiScopeInput interface {
	pulumi.Input

	ToAppOauthApiScopeOutput() AppOauthApiScopeOutput
	ToAppOauthApiScopeOutputWithContext(ctx context.Context) AppOauthApiScopeOutput
}

func (*AppOauthApiScope) ElementType() reflect.Type {
	return reflect.TypeOf((**AppOauthApiScope)(nil)).Elem()
}

func (i *AppOauthApiScope) ToAppOauthApiScopeOutput() AppOauthApiScopeOutput {
	return i.ToAppOauthApiScopeOutputWithContext(context.Background())
}

func (i *AppOauthApiScope) ToAppOauthApiScopeOutputWithContext(ctx context.Context) AppOauthApiScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthApiScopeOutput)
}

// AppOauthApiScopeArrayInput is an input type that accepts AppOauthApiScopeArray and AppOauthApiScopeArrayOutput values.
// You can construct a concrete instance of `AppOauthApiScopeArrayInput` via:
//
//          AppOauthApiScopeArray{ AppOauthApiScopeArgs{...} }
type AppOauthApiScopeArrayInput interface {
	pulumi.Input

	ToAppOauthApiScopeArrayOutput() AppOauthApiScopeArrayOutput
	ToAppOauthApiScopeArrayOutputWithContext(context.Context) AppOauthApiScopeArrayOutput
}

type AppOauthApiScopeArray []AppOauthApiScopeInput

func (AppOauthApiScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppOauthApiScope)(nil)).Elem()
}

func (i AppOauthApiScopeArray) ToAppOauthApiScopeArrayOutput() AppOauthApiScopeArrayOutput {
	return i.ToAppOauthApiScopeArrayOutputWithContext(context.Background())
}

func (i AppOauthApiScopeArray) ToAppOauthApiScopeArrayOutputWithContext(ctx context.Context) AppOauthApiScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthApiScopeArrayOutput)
}

// AppOauthApiScopeMapInput is an input type that accepts AppOauthApiScopeMap and AppOauthApiScopeMapOutput values.
// You can construct a concrete instance of `AppOauthApiScopeMapInput` via:
//
//          AppOauthApiScopeMap{ "key": AppOauthApiScopeArgs{...} }
type AppOauthApiScopeMapInput interface {
	pulumi.Input

	ToAppOauthApiScopeMapOutput() AppOauthApiScopeMapOutput
	ToAppOauthApiScopeMapOutputWithContext(context.Context) AppOauthApiScopeMapOutput
}

type AppOauthApiScopeMap map[string]AppOauthApiScopeInput

func (AppOauthApiScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppOauthApiScope)(nil)).Elem()
}

func (i AppOauthApiScopeMap) ToAppOauthApiScopeMapOutput() AppOauthApiScopeMapOutput {
	return i.ToAppOauthApiScopeMapOutputWithContext(context.Background())
}

func (i AppOauthApiScopeMap) ToAppOauthApiScopeMapOutputWithContext(ctx context.Context) AppOauthApiScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthApiScopeMapOutput)
}

type AppOauthApiScopeOutput struct{ *pulumi.OutputState }

func (AppOauthApiScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppOauthApiScope)(nil)).Elem()
}

func (o AppOauthApiScopeOutput) ToAppOauthApiScopeOutput() AppOauthApiScopeOutput {
	return o
}

func (o AppOauthApiScopeOutput) ToAppOauthApiScopeOutputWithContext(ctx context.Context) AppOauthApiScopeOutput {
	return o
}

type AppOauthApiScopeArrayOutput struct{ *pulumi.OutputState }

func (AppOauthApiScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppOauthApiScope)(nil)).Elem()
}

func (o AppOauthApiScopeArrayOutput) ToAppOauthApiScopeArrayOutput() AppOauthApiScopeArrayOutput {
	return o
}

func (o AppOauthApiScopeArrayOutput) ToAppOauthApiScopeArrayOutputWithContext(ctx context.Context) AppOauthApiScopeArrayOutput {
	return o
}

func (o AppOauthApiScopeArrayOutput) Index(i pulumi.IntInput) AppOauthApiScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppOauthApiScope {
		return vs[0].([]*AppOauthApiScope)[vs[1].(int)]
	}).(AppOauthApiScopeOutput)
}

type AppOauthApiScopeMapOutput struct{ *pulumi.OutputState }

func (AppOauthApiScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppOauthApiScope)(nil)).Elem()
}

func (o AppOauthApiScopeMapOutput) ToAppOauthApiScopeMapOutput() AppOauthApiScopeMapOutput {
	return o
}

func (o AppOauthApiScopeMapOutput) ToAppOauthApiScopeMapOutputWithContext(ctx context.Context) AppOauthApiScopeMapOutput {
	return o
}

func (o AppOauthApiScopeMapOutput) MapIndex(k pulumi.StringInput) AppOauthApiScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppOauthApiScope {
		return vs[0].(map[string]*AppOauthApiScope)[vs[1].(string)]
	}).(AppOauthApiScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthApiScopeInput)(nil)).Elem(), &AppOauthApiScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthApiScopeArrayInput)(nil)).Elem(), AppOauthApiScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthApiScopeMapInput)(nil)).Elem(), AppOauthApiScopeMap{})
	pulumi.RegisterOutputType(AppOauthApiScopeOutput{})
	pulumi.RegisterOutputType(AppOauthApiScopeArrayOutput{})
	pulumi.RegisterOutputType(AppOauthApiScopeMapOutput{})
}
