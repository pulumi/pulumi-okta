// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a domain from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := okta.NewDomain(ctx, "example", &okta.DomainArgs{
//				Name: pulumi.String("www.example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.LookupDomain(ctx, &okta.LookupDomainArgs{
//				DomainIdOrName: "www.example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ = okta.LookupDomainOutput(ctx, okta.GetDomainOutputArgs{
//				DomainIdOrName: example.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainResult
	err := ctx.Invoke("okta:index/getDomain:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomain.
type LookupDomainArgs struct {
	// Brand ID
	DomainIdOrName string `pulumi:"domainIdOrName"`
}

// A collection of values returned by getDomain.
type LookupDomainResult struct {
	// Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED
	CertificateSourceType string `pulumi:"certificateSourceType"`
	// TXT and CNAME records to be registered for the Domain
	DnsRecords []GetDomainDnsRecord `pulumi:"dnsRecords"`
	// Domain name
	Domain string `pulumi:"domain"`
	// Brand ID
	DomainIdOrName string `pulumi:"domainIdOrName"`
	// The ID of the Domain
	Id string `pulumi:"id"`
	// Certificate metadata for the Domain
	PublicCertificate map[string]string `pulumi:"publicCertificate"`
	// Status of the domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
	ValidationStatus string `pulumi:"validationStatus"`
}

func LookupDomainOutput(ctx *pulumi.Context, args LookupDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDomainResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDomainResultOutput, error) {
			args := v.(LookupDomainArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:index/getDomain:getDomain", args, LookupDomainResultOutput{}, options).(LookupDomainResultOutput), nil
		}).(LookupDomainResultOutput)
}

// A collection of arguments for invoking getDomain.
type LookupDomainOutputArgs struct {
	// Brand ID
	DomainIdOrName pulumi.StringInput `pulumi:"domainIdOrName"`
}

func (LookupDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainArgs)(nil)).Elem()
}

// A collection of values returned by getDomain.
type LookupDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainResult)(nil)).Elem()
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutput() LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutputWithContext(ctx context.Context) LookupDomainResultOutput {
	return o
}

// Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED
func (o LookupDomainResultOutput) CertificateSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.CertificateSourceType }).(pulumi.StringOutput)
}

// TXT and CNAME records to be registered for the Domain
func (o LookupDomainResultOutput) DnsRecords() GetDomainDnsRecordArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []GetDomainDnsRecord { return v.DnsRecords }).(GetDomainDnsRecordArrayOutput)
}

// Domain name
func (o LookupDomainResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Domain }).(pulumi.StringOutput)
}

// Brand ID
func (o LookupDomainResultOutput) DomainIdOrName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.DomainIdOrName }).(pulumi.StringOutput)
}

// The ID of the Domain
func (o LookupDomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate metadata for the Domain
func (o LookupDomainResultOutput) PublicCertificate() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDomainResult) map[string]string { return v.PublicCertificate }).(pulumi.StringMapOutput)
}

// Status of the domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
func (o LookupDomainResultOutput) ValidationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.ValidationStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainResultOutput{})
}
