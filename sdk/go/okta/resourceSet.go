// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Resource Sets as custom collections of resources. This resource allows the creation and manipulation of Okta Resource Sets as custom collections of Okta resources. You can use Okta Resource Sets to assign Custom Roles to administrators who are scoped to the designated resources.
// The 'resources' field supports the following:
//   - Apps
//   - Groups
//   - All Users within a Group
//   - All Users within the org
//   - All Groups within the org
//   - All Apps within the org
//   - All Apps of the same type
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/resourceSet:ResourceSet example <resource_set_id>
// ```
type ResourceSet struct {
	pulumi.CustomResourceState

	// A description of the Resource Set
	Description pulumi.StringOutput `pulumi:"description"`
	// Unique name given to the Resource Set
	Label pulumi.StringOutput `pulumi:"label"`
	// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
	// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
	ResourcesOrns pulumi.StringArrayOutput `pulumi:"resourcesOrns"`
}

// NewResourceSet registers a new resource with the given unique name, arguments, and options.
func NewResourceSet(ctx *pulumi.Context,
	name string, args *ResourceSetArgs, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceSet
	err := ctx.RegisterResource("okta:index/resourceSet:ResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSet gets an existing ResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSetState, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	var resource ResourceSet
	err := ctx.ReadResource("okta:index/resourceSet:ResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSet resources.
type resourceSetState struct {
	// A description of the Resource Set
	Description *string `pulumi:"description"`
	// Unique name given to the Resource Set
	Label *string `pulumi:"label"`
	// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
	Resources []string `pulumi:"resources"`
	// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
	ResourcesOrns []string `pulumi:"resourcesOrns"`
}

type ResourceSetState struct {
	// A description of the Resource Set
	Description pulumi.StringPtrInput
	// Unique name given to the Resource Set
	Label pulumi.StringPtrInput
	// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
	Resources pulumi.StringArrayInput
	// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
	ResourcesOrns pulumi.StringArrayInput
}

func (ResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetState)(nil)).Elem()
}

type resourceSetArgs struct {
	// A description of the Resource Set
	Description string `pulumi:"description"`
	// Unique name given to the Resource Set
	Label string `pulumi:"label"`
	// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
	Resources []string `pulumi:"resources"`
	// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
	ResourcesOrns []string `pulumi:"resourcesOrns"`
}

// The set of arguments for constructing a ResourceSet resource.
type ResourceSetArgs struct {
	// A description of the Resource Set
	Description pulumi.StringInput
	// Unique name given to the Resource Set
	Label pulumi.StringInput
	// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
	Resources pulumi.StringArrayInput
	// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
	ResourcesOrns pulumi.StringArrayInput
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetArgs)(nil)).Elem()
}

type ResourceSetInput interface {
	pulumi.Input

	ToResourceSetOutput() ResourceSetOutput
	ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput
}

func (*ResourceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (i *ResourceSet) ToResourceSetOutput() ResourceSetOutput {
	return i.ToResourceSetOutputWithContext(context.Background())
}

func (i *ResourceSet) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput)
}

// ResourceSetArrayInput is an input type that accepts ResourceSetArray and ResourceSetArrayOutput values.
// You can construct a concrete instance of `ResourceSetArrayInput` via:
//
//	ResourceSetArray{ ResourceSetArgs{...} }
type ResourceSetArrayInput interface {
	pulumi.Input

	ToResourceSetArrayOutput() ResourceSetArrayOutput
	ToResourceSetArrayOutputWithContext(context.Context) ResourceSetArrayOutput
}

type ResourceSetArray []ResourceSetInput

func (ResourceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetArray) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return i.ToResourceSetArrayOutputWithContext(context.Background())
}

func (i ResourceSetArray) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetArrayOutput)
}

// ResourceSetMapInput is an input type that accepts ResourceSetMap and ResourceSetMapOutput values.
// You can construct a concrete instance of `ResourceSetMapInput` via:
//
//	ResourceSetMap{ "key": ResourceSetArgs{...} }
type ResourceSetMapInput interface {
	pulumi.Input

	ToResourceSetMapOutput() ResourceSetMapOutput
	ToResourceSetMapOutputWithContext(context.Context) ResourceSetMapOutput
}

type ResourceSetMap map[string]ResourceSetInput

func (ResourceSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetMap) ToResourceSetMapOutput() ResourceSetMapOutput {
	return i.ToResourceSetMapOutputWithContext(context.Background())
}

func (i ResourceSetMap) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetMapOutput)
}

type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

// A description of the Resource Set
func (o ResourceSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Unique name given to the Resource Set
func (o ResourceSetOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The endpoints that reference the resources to be included in the new Resource Set. At least one endpoint must be specified when creating resource set.
func (o ResourceSetOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringArrayOutput { return v.Resources }).(pulumi.StringArrayOutput)
}

// The orn(Okta Resource Name) of the resources to be included in the new Resource Set. At least one orn must be specified when creating resource set.
func (o ResourceSetOutput) ResourcesOrns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringArrayOutput { return v.ResourcesOrns }).(pulumi.StringArrayOutput)
}

type ResourceSetArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) Index(i pulumi.IntInput) ResourceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].([]*ResourceSet)[vs[1].(int)]
	}).(ResourceSetOutput)
}

type ResourceSetMapOutput struct{ *pulumi.OutputState }

func (ResourceSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetMapOutput) ToResourceSetMapOutput() ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) MapIndex(k pulumi.StringInput) ResourceSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].(map[string]*ResourceSet)[vs[1].(string)]
	}).(ResourceSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetInput)(nil)).Elem(), &ResourceSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetArrayInput)(nil)).Elem(), ResourceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetMapInput)(nil)).Elem(), ResourceSetMap{})
	pulumi.RegisterOutputType(ResourceSetOutput{})
	pulumi.RegisterOutputType(ResourceSetArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetMapOutput{})
}
