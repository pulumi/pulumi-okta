// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//
// Use this data source to retrieve an authenticator.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.LookupAuthenticator(ctx, &okta.LookupAuthenticatorArgs{
//				Name: pulumi.StringRef("Security Question"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.LookupAuthenticator(ctx, &okta.LookupAuthenticatorArgs{
//				Key: pulumi.StringRef("okta_email"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuthenticator(ctx *pulumi.Context, args *LookupAuthenticatorArgs, opts ...pulumi.InvokeOption) (*LookupAuthenticatorResult, error) {
	var rv LookupAuthenticatorResult
	err := ctx.Invoke("okta:index/getAuthenticator:getAuthenticator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthenticator.
type LookupAuthenticatorArgs struct {
	// ID of the authenticator.
	Id *string `pulumi:"id"`
	// A human-readable string that identifies the authenticator.
	Key *string `pulumi:"key"`
	// Name of the authenticator.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAuthenticator.
type LookupAuthenticatorResult struct {
	// ID of the authenticator.
	Id  *string `pulumi:"id"`
	Key *string `pulumi:"key"`
	// Name of the authenticator.
	Name                     *string `pulumi:"name"`
	ProviderAuthPort         int     `pulumi:"providerAuthPort"`
	ProviderHostname         string  `pulumi:"providerHostname"`
	ProviderInstanceId       string  `pulumi:"providerInstanceId"`
	ProviderType             string  `pulumi:"providerType"`
	ProviderUserNameTemplate string  `pulumi:"providerUserNameTemplate"`
	// Settings for the authenticator.
	Settings string `pulumi:"settings"`
	Status   string `pulumi:"status"`
	// Type of the Authenticator.
	Type string `pulumi:"type"`
}

func LookupAuthenticatorOutput(ctx *pulumi.Context, args LookupAuthenticatorOutputArgs, opts ...pulumi.InvokeOption) LookupAuthenticatorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthenticatorResult, error) {
			args := v.(LookupAuthenticatorArgs)
			r, err := LookupAuthenticator(ctx, &args, opts...)
			var s LookupAuthenticatorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuthenticatorResultOutput)
}

// A collection of arguments for invoking getAuthenticator.
type LookupAuthenticatorOutputArgs struct {
	// ID of the authenticator.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A human-readable string that identifies the authenticator.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the authenticator.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAuthenticatorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatorArgs)(nil)).Elem()
}

// A collection of values returned by getAuthenticator.
type LookupAuthenticatorResultOutput struct{ *pulumi.OutputState }

func (LookupAuthenticatorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatorResult)(nil)).Elem()
}

func (o LookupAuthenticatorResultOutput) ToLookupAuthenticatorResultOutput() LookupAuthenticatorResultOutput {
	return o
}

func (o LookupAuthenticatorResultOutput) ToLookupAuthenticatorResultOutputWithContext(ctx context.Context) LookupAuthenticatorResultOutput {
	return o
}

// ID of the authenticator.
func (o LookupAuthenticatorResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupAuthenticatorResultOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the authenticator.
func (o LookupAuthenticatorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupAuthenticatorResultOutput) ProviderAuthPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) int { return v.ProviderAuthPort }).(pulumi.IntOutput)
}

func (o LookupAuthenticatorResultOutput) ProviderHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.ProviderHostname }).(pulumi.StringOutput)
}

func (o LookupAuthenticatorResultOutput) ProviderInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.ProviderInstanceId }).(pulumi.StringOutput)
}

func (o LookupAuthenticatorResultOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.ProviderType }).(pulumi.StringOutput)
}

func (o LookupAuthenticatorResultOutput) ProviderUserNameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.ProviderUserNameTemplate }).(pulumi.StringOutput)
}

// Settings for the authenticator.
func (o LookupAuthenticatorResultOutput) Settings() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.Settings }).(pulumi.StringOutput)
}

func (o LookupAuthenticatorResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.Status }).(pulumi.StringOutput)
}

// Type of the Authenticator.
func (o LookupAuthenticatorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthenticatorResultOutput{})
}
