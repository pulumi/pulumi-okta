// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PolicyMfaDefault struct {
	pulumi.CustomResourceState

	// Default group ID (always included)
	DefaultIncludedGroupId pulumi.StringOutput `pulumi:"defaultIncludedGroupId"`
	// Default policy description
	Description  pulumi.StringOutput    `pulumi:"description"`
	Duo          pulumi.StringMapOutput `pulumi:"duo"`
	ExternalIdp  pulumi.StringMapOutput `pulumi:"externalIdp"`
	FidoU2f      pulumi.StringMapOutput `pulumi:"fidoU2f"`
	FidoWebauthn pulumi.StringMapOutput `pulumi:"fidoWebauthn"`
	GoogleOtp    pulumi.StringMapOutput `pulumi:"googleOtp"`
	Hotp         pulumi.StringMapOutput `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie pulumi.BoolPtrOutput `pulumi:"isOie"`
	// Default policy name
	Name         pulumi.StringOutput    `pulumi:"name"`
	OktaCall     pulumi.StringMapOutput `pulumi:"oktaCall"`
	OktaEmail    pulumi.StringMapOutput `pulumi:"oktaEmail"`
	OktaOtp      pulumi.StringMapOutput `pulumi:"oktaOtp"`
	OktaPassword pulumi.StringMapOutput `pulumi:"oktaPassword"`
	OktaPush     pulumi.StringMapOutput `pulumi:"oktaPush"`
	OktaQuestion pulumi.StringMapOutput `pulumi:"oktaQuestion"`
	OktaSms      pulumi.StringMapOutput `pulumi:"oktaSms"`
	OktaVerify   pulumi.StringMapOutput `pulumi:"oktaVerify"`
	OnpremMfa    pulumi.StringMapOutput `pulumi:"onpremMfa"`
	PhoneNumber  pulumi.StringMapOutput `pulumi:"phoneNumber"`
	// Default policy priority
	Priority         pulumi.IntOutput       `pulumi:"priority"`
	RsaToken         pulumi.StringMapOutput `pulumi:"rsaToken"`
	SecurityQuestion pulumi.StringMapOutput `pulumi:"securityQuestion"`
	// Default policy status
	Status       pulumi.StringOutput    `pulumi:"status"`
	SymantecVip  pulumi.StringMapOutput `pulumi:"symantecVip"`
	Webauthn     pulumi.StringMapOutput `pulumi:"webauthn"`
	YubikeyToken pulumi.StringMapOutput `pulumi:"yubikeyToken"`
}

// NewPolicyMfaDefault registers a new resource with the given unique name, arguments, and options.
func NewPolicyMfaDefault(ctx *pulumi.Context,
	name string, args *PolicyMfaDefaultArgs, opts ...pulumi.ResourceOption) (*PolicyMfaDefault, error) {
	if args == nil {
		args = &PolicyMfaDefaultArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyMfaDefault
	err := ctx.RegisterResource("okta:index/policyMfaDefault:PolicyMfaDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyMfaDefault gets an existing PolicyMfaDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyMfaDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyMfaDefaultState, opts ...pulumi.ResourceOption) (*PolicyMfaDefault, error) {
	var resource PolicyMfaDefault
	err := ctx.ReadResource("okta:index/policyMfaDefault:PolicyMfaDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyMfaDefault resources.
type policyMfaDefaultState struct {
	// Default group ID (always included)
	DefaultIncludedGroupId *string `pulumi:"defaultIncludedGroupId"`
	// Default policy description
	Description  *string           `pulumi:"description"`
	Duo          map[string]string `pulumi:"duo"`
	ExternalIdp  map[string]string `pulumi:"externalIdp"`
	FidoU2f      map[string]string `pulumi:"fidoU2f"`
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	GoogleOtp    map[string]string `pulumi:"googleOtp"`
	Hotp         map[string]string `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie *bool `pulumi:"isOie"`
	// Default policy name
	Name         *string           `pulumi:"name"`
	OktaCall     map[string]string `pulumi:"oktaCall"`
	OktaEmail    map[string]string `pulumi:"oktaEmail"`
	OktaOtp      map[string]string `pulumi:"oktaOtp"`
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	OktaPush     map[string]string `pulumi:"oktaPush"`
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	OktaSms      map[string]string `pulumi:"oktaSms"`
	OktaVerify   map[string]string `pulumi:"oktaVerify"`
	OnpremMfa    map[string]string `pulumi:"onpremMfa"`
	PhoneNumber  map[string]string `pulumi:"phoneNumber"`
	// Default policy priority
	Priority         *int              `pulumi:"priority"`
	RsaToken         map[string]string `pulumi:"rsaToken"`
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Default policy status
	Status       *string           `pulumi:"status"`
	SymantecVip  map[string]string `pulumi:"symantecVip"`
	Webauthn     map[string]string `pulumi:"webauthn"`
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

type PolicyMfaDefaultState struct {
	// Default group ID (always included)
	DefaultIncludedGroupId pulumi.StringPtrInput
	// Default policy description
	Description  pulumi.StringPtrInput
	Duo          pulumi.StringMapInput
	ExternalIdp  pulumi.StringMapInput
	FidoU2f      pulumi.StringMapInput
	FidoWebauthn pulumi.StringMapInput
	GoogleOtp    pulumi.StringMapInput
	Hotp         pulumi.StringMapInput
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie pulumi.BoolPtrInput
	// Default policy name
	Name         pulumi.StringPtrInput
	OktaCall     pulumi.StringMapInput
	OktaEmail    pulumi.StringMapInput
	OktaOtp      pulumi.StringMapInput
	OktaPassword pulumi.StringMapInput
	OktaPush     pulumi.StringMapInput
	OktaQuestion pulumi.StringMapInput
	OktaSms      pulumi.StringMapInput
	OktaVerify   pulumi.StringMapInput
	OnpremMfa    pulumi.StringMapInput
	PhoneNumber  pulumi.StringMapInput
	// Default policy priority
	Priority         pulumi.IntPtrInput
	RsaToken         pulumi.StringMapInput
	SecurityQuestion pulumi.StringMapInput
	// Default policy status
	Status       pulumi.StringPtrInput
	SymantecVip  pulumi.StringMapInput
	Webauthn     pulumi.StringMapInput
	YubikeyToken pulumi.StringMapInput
}

func (PolicyMfaDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMfaDefaultState)(nil)).Elem()
}

type policyMfaDefaultArgs struct {
	Duo          map[string]string `pulumi:"duo"`
	ExternalIdp  map[string]string `pulumi:"externalIdp"`
	FidoU2f      map[string]string `pulumi:"fidoU2f"`
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	GoogleOtp    map[string]string `pulumi:"googleOtp"`
	Hotp         map[string]string `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie            *bool             `pulumi:"isOie"`
	OktaCall         map[string]string `pulumi:"oktaCall"`
	OktaEmail        map[string]string `pulumi:"oktaEmail"`
	OktaOtp          map[string]string `pulumi:"oktaOtp"`
	OktaPassword     map[string]string `pulumi:"oktaPassword"`
	OktaPush         map[string]string `pulumi:"oktaPush"`
	OktaQuestion     map[string]string `pulumi:"oktaQuestion"`
	OktaSms          map[string]string `pulumi:"oktaSms"`
	OktaVerify       map[string]string `pulumi:"oktaVerify"`
	OnpremMfa        map[string]string `pulumi:"onpremMfa"`
	PhoneNumber      map[string]string `pulumi:"phoneNumber"`
	RsaToken         map[string]string `pulumi:"rsaToken"`
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	SymantecVip      map[string]string `pulumi:"symantecVip"`
	Webauthn         map[string]string `pulumi:"webauthn"`
	YubikeyToken     map[string]string `pulumi:"yubikeyToken"`
}

// The set of arguments for constructing a PolicyMfaDefault resource.
type PolicyMfaDefaultArgs struct {
	Duo          pulumi.StringMapInput
	ExternalIdp  pulumi.StringMapInput
	FidoU2f      pulumi.StringMapInput
	FidoWebauthn pulumi.StringMapInput
	GoogleOtp    pulumi.StringMapInput
	Hotp         pulumi.StringMapInput
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie            pulumi.BoolPtrInput
	OktaCall         pulumi.StringMapInput
	OktaEmail        pulumi.StringMapInput
	OktaOtp          pulumi.StringMapInput
	OktaPassword     pulumi.StringMapInput
	OktaPush         pulumi.StringMapInput
	OktaQuestion     pulumi.StringMapInput
	OktaSms          pulumi.StringMapInput
	OktaVerify       pulumi.StringMapInput
	OnpremMfa        pulumi.StringMapInput
	PhoneNumber      pulumi.StringMapInput
	RsaToken         pulumi.StringMapInput
	SecurityQuestion pulumi.StringMapInput
	SymantecVip      pulumi.StringMapInput
	Webauthn         pulumi.StringMapInput
	YubikeyToken     pulumi.StringMapInput
}

func (PolicyMfaDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMfaDefaultArgs)(nil)).Elem()
}

type PolicyMfaDefaultInput interface {
	pulumi.Input

	ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput
	ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput
}

func (*PolicyMfaDefault) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMfaDefault)(nil)).Elem()
}

func (i *PolicyMfaDefault) ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput {
	return i.ToPolicyMfaDefaultOutputWithContext(context.Background())
}

func (i *PolicyMfaDefault) ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultOutput)
}

func (i *PolicyMfaDefault) ToOutput(ctx context.Context) pulumix.Output[*PolicyMfaDefault] {
	return pulumix.Output[*PolicyMfaDefault]{
		OutputState: i.ToPolicyMfaDefaultOutputWithContext(ctx).OutputState,
	}
}

// PolicyMfaDefaultArrayInput is an input type that accepts PolicyMfaDefaultArray and PolicyMfaDefaultArrayOutput values.
// You can construct a concrete instance of `PolicyMfaDefaultArrayInput` via:
//
//	PolicyMfaDefaultArray{ PolicyMfaDefaultArgs{...} }
type PolicyMfaDefaultArrayInput interface {
	pulumi.Input

	ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput
	ToPolicyMfaDefaultArrayOutputWithContext(context.Context) PolicyMfaDefaultArrayOutput
}

type PolicyMfaDefaultArray []PolicyMfaDefaultInput

func (PolicyMfaDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMfaDefault)(nil)).Elem()
}

func (i PolicyMfaDefaultArray) ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput {
	return i.ToPolicyMfaDefaultArrayOutputWithContext(context.Background())
}

func (i PolicyMfaDefaultArray) ToPolicyMfaDefaultArrayOutputWithContext(ctx context.Context) PolicyMfaDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultArrayOutput)
}

func (i PolicyMfaDefaultArray) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyMfaDefault] {
	return pulumix.Output[[]*PolicyMfaDefault]{
		OutputState: i.ToPolicyMfaDefaultArrayOutputWithContext(ctx).OutputState,
	}
}

// PolicyMfaDefaultMapInput is an input type that accepts PolicyMfaDefaultMap and PolicyMfaDefaultMapOutput values.
// You can construct a concrete instance of `PolicyMfaDefaultMapInput` via:
//
//	PolicyMfaDefaultMap{ "key": PolicyMfaDefaultArgs{...} }
type PolicyMfaDefaultMapInput interface {
	pulumi.Input

	ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput
	ToPolicyMfaDefaultMapOutputWithContext(context.Context) PolicyMfaDefaultMapOutput
}

type PolicyMfaDefaultMap map[string]PolicyMfaDefaultInput

func (PolicyMfaDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMfaDefault)(nil)).Elem()
}

func (i PolicyMfaDefaultMap) ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput {
	return i.ToPolicyMfaDefaultMapOutputWithContext(context.Background())
}

func (i PolicyMfaDefaultMap) ToPolicyMfaDefaultMapOutputWithContext(ctx context.Context) PolicyMfaDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultMapOutput)
}

func (i PolicyMfaDefaultMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyMfaDefault] {
	return pulumix.Output[map[string]*PolicyMfaDefault]{
		OutputState: i.ToPolicyMfaDefaultMapOutputWithContext(ctx).OutputState,
	}
}

type PolicyMfaDefaultOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultOutput) ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput {
	return o
}

func (o PolicyMfaDefaultOutput) ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput {
	return o
}

func (o PolicyMfaDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyMfaDefault] {
	return pulumix.Output[*PolicyMfaDefault]{
		OutputState: o.OutputState,
	}
}

// Default group ID (always included)
func (o PolicyMfaDefaultOutput) DefaultIncludedGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.DefaultIncludedGroupId }).(pulumi.StringOutput)
}

// Default policy description
func (o PolicyMfaDefaultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PolicyMfaDefaultOutput) Duo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Duo }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) ExternalIdp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.ExternalIdp }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) FidoU2f() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.FidoU2f }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) FidoWebauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.FidoWebauthn }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) GoogleOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.GoogleOtp }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) Hotp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Hotp }).(pulumi.StringMapOutput)
}

// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
func (o PolicyMfaDefaultOutput) IsOie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.BoolPtrOutput { return v.IsOie }).(pulumi.BoolPtrOutput)
}

// Default policy name
func (o PolicyMfaDefaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyMfaDefaultOutput) OktaCall() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaCall }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaEmail() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaEmail }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaOtp }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaPassword() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaPassword }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaPush() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaPush }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaQuestion }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaSms() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaSms }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OktaVerify() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaVerify }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) OnpremMfa() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OnpremMfa }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) PhoneNumber() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.PhoneNumber }).(pulumi.StringMapOutput)
}

// Default policy priority
func (o PolicyMfaDefaultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o PolicyMfaDefaultOutput) RsaToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.RsaToken }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) SecurityQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.SecurityQuestion }).(pulumi.StringMapOutput)
}

// Default policy status
func (o PolicyMfaDefaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PolicyMfaDefaultOutput) SymantecVip() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.SymantecVip }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) Webauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Webauthn }).(pulumi.StringMapOutput)
}

func (o PolicyMfaDefaultOutput) YubikeyToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.YubikeyToken }).(pulumi.StringMapOutput)
}

type PolicyMfaDefaultArrayOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultArrayOutput) ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput {
	return o
}

func (o PolicyMfaDefaultArrayOutput) ToPolicyMfaDefaultArrayOutputWithContext(ctx context.Context) PolicyMfaDefaultArrayOutput {
	return o
}

func (o PolicyMfaDefaultArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyMfaDefault] {
	return pulumix.Output[[]*PolicyMfaDefault]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMfaDefaultArrayOutput) Index(i pulumi.IntInput) PolicyMfaDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyMfaDefault {
		return vs[0].([]*PolicyMfaDefault)[vs[1].(int)]
	}).(PolicyMfaDefaultOutput)
}

type PolicyMfaDefaultMapOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultMapOutput) ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput {
	return o
}

func (o PolicyMfaDefaultMapOutput) ToPolicyMfaDefaultMapOutputWithContext(ctx context.Context) PolicyMfaDefaultMapOutput {
	return o
}

func (o PolicyMfaDefaultMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyMfaDefault] {
	return pulumix.Output[map[string]*PolicyMfaDefault]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMfaDefaultMapOutput) MapIndex(k pulumi.StringInput) PolicyMfaDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyMfaDefault {
		return vs[0].(map[string]*PolicyMfaDefault)[vs[1].(string)]
	}).(PolicyMfaDefaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultInput)(nil)).Elem(), &PolicyMfaDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultArrayInput)(nil)).Elem(), PolicyMfaDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultMapInput)(nil)).Elem(), PolicyMfaDefaultMap{})
	pulumi.RegisterOutputType(PolicyMfaDefaultOutput{})
	pulumi.RegisterOutputType(PolicyMfaDefaultArrayOutput{})
	pulumi.RegisterOutputType(PolicyMfaDefaultMapOutput{})
}
