// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures default MFA Policy.
//
// This resource allows you to configure default MFA Policy.
//
// > Requires Org Feature Flag `OKTA_MFA_POLICY`. Contact support to have this feature flag ***enabled***.
//
// > Unless Org Feature Flag `ENG_ENABLE_OPTIONAL_PASSWORD_ENROLLMENT` is ***disabled*** `oktaPassword` or `oktaEmail` must be present and its `enroll` value set to `REQUIRED`. Contact support to have this feature flag ***disabled***.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewPolicyMfaDefault(ctx, "classic_example", &okta.PolicyMfaDefaultArgs{
//				IsOie: pulumi.Bool(false),
//				OktaPassword: pulumi.StringMap{
//					"enroll": pulumi.String("REQUIRED"),
//				},
//				OktaOtp: pulumi.StringMap{
//					"enroll": pulumi.String("REQUIRED"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewPolicyMfaDefault(ctx, "oie_example", &okta.PolicyMfaDefaultArgs{
//				IsOie: pulumi.Bool(true),
//				OktaPassword: pulumi.StringMap{
//					"enroll": pulumi.String("REQUIRED"),
//				},
//				OktaVerify: pulumi.StringMap{
//					"enroll": pulumi.String("REQUIRED"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > If the `PolicyMfaDefault` is used in conjunction with `policy.Mfa` resources, ensure to use a `dependsOn` attribute for the default policy to ensure that all other policies are created/updated first such that the `priority` field can be appropriately computed on the first plan/apply.
//
// ## Import
//
// Default MFA Policy can be imported without providing Okta ID.
//
// ```sh
// $ pulumi import okta:index/policyMfaDefault:PolicyMfaDefault example .
// ```
type PolicyMfaDefault struct {
	pulumi.CustomResourceState

	// ID of the default Okta group.
	DefaultIncludedGroupId pulumi.StringOutput `pulumi:"defaultIncludedGroupId"`
	// Default policy description.
	Description pulumi.StringOutput `pulumi:"description"`
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapOutput `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapOutput `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapOutput `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapOutput `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapOutput `pulumi:"googleOtp"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapOutput `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrOutput `pulumi:"isOie"`
	// Default policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapOutput `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapOutput `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapOutput `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapOutput `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapOutput `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapOutput `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapOutput `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapOutput `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapOutput `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapOutput `pulumi:"phoneNumber"`
	// Default policy priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapOutput `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapOutput `pulumi:"securityQuestion"`
	// Default policy status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapOutput `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapOutput `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapOutput `pulumi:"yubikeyToken"`
}

// NewPolicyMfaDefault registers a new resource with the given unique name, arguments, and options.
func NewPolicyMfaDefault(ctx *pulumi.Context,
	name string, args *PolicyMfaDefaultArgs, opts ...pulumi.ResourceOption) (*PolicyMfaDefault, error) {
	if args == nil {
		args = &PolicyMfaDefaultArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyMfaDefault
	err := ctx.RegisterResource("okta:index/policyMfaDefault:PolicyMfaDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyMfaDefault gets an existing PolicyMfaDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyMfaDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyMfaDefaultState, opts ...pulumi.ResourceOption) (*PolicyMfaDefault, error) {
	var resource PolicyMfaDefault
	err := ctx.ReadResource("okta:index/policyMfaDefault:PolicyMfaDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyMfaDefault resources.
type policyMfaDefaultState struct {
	// ID of the default Okta group.
	DefaultIncludedGroupId *string `pulumi:"defaultIncludedGroupId"`
	// Default policy description.
	Description *string `pulumi:"description"`
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo map[string]string `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp map[string]string `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp map[string]string `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie *bool `pulumi:"isOie"`
	// Default policy name.
	Name *string `pulumi:"name"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify map[string]string `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa map[string]string `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber map[string]string `pulumi:"phoneNumber"`
	// Default policy priority.
	Priority *int `pulumi:"priority"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Default policy status.
	Status *string `pulumi:"status"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn map[string]string `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

type PolicyMfaDefaultState struct {
	// ID of the default Okta group.
	DefaultIncludedGroupId pulumi.StringPtrInput
	// Default policy description.
	Description pulumi.StringPtrInput
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapInput
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapInput
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapInput
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapInput
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrInput
	// Default policy name.
	Name pulumi.StringPtrInput
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapInput
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapInput
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapInput
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapInput
	// Default policy priority.
	Priority pulumi.IntPtrInput
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapInput
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapInput
	// Default policy status.
	Status pulumi.StringPtrInput
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapInput
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapInput
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapInput
}

func (PolicyMfaDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMfaDefaultState)(nil)).Elem()
}

type policyMfaDefaultArgs struct {
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo map[string]string `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp map[string]string `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp map[string]string `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie *bool `pulumi:"isOie"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify map[string]string `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa map[string]string `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber map[string]string `pulumi:"phoneNumber"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn map[string]string `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

// The set of arguments for constructing a PolicyMfaDefault resource.
type PolicyMfaDefaultArgs struct {
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapInput
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapInput
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapInput
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapInput
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrInput
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapInput
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapInput
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapInput
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapInput
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapInput
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapInput
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapInput
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapInput
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapInput
}

func (PolicyMfaDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMfaDefaultArgs)(nil)).Elem()
}

type PolicyMfaDefaultInput interface {
	pulumi.Input

	ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput
	ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput
}

func (*PolicyMfaDefault) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMfaDefault)(nil)).Elem()
}

func (i *PolicyMfaDefault) ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput {
	return i.ToPolicyMfaDefaultOutputWithContext(context.Background())
}

func (i *PolicyMfaDefault) ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultOutput)
}

// PolicyMfaDefaultArrayInput is an input type that accepts PolicyMfaDefaultArray and PolicyMfaDefaultArrayOutput values.
// You can construct a concrete instance of `PolicyMfaDefaultArrayInput` via:
//
//	PolicyMfaDefaultArray{ PolicyMfaDefaultArgs{...} }
type PolicyMfaDefaultArrayInput interface {
	pulumi.Input

	ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput
	ToPolicyMfaDefaultArrayOutputWithContext(context.Context) PolicyMfaDefaultArrayOutput
}

type PolicyMfaDefaultArray []PolicyMfaDefaultInput

func (PolicyMfaDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMfaDefault)(nil)).Elem()
}

func (i PolicyMfaDefaultArray) ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput {
	return i.ToPolicyMfaDefaultArrayOutputWithContext(context.Background())
}

func (i PolicyMfaDefaultArray) ToPolicyMfaDefaultArrayOutputWithContext(ctx context.Context) PolicyMfaDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultArrayOutput)
}

// PolicyMfaDefaultMapInput is an input type that accepts PolicyMfaDefaultMap and PolicyMfaDefaultMapOutput values.
// You can construct a concrete instance of `PolicyMfaDefaultMapInput` via:
//
//	PolicyMfaDefaultMap{ "key": PolicyMfaDefaultArgs{...} }
type PolicyMfaDefaultMapInput interface {
	pulumi.Input

	ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput
	ToPolicyMfaDefaultMapOutputWithContext(context.Context) PolicyMfaDefaultMapOutput
}

type PolicyMfaDefaultMap map[string]PolicyMfaDefaultInput

func (PolicyMfaDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMfaDefault)(nil)).Elem()
}

func (i PolicyMfaDefaultMap) ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput {
	return i.ToPolicyMfaDefaultMapOutputWithContext(context.Background())
}

func (i PolicyMfaDefaultMap) ToPolicyMfaDefaultMapOutputWithContext(ctx context.Context) PolicyMfaDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMfaDefaultMapOutput)
}

type PolicyMfaDefaultOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultOutput) ToPolicyMfaDefaultOutput() PolicyMfaDefaultOutput {
	return o
}

func (o PolicyMfaDefaultOutput) ToPolicyMfaDefaultOutputWithContext(ctx context.Context) PolicyMfaDefaultOutput {
	return o
}

// ID of the default Okta group.
func (o PolicyMfaDefaultOutput) DefaultIncludedGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.DefaultIncludedGroupId }).(pulumi.StringOutput)
}

// Default policy description.
func (o PolicyMfaDefaultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// DUO MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) Duo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Duo }).(pulumi.StringMapOutput)
}

// External IDP MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) ExternalIdp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.ExternalIdp }).(pulumi.StringMapOutput)
}

// Fido U2F MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) FidoU2f() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.FidoU2f }).(pulumi.StringMapOutput)
}

// Fido Web Authn MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) FidoWebauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.FidoWebauthn }).(pulumi.StringMapOutput)
}

// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) GoogleOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.GoogleOtp }).(pulumi.StringMapOutput)
}

// HMAC-based One-Time Password MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) Hotp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Hotp }).(pulumi.StringMapOutput)
}

// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
func (o PolicyMfaDefaultOutput) IsOie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.BoolPtrOutput { return v.IsOie }).(pulumi.BoolPtrOutput)
}

// Default policy name.
func (o PolicyMfaDefaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Okta Call MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) OktaCall() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaCall }).(pulumi.StringMapOutput)
}

// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) OktaEmail() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaEmail }).(pulumi.StringMapOutput)
}

// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) OktaOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaOtp }).(pulumi.StringMapOutput)
}

// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) OktaPassword() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaPassword }).(pulumi.StringMapOutput)
}

// Okta Push MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) OktaPush() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaPush }).(pulumi.StringMapOutput)
}

// Okta Question MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) OktaQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaQuestion }).(pulumi.StringMapOutput)
}

// Okta SMS MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) OktaSms() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaSms }).(pulumi.StringMapOutput)
}

// Okta Verify MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) OktaVerify() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OktaVerify }).(pulumi.StringMapOutput)
}

// On-Prem MFA MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) OnpremMfa() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.OnpremMfa }).(pulumi.StringMapOutput)
}

// Phone Number MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) PhoneNumber() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.PhoneNumber }).(pulumi.StringMapOutput)
}

// Default policy priority.
func (o PolicyMfaDefaultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) RsaToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.RsaToken }).(pulumi.StringMapOutput)
}

// Security Question MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) SecurityQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.SecurityQuestion }).(pulumi.StringMapOutput)
}

// Default policy status.
func (o PolicyMfaDefaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Symantec VIP MFA policy settings (✓ Classic).
func (o PolicyMfaDefaultOutput) SymantecVip() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.SymantecVip }).(pulumi.StringMapOutput)
}

// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
func (o PolicyMfaDefaultOutput) Webauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.Webauthn }).(pulumi.StringMapOutput)
}

// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
func (o PolicyMfaDefaultOutput) YubikeyToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyMfaDefault) pulumi.StringMapOutput { return v.YubikeyToken }).(pulumi.StringMapOutput)
}

type PolicyMfaDefaultArrayOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultArrayOutput) ToPolicyMfaDefaultArrayOutput() PolicyMfaDefaultArrayOutput {
	return o
}

func (o PolicyMfaDefaultArrayOutput) ToPolicyMfaDefaultArrayOutputWithContext(ctx context.Context) PolicyMfaDefaultArrayOutput {
	return o
}

func (o PolicyMfaDefaultArrayOutput) Index(i pulumi.IntInput) PolicyMfaDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyMfaDefault {
		return vs[0].([]*PolicyMfaDefault)[vs[1].(int)]
	}).(PolicyMfaDefaultOutput)
}

type PolicyMfaDefaultMapOutput struct{ *pulumi.OutputState }

func (PolicyMfaDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMfaDefault)(nil)).Elem()
}

func (o PolicyMfaDefaultMapOutput) ToPolicyMfaDefaultMapOutput() PolicyMfaDefaultMapOutput {
	return o
}

func (o PolicyMfaDefaultMapOutput) ToPolicyMfaDefaultMapOutputWithContext(ctx context.Context) PolicyMfaDefaultMapOutput {
	return o
}

func (o PolicyMfaDefaultMapOutput) MapIndex(k pulumi.StringInput) PolicyMfaDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyMfaDefault {
		return vs[0].(map[string]*PolicyMfaDefault)[vs[1].(string)]
	}).(PolicyMfaDefaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultInput)(nil)).Elem(), &PolicyMfaDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultArrayInput)(nil)).Elem(), PolicyMfaDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMfaDefaultMapInput)(nil)).Elem(), PolicyMfaDefaultMap{})
	pulumi.RegisterOutputType(PolicyMfaDefaultOutput{})
	pulumi.RegisterOutputType(PolicyMfaDefaultArrayOutput{})
	pulumi.RegisterOutputType(PolicyMfaDefaultMapOutput{})
}
