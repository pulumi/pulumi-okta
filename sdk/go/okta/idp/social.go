// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Social Identity Provider. This resource allows you to create and configure a Social Identity Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/idp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := idp.NewSocial(ctx, "example", &idp.SocialArgs{
//				Type:         pulumi.String("FACEBOOK"),
//				ProtocolType: pulumi.String("OAUTH2"),
//				Name:         pulumi.String("testAcc_facebook_replace_with_uuid"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("public_profile"),
//					pulumi.String("email"),
//				},
//				ClientId:         pulumi.String("abcd123"),
//				ClientSecret:     pulumi.String("abcd123"),
//				UsernameTemplate: pulumi.String("idpuser.email"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:idp/social:Social example <idp_id>
// ```
type Social struct {
	pulumi.CustomResourceState

	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrOutput `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrOutput `pulumi:"appleKid"`
	// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
	ApplePrivateKey pulumi.StringPtrOutput `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId pulumi.StringPtrOutput `pulumi:"appleTeamId"`
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding pulumi.StringOutput `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl pulumi.StringOutput `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrOutput `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrOutput `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrOutput `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrOutput `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrOutput `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
	ProtocolType pulumi.StringPtrOutput `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The scopes of the IdP.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrOutput `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrOutput `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrOutput `pulumi:"suspendedAction"`
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding pulumi.StringOutput `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl pulumi.StringOutput `pulumi:"tokenUrl"`
	// Trust audience for the Okta IdP instance.
	TrustAudience pulumi.StringOutput `pulumi:"trustAudience"`
	// Trust issuer for the Okta IdP instance.
	TrustIssuer pulumi.StringOutput `pulumi:"trustIssuer"`
	// Trust kid for the Okta IdP instance.
	TrustKid pulumi.StringOutput `pulumi:"trustKid"`
	// Trust revocation for the Okta IdP instance.
	TrustRevocation pulumi.StringOutput `pulumi:"trustRevocation"`
	// Trust revocation cache lifetime for the Okta IdP instance.
	TrustRevocationCacheLifetime pulumi.IntOutput `pulumi:"trustRevocationCacheLifetime"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type pulumi.StringOutput `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewSocial registers a new resource with the given unique name, arguments, and options.
func NewSocial(ctx *pulumi.Context,
	name string, args *SocialArgs, opts ...pulumi.ResourceOption) (*Social, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApplePrivateKey != nil {
		args.ApplePrivateKey = pulumi.ToSecret(args.ApplePrivateKey).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applePrivateKey",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Social
	err := ctx.RegisterResource("okta:idp/social:Social", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSocial gets an existing Social resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSocial(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SocialState, opts ...pulumi.ResourceOption) (*Social, error) {
	var resource Social
	err := ctx.ReadResource("okta:idp/social:Social", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Social resources.
type socialState struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid *string `pulumi:"appleKid"`
	// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
	ApplePrivateKey *string `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId *string `pulumi:"appleTeamId"`
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding *string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId *string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret *string `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
	IssuerMode *string `pulumi:"issuerMode"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew *int `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name *string `pulumi:"name"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
	ProtocolType *string `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding *string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl *string `pulumi:"tokenUrl"`
	// Trust audience for the Okta IdP instance.
	TrustAudience *string `pulumi:"trustAudience"`
	// Trust issuer for the Okta IdP instance.
	TrustIssuer *string `pulumi:"trustIssuer"`
	// Trust kid for the Okta IdP instance.
	TrustKid *string `pulumi:"trustKid"`
	// Trust revocation for the Okta IdP instance.
	TrustRevocation *string `pulumi:"trustRevocation"`
	// Trust revocation cache lifetime for the Okta IdP instance.
	TrustRevocationCacheLifetime *int `pulumi:"trustRevocationCacheLifetime"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type *string `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type SocialState struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrInput
	// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
	ApplePrivateKey pulumi.StringPtrInput
	// The Team ID associated with your Apple developer account
	AppleTeamId pulumi.StringPtrInput
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding pulumi.StringPtrInput
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl pulumi.StringPtrInput
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringPtrInput
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringPtrInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrInput
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name pulumi.StringPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
	ProtocolType pulumi.StringPtrInput
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrInput
	// The scopes of the IdP.
	Scopes pulumi.StringArrayInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrInput
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding pulumi.StringPtrInput
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl pulumi.StringPtrInput
	// Trust audience for the Okta IdP instance.
	TrustAudience pulumi.StringPtrInput
	// Trust issuer for the Okta IdP instance.
	TrustIssuer pulumi.StringPtrInput
	// Trust kid for the Okta IdP instance.
	TrustKid pulumi.StringPtrInput
	// Trust revocation for the Okta IdP instance.
	TrustRevocation pulumi.StringPtrInput
	// Trust revocation cache lifetime for the Okta IdP instance.
	TrustRevocationCacheLifetime pulumi.IntPtrInput
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type pulumi.StringPtrInput
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrInput
}

func (SocialState) ElementType() reflect.Type {
	return reflect.TypeOf((*socialState)(nil)).Elem()
}

type socialArgs struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid *string `pulumi:"appleKid"`
	// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
	ApplePrivateKey *string `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId *string `pulumi:"appleTeamId"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId *string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret *string `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
	IssuerMode *string `pulumi:"issuerMode"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew *int `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name *string `pulumi:"name"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
	ProtocolType *string `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type string `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Social resource.
type SocialArgs struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrInput
	// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
	ApplePrivateKey pulumi.StringPtrInput
	// The Team ID associated with your Apple developer account
	AppleTeamId pulumi.StringPtrInput
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringPtrInput
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringPtrInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrInput
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name pulumi.StringPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
	ProtocolType pulumi.StringPtrInput
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrInput
	// The scopes of the IdP.
	Scopes pulumi.StringArrayInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrInput
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type pulumi.StringInput
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrInput
}

func (SocialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*socialArgs)(nil)).Elem()
}

type SocialInput interface {
	pulumi.Input

	ToSocialOutput() SocialOutput
	ToSocialOutputWithContext(ctx context.Context) SocialOutput
}

func (*Social) ElementType() reflect.Type {
	return reflect.TypeOf((**Social)(nil)).Elem()
}

func (i *Social) ToSocialOutput() SocialOutput {
	return i.ToSocialOutputWithContext(context.Background())
}

func (i *Social) ToSocialOutputWithContext(ctx context.Context) SocialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialOutput)
}

// SocialArrayInput is an input type that accepts SocialArray and SocialArrayOutput values.
// You can construct a concrete instance of `SocialArrayInput` via:
//
//	SocialArray{ SocialArgs{...} }
type SocialArrayInput interface {
	pulumi.Input

	ToSocialArrayOutput() SocialArrayOutput
	ToSocialArrayOutputWithContext(context.Context) SocialArrayOutput
}

type SocialArray []SocialInput

func (SocialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Social)(nil)).Elem()
}

func (i SocialArray) ToSocialArrayOutput() SocialArrayOutput {
	return i.ToSocialArrayOutputWithContext(context.Background())
}

func (i SocialArray) ToSocialArrayOutputWithContext(ctx context.Context) SocialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialArrayOutput)
}

// SocialMapInput is an input type that accepts SocialMap and SocialMapOutput values.
// You can construct a concrete instance of `SocialMapInput` via:
//
//	SocialMap{ "key": SocialArgs{...} }
type SocialMapInput interface {
	pulumi.Input

	ToSocialMapOutput() SocialMapOutput
	ToSocialMapOutputWithContext(context.Context) SocialMapOutput
}

type SocialMap map[string]SocialInput

func (SocialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Social)(nil)).Elem()
}

func (i SocialMap) ToSocialMapOutput() SocialMapOutput {
	return i.ToSocialMapOutputWithContext(context.Background())
}

func (i SocialMap) ToSocialMapOutputWithContext(ctx context.Context) SocialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialMapOutput)
}

type SocialOutput struct{ *pulumi.OutputState }

func (SocialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Social)(nil)).Elem()
}

func (o SocialOutput) ToSocialOutput() SocialOutput {
	return o
}

func (o SocialOutput) ToSocialOutputWithContext(ctx context.Context) SocialOutput {
	return o
}

// Specifies the account linking action for an IdP user. Default: `AUTO`
func (o SocialOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

// Group memberships to determine link candidates.
func (o SocialOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

// The Key ID that you obtained from Apple when you created the private key for the client
func (o SocialOutput) AppleKid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AppleKid }).(pulumi.StringPtrOutput)
}

// The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn't returned when importing this resource.
func (o SocialOutput) ApplePrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ApplePrivateKey }).(pulumi.StringPtrOutput)
}

// The Team ID associated with your Apple developer account
func (o SocialOutput) AppleTeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AppleTeamId }).(pulumi.StringPtrOutput)
}

// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
func (o SocialOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
func (o SocialOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

// Unique identifier issued by AS for the Okta IdP instance.
func (o SocialOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client secret issued by AS for the Okta IdP instance.
func (o SocialOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
func (o SocialOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
func (o SocialOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
func (o SocialOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
func (o SocialOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
func (o SocialOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
func (o SocialOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

// Maximum allowable clock-skew when processing messages from the IdP.
func (o SocialOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o SocialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines if the IdP should act as a source of truth for user profile attributes.
func (o SocialOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
func (o SocialOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

// Provisioning action for an IdP user during authentication. Default: `AUTO`
func (o SocialOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

// The scopes of the IdP.
func (o SocialOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Default to `ACTIVE`
func (o SocialOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
func (o SocialOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
func (o SocialOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
func (o SocialOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
func (o SocialOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TokenBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
func (o SocialOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TokenUrl }).(pulumi.StringOutput)
}

// Trust audience for the Okta IdP instance.
func (o SocialOutput) TrustAudience() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TrustAudience }).(pulumi.StringOutput)
}

// Trust issuer for the Okta IdP instance.
func (o SocialOutput) TrustIssuer() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TrustIssuer }).(pulumi.StringOutput)
}

// Trust kid for the Okta IdP instance.
func (o SocialOutput) TrustKid() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TrustKid }).(pulumi.StringOutput)
}

// Trust revocation for the Okta IdP instance.
func (o SocialOutput) TrustRevocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TrustRevocation }).(pulumi.StringOutput)
}

// Trust revocation cache lifetime for the Okta IdP instance.
func (o SocialOutput) TrustRevocationCacheLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v *Social) pulumi.IntOutput { return v.TrustRevocationCacheLifetime }).(pulumi.IntOutput)
}

// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
func (o SocialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
func (o SocialOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SocialArrayOutput struct{ *pulumi.OutputState }

func (SocialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Social)(nil)).Elem()
}

func (o SocialArrayOutput) ToSocialArrayOutput() SocialArrayOutput {
	return o
}

func (o SocialArrayOutput) ToSocialArrayOutputWithContext(ctx context.Context) SocialArrayOutput {
	return o
}

func (o SocialArrayOutput) Index(i pulumi.IntInput) SocialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Social {
		return vs[0].([]*Social)[vs[1].(int)]
	}).(SocialOutput)
}

type SocialMapOutput struct{ *pulumi.OutputState }

func (SocialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Social)(nil)).Elem()
}

func (o SocialMapOutput) ToSocialMapOutput() SocialMapOutput {
	return o
}

func (o SocialMapOutput) ToSocialMapOutputWithContext(ctx context.Context) SocialMapOutput {
	return o
}

func (o SocialMapOutput) MapIndex(k pulumi.StringInput) SocialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Social {
		return vs[0].(map[string]*Social)[vs[1].(string)]
	}).(SocialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SocialInput)(nil)).Elem(), &Social{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocialArrayInput)(nil)).Elem(), SocialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocialMapInput)(nil)).Elem(), SocialMap{})
	pulumi.RegisterOutputType(SocialOutput{})
	pulumi.RegisterOutputType(SocialArrayOutput{})
	pulumi.RegisterOutputType(SocialMapOutput{})
}
