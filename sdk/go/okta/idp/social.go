// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Social struct {
	pulumi.CustomResourceState

	AccountLinkAction        pulumi.StringPtrOutput   `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrOutput `pulumi:"appleKid"`
	// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
	ApplePrivateKey pulumi.StringPtrOutput `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId          pulumi.StringPtrOutput   `pulumi:"appleTeamId"`
	AuthorizationBinding pulumi.StringOutput      `pulumi:"authorizationBinding"`
	AuthorizationUrl     pulumi.StringOutput      `pulumi:"authorizationUrl"`
	ClientId             pulumi.StringPtrOutput   `pulumi:"clientId"`
	ClientSecret         pulumi.StringPtrOutput   `pulumi:"clientSecret"`
	DeprovisionedAction  pulumi.StringPtrOutput   `pulumi:"deprovisionedAction"`
	GroupsAction         pulumi.StringPtrOutput   `pulumi:"groupsAction"`
	GroupsAssignments    pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	GroupsAttribute      pulumi.StringPtrOutput   `pulumi:"groupsAttribute"`
	GroupsFilters        pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrOutput `pulumi:"issuerMode"`
	MaxClockSkew pulumi.IntPtrOutput    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name                  pulumi.StringOutput      `pulumi:"name"`
	ProfileMaster         pulumi.BoolPtrOutput     `pulumi:"profileMaster"`
	ProtocolType          pulumi.StringPtrOutput   `pulumi:"protocolType"`
	ProvisioningAction    pulumi.StringPtrOutput   `pulumi:"provisioningAction"`
	Scopes                pulumi.StringArrayOutput `pulumi:"scopes"`
	Status                pulumi.StringPtrOutput   `pulumi:"status"`
	SubjectMatchAttribute pulumi.StringPtrOutput   `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      pulumi.StringPtrOutput   `pulumi:"subjectMatchType"`
	SuspendedAction       pulumi.StringPtrOutput   `pulumi:"suspendedAction"`
	TokenBinding          pulumi.StringOutput      `pulumi:"tokenBinding"`
	TokenUrl              pulumi.StringOutput      `pulumi:"tokenUrl"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type             pulumi.StringOutput    `pulumi:"type"`
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewSocial registers a new resource with the given unique name, arguments, and options.
func NewSocial(ctx *pulumi.Context,
	name string, args *SocialArgs, opts ...pulumi.ResourceOption) (*Social, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApplePrivateKey != nil {
		args.ApplePrivateKey = pulumi.ToSecret(args.ApplePrivateKey).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applePrivateKey",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Social
	err := ctx.RegisterResource("okta:idp/social:Social", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSocial gets an existing Social resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSocial(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SocialState, opts ...pulumi.ResourceOption) (*Social, error) {
	var resource Social
	err := ctx.ReadResource("okta:idp/social:Social", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Social resources.
type socialState struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid *string `pulumi:"appleKid"`
	// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
	ApplePrivateKey *string `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId          *string  `pulumi:"appleTeamId"`
	AuthorizationBinding *string  `pulumi:"authorizationBinding"`
	AuthorizationUrl     *string  `pulumi:"authorizationUrl"`
	ClientId             *string  `pulumi:"clientId"`
	ClientSecret         *string  `pulumi:"clientSecret"`
	DeprovisionedAction  *string  `pulumi:"deprovisionedAction"`
	GroupsAction         *string  `pulumi:"groupsAction"`
	GroupsAssignments    []string `pulumi:"groupsAssignments"`
	GroupsAttribute      *string  `pulumi:"groupsAttribute"`
	GroupsFilters        []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name                  *string  `pulumi:"name"`
	ProfileMaster         *bool    `pulumi:"profileMaster"`
	ProtocolType          *string  `pulumi:"protocolType"`
	ProvisioningAction    *string  `pulumi:"provisioningAction"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	TokenBinding          *string  `pulumi:"tokenBinding"`
	TokenUrl              *string  `pulumi:"tokenUrl"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type             *string `pulumi:"type"`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type SocialState struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrInput
	// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
	ApplePrivateKey pulumi.StringPtrInput
	// The Team ID associated with your Apple developer account
	AppleTeamId          pulumi.StringPtrInput
	AuthorizationBinding pulumi.StringPtrInput
	AuthorizationUrl     pulumi.StringPtrInput
	ClientId             pulumi.StringPtrInput
	ClientSecret         pulumi.StringPtrInput
	DeprovisionedAction  pulumi.StringPtrInput
	GroupsAction         pulumi.StringPtrInput
	GroupsAssignments    pulumi.StringArrayInput
	GroupsAttribute      pulumi.StringPtrInput
	GroupsFilters        pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name                  pulumi.StringPtrInput
	ProfileMaster         pulumi.BoolPtrInput
	ProtocolType          pulumi.StringPtrInput
	ProvisioningAction    pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	TokenBinding          pulumi.StringPtrInput
	TokenUrl              pulumi.StringPtrInput
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type             pulumi.StringPtrInput
	UsernameTemplate pulumi.StringPtrInput
}

func (SocialState) ElementType() reflect.Type {
	return reflect.TypeOf((*socialState)(nil)).Elem()
}

type socialArgs struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid *string `pulumi:"appleKid"`
	// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
	ApplePrivateKey *string `pulumi:"applePrivateKey"`
	// The Team ID associated with your Apple developer account
	AppleTeamId         *string  `pulumi:"appleTeamId"`
	ClientId            *string  `pulumi:"clientId"`
	ClientSecret        *string  `pulumi:"clientSecret"`
	DeprovisionedAction *string  `pulumi:"deprovisionedAction"`
	GroupsAction        *string  `pulumi:"groupsAction"`
	GroupsAssignments   []string `pulumi:"groupsAssignments"`
	GroupsAttribute     *string  `pulumi:"groupsAttribute"`
	GroupsFilters       []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name                  *string  `pulumi:"name"`
	ProfileMaster         *bool    `pulumi:"profileMaster"`
	ProtocolType          *string  `pulumi:"protocolType"`
	ProvisioningAction    *string  `pulumi:"provisioningAction"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type             string  `pulumi:"type"`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Social resource.
type SocialArgs struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The Key ID that you obtained from Apple when you created the private key for the client
	AppleKid pulumi.StringPtrInput
	// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
	ApplePrivateKey pulumi.StringPtrInput
	// The Team ID associated with your Apple developer account
	AppleTeamId         pulumi.StringPtrInput
	ClientId            pulumi.StringPtrInput
	ClientSecret        pulumi.StringPtrInput
	DeprovisionedAction pulumi.StringPtrInput
	GroupsAction        pulumi.StringPtrInput
	GroupsAssignments   pulumi.StringArrayInput
	GroupsAttribute     pulumi.StringPtrInput
	GroupsFilters       pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name                  pulumi.StringPtrInput
	ProfileMaster         pulumi.BoolPtrInput
	ProtocolType          pulumi.StringPtrInput
	ProvisioningAction    pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
	Type             pulumi.StringInput
	UsernameTemplate pulumi.StringPtrInput
}

func (SocialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*socialArgs)(nil)).Elem()
}

type SocialInput interface {
	pulumi.Input

	ToSocialOutput() SocialOutput
	ToSocialOutputWithContext(ctx context.Context) SocialOutput
}

func (*Social) ElementType() reflect.Type {
	return reflect.TypeOf((**Social)(nil)).Elem()
}

func (i *Social) ToSocialOutput() SocialOutput {
	return i.ToSocialOutputWithContext(context.Background())
}

func (i *Social) ToSocialOutputWithContext(ctx context.Context) SocialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialOutput)
}

func (i *Social) ToOutput(ctx context.Context) pulumix.Output[*Social] {
	return pulumix.Output[*Social]{
		OutputState: i.ToSocialOutputWithContext(ctx).OutputState,
	}
}

// SocialArrayInput is an input type that accepts SocialArray and SocialArrayOutput values.
// You can construct a concrete instance of `SocialArrayInput` via:
//
//	SocialArray{ SocialArgs{...} }
type SocialArrayInput interface {
	pulumi.Input

	ToSocialArrayOutput() SocialArrayOutput
	ToSocialArrayOutputWithContext(context.Context) SocialArrayOutput
}

type SocialArray []SocialInput

func (SocialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Social)(nil)).Elem()
}

func (i SocialArray) ToSocialArrayOutput() SocialArrayOutput {
	return i.ToSocialArrayOutputWithContext(context.Background())
}

func (i SocialArray) ToSocialArrayOutputWithContext(ctx context.Context) SocialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialArrayOutput)
}

func (i SocialArray) ToOutput(ctx context.Context) pulumix.Output[[]*Social] {
	return pulumix.Output[[]*Social]{
		OutputState: i.ToSocialArrayOutputWithContext(ctx).OutputState,
	}
}

// SocialMapInput is an input type that accepts SocialMap and SocialMapOutput values.
// You can construct a concrete instance of `SocialMapInput` via:
//
//	SocialMap{ "key": SocialArgs{...} }
type SocialMapInput interface {
	pulumi.Input

	ToSocialMapOutput() SocialMapOutput
	ToSocialMapOutputWithContext(context.Context) SocialMapOutput
}

type SocialMap map[string]SocialInput

func (SocialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Social)(nil)).Elem()
}

func (i SocialMap) ToSocialMapOutput() SocialMapOutput {
	return i.ToSocialMapOutputWithContext(context.Background())
}

func (i SocialMap) ToSocialMapOutputWithContext(ctx context.Context) SocialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialMapOutput)
}

func (i SocialMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Social] {
	return pulumix.Output[map[string]*Social]{
		OutputState: i.ToSocialMapOutputWithContext(ctx).OutputState,
	}
}

type SocialOutput struct{ *pulumi.OutputState }

func (SocialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Social)(nil)).Elem()
}

func (o SocialOutput) ToSocialOutput() SocialOutput {
	return o
}

func (o SocialOutput) ToSocialOutputWithContext(ctx context.Context) SocialOutput {
	return o
}

func (o SocialOutput) ToOutput(ctx context.Context) pulumix.Output[*Social] {
	return pulumix.Output[*Social]{
		OutputState: o.OutputState,
	}
}

func (o SocialOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

// The Key ID that you obtained from Apple when you created the private key for the client
func (o SocialOutput) AppleKid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AppleKid }).(pulumi.StringPtrOutput)
}

// The PKCS #8 encoded private key that you created for the client and downloaded from Apple
func (o SocialOutput) ApplePrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ApplePrivateKey }).(pulumi.StringPtrOutput)
}

// The Team ID associated with your Apple developer account
func (o SocialOutput) AppleTeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.AppleTeamId }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

func (o SocialOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

func (o SocialOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

func (o SocialOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
func (o SocialOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o SocialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SocialOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

func (o SocialOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Social) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

func (o SocialOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

func (o SocialOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TokenBinding }).(pulumi.StringOutput)
}

func (o SocialOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.TokenUrl }).(pulumi.StringOutput)
}

// Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
func (o SocialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Social) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o SocialOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Social) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SocialArrayOutput struct{ *pulumi.OutputState }

func (SocialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Social)(nil)).Elem()
}

func (o SocialArrayOutput) ToSocialArrayOutput() SocialArrayOutput {
	return o
}

func (o SocialArrayOutput) ToSocialArrayOutputWithContext(ctx context.Context) SocialArrayOutput {
	return o
}

func (o SocialArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Social] {
	return pulumix.Output[[]*Social]{
		OutputState: o.OutputState,
	}
}

func (o SocialArrayOutput) Index(i pulumi.IntInput) SocialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Social {
		return vs[0].([]*Social)[vs[1].(int)]
	}).(SocialOutput)
}

type SocialMapOutput struct{ *pulumi.OutputState }

func (SocialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Social)(nil)).Elem()
}

func (o SocialMapOutput) ToSocialMapOutput() SocialMapOutput {
	return o
}

func (o SocialMapOutput) ToSocialMapOutputWithContext(ctx context.Context) SocialMapOutput {
	return o
}

func (o SocialMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Social] {
	return pulumix.Output[map[string]*Social]{
		OutputState: o.OutputState,
	}
}

func (o SocialMapOutput) MapIndex(k pulumi.StringInput) SocialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Social {
		return vs[0].(map[string]*Social)[vs[1].(string)]
	}).(SocialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SocialInput)(nil)).Elem(), &Social{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocialArrayInput)(nil)).Elem(), SocialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocialMapInput)(nil)).Elem(), SocialMap{})
	pulumi.RegisterOutputType(SocialOutput{})
	pulumi.RegisterOutputType(SocialArrayOutput{})
	pulumi.RegisterOutputType(SocialMapOutput{})
}
