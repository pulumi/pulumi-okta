// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// A SAML IdP Signing Key can be imported via the key id.
//
// ```sh
// $ pulumi import okta:idp/samlKey:SamlKey example &#60;key id&#62;
// ```
type SamlKey struct {
	pulumi.CustomResourceState

	// Date created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Date the cert expires.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Key ID.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// Identifies the cryptographic algorithm family used with the key.
	Kty pulumi.StringOutput `pulumi:"kty"`
	// Intended use of the public key.
	Use pulumi.StringOutput `pulumi:"use"`
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs pulumi.StringArrayOutput `pulumi:"x5cs"`
	// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
	X5tS256 pulumi.StringOutput `pulumi:"x5tS256"`
}

// NewSamlKey registers a new resource with the given unique name, arguments, and options.
func NewSamlKey(ctx *pulumi.Context,
	name string, args *SamlKeyArgs, opts ...pulumi.ResourceOption) (*SamlKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.X5cs == nil {
		return nil, errors.New("invalid value for required argument 'X5cs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SamlKey
	err := ctx.RegisterResource("okta:idp/samlKey:SamlKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlKey gets an existing SamlKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlKeyState, opts ...pulumi.ResourceOption) (*SamlKey, error) {
	var resource SamlKey
	err := ctx.ReadResource("okta:idp/samlKey:SamlKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlKey resources.
type samlKeyState struct {
	// Date created.
	Created *string `pulumi:"created"`
	// Date the cert expires.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Key ID.
	Kid *string `pulumi:"kid"`
	// Identifies the cryptographic algorithm family used with the key.
	Kty *string `pulumi:"kty"`
	// Intended use of the public key.
	Use *string `pulumi:"use"`
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs []string `pulumi:"x5cs"`
	// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
	X5tS256 *string `pulumi:"x5tS256"`
}

type SamlKeyState struct {
	// Date created.
	Created pulumi.StringPtrInput
	// Date the cert expires.
	ExpiresAt pulumi.StringPtrInput
	// Key ID.
	Kid pulumi.StringPtrInput
	// Identifies the cryptographic algorithm family used with the key.
	Kty pulumi.StringPtrInput
	// Intended use of the public key.
	Use pulumi.StringPtrInput
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs pulumi.StringArrayInput
	// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
	X5tS256 pulumi.StringPtrInput
}

func (SamlKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlKeyState)(nil)).Elem()
}

type samlKeyArgs struct {
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs []string `pulumi:"x5cs"`
}

// The set of arguments for constructing a SamlKey resource.
type SamlKeyArgs struct {
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs pulumi.StringArrayInput
}

func (SamlKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlKeyArgs)(nil)).Elem()
}

type SamlKeyInput interface {
	pulumi.Input

	ToSamlKeyOutput() SamlKeyOutput
	ToSamlKeyOutputWithContext(ctx context.Context) SamlKeyOutput
}

func (*SamlKey) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlKey)(nil)).Elem()
}

func (i *SamlKey) ToSamlKeyOutput() SamlKeyOutput {
	return i.ToSamlKeyOutputWithContext(context.Background())
}

func (i *SamlKey) ToSamlKeyOutputWithContext(ctx context.Context) SamlKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlKeyOutput)
}

// SamlKeyArrayInput is an input type that accepts SamlKeyArray and SamlKeyArrayOutput values.
// You can construct a concrete instance of `SamlKeyArrayInput` via:
//
//	SamlKeyArray{ SamlKeyArgs{...} }
type SamlKeyArrayInput interface {
	pulumi.Input

	ToSamlKeyArrayOutput() SamlKeyArrayOutput
	ToSamlKeyArrayOutputWithContext(context.Context) SamlKeyArrayOutput
}

type SamlKeyArray []SamlKeyInput

func (SamlKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlKey)(nil)).Elem()
}

func (i SamlKeyArray) ToSamlKeyArrayOutput() SamlKeyArrayOutput {
	return i.ToSamlKeyArrayOutputWithContext(context.Background())
}

func (i SamlKeyArray) ToSamlKeyArrayOutputWithContext(ctx context.Context) SamlKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlKeyArrayOutput)
}

// SamlKeyMapInput is an input type that accepts SamlKeyMap and SamlKeyMapOutput values.
// You can construct a concrete instance of `SamlKeyMapInput` via:
//
//	SamlKeyMap{ "key": SamlKeyArgs{...} }
type SamlKeyMapInput interface {
	pulumi.Input

	ToSamlKeyMapOutput() SamlKeyMapOutput
	ToSamlKeyMapOutputWithContext(context.Context) SamlKeyMapOutput
}

type SamlKeyMap map[string]SamlKeyInput

func (SamlKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlKey)(nil)).Elem()
}

func (i SamlKeyMap) ToSamlKeyMapOutput() SamlKeyMapOutput {
	return i.ToSamlKeyMapOutputWithContext(context.Background())
}

func (i SamlKeyMap) ToSamlKeyMapOutputWithContext(ctx context.Context) SamlKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlKeyMapOutput)
}

type SamlKeyOutput struct{ *pulumi.OutputState }

func (SamlKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlKey)(nil)).Elem()
}

func (o SamlKeyOutput) ToSamlKeyOutput() SamlKeyOutput {
	return o
}

func (o SamlKeyOutput) ToSamlKeyOutputWithContext(ctx context.Context) SamlKeyOutput {
	return o
}

// Date created.
func (o SamlKeyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Date the cert expires.
func (o SamlKeyOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Key ID.
func (o SamlKeyOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.Kid }).(pulumi.StringOutput)
}

// Identifies the cryptographic algorithm family used with the key.
func (o SamlKeyOutput) Kty() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.Kty }).(pulumi.StringOutput)
}

// Intended use of the public key.
func (o SamlKeyOutput) Use() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.Use }).(pulumi.StringOutput)
}

// base64-encoded X.509 certificate chain with DER encoding.
func (o SamlKeyOutput) X5cs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringArrayOutput { return v.X5cs }).(pulumi.StringArrayOutput)
}

// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
func (o SamlKeyOutput) X5tS256() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlKey) pulumi.StringOutput { return v.X5tS256 }).(pulumi.StringOutput)
}

type SamlKeyArrayOutput struct{ *pulumi.OutputState }

func (SamlKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlKey)(nil)).Elem()
}

func (o SamlKeyArrayOutput) ToSamlKeyArrayOutput() SamlKeyArrayOutput {
	return o
}

func (o SamlKeyArrayOutput) ToSamlKeyArrayOutputWithContext(ctx context.Context) SamlKeyArrayOutput {
	return o
}

func (o SamlKeyArrayOutput) Index(i pulumi.IntInput) SamlKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamlKey {
		return vs[0].([]*SamlKey)[vs[1].(int)]
	}).(SamlKeyOutput)
}

type SamlKeyMapOutput struct{ *pulumi.OutputState }

func (SamlKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlKey)(nil)).Elem()
}

func (o SamlKeyMapOutput) ToSamlKeyMapOutput() SamlKeyMapOutput {
	return o
}

func (o SamlKeyMapOutput) ToSamlKeyMapOutputWithContext(ctx context.Context) SamlKeyMapOutput {
	return o
}

func (o SamlKeyMapOutput) MapIndex(k pulumi.StringInput) SamlKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamlKey {
		return vs[0].(map[string]*SamlKey)[vs[1].(string)]
	}).(SamlKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlKeyInput)(nil)).Elem(), &SamlKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlKeyArrayInput)(nil)).Elem(), SamlKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlKeyMapInput)(nil)).Elem(), SamlKeyMap{})
	pulumi.RegisterOutputType(SamlKeyOutput{})
	pulumi.RegisterOutputType(SamlKeyArrayOutput{})
	pulumi.RegisterOutputType(SamlKeyMapOutput{})
}
