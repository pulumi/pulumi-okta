// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to retrieve a SAML IdP from Okta.
func LookupSaml(ctx *pulumi.Context, args *LookupSamlArgs, opts ...pulumi.InvokeOption) (*LookupSamlResult, error) {
	var rv LookupSamlResult
	err := ctx.Invoke("okta:idp/getSaml:getSaml", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSaml.
type LookupSamlArgs struct {
	// The id of the idp to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// The name of the idp to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getSaml.
type LookupSamlResult struct {
	// HTTP binding used to receive a SAMLResponse message from the IdP.
	AcsBinding string `pulumi:"acsBinding"`
	// Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
	AcsType string `pulumi:"acsType"`
	// URI that identifies the target Okta IdP instance (SP)
	Audience string `pulumi:"audience"`
	// id of idp.
	Id *string `pulumi:"id"`
	// URI that identifies the issuer (IdP).
	Issuer string `pulumi:"issuer"`
	// indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
	IssuerMode string `pulumi:"issuerMode"`
	// Key ID reference to the IdP's X.509 signature certificate.
	Kid string `pulumi:"kid"`
	// name of the idp.
	Name *string `pulumi:"name"`
	// single sign on binding.
	SsoBinding string `pulumi:"ssoBinding"`
	// SSO request binding, HTTP-POST or HTTP-REDIRECT.
	SsoDestination string `pulumi:"ssoDestination"`
	// single sign on url.
	SsoUrl string `pulumi:"ssoUrl"`
	// regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter string `pulumi:"subjectFilter"`
	// Expression to generate or transform a unique username for the IdP user.
	SubjectFormats []string `pulumi:"subjectFormats"`
	// type of idp.
	Type string `pulumi:"type"`
}
