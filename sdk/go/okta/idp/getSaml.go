// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a SAML IdP from Okta.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := idp.LookupSaml(ctx, &idp.LookupSamlArgs{
//				Name: pulumi.StringRef("Example App"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupSaml(ctx *pulumi.Context, args *LookupSamlArgs, opts ...pulumi.InvokeOption) (*LookupSamlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSamlResult
	err := ctx.Invoke("okta:idp/getSaml:getSaml", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSaml.
type LookupSamlArgs struct {
	// The id of the idp to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// The name of the idp to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getSaml.
type LookupSamlResult struct {
	AcsBinding string `pulumi:"acsBinding"`
	// Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
	AcsType string `pulumi:"acsType"`
	// URI that identifies the target Okta IdP instance (SP)
	Audience string `pulumi:"audience"`
	// id of idp.
	Id *string `pulumi:"id"`
	// URI that identifies the issuer (IdP).
	Issuer string `pulumi:"issuer"`
	// indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
	IssuerMode string `pulumi:"issuerMode"`
	// Key ID reference to the IdP's X.509 signature certificate.
	Kid string `pulumi:"kid"`
	// name of the idp.
	Name *string `pulumi:"name"`
	// single sign-on binding.
	SsoBinding string `pulumi:"ssoBinding"`
	// SSO request binding, HTTP-POST or HTTP-REDIRECT.
	SsoDestination string `pulumi:"ssoDestination"`
	// single sign-on url.
	SsoUrl string `pulumi:"ssoUrl"`
	// regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter string `pulumi:"subjectFilter"`
	// Expression to generate or transform a unique username for the IdP user.
	SubjectFormats []string `pulumi:"subjectFormats"`
	// type of idp.
	Type string `pulumi:"type"`
}

func LookupSamlOutput(ctx *pulumi.Context, args LookupSamlOutputArgs, opts ...pulumi.InvokeOption) LookupSamlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSamlResult, error) {
			args := v.(LookupSamlArgs)
			r, err := LookupSaml(ctx, &args, opts...)
			var s LookupSamlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSamlResultOutput)
}

// A collection of arguments for invoking getSaml.
type LookupSamlOutputArgs struct {
	// The id of the idp to retrieve, conflicts with `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the idp to retrieve, conflicts with `id`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupSamlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSamlArgs)(nil)).Elem()
}

// A collection of values returned by getSaml.
type LookupSamlResultOutput struct{ *pulumi.OutputState }

func (LookupSamlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSamlResult)(nil)).Elem()
}

func (o LookupSamlResultOutput) ToLookupSamlResultOutput() LookupSamlResultOutput {
	return o
}

func (o LookupSamlResultOutput) ToLookupSamlResultOutputWithContext(ctx context.Context) LookupSamlResultOutput {
	return o
}

func (o LookupSamlResultOutput) AcsBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.AcsBinding }).(pulumi.StringOutput)
}

// Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
func (o LookupSamlResultOutput) AcsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.AcsType }).(pulumi.StringOutput)
}

// URI that identifies the target Okta IdP instance (SP)
func (o LookupSamlResultOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.Audience }).(pulumi.StringOutput)
}

// id of idp.
func (o LookupSamlResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSamlResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// URI that identifies the issuer (IdP).
func (o LookupSamlResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
func (o LookupSamlResultOutput) IssuerMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.IssuerMode }).(pulumi.StringOutput)
}

// Key ID reference to the IdP's X.509 signature certificate.
func (o LookupSamlResultOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.Kid }).(pulumi.StringOutput)
}

// name of the idp.
func (o LookupSamlResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSamlResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// single sign-on binding.
func (o LookupSamlResultOutput) SsoBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.SsoBinding }).(pulumi.StringOutput)
}

// SSO request binding, HTTP-POST or HTTP-REDIRECT.
func (o LookupSamlResultOutput) SsoDestination() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.SsoDestination }).(pulumi.StringOutput)
}

// single sign-on url.
func (o LookupSamlResultOutput) SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.SsoUrl }).(pulumi.StringOutput)
}

// regular expression pattern used to filter untrusted IdP usernames.
func (o LookupSamlResultOutput) SubjectFilter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.SubjectFilter }).(pulumi.StringOutput)
}

// Expression to generate or transform a unique username for the IdP user.
func (o LookupSamlResultOutput) SubjectFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSamlResult) []string { return v.SubjectFormats }).(pulumi.StringArrayOutput)
}

// type of idp.
func (o LookupSamlResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSamlResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSamlResultOutput{})
}
