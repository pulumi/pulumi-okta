// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to retrieve a OIDC IdP from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/idp"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "Example Provider"
// 		_, err := idp.LookupOidc(ctx, &idp.LookupOidcArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupOidc(ctx *pulumi.Context, args *LookupOidcArgs, opts ...pulumi.InvokeOption) (*LookupOidcResult, error) {
	var rv LookupOidcResult
	err := ctx.Invoke("okta:idp/getOidc:getOidc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOidc.
type LookupOidcArgs struct {
	// The id of the idp to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// The name of the idp to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getOidc.
type LookupOidcResult struct {
	// The method of making an authorization request.
	AuthorizationBinding string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret string `pulumi:"clientSecret"`
	// id of idp.
	Id *string `pulumi:"id"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
	IssuerMode string `pulumi:"issuerMode"`
	// URI that identifies the issuer.
	IssuerUrl string `pulumi:"issuerUrl"`
	// The method of making a request for the OIDC JWKS.
	JwksBinding string `pulumi:"jwksBinding"`
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl string `pulumi:"jwksUrl"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew int `pulumi:"maxClockSkew"`
	// name of the idp.
	Name *string `pulumi:"name"`
	// The type of protocol to use.
	ProtocolType string `pulumi:"protocolType"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// The method of making a token request.
	TokenBinding string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl string `pulumi:"tokenUrl"`
	// type of idp.
	Type string `pulumi:"type"`
	// The method of making a user info request.
	UserInfoBinding string `pulumi:"userInfoBinding"`
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl string `pulumi:"userInfoUrl"`
}
