// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a OIDC IdP from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := idp.LookupOidc(ctx, &idp.LookupOidcArgs{
//				Name: pulumi.StringRef("Example Provider"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOidc(ctx *pulumi.Context, args *LookupOidcArgs, opts ...pulumi.InvokeOption) (*LookupOidcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOidcResult
	err := ctx.Invoke("okta:idp/getOidc:getOidc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOidc.
type LookupOidcArgs struct {
	// Id of idp.
	Id *string `pulumi:"id"`
	// Name of the idp.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getOidc.
type LookupOidcResult struct {
	// The method of making an authorization request.
	AuthorizationBinding string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret string `pulumi:"clientSecret"`
	// Id of idp.
	Id *string `pulumi:"id"`
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic.
	IssuerMode string `pulumi:"issuerMode"`
	// URI that identifies the issuer.
	IssuerUrl string `pulumi:"issuerUrl"`
	// The method of making a request for the OIDC JWKS.
	JwksBinding string `pulumi:"jwksBinding"`
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl string `pulumi:"jwksUrl"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew int `pulumi:"maxClockSkew"`
	// Name of the idp.
	Name *string `pulumi:"name"`
	// The type of protocol to use.
	ProtocolType string `pulumi:"protocolType"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// The method of making a token request.
	TokenBinding string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl string `pulumi:"tokenUrl"`
	// Type of idp.
	Type string `pulumi:"type"`
	// The method of making a user info request.
	UserInfoBinding string `pulumi:"userInfoBinding"`
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl string `pulumi:"userInfoUrl"`
}

func LookupOidcOutput(ctx *pulumi.Context, args LookupOidcOutputArgs, opts ...pulumi.InvokeOption) LookupOidcResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOidcResult, error) {
			args := v.(LookupOidcArgs)
			r, err := LookupOidc(ctx, &args, opts...)
			var s LookupOidcResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOidcResultOutput)
}

// A collection of arguments for invoking getOidc.
type LookupOidcOutputArgs struct {
	// Id of idp.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the idp.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupOidcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOidcArgs)(nil)).Elem()
}

// A collection of values returned by getOidc.
type LookupOidcResultOutput struct{ *pulumi.OutputState }

func (LookupOidcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOidcResult)(nil)).Elem()
}

func (o LookupOidcResultOutput) ToLookupOidcResultOutput() LookupOidcResultOutput {
	return o
}

func (o LookupOidcResultOutput) ToLookupOidcResultOutputWithContext(ctx context.Context) LookupOidcResultOutput {
	return o
}

// The method of making an authorization request.
func (o LookupOidcResultOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
func (o LookupOidcResultOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

// Unique identifier issued by AS for the Okta IdP instance.
func (o LookupOidcResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret issued by AS for the Okta IdP instance.
func (o LookupOidcResultOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Id of idp.
func (o LookupOidcResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOidcResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic.
func (o LookupOidcResultOutput) IssuerMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.IssuerMode }).(pulumi.StringOutput)
}

// URI that identifies the issuer.
func (o LookupOidcResultOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// The method of making a request for the OIDC JWKS.
func (o LookupOidcResultOutput) JwksBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.JwksBinding }).(pulumi.StringOutput)
}

// Endpoint where the keys signer publishes its keys in a JWK Set.
func (o LookupOidcResultOutput) JwksUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.JwksUrl }).(pulumi.StringOutput)
}

// Maximum allowable clock-skew when processing messages from the IdP.
func (o LookupOidcResultOutput) MaxClockSkew() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOidcResult) int { return v.MaxClockSkew }).(pulumi.IntOutput)
}

// Name of the idp.
func (o LookupOidcResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOidcResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of protocol to use.
func (o LookupOidcResultOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.ProtocolType }).(pulumi.StringOutput)
}

// The scopes of the IdP.
func (o LookupOidcResultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOidcResult) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The method of making a token request.
func (o LookupOidcResultOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.TokenBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
func (o LookupOidcResultOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.TokenUrl }).(pulumi.StringOutput)
}

// Type of idp.
func (o LookupOidcResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.Type }).(pulumi.StringOutput)
}

// The method of making a user info request.
func (o LookupOidcResultOutput) UserInfoBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.UserInfoBinding }).(pulumi.StringOutput)
}

// Protected resource endpoint that returns claims about the authenticated user.
func (o LookupOidcResultOutput) UserInfoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOidcResult) string { return v.UserInfoUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOidcResultOutput{})
}
