// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an OIDC Identity Provider. This resource allows you to create and configure an OIDC Identity Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/idp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := idp.NewOidc(ctx, "example", &idp.OidcArgs{
//				Name:                 pulumi.String("example"),
//				AuthorizationUrl:     pulumi.String("https://idp.example.com/authorize"),
//				AuthorizationBinding: pulumi.String("HTTP-REDIRECT"),
//				TokenUrl:             pulumi.String("https://idp.example.com/token"),
//				TokenBinding:         pulumi.String("HTTP-POST"),
//				UserInfoUrl:          pulumi.String("https://idp.example.com/userinfo"),
//				UserInfoBinding:      pulumi.String("HTTP-REDIRECT"),
//				JwksUrl:              pulumi.String("https://idp.example.com/keys"),
//				JwksBinding:          pulumi.String("HTTP-REDIRECT"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("openid"),
//				},
//				ClientId:         pulumi.String("efg456"),
//				ClientSecret:     pulumi.String("efg456"),
//				IssuerUrl:        pulumi.String("https://id.example.com"),
//				UsernameTemplate: pulumi.String("idpuser.email"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:idp/oidc:Oidc example <idp_id>
// ```
type Oidc struct {
	pulumi.CustomResourceState

	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrOutput `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding pulumi.StringOutput `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl pulumi.StringOutput `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrOutput `pulumi:"deprovisionedAction"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrOutput `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrOutput `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// URI that identifies the issuer.
	IssuerUrl pulumi.StringOutput `pulumi:"issuerUrl"`
	// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
	JwksBinding pulumi.StringOutput `pulumi:"jwksBinding"`
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl pulumi.StringOutput `pulumi:"jwksUrl"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrOutput `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name pulumi.StringOutput `pulumi:"name"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
	PkceRequired pulumi.BoolPtrOutput `pulumi:"pkceRequired"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrOutput `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
	ProtocolType pulumi.StringPtrOutput `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
	RequestSignatureScope pulumi.StringPtrOutput `pulumi:"requestSignatureScope"`
	// The scopes of the IdP.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrOutput `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrOutput `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrOutput `pulumi:"suspendedAction"`
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding pulumi.StringOutput `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl pulumi.StringOutput `pulumi:"tokenUrl"`
	// Type of OIDC IdP.
	Type            pulumi.StringOutput    `pulumi:"type"`
	UserInfoBinding pulumi.StringPtrOutput `pulumi:"userInfoBinding"`
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl pulumi.StringPtrOutput `pulumi:"userInfoUrl"`
	// User type ID. Can be used as `targetId` in the `profile.Mapping` resource.
	UserTypeId pulumi.StringOutput `pulumi:"userTypeId"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewOidc registers a new resource with the given unique name, arguments, and options.
func NewOidc(ctx *pulumi.Context,
	name string, args *OidcArgs, opts ...pulumi.ResourceOption) (*Oidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationBinding == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationBinding'")
	}
	if args.AuthorizationUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationUrl'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IssuerUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuerUrl'")
	}
	if args.JwksBinding == nil {
		return nil, errors.New("invalid value for required argument 'JwksBinding'")
	}
	if args.JwksUrl == nil {
		return nil, errors.New("invalid value for required argument 'JwksUrl'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.TokenBinding == nil {
		return nil, errors.New("invalid value for required argument 'TokenBinding'")
	}
	if args.TokenUrl == nil {
		return nil, errors.New("invalid value for required argument 'TokenUrl'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Oidc
	err := ctx.RegisterResource("okta:idp/oidc:Oidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOidc gets an existing Oidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OidcState, opts ...pulumi.ResourceOption) (*Oidc, error) {
	var resource Oidc
	err := ctx.ReadResource("okta:idp/oidc:Oidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Oidc resources.
type oidcState struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding *string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId *string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret *string `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	Filter *string `pulumi:"filter"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
	IssuerMode *string `pulumi:"issuerMode"`
	// URI that identifies the issuer.
	IssuerUrl *string `pulumi:"issuerUrl"`
	// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
	JwksBinding *string `pulumi:"jwksBinding"`
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl *string `pulumi:"jwksUrl"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew *int `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name *string `pulumi:"name"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
	PkceRequired *bool `pulumi:"pkceRequired"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
	ProtocolType *string `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding *string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl *string `pulumi:"tokenUrl"`
	// Type of OIDC IdP.
	Type            *string `pulumi:"type"`
	UserInfoBinding *string `pulumi:"userInfoBinding"`
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl *string `pulumi:"userInfoUrl"`
	// User type ID. Can be used as `targetId` in the `profile.Mapping` resource.
	UserTypeId *string `pulumi:"userTypeId"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type OidcState struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding pulumi.StringPtrInput
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl pulumi.StringPtrInput
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringPtrInput
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringPtrInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrInput
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	Filter pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrInput
	// URI that identifies the issuer.
	IssuerUrl pulumi.StringPtrInput
	// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
	JwksBinding pulumi.StringPtrInput
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl pulumi.StringPtrInput
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name pulumi.StringPtrInput
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
	PkceRequired pulumi.BoolPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
	ProtocolType pulumi.StringPtrInput
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
	RequestSignatureScope pulumi.StringPtrInput
	// The scopes of the IdP.
	Scopes pulumi.StringArrayInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrInput
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding pulumi.StringPtrInput
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl pulumi.StringPtrInput
	// Type of OIDC IdP.
	Type            pulumi.StringPtrInput
	UserInfoBinding pulumi.StringPtrInput
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl pulumi.StringPtrInput
	// User type ID. Can be used as `targetId` in the `profile.Mapping` resource.
	UserTypeId pulumi.StringPtrInput
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrInput
}

func (OidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcState)(nil)).Elem()
}

type oidcArgs struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret string `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	Filter *string `pulumi:"filter"`
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
	IssuerMode *string `pulumi:"issuerMode"`
	// URI that identifies the issuer.
	IssuerUrl string `pulumi:"issuerUrl"`
	// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
	JwksBinding string `pulumi:"jwksBinding"`
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl string `pulumi:"jwksUrl"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew *int `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name *string `pulumi:"name"`
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
	PkceRequired *bool `pulumi:"pkceRequired"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
	ProtocolType *string `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// Default to `ACTIVE`
	Status *string `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl        string  `pulumi:"tokenUrl"`
	UserInfoBinding *string `pulumi:"userInfoBinding"`
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl *string `pulumi:"userInfoUrl"`
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Oidc resource.
type OidcArgs struct {
	// Specifies the account linking action for an IdP user. Default: `AUTO`
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	AuthorizationBinding pulumi.StringInput
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl pulumi.StringInput
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId pulumi.StringInput
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret pulumi.StringInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	DeprovisionedAction pulumi.StringPtrInput
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	Filter pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
	IssuerMode pulumi.StringPtrInput
	// URI that identifies the issuer.
	IssuerUrl pulumi.StringInput
	// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
	JwksBinding pulumi.StringInput
	// Endpoint where the keys signer publishes its keys in a JWK Set.
	JwksUrl pulumi.StringInput
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name pulumi.StringPtrInput
	// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
	PkceRequired pulumi.BoolPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
	ProtocolType pulumi.StringPtrInput
	// Provisioning action for an IdP user during authentication. Default: `AUTO`
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
	RequestSignatureScope pulumi.StringPtrInput
	// The scopes of the IdP.
	Scopes pulumi.StringArrayInput
	// Default to `ACTIVE`
	Status pulumi.StringPtrInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
	SuspendedAction pulumi.StringPtrInput
	// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
	TokenBinding pulumi.StringInput
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl        pulumi.StringInput
	UserInfoBinding pulumi.StringPtrInput
	// Protected resource endpoint that returns claims about the authenticated user.
	UserInfoUrl pulumi.StringPtrInput
	// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
	UsernameTemplate pulumi.StringPtrInput
}

func (OidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcArgs)(nil)).Elem()
}

type OidcInput interface {
	pulumi.Input

	ToOidcOutput() OidcOutput
	ToOidcOutputWithContext(ctx context.Context) OidcOutput
}

func (*Oidc) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (i *Oidc) ToOidcOutput() OidcOutput {
	return i.ToOidcOutputWithContext(context.Background())
}

func (i *Oidc) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcOutput)
}

// OidcArrayInput is an input type that accepts OidcArray and OidcArrayOutput values.
// You can construct a concrete instance of `OidcArrayInput` via:
//
//	OidcArray{ OidcArgs{...} }
type OidcArrayInput interface {
	pulumi.Input

	ToOidcArrayOutput() OidcArrayOutput
	ToOidcArrayOutputWithContext(context.Context) OidcArrayOutput
}

type OidcArray []OidcInput

func (OidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (i OidcArray) ToOidcArrayOutput() OidcArrayOutput {
	return i.ToOidcArrayOutputWithContext(context.Background())
}

func (i OidcArray) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcArrayOutput)
}

// OidcMapInput is an input type that accepts OidcMap and OidcMapOutput values.
// You can construct a concrete instance of `OidcMapInput` via:
//
//	OidcMap{ "key": OidcArgs{...} }
type OidcMapInput interface {
	pulumi.Input

	ToOidcMapOutput() OidcMapOutput
	ToOidcMapOutputWithContext(context.Context) OidcMapOutput
}

type OidcMap map[string]OidcInput

func (OidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (i OidcMap) ToOidcMapOutput() OidcMapOutput {
	return i.ToOidcMapOutputWithContext(context.Background())
}

func (i OidcMap) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcMapOutput)
}

type OidcOutput struct{ *pulumi.OutputState }

func (OidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (o OidcOutput) ToOidcOutput() OidcOutput {
	return o
}

func (o OidcOutput) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return o
}

// Specifies the account linking action for an IdP user. Default: `AUTO`
func (o OidcOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

// Group memberships to determine link candidates.
func (o OidcOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

// The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
func (o OidcOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
func (o OidcOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

// Unique identifier issued by AS for the Okta IdP instance.
func (o OidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret issued by AS for the Okta IdP instance.
func (o OidcOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
func (o OidcOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

// Optional regular expression pattern used to filter untrusted IdP usernames.
func (o OidcOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// Provisioning action for IdP user's group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
func (o OidcOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

// List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groupsAction`.
func (o OidcOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
func (o OidcOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

// Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groupsAction`.
func (o OidcOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
func (o OidcOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

// URI that identifies the issuer.
func (o OidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.IssuerUrl }).(pulumi.StringOutput)
}

// The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
func (o OidcOutput) JwksBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.JwksBinding }).(pulumi.StringOutput)
}

// Endpoint where the keys signer publishes its keys in a JWK Set.
func (o OidcOutput) JwksUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.JwksUrl }).(pulumi.StringOutput)
}

// Maximum allowable clock-skew when processing messages from the IdP.
func (o OidcOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o OidcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object
func (o OidcOutput) PkceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.BoolPtrOutput { return v.PkceRequired }).(pulumi.BoolPtrOutput)
}

// Determines if the IdP should act as a source of truth for user profile attributes.
func (o OidcOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

// The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
func (o OidcOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

// Provisioning action for an IdP user during authentication. Default: `AUTO`
func (o OidcOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

// The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object
func (o OidcOutput) RequestSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.RequestSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
func (o OidcOutput) RequestSignatureScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.RequestSignatureScope }).(pulumi.StringPtrOutput)
}

// The scopes of the IdP.
func (o OidcOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Default to `ACTIVE`
func (o OidcOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
func (o OidcOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
func (o OidcOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

// Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
func (o OidcOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

// The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
func (o OidcOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.TokenBinding }).(pulumi.StringOutput)
}

// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
func (o OidcOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.TokenUrl }).(pulumi.StringOutput)
}

// Type of OIDC IdP.
func (o OidcOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o OidcOutput) UserInfoBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UserInfoBinding }).(pulumi.StringPtrOutput)
}

// Protected resource endpoint that returns claims about the authenticated user.
func (o OidcOutput) UserInfoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UserInfoUrl }).(pulumi.StringPtrOutput)
}

// User type ID. Can be used as `targetId` in the `profile.Mapping` resource.
func (o OidcOutput) UserTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.UserTypeId }).(pulumi.StringOutput)
}

// Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
func (o OidcOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type OidcArrayOutput struct{ *pulumi.OutputState }

func (OidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (o OidcArrayOutput) ToOidcArrayOutput() OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) Index(i pulumi.IntInput) OidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].([]*Oidc)[vs[1].(int)]
	}).(OidcOutput)
}

type OidcMapOutput struct{ *pulumi.OutputState }

func (OidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (o OidcMapOutput) ToOidcMapOutput() OidcMapOutput {
	return o
}

func (o OidcMapOutput) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return o
}

func (o OidcMapOutput) MapIndex(k pulumi.StringInput) OidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].(map[string]*Oidc)[vs[1].(string)]
	}).(OidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OidcInput)(nil)).Elem(), &Oidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcArrayInput)(nil)).Elem(), OidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcMapInput)(nil)).Elem(), OidcMap{})
	pulumi.RegisterOutputType(OidcOutput{})
	pulumi.RegisterOutputType(OidcArrayOutput{})
	pulumi.RegisterOutputType(OidcMapOutput{})
}
