// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Oidc struct {
	pulumi.CustomResourceState

	AccountLinkAction        pulumi.StringPtrOutput   `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     pulumi.StringOutput      `pulumi:"authorizationBinding"`
	AuthorizationUrl         pulumi.StringOutput      `pulumi:"authorizationUrl"`
	ClientId                 pulumi.StringOutput      `pulumi:"clientId"`
	ClientSecret             pulumi.StringOutput      `pulumi:"clientSecret"`
	DeprovisionedAction      pulumi.StringPtrOutput   `pulumi:"deprovisionedAction"`
	GroupsAction             pulumi.StringPtrOutput   `pulumi:"groupsAction"`
	GroupsAssignments        pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	GroupsAttribute          pulumi.StringPtrOutput   `pulumi:"groupsAttribute"`
	GroupsFilters            pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrOutput `pulumi:"issuerMode"`
	IssuerUrl    pulumi.StringOutput    `pulumi:"issuerUrl"`
	JwksBinding  pulumi.StringOutput    `pulumi:"jwksBinding"`
	JwksUrl      pulumi.StringOutput    `pulumi:"jwksUrl"`
	MaxClockSkew pulumi.IntPtrOutput    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               pulumi.StringOutput    `pulumi:"name"`
	ProfileMaster      pulumi.BoolPtrOutput   `pulumi:"profileMaster"`
	ProtocolType       pulumi.StringPtrOutput `pulumi:"protocolType"`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrOutput   `pulumi:"requestSignatureScope"`
	Scopes                pulumi.StringArrayOutput `pulumi:"scopes"`
	Status                pulumi.StringPtrOutput   `pulumi:"status"`
	SubjectMatchAttribute pulumi.StringPtrOutput   `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      pulumi.StringPtrOutput   `pulumi:"subjectMatchType"`
	SuspendedAction       pulumi.StringPtrOutput   `pulumi:"suspendedAction"`
	TokenBinding          pulumi.StringOutput      `pulumi:"tokenBinding"`
	TokenUrl              pulumi.StringOutput      `pulumi:"tokenUrl"`
	// Type of OIDC IdP.
	Type             pulumi.StringOutput    `pulumi:"type"`
	UserInfoBinding  pulumi.StringPtrOutput `pulumi:"userInfoBinding"`
	UserInfoUrl      pulumi.StringPtrOutput `pulumi:"userInfoUrl"`
	UserTypeId       pulumi.StringOutput    `pulumi:"userTypeId"`
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewOidc registers a new resource with the given unique name, arguments, and options.
func NewOidc(ctx *pulumi.Context,
	name string, args *OidcArgs, opts ...pulumi.ResourceOption) (*Oidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationBinding == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationBinding'")
	}
	if args.AuthorizationUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationUrl'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IssuerUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuerUrl'")
	}
	if args.JwksBinding == nil {
		return nil, errors.New("invalid value for required argument 'JwksBinding'")
	}
	if args.JwksUrl == nil {
		return nil, errors.New("invalid value for required argument 'JwksUrl'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.TokenBinding == nil {
		return nil, errors.New("invalid value for required argument 'TokenBinding'")
	}
	if args.TokenUrl == nil {
		return nil, errors.New("invalid value for required argument 'TokenUrl'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Oidc
	err := ctx.RegisterResource("okta:idp/oidc:Oidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOidc gets an existing Oidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OidcState, opts ...pulumi.ResourceOption) (*Oidc, error) {
	var resource Oidc
	err := ctx.ReadResource("okta:idp/oidc:Oidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Oidc resources.
type oidcState struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     *string  `pulumi:"authorizationBinding"`
	AuthorizationUrl         *string  `pulumi:"authorizationUrl"`
	ClientId                 *string  `pulumi:"clientId"`
	ClientSecret             *string  `pulumi:"clientSecret"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   *string `pulumi:"issuerMode"`
	IssuerUrl    *string `pulumi:"issuerUrl"`
	JwksBinding  *string `pulumi:"jwksBinding"`
	JwksUrl      *string `pulumi:"jwksUrl"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProtocolType       *string `pulumi:"protocolType"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope *string  `pulumi:"requestSignatureScope"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	TokenBinding          *string  `pulumi:"tokenBinding"`
	TokenUrl              *string  `pulumi:"tokenUrl"`
	// Type of OIDC IdP.
	Type             *string `pulumi:"type"`
	UserInfoBinding  *string `pulumi:"userInfoBinding"`
	UserInfoUrl      *string `pulumi:"userInfoUrl"`
	UserTypeId       *string `pulumi:"userTypeId"`
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type OidcState struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AuthorizationBinding     pulumi.StringPtrInput
	AuthorizationUrl         pulumi.StringPtrInput
	ClientId                 pulumi.StringPtrInput
	ClientSecret             pulumi.StringPtrInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrInput
	IssuerUrl    pulumi.StringPtrInput
	JwksBinding  pulumi.StringPtrInput
	JwksUrl      pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProtocolType       pulumi.StringPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	TokenBinding          pulumi.StringPtrInput
	TokenUrl              pulumi.StringPtrInput
	// Type of OIDC IdP.
	Type             pulumi.StringPtrInput
	UserInfoBinding  pulumi.StringPtrInput
	UserInfoUrl      pulumi.StringPtrInput
	UserTypeId       pulumi.StringPtrInput
	UsernameTemplate pulumi.StringPtrInput
}

func (OidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcState)(nil)).Elem()
}

type oidcArgs struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     string   `pulumi:"authorizationBinding"`
	AuthorizationUrl         string   `pulumi:"authorizationUrl"`
	ClientId                 string   `pulumi:"clientId"`
	ClientSecret             string   `pulumi:"clientSecret"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   *string `pulumi:"issuerMode"`
	IssuerUrl    string  `pulumi:"issuerUrl"`
	JwksBinding  string  `pulumi:"jwksBinding"`
	JwksUrl      string  `pulumi:"jwksUrl"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProtocolType       *string `pulumi:"protocolType"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope *string  `pulumi:"requestSignatureScope"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	TokenBinding          string   `pulumi:"tokenBinding"`
	TokenUrl              string   `pulumi:"tokenUrl"`
	UserInfoBinding       *string  `pulumi:"userInfoBinding"`
	UserInfoUrl           *string  `pulumi:"userInfoUrl"`
	UsernameTemplate      *string  `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Oidc resource.
type OidcArgs struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AuthorizationBinding     pulumi.StringInput
	AuthorizationUrl         pulumi.StringInput
	ClientId                 pulumi.StringInput
	ClientSecret             pulumi.StringInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrInput
	IssuerUrl    pulumi.StringInput
	JwksBinding  pulumi.StringInput
	JwksUrl      pulumi.StringInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProtocolType       pulumi.StringPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	TokenBinding          pulumi.StringInput
	TokenUrl              pulumi.StringInput
	UserInfoBinding       pulumi.StringPtrInput
	UserInfoUrl           pulumi.StringPtrInput
	UsernameTemplate      pulumi.StringPtrInput
}

func (OidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcArgs)(nil)).Elem()
}

type OidcInput interface {
	pulumi.Input

	ToOidcOutput() OidcOutput
	ToOidcOutputWithContext(ctx context.Context) OidcOutput
}

func (*Oidc) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (i *Oidc) ToOidcOutput() OidcOutput {
	return i.ToOidcOutputWithContext(context.Background())
}

func (i *Oidc) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcOutput)
}

func (i *Oidc) ToOutput(ctx context.Context) pulumix.Output[*Oidc] {
	return pulumix.Output[*Oidc]{
		OutputState: i.ToOidcOutputWithContext(ctx).OutputState,
	}
}

// OidcArrayInput is an input type that accepts OidcArray and OidcArrayOutput values.
// You can construct a concrete instance of `OidcArrayInput` via:
//
//	OidcArray{ OidcArgs{...} }
type OidcArrayInput interface {
	pulumi.Input

	ToOidcArrayOutput() OidcArrayOutput
	ToOidcArrayOutputWithContext(context.Context) OidcArrayOutput
}

type OidcArray []OidcInput

func (OidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (i OidcArray) ToOidcArrayOutput() OidcArrayOutput {
	return i.ToOidcArrayOutputWithContext(context.Background())
}

func (i OidcArray) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcArrayOutput)
}

func (i OidcArray) ToOutput(ctx context.Context) pulumix.Output[[]*Oidc] {
	return pulumix.Output[[]*Oidc]{
		OutputState: i.ToOidcArrayOutputWithContext(ctx).OutputState,
	}
}

// OidcMapInput is an input type that accepts OidcMap and OidcMapOutput values.
// You can construct a concrete instance of `OidcMapInput` via:
//
//	OidcMap{ "key": OidcArgs{...} }
type OidcMapInput interface {
	pulumi.Input

	ToOidcMapOutput() OidcMapOutput
	ToOidcMapOutputWithContext(context.Context) OidcMapOutput
}

type OidcMap map[string]OidcInput

func (OidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (i OidcMap) ToOidcMapOutput() OidcMapOutput {
	return i.ToOidcMapOutputWithContext(context.Background())
}

func (i OidcMap) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcMapOutput)
}

func (i OidcMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Oidc] {
	return pulumix.Output[map[string]*Oidc]{
		OutputState: i.ToOidcMapOutputWithContext(ctx).OutputState,
	}
}

type OidcOutput struct{ *pulumi.OutputState }

func (OidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (o OidcOutput) ToOidcOutput() OidcOutput {
	return o
}

func (o OidcOutput) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return o
}

func (o OidcOutput) ToOutput(ctx context.Context) pulumix.Output[*Oidc] {
	return pulumix.Output[*Oidc]{
		OutputState: o.OutputState,
	}
}

func (o OidcOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

func (o OidcOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

func (o OidcOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

func (o OidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

func (o OidcOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

func (o OidcOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

func (o OidcOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
func (o OidcOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.IssuerUrl }).(pulumi.StringOutput)
}

func (o OidcOutput) JwksBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.JwksBinding }).(pulumi.StringOutput)
}

func (o OidcOutput) JwksUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.JwksUrl }).(pulumi.StringOutput)
}

func (o OidcOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o OidcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OidcOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

func (o OidcOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

// The HMAC Signature Algorithm used when signing an authorization request
func (o OidcOutput) RequestSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.RequestSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies whether to digitally sign an authorization request to the IdP
func (o OidcOutput) RequestSignatureScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.RequestSignatureScope }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

func (o OidcOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.TokenBinding }).(pulumi.StringOutput)
}

func (o OidcOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.TokenUrl }).(pulumi.StringOutput)
}

// Type of OIDC IdP.
func (o OidcOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o OidcOutput) UserInfoBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UserInfoBinding }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) UserInfoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UserInfoUrl }).(pulumi.StringPtrOutput)
}

func (o OidcOutput) UserTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.UserTypeId }).(pulumi.StringOutput)
}

func (o OidcOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type OidcArrayOutput struct{ *pulumi.OutputState }

func (OidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (o OidcArrayOutput) ToOidcArrayOutput() OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Oidc] {
	return pulumix.Output[[]*Oidc]{
		OutputState: o.OutputState,
	}
}

func (o OidcArrayOutput) Index(i pulumi.IntInput) OidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].([]*Oidc)[vs[1].(int)]
	}).(OidcOutput)
}

type OidcMapOutput struct{ *pulumi.OutputState }

func (OidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (o OidcMapOutput) ToOidcMapOutput() OidcMapOutput {
	return o
}

func (o OidcMapOutput) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return o
}

func (o OidcMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Oidc] {
	return pulumix.Output[map[string]*Oidc]{
		OutputState: o.OutputState,
	}
}

func (o OidcMapOutput) MapIndex(k pulumi.StringInput) OidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].(map[string]*Oidc)[vs[1].(string)]
	}).(OidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OidcInput)(nil)).Elem(), &Oidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcArrayInput)(nil)).Elem(), OidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcMapInput)(nil)).Elem(), OidcMap{})
	pulumi.RegisterOutputType(OidcOutput{})
	pulumi.RegisterOutputType(OidcArrayOutput{})
	pulumi.RegisterOutputType(OidcMapOutput{})
}
