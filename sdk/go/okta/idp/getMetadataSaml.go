// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get SAML IdP metadata from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/idp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := idp.GetMetadataSaml(ctx, &idp.GetMetadataSamlArgs{
//				IdpId: pulumi.StringRef("<idp id>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMetadataSaml(ctx *pulumi.Context, args *GetMetadataSamlArgs, opts ...pulumi.InvokeOption) (*GetMetadataSamlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMetadataSamlResult
	err := ctx.Invoke("okta:idp/getMetadataSaml:getMetadataSaml", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetadataSaml.
type GetMetadataSamlArgs struct {
	// The id of the IdP to retrieve metadata for.
	IdpId *string `pulumi:"idpId"`
}

// A collection of values returned by getMetadataSaml.
type GetMetadataSamlResult struct {
	// Whether assertions are signed.
	AssertionsSigned bool `pulumi:"assertionsSigned"`
	// Whether authn requests are signed.
	AuthnRequestSigned bool `pulumi:"authnRequestSigned"`
	// SAML request encryption certificate.
	EncryptionCertificate string `pulumi:"encryptionCertificate"`
	// Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
	EntityId string `pulumi:"entityId"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding string `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding string `pulumi:"httpRedirectBinding"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the IdP to retrieve metadata for.
	IdpId *string `pulumi:"idpId"`
	// Raw IdP metadata.
	Metadata string `pulumi:"metadata"`
	// SAML request signing certificate.
	SigningCertificate string `pulumi:"signingCertificate"`
}

func GetMetadataSamlOutput(ctx *pulumi.Context, args GetMetadataSamlOutputArgs, opts ...pulumi.InvokeOption) GetMetadataSamlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMetadataSamlResult, error) {
			args := v.(GetMetadataSamlArgs)
			r, err := GetMetadataSaml(ctx, &args, opts...)
			var s GetMetadataSamlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMetadataSamlResultOutput)
}

// A collection of arguments for invoking getMetadataSaml.
type GetMetadataSamlOutputArgs struct {
	// The id of the IdP to retrieve metadata for.
	IdpId pulumi.StringPtrInput `pulumi:"idpId"`
}

func (GetMetadataSamlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataSamlArgs)(nil)).Elem()
}

// A collection of values returned by getMetadataSaml.
type GetMetadataSamlResultOutput struct{ *pulumi.OutputState }

func (GetMetadataSamlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataSamlResult)(nil)).Elem()
}

func (o GetMetadataSamlResultOutput) ToGetMetadataSamlResultOutput() GetMetadataSamlResultOutput {
	return o
}

func (o GetMetadataSamlResultOutput) ToGetMetadataSamlResultOutputWithContext(ctx context.Context) GetMetadataSamlResultOutput {
	return o
}

func (o GetMetadataSamlResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetMetadataSamlResult] {
	return pulumix.Output[GetMetadataSamlResult]{
		OutputState: o.OutputState,
	}
}

// Whether assertions are signed.
func (o GetMetadataSamlResultOutput) AssertionsSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) bool { return v.AssertionsSigned }).(pulumi.BoolOutput)
}

// Whether authn requests are signed.
func (o GetMetadataSamlResultOutput) AuthnRequestSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) bool { return v.AuthnRequestSigned }).(pulumi.BoolOutput)
}

// SAML request encryption certificate.
func (o GetMetadataSamlResultOutput) EncryptionCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.EncryptionCertificate }).(pulumi.StringOutput)
}

// Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
func (o GetMetadataSamlResultOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.EntityId }).(pulumi.StringOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
func (o GetMetadataSamlResultOutput) HttpPostBinding() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.HttpPostBinding }).(pulumi.StringOutput)
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
func (o GetMetadataSamlResultOutput) HttpRedirectBinding() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.HttpRedirectBinding }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMetadataSamlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the IdP to retrieve metadata for.
func (o GetMetadataSamlResultOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) *string { return v.IdpId }).(pulumi.StringPtrOutput)
}

// Raw IdP metadata.
func (o GetMetadataSamlResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// SAML request signing certificate.
func (o GetMetadataSamlResultOutput) SigningCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataSamlResult) string { return v.SigningCertificate }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMetadataSamlResultOutput{})
}
