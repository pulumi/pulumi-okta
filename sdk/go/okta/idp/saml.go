// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Saml struct {
	pulumi.CustomResourceState

	AccountLinkAction        pulumi.StringPtrOutput   `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	AcsBinding               pulumi.StringOutput      `pulumi:"acsBinding"`
	AcsType                  pulumi.StringPtrOutput   `pulumi:"acsType"`
	Audience                 pulumi.StringOutput      `pulumi:"audience"`
	DeprovisionedAction      pulumi.StringPtrOutput   `pulumi:"deprovisionedAction"`
	GroupsAction             pulumi.StringPtrOutput   `pulumi:"groupsAction"`
	GroupsAssignments        pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	GroupsAttribute          pulumi.StringPtrOutput   `pulumi:"groupsAttribute"`
	GroupsFilters            pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	Issuer                   pulumi.StringOutput      `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrOutput `pulumi:"issuerMode"`
	Kid          pulumi.StringOutput    `pulumi:"kid"`
	MaxClockSkew pulumi.IntPtrOutput    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               pulumi.StringOutput    `pulumi:"name"`
	NameFormat         pulumi.StringPtrOutput `pulumi:"nameFormat"`
	ProfileMaster      pulumi.BoolPtrOutput   `pulumi:"profileMaster"`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The XML digital Signature Algorithm used when signing an \n\n message
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign \n\n messages to the IdP
	RequestSignatureScope pulumi.StringPtrOutput `pulumi:"requestSignatureScope"`
	// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
	ResponseSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a \n\n message or \n\n element XML digital signature
	ResponseSignatureScope pulumi.StringPtrOutput   `pulumi:"responseSignatureScope"`
	SsoBinding             pulumi.StringPtrOutput   `pulumi:"ssoBinding"`
	SsoDestination         pulumi.StringPtrOutput   `pulumi:"ssoDestination"`
	SsoUrl                 pulumi.StringOutput      `pulumi:"ssoUrl"`
	Status                 pulumi.StringPtrOutput   `pulumi:"status"`
	SubjectFilter          pulumi.StringPtrOutput   `pulumi:"subjectFilter"`
	SubjectFormats         pulumi.StringArrayOutput `pulumi:"subjectFormats"`
	SubjectMatchAttribute  pulumi.StringPtrOutput   `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       pulumi.StringPtrOutput   `pulumi:"subjectMatchType"`
	SuspendedAction        pulumi.StringPtrOutput   `pulumi:"suspendedAction"`
	Type                   pulumi.StringOutput      `pulumi:"type"`
	UserTypeId             pulumi.StringOutput      `pulumi:"userTypeId"`
	UsernameTemplate       pulumi.StringPtrOutput   `pulumi:"usernameTemplate"`
}

// NewSaml registers a new resource with the given unique name, arguments, and options.
func NewSaml(ctx *pulumi.Context,
	name string, args *SamlArgs, opts ...pulumi.ResourceOption) (*Saml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.Kid == nil {
		return nil, errors.New("invalid value for required argument 'Kid'")
	}
	if args.SsoUrl == nil {
		return nil, errors.New("invalid value for required argument 'SsoUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Saml
	err := ctx.RegisterResource("okta:idp/saml:Saml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaml gets an existing Saml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlState, opts ...pulumi.ResourceOption) (*Saml, error) {
	var resource Saml
	err := ctx.ReadResource("okta:idp/saml:Saml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saml resources.
type samlState struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AcsBinding               *string  `pulumi:"acsBinding"`
	AcsType                  *string  `pulumi:"acsType"`
	Audience                 *string  `pulumi:"audience"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	Issuer                   *string  `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	Kid          *string `pulumi:"kid"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	NameFormat         *string `pulumi:"nameFormat"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The XML digital Signature Algorithm used when signing an \n\n message
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign \n\n messages to the IdP
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a \n\n message or \n\n element XML digital signature
	ResponseSignatureScope *string  `pulumi:"responseSignatureScope"`
	SsoBinding             *string  `pulumi:"ssoBinding"`
	SsoDestination         *string  `pulumi:"ssoDestination"`
	SsoUrl                 *string  `pulumi:"ssoUrl"`
	Status                 *string  `pulumi:"status"`
	SubjectFilter          *string  `pulumi:"subjectFilter"`
	SubjectFormats         []string `pulumi:"subjectFormats"`
	SubjectMatchAttribute  *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       *string  `pulumi:"subjectMatchType"`
	SuspendedAction        *string  `pulumi:"suspendedAction"`
	Type                   *string  `pulumi:"type"`
	UserTypeId             *string  `pulumi:"userTypeId"`
	UsernameTemplate       *string  `pulumi:"usernameTemplate"`
}

type SamlState struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AcsBinding               pulumi.StringPtrInput
	AcsType                  pulumi.StringPtrInput
	Audience                 pulumi.StringPtrInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	Issuer                   pulumi.StringPtrInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	Kid          pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	NameFormat         pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The XML digital Signature Algorithm used when signing an \n\n message
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign \n\n messages to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to verify a \n\n message or \n\n element XML digital signature
	ResponseSignatureScope pulumi.StringPtrInput
	SsoBinding             pulumi.StringPtrInput
	SsoDestination         pulumi.StringPtrInput
	SsoUrl                 pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	SubjectFilter          pulumi.StringPtrInput
	SubjectFormats         pulumi.StringArrayInput
	SubjectMatchAttribute  pulumi.StringPtrInput
	SubjectMatchType       pulumi.StringPtrInput
	SuspendedAction        pulumi.StringPtrInput
	Type                   pulumi.StringPtrInput
	UserTypeId             pulumi.StringPtrInput
	UsernameTemplate       pulumi.StringPtrInput
}

func (SamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlState)(nil)).Elem()
}

type samlArgs struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AcsType                  *string  `pulumi:"acsType"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	Issuer                   string   `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	Kid          string  `pulumi:"kid"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	NameFormat         *string `pulumi:"nameFormat"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The XML digital Signature Algorithm used when signing an \n\n message
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign \n\n messages to the IdP
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a \n\n message or \n\n element XML digital signature
	ResponseSignatureScope *string  `pulumi:"responseSignatureScope"`
	SsoBinding             *string  `pulumi:"ssoBinding"`
	SsoDestination         *string  `pulumi:"ssoDestination"`
	SsoUrl                 string   `pulumi:"ssoUrl"`
	Status                 *string  `pulumi:"status"`
	SubjectFilter          *string  `pulumi:"subjectFilter"`
	SubjectFormats         []string `pulumi:"subjectFormats"`
	SubjectMatchAttribute  *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       *string  `pulumi:"subjectMatchType"`
	SuspendedAction        *string  `pulumi:"suspendedAction"`
	UsernameTemplate       *string  `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Saml resource.
type SamlArgs struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AcsType                  pulumi.StringPtrInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	Issuer                   pulumi.StringInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	Kid          pulumi.StringInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	NameFormat         pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The XML digital Signature Algorithm used when signing an \n\n message
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign \n\n messages to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to verify a \n\n message or \n\n element XML digital signature
	ResponseSignatureScope pulumi.StringPtrInput
	SsoBinding             pulumi.StringPtrInput
	SsoDestination         pulumi.StringPtrInput
	SsoUrl                 pulumi.StringInput
	Status                 pulumi.StringPtrInput
	SubjectFilter          pulumi.StringPtrInput
	SubjectFormats         pulumi.StringArrayInput
	SubjectMatchAttribute  pulumi.StringPtrInput
	SubjectMatchType       pulumi.StringPtrInput
	SuspendedAction        pulumi.StringPtrInput
	UsernameTemplate       pulumi.StringPtrInput
}

func (SamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlArgs)(nil)).Elem()
}

type SamlInput interface {
	pulumi.Input

	ToSamlOutput() SamlOutput
	ToSamlOutputWithContext(ctx context.Context) SamlOutput
}

func (*Saml) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (i *Saml) ToSamlOutput() SamlOutput {
	return i.ToSamlOutputWithContext(context.Background())
}

func (i *Saml) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlOutput)
}

func (i *Saml) ToOutput(ctx context.Context) pulumix.Output[*Saml] {
	return pulumix.Output[*Saml]{
		OutputState: i.ToSamlOutputWithContext(ctx).OutputState,
	}
}

// SamlArrayInput is an input type that accepts SamlArray and SamlArrayOutput values.
// You can construct a concrete instance of `SamlArrayInput` via:
//
//	SamlArray{ SamlArgs{...} }
type SamlArrayInput interface {
	pulumi.Input

	ToSamlArrayOutput() SamlArrayOutput
	ToSamlArrayOutputWithContext(context.Context) SamlArrayOutput
}

type SamlArray []SamlInput

func (SamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml)(nil)).Elem()
}

func (i SamlArray) ToSamlArrayOutput() SamlArrayOutput {
	return i.ToSamlArrayOutputWithContext(context.Background())
}

func (i SamlArray) ToSamlArrayOutputWithContext(ctx context.Context) SamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlArrayOutput)
}

func (i SamlArray) ToOutput(ctx context.Context) pulumix.Output[[]*Saml] {
	return pulumix.Output[[]*Saml]{
		OutputState: i.ToSamlArrayOutputWithContext(ctx).OutputState,
	}
}

// SamlMapInput is an input type that accepts SamlMap and SamlMapOutput values.
// You can construct a concrete instance of `SamlMapInput` via:
//
//	SamlMap{ "key": SamlArgs{...} }
type SamlMapInput interface {
	pulumi.Input

	ToSamlMapOutput() SamlMapOutput
	ToSamlMapOutputWithContext(context.Context) SamlMapOutput
}

type SamlMap map[string]SamlInput

func (SamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml)(nil)).Elem()
}

func (i SamlMap) ToSamlMapOutput() SamlMapOutput {
	return i.ToSamlMapOutputWithContext(context.Background())
}

func (i SamlMap) ToSamlMapOutputWithContext(ctx context.Context) SamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlMapOutput)
}

func (i SamlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Saml] {
	return pulumix.Output[map[string]*Saml]{
		OutputState: i.ToSamlMapOutputWithContext(ctx).OutputState,
	}
}

type SamlOutput struct{ *pulumi.OutputState }

func (SamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (o SamlOutput) ToSamlOutput() SamlOutput {
	return o
}

func (o SamlOutput) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return o
}

func (o SamlOutput) ToOutput(ctx context.Context) pulumix.Output[*Saml] {
	return pulumix.Output[*Saml]{
		OutputState: o.OutputState,
	}
}

func (o SamlOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

func (o SamlOutput) AcsBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.AcsBinding }).(pulumi.StringOutput)
}

func (o SamlOutput) AcsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.AcsType }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Audience }).(pulumi.StringOutput)
}

func (o SamlOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

func (o SamlOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

func (o SamlOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
func (o SamlOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Kid }).(pulumi.StringOutput)
}

func (o SamlOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o SamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SamlOutput) NameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.NameFormat }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

func (o SamlOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

// The XML digital Signature Algorithm used when signing an \n\n message
func (o SamlOutput) RequestSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.RequestSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies whether to digitally sign \n\n messages to the IdP
func (o SamlOutput) RequestSignatureScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.RequestSignatureScope }).(pulumi.StringPtrOutput)
}

// The minimum XML digital Signature Algorithm allowed when verifying a \n\n message or \n\n element
func (o SamlOutput) ResponseSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.ResponseSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies whether to verify a \n\n message or \n\n element XML digital signature
func (o SamlOutput) ResponseSignatureScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.ResponseSignatureScope }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SsoBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SsoBinding }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SsoDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SsoDestination }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.SsoUrl }).(pulumi.StringOutput)
}

func (o SamlOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SubjectFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SubjectFilter }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SubjectFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringArrayOutput { return v.SubjectFormats }).(pulumi.StringArrayOutput)
}

func (o SamlOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

func (o SamlOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o SamlOutput) UserTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringOutput { return v.UserTypeId }).(pulumi.StringOutput)
}

func (o SamlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SamlArrayOutput struct{ *pulumi.OutputState }

func (SamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml)(nil)).Elem()
}

func (o SamlArrayOutput) ToSamlArrayOutput() SamlArrayOutput {
	return o
}

func (o SamlArrayOutput) ToSamlArrayOutputWithContext(ctx context.Context) SamlArrayOutput {
	return o
}

func (o SamlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Saml] {
	return pulumix.Output[[]*Saml]{
		OutputState: o.OutputState,
	}
}

func (o SamlArrayOutput) Index(i pulumi.IntInput) SamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Saml {
		return vs[0].([]*Saml)[vs[1].(int)]
	}).(SamlOutput)
}

type SamlMapOutput struct{ *pulumi.OutputState }

func (SamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml)(nil)).Elem()
}

func (o SamlMapOutput) ToSamlMapOutput() SamlMapOutput {
	return o
}

func (o SamlMapOutput) ToSamlMapOutputWithContext(ctx context.Context) SamlMapOutput {
	return o
}

func (o SamlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Saml] {
	return pulumix.Output[map[string]*Saml]{
		OutputState: o.OutputState,
	}
}

func (o SamlMapOutput) MapIndex(k pulumi.StringInput) SamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Saml {
		return vs[0].(map[string]*Saml)[vs[1].(string)]
	}).(SamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlInput)(nil)).Elem(), &Saml{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlArrayInput)(nil)).Elem(), SamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlMapInput)(nil)).Elem(), SamlMap{})
	pulumi.RegisterOutputType(SamlOutput{})
	pulumi.RegisterOutputType(SamlArrayOutput{})
	pulumi.RegisterOutputType(SamlMapOutput{})
}
