// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a SAML Identity Provider.
//
// This resource allows you to create and configure a SAML Identity Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/idp"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := idp.NewSaml(ctx, "example", &idp.SamlArgs{
// 			AcsBinding:             pulumi.String("HTTP-POST"),
// 			AcsType:                pulumi.String("INSTANCE"),
// 			Issuer:                 pulumi.String("https://idp.example.com"),
// 			Kid:                    pulumi.String(okta_idp_saml_key.Test.Id),
// 			RequestSignatureScope:  pulumi.String("REQUEST"),
// 			ResponseSignatureScope: pulumi.String("ANY"),
// 			SsoBinding:             pulumi.String("HTTP-POST"),
// 			SsoDestination:         pulumi.String("https://idp.example.com"),
// 			SsoUrl:                 pulumi.String("https://idp.example.com"),
// 			UsernameTemplate:       pulumi.String("idpuser.email"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Saml struct {
	pulumi.CustomResourceState

	// Specifies the account linking action for an IdP user.
	AccountLinkAction pulumi.StringPtrOutput `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding pulumi.StringOutput `pulumi:"acsBinding"`
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType pulumi.StringPtrOutput `pulumi:"acsType"`
	// The audience restriction for the IdP.
	Audience pulumi.StringOutput `pulumi:"audience"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction pulumi.StringPtrOutput `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction pulumi.StringPtrOutput `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrOutput `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// URI that identifies the issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// The ID of the signing key.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// The Application's display name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat pulumi.StringPtrOutput `pulumi:"nameFormat"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrOutput `pulumi:"profileMaster"`
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope pulumi.StringPtrOutput `pulumi:"requestSignatureScope"`
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope pulumi.StringPtrOutput `pulumi:"responseSignatureScope"`
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding pulumi.StringPtrOutput `pulumi:"ssoBinding"`
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination pulumi.StringPtrOutput `pulumi:"ssoDestination"`
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl pulumi.StringOutput `pulumi:"ssoUrl"`
	// Status of the IdP.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter pulumi.StringPtrOutput `pulumi:"subjectFilter"`
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats pulumi.StringArrayOutput `pulumi:"subjectFormats"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute pulumi.StringPtrOutput `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType pulumi.StringPtrOutput `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction pulumi.StringPtrOutput `pulumi:"suspendedAction"`
	// Type of the IdP.
	Type pulumi.StringOutput `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate pulumi.StringPtrOutput `pulumi:"usernameTemplate"`
}

// NewSaml registers a new resource with the given unique name, arguments, and options.
func NewSaml(ctx *pulumi.Context,
	name string, args *SamlArgs, opts ...pulumi.ResourceOption) (*Saml, error) {
	if args == nil || args.AcsBinding == nil {
		return nil, errors.New("missing required argument 'AcsBinding'")
	}
	if args == nil || args.Issuer == nil {
		return nil, errors.New("missing required argument 'Issuer'")
	}
	if args == nil || args.Kid == nil {
		return nil, errors.New("missing required argument 'Kid'")
	}
	if args == nil || args.SsoUrl == nil {
		return nil, errors.New("missing required argument 'SsoUrl'")
	}
	if args == nil {
		args = &SamlArgs{}
	}
	var resource Saml
	err := ctx.RegisterResource("okta:idp/saml:Saml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaml gets an existing Saml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlState, opts ...pulumi.ResourceOption) (*Saml, error) {
	var resource Saml
	err := ctx.ReadResource("okta:idp/saml:Saml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saml resources.
type samlState struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding *string `pulumi:"acsBinding"`
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType *string `pulumi:"acsType"`
	// The audience restriction for the IdP.
	Audience *string `pulumi:"audience"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// URI that identifies the issuer.
	Issuer *string `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode *string `pulumi:"issuerMode"`
	// The ID of the signing key.
	Kid *string `pulumi:"kid"`
	// The Application's display name.
	Name *string `pulumi:"name"`
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat *string `pulumi:"nameFormat"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope *string `pulumi:"responseSignatureScope"`
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding *string `pulumi:"ssoBinding"`
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination *string `pulumi:"ssoDestination"`
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of the IdP.
	Status *string `pulumi:"status"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter *string `pulumi:"subjectFilter"`
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats []string `pulumi:"subjectFormats"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// Type of the IdP.
	Type *string `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type SamlState struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding pulumi.StringPtrInput
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType pulumi.StringPtrInput
	// The audience restriction for the IdP.
	Audience pulumi.StringPtrInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// URI that identifies the issuer.
	Issuer pulumi.StringPtrInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode pulumi.StringPtrInput
	// The ID of the signing key.
	Kid pulumi.StringPtrInput
	// The Application's display name.
	Name pulumi.StringPtrInput
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat pulumi.StringPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction pulumi.StringPtrInput
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope pulumi.StringPtrInput
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope pulumi.StringPtrInput
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding pulumi.StringPtrInput
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination pulumi.StringPtrInput
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl pulumi.StringPtrInput
	// Status of the IdP.
	Status pulumi.StringPtrInput
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter pulumi.StringPtrInput
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats pulumi.StringArrayInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction pulumi.StringPtrInput
	// Type of the IdP.
	Type pulumi.StringPtrInput
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate pulumi.StringPtrInput
}

func (SamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlState)(nil)).Elem()
}

type samlArgs struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction *string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding string `pulumi:"acsBinding"`
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType *string `pulumi:"acsType"`
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction *string `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction *string `pulumi:"groupsAction"`
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute *string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters []string `pulumi:"groupsFilters"`
	// URI that identifies the issuer.
	Issuer string `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode *string `pulumi:"issuerMode"`
	// The ID of the signing key.
	Kid string `pulumi:"kid"`
	// The Application's display name.
	Name *string `pulumi:"name"`
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat *string `pulumi:"nameFormat"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster *bool `pulumi:"profileMaster"`
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope *string `pulumi:"responseSignatureScope"`
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding *string `pulumi:"ssoBinding"`
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination *string `pulumi:"ssoDestination"`
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl string `pulumi:"ssoUrl"`
	// Status of the IdP.
	Status *string `pulumi:"status"`
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter *string `pulumi:"subjectFilter"`
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats []string `pulumi:"subjectFormats"`
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute *string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType *string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction *string `pulumi:"suspendedAction"`
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Saml resource.
type SamlArgs struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction pulumi.StringPtrInput
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding pulumi.StringInput
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType pulumi.StringPtrInput
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction pulumi.StringPtrInput
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction pulumi.StringPtrInput
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments pulumi.StringArrayInput
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute pulumi.StringPtrInput
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters pulumi.StringArrayInput
	// URI that identifies the issuer.
	Issuer pulumi.StringInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode pulumi.StringPtrInput
	// The ID of the signing key.
	Kid pulumi.StringInput
	// The Application's display name.
	Name pulumi.StringPtrInput
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat pulumi.StringPtrInput
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster pulumi.BoolPtrInput
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction pulumi.StringPtrInput
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope pulumi.StringPtrInput
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope pulumi.StringPtrInput
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding pulumi.StringPtrInput
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination pulumi.StringPtrInput
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl pulumi.StringInput
	// Status of the IdP.
	Status pulumi.StringPtrInput
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter pulumi.StringPtrInput
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats pulumi.StringArrayInput
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute pulumi.StringPtrInput
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType pulumi.StringPtrInput
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction pulumi.StringPtrInput
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate pulumi.StringPtrInput
}

func (SamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlArgs)(nil)).Elem()
}
