// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to retrieve a social IdP from Okta, namely `APPLE`, `FACEBOOK`, `LINKEDIN`, `MICROSOFT`, or  `GOOGLE`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/idp"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "My Facebook IdP"
// 		_, err := idp.LookupSocial(ctx, &idp.LookupSocialArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSocial(ctx *pulumi.Context, args *LookupSocialArgs, opts ...pulumi.InvokeOption) (*LookupSocialResult, error) {
	var rv LookupSocialResult
	err := ctx.Invoke("okta:idp/getSocial:getSocial", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSocial.
type LookupSocialArgs struct {
	// The id of the social idp to retrieve, conflicts with `name`.
	Id *string `pulumi:"id"`
	// The name of the social idp to retrieve, conflicts with `id`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getSocial.
type LookupSocialResult struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction string `pulumi:"accountLinkAction"`
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// The method of making an authorization request.
	AuthorizationBinding string `pulumi:"authorizationBinding"`
	// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
	AuthorizationUrl string `pulumi:"authorizationUrl"`
	// Unique identifier issued by AS for the Okta IdP instance.
	ClientId string `pulumi:"clientId"`
	// Client secret issued by AS for the Okta IdP instance.
	ClientSecret string `pulumi:"clientSecret"`
	// Action for a previously deprovisioned IdP user during authentication.
	DeprovisionedAction string `pulumi:"deprovisionedAction"`
	// Provisioning action for IdP user's group memberships.
	GroupsAction string `pulumi:"groupsAction"`
	// List of Okta Group IDs.
	GroupsAssignments []string `pulumi:"groupsAssignments"`
	// IdP user profile attribute name for an array value that contains group memberships.
	GroupsAttribute string `pulumi:"groupsAttribute"`
	// Whitelist of Okta Group identifiers.
	GroupsFilters []string `pulumi:"groupsFilters"`
	Id            *string  `pulumi:"id"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
	IssuerMode string `pulumi:"issuerMode"`
	// Maximum allowable clock-skew when processing messages from the IdP.
	MaxClockSkew int     `pulumi:"maxClockSkew"`
	Name         *string `pulumi:"name"`
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster bool `pulumi:"profileMaster"`
	// The type of protocol to use.
	ProtocolType string `pulumi:"protocolType"`
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction string `pulumi:"provisioningAction"`
	// The scopes of the IdP.
	Scopes []string `pulumi:"scopes"`
	// Status of the IdP.
	Status string `pulumi:"status"`
	// Okta user profile attribute for matching transformed IdP username.
	SubjectMatchAttribute string `pulumi:"subjectMatchAttribute"`
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username.
	SubjectMatchType string `pulumi:"subjectMatchType"`
	// Action for a previously suspended IdP user during authentication.
	SuspendedAction string `pulumi:"suspendedAction"`
	// The method of making a token request.
	TokenBinding string `pulumi:"tokenBinding"`
	// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
	TokenUrl string `pulumi:"tokenUrl"`
	// The type of Social IdP.
	Type string `pulumi:"type"`
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate string `pulumi:"usernameTemplate"`
}
