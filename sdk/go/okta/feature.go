// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages brand. This resource allows you to toggle an Okta Feature.
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/feature:Feature example <id>
// ```
type Feature struct {
	pulumi.CustomResourceState

	// Name of the feature.
	Description pulumi.StringOutput `pulumi:"description"`
	// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
	FeatureId pulumi.StringOutput `pulumi:"featureId"`
	// Whether to `ENABLE` or `DISABLE` the feature
	LifeCycle pulumi.StringPtrOutput `pulumi:"lifeCycle"`
	// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
	Mode pulumi.BoolPtrOutput `pulumi:"mode"`
	// Name of the feature.
	Name pulumi.StringOutput `pulumi:"name"`
	// Current release cycle stage of a feature.
	Stage FeatureStageOutput `pulumi:"stage"`
	// The feature status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of feature.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Feature
	err := ctx.RegisterResource("okta:index/feature:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("okta:index/feature:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
	// Name of the feature.
	Description *string `pulumi:"description"`
	// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
	FeatureId *string `pulumi:"featureId"`
	// Whether to `ENABLE` or `DISABLE` the feature
	LifeCycle *string `pulumi:"lifeCycle"`
	// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
	Mode *bool `pulumi:"mode"`
	// Name of the feature.
	Name *string `pulumi:"name"`
	// Current release cycle stage of a feature.
	Stage *FeatureStage `pulumi:"stage"`
	// The feature status.
	Status *string `pulumi:"status"`
	// Type of feature.
	Type *string `pulumi:"type"`
}

type FeatureState struct {
	// Name of the feature.
	Description pulumi.StringPtrInput
	// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
	FeatureId pulumi.StringPtrInput
	// Whether to `ENABLE` or `DISABLE` the feature
	LifeCycle pulumi.StringPtrInput
	// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
	Mode pulumi.BoolPtrInput
	// Name of the feature.
	Name pulumi.StringPtrInput
	// Current release cycle stage of a feature.
	Stage FeatureStagePtrInput
	// The feature status.
	Status pulumi.StringPtrInput
	// Type of feature.
	Type pulumi.StringPtrInput
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
	FeatureId string `pulumi:"featureId"`
	// Whether to `ENABLE` or `DISABLE` the feature
	LifeCycle *string `pulumi:"lifeCycle"`
	// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
	Mode *bool `pulumi:"mode"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
	FeatureId pulumi.StringInput
	// Whether to `ENABLE` or `DISABLE` the feature
	LifeCycle pulumi.StringPtrInput
	// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
	Mode pulumi.BoolPtrInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

// FeatureArrayInput is an input type that accepts FeatureArray and FeatureArrayOutput values.
// You can construct a concrete instance of `FeatureArrayInput` via:
//
//	FeatureArray{ FeatureArgs{...} }
type FeatureArrayInput interface {
	pulumi.Input

	ToFeatureArrayOutput() FeatureArrayOutput
	ToFeatureArrayOutputWithContext(context.Context) FeatureArrayOutput
}

type FeatureArray []FeatureInput

func (FeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Feature)(nil)).Elem()
}

func (i FeatureArray) ToFeatureArrayOutput() FeatureArrayOutput {
	return i.ToFeatureArrayOutputWithContext(context.Background())
}

func (i FeatureArray) ToFeatureArrayOutputWithContext(ctx context.Context) FeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureArrayOutput)
}

// FeatureMapInput is an input type that accepts FeatureMap and FeatureMapOutput values.
// You can construct a concrete instance of `FeatureMapInput` via:
//
//	FeatureMap{ "key": FeatureArgs{...} }
type FeatureMapInput interface {
	pulumi.Input

	ToFeatureMapOutput() FeatureMapOutput
	ToFeatureMapOutputWithContext(context.Context) FeatureMapOutput
}

type FeatureMap map[string]FeatureInput

func (FeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Feature)(nil)).Elem()
}

func (i FeatureMap) ToFeatureMapOutput() FeatureMapOutput {
	return i.ToFeatureMapOutputWithContext(context.Background())
}

func (i FeatureMap) ToFeatureMapOutputWithContext(ctx context.Context) FeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMapOutput)
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

// Name of the feature.
func (o FeatureOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
func (o FeatureOutput) FeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.FeatureId }).(pulumi.StringOutput)
}

// Whether to `ENABLE` or `DISABLE` the feature
func (o FeatureOutput) LifeCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.LifeCycle }).(pulumi.StringPtrOutput)
}

// Indicates if you want to force enable or disable a feature. Value is `true` meaning force
func (o FeatureOutput) Mode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.BoolPtrOutput { return v.Mode }).(pulumi.BoolPtrOutput)
}

// Name of the feature.
func (o FeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Current release cycle stage of a feature.
func (o FeatureOutput) Stage() FeatureStageOutput {
	return o.ApplyT(func(v *Feature) FeatureStageOutput { return v.Stage }).(FeatureStageOutput)
}

// The feature status.
func (o FeatureOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of feature.
func (o FeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FeatureArrayOutput struct{ *pulumi.OutputState }

func (FeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Feature)(nil)).Elem()
}

func (o FeatureArrayOutput) ToFeatureArrayOutput() FeatureArrayOutput {
	return o
}

func (o FeatureArrayOutput) ToFeatureArrayOutputWithContext(ctx context.Context) FeatureArrayOutput {
	return o
}

func (o FeatureArrayOutput) Index(i pulumi.IntInput) FeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Feature {
		return vs[0].([]*Feature)[vs[1].(int)]
	}).(FeatureOutput)
}

type FeatureMapOutput struct{ *pulumi.OutputState }

func (FeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Feature)(nil)).Elem()
}

func (o FeatureMapOutput) ToFeatureMapOutput() FeatureMapOutput {
	return o
}

func (o FeatureMapOutput) ToFeatureMapOutputWithContext(ctx context.Context) FeatureMapOutput {
	return o
}

func (o FeatureMapOutput) MapIndex(k pulumi.StringInput) FeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Feature {
		return vs[0].(map[string]*Feature)[vs[1].(string)]
	}).(FeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInput)(nil)).Elem(), &Feature{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureArrayInput)(nil)).Elem(), FeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMapInput)(nil)).Elem(), FeatureMap{})
	pulumi.RegisterOutputType(FeatureOutput{})
	pulumi.RegisterOutputType(FeatureArrayOutput{})
	pulumi.RegisterOutputType(FeatureMapOutput{})
}
