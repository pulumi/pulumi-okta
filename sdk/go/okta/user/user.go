// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an Okta User.
//
// This resource allows you to create and configure an Okta User.
//
// ## Example Usage
//
// Full profile:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewUser(ctx, "example", &user.UserArgs{
//				City:              pulumi.String("New York"),
//				CostCenter:        pulumi.String("10"),
//				CountryCode:       pulumi.String("US"),
//				Department:        pulumi.String("IT"),
//				DisplayName:       pulumi.String("Dr. John Smith"),
//				Division:          pulumi.String("Acquisitions"),
//				Email:             pulumi.String("john.smith@example.com"),
//				EmployeeNumber:    pulumi.String("111111"),
//				FirstName:         pulumi.String("John"),
//				HonorificPrefix:   pulumi.String("Dr."),
//				HonorificSuffix:   pulumi.String("Jr."),
//				LastName:          pulumi.String("Smith"),
//				Locale:            pulumi.String("en_US"),
//				Login:             pulumi.String("john.smith@example.com"),
//				Manager:           pulumi.String("Jimbo"),
//				ManagerId:         pulumi.String("222222"),
//				MiddleName:        pulumi.String("John"),
//				MobilePhone:       pulumi.String("1112223333"),
//				NickName:          pulumi.String("Johnny"),
//				Organization:      pulumi.String("Testing Inc."),
//				PostalAddress:     pulumi.String("1234 Testing St."),
//				PreferredLanguage: pulumi.String("en-us"),
//				PrimaryPhone:      pulumi.String("4445556666"),
//				ProfileUrl:        pulumi.String("https://www.example.com/profile"),
//				SecondEmail:       pulumi.String("john.smith.fun@example.com"),
//				State:             pulumi.String("NY"),
//				StreetAddress:     pulumi.String("5678 Testing Ave."),
//				Timezone:          pulumi.String("America/New_York"),
//				Title:             pulumi.String("Director"),
//				UserType:          pulumi.String("Employee"),
//				ZipCode:           pulumi.String("11111"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With Password Inline Hook:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewUser(ctx, "test2", &user.UserArgs{
//				Email:              pulumi.String("example@example.com"),
//				FirstName:          pulumi.String("John"),
//				LastName:           pulumi.String("Smith"),
//				Login:              pulumi.String("example@example.com"),
//				PasswordInlineHook: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An Okta User can be imported via the ID.
//
// ```sh
//
//	$ pulumi import okta:user/user:User example &#60;user id&#62;
//
// ```
type User struct {
	pulumi.CustomResourceState

	// User profile property.
	City pulumi.StringPtrOutput `pulumi:"city"`
	// User profile property.
	CostCenter pulumi.StringPtrOutput `pulumi:"costCenter"`
	// User profile property.
	CountryCode pulumi.StringPtrOutput `pulumi:"countryCode"`
	// raw JSON containing all custom profile attributes.
	CustomProfileAttributes pulumi.StringOutput `pulumi:"customProfileAttributes"`
	// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
	CustomProfileAttributesToIgnores pulumi.StringArrayOutput `pulumi:"customProfileAttributesToIgnores"`
	// User profile property.
	Department pulumi.StringPtrOutput `pulumi:"department"`
	// User profile property.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// User profile property.
	Division pulumi.StringPtrOutput `pulumi:"division"`
	// User profile property.
	Email pulumi.StringOutput `pulumi:"email"`
	// User profile property.
	EmployeeNumber pulumi.StringPtrOutput `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used
	// when user is being created and works only when `password` field is set. Default is `false`.
	ExpirePasswordOnCreate pulumi.BoolPtrOutput `pulumi:"expirePasswordOnCreate"`
	// User's First Name, required by default.
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// User profile property.
	HonorificPrefix pulumi.StringPtrOutput `pulumi:"honorificPrefix"`
	// User profile property.
	HonorificSuffix pulumi.StringPtrOutput `pulumi:"honorificSuffix"`
	// User's Last Name, required by default.
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// User profile property.
	Locale pulumi.StringPtrOutput `pulumi:"locale"`
	// User profile property.
	Login pulumi.StringOutput `pulumi:"login"`
	// User profile property.
	Manager pulumi.StringPtrOutput `pulumi:"manager"`
	// User profile property.
	ManagerId pulumi.StringPtrOutput `pulumi:"managerId"`
	// User profile property.
	MiddleName pulumi.StringPtrOutput `pulumi:"middleName"`
	// User profile property.
	MobilePhone pulumi.StringPtrOutput `pulumi:"mobilePhone"`
	// User profile property.
	NickName pulumi.StringPtrOutput `pulumi:"nickName"`
	// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
	// outside the provider. After successful password change this field should be removed and `password` field should be used
	// for further changes.
	OldPassword pulumi.StringPtrOutput `pulumi:"oldPassword"`
	// User profile property.
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// User password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrOutput `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification
	// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
	// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
	// field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrOutput `pulumi:"passwordInlineHook"`
	// User profile property.
	PostalAddress pulumi.StringPtrOutput `pulumi:"postalAddress"`
	// User profile property.
	PreferredLanguage pulumi.StringPtrOutput `pulumi:"preferredLanguage"`
	// User profile property.
	PrimaryPhone pulumi.StringPtrOutput `pulumi:"primaryPhone"`
	// User profile property.
	ProfileUrl pulumi.StringPtrOutput `pulumi:"profileUrl"`
	// The raw status of the User in Okta - (status is mapped)
	RawStatus pulumi.StringOutput `pulumi:"rawStatus"`
	// User password recovery answer.
	//
	// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
	// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
	RecoveryAnswer pulumi.StringPtrOutput `pulumi:"recoveryAnswer"`
	// User password recovery question.
	RecoveryQuestion pulumi.StringPtrOutput `pulumi:"recoveryQuestion"`
	// User profile property.
	SecondEmail pulumi.StringPtrOutput `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrOutput `pulumi:"skipRoles"`
	// User profile property.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// User profile property.
	StreetAddress pulumi.StringPtrOutput `pulumi:"streetAddress"`
	// User profile property.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// User profile property.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// User profile property.
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
	// User profile property.
	ZipCode pulumi.StringPtrOutput `pulumi:"zipCode"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.OldPassword != nil {
		args.OldPassword = pulumi.ToSecret(args.OldPassword).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.RecoveryAnswer != nil {
		args.RecoveryAnswer = pulumi.ToSecret(args.RecoveryAnswer).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"oldPassword",
		"password",
		"recoveryAnswer",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("okta:user/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("okta:user/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// User profile property.
	City *string `pulumi:"city"`
	// User profile property.
	CostCenter *string `pulumi:"costCenter"`
	// User profile property.
	CountryCode *string `pulumi:"countryCode"`
	// raw JSON containing all custom profile attributes.
	CustomProfileAttributes *string `pulumi:"customProfileAttributes"`
	// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
	CustomProfileAttributesToIgnores []string `pulumi:"customProfileAttributesToIgnores"`
	// User profile property.
	Department *string `pulumi:"department"`
	// User profile property.
	DisplayName *string `pulumi:"displayName"`
	// User profile property.
	Division *string `pulumi:"division"`
	// User profile property.
	Email *string `pulumi:"email"`
	// User profile property.
	EmployeeNumber *string `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used
	// when user is being created and works only when `password` field is set. Default is `false`.
	ExpirePasswordOnCreate *bool `pulumi:"expirePasswordOnCreate"`
	// User's First Name, required by default.
	FirstName *string `pulumi:"firstName"`
	// User profile property.
	HonorificPrefix *string `pulumi:"honorificPrefix"`
	// User profile property.
	HonorificSuffix *string `pulumi:"honorificSuffix"`
	// User's Last Name, required by default.
	LastName *string `pulumi:"lastName"`
	// User profile property.
	Locale *string `pulumi:"locale"`
	// User profile property.
	Login *string `pulumi:"login"`
	// User profile property.
	Manager *string `pulumi:"manager"`
	// User profile property.
	ManagerId *string `pulumi:"managerId"`
	// User profile property.
	MiddleName *string `pulumi:"middleName"`
	// User profile property.
	MobilePhone *string `pulumi:"mobilePhone"`
	// User profile property.
	NickName *string `pulumi:"nickName"`
	// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
	// outside the provider. After successful password change this field should be removed and `password` field should be used
	// for further changes.
	OldPassword *string `pulumi:"oldPassword"`
	// User profile property.
	Organization *string `pulumi:"organization"`
	// User password.
	Password *string `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash *UserPasswordHash `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification
	// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
	// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
	// field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook *string `pulumi:"passwordInlineHook"`
	// User profile property.
	PostalAddress *string `pulumi:"postalAddress"`
	// User profile property.
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// User profile property.
	PrimaryPhone *string `pulumi:"primaryPhone"`
	// User profile property.
	ProfileUrl *string `pulumi:"profileUrl"`
	// The raw status of the User in Okta - (status is mapped)
	RawStatus *string `pulumi:"rawStatus"`
	// User password recovery answer.
	//
	// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
	// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
	RecoveryAnswer *string `pulumi:"recoveryAnswer"`
	// User password recovery question.
	RecoveryQuestion *string `pulumi:"recoveryQuestion"`
	// User profile property.
	SecondEmail *string `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
	SkipRoles *bool `pulumi:"skipRoles"`
	// User profile property.
	State *string `pulumi:"state"`
	// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
	Status *string `pulumi:"status"`
	// User profile property.
	StreetAddress *string `pulumi:"streetAddress"`
	// User profile property.
	Timezone *string `pulumi:"timezone"`
	// User profile property.
	Title *string `pulumi:"title"`
	// User profile property.
	UserType *string `pulumi:"userType"`
	// User profile property.
	ZipCode *string `pulumi:"zipCode"`
}

type UserState struct {
	// User profile property.
	City pulumi.StringPtrInput
	// User profile property.
	CostCenter pulumi.StringPtrInput
	// User profile property.
	CountryCode pulumi.StringPtrInput
	// raw JSON containing all custom profile attributes.
	CustomProfileAttributes pulumi.StringPtrInput
	// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
	CustomProfileAttributesToIgnores pulumi.StringArrayInput
	// User profile property.
	Department pulumi.StringPtrInput
	// User profile property.
	DisplayName pulumi.StringPtrInput
	// User profile property.
	Division pulumi.StringPtrInput
	// User profile property.
	Email pulumi.StringPtrInput
	// User profile property.
	EmployeeNumber pulumi.StringPtrInput
	// If set to `true`, the user will have to change the password at the next login. This property will be used
	// when user is being created and works only when `password` field is set. Default is `false`.
	ExpirePasswordOnCreate pulumi.BoolPtrInput
	// User's First Name, required by default.
	FirstName pulumi.StringPtrInput
	// User profile property.
	HonorificPrefix pulumi.StringPtrInput
	// User profile property.
	HonorificSuffix pulumi.StringPtrInput
	// User's Last Name, required by default.
	LastName pulumi.StringPtrInput
	// User profile property.
	Locale pulumi.StringPtrInput
	// User profile property.
	Login pulumi.StringPtrInput
	// User profile property.
	Manager pulumi.StringPtrInput
	// User profile property.
	ManagerId pulumi.StringPtrInput
	// User profile property.
	MiddleName pulumi.StringPtrInput
	// User profile property.
	MobilePhone pulumi.StringPtrInput
	// User profile property.
	NickName pulumi.StringPtrInput
	// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
	// outside the provider. After successful password change this field should be removed and `password` field should be used
	// for further changes.
	OldPassword pulumi.StringPtrInput
	// User profile property.
	Organization pulumi.StringPtrInput
	// User password.
	Password pulumi.StringPtrInput
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrInput
	// Specifies that a Password Import Inline Hook should be triggered to handle verification
	// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
	// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
	// field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrInput
	// User profile property.
	PostalAddress pulumi.StringPtrInput
	// User profile property.
	PreferredLanguage pulumi.StringPtrInput
	// User profile property.
	PrimaryPhone pulumi.StringPtrInput
	// User profile property.
	ProfileUrl pulumi.StringPtrInput
	// The raw status of the User in Okta - (status is mapped)
	RawStatus pulumi.StringPtrInput
	// User password recovery answer.
	//
	// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
	// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
	RecoveryAnswer pulumi.StringPtrInput
	// User password recovery question.
	RecoveryQuestion pulumi.StringPtrInput
	// User profile property.
	SecondEmail pulumi.StringPtrInput
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrInput
	// User profile property.
	State pulumi.StringPtrInput
	// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
	Status pulumi.StringPtrInput
	// User profile property.
	StreetAddress pulumi.StringPtrInput
	// User profile property.
	Timezone pulumi.StringPtrInput
	// User profile property.
	Title pulumi.StringPtrInput
	// User profile property.
	UserType pulumi.StringPtrInput
	// User profile property.
	ZipCode pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// User profile property.
	City *string `pulumi:"city"`
	// User profile property.
	CostCenter *string `pulumi:"costCenter"`
	// User profile property.
	CountryCode *string `pulumi:"countryCode"`
	// raw JSON containing all custom profile attributes.
	CustomProfileAttributes *string `pulumi:"customProfileAttributes"`
	// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
	CustomProfileAttributesToIgnores []string `pulumi:"customProfileAttributesToIgnores"`
	// User profile property.
	Department *string `pulumi:"department"`
	// User profile property.
	DisplayName *string `pulumi:"displayName"`
	// User profile property.
	Division *string `pulumi:"division"`
	// User profile property.
	Email string `pulumi:"email"`
	// User profile property.
	EmployeeNumber *string `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used
	// when user is being created and works only when `password` field is set. Default is `false`.
	ExpirePasswordOnCreate *bool `pulumi:"expirePasswordOnCreate"`
	// User's First Name, required by default.
	FirstName string `pulumi:"firstName"`
	// User profile property.
	HonorificPrefix *string `pulumi:"honorificPrefix"`
	// User profile property.
	HonorificSuffix *string `pulumi:"honorificSuffix"`
	// User's Last Name, required by default.
	LastName string `pulumi:"lastName"`
	// User profile property.
	Locale *string `pulumi:"locale"`
	// User profile property.
	Login string `pulumi:"login"`
	// User profile property.
	Manager *string `pulumi:"manager"`
	// User profile property.
	ManagerId *string `pulumi:"managerId"`
	// User profile property.
	MiddleName *string `pulumi:"middleName"`
	// User profile property.
	MobilePhone *string `pulumi:"mobilePhone"`
	// User profile property.
	NickName *string `pulumi:"nickName"`
	// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
	// outside the provider. After successful password change this field should be removed and `password` field should be used
	// for further changes.
	OldPassword *string `pulumi:"oldPassword"`
	// User profile property.
	Organization *string `pulumi:"organization"`
	// User password.
	Password *string `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash *UserPasswordHash `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification
	// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
	// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
	// field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook *string `pulumi:"passwordInlineHook"`
	// User profile property.
	PostalAddress *string `pulumi:"postalAddress"`
	// User profile property.
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// User profile property.
	PrimaryPhone *string `pulumi:"primaryPhone"`
	// User profile property.
	ProfileUrl *string `pulumi:"profileUrl"`
	// User password recovery answer.
	//
	// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
	// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
	RecoveryAnswer *string `pulumi:"recoveryAnswer"`
	// User password recovery question.
	RecoveryQuestion *string `pulumi:"recoveryQuestion"`
	// User profile property.
	SecondEmail *string `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
	SkipRoles *bool `pulumi:"skipRoles"`
	// User profile property.
	State *string `pulumi:"state"`
	// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
	Status *string `pulumi:"status"`
	// User profile property.
	StreetAddress *string `pulumi:"streetAddress"`
	// User profile property.
	Timezone *string `pulumi:"timezone"`
	// User profile property.
	Title *string `pulumi:"title"`
	// User profile property.
	UserType *string `pulumi:"userType"`
	// User profile property.
	ZipCode *string `pulumi:"zipCode"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// User profile property.
	City pulumi.StringPtrInput
	// User profile property.
	CostCenter pulumi.StringPtrInput
	// User profile property.
	CountryCode pulumi.StringPtrInput
	// raw JSON containing all custom profile attributes.
	CustomProfileAttributes pulumi.StringPtrInput
	// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
	CustomProfileAttributesToIgnores pulumi.StringArrayInput
	// User profile property.
	Department pulumi.StringPtrInput
	// User profile property.
	DisplayName pulumi.StringPtrInput
	// User profile property.
	Division pulumi.StringPtrInput
	// User profile property.
	Email pulumi.StringInput
	// User profile property.
	EmployeeNumber pulumi.StringPtrInput
	// If set to `true`, the user will have to change the password at the next login. This property will be used
	// when user is being created and works only when `password` field is set. Default is `false`.
	ExpirePasswordOnCreate pulumi.BoolPtrInput
	// User's First Name, required by default.
	FirstName pulumi.StringInput
	// User profile property.
	HonorificPrefix pulumi.StringPtrInput
	// User profile property.
	HonorificSuffix pulumi.StringPtrInput
	// User's Last Name, required by default.
	LastName pulumi.StringInput
	// User profile property.
	Locale pulumi.StringPtrInput
	// User profile property.
	Login pulumi.StringInput
	// User profile property.
	Manager pulumi.StringPtrInput
	// User profile property.
	ManagerId pulumi.StringPtrInput
	// User profile property.
	MiddleName pulumi.StringPtrInput
	// User profile property.
	MobilePhone pulumi.StringPtrInput
	// User profile property.
	NickName pulumi.StringPtrInput
	// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
	// outside the provider. After successful password change this field should be removed and `password` field should be used
	// for further changes.
	OldPassword pulumi.StringPtrInput
	// User profile property.
	Organization pulumi.StringPtrInput
	// User password.
	Password pulumi.StringPtrInput
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrInput
	// Specifies that a Password Import Inline Hook should be triggered to handle verification
	// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
	// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
	// field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrInput
	// User profile property.
	PostalAddress pulumi.StringPtrInput
	// User profile property.
	PreferredLanguage pulumi.StringPtrInput
	// User profile property.
	PrimaryPhone pulumi.StringPtrInput
	// User profile property.
	ProfileUrl pulumi.StringPtrInput
	// User password recovery answer.
	//
	// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
	// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
	RecoveryAnswer pulumi.StringPtrInput
	// User password recovery question.
	RecoveryQuestion pulumi.StringPtrInput
	// User profile property.
	SecondEmail pulumi.StringPtrInput
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrInput
	// User profile property.
	State pulumi.StringPtrInput
	// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
	Status pulumi.StringPtrInput
	// User profile property.
	StreetAddress pulumi.StringPtrInput
	// User profile property.
	Timezone pulumi.StringPtrInput
	// User profile property.
	Title pulumi.StringPtrInput
	// User profile property.
	UserType pulumi.StringPtrInput
	// User profile property.
	ZipCode pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

func (i *User) ToOutput(ctx context.Context) pulumix.Output[*User] {
	return pulumix.Output[*User]{
		OutputState: i.ToUserOutputWithContext(ctx).OutputState,
	}
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

func (i UserArray) ToOutput(ctx context.Context) pulumix.Output[[]*User] {
	return pulumix.Output[[]*User]{
		OutputState: i.ToUserArrayOutputWithContext(ctx).OutputState,
	}
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

func (i UserMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*User] {
	return pulumix.Output[map[string]*User]{
		OutputState: i.ToUserMapOutputWithContext(ctx).OutputState,
	}
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[*User] {
	return pulumix.Output[*User]{
		OutputState: o.OutputState,
	}
}

// User profile property.
func (o UserOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) CostCenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CostCenter }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// raw JSON containing all custom profile attributes.
func (o UserOutput) CustomProfileAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CustomProfileAttributes }).(pulumi.StringOutput)
}

// List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
func (o UserOutput) CustomProfileAttributesToIgnores() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.CustomProfileAttributesToIgnores }).(pulumi.StringArrayOutput)
}

// User profile property.
func (o UserOutput) Department() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Department }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Division() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Division }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// User profile property.
func (o UserOutput) EmployeeNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.EmployeeNumber }).(pulumi.StringPtrOutput)
}

// If set to `true`, the user will have to change the password at the next login. This property will be used
// when user is being created and works only when `password` field is set. Default is `false`.
func (o UserOutput) ExpirePasswordOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ExpirePasswordOnCreate }).(pulumi.BoolPtrOutput)
}

// User's First Name, required by default.
func (o UserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// User profile property.
func (o UserOutput) HonorificPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.HonorificPrefix }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) HonorificSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.HonorificSuffix }).(pulumi.StringPtrOutput)
}

// User's Last Name, required by default.
func (o UserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// User profile property.
func (o UserOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Locale }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// User profile property.
func (o UserOutput) Manager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Manager }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) ManagerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ManagerId }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) MiddleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.MiddleName }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) MobilePhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.MobilePhone }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) NickName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.NickName }).(pulumi.StringPtrOutput)
}

// Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
// outside the provider. After successful password change this field should be removed and `password` field should be used
// for further changes.
func (o UserOutput) OldPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.OldPassword }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// User password.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies a hashed password to import into Okta.
func (o UserOutput) PasswordHash() UserPasswordHashPtrOutput {
	return o.ApplyT(func(v *User) UserPasswordHashPtrOutput { return v.PasswordHash }).(UserPasswordHashPtrOutput)
}

// Specifies that a Password Import Inline Hook should be triggered to handle verification
// of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly
// from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
// field should not be specified when using Password Import Inline Hook.
func (o UserOutput) PasswordInlineHook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PasswordInlineHook }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) PostalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PostalAddress }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) PreferredLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PreferredLanguage }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) PrimaryPhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PrimaryPhone }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) ProfileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ProfileUrl }).(pulumi.StringPtrOutput)
}

// The raw status of the User in Okta - (status is mapped)
func (o UserOutput) RawStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.RawStatus }).(pulumi.StringOutput)
}

// User password recovery answer.
//
// - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
// - `algorithm"` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
func (o UserOutput) RecoveryAnswer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.RecoveryAnswer }).(pulumi.StringPtrOutput)
}

// User password recovery question.
func (o UserOutput) RecoveryQuestion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.RecoveryQuestion }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) SecondEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.SecondEmail }).(pulumi.StringPtrOutput)
}

// Do not populate user roles information (prevents additional API call)
//
// Deprecated: Because admin_roles has been removed, this attribute is a no op and will be removed
func (o UserOutput) SkipRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.SkipRoles }).(pulumi.BoolPtrOutput)
}

// User profile property.
func (o UserOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// User profile property. Valid values are "ACTIVE", "DEPROVISIONED", "STAGED", "SUSPENDED"
func (o UserOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

// User profile property.
func (o UserOutput) ZipCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ZipCode }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*User] {
	return pulumix.Output[[]*User]{
		OutputState: o.OutputState,
	}
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*User] {
	return pulumix.Output[map[string]*User]{
		OutputState: o.OutputState,
	}
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
