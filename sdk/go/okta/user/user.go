// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Okta User. This resource allows you to create and configure an Okta User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Full profile:
//			_, err := user.NewUser(ctx, "example", &user.UserArgs{
//				FirstName:         pulumi.String("John"),
//				LastName:          pulumi.String("Smith"),
//				Login:             pulumi.String("john.smith@example.com"),
//				Email:             pulumi.String("john.smith@example.com"),
//				City:              pulumi.String("New York"),
//				CostCenter:        pulumi.String("10"),
//				CountryCode:       pulumi.String("US"),
//				Department:        pulumi.String("IT"),
//				DisplayName:       pulumi.String("Dr. John Smith"),
//				Division:          pulumi.String("Acquisitions"),
//				EmployeeNumber:    pulumi.String("111111"),
//				HonorificPrefix:   pulumi.String("Dr."),
//				HonorificSuffix:   pulumi.String("Jr."),
//				Locale:            pulumi.String("en_US"),
//				Manager:           pulumi.String("Jimbo"),
//				ManagerId:         pulumi.String("222222"),
//				MiddleName:        pulumi.String("John"),
//				MobilePhone:       pulumi.String("1112223333"),
//				NickName:          pulumi.String("Johnny"),
//				Organization:      pulumi.String("Testing Inc."),
//				PostalAddress:     pulumi.String("1234 Testing St."),
//				PreferredLanguage: pulumi.String("en-us"),
//				PrimaryPhone:      pulumi.String("4445556666"),
//				ProfileUrl:        pulumi.String("https://www.example.com/profile"),
//				SecondEmail:       pulumi.String("john.smith.fun@example.com"),
//				State:             pulumi.String("NY"),
//				StreetAddress:     pulumi.String("5678 Testing Ave."),
//				Timezone:          pulumi.String("America/New_York"),
//				Title:             pulumi.String("Director"),
//				UserType:          pulumi.String("Employee"),
//				ZipCode:           pulumi.String("11111"),
//			})
//			if err != nil {
//				return err
//			}
//			// ## With Password Inline Hook:
//			_, err = user.NewUser(ctx, "test2", &user.UserArgs{
//				FirstName:          pulumi.String("John"),
//				LastName:           pulumi.String("Smith"),
//				Login:              pulumi.String("example@example.com"),
//				Email:              pulumi.String("example@example.com"),
//				PasswordInlineHook: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:user/user:User example <user_id>
// ```
type User struct {
	pulumi.CustomResourceState

	// User city
	City pulumi.StringPtrOutput `pulumi:"city"`
	// User cost center
	CostCenter pulumi.StringPtrOutput `pulumi:"costCenter"`
	// User country code
	CountryCode pulumi.StringPtrOutput `pulumi:"countryCode"`
	// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
	CustomProfileAttributes          pulumi.StringOutput      `pulumi:"customProfileAttributes"`
	CustomProfileAttributesToIgnores pulumi.StringArrayOutput `pulumi:"customProfileAttributesToIgnores"`
	// User department
	Department pulumi.StringPtrOutput `pulumi:"department"`
	// User display name, suitable to show end users
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// User division
	Division pulumi.StringPtrOutput `pulumi:"division"`
	// User primary email address
	Email pulumi.StringOutput `pulumi:"email"`
	// User employee number
	EmployeeNumber pulumi.StringPtrOutput `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
	ExpirePasswordOnCreate pulumi.BoolPtrOutput `pulumi:"expirePasswordOnCreate"`
	// User first name
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// User honorific prefix
	HonorificPrefix pulumi.StringPtrOutput `pulumi:"honorificPrefix"`
	// User honorific suffix
	HonorificSuffix pulumi.StringPtrOutput `pulumi:"honorificSuffix"`
	// User last name
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// User default location
	Locale pulumi.StringPtrOutput `pulumi:"locale"`
	// User Okta login
	Login pulumi.StringOutput `pulumi:"login"`
	// Manager of User
	Manager pulumi.StringPtrOutput `pulumi:"manager"`
	// Manager ID of User
	ManagerId pulumi.StringPtrOutput `pulumi:"managerId"`
	// User middle name
	MiddleName pulumi.StringPtrOutput `pulumi:"middleName"`
	// User mobile phone number
	MobilePhone pulumi.StringPtrOutput `pulumi:"mobilePhone"`
	// User nickname
	NickName pulumi.StringPtrOutput `pulumi:"nickName"`
	// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
	OldPassword pulumi.StringPtrOutput `pulumi:"oldPassword"`
	// User organization
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// User Password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrOutput `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrOutput `pulumi:"passwordInlineHook"`
	// User mailing address
	PostalAddress pulumi.StringPtrOutput `pulumi:"postalAddress"`
	// User preferred language
	PreferredLanguage pulumi.StringPtrOutput `pulumi:"preferredLanguage"`
	// User primary phone number
	PrimaryPhone pulumi.StringPtrOutput `pulumi:"primaryPhone"`
	// User online profile (web page)
	ProfileUrl pulumi.StringPtrOutput `pulumi:"profileUrl"`
	// The raw status of the User in Okta - (status is mapped)
	RawStatus pulumi.StringOutput `pulumi:"rawStatus"`
	// User Password Recovery Answer
	RecoveryAnswer pulumi.StringPtrOutput `pulumi:"recoveryAnswer"`
	// User Password Recovery Question
	RecoveryQuestion pulumi.StringPtrOutput `pulumi:"recoveryQuestion"`
	// User secondary email address, used for account recovery
	SecondEmail pulumi.StringPtrOutput `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrOutput `pulumi:"skipRoles"`
	// User state or region
	State pulumi.StringPtrOutput `pulumi:"state"`
	// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// User street address
	StreetAddress pulumi.StringPtrOutput `pulumi:"streetAddress"`
	// User default timezone
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// User title
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// User employee type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
	// User zipcode or postal code
	ZipCode pulumi.StringPtrOutput `pulumi:"zipCode"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.OldPassword != nil {
		args.OldPassword = pulumi.ToSecret(args.OldPassword).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.RecoveryAnswer != nil {
		args.RecoveryAnswer = pulumi.ToSecret(args.RecoveryAnswer).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"oldPassword",
		"password",
		"recoveryAnswer",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("okta:user/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("okta:user/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// User city
	City *string `pulumi:"city"`
	// User cost center
	CostCenter *string `pulumi:"costCenter"`
	// User country code
	CountryCode *string `pulumi:"countryCode"`
	// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
	CustomProfileAttributes          *string  `pulumi:"customProfileAttributes"`
	CustomProfileAttributesToIgnores []string `pulumi:"customProfileAttributesToIgnores"`
	// User department
	Department *string `pulumi:"department"`
	// User display name, suitable to show end users
	DisplayName *string `pulumi:"displayName"`
	// User division
	Division *string `pulumi:"division"`
	// User primary email address
	Email *string `pulumi:"email"`
	// User employee number
	EmployeeNumber *string `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
	ExpirePasswordOnCreate *bool `pulumi:"expirePasswordOnCreate"`
	// User first name
	FirstName *string `pulumi:"firstName"`
	// User honorific prefix
	HonorificPrefix *string `pulumi:"honorificPrefix"`
	// User honorific suffix
	HonorificSuffix *string `pulumi:"honorificSuffix"`
	// User last name
	LastName *string `pulumi:"lastName"`
	// User default location
	Locale *string `pulumi:"locale"`
	// User Okta login
	Login *string `pulumi:"login"`
	// Manager of User
	Manager *string `pulumi:"manager"`
	// Manager ID of User
	ManagerId *string `pulumi:"managerId"`
	// User middle name
	MiddleName *string `pulumi:"middleName"`
	// User mobile phone number
	MobilePhone *string `pulumi:"mobilePhone"`
	// User nickname
	NickName *string `pulumi:"nickName"`
	// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
	OldPassword *string `pulumi:"oldPassword"`
	// User organization
	Organization *string `pulumi:"organization"`
	// User Password
	Password *string `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash *UserPasswordHash `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook *string `pulumi:"passwordInlineHook"`
	// User mailing address
	PostalAddress *string `pulumi:"postalAddress"`
	// User preferred language
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// User primary phone number
	PrimaryPhone *string `pulumi:"primaryPhone"`
	// User online profile (web page)
	ProfileUrl *string `pulumi:"profileUrl"`
	// The raw status of the User in Okta - (status is mapped)
	RawStatus *string `pulumi:"rawStatus"`
	// User Password Recovery Answer
	RecoveryAnswer *string `pulumi:"recoveryAnswer"`
	// User Password Recovery Question
	RecoveryQuestion *string `pulumi:"recoveryQuestion"`
	// User secondary email address, used for account recovery
	SecondEmail *string `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
	SkipRoles *bool `pulumi:"skipRoles"`
	// User state or region
	State *string `pulumi:"state"`
	// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// User street address
	StreetAddress *string `pulumi:"streetAddress"`
	// User default timezone
	Timezone *string `pulumi:"timezone"`
	// User title
	Title *string `pulumi:"title"`
	// User employee type
	UserType *string `pulumi:"userType"`
	// User zipcode or postal code
	ZipCode *string `pulumi:"zipCode"`
}

type UserState struct {
	// User city
	City pulumi.StringPtrInput
	// User cost center
	CostCenter pulumi.StringPtrInput
	// User country code
	CountryCode pulumi.StringPtrInput
	// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
	CustomProfileAttributes          pulumi.StringPtrInput
	CustomProfileAttributesToIgnores pulumi.StringArrayInput
	// User department
	Department pulumi.StringPtrInput
	// User display name, suitable to show end users
	DisplayName pulumi.StringPtrInput
	// User division
	Division pulumi.StringPtrInput
	// User primary email address
	Email pulumi.StringPtrInput
	// User employee number
	EmployeeNumber pulumi.StringPtrInput
	// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
	ExpirePasswordOnCreate pulumi.BoolPtrInput
	// User first name
	FirstName pulumi.StringPtrInput
	// User honorific prefix
	HonorificPrefix pulumi.StringPtrInput
	// User honorific suffix
	HonorificSuffix pulumi.StringPtrInput
	// User last name
	LastName pulumi.StringPtrInput
	// User default location
	Locale pulumi.StringPtrInput
	// User Okta login
	Login pulumi.StringPtrInput
	// Manager of User
	Manager pulumi.StringPtrInput
	// Manager ID of User
	ManagerId pulumi.StringPtrInput
	// User middle name
	MiddleName pulumi.StringPtrInput
	// User mobile phone number
	MobilePhone pulumi.StringPtrInput
	// User nickname
	NickName pulumi.StringPtrInput
	// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
	OldPassword pulumi.StringPtrInput
	// User organization
	Organization pulumi.StringPtrInput
	// User Password
	Password pulumi.StringPtrInput
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrInput
	// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrInput
	// User mailing address
	PostalAddress pulumi.StringPtrInput
	// User preferred language
	PreferredLanguage pulumi.StringPtrInput
	// User primary phone number
	PrimaryPhone pulumi.StringPtrInput
	// User online profile (web page)
	ProfileUrl pulumi.StringPtrInput
	// The raw status of the User in Okta - (status is mapped)
	RawStatus pulumi.StringPtrInput
	// User Password Recovery Answer
	RecoveryAnswer pulumi.StringPtrInput
	// User Password Recovery Question
	RecoveryQuestion pulumi.StringPtrInput
	// User secondary email address, used for account recovery
	SecondEmail pulumi.StringPtrInput
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrInput
	// User state or region
	State pulumi.StringPtrInput
	// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// User street address
	StreetAddress pulumi.StringPtrInput
	// User default timezone
	Timezone pulumi.StringPtrInput
	// User title
	Title pulumi.StringPtrInput
	// User employee type
	UserType pulumi.StringPtrInput
	// User zipcode or postal code
	ZipCode pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// User city
	City *string `pulumi:"city"`
	// User cost center
	CostCenter *string `pulumi:"costCenter"`
	// User country code
	CountryCode *string `pulumi:"countryCode"`
	// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
	CustomProfileAttributes          *string  `pulumi:"customProfileAttributes"`
	CustomProfileAttributesToIgnores []string `pulumi:"customProfileAttributesToIgnores"`
	// User department
	Department *string `pulumi:"department"`
	// User display name, suitable to show end users
	DisplayName *string `pulumi:"displayName"`
	// User division
	Division *string `pulumi:"division"`
	// User primary email address
	Email string `pulumi:"email"`
	// User employee number
	EmployeeNumber *string `pulumi:"employeeNumber"`
	// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
	ExpirePasswordOnCreate *bool `pulumi:"expirePasswordOnCreate"`
	// User first name
	FirstName string `pulumi:"firstName"`
	// User honorific prefix
	HonorificPrefix *string `pulumi:"honorificPrefix"`
	// User honorific suffix
	HonorificSuffix *string `pulumi:"honorificSuffix"`
	// User last name
	LastName string `pulumi:"lastName"`
	// User default location
	Locale *string `pulumi:"locale"`
	// User Okta login
	Login string `pulumi:"login"`
	// Manager of User
	Manager *string `pulumi:"manager"`
	// Manager ID of User
	ManagerId *string `pulumi:"managerId"`
	// User middle name
	MiddleName *string `pulumi:"middleName"`
	// User mobile phone number
	MobilePhone *string `pulumi:"mobilePhone"`
	// User nickname
	NickName *string `pulumi:"nickName"`
	// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
	OldPassword *string `pulumi:"oldPassword"`
	// User organization
	Organization *string `pulumi:"organization"`
	// User Password
	Password *string `pulumi:"password"`
	// Specifies a hashed password to import into Okta.
	PasswordHash *UserPasswordHash `pulumi:"passwordHash"`
	// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook *string `pulumi:"passwordInlineHook"`
	// User mailing address
	PostalAddress *string `pulumi:"postalAddress"`
	// User preferred language
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// User primary phone number
	PrimaryPhone *string `pulumi:"primaryPhone"`
	// User online profile (web page)
	ProfileUrl *string `pulumi:"profileUrl"`
	// User Password Recovery Answer
	RecoveryAnswer *string `pulumi:"recoveryAnswer"`
	// User Password Recovery Question
	RecoveryQuestion *string `pulumi:"recoveryQuestion"`
	// User secondary email address, used for account recovery
	SecondEmail *string `pulumi:"secondEmail"`
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
	SkipRoles *bool `pulumi:"skipRoles"`
	// User state or region
	State *string `pulumi:"state"`
	// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// User street address
	StreetAddress *string `pulumi:"streetAddress"`
	// User default timezone
	Timezone *string `pulumi:"timezone"`
	// User title
	Title *string `pulumi:"title"`
	// User employee type
	UserType *string `pulumi:"userType"`
	// User zipcode or postal code
	ZipCode *string `pulumi:"zipCode"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// User city
	City pulumi.StringPtrInput
	// User cost center
	CostCenter pulumi.StringPtrInput
	// User country code
	CountryCode pulumi.StringPtrInput
	// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
	CustomProfileAttributes          pulumi.StringPtrInput
	CustomProfileAttributesToIgnores pulumi.StringArrayInput
	// User department
	Department pulumi.StringPtrInput
	// User display name, suitable to show end users
	DisplayName pulumi.StringPtrInput
	// User division
	Division pulumi.StringPtrInput
	// User primary email address
	Email pulumi.StringInput
	// User employee number
	EmployeeNumber pulumi.StringPtrInput
	// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
	ExpirePasswordOnCreate pulumi.BoolPtrInput
	// User first name
	FirstName pulumi.StringInput
	// User honorific prefix
	HonorificPrefix pulumi.StringPtrInput
	// User honorific suffix
	HonorificSuffix pulumi.StringPtrInput
	// User last name
	LastName pulumi.StringInput
	// User default location
	Locale pulumi.StringPtrInput
	// User Okta login
	Login pulumi.StringInput
	// Manager of User
	Manager pulumi.StringPtrInput
	// Manager ID of User
	ManagerId pulumi.StringPtrInput
	// User middle name
	MiddleName pulumi.StringPtrInput
	// User mobile phone number
	MobilePhone pulumi.StringPtrInput
	// User nickname
	NickName pulumi.StringPtrInput
	// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
	OldPassword pulumi.StringPtrInput
	// User organization
	Organization pulumi.StringPtrInput
	// User Password
	Password pulumi.StringPtrInput
	// Specifies a hashed password to import into Okta.
	PasswordHash UserPasswordHashPtrInput
	// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
	PasswordInlineHook pulumi.StringPtrInput
	// User mailing address
	PostalAddress pulumi.StringPtrInput
	// User preferred language
	PreferredLanguage pulumi.StringPtrInput
	// User primary phone number
	PrimaryPhone pulumi.StringPtrInput
	// User online profile (web page)
	ProfileUrl pulumi.StringPtrInput
	// User Password Recovery Answer
	RecoveryAnswer pulumi.StringPtrInput
	// User Password Recovery Question
	RecoveryQuestion pulumi.StringPtrInput
	// User secondary email address, used for account recovery
	SecondEmail pulumi.StringPtrInput
	// Do not populate user roles information (prevents additional API call)
	//
	// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
	SkipRoles pulumi.BoolPtrInput
	// User state or region
	State pulumi.StringPtrInput
	// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// User street address
	StreetAddress pulumi.StringPtrInput
	// User default timezone
	Timezone pulumi.StringPtrInput
	// User title
	Title pulumi.StringPtrInput
	// User employee type
	UserType pulumi.StringPtrInput
	// User zipcode or postal code
	ZipCode pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// User city
func (o UserOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// User cost center
func (o UserOutput) CostCenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CostCenter }).(pulumi.StringPtrOutput)
}

// User country code
func (o UserOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
func (o UserOutput) CustomProfileAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CustomProfileAttributes }).(pulumi.StringOutput)
}

func (o UserOutput) CustomProfileAttributesToIgnores() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.CustomProfileAttributesToIgnores }).(pulumi.StringArrayOutput)
}

// User department
func (o UserOutput) Department() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Department }).(pulumi.StringPtrOutput)
}

// User display name, suitable to show end users
func (o UserOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// User division
func (o UserOutput) Division() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Division }).(pulumi.StringPtrOutput)
}

// User primary email address
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// User employee number
func (o UserOutput) EmployeeNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.EmployeeNumber }).(pulumi.StringPtrOutput)
}

// If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
func (o UserOutput) ExpirePasswordOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ExpirePasswordOnCreate }).(pulumi.BoolPtrOutput)
}

// User first name
func (o UserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// User honorific prefix
func (o UserOutput) HonorificPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.HonorificPrefix }).(pulumi.StringPtrOutput)
}

// User honorific suffix
func (o UserOutput) HonorificSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.HonorificSuffix }).(pulumi.StringPtrOutput)
}

// User last name
func (o UserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// User default location
func (o UserOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Locale }).(pulumi.StringPtrOutput)
}

// User Okta login
func (o UserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// Manager of User
func (o UserOutput) Manager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Manager }).(pulumi.StringPtrOutput)
}

// Manager ID of User
func (o UserOutput) ManagerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ManagerId }).(pulumi.StringPtrOutput)
}

// User middle name
func (o UserOutput) MiddleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.MiddleName }).(pulumi.StringPtrOutput)
}

// User mobile phone number
func (o UserOutput) MobilePhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.MobilePhone }).(pulumi.StringPtrOutput)
}

// User nickname
func (o UserOutput) NickName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.NickName }).(pulumi.StringPtrOutput)
}

// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
func (o UserOutput) OldPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.OldPassword }).(pulumi.StringPtrOutput)
}

// User organization
func (o UserOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// User Password
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies a hashed password to import into Okta.
func (o UserOutput) PasswordHash() UserPasswordHashPtrOutput {
	return o.ApplyT(func(v *User) UserPasswordHashPtrOutput { return v.PasswordHash }).(UserPasswordHashPtrOutput)
}

// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
func (o UserOutput) PasswordInlineHook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PasswordInlineHook }).(pulumi.StringPtrOutput)
}

// User mailing address
func (o UserOutput) PostalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PostalAddress }).(pulumi.StringPtrOutput)
}

// User preferred language
func (o UserOutput) PreferredLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PreferredLanguage }).(pulumi.StringPtrOutput)
}

// User primary phone number
func (o UserOutput) PrimaryPhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PrimaryPhone }).(pulumi.StringPtrOutput)
}

// User online profile (web page)
func (o UserOutput) ProfileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ProfileUrl }).(pulumi.StringPtrOutput)
}

// The raw status of the User in Okta - (status is mapped)
func (o UserOutput) RawStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.RawStatus }).(pulumi.StringOutput)
}

// User Password Recovery Answer
func (o UserOutput) RecoveryAnswer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.RecoveryAnswer }).(pulumi.StringPtrOutput)
}

// User Password Recovery Question
func (o UserOutput) RecoveryQuestion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.RecoveryQuestion }).(pulumi.StringPtrOutput)
}

// User secondary email address, used for account recovery
func (o UserOutput) SecondEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.SecondEmail }).(pulumi.StringPtrOutput)
}

// Do not populate user roles information (prevents additional API call)
//
// Deprecated: Because adminRoles has been removed, this attribute is a no op and will be removed
func (o UserOutput) SkipRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.SkipRoles }).(pulumi.BoolPtrOutput)
}

// User state or region
func (o UserOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
func (o UserOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// User street address
func (o UserOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

// User default timezone
func (o UserOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// User title
func (o UserOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// User employee type
func (o UserOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

// User zipcode or postal code
func (o UserOutput) ZipCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ZipCode }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
