// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// User schema property of default user type can be imported via the property index.
//
// ```sh
//  $ pulumi import okta:user/schema:Schema example <index>
// ```
//
//  User schema property of custom user type can be imported via user type id and property index
//
// ```sh
//  $ pulumi import okta:user/schema:Schema example <user type id>.<index>
// ```
type Schema struct {
	pulumi.CustomResourceState

	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs SchemaArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// The description of the user schema property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// External name of the user schema property.
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities SchemaMasterOverridePriorityArrayOutput `pulumi:"masterOverridePriorities"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs SchemaOneOfArrayOutput `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// display name for the enum value.
	Title pulumi.StringOutput `pulumi:"title"`
	// - Type of profile source.
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// User type ID
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewSchema registers a new resource with the given unique name, arguments, and options.
func NewSchema(ctx *pulumi.Context,
	name string, args *SchemaArgs, opts ...pulumi.ResourceOption) (*Schema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Schema
	err := ctx.RegisterResource("okta:user/schema:Schema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchema gets an existing Schema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaState, opts ...pulumi.ResourceOption) (*Schema, error) {
	var resource Schema
	err := ctx.ReadResource("okta:user/schema:Schema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schema resources.
type schemaState struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []SchemaArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External name of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities []SchemaMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []SchemaOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title *string `pulumi:"title"`
	// - Type of profile source.
	Type *string `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique *string `pulumi:"unique"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

type SchemaState struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs SchemaArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External name of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities SchemaMasterOverridePriorityArrayInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs SchemaOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringPtrInput
	// - Type of profile source.
	Type pulumi.StringPtrInput
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (SchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaState)(nil)).Elem()
}

type schemaArgs struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []SchemaArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External name of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities []SchemaMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []SchemaOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title string `pulumi:"title"`
	// - Type of profile source.
	Type string `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique *string `pulumi:"unique"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a Schema resource.
type SchemaArgs struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs SchemaArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External name of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities SchemaMasterOverridePriorityArrayInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs SchemaOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringInput
	// - Type of profile source.
	Type pulumi.StringInput
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaArgs)(nil)).Elem()
}

type SchemaInput interface {
	pulumi.Input

	ToSchemaOutput() SchemaOutput
	ToSchemaOutputWithContext(ctx context.Context) SchemaOutput
}

func (*Schema) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil))
}

func (i *Schema) ToSchemaOutput() SchemaOutput {
	return i.ToSchemaOutputWithContext(context.Background())
}

func (i *Schema) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaOutput)
}

func (i *Schema) ToSchemaPtrOutput() SchemaPtrOutput {
	return i.ToSchemaPtrOutputWithContext(context.Background())
}

func (i *Schema) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPtrOutput)
}

type SchemaPtrInput interface {
	pulumi.Input

	ToSchemaPtrOutput() SchemaPtrOutput
	ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput
}

type schemaPtrType SchemaArgs

func (*schemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil))
}

func (i *schemaPtrType) ToSchemaPtrOutput() SchemaPtrOutput {
	return i.ToSchemaPtrOutputWithContext(context.Background())
}

func (i *schemaPtrType) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPtrOutput)
}

// SchemaArrayInput is an input type that accepts SchemaArray and SchemaArrayOutput values.
// You can construct a concrete instance of `SchemaArrayInput` via:
//
//          SchemaArray{ SchemaArgs{...} }
type SchemaArrayInput interface {
	pulumi.Input

	ToSchemaArrayOutput() SchemaArrayOutput
	ToSchemaArrayOutputWithContext(context.Context) SchemaArrayOutput
}

type SchemaArray []SchemaInput

func (SchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schema)(nil)).Elem()
}

func (i SchemaArray) ToSchemaArrayOutput() SchemaArrayOutput {
	return i.ToSchemaArrayOutputWithContext(context.Background())
}

func (i SchemaArray) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaArrayOutput)
}

// SchemaMapInput is an input type that accepts SchemaMap and SchemaMapOutput values.
// You can construct a concrete instance of `SchemaMapInput` via:
//
//          SchemaMap{ "key": SchemaArgs{...} }
type SchemaMapInput interface {
	pulumi.Input

	ToSchemaMapOutput() SchemaMapOutput
	ToSchemaMapOutputWithContext(context.Context) SchemaMapOutput
}

type SchemaMap map[string]SchemaInput

func (SchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schema)(nil)).Elem()
}

func (i SchemaMap) ToSchemaMapOutput() SchemaMapOutput {
	return i.ToSchemaMapOutputWithContext(context.Background())
}

func (i SchemaMap) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput)
}

type SchemaOutput struct{ *pulumi.OutputState }

func (SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil))
}

func (o SchemaOutput) ToSchemaOutput() SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaPtrOutput() SchemaPtrOutput {
	return o.ToSchemaPtrOutputWithContext(context.Background())
}

func (o SchemaOutput) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Schema) *Schema {
		return &v
	}).(SchemaPtrOutput)
}

type SchemaPtrOutput struct{ *pulumi.OutputState }

func (SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil))
}

func (o SchemaPtrOutput) ToSchemaPtrOutput() SchemaPtrOutput {
	return o
}

func (o SchemaPtrOutput) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return o
}

func (o SchemaPtrOutput) Elem() SchemaOutput {
	return o.ApplyT(func(v *Schema) Schema {
		if v != nil {
			return *v
		}
		var ret Schema
		return ret
	}).(SchemaOutput)
}

type SchemaArrayOutput struct{ *pulumi.OutputState }

func (SchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schema)(nil))
}

func (o SchemaArrayOutput) ToSchemaArrayOutput() SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) Index(i pulumi.IntInput) SchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Schema {
		return vs[0].([]Schema)[vs[1].(int)]
	}).(SchemaOutput)
}

type SchemaMapOutput struct{ *pulumi.OutputState }

func (SchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Schema)(nil))
}

func (o SchemaMapOutput) ToSchemaMapOutput() SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) MapIndex(k pulumi.StringInput) SchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Schema {
		return vs[0].(map[string]Schema)[vs[1].(string)]
	}).(SchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaInput)(nil)).Elem(), &Schema{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaPtrInput)(nil)).Elem(), &Schema{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaArrayInput)(nil)).Elem(), SchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMapInput)(nil)).Elem(), SchemaMap{})
	pulumi.RegisterOutputType(SchemaOutput{})
	pulumi.RegisterOutputType(SchemaPtrOutput{})
	pulumi.RegisterOutputType(SchemaArrayOutput{})
	pulumi.RegisterOutputType(SchemaMapOutput{})
}
