// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type UserPasswordHash struct {
	// The algorithm used to generate the hash using the password
	Algorithm string `pulumi:"algorithm"`
	// Only required for salted hashes
	Salt *string `pulumi:"salt"`
	// Specifies whether salt was pre- or postfixed to the password before hashing
	SaltOrder *string `pulumi:"saltOrder"`
	// For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
	Value string `pulumi:"value"`
	// Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
	WorkFactor *int `pulumi:"workFactor"`
}

// UserPasswordHashInput is an input type that accepts UserPasswordHashArgs and UserPasswordHashOutput values.
// You can construct a concrete instance of `UserPasswordHashInput` via:
//
//	UserPasswordHashArgs{...}
type UserPasswordHashInput interface {
	pulumi.Input

	ToUserPasswordHashOutput() UserPasswordHashOutput
	ToUserPasswordHashOutputWithContext(context.Context) UserPasswordHashOutput
}

type UserPasswordHashArgs struct {
	// The algorithm used to generate the hash using the password
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// Only required for salted hashes
	Salt pulumi.StringPtrInput `pulumi:"salt"`
	// Specifies whether salt was pre- or postfixed to the password before hashing
	SaltOrder pulumi.StringPtrInput `pulumi:"saltOrder"`
	// For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
	Value pulumi.StringInput `pulumi:"value"`
	// Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
	WorkFactor pulumi.IntPtrInput `pulumi:"workFactor"`
}

func (UserPasswordHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordHash)(nil)).Elem()
}

func (i UserPasswordHashArgs) ToUserPasswordHashOutput() UserPasswordHashOutput {
	return i.ToUserPasswordHashOutputWithContext(context.Background())
}

func (i UserPasswordHashArgs) ToUserPasswordHashOutputWithContext(ctx context.Context) UserPasswordHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordHashOutput)
}

func (i UserPasswordHashArgs) ToUserPasswordHashPtrOutput() UserPasswordHashPtrOutput {
	return i.ToUserPasswordHashPtrOutputWithContext(context.Background())
}

func (i UserPasswordHashArgs) ToUserPasswordHashPtrOutputWithContext(ctx context.Context) UserPasswordHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordHashOutput).ToUserPasswordHashPtrOutputWithContext(ctx)
}

// UserPasswordHashPtrInput is an input type that accepts UserPasswordHashArgs, UserPasswordHashPtr and UserPasswordHashPtrOutput values.
// You can construct a concrete instance of `UserPasswordHashPtrInput` via:
//
//	        UserPasswordHashArgs{...}
//
//	or:
//
//	        nil
type UserPasswordHashPtrInput interface {
	pulumi.Input

	ToUserPasswordHashPtrOutput() UserPasswordHashPtrOutput
	ToUserPasswordHashPtrOutputWithContext(context.Context) UserPasswordHashPtrOutput
}

type userPasswordHashPtrType UserPasswordHashArgs

func UserPasswordHashPtr(v *UserPasswordHashArgs) UserPasswordHashPtrInput {
	return (*userPasswordHashPtrType)(v)
}

func (*userPasswordHashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordHash)(nil)).Elem()
}

func (i *userPasswordHashPtrType) ToUserPasswordHashPtrOutput() UserPasswordHashPtrOutput {
	return i.ToUserPasswordHashPtrOutputWithContext(context.Background())
}

func (i *userPasswordHashPtrType) ToUserPasswordHashPtrOutputWithContext(ctx context.Context) UserPasswordHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordHashPtrOutput)
}

type UserPasswordHashOutput struct{ *pulumi.OutputState }

func (UserPasswordHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordHash)(nil)).Elem()
}

func (o UserPasswordHashOutput) ToUserPasswordHashOutput() UserPasswordHashOutput {
	return o
}

func (o UserPasswordHashOutput) ToUserPasswordHashOutputWithContext(ctx context.Context) UserPasswordHashOutput {
	return o
}

func (o UserPasswordHashOutput) ToUserPasswordHashPtrOutput() UserPasswordHashPtrOutput {
	return o.ToUserPasswordHashPtrOutputWithContext(context.Background())
}

func (o UserPasswordHashOutput) ToUserPasswordHashPtrOutputWithContext(ctx context.Context) UserPasswordHashPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPasswordHash) *UserPasswordHash {
		return &v
	}).(UserPasswordHashPtrOutput)
}

// The algorithm used to generate the hash using the password
func (o UserPasswordHashOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordHash) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Only required for salted hashes
func (o UserPasswordHashOutput) Salt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPasswordHash) *string { return v.Salt }).(pulumi.StringPtrOutput)
}

// Specifies whether salt was pre- or postfixed to the password before hashing
func (o UserPasswordHashOutput) SaltOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPasswordHash) *string { return v.SaltOrder }).(pulumi.StringPtrOutput)
}

// For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
func (o UserPasswordHashOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordHash) string { return v.Value }).(pulumi.StringOutput)
}

// Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
func (o UserPasswordHashOutput) WorkFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserPasswordHash) *int { return v.WorkFactor }).(pulumi.IntPtrOutput)
}

type UserPasswordHashPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordHashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordHash)(nil)).Elem()
}

func (o UserPasswordHashPtrOutput) ToUserPasswordHashPtrOutput() UserPasswordHashPtrOutput {
	return o
}

func (o UserPasswordHashPtrOutput) ToUserPasswordHashPtrOutputWithContext(ctx context.Context) UserPasswordHashPtrOutput {
	return o
}

func (o UserPasswordHashPtrOutput) Elem() UserPasswordHashOutput {
	return o.ApplyT(func(v *UserPasswordHash) UserPasswordHash {
		if v != nil {
			return *v
		}
		var ret UserPasswordHash
		return ret
	}).(UserPasswordHashOutput)
}

// The algorithm used to generate the hash using the password
func (o UserPasswordHashPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordHash) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// Only required for salted hashes
func (o UserPasswordHashPtrOutput) Salt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordHash) *string {
		if v == nil {
			return nil
		}
		return v.Salt
	}).(pulumi.StringPtrOutput)
}

// Specifies whether salt was pre- or postfixed to the password before hashing
func (o UserPasswordHashPtrOutput) SaltOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordHash) *string {
		if v == nil {
			return nil
		}
		return v.SaltOrder
	}).(pulumi.StringPtrOutput)
}

// For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
func (o UserPasswordHashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordHash) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
func (o UserPasswordHashPtrOutput) WorkFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserPasswordHash) *int {
		if v == nil {
			return nil
		}
		return v.WorkFactor
	}).(pulumi.IntPtrOutput)
}

type GetUserSearch struct {
	// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
	Comparison *string `pulumi:"comparison"`
	// A raw search expression string. If present it will override name/comparison/value.
	Expression *string `pulumi:"expression"`
	// Name of property to search against.
	Name *string `pulumi:"name"`
	// Value to compare with.
	Value *string `pulumi:"value"`
}

// GetUserSearchInput is an input type that accepts GetUserSearchArgs and GetUserSearchOutput values.
// You can construct a concrete instance of `GetUserSearchInput` via:
//
//	GetUserSearchArgs{...}
type GetUserSearchInput interface {
	pulumi.Input

	ToGetUserSearchOutput() GetUserSearchOutput
	ToGetUserSearchOutputWithContext(context.Context) GetUserSearchOutput
}

type GetUserSearchArgs struct {
	// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
	Comparison pulumi.StringPtrInput `pulumi:"comparison"`
	// A raw search expression string. If present it will override name/comparison/value.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Name of property to search against.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value to compare with.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetUserSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSearch)(nil)).Elem()
}

func (i GetUserSearchArgs) ToGetUserSearchOutput() GetUserSearchOutput {
	return i.ToGetUserSearchOutputWithContext(context.Background())
}

func (i GetUserSearchArgs) ToGetUserSearchOutputWithContext(ctx context.Context) GetUserSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSearchOutput)
}

// GetUserSearchArrayInput is an input type that accepts GetUserSearchArray and GetUserSearchArrayOutput values.
// You can construct a concrete instance of `GetUserSearchArrayInput` via:
//
//	GetUserSearchArray{ GetUserSearchArgs{...} }
type GetUserSearchArrayInput interface {
	pulumi.Input

	ToGetUserSearchArrayOutput() GetUserSearchArrayOutput
	ToGetUserSearchArrayOutputWithContext(context.Context) GetUserSearchArrayOutput
}

type GetUserSearchArray []GetUserSearchInput

func (GetUserSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSearch)(nil)).Elem()
}

func (i GetUserSearchArray) ToGetUserSearchArrayOutput() GetUserSearchArrayOutput {
	return i.ToGetUserSearchArrayOutputWithContext(context.Background())
}

func (i GetUserSearchArray) ToGetUserSearchArrayOutputWithContext(ctx context.Context) GetUserSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSearchArrayOutput)
}

type GetUserSearchOutput struct{ *pulumi.OutputState }

func (GetUserSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSearch)(nil)).Elem()
}

func (o GetUserSearchOutput) ToGetUserSearchOutput() GetUserSearchOutput {
	return o
}

func (o GetUserSearchOutput) ToGetUserSearchOutputWithContext(ctx context.Context) GetUserSearchOutput {
	return o
}

// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
func (o GetUserSearchOutput) Comparison() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserSearch) *string { return v.Comparison }).(pulumi.StringPtrOutput)
}

// A raw search expression string. If present it will override name/comparison/value.
func (o GetUserSearchOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserSearch) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Name of property to search against.
func (o GetUserSearchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserSearch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value to compare with.
func (o GetUserSearchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserSearch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetUserSearchArrayOutput struct{ *pulumi.OutputState }

func (GetUserSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSearch)(nil)).Elem()
}

func (o GetUserSearchArrayOutput) ToGetUserSearchArrayOutput() GetUserSearchArrayOutput {
	return o
}

func (o GetUserSearchArrayOutput) ToGetUserSearchArrayOutputWithContext(ctx context.Context) GetUserSearchArrayOutput {
	return o
}

func (o GetUserSearchArrayOutput) Index(i pulumi.IntInput) GetUserSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserSearch {
		return vs[0].([]GetUserSearch)[vs[1].(int)]
	}).(GetUserSearchOutput)
}

type GetUsersSearch struct {
	// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
	Comparison *string `pulumi:"comparison"`
	// A raw search expression string. If present it will override name/comparison/value.
	Expression *string `pulumi:"expression"`
	// Name of property to search against.
	Name *string `pulumi:"name"`
	// Value to compare with.
	Value *string `pulumi:"value"`
}

// GetUsersSearchInput is an input type that accepts GetUsersSearchArgs and GetUsersSearchOutput values.
// You can construct a concrete instance of `GetUsersSearchInput` via:
//
//	GetUsersSearchArgs{...}
type GetUsersSearchInput interface {
	pulumi.Input

	ToGetUsersSearchOutput() GetUsersSearchOutput
	ToGetUsersSearchOutputWithContext(context.Context) GetUsersSearchOutput
}

type GetUsersSearchArgs struct {
	// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
	Comparison pulumi.StringPtrInput `pulumi:"comparison"`
	// A raw search expression string. If present it will override name/comparison/value.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Name of property to search against.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value to compare with.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetUsersSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersSearch)(nil)).Elem()
}

func (i GetUsersSearchArgs) ToGetUsersSearchOutput() GetUsersSearchOutput {
	return i.ToGetUsersSearchOutputWithContext(context.Background())
}

func (i GetUsersSearchArgs) ToGetUsersSearchOutputWithContext(ctx context.Context) GetUsersSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersSearchOutput)
}

// GetUsersSearchArrayInput is an input type that accepts GetUsersSearchArray and GetUsersSearchArrayOutput values.
// You can construct a concrete instance of `GetUsersSearchArrayInput` via:
//
//	GetUsersSearchArray{ GetUsersSearchArgs{...} }
type GetUsersSearchArrayInput interface {
	pulumi.Input

	ToGetUsersSearchArrayOutput() GetUsersSearchArrayOutput
	ToGetUsersSearchArrayOutputWithContext(context.Context) GetUsersSearchArrayOutput
}

type GetUsersSearchArray []GetUsersSearchInput

func (GetUsersSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersSearch)(nil)).Elem()
}

func (i GetUsersSearchArray) ToGetUsersSearchArrayOutput() GetUsersSearchArrayOutput {
	return i.ToGetUsersSearchArrayOutputWithContext(context.Background())
}

func (i GetUsersSearchArray) ToGetUsersSearchArrayOutputWithContext(ctx context.Context) GetUsersSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersSearchArrayOutput)
}

type GetUsersSearchOutput struct{ *pulumi.OutputState }

func (GetUsersSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersSearch)(nil)).Elem()
}

func (o GetUsersSearchOutput) ToGetUsersSearchOutput() GetUsersSearchOutput {
	return o
}

func (o GetUsersSearchOutput) ToGetUsersSearchOutputWithContext(ctx context.Context) GetUsersSearchOutput {
	return o
}

// Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
func (o GetUsersSearchOutput) Comparison() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersSearch) *string { return v.Comparison }).(pulumi.StringPtrOutput)
}

// A raw search expression string. If present it will override name/comparison/value.
func (o GetUsersSearchOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersSearch) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Name of property to search against.
func (o GetUsersSearchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersSearch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value to compare with.
func (o GetUsersSearchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersSearch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetUsersSearchArrayOutput struct{ *pulumi.OutputState }

func (GetUsersSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersSearch)(nil)).Elem()
}

func (o GetUsersSearchArrayOutput) ToGetUsersSearchArrayOutput() GetUsersSearchArrayOutput {
	return o
}

func (o GetUsersSearchArrayOutput) ToGetUsersSearchArrayOutputWithContext(ctx context.Context) GetUsersSearchArrayOutput {
	return o
}

func (o GetUsersSearchArrayOutput) Index(i pulumi.IntInput) GetUsersSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersSearch {
		return vs[0].([]GetUsersSearch)[vs[1].(int)]
	}).(GetUsersSearchOutput)
}

type GetUsersUser struct {
	// Administrator roles assigned to user.
	AdminRoles []string `pulumi:"adminRoles"`
	// City or locality component of user's address.
	City string `pulumi:"city"`
	// Name of a cost center assigned to user.
	CostCenter string `pulumi:"costCenter"`
	// Country name component of user's address.
	CountryCode string `pulumi:"countryCode"`
	// Raw JSON containing all custom profile attributes.
	CustomProfileAttributes string `pulumi:"customProfileAttributes"`
	// Name of user's department.
	Department string `pulumi:"department"`
	// Name of the user, suitable for display to end users.
	DisplayName string `pulumi:"displayName"`
	// Name of user's division.
	Division string `pulumi:"division"`
	// Primary email address of user.
	Email string `pulumi:"email"`
	// Organization or company assigned unique identifier for the user.
	EmployeeNumber string `pulumi:"employeeNumber"`
	// Given name of the user.
	FirstName string `pulumi:"firstName"`
	// Groups user belongs to.
	GroupMemberships []string `pulumi:"groupMemberships"`
	// Honorific prefix(es) of the user, or title in most Western languages.
	HonorificPrefix string `pulumi:"honorificPrefix"`
	// Honorific suffix(es) of the user.
	HonorificSuffix string `pulumi:"honorificSuffix"`
	Id              string `pulumi:"id"`
	// Family name of the user.
	LastName string `pulumi:"lastName"`
	// User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
	Locale string `pulumi:"locale"`
	// Unique identifier for the user.
	Login string `pulumi:"login"`
	// Display name of the user's manager.
	Manager string `pulumi:"manager"`
	// `id` of a user's manager.
	ManagerId string `pulumi:"managerId"`
	// Middle name(s) of the user.
	MiddleName string `pulumi:"middleName"`
	// Mobile phone number of user.
	MobilePhone string `pulumi:"mobilePhone"`
	// Casual way to address the user in real life.
	NickName string `pulumi:"nickName"`
	// Name of user's organization.
	Organization string `pulumi:"organization"`
	// Mailing address component of user's address.
	PostalAddress string `pulumi:"postalAddress"`
	// User's preferred written or spoken languages.
	PreferredLanguage string `pulumi:"preferredLanguage"`
	// Primary phone number of user such as home number.
	PrimaryPhone string `pulumi:"primaryPhone"`
	// URL of user's online profile (e.g. a web page).
	ProfileUrl string   `pulumi:"profileUrl"`
	Roles      []string `pulumi:"roles"`
	// Secondary email address of user typically used for account recovery.
	SecondEmail string `pulumi:"secondEmail"`
	// State or region component of user's address (region).
	State string `pulumi:"state"`
	// Current status of user.
	Status string `pulumi:"status"`
	// Full street address component of user's address.
	StreetAddress string `pulumi:"streetAddress"`
	// User's time zone.
	Timezone string `pulumi:"timezone"`
	// User's title, such as "Vice President".
	Title string `pulumi:"title"`
	// Used to describe the organization to user relationship such as "Employee" or "Contractor".
	UserType string `pulumi:"userType"`
	// Zipcode or postal code component of user's address (postalCode)
	ZipCode string `pulumi:"zipCode"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// Administrator roles assigned to user.
	AdminRoles pulumi.StringArrayInput `pulumi:"adminRoles"`
	// City or locality component of user's address.
	City pulumi.StringInput `pulumi:"city"`
	// Name of a cost center assigned to user.
	CostCenter pulumi.StringInput `pulumi:"costCenter"`
	// Country name component of user's address.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// Raw JSON containing all custom profile attributes.
	CustomProfileAttributes pulumi.StringInput `pulumi:"customProfileAttributes"`
	// Name of user's department.
	Department pulumi.StringInput `pulumi:"department"`
	// Name of the user, suitable for display to end users.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Name of user's division.
	Division pulumi.StringInput `pulumi:"division"`
	// Primary email address of user.
	Email pulumi.StringInput `pulumi:"email"`
	// Organization or company assigned unique identifier for the user.
	EmployeeNumber pulumi.StringInput `pulumi:"employeeNumber"`
	// Given name of the user.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Groups user belongs to.
	GroupMemberships pulumi.StringArrayInput `pulumi:"groupMemberships"`
	// Honorific prefix(es) of the user, or title in most Western languages.
	HonorificPrefix pulumi.StringInput `pulumi:"honorificPrefix"`
	// Honorific suffix(es) of the user.
	HonorificSuffix pulumi.StringInput `pulumi:"honorificSuffix"`
	Id              pulumi.StringInput `pulumi:"id"`
	// Family name of the user.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
	Locale pulumi.StringInput `pulumi:"locale"`
	// Unique identifier for the user.
	Login pulumi.StringInput `pulumi:"login"`
	// Display name of the user's manager.
	Manager pulumi.StringInput `pulumi:"manager"`
	// `id` of a user's manager.
	ManagerId pulumi.StringInput `pulumi:"managerId"`
	// Middle name(s) of the user.
	MiddleName pulumi.StringInput `pulumi:"middleName"`
	// Mobile phone number of user.
	MobilePhone pulumi.StringInput `pulumi:"mobilePhone"`
	// Casual way to address the user in real life.
	NickName pulumi.StringInput `pulumi:"nickName"`
	// Name of user's organization.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Mailing address component of user's address.
	PostalAddress pulumi.StringInput `pulumi:"postalAddress"`
	// User's preferred written or spoken languages.
	PreferredLanguage pulumi.StringInput `pulumi:"preferredLanguage"`
	// Primary phone number of user such as home number.
	PrimaryPhone pulumi.StringInput `pulumi:"primaryPhone"`
	// URL of user's online profile (e.g. a web page).
	ProfileUrl pulumi.StringInput      `pulumi:"profileUrl"`
	Roles      pulumi.StringArrayInput `pulumi:"roles"`
	// Secondary email address of user typically used for account recovery.
	SecondEmail pulumi.StringInput `pulumi:"secondEmail"`
	// State or region component of user's address (region).
	State pulumi.StringInput `pulumi:"state"`
	// Current status of user.
	Status pulumi.StringInput `pulumi:"status"`
	// Full street address component of user's address.
	StreetAddress pulumi.StringInput `pulumi:"streetAddress"`
	// User's time zone.
	Timezone pulumi.StringInput `pulumi:"timezone"`
	// User's title, such as "Vice President".
	Title pulumi.StringInput `pulumi:"title"`
	// Used to describe the organization to user relationship such as "Employee" or "Contractor".
	UserType pulumi.StringInput `pulumi:"userType"`
	// Zipcode or postal code component of user's address (postalCode)
	ZipCode pulumi.StringInput `pulumi:"zipCode"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// Administrator roles assigned to user.
func (o GetUsersUserOutput) AdminRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.AdminRoles }).(pulumi.StringArrayOutput)
}

// City or locality component of user's address.
func (o GetUsersUserOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.City }).(pulumi.StringOutput)
}

// Name of a cost center assigned to user.
func (o GetUsersUserOutput) CostCenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CostCenter }).(pulumi.StringOutput)
}

// Country name component of user's address.
func (o GetUsersUserOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CountryCode }).(pulumi.StringOutput)
}

// Raw JSON containing all custom profile attributes.
func (o GetUsersUserOutput) CustomProfileAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CustomProfileAttributes }).(pulumi.StringOutput)
}

// Name of user's department.
func (o GetUsersUserOutput) Department() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Department }).(pulumi.StringOutput)
}

// Name of the user, suitable for display to end users.
func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Name of user's division.
func (o GetUsersUserOutput) Division() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Division }).(pulumi.StringOutput)
}

// Primary email address of user.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// Organization or company assigned unique identifier for the user.
func (o GetUsersUserOutput) EmployeeNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.EmployeeNumber }).(pulumi.StringOutput)
}

// Given name of the user.
func (o GetUsersUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Groups user belongs to.
func (o GetUsersUserOutput) GroupMemberships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.GroupMemberships }).(pulumi.StringArrayOutput)
}

// Honorific prefix(es) of the user, or title in most Western languages.
func (o GetUsersUserOutput) HonorificPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.HonorificPrefix }).(pulumi.StringOutput)
}

// Honorific suffix(es) of the user.
func (o GetUsersUserOutput) HonorificSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.HonorificSuffix }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// Family name of the user.
func (o GetUsersUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastName }).(pulumi.StringOutput)
}

// User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
func (o GetUsersUserOutput) Locale() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Locale }).(pulumi.StringOutput)
}

// Unique identifier for the user.
func (o GetUsersUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Login }).(pulumi.StringOutput)
}

// Display name of the user's manager.
func (o GetUsersUserOutput) Manager() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Manager }).(pulumi.StringOutput)
}

// `id` of a user's manager.
func (o GetUsersUserOutput) ManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ManagerId }).(pulumi.StringOutput)
}

// Middle name(s) of the user.
func (o GetUsersUserOutput) MiddleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.MiddleName }).(pulumi.StringOutput)
}

// Mobile phone number of user.
func (o GetUsersUserOutput) MobilePhone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.MobilePhone }).(pulumi.StringOutput)
}

// Casual way to address the user in real life.
func (o GetUsersUserOutput) NickName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.NickName }).(pulumi.StringOutput)
}

// Name of user's organization.
func (o GetUsersUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Organization }).(pulumi.StringOutput)
}

// Mailing address component of user's address.
func (o GetUsersUserOutput) PostalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PostalAddress }).(pulumi.StringOutput)
}

// User's preferred written or spoken languages.
func (o GetUsersUserOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PreferredLanguage }).(pulumi.StringOutput)
}

// Primary phone number of user such as home number.
func (o GetUsersUserOutput) PrimaryPhone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PrimaryPhone }).(pulumi.StringOutput)
}

// URL of user's online profile (e.g. a web page).
func (o GetUsersUserOutput) ProfileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ProfileUrl }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Secondary email address of user typically used for account recovery.
func (o GetUsersUserOutput) SecondEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.SecondEmail }).(pulumi.StringOutput)
}

// State or region component of user's address (region).
func (o GetUsersUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.State }).(pulumi.StringOutput)
}

// Current status of user.
func (o GetUsersUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Status }).(pulumi.StringOutput)
}

// Full street address component of user's address.
func (o GetUsersUserOutput) StreetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.StreetAddress }).(pulumi.StringOutput)
}

// User's time zone.
func (o GetUsersUserOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Timezone }).(pulumi.StringOutput)
}

// User's title, such as "Vice President".
func (o GetUsersUserOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Title }).(pulumi.StringOutput)
}

// Used to describe the organization to user relationship such as "Employee" or "Contractor".
func (o GetUsersUserOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UserType }).(pulumi.StringOutput)
}

// Zipcode or postal code component of user's address (postalCode)
func (o GetUsersUserOutput) ZipCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ZipCode }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordHashInput)(nil)).Elem(), UserPasswordHashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordHashPtrInput)(nil)).Elem(), UserPasswordHashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSearchInput)(nil)).Elem(), GetUserSearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSearchArrayInput)(nil)).Elem(), GetUserSearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersSearchInput)(nil)).Elem(), GetUsersSearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersSearchArrayInput)(nil)).Elem(), GetUsersSearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(UserPasswordHashOutput{})
	pulumi.RegisterOutputType(UserPasswordHashPtrOutput{})
	pulumi.RegisterOutputType(GetUserSearchOutput{})
	pulumi.RegisterOutputType(GetUserSearchArrayOutput{})
	pulumi.RegisterOutputType(GetUsersSearchOutput{})
	pulumi.RegisterOutputType(GetUsersSearchArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
