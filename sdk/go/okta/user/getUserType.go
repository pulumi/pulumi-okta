// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a user type from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.LookupUserType(ctx, &user.LookupUserTypeArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUserType(ctx *pulumi.Context, args *LookupUserTypeArgs, opts ...pulumi.InvokeOption) (*LookupUserTypeResult, error) {
	var rv LookupUserTypeResult
	err := ctx.Invoke("okta:user/getUserType:getUserType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserType.
type LookupUserTypeArgs struct {
	// name of user type to retrieve.
	Name string `pulumi:"name"`
}

// A collection of values returned by getUserType.
type LookupUserTypeResult struct {
	// description of user type.
	Description string `pulumi:"description"`
	// display name of user type.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// name of user type.
	Name string `pulumi:"name"`
}

func LookupUserTypeOutput(ctx *pulumi.Context, args LookupUserTypeOutputArgs, opts ...pulumi.InvokeOption) LookupUserTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserTypeResult, error) {
			args := v.(LookupUserTypeArgs)
			r, err := LookupUserType(ctx, &args, opts...)
			var s LookupUserTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserTypeResultOutput)
}

// A collection of arguments for invoking getUserType.
type LookupUserTypeOutputArgs struct {
	// name of user type to retrieve.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupUserTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserTypeArgs)(nil)).Elem()
}

// A collection of values returned by getUserType.
type LookupUserTypeResultOutput struct{ *pulumi.OutputState }

func (LookupUserTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserTypeResult)(nil)).Elem()
}

func (o LookupUserTypeResultOutput) ToLookupUserTypeResultOutput() LookupUserTypeResultOutput {
	return o
}

func (o LookupUserTypeResultOutput) ToLookupUserTypeResultOutputWithContext(ctx context.Context) LookupUserTypeResultOutput {
	return o
}

// description of user type.
func (o LookupUserTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

// display name of user type.
func (o LookupUserTypeResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserTypeResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// name of user type.
func (o LookupUserTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserTypeResultOutput{})
}
