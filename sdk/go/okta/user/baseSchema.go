// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a User Base Schema property.
//
// This resource allows you to configure a base user schema property.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := user.NewBaseSchema(ctx, "example", &user.BaseSchemaArgs{
// 			Index:    pulumi.String("customPropertyName"),
// 			Master:   pulumi.String("OKTA"),
// 			Title:    pulumi.String("customPropertyName"),
// 			Type:     pulumi.String("string"),
// 			UserType: pulumi.Any(data.Okta_user_type.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User schema property of default user type can be imported via the property index.
//
// ```sh
//  $ pulumi import okta:user/baseSchema:BaseSchema example <property name>
// ```
//
//  User schema property of custom user type can be imported via user type id and property index
//
// ```sh
//  $ pulumi import okta:user/baseSchema:BaseSchema example <user type id>.<property name>
// ```
type BaseSchema struct {
	pulumi.CustomResourceState

	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The property display name.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// User type ID
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewBaseSchema registers a new resource with the given unique name, arguments, and options.
func NewBaseSchema(ctx *pulumi.Context,
	name string, args *BaseSchemaArgs, opts ...pulumi.ResourceOption) (*BaseSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource BaseSchema
	err := ctx.RegisterResource("okta:user/baseSchema:BaseSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBaseSchema gets an existing BaseSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBaseSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaseSchemaState, opts ...pulumi.ResourceOption) (*BaseSchema, error) {
	var resource BaseSchema
	err := ctx.ReadResource("okta:user/baseSchema:BaseSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BaseSchema resources.
type baseSchemaState struct {
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

type BaseSchemaState struct {
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (BaseSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*baseSchemaState)(nil)).Elem()
}

type baseSchemaArgs struct {
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a BaseSchema resource.
type BaseSchemaArgs struct {
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (BaseSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baseSchemaArgs)(nil)).Elem()
}

type BaseSchemaInput interface {
	pulumi.Input

	ToBaseSchemaOutput() BaseSchemaOutput
	ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput
}

func (*BaseSchema) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseSchema)(nil))
}

func (i *BaseSchema) ToBaseSchemaOutput() BaseSchemaOutput {
	return i.ToBaseSchemaOutputWithContext(context.Background())
}

func (i *BaseSchema) ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaOutput)
}

func (i *BaseSchema) ToBaseSchemaPtrOutput() BaseSchemaPtrOutput {
	return i.ToBaseSchemaPtrOutputWithContext(context.Background())
}

func (i *BaseSchema) ToBaseSchemaPtrOutputWithContext(ctx context.Context) BaseSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaPtrOutput)
}

type BaseSchemaPtrInput interface {
	pulumi.Input

	ToBaseSchemaPtrOutput() BaseSchemaPtrOutput
	ToBaseSchemaPtrOutputWithContext(ctx context.Context) BaseSchemaPtrOutput
}

type baseSchemaPtrType BaseSchemaArgs

func (*baseSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseSchema)(nil))
}

func (i *baseSchemaPtrType) ToBaseSchemaPtrOutput() BaseSchemaPtrOutput {
	return i.ToBaseSchemaPtrOutputWithContext(context.Background())
}

func (i *baseSchemaPtrType) ToBaseSchemaPtrOutputWithContext(ctx context.Context) BaseSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaPtrOutput)
}

// BaseSchemaArrayInput is an input type that accepts BaseSchemaArray and BaseSchemaArrayOutput values.
// You can construct a concrete instance of `BaseSchemaArrayInput` via:
//
//          BaseSchemaArray{ BaseSchemaArgs{...} }
type BaseSchemaArrayInput interface {
	pulumi.Input

	ToBaseSchemaArrayOutput() BaseSchemaArrayOutput
	ToBaseSchemaArrayOutputWithContext(context.Context) BaseSchemaArrayOutput
}

type BaseSchemaArray []BaseSchemaInput

func (BaseSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BaseSchema)(nil)).Elem()
}

func (i BaseSchemaArray) ToBaseSchemaArrayOutput() BaseSchemaArrayOutput {
	return i.ToBaseSchemaArrayOutputWithContext(context.Background())
}

func (i BaseSchemaArray) ToBaseSchemaArrayOutputWithContext(ctx context.Context) BaseSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaArrayOutput)
}

// BaseSchemaMapInput is an input type that accepts BaseSchemaMap and BaseSchemaMapOutput values.
// You can construct a concrete instance of `BaseSchemaMapInput` via:
//
//          BaseSchemaMap{ "key": BaseSchemaArgs{...} }
type BaseSchemaMapInput interface {
	pulumi.Input

	ToBaseSchemaMapOutput() BaseSchemaMapOutput
	ToBaseSchemaMapOutputWithContext(context.Context) BaseSchemaMapOutput
}

type BaseSchemaMap map[string]BaseSchemaInput

func (BaseSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BaseSchema)(nil)).Elem()
}

func (i BaseSchemaMap) ToBaseSchemaMapOutput() BaseSchemaMapOutput {
	return i.ToBaseSchemaMapOutputWithContext(context.Background())
}

func (i BaseSchemaMap) ToBaseSchemaMapOutputWithContext(ctx context.Context) BaseSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaMapOutput)
}

type BaseSchemaOutput struct{ *pulumi.OutputState }

func (BaseSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseSchema)(nil))
}

func (o BaseSchemaOutput) ToBaseSchemaOutput() BaseSchemaOutput {
	return o
}

func (o BaseSchemaOutput) ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput {
	return o
}

func (o BaseSchemaOutput) ToBaseSchemaPtrOutput() BaseSchemaPtrOutput {
	return o.ToBaseSchemaPtrOutputWithContext(context.Background())
}

func (o BaseSchemaOutput) ToBaseSchemaPtrOutputWithContext(ctx context.Context) BaseSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BaseSchema) *BaseSchema {
		return &v
	}).(BaseSchemaPtrOutput)
}

type BaseSchemaPtrOutput struct{ *pulumi.OutputState }

func (BaseSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseSchema)(nil))
}

func (o BaseSchemaPtrOutput) ToBaseSchemaPtrOutput() BaseSchemaPtrOutput {
	return o
}

func (o BaseSchemaPtrOutput) ToBaseSchemaPtrOutputWithContext(ctx context.Context) BaseSchemaPtrOutput {
	return o
}

func (o BaseSchemaPtrOutput) Elem() BaseSchemaOutput {
	return o.ApplyT(func(v *BaseSchema) BaseSchema {
		if v != nil {
			return *v
		}
		var ret BaseSchema
		return ret
	}).(BaseSchemaOutput)
}

type BaseSchemaArrayOutput struct{ *pulumi.OutputState }

func (BaseSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseSchema)(nil))
}

func (o BaseSchemaArrayOutput) ToBaseSchemaArrayOutput() BaseSchemaArrayOutput {
	return o
}

func (o BaseSchemaArrayOutput) ToBaseSchemaArrayOutputWithContext(ctx context.Context) BaseSchemaArrayOutput {
	return o
}

func (o BaseSchemaArrayOutput) Index(i pulumi.IntInput) BaseSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaseSchema {
		return vs[0].([]BaseSchema)[vs[1].(int)]
	}).(BaseSchemaOutput)
}

type BaseSchemaMapOutput struct{ *pulumi.OutputState }

func (BaseSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BaseSchema)(nil))
}

func (o BaseSchemaMapOutput) ToBaseSchemaMapOutput() BaseSchemaMapOutput {
	return o
}

func (o BaseSchemaMapOutput) ToBaseSchemaMapOutputWithContext(ctx context.Context) BaseSchemaMapOutput {
	return o
}

func (o BaseSchemaMapOutput) MapIndex(k pulumi.StringInput) BaseSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BaseSchema {
		return vs[0].(map[string]BaseSchema)[vs[1].(string)]
	}).(BaseSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BaseSchemaInput)(nil)).Elem(), &BaseSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseSchemaPtrInput)(nil)).Elem(), &BaseSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseSchemaArrayInput)(nil)).Elem(), BaseSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseSchemaMapInput)(nil)).Elem(), BaseSchemaMap{})
	pulumi.RegisterOutputType(BaseSchemaOutput{})
	pulumi.RegisterOutputType(BaseSchemaPtrOutput{})
	pulumi.RegisterOutputType(BaseSchemaArrayOutput{})
	pulumi.RegisterOutputType(BaseSchemaMapOutput{})
}
