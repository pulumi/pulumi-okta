// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a User Base Schema property.
//
// This resource allows you to configure a base user schema property.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := user.NewBaseSchema(ctx, "example", &user.BaseSchemaArgs{
// 			Index:    pulumi.String("customPropertyName"),
// 			Master:   pulumi.String("OKTA"),
// 			Title:    pulumi.String("customPropertyName"),
// 			Type:     pulumi.String("string"),
// 			UserType: pulumi.Any(data.Okta_user_type.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// User schema property of default user type can be imported via the property index.
//
// ```sh
//  $ pulumi import okta:user/baseSchema:BaseSchema example <property name>
// ```
//
//  User schema property of custom user type can be imported via user type id and property index
//
// ```sh
//  $ pulumi import okta:user/baseSchema:BaseSchema example <user type id>.<property name>
// ```
type BaseSchema struct {
	pulumi.CustomResourceState

	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The property display name.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// User type ID
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewBaseSchema registers a new resource with the given unique name, arguments, and options.
func NewBaseSchema(ctx *pulumi.Context,
	name string, args *BaseSchemaArgs, opts ...pulumi.ResourceOption) (*BaseSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource BaseSchema
	err := ctx.RegisterResource("okta:user/baseSchema:BaseSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBaseSchema gets an existing BaseSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBaseSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaseSchemaState, opts ...pulumi.ResourceOption) (*BaseSchema, error) {
	var resource BaseSchema
	err := ctx.ReadResource("okta:user/baseSchema:BaseSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BaseSchema resources.
type baseSchemaState struct {
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

type BaseSchemaState struct {
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (BaseSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*baseSchemaState)(nil)).Elem()
}

type baseSchemaArgs struct {
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// The property display name.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// User type ID
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a BaseSchema resource.
type BaseSchemaArgs struct {
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The validation pattern to use for the subschema, only available for `login` property. Must be in form of `.+`, or `[<pattern>]+`.
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// The property display name.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// User type ID
	UserType pulumi.StringPtrInput
}

func (BaseSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baseSchemaArgs)(nil)).Elem()
}

type BaseSchemaInput interface {
	pulumi.Input

	ToBaseSchemaOutput() BaseSchemaOutput
	ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput
}

func (BaseSchema) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseSchema)(nil)).Elem()
}

func (i BaseSchema) ToBaseSchemaOutput() BaseSchemaOutput {
	return i.ToBaseSchemaOutputWithContext(context.Background())
}

func (i BaseSchema) ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseSchemaOutput)
}

type BaseSchemaOutput struct {
	*pulumi.OutputState
}

func (BaseSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseSchemaOutput)(nil)).Elem()
}

func (o BaseSchemaOutput) ToBaseSchemaOutput() BaseSchemaOutput {
	return o
}

func (o BaseSchemaOutput) ToBaseSchemaOutputWithContext(ctx context.Context) BaseSchemaOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BaseSchemaOutput{})
}
