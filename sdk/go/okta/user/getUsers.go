// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a list of users from Okta.
//
// ## Example Usage
// ### Lookup Users by Search Criteria
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := user.GetUsers(ctx, &user.GetUsersArgs{
// 			Searches: []user.GetUsersSearch{
// 				user.GetUsersSearch{
// 					Expression: pulumi.StringRef("profile.department eq \"Engineering\" and (created lt \"2014-01-01T00:00:00.000Z\" or status eq \"ACTIVE\")"),
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Lookup Users by Group Membership
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/group"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleGroup, err := group.NewGroup(ctx, "exampleGroup", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_ = user.GetUsersOutput(ctx, user.GetUsersOutputArgs{
// 			GroupId:       exampleGroup.ID(),
// 			IncludeGroups: pulumi.Bool(true),
// 			IncludeRoles:  pulumi.Bool(true),
// 		}, nil)
// 		return nil
// 	})
// }
// ```
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	var rv GetUsersResult
	err := ctx.Invoke("okta:user/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
	CompoundSearchOperator *string `pulumi:"compoundSearchOperator"`
	// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// Id of group used to find users based on membership.
	GroupId *string `pulumi:"groupId"`
	// Fetch each user's group memberships. Defaults to `false`, in which case the `groupMemberships` user attribute will be empty.
	IncludeGroups *bool `pulumi:"includeGroups"`
	// Fetch each user's administrator roles. Defaults to `false`, in which case the `adminRoles` user attribute will be empty.
	IncludeRoles *bool `pulumi:"includeRoles"`
	// Map of search criteria. It supports the following properties.
	Searches []GetUsersSearch `pulumi:"searches"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	CompoundSearchOperator *string `pulumi:"compoundSearchOperator"`
	DelayReadSeconds       *string `pulumi:"delayReadSeconds"`
	GroupId                *string `pulumi:"groupId"`
	// The provider-assigned unique ID for this managed resource.
	Id            string           `pulumi:"id"`
	IncludeGroups *bool            `pulumi:"includeGroups"`
	IncludeRoles  *bool            `pulumi:"includeRoles"`
	Searches      []GetUsersSearch `pulumi:"searches"`
	// collection of users retrieved from Okta with the following properties.
	Users []GetUsersUser `pulumi:"users"`
}

func GetUsersOutput(ctx *pulumi.Context, args GetUsersOutputArgs, opts ...pulumi.InvokeOption) GetUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsersResult, error) {
			args := v.(GetUsersArgs)
			r, err := GetUsers(ctx, &args, opts...)
			var s GetUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsersResultOutput)
}

// A collection of arguments for invoking getUsers.
type GetUsersOutputArgs struct {
	// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
	CompoundSearchOperator pulumi.StringPtrInput `pulumi:"compoundSearchOperator"`
	// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
	DelayReadSeconds pulumi.StringPtrInput `pulumi:"delayReadSeconds"`
	// Id of group used to find users based on membership.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Fetch each user's group memberships. Defaults to `false`, in which case the `groupMemberships` user attribute will be empty.
	IncludeGroups pulumi.BoolPtrInput `pulumi:"includeGroups"`
	// Fetch each user's administrator roles. Defaults to `false`, in which case the `adminRoles` user attribute will be empty.
	IncludeRoles pulumi.BoolPtrInput `pulumi:"includeRoles"`
	// Map of search criteria. It supports the following properties.
	Searches GetUsersSearchArrayInput `pulumi:"searches"`
}

func (GetUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersArgs)(nil)).Elem()
}

// A collection of values returned by getUsers.
type GetUsersResultOutput struct{ *pulumi.OutputState }

func (GetUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersResult)(nil)).Elem()
}

func (o GetUsersResultOutput) ToGetUsersResultOutput() GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) ToGetUsersResultOutputWithContext(ctx context.Context) GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) CompoundSearchOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.CompoundSearchOperator }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) DelayReadSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.DelayReadSeconds }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUsersResultOutput) IncludeGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.IncludeGroups }).(pulumi.BoolPtrOutput)
}

func (o GetUsersResultOutput) IncludeRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.IncludeRoles }).(pulumi.BoolPtrOutput)
}

func (o GetUsersResultOutput) Searches() GetUsersSearchArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersSearch { return v.Searches }).(GetUsersSearchArrayOutput)
}

// collection of users retrieved from Okta with the following properties.
func (o GetUsersResultOutput) Users() GetUsersUserArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersUser { return v.Users }).(GetUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsersResultOutput{})
}
