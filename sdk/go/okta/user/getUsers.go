// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a list of users from Okta.
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsersResult
	err := ctx.Invoke("okta:user/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator *string `pulumi:"compoundSearchOperator"`
	// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// Find users based on group membership using the id of the group.
	GroupId *string `pulumi:"groupId"`
	// Fetch group memberships for each user
	IncludeGroups *bool `pulumi:"includeGroups"`
	// Fetch user roles for each user
	IncludeRoles *bool `pulumi:"includeRoles"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches []GetUsersSearch `pulumi:"searches"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator *string `pulumi:"compoundSearchOperator"`
	// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// Find users based on group membership using the id of the group.
	GroupId *string `pulumi:"groupId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Fetch group memberships for each user
	IncludeGroups *bool `pulumi:"includeGroups"`
	// Fetch user roles for each user
	IncludeRoles *bool `pulumi:"includeRoles"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches []GetUsersSearch `pulumi:"searches"`
	// collection of users retrieved from Okta.
	Users []GetUsersUser `pulumi:"users"`
}

func GetUsersOutput(ctx *pulumi.Context, args GetUsersOutputArgs, opts ...pulumi.InvokeOption) GetUsersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetUsersResultOutput, error) {
			args := v.(GetUsersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:user/getUsers:getUsers", args, GetUsersResultOutput{}, options).(GetUsersResultOutput), nil
		}).(GetUsersResultOutput)
}

// A collection of arguments for invoking getUsers.
type GetUsersOutputArgs struct {
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator pulumi.StringPtrInput `pulumi:"compoundSearchOperator"`
	// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
	DelayReadSeconds pulumi.StringPtrInput `pulumi:"delayReadSeconds"`
	// Find users based on group membership using the id of the group.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Fetch group memberships for each user
	IncludeGroups pulumi.BoolPtrInput `pulumi:"includeGroups"`
	// Fetch user roles for each user
	IncludeRoles pulumi.BoolPtrInput `pulumi:"includeRoles"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches GetUsersSearchArrayInput `pulumi:"searches"`
}

func (GetUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersArgs)(nil)).Elem()
}

// A collection of values returned by getUsers.
type GetUsersResultOutput struct{ *pulumi.OutputState }

func (GetUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersResult)(nil)).Elem()
}

func (o GetUsersResultOutput) ToGetUsersResultOutput() GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) ToGetUsersResultOutputWithContext(ctx context.Context) GetUsersResultOutput {
	return o
}

// Search operator used when joining multiple search clauses
func (o GetUsersResultOutput) CompoundSearchOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.CompoundSearchOperator }).(pulumi.StringPtrOutput)
}

// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for.
func (o GetUsersResultOutput) DelayReadSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.DelayReadSeconds }).(pulumi.StringPtrOutput)
}

// Find users based on group membership using the id of the group.
func (o GetUsersResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Fetch group memberships for each user
func (o GetUsersResultOutput) IncludeGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.IncludeGroups }).(pulumi.BoolPtrOutput)
}

// Fetch user roles for each user
func (o GetUsersResultOutput) IncludeRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.IncludeRoles }).(pulumi.BoolPtrOutput)
}

// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
func (o GetUsersResultOutput) Searches() GetUsersSearchArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersSearch { return v.Searches }).(GetUsersSearchArrayOutput)
}

// collection of users retrieved from Okta.
func (o GetUsersResultOutput) Users() GetUsersUserArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersUser { return v.Users }).(GetUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsersResultOutput{})
}
