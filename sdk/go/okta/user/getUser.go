// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a single users from Okta.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("okta:user/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator *string `pulumi:"compoundSearchOperator"`
	// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
	DelayReadSeconds *string `pulumi:"delayReadSeconds"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches []GetUserSearch `pulumi:"searches"`
	// Do not populate user groups information (prevents additional API call)
	SkipGroups *bool `pulumi:"skipGroups"`
	// Do not populate user roles information (prevents additional API call)
	SkipRoles *bool `pulumi:"skipRoles"`
	// Retrieve a single user based on their id
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	AdminRoles []string `pulumi:"adminRoles"`
	City       string   `pulumi:"city"`
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator  *string `pulumi:"compoundSearchOperator"`
	CostCenter              string  `pulumi:"costCenter"`
	CountryCode             string  `pulumi:"countryCode"`
	CustomProfileAttributes string  `pulumi:"customProfileAttributes"`
	// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
	DelayReadSeconds *string  `pulumi:"delayReadSeconds"`
	Department       string   `pulumi:"department"`
	DisplayName      string   `pulumi:"displayName"`
	Division         string   `pulumi:"division"`
	Email            string   `pulumi:"email"`
	EmployeeNumber   string   `pulumi:"employeeNumber"`
	FirstName        string   `pulumi:"firstName"`
	GroupMemberships []string `pulumi:"groupMemberships"`
	HonorificPrefix  string   `pulumi:"honorificPrefix"`
	HonorificSuffix  string   `pulumi:"honorificSuffix"`
	// The provider-assigned unique ID for this managed resource.
	Id                string   `pulumi:"id"`
	LastName          string   `pulumi:"lastName"`
	Locale            string   `pulumi:"locale"`
	Login             string   `pulumi:"login"`
	Manager           string   `pulumi:"manager"`
	ManagerId         string   `pulumi:"managerId"`
	MiddleName        string   `pulumi:"middleName"`
	MobilePhone       string   `pulumi:"mobilePhone"`
	NickName          string   `pulumi:"nickName"`
	Organization      string   `pulumi:"organization"`
	PostalAddress     string   `pulumi:"postalAddress"`
	PreferredLanguage string   `pulumi:"preferredLanguage"`
	PrimaryPhone      string   `pulumi:"primaryPhone"`
	ProfileUrl        string   `pulumi:"profileUrl"`
	Roles             []string `pulumi:"roles"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches    []GetUserSearch `pulumi:"searches"`
	SecondEmail string          `pulumi:"secondEmail"`
	// Do not populate user groups information (prevents additional API call)
	SkipGroups *bool `pulumi:"skipGroups"`
	// Do not populate user roles information (prevents additional API call)
	SkipRoles     *bool  `pulumi:"skipRoles"`
	State         string `pulumi:"state"`
	Status        string `pulumi:"status"`
	StreetAddress string `pulumi:"streetAddress"`
	Timezone      string `pulumi:"timezone"`
	Title         string `pulumi:"title"`
	// Retrieve a single user based on their id
	UserId   *string `pulumi:"userId"`
	UserType string  `pulumi:"userType"`
	ZipCode  string  `pulumi:"zipCode"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:user/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Search operator used when joining multiple search clauses
	CompoundSearchOperator pulumi.StringPtrInput `pulumi:"compoundSearchOperator"`
	// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
	DelayReadSeconds pulumi.StringPtrInput `pulumi:"delayReadSeconds"`
	// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
	Searches GetUserSearchArrayInput `pulumi:"searches"`
	// Do not populate user groups information (prevents additional API call)
	SkipGroups pulumi.BoolPtrInput `pulumi:"skipGroups"`
	// Do not populate user roles information (prevents additional API call)
	SkipRoles pulumi.BoolPtrInput `pulumi:"skipRoles"`
	// Retrieve a single user based on their id
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) AdminRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.AdminRoles }).(pulumi.StringArrayOutput)
}

func (o LookupUserResultOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.City }).(pulumi.StringOutput)
}

// Search operator used when joining multiple search clauses
func (o LookupUserResultOutput) CompoundSearchOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.CompoundSearchOperator }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) CostCenter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CostCenter }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CountryCode }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) CustomProfileAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CustomProfileAttributes }).(pulumi.StringOutput)
}

// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
func (o LookupUserResultOutput) DelayReadSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.DelayReadSeconds }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) Department() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Department }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Division() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Division }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) EmployeeNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.EmployeeNumber }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) GroupMemberships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.GroupMemberships }).(pulumi.StringArrayOutput)
}

func (o LookupUserResultOutput) HonorificPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.HonorificPrefix }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) HonorificSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.HonorificSuffix }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Locale() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Locale }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Login }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Manager() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Manager }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ManagerId }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) MiddleName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.MiddleName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) MobilePhone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.MobilePhone }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) NickName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.NickName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Organization }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) PostalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PostalAddress }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PreferredLanguage }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) PrimaryPhone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PrimaryPhone }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ProfileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ProfileUrl }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
func (o LookupUserResultOutput) Searches() GetUserSearchArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserSearch { return v.Searches }).(GetUserSearchArrayOutput)
}

func (o LookupUserResultOutput) SecondEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.SecondEmail }).(pulumi.StringOutput)
}

// Do not populate user groups information (prevents additional API call)
func (o LookupUserResultOutput) SkipGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *bool { return v.SkipGroups }).(pulumi.BoolPtrOutput)
}

// Do not populate user roles information (prevents additional API call)
func (o LookupUserResultOutput) SkipRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *bool { return v.SkipRoles }).(pulumi.BoolPtrOutput)
}

func (o LookupUserResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) StreetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.StreetAddress }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Timezone }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Title }).(pulumi.StringOutput)
}

// Retrieve a single user based on their id
func (o LookupUserResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserType }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ZipCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ZipCode }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
