// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a User type.
//
// This resource allows you to create and configure a User Type.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewUserType(ctx, "example", &user.UserTypeArgs{
//				Description: pulumi.String("example"),
//				DisplayName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A User Type can be imported via the Okta ID.
//
// ```sh
// $ pulumi import okta:user/userType:UserType example &#60;user type id&#62;
// ```
type UserType struct {
	pulumi.CustomResourceState

	// Description of the User Type.
	Description pulumi.StringOutput `pulumi:"description"`
	// Display Name of the User Type.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Name of the User Type.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewUserType registers a new resource with the given unique name, arguments, and options.
func NewUserType(ctx *pulumi.Context,
	name string, args *UserTypeArgs, opts ...pulumi.ResourceOption) (*UserType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserType
	err := ctx.RegisterResource("okta:user/userType:UserType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserType gets an existing UserType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTypeState, opts ...pulumi.ResourceOption) (*UserType, error) {
	var resource UserType
	err := ctx.ReadResource("okta:user/userType:UserType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserType resources.
type userTypeState struct {
	// Description of the User Type.
	Description *string `pulumi:"description"`
	// Display Name of the User Type.
	DisplayName *string `pulumi:"displayName"`
	// Name of the User Type.
	Name *string `pulumi:"name"`
}

type UserTypeState struct {
	// Description of the User Type.
	Description pulumi.StringPtrInput
	// Display Name of the User Type.
	DisplayName pulumi.StringPtrInput
	// Name of the User Type.
	Name pulumi.StringPtrInput
}

func (UserTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTypeState)(nil)).Elem()
}

type userTypeArgs struct {
	// Description of the User Type.
	Description string `pulumi:"description"`
	// Display Name of the User Type.
	DisplayName string `pulumi:"displayName"`
	// Name of the User Type.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a UserType resource.
type UserTypeArgs struct {
	// Description of the User Type.
	Description pulumi.StringInput
	// Display Name of the User Type.
	DisplayName pulumi.StringInput
	// Name of the User Type.
	Name pulumi.StringPtrInput
}

func (UserTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTypeArgs)(nil)).Elem()
}

type UserTypeInput interface {
	pulumi.Input

	ToUserTypeOutput() UserTypeOutput
	ToUserTypeOutputWithContext(ctx context.Context) UserTypeOutput
}

func (*UserType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserType)(nil)).Elem()
}

func (i *UserType) ToUserTypeOutput() UserTypeOutput {
	return i.ToUserTypeOutputWithContext(context.Background())
}

func (i *UserType) ToUserTypeOutputWithContext(ctx context.Context) UserTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTypeOutput)
}

// UserTypeArrayInput is an input type that accepts UserTypeArray and UserTypeArrayOutput values.
// You can construct a concrete instance of `UserTypeArrayInput` via:
//
//	UserTypeArray{ UserTypeArgs{...} }
type UserTypeArrayInput interface {
	pulumi.Input

	ToUserTypeArrayOutput() UserTypeArrayOutput
	ToUserTypeArrayOutputWithContext(context.Context) UserTypeArrayOutput
}

type UserTypeArray []UserTypeInput

func (UserTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserType)(nil)).Elem()
}

func (i UserTypeArray) ToUserTypeArrayOutput() UserTypeArrayOutput {
	return i.ToUserTypeArrayOutputWithContext(context.Background())
}

func (i UserTypeArray) ToUserTypeArrayOutputWithContext(ctx context.Context) UserTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTypeArrayOutput)
}

// UserTypeMapInput is an input type that accepts UserTypeMap and UserTypeMapOutput values.
// You can construct a concrete instance of `UserTypeMapInput` via:
//
//	UserTypeMap{ "key": UserTypeArgs{...} }
type UserTypeMapInput interface {
	pulumi.Input

	ToUserTypeMapOutput() UserTypeMapOutput
	ToUserTypeMapOutputWithContext(context.Context) UserTypeMapOutput
}

type UserTypeMap map[string]UserTypeInput

func (UserTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserType)(nil)).Elem()
}

func (i UserTypeMap) ToUserTypeMapOutput() UserTypeMapOutput {
	return i.ToUserTypeMapOutputWithContext(context.Background())
}

func (i UserTypeMap) ToUserTypeMapOutputWithContext(ctx context.Context) UserTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTypeMapOutput)
}

type UserTypeOutput struct{ *pulumi.OutputState }

func (UserTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserType)(nil)).Elem()
}

func (o UserTypeOutput) ToUserTypeOutput() UserTypeOutput {
	return o
}

func (o UserTypeOutput) ToUserTypeOutputWithContext(ctx context.Context) UserTypeOutput {
	return o
}

// Description of the User Type.
func (o UserTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UserType) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Display Name of the User Type.
func (o UserTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserType) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Name of the User Type.
func (o UserTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type UserTypeArrayOutput struct{ *pulumi.OutputState }

func (UserTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserType)(nil)).Elem()
}

func (o UserTypeArrayOutput) ToUserTypeArrayOutput() UserTypeArrayOutput {
	return o
}

func (o UserTypeArrayOutput) ToUserTypeArrayOutputWithContext(ctx context.Context) UserTypeArrayOutput {
	return o
}

func (o UserTypeArrayOutput) Index(i pulumi.IntInput) UserTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserType {
		return vs[0].([]*UserType)[vs[1].(int)]
	}).(UserTypeOutput)
}

type UserTypeMapOutput struct{ *pulumi.OutputState }

func (UserTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserType)(nil)).Elem()
}

func (o UserTypeMapOutput) ToUserTypeMapOutput() UserTypeMapOutput {
	return o
}

func (o UserTypeMapOutput) ToUserTypeMapOutputWithContext(ctx context.Context) UserTypeMapOutput {
	return o
}

func (o UserTypeMapOutput) MapIndex(k pulumi.StringInput) UserTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserType {
		return vs[0].(map[string]*UserType)[vs[1].(string)]
	}).(UserTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserTypeInput)(nil)).Elem(), &UserType{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTypeArrayInput)(nil)).Elem(), UserTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTypeMapInput)(nil)).Elem(), UserTypeMap{})
	pulumi.RegisterOutputType(UserTypeOutput{})
	pulumi.RegisterOutputType(UserTypeArrayOutput{})
	pulumi.RegisterOutputType(UserTypeMapOutput{})
}
