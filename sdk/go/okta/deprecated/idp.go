// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Deprecated. Use idp.* instead. This resource will be removed in version 4.0 of this provider.
type Idp struct {
	pulumi.CustomResourceState

	AccountLinkAction        pulumi.StringPtrOutput   `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     pulumi.StringOutput      `pulumi:"authorizationBinding"`
	AuthorizationUrl         pulumi.StringOutput      `pulumi:"authorizationUrl"`
	ClientId                 pulumi.StringOutput      `pulumi:"clientId"`
	ClientSecret             pulumi.StringOutput      `pulumi:"clientSecret"`
	DeprovisionedAction      pulumi.StringPtrOutput   `pulumi:"deprovisionedAction"`
	GroupsAction             pulumi.StringPtrOutput   `pulumi:"groupsAction"`
	GroupsAssignments        pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	GroupsAttribute          pulumi.StringPtrOutput   `pulumi:"groupsAttribute"`
	GroupsFilters            pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
	// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrOutput `pulumi:"issuerMode"`
	IssuerUrl    pulumi.StringOutput    `pulumi:"issuerUrl"`
	JwksBinding  pulumi.StringOutput    `pulumi:"jwksBinding"`
	JwksUrl      pulumi.StringOutput    `pulumi:"jwksUrl"`
	MaxClockSkew pulumi.IntPtrOutput    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               pulumi.StringOutput    `pulumi:"name"`
	ProfileMaster      pulumi.BoolPtrOutput   `pulumi:"profileMaster"`
	ProtocolType       pulumi.StringPtrOutput `pulumi:"protocolType"`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrOutput   `pulumi:"requestSignatureScope"`
	Scopes                pulumi.StringArrayOutput `pulumi:"scopes"`
	Status                pulumi.StringPtrOutput   `pulumi:"status"`
	SubjectMatchAttribute pulumi.StringPtrOutput   `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      pulumi.StringPtrOutput   `pulumi:"subjectMatchType"`
	SuspendedAction       pulumi.StringPtrOutput   `pulumi:"suspendedAction"`
	TokenBinding          pulumi.StringOutput      `pulumi:"tokenBinding"`
	TokenUrl              pulumi.StringOutput      `pulumi:"tokenUrl"`
	Type                  pulumi.StringOutput      `pulumi:"type"`
	UserInfoBinding       pulumi.StringPtrOutput   `pulumi:"userInfoBinding"`
	UserInfoUrl           pulumi.StringPtrOutput   `pulumi:"userInfoUrl"`
	UserTypeId            pulumi.StringOutput      `pulumi:"userTypeId"`
	UsernameTemplate      pulumi.StringPtrOutput   `pulumi:"usernameTemplate"`
}

// NewIdp registers a new resource with the given unique name, arguments, and options.
func NewIdp(ctx *pulumi.Context,
	name string, args *IdpArgs, opts ...pulumi.ResourceOption) (*Idp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationBinding == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationBinding'")
	}
	if args.AuthorizationUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationUrl'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IssuerUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuerUrl'")
	}
	if args.JwksBinding == nil {
		return nil, errors.New("invalid value for required argument 'JwksBinding'")
	}
	if args.JwksUrl == nil {
		return nil, errors.New("invalid value for required argument 'JwksUrl'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.TokenBinding == nil {
		return nil, errors.New("invalid value for required argument 'TokenBinding'")
	}
	if args.TokenUrl == nil {
		return nil, errors.New("invalid value for required argument 'TokenUrl'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	var resource Idp
	err := ctx.RegisterResource("okta:deprecated/idp:Idp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdp gets an existing Idp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdpState, opts ...pulumi.ResourceOption) (*Idp, error) {
	var resource Idp
	err := ctx.ReadResource("okta:deprecated/idp:Idp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Idp resources.
type idpState struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     *string  `pulumi:"authorizationBinding"`
	AuthorizationUrl         *string  `pulumi:"authorizationUrl"`
	ClientId                 *string  `pulumi:"clientId"`
	ClientSecret             *string  `pulumi:"clientSecret"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
	// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   *string `pulumi:"issuerMode"`
	IssuerUrl    *string `pulumi:"issuerUrl"`
	JwksBinding  *string `pulumi:"jwksBinding"`
	JwksUrl      *string `pulumi:"jwksUrl"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProtocolType       *string `pulumi:"protocolType"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope *string  `pulumi:"requestSignatureScope"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	TokenBinding          *string  `pulumi:"tokenBinding"`
	TokenUrl              *string  `pulumi:"tokenUrl"`
	Type                  *string  `pulumi:"type"`
	UserInfoBinding       *string  `pulumi:"userInfoBinding"`
	UserInfoUrl           *string  `pulumi:"userInfoUrl"`
	UserTypeId            *string  `pulumi:"userTypeId"`
	UsernameTemplate      *string  `pulumi:"usernameTemplate"`
}

type IdpState struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AuthorizationBinding     pulumi.StringPtrInput
	AuthorizationUrl         pulumi.StringPtrInput
	ClientId                 pulumi.StringPtrInput
	ClientSecret             pulumi.StringPtrInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
	// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrInput
	IssuerUrl    pulumi.StringPtrInput
	JwksBinding  pulumi.StringPtrInput
	JwksUrl      pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProtocolType       pulumi.StringPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	TokenBinding          pulumi.StringPtrInput
	TokenUrl              pulumi.StringPtrInput
	Type                  pulumi.StringPtrInput
	UserInfoBinding       pulumi.StringPtrInput
	UserInfoUrl           pulumi.StringPtrInput
	UserTypeId            pulumi.StringPtrInput
	UsernameTemplate      pulumi.StringPtrInput
}

func (IdpState) ElementType() reflect.Type {
	return reflect.TypeOf((*idpState)(nil)).Elem()
}

type idpArgs struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	AuthorizationBinding     string   `pulumi:"authorizationBinding"`
	AuthorizationUrl         string   `pulumi:"authorizationUrl"`
	ClientId                 string   `pulumi:"clientId"`
	ClientSecret             string   `pulumi:"clientSecret"`
	DeprovisionedAction      *string  `pulumi:"deprovisionedAction"`
	GroupsAction             *string  `pulumi:"groupsAction"`
	GroupsAssignments        []string `pulumi:"groupsAssignments"`
	GroupsAttribute          *string  `pulumi:"groupsAttribute"`
	GroupsFilters            []string `pulumi:"groupsFilters"`
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
	// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   *string `pulumi:"issuerMode"`
	IssuerUrl    string  `pulumi:"issuerUrl"`
	JwksBinding  string  `pulumi:"jwksBinding"`
	JwksUrl      string  `pulumi:"jwksUrl"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProtocolType       *string `pulumi:"protocolType"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope *string  `pulumi:"requestSignatureScope"`
	Scopes                []string `pulumi:"scopes"`
	Status                *string  `pulumi:"status"`
	SubjectMatchAttribute *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType      *string  `pulumi:"subjectMatchType"`
	SuspendedAction       *string  `pulumi:"suspendedAction"`
	TokenBinding          string   `pulumi:"tokenBinding"`
	TokenUrl              string   `pulumi:"tokenUrl"`
	UserInfoBinding       *string  `pulumi:"userInfoBinding"`
	UserInfoUrl           *string  `pulumi:"userInfoUrl"`
	UsernameTemplate      *string  `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a Idp resource.
type IdpArgs struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	AuthorizationBinding     pulumi.StringInput
	AuthorizationUrl         pulumi.StringInput
	ClientId                 pulumi.StringInput
	ClientSecret             pulumi.StringInput
	DeprovisionedAction      pulumi.StringPtrInput
	GroupsAction             pulumi.StringPtrInput
	GroupsAssignments        pulumi.StringArrayInput
	GroupsAttribute          pulumi.StringPtrInput
	GroupsFilters            pulumi.StringArrayInput
	// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
	// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
	IssuerMode   pulumi.StringPtrInput
	IssuerUrl    pulumi.StringInput
	JwksBinding  pulumi.StringInput
	JwksUrl      pulumi.StringInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProtocolType       pulumi.StringPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// The HMAC Signature Algorithm used when signing an authorization request
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// Specifies whether to digitally sign an authorization request to the IdP
	RequestSignatureScope pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	Status                pulumi.StringPtrInput
	SubjectMatchAttribute pulumi.StringPtrInput
	SubjectMatchType      pulumi.StringPtrInput
	SuspendedAction       pulumi.StringPtrInput
	TokenBinding          pulumi.StringInput
	TokenUrl              pulumi.StringInput
	UserInfoBinding       pulumi.StringPtrInput
	UserInfoUrl           pulumi.StringPtrInput
	UsernameTemplate      pulumi.StringPtrInput
}

func (IdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idpArgs)(nil)).Elem()
}

type IdpInput interface {
	pulumi.Input

	ToIdpOutput() IdpOutput
	ToIdpOutputWithContext(ctx context.Context) IdpOutput
}

func (*Idp) ElementType() reflect.Type {
	return reflect.TypeOf((**Idp)(nil)).Elem()
}

func (i *Idp) ToIdpOutput() IdpOutput {
	return i.ToIdpOutputWithContext(context.Background())
}

func (i *Idp) ToIdpOutputWithContext(ctx context.Context) IdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpOutput)
}

// IdpArrayInput is an input type that accepts IdpArray and IdpArrayOutput values.
// You can construct a concrete instance of `IdpArrayInput` via:
//
//	IdpArray{ IdpArgs{...} }
type IdpArrayInput interface {
	pulumi.Input

	ToIdpArrayOutput() IdpArrayOutput
	ToIdpArrayOutputWithContext(context.Context) IdpArrayOutput
}

type IdpArray []IdpInput

func (IdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Idp)(nil)).Elem()
}

func (i IdpArray) ToIdpArrayOutput() IdpArrayOutput {
	return i.ToIdpArrayOutputWithContext(context.Background())
}

func (i IdpArray) ToIdpArrayOutputWithContext(ctx context.Context) IdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpArrayOutput)
}

// IdpMapInput is an input type that accepts IdpMap and IdpMapOutput values.
// You can construct a concrete instance of `IdpMapInput` via:
//
//	IdpMap{ "key": IdpArgs{...} }
type IdpMapInput interface {
	pulumi.Input

	ToIdpMapOutput() IdpMapOutput
	ToIdpMapOutputWithContext(context.Context) IdpMapOutput
}

type IdpMap map[string]IdpInput

func (IdpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Idp)(nil)).Elem()
}

func (i IdpMap) ToIdpMapOutput() IdpMapOutput {
	return i.ToIdpMapOutputWithContext(context.Background())
}

func (i IdpMap) ToIdpMapOutputWithContext(ctx context.Context) IdpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpMapOutput)
}

type IdpOutput struct{ *pulumi.OutputState }

func (IdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Idp)(nil)).Elem()
}

func (o IdpOutput) ToIdpOutput() IdpOutput {
	return o
}

func (o IdpOutput) ToIdpOutputWithContext(ctx context.Context) IdpOutput {
	return o
}

func (o IdpOutput) AccountLinkAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.AccountLinkAction }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) AccountLinkGroupIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringArrayOutput { return v.AccountLinkGroupIncludes }).(pulumi.StringArrayOutput)
}

func (o IdpOutput) AuthorizationBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.AuthorizationBinding }).(pulumi.StringOutput)
}

func (o IdpOutput) AuthorizationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.AuthorizationUrl }).(pulumi.StringOutput)
}

func (o IdpOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

func (o IdpOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

func (o IdpOutput) DeprovisionedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.DeprovisionedAction }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) GroupsAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.GroupsAction }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) GroupsAssignments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringArrayOutput { return v.GroupsAssignments }).(pulumi.StringArrayOutput)
}

func (o IdpOutput) GroupsAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.GroupsAttribute }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) GroupsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringArrayOutput { return v.GroupsFilters }).(pulumi.StringArrayOutput)
}

// Indicates whether Okta uses the original Okta org domain URL, custom domain URL, or dynamic. See Identity Provider
// attributes - issuerMode - https://developer.okta.com/docs/reference/api/idps/#identity-provider-attributes
func (o IdpOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.IssuerUrl }).(pulumi.StringOutput)
}

func (o IdpOutput) JwksBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.JwksBinding }).(pulumi.StringOutput)
}

func (o IdpOutput) JwksUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.JwksUrl }).(pulumi.StringOutput)
}

func (o IdpOutput) MaxClockSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.IntPtrOutput { return v.MaxClockSkew }).(pulumi.IntPtrOutput)
}

// Name of the IdP
func (o IdpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdpOutput) ProfileMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.BoolPtrOutput { return v.ProfileMaster }).(pulumi.BoolPtrOutput)
}

func (o IdpOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) ProvisioningAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.ProvisioningAction }).(pulumi.StringPtrOutput)
}

// The HMAC Signature Algorithm used when signing an authorization request
func (o IdpOutput) RequestSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.RequestSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies whether to digitally sign an authorization request to the IdP
func (o IdpOutput) RequestSignatureScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.RequestSignatureScope }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

func (o IdpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) SubjectMatchAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.SubjectMatchAttribute }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) SubjectMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.SubjectMatchType }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) SuspendedAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.SuspendedAction }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) TokenBinding() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.TokenBinding }).(pulumi.StringOutput)
}

func (o IdpOutput) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.TokenUrl }).(pulumi.StringOutput)
}

func (o IdpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o IdpOutput) UserInfoBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.UserInfoBinding }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) UserInfoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.UserInfoUrl }).(pulumi.StringPtrOutput)
}

func (o IdpOutput) UserTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringOutput { return v.UserTypeId }).(pulumi.StringOutput)
}

func (o IdpOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Idp) pulumi.StringPtrOutput { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type IdpArrayOutput struct{ *pulumi.OutputState }

func (IdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Idp)(nil)).Elem()
}

func (o IdpArrayOutput) ToIdpArrayOutput() IdpArrayOutput {
	return o
}

func (o IdpArrayOutput) ToIdpArrayOutputWithContext(ctx context.Context) IdpArrayOutput {
	return o
}

func (o IdpArrayOutput) Index(i pulumi.IntInput) IdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Idp {
		return vs[0].([]*Idp)[vs[1].(int)]
	}).(IdpOutput)
}

type IdpMapOutput struct{ *pulumi.OutputState }

func (IdpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Idp)(nil)).Elem()
}

func (o IdpMapOutput) ToIdpMapOutput() IdpMapOutput {
	return o
}

func (o IdpMapOutput) ToIdpMapOutputWithContext(ctx context.Context) IdpMapOutput {
	return o
}

func (o IdpMapOutput) MapIndex(k pulumi.StringInput) IdpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Idp {
		return vs[0].(map[string]*Idp)[vs[1].(string)]
	}).(IdpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdpInput)(nil)).Elem(), &Idp{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpArrayInput)(nil)).Elem(), IdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpMapInput)(nil)).Elem(), IdpMap{})
	pulumi.RegisterOutputType(IdpOutput{})
	pulumi.RegisterOutputType(IdpArrayOutput{})
	pulumi.RegisterOutputType(IdpMapOutput{})
}
