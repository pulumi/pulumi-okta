// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SignonPolicyRule struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
	Authtype pulumi.StringPtrOutput `pulumi:"authtype"`
	// List of behavior IDs
	Behaviors       pulumi.StringArrayOutput                  `pulumi:"behaviors"`
	FactorSequences SignonPolicyRuleFactorSequenceArrayOutput `pulumi:"factorSequences"`
	// Elapsed time before the next MFA challenge
	MfaLifetime pulumi.IntPtrOutput `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
	MfaPrompt pulumi.StringPtrOutput `pulumi:"mfaPrompt"`
	// Remember MFA device.
	MfaRememberDevice pulumi.BoolPtrOutput `pulumi:"mfaRememberDevice"`
	// Require MFA.
	MfaRequired pulumi.BoolPtrOutput `pulumi:"mfaRequired"`
	// Policy Rule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// Policy ID of the Rule
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrOutput `pulumi:"policyid"`
	// Primary factor.
	PrimaryFactor pulumi.StringOutput `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Risc level: ANY, LOW, MEDIUM or HIGH
	RiscLevel pulumi.StringPtrOutput `pulumi:"riscLevel"`
	// Max minutes a session can be idle.
	SessionIdle pulumi.IntPtrOutput `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrOutput `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
	// cookies.
	SessionPersistent pulumi.BoolPtrOutput `pulumi:"sessionPersistent"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewSignonPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewSignonPolicyRule(ctx *pulumi.Context,
	name string, args *SignonPolicyRuleArgs, opts ...pulumi.ResourceOption) (*SignonPolicyRule, error) {
	if args == nil {
		args = &SignonPolicyRuleArgs{}
	}

	var resource SignonPolicyRule
	err := ctx.RegisterResource("okta:deprecated/signonPolicyRule:SignonPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignonPolicyRule gets an existing SignonPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignonPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignonPolicyRuleState, opts ...pulumi.ResourceOption) (*SignonPolicyRule, error) {
	var resource SignonPolicyRule
	err := ctx.ReadResource("okta:deprecated/signonPolicyRule:SignonPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SignonPolicyRule resources.
type signonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
	Access *string `pulumi:"access"`
	// Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
	Authtype *string `pulumi:"authtype"`
	// List of behavior IDs
	Behaviors       []string                         `pulumi:"behaviors"`
	FactorSequences []SignonPolicyRuleFactorSequence `pulumi:"factorSequences"`
	// Elapsed time before the next MFA challenge
	MfaLifetime *int `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
	MfaPrompt *string `pulumi:"mfaPrompt"`
	// Remember MFA device.
	MfaRememberDevice *bool `pulumi:"mfaRememberDevice"`
	// Require MFA.
	MfaRequired *bool `pulumi:"mfaRequired"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Policy ID of the Rule
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Primary factor.
	PrimaryFactor *string `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Risc level: ANY, LOW, MEDIUM or HIGH
	RiscLevel *string `pulumi:"riscLevel"`
	// Max minutes a session can be idle.
	SessionIdle *int `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime *int `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
	// cookies.
	SessionPersistent *bool `pulumi:"sessionPersistent"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type SignonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
	Access pulumi.StringPtrInput
	// Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
	Authtype pulumi.StringPtrInput
	// List of behavior IDs
	Behaviors       pulumi.StringArrayInput
	FactorSequences SignonPolicyRuleFactorSequenceArrayInput
	// Elapsed time before the next MFA challenge
	MfaLifetime pulumi.IntPtrInput
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
	MfaPrompt pulumi.StringPtrInput
	// Remember MFA device.
	MfaRememberDevice pulumi.BoolPtrInput
	// Require MFA.
	MfaRequired pulumi.BoolPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Policy ID of the Rule
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Primary factor.
	PrimaryFactor pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Risc level: ANY, LOW, MEDIUM or HIGH
	RiscLevel pulumi.StringPtrInput
	// Max minutes a session can be idle.
	SessionIdle pulumi.IntPtrInput
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrInput
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
	// cookies.
	SessionPersistent pulumi.BoolPtrInput
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (SignonPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*signonPolicyRuleState)(nil)).Elem()
}

type signonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
	Access *string `pulumi:"access"`
	// Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
	Authtype *string `pulumi:"authtype"`
	// List of behavior IDs
	Behaviors       []string                         `pulumi:"behaviors"`
	FactorSequences []SignonPolicyRuleFactorSequence `pulumi:"factorSequences"`
	// Elapsed time before the next MFA challenge
	MfaLifetime *int `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
	MfaPrompt *string `pulumi:"mfaPrompt"`
	// Remember MFA device.
	MfaRememberDevice *bool `pulumi:"mfaRememberDevice"`
	// Require MFA.
	MfaRequired *bool `pulumi:"mfaRequired"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Policy ID of the Rule
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Primary factor.
	PrimaryFactor *string `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Risc level: ANY, LOW, MEDIUM or HIGH
	RiscLevel *string `pulumi:"riscLevel"`
	// Max minutes a session can be idle.
	SessionIdle *int `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime *int `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
	// cookies.
	SessionPersistent *bool `pulumi:"sessionPersistent"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a SignonPolicyRule resource.
type SignonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions: ALLOW, DENY or CHALLENGE.
	Access pulumi.StringPtrInput
	// Authentication entrypoint: ANY, RADIUS or LDAP_INTERFACE
	Authtype pulumi.StringPtrInput
	// List of behavior IDs
	Behaviors       pulumi.StringArrayInput
	FactorSequences SignonPolicyRuleFactorSequenceArrayInput
	// Elapsed time before the next MFA challenge
	MfaLifetime pulumi.IntPtrInput
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: DEVICE, SESSION or ALWAYS
	MfaPrompt pulumi.StringPtrInput
	// Remember MFA device.
	MfaRememberDevice pulumi.BoolPtrInput
	// Require MFA.
	MfaRequired pulumi.BoolPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Policy ID of the Rule
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Primary factor.
	PrimaryFactor pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Risc level: ANY, LOW, MEDIUM or HIGH
	RiscLevel pulumi.StringPtrInput
	// Max minutes a session can be idle.
	SessionIdle pulumi.IntPtrInput
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrInput
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
	// cookies.
	SessionPersistent pulumi.BoolPtrInput
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (SignonPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signonPolicyRuleArgs)(nil)).Elem()
}

type SignonPolicyRuleInput interface {
	pulumi.Input

	ToSignonPolicyRuleOutput() SignonPolicyRuleOutput
	ToSignonPolicyRuleOutputWithContext(ctx context.Context) SignonPolicyRuleOutput
}

func (*SignonPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((*SignonPolicyRule)(nil))
}

func (i *SignonPolicyRule) ToSignonPolicyRuleOutput() SignonPolicyRuleOutput {
	return i.ToSignonPolicyRuleOutputWithContext(context.Background())
}

func (i *SignonPolicyRule) ToSignonPolicyRuleOutputWithContext(ctx context.Context) SignonPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyRuleOutput)
}

func (i *SignonPolicyRule) ToSignonPolicyRulePtrOutput() SignonPolicyRulePtrOutput {
	return i.ToSignonPolicyRulePtrOutputWithContext(context.Background())
}

func (i *SignonPolicyRule) ToSignonPolicyRulePtrOutputWithContext(ctx context.Context) SignonPolicyRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyRulePtrOutput)
}

type SignonPolicyRulePtrInput interface {
	pulumi.Input

	ToSignonPolicyRulePtrOutput() SignonPolicyRulePtrOutput
	ToSignonPolicyRulePtrOutputWithContext(ctx context.Context) SignonPolicyRulePtrOutput
}

type signonPolicyRulePtrType SignonPolicyRuleArgs

func (*signonPolicyRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignonPolicyRule)(nil))
}

func (i *signonPolicyRulePtrType) ToSignonPolicyRulePtrOutput() SignonPolicyRulePtrOutput {
	return i.ToSignonPolicyRulePtrOutputWithContext(context.Background())
}

func (i *signonPolicyRulePtrType) ToSignonPolicyRulePtrOutputWithContext(ctx context.Context) SignonPolicyRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyRulePtrOutput)
}

// SignonPolicyRuleArrayInput is an input type that accepts SignonPolicyRuleArray and SignonPolicyRuleArrayOutput values.
// You can construct a concrete instance of `SignonPolicyRuleArrayInput` via:
//
//          SignonPolicyRuleArray{ SignonPolicyRuleArgs{...} }
type SignonPolicyRuleArrayInput interface {
	pulumi.Input

	ToSignonPolicyRuleArrayOutput() SignonPolicyRuleArrayOutput
	ToSignonPolicyRuleArrayOutputWithContext(context.Context) SignonPolicyRuleArrayOutput
}

type SignonPolicyRuleArray []SignonPolicyRuleInput

func (SignonPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SignonPolicyRule)(nil)).Elem()
}

func (i SignonPolicyRuleArray) ToSignonPolicyRuleArrayOutput() SignonPolicyRuleArrayOutput {
	return i.ToSignonPolicyRuleArrayOutputWithContext(context.Background())
}

func (i SignonPolicyRuleArray) ToSignonPolicyRuleArrayOutputWithContext(ctx context.Context) SignonPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyRuleArrayOutput)
}

// SignonPolicyRuleMapInput is an input type that accepts SignonPolicyRuleMap and SignonPolicyRuleMapOutput values.
// You can construct a concrete instance of `SignonPolicyRuleMapInput` via:
//
//          SignonPolicyRuleMap{ "key": SignonPolicyRuleArgs{...} }
type SignonPolicyRuleMapInput interface {
	pulumi.Input

	ToSignonPolicyRuleMapOutput() SignonPolicyRuleMapOutput
	ToSignonPolicyRuleMapOutputWithContext(context.Context) SignonPolicyRuleMapOutput
}

type SignonPolicyRuleMap map[string]SignonPolicyRuleInput

func (SignonPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SignonPolicyRule)(nil)).Elem()
}

func (i SignonPolicyRuleMap) ToSignonPolicyRuleMapOutput() SignonPolicyRuleMapOutput {
	return i.ToSignonPolicyRuleMapOutputWithContext(context.Background())
}

func (i SignonPolicyRuleMap) ToSignonPolicyRuleMapOutputWithContext(ctx context.Context) SignonPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyRuleMapOutput)
}

type SignonPolicyRuleOutput struct{ *pulumi.OutputState }

func (SignonPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignonPolicyRule)(nil))
}

func (o SignonPolicyRuleOutput) ToSignonPolicyRuleOutput() SignonPolicyRuleOutput {
	return o
}

func (o SignonPolicyRuleOutput) ToSignonPolicyRuleOutputWithContext(ctx context.Context) SignonPolicyRuleOutput {
	return o
}

func (o SignonPolicyRuleOutput) ToSignonPolicyRulePtrOutput() SignonPolicyRulePtrOutput {
	return o.ToSignonPolicyRulePtrOutputWithContext(context.Background())
}

func (o SignonPolicyRuleOutput) ToSignonPolicyRulePtrOutputWithContext(ctx context.Context) SignonPolicyRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignonPolicyRule) *SignonPolicyRule {
		return &v
	}).(SignonPolicyRulePtrOutput)
}

type SignonPolicyRulePtrOutput struct{ *pulumi.OutputState }

func (SignonPolicyRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignonPolicyRule)(nil))
}

func (o SignonPolicyRulePtrOutput) ToSignonPolicyRulePtrOutput() SignonPolicyRulePtrOutput {
	return o
}

func (o SignonPolicyRulePtrOutput) ToSignonPolicyRulePtrOutputWithContext(ctx context.Context) SignonPolicyRulePtrOutput {
	return o
}

func (o SignonPolicyRulePtrOutput) Elem() SignonPolicyRuleOutput {
	return o.ApplyT(func(v *SignonPolicyRule) SignonPolicyRule {
		if v != nil {
			return *v
		}
		var ret SignonPolicyRule
		return ret
	}).(SignonPolicyRuleOutput)
}

type SignonPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (SignonPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignonPolicyRule)(nil))
}

func (o SignonPolicyRuleArrayOutput) ToSignonPolicyRuleArrayOutput() SignonPolicyRuleArrayOutput {
	return o
}

func (o SignonPolicyRuleArrayOutput) ToSignonPolicyRuleArrayOutputWithContext(ctx context.Context) SignonPolicyRuleArrayOutput {
	return o
}

func (o SignonPolicyRuleArrayOutput) Index(i pulumi.IntInput) SignonPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignonPolicyRule {
		return vs[0].([]SignonPolicyRule)[vs[1].(int)]
	}).(SignonPolicyRuleOutput)
}

type SignonPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (SignonPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SignonPolicyRule)(nil))
}

func (o SignonPolicyRuleMapOutput) ToSignonPolicyRuleMapOutput() SignonPolicyRuleMapOutput {
	return o
}

func (o SignonPolicyRuleMapOutput) ToSignonPolicyRuleMapOutputWithContext(ctx context.Context) SignonPolicyRuleMapOutput {
	return o
}

func (o SignonPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) SignonPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SignonPolicyRule {
		return vs[0].(map[string]SignonPolicyRule)[vs[1].(string)]
	}).(SignonPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SignonPolicyRuleInput)(nil)).Elem(), &SignonPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignonPolicyRulePtrInput)(nil)).Elem(), &SignonPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignonPolicyRuleArrayInput)(nil)).Elem(), SignonPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignonPolicyRuleMapInput)(nil)).Elem(), SignonPolicyRuleMap{})
	pulumi.RegisterOutputType(SignonPolicyRuleOutput{})
	pulumi.RegisterOutputType(SignonPolicyRulePtrOutput{})
	pulumi.RegisterOutputType(SignonPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(SignonPolicyRuleMapOutput{})
}
