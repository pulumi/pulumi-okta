// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Deprecated. Use policy.Mfa instead. This resource will be removed in version 4.0 of this provider.
type MfaPolicy struct {
	pulumi.CustomResourceState

	// Policy Description
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	Duo          pulumi.StringMapOutput `pulumi:"duo"`
	ExternalIdp  pulumi.StringMapOutput `pulumi:"externalIdp"`
	FidoU2f      pulumi.StringMapOutput `pulumi:"fidoU2f"`
	FidoWebauthn pulumi.StringMapOutput `pulumi:"fidoWebauthn"`
	GoogleOtp    pulumi.StringMapOutput `pulumi:"googleOtp"`
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	Hotp            pulumi.StringMapOutput   `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie pulumi.BoolPtrOutput `pulumi:"isOie"`
	// Policy Name
	Name         pulumi.StringOutput    `pulumi:"name"`
	OktaCall     pulumi.StringMapOutput `pulumi:"oktaCall"`
	OktaEmail    pulumi.StringMapOutput `pulumi:"oktaEmail"`
	OktaOtp      pulumi.StringMapOutput `pulumi:"oktaOtp"`
	OktaPassword pulumi.StringMapOutput `pulumi:"oktaPassword"`
	OktaPush     pulumi.StringMapOutput `pulumi:"oktaPush"`
	OktaQuestion pulumi.StringMapOutput `pulumi:"oktaQuestion"`
	OktaSms      pulumi.StringMapOutput `pulumi:"oktaSms"`
	OktaVerify   pulumi.StringMapOutput `pulumi:"oktaVerify"`
	OnpremMfa    pulumi.StringMapOutput `pulumi:"onpremMfa"`
	PhoneNumber  pulumi.StringMapOutput `pulumi:"phoneNumber"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority         pulumi.IntPtrOutput    `pulumi:"priority"`
	RsaToken         pulumi.StringMapOutput `pulumi:"rsaToken"`
	SecurityQuestion pulumi.StringMapOutput `pulumi:"securityQuestion"`
	// Policy Status: ACTIVE or INACTIVE.
	Status       pulumi.StringPtrOutput `pulumi:"status"`
	SymantecVip  pulumi.StringMapOutput `pulumi:"symantecVip"`
	Webauthn     pulumi.StringMapOutput `pulumi:"webauthn"`
	YubikeyToken pulumi.StringMapOutput `pulumi:"yubikeyToken"`
}

// NewMfaPolicy registers a new resource with the given unique name, arguments, and options.
func NewMfaPolicy(ctx *pulumi.Context,
	name string, args *MfaPolicyArgs, opts ...pulumi.ResourceOption) (*MfaPolicy, error) {
	if args == nil {
		args = &MfaPolicyArgs{}
	}

	var resource MfaPolicy
	err := ctx.RegisterResource("okta:deprecated/mfaPolicy:MfaPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaPolicy gets an existing MfaPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaPolicyState, opts ...pulumi.ResourceOption) (*MfaPolicy, error) {
	var resource MfaPolicy
	err := ctx.ReadResource("okta:deprecated/mfaPolicy:MfaPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaPolicy resources.
type mfaPolicyState struct {
	// Policy Description
	Description  *string           `pulumi:"description"`
	Duo          map[string]string `pulumi:"duo"`
	ExternalIdp  map[string]string `pulumi:"externalIdp"`
	FidoU2f      map[string]string `pulumi:"fidoU2f"`
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	GoogleOtp    map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include
	GroupsIncludeds []string          `pulumi:"groupsIncludeds"`
	Hotp            map[string]string `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie *bool `pulumi:"isOie"`
	// Policy Name
	Name         *string           `pulumi:"name"`
	OktaCall     map[string]string `pulumi:"oktaCall"`
	OktaEmail    map[string]string `pulumi:"oktaEmail"`
	OktaOtp      map[string]string `pulumi:"oktaOtp"`
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	OktaPush     map[string]string `pulumi:"oktaPush"`
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	OktaSms      map[string]string `pulumi:"oktaSms"`
	OktaVerify   map[string]string `pulumi:"oktaVerify"`
	OnpremMfa    map[string]string `pulumi:"onpremMfa"`
	PhoneNumber  map[string]string `pulumi:"phoneNumber"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority         *int              `pulumi:"priority"`
	RsaToken         map[string]string `pulumi:"rsaToken"`
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Policy Status: ACTIVE or INACTIVE.
	Status       *string           `pulumi:"status"`
	SymantecVip  map[string]string `pulumi:"symantecVip"`
	Webauthn     map[string]string `pulumi:"webauthn"`
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

type MfaPolicyState struct {
	// Policy Description
	Description  pulumi.StringPtrInput
	Duo          pulumi.StringMapInput
	ExternalIdp  pulumi.StringMapInput
	FidoU2f      pulumi.StringMapInput
	FidoWebauthn pulumi.StringMapInput
	GoogleOtp    pulumi.StringMapInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	Hotp            pulumi.StringMapInput
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie pulumi.BoolPtrInput
	// Policy Name
	Name         pulumi.StringPtrInput
	OktaCall     pulumi.StringMapInput
	OktaEmail    pulumi.StringMapInput
	OktaOtp      pulumi.StringMapInput
	OktaPassword pulumi.StringMapInput
	OktaPush     pulumi.StringMapInput
	OktaQuestion pulumi.StringMapInput
	OktaSms      pulumi.StringMapInput
	OktaVerify   pulumi.StringMapInput
	OnpremMfa    pulumi.StringMapInput
	PhoneNumber  pulumi.StringMapInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority         pulumi.IntPtrInput
	RsaToken         pulumi.StringMapInput
	SecurityQuestion pulumi.StringMapInput
	// Policy Status: ACTIVE or INACTIVE.
	Status       pulumi.StringPtrInput
	SymantecVip  pulumi.StringMapInput
	Webauthn     pulumi.StringMapInput
	YubikeyToken pulumi.StringMapInput
}

func (MfaPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaPolicyState)(nil)).Elem()
}

type mfaPolicyArgs struct {
	// Policy Description
	Description  *string           `pulumi:"description"`
	Duo          map[string]string `pulumi:"duo"`
	ExternalIdp  map[string]string `pulumi:"externalIdp"`
	FidoU2f      map[string]string `pulumi:"fidoU2f"`
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	GoogleOtp    map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include
	GroupsIncludeds []string          `pulumi:"groupsIncludeds"`
	Hotp            map[string]string `pulumi:"hotp"`
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie *bool `pulumi:"isOie"`
	// Policy Name
	Name         *string           `pulumi:"name"`
	OktaCall     map[string]string `pulumi:"oktaCall"`
	OktaEmail    map[string]string `pulumi:"oktaEmail"`
	OktaOtp      map[string]string `pulumi:"oktaOtp"`
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	OktaPush     map[string]string `pulumi:"oktaPush"`
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	OktaSms      map[string]string `pulumi:"oktaSms"`
	OktaVerify   map[string]string `pulumi:"oktaVerify"`
	OnpremMfa    map[string]string `pulumi:"onpremMfa"`
	PhoneNumber  map[string]string `pulumi:"phoneNumber"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority         *int              `pulumi:"priority"`
	RsaToken         map[string]string `pulumi:"rsaToken"`
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Policy Status: ACTIVE or INACTIVE.
	Status       *string           `pulumi:"status"`
	SymantecVip  map[string]string `pulumi:"symantecVip"`
	Webauthn     map[string]string `pulumi:"webauthn"`
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

// The set of arguments for constructing a MfaPolicy resource.
type MfaPolicyArgs struct {
	// Policy Description
	Description  pulumi.StringPtrInput
	Duo          pulumi.StringMapInput
	ExternalIdp  pulumi.StringMapInput
	FidoU2f      pulumi.StringMapInput
	FidoWebauthn pulumi.StringMapInput
	GoogleOtp    pulumi.StringMapInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	Hotp            pulumi.StringMapInput
	// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
	IsOie pulumi.BoolPtrInput
	// Policy Name
	Name         pulumi.StringPtrInput
	OktaCall     pulumi.StringMapInput
	OktaEmail    pulumi.StringMapInput
	OktaOtp      pulumi.StringMapInput
	OktaPassword pulumi.StringMapInput
	OktaPush     pulumi.StringMapInput
	OktaQuestion pulumi.StringMapInput
	OktaSms      pulumi.StringMapInput
	OktaVerify   pulumi.StringMapInput
	OnpremMfa    pulumi.StringMapInput
	PhoneNumber  pulumi.StringMapInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority         pulumi.IntPtrInput
	RsaToken         pulumi.StringMapInput
	SecurityQuestion pulumi.StringMapInput
	// Policy Status: ACTIVE or INACTIVE.
	Status       pulumi.StringPtrInput
	SymantecVip  pulumi.StringMapInput
	Webauthn     pulumi.StringMapInput
	YubikeyToken pulumi.StringMapInput
}

func (MfaPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaPolicyArgs)(nil)).Elem()
}

type MfaPolicyInput interface {
	pulumi.Input

	ToMfaPolicyOutput() MfaPolicyOutput
	ToMfaPolicyOutputWithContext(ctx context.Context) MfaPolicyOutput
}

func (*MfaPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaPolicy)(nil)).Elem()
}

func (i *MfaPolicy) ToMfaPolicyOutput() MfaPolicyOutput {
	return i.ToMfaPolicyOutputWithContext(context.Background())
}

func (i *MfaPolicy) ToMfaPolicyOutputWithContext(ctx context.Context) MfaPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPolicyOutput)
}

// MfaPolicyArrayInput is an input type that accepts MfaPolicyArray and MfaPolicyArrayOutput values.
// You can construct a concrete instance of `MfaPolicyArrayInput` via:
//
//          MfaPolicyArray{ MfaPolicyArgs{...} }
type MfaPolicyArrayInput interface {
	pulumi.Input

	ToMfaPolicyArrayOutput() MfaPolicyArrayOutput
	ToMfaPolicyArrayOutputWithContext(context.Context) MfaPolicyArrayOutput
}

type MfaPolicyArray []MfaPolicyInput

func (MfaPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaPolicy)(nil)).Elem()
}

func (i MfaPolicyArray) ToMfaPolicyArrayOutput() MfaPolicyArrayOutput {
	return i.ToMfaPolicyArrayOutputWithContext(context.Background())
}

func (i MfaPolicyArray) ToMfaPolicyArrayOutputWithContext(ctx context.Context) MfaPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPolicyArrayOutput)
}

// MfaPolicyMapInput is an input type that accepts MfaPolicyMap and MfaPolicyMapOutput values.
// You can construct a concrete instance of `MfaPolicyMapInput` via:
//
//          MfaPolicyMap{ "key": MfaPolicyArgs{...} }
type MfaPolicyMapInput interface {
	pulumi.Input

	ToMfaPolicyMapOutput() MfaPolicyMapOutput
	ToMfaPolicyMapOutputWithContext(context.Context) MfaPolicyMapOutput
}

type MfaPolicyMap map[string]MfaPolicyInput

func (MfaPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaPolicy)(nil)).Elem()
}

func (i MfaPolicyMap) ToMfaPolicyMapOutput() MfaPolicyMapOutput {
	return i.ToMfaPolicyMapOutputWithContext(context.Background())
}

func (i MfaPolicyMap) ToMfaPolicyMapOutputWithContext(ctx context.Context) MfaPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPolicyMapOutput)
}

type MfaPolicyOutput struct{ *pulumi.OutputState }

func (MfaPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaPolicy)(nil)).Elem()
}

func (o MfaPolicyOutput) ToMfaPolicyOutput() MfaPolicyOutput {
	return o
}

func (o MfaPolicyOutput) ToMfaPolicyOutputWithContext(ctx context.Context) MfaPolicyOutput {
	return o
}

// Policy Description
func (o MfaPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MfaPolicyOutput) Duo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.Duo }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) ExternalIdp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.ExternalIdp }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) FidoU2f() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.FidoU2f }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) FidoWebauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.FidoWebauthn }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) GoogleOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.GoogleOtp }).(pulumi.StringMapOutput)
}

// List of Group IDs to Include
func (o MfaPolicyOutput) GroupsIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringArrayOutput { return v.GroupsIncludeds }).(pulumi.StringArrayOutput)
}

func (o MfaPolicyOutput) Hotp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.Hotp }).(pulumi.StringMapOutput)
}

// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
func (o MfaPolicyOutput) IsOie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.BoolPtrOutput { return v.IsOie }).(pulumi.BoolPtrOutput)
}

// Policy Name
func (o MfaPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MfaPolicyOutput) OktaCall() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaCall }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaEmail() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaEmail }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaOtp() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaOtp }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaPassword() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaPassword }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaPush() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaPush }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaQuestion }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaSms() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaSms }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OktaVerify() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OktaVerify }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) OnpremMfa() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.OnpremMfa }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) PhoneNumber() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.PhoneNumber }).(pulumi.StringMapOutput)
}

// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
// priority is provided. API defaults it to the last (lowest) if not there.
func (o MfaPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o MfaPolicyOutput) RsaToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.RsaToken }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) SecurityQuestion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.SecurityQuestion }).(pulumi.StringMapOutput)
}

// Policy Status: ACTIVE or INACTIVE.
func (o MfaPolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o MfaPolicyOutput) SymantecVip() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.SymantecVip }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) Webauthn() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.Webauthn }).(pulumi.StringMapOutput)
}

func (o MfaPolicyOutput) YubikeyToken() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MfaPolicy) pulumi.StringMapOutput { return v.YubikeyToken }).(pulumi.StringMapOutput)
}

type MfaPolicyArrayOutput struct{ *pulumi.OutputState }

func (MfaPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaPolicy)(nil)).Elem()
}

func (o MfaPolicyArrayOutput) ToMfaPolicyArrayOutput() MfaPolicyArrayOutput {
	return o
}

func (o MfaPolicyArrayOutput) ToMfaPolicyArrayOutputWithContext(ctx context.Context) MfaPolicyArrayOutput {
	return o
}

func (o MfaPolicyArrayOutput) Index(i pulumi.IntInput) MfaPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaPolicy {
		return vs[0].([]*MfaPolicy)[vs[1].(int)]
	}).(MfaPolicyOutput)
}

type MfaPolicyMapOutput struct{ *pulumi.OutputState }

func (MfaPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaPolicy)(nil)).Elem()
}

func (o MfaPolicyMapOutput) ToMfaPolicyMapOutput() MfaPolicyMapOutput {
	return o
}

func (o MfaPolicyMapOutput) ToMfaPolicyMapOutputWithContext(ctx context.Context) MfaPolicyMapOutput {
	return o
}

func (o MfaPolicyMapOutput) MapIndex(k pulumi.StringInput) MfaPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaPolicy {
		return vs[0].(map[string]*MfaPolicy)[vs[1].(string)]
	}).(MfaPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPolicyInput)(nil)).Elem(), &MfaPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPolicyArrayInput)(nil)).Elem(), MfaPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPolicyMapInput)(nil)).Elem(), MfaPolicyMap{})
	pulumi.RegisterOutputType(MfaPolicyOutput{})
	pulumi.RegisterOutputType(MfaPolicyArrayOutput{})
	pulumi.RegisterOutputType(MfaPolicyMapOutput{})
}
