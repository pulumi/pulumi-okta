// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package deprecated

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SamlApp struct {
	pulumi.CustomResourceState

	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrOutput `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrOutput                 `pulumi:"assertionSigned"`
	AttributeStatements SamlAppAttributeStatementArrayOutput `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience pulumi.StringPtrOutput `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrOutput `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrOutput `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrOutput `pulumi:"digestAlgorithm"`
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringOutput `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringOutput `pulumi:"entityUrl"`
	// features to enable
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// Groups associated with the application
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrOutput `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringOutput `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringOutput `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrOutput `pulumi:"idpIssuer"`
	// Certificate ID
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrOutput `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label pulumi.StringOutput `pulumi:"label"`
	// SAML xml metadata payload
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// name of app.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrOutput `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrOutput `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrOutput `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrOutput `pulumi:"responseSigned"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrOutput `pulumi:"signatureAlgorithm"`
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrOutput `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl pulumi.StringPtrOutput `pulumi:"ssoUrl"`
	// Status of application.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrOutput `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrOutput `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Users associated with the application
	Users SamlAppUserArrayOutput `pulumi:"users"`
}

// NewSamlApp registers a new resource with the given unique name, arguments, and options.
func NewSamlApp(ctx *pulumi.Context,
	name string, args *SamlAppArgs, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil {
		args = &SamlAppArgs{}
	}
	var resource SamlApp
	err := ctx.RegisterResource("okta:deprecated/samlApp:SamlApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlApp gets an existing SamlApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlAppState, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	var resource SamlApp
	err := ctx.ReadResource("okta:deprecated/samlApp:SamlApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlApp resources.
type samlAppState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                       `pulumi:"assertionSigned"`
	AttributeStatements []SamlAppAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate *string `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Entity ID, the ID portion of the entity_url
	EntityKey *string `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl *string `pulumi:"entityUrl"`
	// features to enable
	Features []string `pulumi:"features"`
	// Groups associated with the application
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding *string `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding *string `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Certificate ID
	KeyId *string `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label *string `pulumi:"label"`
	// SAML xml metadata payload
	Metadata *string `pulumi:"metadata"`
	// name of app.
	Name *string `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application
	Users []SamlAppUser `pulumi:"users"`
}

type SamlAppState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAppAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// cert from SAML XML metadata payload
	Certificate pulumi.StringPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringPtrInput
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringPtrInput
	// features to enable
	Features pulumi.StringArrayInput
	// Groups associated with the application
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// Certificate ID
	KeyId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Pretty name of app.
	Label pulumi.StringPtrInput
	// SAML xml metadata payload
	Metadata pulumi.StringPtrInput
	// name of app.
	Name pulumi.StringPtrInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application
	Users SamlAppUserArrayInput
}

func (SamlAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppState)(nil)).Elem()
}

type samlAppArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                       `pulumi:"assertionSigned"`
	AttributeStatements []SamlAppAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// features to enable
	Features []string `pulumi:"features"`
	// Groups associated with the application
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label string `pulumi:"label"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application
	Users []SamlAppUser `pulumi:"users"`
}

// The set of arguments for constructing a SamlApp resource.
type SamlAppArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAppAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// features to enable
	Features pulumi.StringArrayInput
	// Groups associated with the application
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Pretty name of app.
	Label pulumi.StringInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application
	Users SamlAppUserArrayInput
}

func (SamlAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppArgs)(nil)).Elem()
}
