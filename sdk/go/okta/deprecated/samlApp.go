// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SamlApp struct {
	pulumi.CustomResourceState

	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrOutput `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrOutput `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayOutput `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote pulumi.StringPtrOutput `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrOutput `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrOutput `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrOutput                 `pulumi:"assertionSigned"`
	AttributeStatements SamlAppAttributeStatementArrayOutput `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience pulumi.StringPtrOutput `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrOutput `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrOutput `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrOutput `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrOutput `pulumi:"digestAlgorithm"`
	// Application notes for end users.
	EnduserNote pulumi.StringPtrOutput `pulumi:"enduserNote"`
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringOutput `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringOutput `pulumi:"entityUrl"`
	// features to enable
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// Groups associated with the application
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrOutput `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrOutput `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrOutput `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringOutput `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringOutput `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrOutput `pulumi:"idpIssuer"`
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrOutput `pulumi:"inlineHookId"`
	// Certificate ID
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrOutput `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label pulumi.StringOutput `pulumi:"label"`
	// Local path to logo of the application.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// SAML xml metadata payload
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// SAML xml metadata URL
	MetadataUrl pulumi.StringOutput `pulumi:"metadataUrl"`
	// Name of the app.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrOutput `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrOutput `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrOutput `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrOutput `pulumi:"responseSigned"`
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrOutput `pulumi:"samlVersion"`
	// Sign on mode of application.
	SignOnMode pulumi.StringOutput `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrOutput `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrOutput `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrOutput `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrOutput `pulumi:"singleLogoutUrl"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	SkipGroups pulumi.BoolPtrOutput `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	SkipUsers pulumi.BoolPtrOutput `pulumi:"skipUsers"`
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrOutput `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl pulumi.StringPtrOutput `pulumi:"ssoUrl"`
	// Status of application.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrOutput `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrOutput `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate pulumi.StringPtrOutput `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrOutput `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType pulumi.StringPtrOutput `pulumi:"userNameTemplateType"`
	// Users associated with the application
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SamlAppUserArrayOutput `pulumi:"users"`
}

// NewSamlApp registers a new resource with the given unique name, arguments, and options.
func NewSamlApp(ctx *pulumi.Context,
	name string, args *SamlAppArgs, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	var resource SamlApp
	err := ctx.RegisterResource("okta:deprecated/samlApp:SamlApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlApp gets an existing SamlApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlAppState, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	var resource SamlApp
	err := ctx.ReadResource("okta:deprecated/samlApp:SamlApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlApp resources.
type samlAppState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                       `pulumi:"assertionSigned"`
	AttributeStatements []SamlAppAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// cert from SAML XML metadata payload
	Certificate *string `pulumi:"certificate"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// Entity ID, the ID portion of the entity_url
	EntityKey *string `pulumi:"entityKey"`
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl *string `pulumi:"entityUrl"`
	// features to enable
	Features []string `pulumi:"features"`
	// Groups associated with the application
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding *string `pulumi:"httpPostBinding"`
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding *string `pulumi:"httpRedirectBinding"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Saml Inline Hook setting
	InlineHookId *string `pulumi:"inlineHookId"`
	// Certificate ID
	KeyId *string `pulumi:"keyId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label *string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// URL of the application's logo
	LogoUrl *string `pulumi:"logoUrl"`
	// SAML xml metadata payload
	Metadata *string `pulumi:"metadata"`
	// SAML xml metadata URL
	MetadataUrl *string `pulumi:"metadataUrl"`
	// Name of the app.
	Name *string `pulumi:"name"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// SAML version for the app's sign-on mode
	SamlVersion *string `pulumi:"samlVersion"`
	// Sign on mode of application.
	SignOnMode *string `pulumi:"signOnMode"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	SkipGroups *bool `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	SkipUsers *bool `pulumi:"skipUsers"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users []SamlAppUser `pulumi:"users"`
}

type SamlAppState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAppAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// cert from SAML XML metadata payload
	Certificate pulumi.StringPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// Entity ID, the ID portion of the entity_url
	EntityKey pulumi.StringPtrInput
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl pulumi.StringPtrInput
	// features to enable
	Features pulumi.StringArrayInput
	// Groups associated with the application
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding pulumi.StringPtrInput
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding pulumi.StringPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrInput
	// Certificate ID
	KeyId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Pretty name of app.
	Label pulumi.StringPtrInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// URL of the application's logo
	LogoUrl pulumi.StringPtrInput
	// SAML xml metadata payload
	Metadata pulumi.StringPtrInput
	// SAML xml metadata URL
	MetadataUrl pulumi.StringPtrInput
	// Name of the app.
	Name pulumi.StringPtrInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrInput
	// Sign on mode of application.
	SignOnMode pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrInput
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	SkipGroups pulumi.BoolPtrInput
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	SkipUsers pulumi.BoolPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SamlAppUserArrayInput
}

func (SamlAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppState)(nil)).Elem()
}

type samlAppArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl *string `pulumi:"accessibilityErrorRedirectUrl"`
	// Custom login page URL
	AccessibilityLoginRedirectUrl *string `pulumi:"accessibilityLoginRedirectUrl"`
	// Enable self service
	AccessibilitySelfService *bool `pulumi:"accessibilitySelfService"`
	// List of ACS endpoints for this SAML application
	AcsEndpoints []string `pulumi:"acsEndpoints"`
	// Application notes for admins.
	AdminNote *string `pulumi:"adminNote"`
	// Displays specific appLinks for the app
	AppLinksJson *string `pulumi:"appLinksJson"`
	// Application settings in JSON format
	AppSettingsJson *string `pulumi:"appSettingsJson"`
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     *bool                       `pulumi:"assertionSigned"`
	AttributeStatements []SamlAppAttributeStatement `pulumi:"attributeStatements"`
	// Audience Restriction
	Audience *string `pulumi:"audience"`
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef *string `pulumi:"authnContextClassRef"`
	// Display auto submit toolbar
	AutoSubmitToolbar *bool `pulumi:"autoSubmitToolbar"`
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination *string `pulumi:"destination"`
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Application notes for end users.
	EnduserNote *string `pulumi:"enduserNote"`
	// features to enable
	Features []string `pulumi:"features"`
	// Groups associated with the application
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups []string `pulumi:"groups"`
	// Do not display application icon on mobile app
	HideIos *bool `pulumi:"hideIos"`
	// Do not display application icon to users
	HideWeb *bool `pulumi:"hideWeb"`
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn *bool `pulumi:"honorForceAuthn"`
	// SAML issuer ID
	IdpIssuer *string `pulumi:"idpIssuer"`
	// Saml Inline Hook setting
	InlineHookId *string `pulumi:"inlineHookId"`
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName *string `pulumi:"keyName"`
	// Number of years the certificate is valid.
	KeyYearsValid *int `pulumi:"keyYearsValid"`
	// Pretty name of app.
	Label string `pulumi:"label"`
	// Local path to logo of the application.
	Logo *string `pulumi:"logo"`
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp *string `pulumi:"preconfiguredApp"`
	// The location where the app may present the SAML assertion
	Recipient *string `pulumi:"recipient"`
	// Denotes whether the request is compressed or not.
	RequestCompressed *bool `pulumi:"requestCompressed"`
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned *bool `pulumi:"responseSigned"`
	// SAML version for the app's sign-on mode
	SamlVersion *string `pulumi:"samlVersion"`
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate *string `pulumi:"singleLogoutCertificate"`
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer *string `pulumi:"singleLogoutIssuer"`
	// The location where the logout response is sent
	SingleLogoutUrl *string `pulumi:"singleLogoutUrl"`
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	SkipGroups *bool `pulumi:"skipGroups"`
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	SkipUsers *bool `pulumi:"skipUsers"`
	// SAML SP issuer ID
	SpIssuer *string `pulumi:"spIssuer"`
	// Single Sign On URL
	SsoUrl *string `pulumi:"ssoUrl"`
	// Status of application.
	Status *string `pulumi:"status"`
	// Identifies the SAML processing rules.
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate *string `pulumi:"subjectNameIdTemplate"`
	// Username template
	UserNameTemplate *string `pulumi:"userNameTemplate"`
	// Username template suffix
	UserNameTemplateSuffix *string `pulumi:"userNameTemplateSuffix"`
	// Username template type
	UserNameTemplateType *string `pulumi:"userNameTemplateType"`
	// Users associated with the application
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users []SamlAppUser `pulumi:"users"`
}

// The set of arguments for constructing a SamlApp resource.
type SamlAppArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl pulumi.StringPtrInput
	// Custom login page URL
	AccessibilityLoginRedirectUrl pulumi.StringPtrInput
	// Enable self service
	AccessibilitySelfService pulumi.BoolPtrInput
	// List of ACS endpoints for this SAML application
	AcsEndpoints pulumi.StringArrayInput
	// Application notes for admins.
	AdminNote pulumi.StringPtrInput
	// Displays specific appLinks for the app
	AppLinksJson pulumi.StringPtrInput
	// Application settings in JSON format
	AppSettingsJson pulumi.StringPtrInput
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned     pulumi.BoolPtrInput
	AttributeStatements SamlAppAttributeStatementArrayInput
	// Audience Restriction
	Audience pulumi.StringPtrInput
	// Identifies the SAML authentication context class for the assertion’s authentication statement
	AuthnContextClassRef pulumi.StringPtrInput
	// Display auto submit toolbar
	AutoSubmitToolbar pulumi.BoolPtrInput
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState pulumi.StringPtrInput
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination pulumi.StringPtrInput
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm pulumi.StringPtrInput
	// Application notes for end users.
	EnduserNote pulumi.StringPtrInput
	// features to enable
	Features pulumi.StringArrayInput
	// Groups associated with the application
	//
	// Deprecated: The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
	Groups pulumi.StringArrayInput
	// Do not display application icon on mobile app
	HideIos pulumi.BoolPtrInput
	// Do not display application icon to users
	HideWeb pulumi.BoolPtrInput
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn pulumi.BoolPtrInput
	// SAML issuer ID
	IdpIssuer pulumi.StringPtrInput
	// Saml Inline Hook setting
	InlineHookId pulumi.StringPtrInput
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName pulumi.StringPtrInput
	// Number of years the certificate is valid.
	KeyYearsValid pulumi.IntPtrInput
	// Pretty name of app.
	Label pulumi.StringInput
	// Local path to logo of the application.
	Logo pulumi.StringPtrInput
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp pulumi.StringPtrInput
	// The location where the app may present the SAML assertion
	Recipient pulumi.StringPtrInput
	// Denotes whether the request is compressed or not.
	RequestCompressed pulumi.BoolPtrInput
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned pulumi.BoolPtrInput
	// SAML version for the app's sign-on mode
	SamlVersion pulumi.StringPtrInput
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm pulumi.StringPtrInput
	// x509 encoded certificate that the Service Provider uses to sign Single Logout requests
	SingleLogoutCertificate pulumi.StringPtrInput
	// The issuer of the Service Provider that generates the Single Logout request
	SingleLogoutIssuer pulumi.StringPtrInput
	// The location where the logout response is sent
	SingleLogoutUrl pulumi.StringPtrInput
	// Ignore groups sync. This is a temporary solution until 'groups' field is supported in all the app-like resources
	SkipGroups pulumi.BoolPtrInput
	// Ignore users sync. This is a temporary solution until 'users' field is supported in all the app-like resources
	SkipUsers pulumi.BoolPtrInput
	// SAML SP issuer ID
	SpIssuer pulumi.StringPtrInput
	// Single Sign On URL
	SsoUrl pulumi.StringPtrInput
	// Status of application.
	Status pulumi.StringPtrInput
	// Identifies the SAML processing rules.
	SubjectNameIdFormat pulumi.StringPtrInput
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate pulumi.StringPtrInput
	// Username template
	UserNameTemplate pulumi.StringPtrInput
	// Username template suffix
	UserNameTemplateSuffix pulumi.StringPtrInput
	// Username template type
	UserNameTemplateType pulumi.StringPtrInput
	// Users associated with the application
	//
	// Deprecated: The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
	Users SamlAppUserArrayInput
}

func (SamlAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppArgs)(nil)).Elem()
}

type SamlAppInput interface {
	pulumi.Input

	ToSamlAppOutput() SamlAppOutput
	ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput
}

func (*SamlApp) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlApp)(nil))
}

func (i *SamlApp) ToSamlAppOutput() SamlAppOutput {
	return i.ToSamlAppOutputWithContext(context.Background())
}

func (i *SamlApp) ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppOutput)
}

func (i *SamlApp) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return i.ToSamlAppPtrOutputWithContext(context.Background())
}

func (i *SamlApp) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppPtrOutput)
}

type SamlAppPtrInput interface {
	pulumi.Input

	ToSamlAppPtrOutput() SamlAppPtrOutput
	ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput
}

type samlAppPtrType SamlAppArgs

func (*samlAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlApp)(nil))
}

func (i *samlAppPtrType) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return i.ToSamlAppPtrOutputWithContext(context.Background())
}

func (i *samlAppPtrType) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppPtrOutput)
}

// SamlAppArrayInput is an input type that accepts SamlAppArray and SamlAppArrayOutput values.
// You can construct a concrete instance of `SamlAppArrayInput` via:
//
//          SamlAppArray{ SamlAppArgs{...} }
type SamlAppArrayInput interface {
	pulumi.Input

	ToSamlAppArrayOutput() SamlAppArrayOutput
	ToSamlAppArrayOutputWithContext(context.Context) SamlAppArrayOutput
}

type SamlAppArray []SamlAppInput

func (SamlAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlApp)(nil)).Elem()
}

func (i SamlAppArray) ToSamlAppArrayOutput() SamlAppArrayOutput {
	return i.ToSamlAppArrayOutputWithContext(context.Background())
}

func (i SamlAppArray) ToSamlAppArrayOutputWithContext(ctx context.Context) SamlAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppArrayOutput)
}

// SamlAppMapInput is an input type that accepts SamlAppMap and SamlAppMapOutput values.
// You can construct a concrete instance of `SamlAppMapInput` via:
//
//          SamlAppMap{ "key": SamlAppArgs{...} }
type SamlAppMapInput interface {
	pulumi.Input

	ToSamlAppMapOutput() SamlAppMapOutput
	ToSamlAppMapOutputWithContext(context.Context) SamlAppMapOutput
}

type SamlAppMap map[string]SamlAppInput

func (SamlAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlApp)(nil)).Elem()
}

func (i SamlAppMap) ToSamlAppMapOutput() SamlAppMapOutput {
	return i.ToSamlAppMapOutputWithContext(context.Background())
}

func (i SamlAppMap) ToSamlAppMapOutputWithContext(ctx context.Context) SamlAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppMapOutput)
}

type SamlAppOutput struct{ *pulumi.OutputState }

func (SamlAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlApp)(nil))
}

func (o SamlAppOutput) ToSamlAppOutput() SamlAppOutput {
	return o
}

func (o SamlAppOutput) ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput {
	return o
}

func (o SamlAppOutput) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return o.ToSamlAppPtrOutputWithContext(context.Background())
}

func (o SamlAppOutput) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamlApp) *SamlApp {
		return &v
	}).(SamlAppPtrOutput)
}

type SamlAppPtrOutput struct{ *pulumi.OutputState }

func (SamlAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlApp)(nil))
}

func (o SamlAppPtrOutput) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return o
}

func (o SamlAppPtrOutput) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return o
}

func (o SamlAppPtrOutput) Elem() SamlAppOutput {
	return o.ApplyT(func(v *SamlApp) SamlApp {
		if v != nil {
			return *v
		}
		var ret SamlApp
		return ret
	}).(SamlAppOutput)
}

type SamlAppArrayOutput struct{ *pulumi.OutputState }

func (SamlAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlApp)(nil))
}

func (o SamlAppArrayOutput) ToSamlAppArrayOutput() SamlAppArrayOutput {
	return o
}

func (o SamlAppArrayOutput) ToSamlAppArrayOutputWithContext(ctx context.Context) SamlAppArrayOutput {
	return o
}

func (o SamlAppArrayOutput) Index(i pulumi.IntInput) SamlAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlApp {
		return vs[0].([]SamlApp)[vs[1].(int)]
	}).(SamlAppOutput)
}

type SamlAppMapOutput struct{ *pulumi.OutputState }

func (SamlAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SamlApp)(nil))
}

func (o SamlAppMapOutput) ToSamlAppMapOutput() SamlAppMapOutput {
	return o
}

func (o SamlAppMapOutput) ToSamlAppMapOutputWithContext(ctx context.Context) SamlAppMapOutput {
	return o
}

func (o SamlAppMapOutput) MapIndex(k pulumi.StringInput) SamlAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SamlApp {
		return vs[0].(map[string]SamlApp)[vs[1].(string)]
	}).(SamlAppOutput)
}

func init() {
	pulumi.RegisterOutputType(SamlAppOutput{})
	pulumi.RegisterOutputType(SamlAppPtrOutput{})
	pulumi.RegisterOutputType(SamlAppArrayOutput{})
	pulumi.RegisterOutputType(SamlAppMapOutput{})
}
