// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PasswordPolicyRule struct {
	pulumi.CustomResourceState

	// Policy Rule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW
	PasswordChange pulumi.StringPtrOutput `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default = DENY
	PasswordUnlock pulumi.StringPtrOutput `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	Policyid pulumi.StringOutput `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewPasswordPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicyRule(ctx *pulumi.Context,
	name string, args *PasswordPolicyRuleArgs, opts ...pulumi.ResourceOption) (*PasswordPolicyRule, error) {
	if args == nil || args.Policyid == nil {
		return nil, errors.New("missing required argument 'Policyid'")
	}
	if args == nil {
		args = &PasswordPolicyRuleArgs{}
	}
	var resource PasswordPolicyRule
	err := ctx.RegisterResource("okta:deprecated/passwordPolicyRule:PasswordPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicyRule gets an existing PasswordPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyRuleState, opts ...pulumi.ResourceOption) (*PasswordPolicyRule, error) {
	var resource PasswordPolicyRule
	err := ctx.ReadResource("okta:deprecated/passwordPolicyRule:PasswordPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicyRule resources.
type passwordPolicyRuleState struct {
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW
	PasswordChange *string `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW
	PasswordReset *string `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default = DENY
	PasswordUnlock *string `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	Policyid *string `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type PasswordPolicyRuleState struct {
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes pulumi.StringArrayInput
	// Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW
	PasswordChange pulumi.StringPtrInput
	// Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW
	PasswordReset pulumi.StringPtrInput
	// Allow or deny a user to unlock. Default = DENY
	PasswordUnlock pulumi.StringPtrInput
	// Policy ID of the Rule
	Policyid pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (PasswordPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyRuleState)(nil)).Elem()
}

type passwordPolicyRuleArgs struct {
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW
	PasswordChange *string `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW
	PasswordReset *string `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default = DENY
	PasswordUnlock *string `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	Policyid string `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a PasswordPolicyRule resource.
type PasswordPolicyRuleArgs struct {
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes pulumi.StringArrayInput
	// Allow or deny a user to change their password: ALLOW or DENY. Default = ALLOW
	PasswordChange pulumi.StringPtrInput
	// Allow or deny a user to reset their password: ALLOW or DENY. Default = ALLOW
	PasswordReset pulumi.StringPtrInput
	// Allow or deny a user to unlock. Default = DENY
	PasswordUnlock pulumi.StringPtrInput
	// Policy ID of the Rule
	Policyid pulumi.StringInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (PasswordPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyRuleArgs)(nil)).Elem()
}
