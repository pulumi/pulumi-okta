// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Deprecated. Use idp.Saml instead. This resource will be removed in version 4.0 of this provider.
type SamlIdp struct {
	pulumi.CustomResourceState

	AccountLinkAction        pulumi.StringPtrOutput   `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes pulumi.StringArrayOutput `pulumi:"accountLinkGroupIncludes"`
	// Deprecated: This property will be removed in the future, as it can only be set to 'HTTP-POST'
	AcsBinding          pulumi.StringPtrOutput   `pulumi:"acsBinding"`
	AcsType             pulumi.StringPtrOutput   `pulumi:"acsType"`
	Audience            pulumi.StringOutput      `pulumi:"audience"`
	DeprovisionedAction pulumi.StringPtrOutput   `pulumi:"deprovisionedAction"`
	GroupsAction        pulumi.StringPtrOutput   `pulumi:"groupsAction"`
	GroupsAssignments   pulumi.StringArrayOutput `pulumi:"groupsAssignments"`
	GroupsAttribute     pulumi.StringPtrOutput   `pulumi:"groupsAttribute"`
	GroupsFilters       pulumi.StringArrayOutput `pulumi:"groupsFilters"`
	Issuer              pulumi.StringOutput      `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrOutput `pulumi:"issuerMode"`
	Kid          pulumi.StringOutput    `pulumi:"kid"`
	MaxClockSkew pulumi.IntPtrOutput    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               pulumi.StringOutput    `pulumi:"name"`
	NameFormat         pulumi.StringPtrOutput `pulumi:"nameFormat"`
	ProfileMaster      pulumi.BoolPtrOutput   `pulumi:"profileMaster"`
	ProvisioningAction pulumi.StringPtrOutput `pulumi:"provisioningAction"`
	// algorithm to use to sign requests
	RequestSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"requestSignatureAlgorithm"`
	// algorithm to use to sign response
	RequestSignatureScope pulumi.StringPtrOutput `pulumi:"requestSignatureScope"`
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"responseSignatureAlgorithm"`
	// algorithm to use to sign response
	ResponseSignatureScope pulumi.StringPtrOutput   `pulumi:"responseSignatureScope"`
	SsoBinding             pulumi.StringPtrOutput   `pulumi:"ssoBinding"`
	SsoDestination         pulumi.StringPtrOutput   `pulumi:"ssoDestination"`
	SsoUrl                 pulumi.StringOutput      `pulumi:"ssoUrl"`
	Status                 pulumi.StringPtrOutput   `pulumi:"status"`
	SubjectFilter          pulumi.StringPtrOutput   `pulumi:"subjectFilter"`
	SubjectFormats         pulumi.StringArrayOutput `pulumi:"subjectFormats"`
	SubjectMatchAttribute  pulumi.StringPtrOutput   `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       pulumi.StringPtrOutput   `pulumi:"subjectMatchType"`
	SuspendedAction        pulumi.StringPtrOutput   `pulumi:"suspendedAction"`
	Type                   pulumi.StringOutput      `pulumi:"type"`
	UserTypeId             pulumi.StringOutput      `pulumi:"userTypeId"`
	UsernameTemplate       pulumi.StringPtrOutput   `pulumi:"usernameTemplate"`
}

// NewSamlIdp registers a new resource with the given unique name, arguments, and options.
func NewSamlIdp(ctx *pulumi.Context,
	name string, args *SamlIdpArgs, opts ...pulumi.ResourceOption) (*SamlIdp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.Kid == nil {
		return nil, errors.New("invalid value for required argument 'Kid'")
	}
	if args.SsoUrl == nil {
		return nil, errors.New("invalid value for required argument 'SsoUrl'")
	}
	var resource SamlIdp
	err := ctx.RegisterResource("okta:deprecated/samlIdp:SamlIdp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlIdp gets an existing SamlIdp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlIdp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlIdpState, opts ...pulumi.ResourceOption) (*SamlIdp, error) {
	var resource SamlIdp
	err := ctx.ReadResource("okta:deprecated/samlIdp:SamlIdp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlIdp resources.
type samlIdpState struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// Deprecated: This property will be removed in the future, as it can only be set to 'HTTP-POST'
	AcsBinding          *string  `pulumi:"acsBinding"`
	AcsType             *string  `pulumi:"acsType"`
	Audience            *string  `pulumi:"audience"`
	DeprovisionedAction *string  `pulumi:"deprovisionedAction"`
	GroupsAction        *string  `pulumi:"groupsAction"`
	GroupsAssignments   []string `pulumi:"groupsAssignments"`
	GroupsAttribute     *string  `pulumi:"groupsAttribute"`
	GroupsFilters       []string `pulumi:"groupsFilters"`
	Issuer              *string  `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	Kid          *string `pulumi:"kid"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	NameFormat         *string `pulumi:"nameFormat"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// algorithm to use to sign requests
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// algorithm to use to sign response
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// algorithm to use to sign response
	ResponseSignatureScope *string  `pulumi:"responseSignatureScope"`
	SsoBinding             *string  `pulumi:"ssoBinding"`
	SsoDestination         *string  `pulumi:"ssoDestination"`
	SsoUrl                 *string  `pulumi:"ssoUrl"`
	Status                 *string  `pulumi:"status"`
	SubjectFilter          *string  `pulumi:"subjectFilter"`
	SubjectFormats         []string `pulumi:"subjectFormats"`
	SubjectMatchAttribute  *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       *string  `pulumi:"subjectMatchType"`
	SuspendedAction        *string  `pulumi:"suspendedAction"`
	Type                   *string  `pulumi:"type"`
	UserTypeId             *string  `pulumi:"userTypeId"`
	UsernameTemplate       *string  `pulumi:"usernameTemplate"`
}

type SamlIdpState struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// Deprecated: This property will be removed in the future, as it can only be set to 'HTTP-POST'
	AcsBinding          pulumi.StringPtrInput
	AcsType             pulumi.StringPtrInput
	Audience            pulumi.StringPtrInput
	DeprovisionedAction pulumi.StringPtrInput
	GroupsAction        pulumi.StringPtrInput
	GroupsAssignments   pulumi.StringArrayInput
	GroupsAttribute     pulumi.StringPtrInput
	GroupsFilters       pulumi.StringArrayInput
	Issuer              pulumi.StringPtrInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	Kid          pulumi.StringPtrInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	NameFormat         pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// algorithm to use to sign requests
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// algorithm to use to sign response
	RequestSignatureScope pulumi.StringPtrInput
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// algorithm to use to sign response
	ResponseSignatureScope pulumi.StringPtrInput
	SsoBinding             pulumi.StringPtrInput
	SsoDestination         pulumi.StringPtrInput
	SsoUrl                 pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	SubjectFilter          pulumi.StringPtrInput
	SubjectFormats         pulumi.StringArrayInput
	SubjectMatchAttribute  pulumi.StringPtrInput
	SubjectMatchType       pulumi.StringPtrInput
	SuspendedAction        pulumi.StringPtrInput
	Type                   pulumi.StringPtrInput
	UserTypeId             pulumi.StringPtrInput
	UsernameTemplate       pulumi.StringPtrInput
}

func (SamlIdpState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlIdpState)(nil)).Elem()
}

type samlIdpArgs struct {
	AccountLinkAction        *string  `pulumi:"accountLinkAction"`
	AccountLinkGroupIncludes []string `pulumi:"accountLinkGroupIncludes"`
	// Deprecated: This property will be removed in the future, as it can only be set to 'HTTP-POST'
	AcsBinding          *string  `pulumi:"acsBinding"`
	AcsType             *string  `pulumi:"acsType"`
	DeprovisionedAction *string  `pulumi:"deprovisionedAction"`
	GroupsAction        *string  `pulumi:"groupsAction"`
	GroupsAssignments   []string `pulumi:"groupsAssignments"`
	GroupsAttribute     *string  `pulumi:"groupsAttribute"`
	GroupsFilters       []string `pulumi:"groupsFilters"`
	Issuer              string   `pulumi:"issuer"`
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   *string `pulumi:"issuerMode"`
	Kid          string  `pulumi:"kid"`
	MaxClockSkew *int    `pulumi:"maxClockSkew"`
	// Name of the IdP
	Name               *string `pulumi:"name"`
	NameFormat         *string `pulumi:"nameFormat"`
	ProfileMaster      *bool   `pulumi:"profileMaster"`
	ProvisioningAction *string `pulumi:"provisioningAction"`
	// algorithm to use to sign requests
	RequestSignatureAlgorithm *string `pulumi:"requestSignatureAlgorithm"`
	// algorithm to use to sign response
	RequestSignatureScope *string `pulumi:"requestSignatureScope"`
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm *string `pulumi:"responseSignatureAlgorithm"`
	// algorithm to use to sign response
	ResponseSignatureScope *string  `pulumi:"responseSignatureScope"`
	SsoBinding             *string  `pulumi:"ssoBinding"`
	SsoDestination         *string  `pulumi:"ssoDestination"`
	SsoUrl                 string   `pulumi:"ssoUrl"`
	Status                 *string  `pulumi:"status"`
	SubjectFilter          *string  `pulumi:"subjectFilter"`
	SubjectFormats         []string `pulumi:"subjectFormats"`
	SubjectMatchAttribute  *string  `pulumi:"subjectMatchAttribute"`
	SubjectMatchType       *string  `pulumi:"subjectMatchType"`
	SuspendedAction        *string  `pulumi:"suspendedAction"`
	UsernameTemplate       *string  `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a SamlIdp resource.
type SamlIdpArgs struct {
	AccountLinkAction        pulumi.StringPtrInput
	AccountLinkGroupIncludes pulumi.StringArrayInput
	// Deprecated: This property will be removed in the future, as it can only be set to 'HTTP-POST'
	AcsBinding          pulumi.StringPtrInput
	AcsType             pulumi.StringPtrInput
	DeprovisionedAction pulumi.StringPtrInput
	GroupsAction        pulumi.StringPtrInput
	GroupsAssignments   pulumi.StringArrayInput
	GroupsAttribute     pulumi.StringPtrInput
	GroupsFilters       pulumi.StringArrayInput
	Issuer              pulumi.StringInput
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode   pulumi.StringPtrInput
	Kid          pulumi.StringInput
	MaxClockSkew pulumi.IntPtrInput
	// Name of the IdP
	Name               pulumi.StringPtrInput
	NameFormat         pulumi.StringPtrInput
	ProfileMaster      pulumi.BoolPtrInput
	ProvisioningAction pulumi.StringPtrInput
	// algorithm to use to sign requests
	RequestSignatureAlgorithm pulumi.StringPtrInput
	// algorithm to use to sign response
	RequestSignatureScope pulumi.StringPtrInput
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm pulumi.StringPtrInput
	// algorithm to use to sign response
	ResponseSignatureScope pulumi.StringPtrInput
	SsoBinding             pulumi.StringPtrInput
	SsoDestination         pulumi.StringPtrInput
	SsoUrl                 pulumi.StringInput
	Status                 pulumi.StringPtrInput
	SubjectFilter          pulumi.StringPtrInput
	SubjectFormats         pulumi.StringArrayInput
	SubjectMatchAttribute  pulumi.StringPtrInput
	SubjectMatchType       pulumi.StringPtrInput
	SuspendedAction        pulumi.StringPtrInput
	UsernameTemplate       pulumi.StringPtrInput
}

func (SamlIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlIdpArgs)(nil)).Elem()
}

type SamlIdpInput interface {
	pulumi.Input

	ToSamlIdpOutput() SamlIdpOutput
	ToSamlIdpOutputWithContext(ctx context.Context) SamlIdpOutput
}

func (*SamlIdp) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlIdp)(nil)).Elem()
}

func (i *SamlIdp) ToSamlIdpOutput() SamlIdpOutput {
	return i.ToSamlIdpOutputWithContext(context.Background())
}

func (i *SamlIdp) ToSamlIdpOutputWithContext(ctx context.Context) SamlIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpOutput)
}

// SamlIdpArrayInput is an input type that accepts SamlIdpArray and SamlIdpArrayOutput values.
// You can construct a concrete instance of `SamlIdpArrayInput` via:
//
//          SamlIdpArray{ SamlIdpArgs{...} }
type SamlIdpArrayInput interface {
	pulumi.Input

	ToSamlIdpArrayOutput() SamlIdpArrayOutput
	ToSamlIdpArrayOutputWithContext(context.Context) SamlIdpArrayOutput
}

type SamlIdpArray []SamlIdpInput

func (SamlIdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlIdp)(nil)).Elem()
}

func (i SamlIdpArray) ToSamlIdpArrayOutput() SamlIdpArrayOutput {
	return i.ToSamlIdpArrayOutputWithContext(context.Background())
}

func (i SamlIdpArray) ToSamlIdpArrayOutputWithContext(ctx context.Context) SamlIdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpArrayOutput)
}

// SamlIdpMapInput is an input type that accepts SamlIdpMap and SamlIdpMapOutput values.
// You can construct a concrete instance of `SamlIdpMapInput` via:
//
//          SamlIdpMap{ "key": SamlIdpArgs{...} }
type SamlIdpMapInput interface {
	pulumi.Input

	ToSamlIdpMapOutput() SamlIdpMapOutput
	ToSamlIdpMapOutputWithContext(context.Context) SamlIdpMapOutput
}

type SamlIdpMap map[string]SamlIdpInput

func (SamlIdpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlIdp)(nil)).Elem()
}

func (i SamlIdpMap) ToSamlIdpMapOutput() SamlIdpMapOutput {
	return i.ToSamlIdpMapOutputWithContext(context.Background())
}

func (i SamlIdpMap) ToSamlIdpMapOutputWithContext(ctx context.Context) SamlIdpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpMapOutput)
}

type SamlIdpOutput struct{ *pulumi.OutputState }

func (SamlIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlIdp)(nil)).Elem()
}

func (o SamlIdpOutput) ToSamlIdpOutput() SamlIdpOutput {
	return o
}

func (o SamlIdpOutput) ToSamlIdpOutputWithContext(ctx context.Context) SamlIdpOutput {
	return o
}

type SamlIdpArrayOutput struct{ *pulumi.OutputState }

func (SamlIdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlIdp)(nil)).Elem()
}

func (o SamlIdpArrayOutput) ToSamlIdpArrayOutput() SamlIdpArrayOutput {
	return o
}

func (o SamlIdpArrayOutput) ToSamlIdpArrayOutputWithContext(ctx context.Context) SamlIdpArrayOutput {
	return o
}

func (o SamlIdpArrayOutput) Index(i pulumi.IntInput) SamlIdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamlIdp {
		return vs[0].([]*SamlIdp)[vs[1].(int)]
	}).(SamlIdpOutput)
}

type SamlIdpMapOutput struct{ *pulumi.OutputState }

func (SamlIdpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlIdp)(nil)).Elem()
}

func (o SamlIdpMapOutput) ToSamlIdpMapOutput() SamlIdpMapOutput {
	return o
}

func (o SamlIdpMapOutput) ToSamlIdpMapOutputWithContext(ctx context.Context) SamlIdpMapOutput {
	return o
}

func (o SamlIdpMapOutput) MapIndex(k pulumi.StringInput) SamlIdpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamlIdp {
		return vs[0].(map[string]*SamlIdp)[vs[1].(string)]
	}).(SamlIdpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpInput)(nil)).Elem(), &SamlIdp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpArrayInput)(nil)).Elem(), SamlIdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpMapInput)(nil)).Elem(), SamlIdpMap{})
	pulumi.RegisterOutputType(SamlIdpOutput{})
	pulumi.RegisterOutputType(SamlIdpArrayOutput{})
	pulumi.RegisterOutputType(SamlIdpMapOutput{})
}
