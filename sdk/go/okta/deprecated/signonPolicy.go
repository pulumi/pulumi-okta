// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SignonPolicy struct {
	pulumi.CustomResourceState

	// Policy Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// Policy Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewSignonPolicy registers a new resource with the given unique name, arguments, and options.
func NewSignonPolicy(ctx *pulumi.Context,
	name string, args *SignonPolicyArgs, opts ...pulumi.ResourceOption) (*SignonPolicy, error) {
	if args == nil {
		args = &SignonPolicyArgs{}
	}

	var resource SignonPolicy
	err := ctx.RegisterResource("okta:deprecated/signonPolicy:SignonPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignonPolicy gets an existing SignonPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignonPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignonPolicyState, opts ...pulumi.ResourceOption) (*SignonPolicy, error) {
	var resource SignonPolicy
	err := ctx.ReadResource("okta:deprecated/signonPolicy:SignonPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SignonPolicy resources.
type signonPolicyState struct {
	// Policy Description
	Description *string `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
}

type SignonPolicyState struct {
	// Policy Description
	Description pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
}

func (SignonPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*signonPolicyState)(nil)).Elem()
}

type signonPolicyArgs struct {
	// Policy Description
	Description *string `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a SignonPolicy resource.
type SignonPolicyArgs struct {
	// Policy Description
	Description pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
}

func (SignonPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signonPolicyArgs)(nil)).Elem()
}

type SignonPolicyInput interface {
	pulumi.Input

	ToSignonPolicyOutput() SignonPolicyOutput
	ToSignonPolicyOutputWithContext(ctx context.Context) SignonPolicyOutput
}

func (*SignonPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*SignonPolicy)(nil))
}

func (i *SignonPolicy) ToSignonPolicyOutput() SignonPolicyOutput {
	return i.ToSignonPolicyOutputWithContext(context.Background())
}

func (i *SignonPolicy) ToSignonPolicyOutputWithContext(ctx context.Context) SignonPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyOutput)
}

func (i *SignonPolicy) ToSignonPolicyPtrOutput() SignonPolicyPtrOutput {
	return i.ToSignonPolicyPtrOutputWithContext(context.Background())
}

func (i *SignonPolicy) ToSignonPolicyPtrOutputWithContext(ctx context.Context) SignonPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyPtrOutput)
}

type SignonPolicyPtrInput interface {
	pulumi.Input

	ToSignonPolicyPtrOutput() SignonPolicyPtrOutput
	ToSignonPolicyPtrOutputWithContext(ctx context.Context) SignonPolicyPtrOutput
}

type signonPolicyPtrType SignonPolicyArgs

func (*signonPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignonPolicy)(nil))
}

func (i *signonPolicyPtrType) ToSignonPolicyPtrOutput() SignonPolicyPtrOutput {
	return i.ToSignonPolicyPtrOutputWithContext(context.Background())
}

func (i *signonPolicyPtrType) ToSignonPolicyPtrOutputWithContext(ctx context.Context) SignonPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyPtrOutput)
}

// SignonPolicyArrayInput is an input type that accepts SignonPolicyArray and SignonPolicyArrayOutput values.
// You can construct a concrete instance of `SignonPolicyArrayInput` via:
//
//          SignonPolicyArray{ SignonPolicyArgs{...} }
type SignonPolicyArrayInput interface {
	pulumi.Input

	ToSignonPolicyArrayOutput() SignonPolicyArrayOutput
	ToSignonPolicyArrayOutputWithContext(context.Context) SignonPolicyArrayOutput
}

type SignonPolicyArray []SignonPolicyInput

func (SignonPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SignonPolicy)(nil)).Elem()
}

func (i SignonPolicyArray) ToSignonPolicyArrayOutput() SignonPolicyArrayOutput {
	return i.ToSignonPolicyArrayOutputWithContext(context.Background())
}

func (i SignonPolicyArray) ToSignonPolicyArrayOutputWithContext(ctx context.Context) SignonPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyArrayOutput)
}

// SignonPolicyMapInput is an input type that accepts SignonPolicyMap and SignonPolicyMapOutput values.
// You can construct a concrete instance of `SignonPolicyMapInput` via:
//
//          SignonPolicyMap{ "key": SignonPolicyArgs{...} }
type SignonPolicyMapInput interface {
	pulumi.Input

	ToSignonPolicyMapOutput() SignonPolicyMapOutput
	ToSignonPolicyMapOutputWithContext(context.Context) SignonPolicyMapOutput
}

type SignonPolicyMap map[string]SignonPolicyInput

func (SignonPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SignonPolicy)(nil)).Elem()
}

func (i SignonPolicyMap) ToSignonPolicyMapOutput() SignonPolicyMapOutput {
	return i.ToSignonPolicyMapOutputWithContext(context.Background())
}

func (i SignonPolicyMap) ToSignonPolicyMapOutputWithContext(ctx context.Context) SignonPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonPolicyMapOutput)
}

type SignonPolicyOutput struct{ *pulumi.OutputState }

func (SignonPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignonPolicy)(nil))
}

func (o SignonPolicyOutput) ToSignonPolicyOutput() SignonPolicyOutput {
	return o
}

func (o SignonPolicyOutput) ToSignonPolicyOutputWithContext(ctx context.Context) SignonPolicyOutput {
	return o
}

func (o SignonPolicyOutput) ToSignonPolicyPtrOutput() SignonPolicyPtrOutput {
	return o.ToSignonPolicyPtrOutputWithContext(context.Background())
}

func (o SignonPolicyOutput) ToSignonPolicyPtrOutputWithContext(ctx context.Context) SignonPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignonPolicy) *SignonPolicy {
		return &v
	}).(SignonPolicyPtrOutput)
}

type SignonPolicyPtrOutput struct{ *pulumi.OutputState }

func (SignonPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignonPolicy)(nil))
}

func (o SignonPolicyPtrOutput) ToSignonPolicyPtrOutput() SignonPolicyPtrOutput {
	return o
}

func (o SignonPolicyPtrOutput) ToSignonPolicyPtrOutputWithContext(ctx context.Context) SignonPolicyPtrOutput {
	return o
}

func (o SignonPolicyPtrOutput) Elem() SignonPolicyOutput {
	return o.ApplyT(func(v *SignonPolicy) SignonPolicy {
		if v != nil {
			return *v
		}
		var ret SignonPolicy
		return ret
	}).(SignonPolicyOutput)
}

type SignonPolicyArrayOutput struct{ *pulumi.OutputState }

func (SignonPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignonPolicy)(nil))
}

func (o SignonPolicyArrayOutput) ToSignonPolicyArrayOutput() SignonPolicyArrayOutput {
	return o
}

func (o SignonPolicyArrayOutput) ToSignonPolicyArrayOutputWithContext(ctx context.Context) SignonPolicyArrayOutput {
	return o
}

func (o SignonPolicyArrayOutput) Index(i pulumi.IntInput) SignonPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignonPolicy {
		return vs[0].([]SignonPolicy)[vs[1].(int)]
	}).(SignonPolicyOutput)
}

type SignonPolicyMapOutput struct{ *pulumi.OutputState }

func (SignonPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SignonPolicy)(nil))
}

func (o SignonPolicyMapOutput) ToSignonPolicyMapOutput() SignonPolicyMapOutput {
	return o
}

func (o SignonPolicyMapOutput) ToSignonPolicyMapOutputWithContext(ctx context.Context) SignonPolicyMapOutput {
	return o
}

func (o SignonPolicyMapOutput) MapIndex(k pulumi.StringInput) SignonPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SignonPolicy {
		return vs[0].(map[string]SignonPolicy)[vs[1].(string)]
	}).(SignonPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(SignonPolicyOutput{})
	pulumi.RegisterOutputType(SignonPolicyPtrOutput{})
	pulumi.RegisterOutputType(SignonPolicyArrayOutput{})
	pulumi.RegisterOutputType(SignonPolicyMapOutput{})
}
