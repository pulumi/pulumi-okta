// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUser, err := user.NewUser(ctx, "example", &user.UserArgs{
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Smith"),
//				Login:     pulumi.String("john.smith@example.com"),
//				Email:     pulumi.String("john.smith@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = okta.GetUserSecurityQuestionsOutput(ctx, okta.GetUserSecurityQuestionsOutputArgs{
//				UserId: exampleUser.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetUserSecurityQuestions(ctx *pulumi.Context, args *GetUserSecurityQuestionsArgs, opts ...pulumi.InvokeOption) (*GetUserSecurityQuestionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserSecurityQuestionsResult
	err := ctx.Invoke("okta:index/getUserSecurityQuestions:getUserSecurityQuestions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserSecurityQuestions.
type GetUserSecurityQuestionsArgs struct {
	// ID of a Okta User
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getUserSecurityQuestions.
type GetUserSecurityQuestionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string                             `pulumi:"id"`
	Questions []GetUserSecurityQuestionsQuestion `pulumi:"questions"`
	// ID of a Okta User
	UserId string `pulumi:"userId"`
}

func GetUserSecurityQuestionsOutput(ctx *pulumi.Context, args GetUserSecurityQuestionsOutputArgs, opts ...pulumi.InvokeOption) GetUserSecurityQuestionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetUserSecurityQuestionsResultOutput, error) {
			args := v.(GetUserSecurityQuestionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:index/getUserSecurityQuestions:getUserSecurityQuestions", args, GetUserSecurityQuestionsResultOutput{}, options).(GetUserSecurityQuestionsResultOutput), nil
		}).(GetUserSecurityQuestionsResultOutput)
}

// A collection of arguments for invoking getUserSecurityQuestions.
type GetUserSecurityQuestionsOutputArgs struct {
	// ID of a Okta User
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetUserSecurityQuestionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSecurityQuestionsArgs)(nil)).Elem()
}

// A collection of values returned by getUserSecurityQuestions.
type GetUserSecurityQuestionsResultOutput struct{ *pulumi.OutputState }

func (GetUserSecurityQuestionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSecurityQuestionsResult)(nil)).Elem()
}

func (o GetUserSecurityQuestionsResultOutput) ToGetUserSecurityQuestionsResultOutput() GetUserSecurityQuestionsResultOutput {
	return o
}

func (o GetUserSecurityQuestionsResultOutput) ToGetUserSecurityQuestionsResultOutputWithContext(ctx context.Context) GetUserSecurityQuestionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserSecurityQuestionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSecurityQuestionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserSecurityQuestionsResultOutput) Questions() GetUserSecurityQuestionsQuestionArrayOutput {
	return o.ApplyT(func(v GetUserSecurityQuestionsResult) []GetUserSecurityQuestionsQuestion { return v.Questions }).(GetUserSecurityQuestionsQuestionArrayOutput)
}

// ID of a Okta User
func (o GetUserSecurityQuestionsResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSecurityQuestionsResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserSecurityQuestionsResultOutput{})
}
