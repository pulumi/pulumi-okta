// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PrincipalRateLimits struct {
	pulumi.CustomResourceState

	// The Okta user ID of the user who created the principle rate limit entity.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The date and time the principle rate limit entity was created.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// The default percentage of a given concurrency limit threshold that the owning principal can consume.
	DefaultConcurrencyPercentage pulumi.IntOutput `pulumi:"defaultConcurrencyPercentage"`
	// The default percentage of a given rate limit threshold that the owning principal can consume.
	DefaultPercentage pulumi.IntOutput `pulumi:"defaultPercentage"`
	// The date and time the principle rate limit entity was last updated.
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// The Okta user ID of the user who last updated the principle rate limit entity.
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// The unique identifier of the Okta org.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The type of principal, either an API token or an OAuth 2.0 app.
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
}

// NewPrincipalRateLimits registers a new resource with the given unique name, arguments, and options.
func NewPrincipalRateLimits(ctx *pulumi.Context,
	name string, args *PrincipalRateLimitsArgs, opts ...pulumi.ResourceOption) (*PrincipalRateLimits, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.PrincipalType == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrincipalRateLimits
	err := ctx.RegisterResource("okta:index/principalRateLimits:PrincipalRateLimits", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrincipalRateLimits gets an existing PrincipalRateLimits resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrincipalRateLimits(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrincipalRateLimitsState, opts ...pulumi.ResourceOption) (*PrincipalRateLimits, error) {
	var resource PrincipalRateLimits
	err := ctx.ReadResource("okta:index/principalRateLimits:PrincipalRateLimits", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrincipalRateLimits resources.
type principalRateLimitsState struct {
	// The Okta user ID of the user who created the principle rate limit entity.
	CreatedBy *string `pulumi:"createdBy"`
	// The date and time the principle rate limit entity was created.
	CreatedDate *string `pulumi:"createdDate"`
	// The default percentage of a given concurrency limit threshold that the owning principal can consume.
	DefaultConcurrencyPercentage *int `pulumi:"defaultConcurrencyPercentage"`
	// The default percentage of a given rate limit threshold that the owning principal can consume.
	DefaultPercentage *int `pulumi:"defaultPercentage"`
	// The date and time the principle rate limit entity was last updated.
	LastUpdate *string `pulumi:"lastUpdate"`
	// The Okta user ID of the user who last updated the principle rate limit entity.
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// The unique identifier of the Okta org.
	OrgId *string `pulumi:"orgId"`
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	PrincipalId *string `pulumi:"principalId"`
	// The type of principal, either an API token or an OAuth 2.0 app.
	PrincipalType *string `pulumi:"principalType"`
}

type PrincipalRateLimitsState struct {
	// The Okta user ID of the user who created the principle rate limit entity.
	CreatedBy pulumi.StringPtrInput
	// The date and time the principle rate limit entity was created.
	CreatedDate pulumi.StringPtrInput
	// The default percentage of a given concurrency limit threshold that the owning principal can consume.
	DefaultConcurrencyPercentage pulumi.IntPtrInput
	// The default percentage of a given rate limit threshold that the owning principal can consume.
	DefaultPercentage pulumi.IntPtrInput
	// The date and time the principle rate limit entity was last updated.
	LastUpdate pulumi.StringPtrInput
	// The Okta user ID of the user who last updated the principle rate limit entity.
	LastUpdatedBy pulumi.StringPtrInput
	// The unique identifier of the Okta org.
	OrgId pulumi.StringPtrInput
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	PrincipalId pulumi.StringPtrInput
	// The type of principal, either an API token or an OAuth 2.0 app.
	PrincipalType pulumi.StringPtrInput
}

func (PrincipalRateLimitsState) ElementType() reflect.Type {
	return reflect.TypeOf((*principalRateLimitsState)(nil)).Elem()
}

type principalRateLimitsArgs struct {
	// The default percentage of a given concurrency limit threshold that the owning principal can consume.
	DefaultConcurrencyPercentage *int `pulumi:"defaultConcurrencyPercentage"`
	// The default percentage of a given rate limit threshold that the owning principal can consume.
	DefaultPercentage *int `pulumi:"defaultPercentage"`
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	PrincipalId string `pulumi:"principalId"`
	// The type of principal, either an API token or an OAuth 2.0 app.
	PrincipalType string `pulumi:"principalType"`
}

// The set of arguments for constructing a PrincipalRateLimits resource.
type PrincipalRateLimitsArgs struct {
	// The default percentage of a given concurrency limit threshold that the owning principal can consume.
	DefaultConcurrencyPercentage pulumi.IntPtrInput
	// The default percentage of a given rate limit threshold that the owning principal can consume.
	DefaultPercentage pulumi.IntPtrInput
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	PrincipalId pulumi.StringInput
	// The type of principal, either an API token or an OAuth 2.0 app.
	PrincipalType pulumi.StringInput
}

func (PrincipalRateLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*principalRateLimitsArgs)(nil)).Elem()
}

type PrincipalRateLimitsInput interface {
	pulumi.Input

	ToPrincipalRateLimitsOutput() PrincipalRateLimitsOutput
	ToPrincipalRateLimitsOutputWithContext(ctx context.Context) PrincipalRateLimitsOutput
}

func (*PrincipalRateLimits) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalRateLimits)(nil)).Elem()
}

func (i *PrincipalRateLimits) ToPrincipalRateLimitsOutput() PrincipalRateLimitsOutput {
	return i.ToPrincipalRateLimitsOutputWithContext(context.Background())
}

func (i *PrincipalRateLimits) ToPrincipalRateLimitsOutputWithContext(ctx context.Context) PrincipalRateLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalRateLimitsOutput)
}

// PrincipalRateLimitsArrayInput is an input type that accepts PrincipalRateLimitsArray and PrincipalRateLimitsArrayOutput values.
// You can construct a concrete instance of `PrincipalRateLimitsArrayInput` via:
//
//	PrincipalRateLimitsArray{ PrincipalRateLimitsArgs{...} }
type PrincipalRateLimitsArrayInput interface {
	pulumi.Input

	ToPrincipalRateLimitsArrayOutput() PrincipalRateLimitsArrayOutput
	ToPrincipalRateLimitsArrayOutputWithContext(context.Context) PrincipalRateLimitsArrayOutput
}

type PrincipalRateLimitsArray []PrincipalRateLimitsInput

func (PrincipalRateLimitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalRateLimits)(nil)).Elem()
}

func (i PrincipalRateLimitsArray) ToPrincipalRateLimitsArrayOutput() PrincipalRateLimitsArrayOutput {
	return i.ToPrincipalRateLimitsArrayOutputWithContext(context.Background())
}

func (i PrincipalRateLimitsArray) ToPrincipalRateLimitsArrayOutputWithContext(ctx context.Context) PrincipalRateLimitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalRateLimitsArrayOutput)
}

// PrincipalRateLimitsMapInput is an input type that accepts PrincipalRateLimitsMap and PrincipalRateLimitsMapOutput values.
// You can construct a concrete instance of `PrincipalRateLimitsMapInput` via:
//
//	PrincipalRateLimitsMap{ "key": PrincipalRateLimitsArgs{...} }
type PrincipalRateLimitsMapInput interface {
	pulumi.Input

	ToPrincipalRateLimitsMapOutput() PrincipalRateLimitsMapOutput
	ToPrincipalRateLimitsMapOutputWithContext(context.Context) PrincipalRateLimitsMapOutput
}

type PrincipalRateLimitsMap map[string]PrincipalRateLimitsInput

func (PrincipalRateLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalRateLimits)(nil)).Elem()
}

func (i PrincipalRateLimitsMap) ToPrincipalRateLimitsMapOutput() PrincipalRateLimitsMapOutput {
	return i.ToPrincipalRateLimitsMapOutputWithContext(context.Background())
}

func (i PrincipalRateLimitsMap) ToPrincipalRateLimitsMapOutputWithContext(ctx context.Context) PrincipalRateLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalRateLimitsMapOutput)
}

type PrincipalRateLimitsOutput struct{ *pulumi.OutputState }

func (PrincipalRateLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalRateLimits)(nil)).Elem()
}

func (o PrincipalRateLimitsOutput) ToPrincipalRateLimitsOutput() PrincipalRateLimitsOutput {
	return o
}

func (o PrincipalRateLimitsOutput) ToPrincipalRateLimitsOutputWithContext(ctx context.Context) PrincipalRateLimitsOutput {
	return o
}

// The Okta user ID of the user who created the principle rate limit entity.
func (o PrincipalRateLimitsOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The date and time the principle rate limit entity was created.
func (o PrincipalRateLimitsOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// The default percentage of a given concurrency limit threshold that the owning principal can consume.
func (o PrincipalRateLimitsOutput) DefaultConcurrencyPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.IntOutput { return v.DefaultConcurrencyPercentage }).(pulumi.IntOutput)
}

// The default percentage of a given rate limit threshold that the owning principal can consume.
func (o PrincipalRateLimitsOutput) DefaultPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.IntOutput { return v.DefaultPercentage }).(pulumi.IntOutput)
}

// The date and time the principle rate limit entity was last updated.
func (o PrincipalRateLimitsOutput) LastUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.LastUpdate }).(pulumi.StringOutput)
}

// The Okta user ID of the user who last updated the principle rate limit entity.
func (o PrincipalRateLimitsOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// The unique identifier of the Okta org.
func (o PrincipalRateLimitsOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
func (o PrincipalRateLimitsOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The type of principal, either an API token or an OAuth 2.0 app.
func (o PrincipalRateLimitsOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalRateLimits) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

type PrincipalRateLimitsArrayOutput struct{ *pulumi.OutputState }

func (PrincipalRateLimitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalRateLimits)(nil)).Elem()
}

func (o PrincipalRateLimitsArrayOutput) ToPrincipalRateLimitsArrayOutput() PrincipalRateLimitsArrayOutput {
	return o
}

func (o PrincipalRateLimitsArrayOutput) ToPrincipalRateLimitsArrayOutputWithContext(ctx context.Context) PrincipalRateLimitsArrayOutput {
	return o
}

func (o PrincipalRateLimitsArrayOutput) Index(i pulumi.IntInput) PrincipalRateLimitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrincipalRateLimits {
		return vs[0].([]*PrincipalRateLimits)[vs[1].(int)]
	}).(PrincipalRateLimitsOutput)
}

type PrincipalRateLimitsMapOutput struct{ *pulumi.OutputState }

func (PrincipalRateLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalRateLimits)(nil)).Elem()
}

func (o PrincipalRateLimitsMapOutput) ToPrincipalRateLimitsMapOutput() PrincipalRateLimitsMapOutput {
	return o
}

func (o PrincipalRateLimitsMapOutput) ToPrincipalRateLimitsMapOutputWithContext(ctx context.Context) PrincipalRateLimitsMapOutput {
	return o
}

func (o PrincipalRateLimitsMapOutput) MapIndex(k pulumi.StringInput) PrincipalRateLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrincipalRateLimits {
		return vs[0].(map[string]*PrincipalRateLimits)[vs[1].(string)]
	}).(PrincipalRateLimitsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalRateLimitsInput)(nil)).Elem(), &PrincipalRateLimits{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalRateLimitsArrayInput)(nil)).Elem(), PrincipalRateLimitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalRateLimitsMapInput)(nil)).Elem(), PrincipalRateLimitsMap{})
	pulumi.RegisterOutputType(PrincipalRateLimitsOutput{})
	pulumi.RegisterOutputType(PrincipalRateLimitsArrayOutput{})
	pulumi.RegisterOutputType(PrincipalRateLimitsMapOutput{})
}
