// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import okta:index/endUserMyRequests:EndUserMyRequests example <request_id/entry_id>
// ```
type EndUserMyRequests struct {
	pulumi.CustomResourceState

	// The ID of the catalog entry for which the request is being made.
	EntryId pulumi.StringOutput `pulumi:"entryId"`
	// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
	RequesterFieldValues EndUserMyRequestsRequesterFieldValueArrayOutput `pulumi:"requesterFieldValues"`
	// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEndUserMyRequests registers a new resource with the given unique name, arguments, and options.
func NewEndUserMyRequests(ctx *pulumi.Context,
	name string, args *EndUserMyRequestsArgs, opts ...pulumi.ResourceOption) (*EndUserMyRequests, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryId == nil {
		return nil, errors.New("invalid value for required argument 'EntryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndUserMyRequests
	err := ctx.RegisterResource("okta:index/endUserMyRequests:EndUserMyRequests", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndUserMyRequests gets an existing EndUserMyRequests resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndUserMyRequests(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndUserMyRequestsState, opts ...pulumi.ResourceOption) (*EndUserMyRequests, error) {
	var resource EndUserMyRequests
	err := ctx.ReadResource("okta:index/endUserMyRequests:EndUserMyRequests", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndUserMyRequests resources.
type endUserMyRequestsState struct {
	// The ID of the catalog entry for which the request is being made.
	EntryId *string `pulumi:"entryId"`
	// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
	RequesterFieldValues []EndUserMyRequestsRequesterFieldValue `pulumi:"requesterFieldValues"`
	// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
	Status *string `pulumi:"status"`
}

type EndUserMyRequestsState struct {
	// The ID of the catalog entry for which the request is being made.
	EntryId pulumi.StringPtrInput
	// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
	RequesterFieldValues EndUserMyRequestsRequesterFieldValueArrayInput
	// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
	Status pulumi.StringPtrInput
}

func (EndUserMyRequestsState) ElementType() reflect.Type {
	return reflect.TypeOf((*endUserMyRequestsState)(nil)).Elem()
}

type endUserMyRequestsArgs struct {
	// The ID of the catalog entry for which the request is being made.
	EntryId string `pulumi:"entryId"`
	// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
	RequesterFieldValues []EndUserMyRequestsRequesterFieldValue `pulumi:"requesterFieldValues"`
}

// The set of arguments for constructing a EndUserMyRequests resource.
type EndUserMyRequestsArgs struct {
	// The ID of the catalog entry for which the request is being made.
	EntryId pulumi.StringInput
	// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
	RequesterFieldValues EndUserMyRequestsRequesterFieldValueArrayInput
}

func (EndUserMyRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endUserMyRequestsArgs)(nil)).Elem()
}

type EndUserMyRequestsInput interface {
	pulumi.Input

	ToEndUserMyRequestsOutput() EndUserMyRequestsOutput
	ToEndUserMyRequestsOutputWithContext(ctx context.Context) EndUserMyRequestsOutput
}

func (*EndUserMyRequests) ElementType() reflect.Type {
	return reflect.TypeOf((**EndUserMyRequests)(nil)).Elem()
}

func (i *EndUserMyRequests) ToEndUserMyRequestsOutput() EndUserMyRequestsOutput {
	return i.ToEndUserMyRequestsOutputWithContext(context.Background())
}

func (i *EndUserMyRequests) ToEndUserMyRequestsOutputWithContext(ctx context.Context) EndUserMyRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndUserMyRequestsOutput)
}

// EndUserMyRequestsArrayInput is an input type that accepts EndUserMyRequestsArray and EndUserMyRequestsArrayOutput values.
// You can construct a concrete instance of `EndUserMyRequestsArrayInput` via:
//
//	EndUserMyRequestsArray{ EndUserMyRequestsArgs{...} }
type EndUserMyRequestsArrayInput interface {
	pulumi.Input

	ToEndUserMyRequestsArrayOutput() EndUserMyRequestsArrayOutput
	ToEndUserMyRequestsArrayOutputWithContext(context.Context) EndUserMyRequestsArrayOutput
}

type EndUserMyRequestsArray []EndUserMyRequestsInput

func (EndUserMyRequestsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndUserMyRequests)(nil)).Elem()
}

func (i EndUserMyRequestsArray) ToEndUserMyRequestsArrayOutput() EndUserMyRequestsArrayOutput {
	return i.ToEndUserMyRequestsArrayOutputWithContext(context.Background())
}

func (i EndUserMyRequestsArray) ToEndUserMyRequestsArrayOutputWithContext(ctx context.Context) EndUserMyRequestsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndUserMyRequestsArrayOutput)
}

// EndUserMyRequestsMapInput is an input type that accepts EndUserMyRequestsMap and EndUserMyRequestsMapOutput values.
// You can construct a concrete instance of `EndUserMyRequestsMapInput` via:
//
//	EndUserMyRequestsMap{ "key": EndUserMyRequestsArgs{...} }
type EndUserMyRequestsMapInput interface {
	pulumi.Input

	ToEndUserMyRequestsMapOutput() EndUserMyRequestsMapOutput
	ToEndUserMyRequestsMapOutputWithContext(context.Context) EndUserMyRequestsMapOutput
}

type EndUserMyRequestsMap map[string]EndUserMyRequestsInput

func (EndUserMyRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndUserMyRequests)(nil)).Elem()
}

func (i EndUserMyRequestsMap) ToEndUserMyRequestsMapOutput() EndUserMyRequestsMapOutput {
	return i.ToEndUserMyRequestsMapOutputWithContext(context.Background())
}

func (i EndUserMyRequestsMap) ToEndUserMyRequestsMapOutputWithContext(ctx context.Context) EndUserMyRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndUserMyRequestsMapOutput)
}

type EndUserMyRequestsOutput struct{ *pulumi.OutputState }

func (EndUserMyRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndUserMyRequests)(nil)).Elem()
}

func (o EndUserMyRequestsOutput) ToEndUserMyRequestsOutput() EndUserMyRequestsOutput {
	return o
}

func (o EndUserMyRequestsOutput) ToEndUserMyRequestsOutputWithContext(ctx context.Context) EndUserMyRequestsOutput {
	return o
}

// The ID of the catalog entry for which the request is being made.
func (o EndUserMyRequestsOutput) EntryId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndUserMyRequests) pulumi.StringOutput { return v.EntryId }).(pulumi.StringOutput)
}

// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
func (o EndUserMyRequestsOutput) RequesterFieldValues() EndUserMyRequestsRequesterFieldValueArrayOutput {
	return o.ApplyT(func(v *EndUserMyRequests) EndUserMyRequestsRequesterFieldValueArrayOutput {
		return v.RequesterFieldValues
	}).(EndUserMyRequestsRequesterFieldValueArrayOutput)
}

// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
func (o EndUserMyRequestsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EndUserMyRequests) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EndUserMyRequestsArrayOutput struct{ *pulumi.OutputState }

func (EndUserMyRequestsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndUserMyRequests)(nil)).Elem()
}

func (o EndUserMyRequestsArrayOutput) ToEndUserMyRequestsArrayOutput() EndUserMyRequestsArrayOutput {
	return o
}

func (o EndUserMyRequestsArrayOutput) ToEndUserMyRequestsArrayOutputWithContext(ctx context.Context) EndUserMyRequestsArrayOutput {
	return o
}

func (o EndUserMyRequestsArrayOutput) Index(i pulumi.IntInput) EndUserMyRequestsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndUserMyRequests {
		return vs[0].([]*EndUserMyRequests)[vs[1].(int)]
	}).(EndUserMyRequestsOutput)
}

type EndUserMyRequestsMapOutput struct{ *pulumi.OutputState }

func (EndUserMyRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndUserMyRequests)(nil)).Elem()
}

func (o EndUserMyRequestsMapOutput) ToEndUserMyRequestsMapOutput() EndUserMyRequestsMapOutput {
	return o
}

func (o EndUserMyRequestsMapOutput) ToEndUserMyRequestsMapOutputWithContext(ctx context.Context) EndUserMyRequestsMapOutput {
	return o
}

func (o EndUserMyRequestsMapOutput) MapIndex(k pulumi.StringInput) EndUserMyRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndUserMyRequests {
		return vs[0].(map[string]*EndUserMyRequests)[vs[1].(string)]
	}).(EndUserMyRequestsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndUserMyRequestsInput)(nil)).Elem(), &EndUserMyRequests{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndUserMyRequestsArrayInput)(nil)).Elem(), EndUserMyRequestsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndUserMyRequestsMapInput)(nil)).Elem(), EndUserMyRequestsMap{})
	pulumi.RegisterOutputType(EndUserMyRequestsOutput{})
	pulumi.RegisterOutputType(EndUserMyRequestsArrayOutput{})
	pulumi.RegisterOutputType(EndUserMyRequestsMapOutput{})
}
