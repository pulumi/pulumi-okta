// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and configure a behavior.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewBehaviour(ctx, "my_location", &okta.BehaviourArgs{
//				Name:                    pulumi.String("My Location"),
//				Type:                    pulumi.String("ANOMALOUS_LOCATION"),
//				NumberOfAuthentications: pulumi.Int(50),
//				LocationGranularityType: pulumi.String("LAT_LONG"),
//				RadiusFromLocation:      pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewBehaviour(ctx, "my_city", &okta.BehaviourArgs{
//				Name:                    pulumi.String("My City"),
//				Type:                    pulumi.String("ANOMALOUS_LOCATION"),
//				NumberOfAuthentications: pulumi.Int(50),
//				LocationGranularityType: pulumi.String("CITY"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewBehaviour(ctx, "my_device", &okta.BehaviourArgs{
//				Name:                    pulumi.String("My Device"),
//				Type:                    pulumi.String("ANOMALOUS_DEVICE"),
//				NumberOfAuthentications: pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewBehaviour(ctx, "my_ip", &okta.BehaviourArgs{
//				Name:                    pulumi.String("My IP"),
//				Type:                    pulumi.String("ANOMALOUS_IP"),
//				NumberOfAuthentications: pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewBehaviour(ctx, "my_velocity", &okta.BehaviourArgs{
//				Name:     pulumi.String("My Velocity"),
//				Type:     pulumi.String("VELOCITY"),
//				Velocity: pulumi.Int(25),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/behaviour:Behaviour example <behavior_id>
// ```
type Behaviour struct {
	pulumi.CustomResourceState

	// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
	LocationGranularityType pulumi.StringPtrOutput `pulumi:"locationGranularityType"`
	// Name of the behavior
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
	NumberOfAuthentications pulumi.IntPtrOutput `pulumi:"numberOfAuthentications"`
	// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
	RadiusFromLocation pulumi.IntPtrOutput `pulumi:"radiusFromLocation"`
	// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
	Type pulumi.StringOutput `pulumi:"type"`
	// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
	Velocity pulumi.IntPtrOutput `pulumi:"velocity"`
}

// NewBehaviour registers a new resource with the given unique name, arguments, and options.
func NewBehaviour(ctx *pulumi.Context,
	name string, args *BehaviourArgs, opts ...pulumi.ResourceOption) (*Behaviour, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Behaviour
	err := ctx.RegisterResource("okta:index/behaviour:Behaviour", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBehaviour gets an existing Behaviour resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBehaviour(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BehaviourState, opts ...pulumi.ResourceOption) (*Behaviour, error) {
	var resource Behaviour
	err := ctx.ReadResource("okta:index/behaviour:Behaviour", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Behaviour resources.
type behaviourState struct {
	// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
	LocationGranularityType *string `pulumi:"locationGranularityType"`
	// Name of the behavior
	Name *string `pulumi:"name"`
	// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
	NumberOfAuthentications *int `pulumi:"numberOfAuthentications"`
	// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
	RadiusFromLocation *int `pulumi:"radiusFromLocation"`
	// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
	Type *string `pulumi:"type"`
	// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
	Velocity *int `pulumi:"velocity"`
}

type BehaviourState struct {
	// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
	LocationGranularityType pulumi.StringPtrInput
	// Name of the behavior
	Name pulumi.StringPtrInput
	// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
	NumberOfAuthentications pulumi.IntPtrInput
	// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
	RadiusFromLocation pulumi.IntPtrInput
	// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
	Type pulumi.StringPtrInput
	// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
	Velocity pulumi.IntPtrInput
}

func (BehaviourState) ElementType() reflect.Type {
	return reflect.TypeOf((*behaviourState)(nil)).Elem()
}

type behaviourArgs struct {
	// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
	LocationGranularityType *string `pulumi:"locationGranularityType"`
	// Name of the behavior
	Name *string `pulumi:"name"`
	// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
	NumberOfAuthentications *int `pulumi:"numberOfAuthentications"`
	// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
	RadiusFromLocation *int `pulumi:"radiusFromLocation"`
	// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
	Type string `pulumi:"type"`
	// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
	Velocity *int `pulumi:"velocity"`
}

// The set of arguments for constructing a Behaviour resource.
type BehaviourArgs struct {
	// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
	LocationGranularityType pulumi.StringPtrInput
	// Name of the behavior
	Name pulumi.StringPtrInput
	// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
	NumberOfAuthentications pulumi.IntPtrInput
	// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
	RadiusFromLocation pulumi.IntPtrInput
	// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
	Type pulumi.StringInput
	// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
	Velocity pulumi.IntPtrInput
}

func (BehaviourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*behaviourArgs)(nil)).Elem()
}

type BehaviourInput interface {
	pulumi.Input

	ToBehaviourOutput() BehaviourOutput
	ToBehaviourOutputWithContext(ctx context.Context) BehaviourOutput
}

func (*Behaviour) ElementType() reflect.Type {
	return reflect.TypeOf((**Behaviour)(nil)).Elem()
}

func (i *Behaviour) ToBehaviourOutput() BehaviourOutput {
	return i.ToBehaviourOutputWithContext(context.Background())
}

func (i *Behaviour) ToBehaviourOutputWithContext(ctx context.Context) BehaviourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BehaviourOutput)
}

// BehaviourArrayInput is an input type that accepts BehaviourArray and BehaviourArrayOutput values.
// You can construct a concrete instance of `BehaviourArrayInput` via:
//
//	BehaviourArray{ BehaviourArgs{...} }
type BehaviourArrayInput interface {
	pulumi.Input

	ToBehaviourArrayOutput() BehaviourArrayOutput
	ToBehaviourArrayOutputWithContext(context.Context) BehaviourArrayOutput
}

type BehaviourArray []BehaviourInput

func (BehaviourArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Behaviour)(nil)).Elem()
}

func (i BehaviourArray) ToBehaviourArrayOutput() BehaviourArrayOutput {
	return i.ToBehaviourArrayOutputWithContext(context.Background())
}

func (i BehaviourArray) ToBehaviourArrayOutputWithContext(ctx context.Context) BehaviourArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BehaviourArrayOutput)
}

// BehaviourMapInput is an input type that accepts BehaviourMap and BehaviourMapOutput values.
// You can construct a concrete instance of `BehaviourMapInput` via:
//
//	BehaviourMap{ "key": BehaviourArgs{...} }
type BehaviourMapInput interface {
	pulumi.Input

	ToBehaviourMapOutput() BehaviourMapOutput
	ToBehaviourMapOutputWithContext(context.Context) BehaviourMapOutput
}

type BehaviourMap map[string]BehaviourInput

func (BehaviourMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Behaviour)(nil)).Elem()
}

func (i BehaviourMap) ToBehaviourMapOutput() BehaviourMapOutput {
	return i.ToBehaviourMapOutputWithContext(context.Background())
}

func (i BehaviourMap) ToBehaviourMapOutputWithContext(ctx context.Context) BehaviourMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BehaviourMapOutput)
}

type BehaviourOutput struct{ *pulumi.OutputState }

func (BehaviourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Behaviour)(nil)).Elem()
}

func (o BehaviourOutput) ToBehaviourOutput() BehaviourOutput {
	return o
}

func (o BehaviourOutput) ToBehaviourOutputWithContext(ctx context.Context) BehaviourOutput {
	return o
}

// Determines the method and level of detail used to evaluate the behavior. Required for `ANOMALOUS_LOCATION` behavior type. Can be set to `LAT_LONG`, `CITY`, `COUNTRY` or `SUBDIVISION`.
func (o BehaviourOutput) LocationGranularityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.StringPtrOutput { return v.LocationGranularityType }).(pulumi.StringPtrOutput)
}

// Name of the behavior
func (o BehaviourOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of recent authentications used to evaluate the behavior. Required for `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE` and `ANOMALOUS_IP` behavior types.
func (o BehaviourOutput) NumberOfAuthentications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.IntPtrOutput { return v.NumberOfAuthentications }).(pulumi.IntPtrOutput)
}

// Radius from location (in kilometers). Should be at least 5. Required when `locationGranularityType` is set to `LAT_LONG`.
func (o BehaviourOutput) RadiusFromLocation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.IntPtrOutput { return v.RadiusFromLocation }).(pulumi.IntPtrOutput)
}

// Behavior status: ACTIVE or INACTIVE. Default: `ACTIVE`
func (o BehaviourOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of the behavior. Can be set to `ANOMALOUS_LOCATION`, `ANOMALOUS_DEVICE`, `ANOMALOUS_IP` or `VELOCITY`. Resource will be recreated when the type changes.e
func (o BehaviourOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Velocity (in kilometers per hour). Should be at least 1. Required for `VELOCITY` behavior
func (o BehaviourOutput) Velocity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Behaviour) pulumi.IntPtrOutput { return v.Velocity }).(pulumi.IntPtrOutput)
}

type BehaviourArrayOutput struct{ *pulumi.OutputState }

func (BehaviourArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Behaviour)(nil)).Elem()
}

func (o BehaviourArrayOutput) ToBehaviourArrayOutput() BehaviourArrayOutput {
	return o
}

func (o BehaviourArrayOutput) ToBehaviourArrayOutputWithContext(ctx context.Context) BehaviourArrayOutput {
	return o
}

func (o BehaviourArrayOutput) Index(i pulumi.IntInput) BehaviourOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Behaviour {
		return vs[0].([]*Behaviour)[vs[1].(int)]
	}).(BehaviourOutput)
}

type BehaviourMapOutput struct{ *pulumi.OutputState }

func (BehaviourMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Behaviour)(nil)).Elem()
}

func (o BehaviourMapOutput) ToBehaviourMapOutput() BehaviourMapOutput {
	return o
}

func (o BehaviourMapOutput) ToBehaviourMapOutputWithContext(ctx context.Context) BehaviourMapOutput {
	return o
}

func (o BehaviourMapOutput) MapIndex(k pulumi.StringInput) BehaviourOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Behaviour {
		return vs[0].(map[string]*Behaviour)[vs[1].(string)]
	}).(BehaviourOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BehaviourInput)(nil)).Elem(), &Behaviour{})
	pulumi.RegisterInputType(reflect.TypeOf((*BehaviourArrayInput)(nil)).Elem(), BehaviourArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BehaviourMapInput)(nil)).Elem(), BehaviourMap{})
	pulumi.RegisterOutputType(BehaviourOutput{})
	pulumi.RegisterOutputType(BehaviourArrayOutput{})
	pulumi.RegisterOutputType(BehaviourMapOutput{})
}
