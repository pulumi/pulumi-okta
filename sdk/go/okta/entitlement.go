// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Entitlement. This resource allows you to create and configure an Okta [Entitlement](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlements/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewEntitlement(ctx, "example", &okta.EntitlementArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/entitlement:Entitlement example <entitlement_id>
// ```
type Entitlement struct {
	pulumi.CustomResourceState

	// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
	DataType pulumi.StringOutput `pulumi:"dataType"`
	// The description of an entitlement property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The value of an entitlement property.
	ExternalValue pulumi.StringOutput `pulumi:"externalValue"`
	// The property that determines if the entitlement property can hold multiple values.
	MultiValue pulumi.BoolOutput `pulumi:"multiValue"`
	// The display name for an entitlement property.
	Name pulumi.StringOutput `pulumi:"name"`
	// Representation of a resource
	Parent EntitlementParentPtrOutput `pulumi:"parent"`
	// The Okta app instance, in ORN format.
	ParentResourceOrn pulumi.StringOutput `pulumi:"parentResourceOrn"`
	// The value of the entitlement property.
	Value  pulumi.StringPtrOutput      `pulumi:"value"`
	Values EntitlementValueArrayOutput `pulumi:"values"`
}

// NewEntitlement registers a new resource with the given unique name, arguments, and options.
func NewEntitlement(ctx *pulumi.Context,
	name string, args *EntitlementArgs, opts ...pulumi.ResourceOption) (*Entitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataType == nil {
		return nil, errors.New("invalid value for required argument 'DataType'")
	}
	if args.ExternalValue == nil {
		return nil, errors.New("invalid value for required argument 'ExternalValue'")
	}
	if args.MultiValue == nil {
		return nil, errors.New("invalid value for required argument 'MultiValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Entitlement
	err := ctx.RegisterResource("okta:index/entitlement:Entitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntitlement gets an existing Entitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntitlementState, opts ...pulumi.ResourceOption) (*Entitlement, error) {
	var resource Entitlement
	err := ctx.ReadResource("okta:index/entitlement:Entitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entitlement resources.
type entitlementState struct {
	// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
	DataType *string `pulumi:"dataType"`
	// The description of an entitlement property.
	Description *string `pulumi:"description"`
	// The value of an entitlement property.
	ExternalValue *string `pulumi:"externalValue"`
	// The property that determines if the entitlement property can hold multiple values.
	MultiValue *bool `pulumi:"multiValue"`
	// The display name for an entitlement property.
	Name *string `pulumi:"name"`
	// Representation of a resource
	Parent *EntitlementParent `pulumi:"parent"`
	// The Okta app instance, in ORN format.
	ParentResourceOrn *string `pulumi:"parentResourceOrn"`
	// The value of the entitlement property.
	Value  *string            `pulumi:"value"`
	Values []EntitlementValue `pulumi:"values"`
}

type EntitlementState struct {
	// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
	DataType pulumi.StringPtrInput
	// The description of an entitlement property.
	Description pulumi.StringPtrInput
	// The value of an entitlement property.
	ExternalValue pulumi.StringPtrInput
	// The property that determines if the entitlement property can hold multiple values.
	MultiValue pulumi.BoolPtrInput
	// The display name for an entitlement property.
	Name pulumi.StringPtrInput
	// Representation of a resource
	Parent EntitlementParentPtrInput
	// The Okta app instance, in ORN format.
	ParentResourceOrn pulumi.StringPtrInput
	// The value of the entitlement property.
	Value  pulumi.StringPtrInput
	Values EntitlementValueArrayInput
}

func (EntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementState)(nil)).Elem()
}

type entitlementArgs struct {
	// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
	DataType string `pulumi:"dataType"`
	// The description of an entitlement property.
	Description *string `pulumi:"description"`
	// The value of an entitlement property.
	ExternalValue string `pulumi:"externalValue"`
	// The property that determines if the entitlement property can hold multiple values.
	MultiValue bool `pulumi:"multiValue"`
	// The display name for an entitlement property.
	Name *string `pulumi:"name"`
	// Representation of a resource
	Parent *EntitlementParent `pulumi:"parent"`
	// The Okta app instance, in ORN format.
	ParentResourceOrn *string `pulumi:"parentResourceOrn"`
	// The value of the entitlement property.
	Value  *string            `pulumi:"value"`
	Values []EntitlementValue `pulumi:"values"`
}

// The set of arguments for constructing a Entitlement resource.
type EntitlementArgs struct {
	// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
	DataType pulumi.StringInput
	// The description of an entitlement property.
	Description pulumi.StringPtrInput
	// The value of an entitlement property.
	ExternalValue pulumi.StringInput
	// The property that determines if the entitlement property can hold multiple values.
	MultiValue pulumi.BoolInput
	// The display name for an entitlement property.
	Name pulumi.StringPtrInput
	// Representation of a resource
	Parent EntitlementParentPtrInput
	// The Okta app instance, in ORN format.
	ParentResourceOrn pulumi.StringPtrInput
	// The value of the entitlement property.
	Value  pulumi.StringPtrInput
	Values EntitlementValueArrayInput
}

func (EntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entitlementArgs)(nil)).Elem()
}

type EntitlementInput interface {
	pulumi.Input

	ToEntitlementOutput() EntitlementOutput
	ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput
}

func (*Entitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**Entitlement)(nil)).Elem()
}

func (i *Entitlement) ToEntitlementOutput() EntitlementOutput {
	return i.ToEntitlementOutputWithContext(context.Background())
}

func (i *Entitlement) ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementOutput)
}

// EntitlementArrayInput is an input type that accepts EntitlementArray and EntitlementArrayOutput values.
// You can construct a concrete instance of `EntitlementArrayInput` via:
//
//	EntitlementArray{ EntitlementArgs{...} }
type EntitlementArrayInput interface {
	pulumi.Input

	ToEntitlementArrayOutput() EntitlementArrayOutput
	ToEntitlementArrayOutputWithContext(context.Context) EntitlementArrayOutput
}

type EntitlementArray []EntitlementInput

func (EntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entitlement)(nil)).Elem()
}

func (i EntitlementArray) ToEntitlementArrayOutput() EntitlementArrayOutput {
	return i.ToEntitlementArrayOutputWithContext(context.Background())
}

func (i EntitlementArray) ToEntitlementArrayOutputWithContext(ctx context.Context) EntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementArrayOutput)
}

// EntitlementMapInput is an input type that accepts EntitlementMap and EntitlementMapOutput values.
// You can construct a concrete instance of `EntitlementMapInput` via:
//
//	EntitlementMap{ "key": EntitlementArgs{...} }
type EntitlementMapInput interface {
	pulumi.Input

	ToEntitlementMapOutput() EntitlementMapOutput
	ToEntitlementMapOutputWithContext(context.Context) EntitlementMapOutput
}

type EntitlementMap map[string]EntitlementInput

func (EntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entitlement)(nil)).Elem()
}

func (i EntitlementMap) ToEntitlementMapOutput() EntitlementMapOutput {
	return i.ToEntitlementMapOutputWithContext(context.Background())
}

func (i EntitlementMap) ToEntitlementMapOutputWithContext(ctx context.Context) EntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitlementMapOutput)
}

type EntitlementOutput struct{ *pulumi.OutputState }

func (EntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entitlement)(nil)).Elem()
}

func (o EntitlementOutput) ToEntitlementOutput() EntitlementOutput {
	return o
}

func (o EntitlementOutput) ToEntitlementOutputWithContext(ctx context.Context) EntitlementOutput {
	return o
}

// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
func (o EntitlementOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

// The description of an entitlement property.
func (o EntitlementOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The value of an entitlement property.
func (o EntitlementOutput) ExternalValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.ExternalValue }).(pulumi.StringOutput)
}

// The property that determines if the entitlement property can hold multiple values.
func (o EntitlementOutput) MultiValue() pulumi.BoolOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.BoolOutput { return v.MultiValue }).(pulumi.BoolOutput)
}

// The display name for an entitlement property.
func (o EntitlementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Representation of a resource
func (o EntitlementOutput) Parent() EntitlementParentPtrOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementParentPtrOutput { return v.Parent }).(EntitlementParentPtrOutput)
}

// The Okta app instance, in ORN format.
func (o EntitlementOutput) ParentResourceOrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringOutput { return v.ParentResourceOrn }).(pulumi.StringOutput)
}

// The value of the entitlement property.
func (o EntitlementOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entitlement) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

func (o EntitlementOutput) Values() EntitlementValueArrayOutput {
	return o.ApplyT(func(v *Entitlement) EntitlementValueArrayOutput { return v.Values }).(EntitlementValueArrayOutput)
}

type EntitlementArrayOutput struct{ *pulumi.OutputState }

func (EntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entitlement)(nil)).Elem()
}

func (o EntitlementArrayOutput) ToEntitlementArrayOutput() EntitlementArrayOutput {
	return o
}

func (o EntitlementArrayOutput) ToEntitlementArrayOutputWithContext(ctx context.Context) EntitlementArrayOutput {
	return o
}

func (o EntitlementArrayOutput) Index(i pulumi.IntInput) EntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Entitlement {
		return vs[0].([]*Entitlement)[vs[1].(int)]
	}).(EntitlementOutput)
}

type EntitlementMapOutput struct{ *pulumi.OutputState }

func (EntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entitlement)(nil)).Elem()
}

func (o EntitlementMapOutput) ToEntitlementMapOutput() EntitlementMapOutput {
	return o
}

func (o EntitlementMapOutput) ToEntitlementMapOutputWithContext(ctx context.Context) EntitlementMapOutput {
	return o
}

func (o EntitlementMapOutput) MapIndex(k pulumi.StringInput) EntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Entitlement {
		return vs[0].(map[string]*Entitlement)[vs[1].(string)]
	}).(EntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementInput)(nil)).Elem(), &Entitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementArrayInput)(nil)).Elem(), EntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitlementMapInput)(nil)).Elem(), EntitlementMap{})
	pulumi.RegisterOutputType(EntitlementOutput{})
	pulumi.RegisterOutputType(EntitlementArrayOutput{})
	pulumi.RegisterOutputType(EntitlementMapOutput{})
}
