// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates security question factor for a user.
//
// This resource allows you to create and configure security question factor for a user.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/factor"
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUser, err := user.NewUser(ctx, "exampleUser", &user.UserArgs{
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Smith"),
//				Login:     pulumi.String("john.smith@example.com"),
//				Email:     pulumi.String("john.smith@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserSecurityQuestions := okta.GetUserSecurityQuestionsOutput(ctx, okta.GetUserSecurityQuestionsOutputArgs{
//				UserId: exampleUser.ID(),
//			}, nil)
//			exampleFactor, err := factor.NewFactor(ctx, "exampleFactor", &factor.FactorArgs{
//				ProviderId: pulumi.String("okta_question"),
//				Active:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewUserFactorQuestion(ctx, "exampleUserFactorQuestion", &okta.UserFactorQuestionArgs{
//				UserId: exampleUser.ID(),
//				Key: exampleUserSecurityQuestions.ApplyT(func(exampleUserSecurityQuestions okta.GetUserSecurityQuestionsResult) (*string, error) {
//					return &exampleUserSecurityQuestions.Questions[0].Key, nil
//				}).(pulumi.StringPtrOutput),
//				Answer: pulumi.String("meatball"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleFactor,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Security question factor for a user can be imported via the `user_id` and the `factor_id`.
//
// ```sh
// $ pulumi import okta:index/userFactorQuestion:UserFactorQuestion example &#60;user id&#62;/&#60;question factor id&#62;
// ```
type UserFactorQuestion struct {
	pulumi.CustomResourceState

	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringOutput `pulumi:"answer"`
	// Security question unique key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The status of the security question factor.
	Status pulumi.StringOutput `pulumi:"status"`
	// Display text for security question.
	Text pulumi.StringOutput `pulumi:"text"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserFactorQuestion registers a new resource with the given unique name, arguments, and options.
func NewUserFactorQuestion(ctx *pulumi.Context,
	name string, args *UserFactorQuestionArgs, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Answer == nil {
		return nil, errors.New("invalid value for required argument 'Answer'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Answer != nil {
		args.Answer = pulumi.ToSecret(args.Answer).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"answer",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserFactorQuestion
	err := ctx.RegisterResource("okta:index/userFactorQuestion:UserFactorQuestion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserFactorQuestion gets an existing UserFactorQuestion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFactorQuestion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserFactorQuestionState, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	var resource UserFactorQuestion
	err := ctx.ReadResource("okta:index/userFactorQuestion:UserFactorQuestion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserFactorQuestion resources.
type userFactorQuestionState struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer *string `pulumi:"answer"`
	// Security question unique key.
	Key *string `pulumi:"key"`
	// The status of the security question factor.
	Status *string `pulumi:"status"`
	// Display text for security question.
	Text *string `pulumi:"text"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId *string `pulumi:"userId"`
}

type UserFactorQuestionState struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringPtrInput
	// Security question unique key.
	Key pulumi.StringPtrInput
	// The status of the security question factor.
	Status pulumi.StringPtrInput
	// Display text for security question.
	Text pulumi.StringPtrInput
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringPtrInput
}

func (UserFactorQuestionState) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionState)(nil)).Elem()
}

type userFactorQuestionArgs struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer string `pulumi:"answer"`
	// Security question unique key.
	Key string `pulumi:"key"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserFactorQuestion resource.
type UserFactorQuestionArgs struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringInput
	// Security question unique key.
	Key pulumi.StringInput
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringInput
}

func (UserFactorQuestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionArgs)(nil)).Elem()
}

type UserFactorQuestionInput interface {
	pulumi.Input

	ToUserFactorQuestionOutput() UserFactorQuestionOutput
	ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput
}

func (*UserFactorQuestion) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil)).Elem()
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return i.ToUserFactorQuestionOutputWithContext(context.Background())
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionOutput)
}

// UserFactorQuestionArrayInput is an input type that accepts UserFactorQuestionArray and UserFactorQuestionArrayOutput values.
// You can construct a concrete instance of `UserFactorQuestionArrayInput` via:
//
//	UserFactorQuestionArray{ UserFactorQuestionArgs{...} }
type UserFactorQuestionArrayInput interface {
	pulumi.Input

	ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput
	ToUserFactorQuestionArrayOutputWithContext(context.Context) UserFactorQuestionArrayOutput
}

type UserFactorQuestionArray []UserFactorQuestionInput

func (UserFactorQuestionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return i.ToUserFactorQuestionArrayOutputWithContext(context.Background())
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionArrayOutput)
}

// UserFactorQuestionMapInput is an input type that accepts UserFactorQuestionMap and UserFactorQuestionMapOutput values.
// You can construct a concrete instance of `UserFactorQuestionMapInput` via:
//
//	UserFactorQuestionMap{ "key": UserFactorQuestionArgs{...} }
type UserFactorQuestionMapInput interface {
	pulumi.Input

	ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput
	ToUserFactorQuestionMapOutputWithContext(context.Context) UserFactorQuestionMapOutput
}

type UserFactorQuestionMap map[string]UserFactorQuestionInput

func (UserFactorQuestionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return i.ToUserFactorQuestionMapOutputWithContext(context.Background())
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionMapOutput)
}

type UserFactorQuestionOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return o
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return o
}

// Security question answer. Note here that answer won't be set during the resource import.
func (o UserFactorQuestionOutput) Answer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Answer }).(pulumi.StringOutput)
}

// Security question unique key.
func (o UserFactorQuestionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The status of the security question factor.
func (o UserFactorQuestionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Display text for security question.
func (o UserFactorQuestionOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Text }).(pulumi.StringOutput)
}

// ID of the user. Resource will be recreated when `userId` changes.
func (o UserFactorQuestionOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserFactorQuestionArrayOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) Index(i pulumi.IntInput) UserFactorQuestionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserFactorQuestion {
		return vs[0].([]*UserFactorQuestion)[vs[1].(int)]
	}).(UserFactorQuestionOutput)
}

type UserFactorQuestionMapOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) MapIndex(k pulumi.StringInput) UserFactorQuestionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserFactorQuestion {
		return vs[0].(map[string]*UserFactorQuestion)[vs[1].(string)]
	}).(UserFactorQuestionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionInput)(nil)).Elem(), &UserFactorQuestion{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionArrayInput)(nil)).Elem(), UserFactorQuestionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionMapInput)(nil)).Elem(), UserFactorQuestionMap{})
	pulumi.RegisterOutputType(UserFactorQuestionOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionArrayOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionMapOutput{})
}
