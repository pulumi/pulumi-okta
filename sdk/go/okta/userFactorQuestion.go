// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource to manage a question factor for a user
type UserFactorQuestion struct {
	pulumi.CustomResourceState

	// User password security answer
	Answer pulumi.StringOutput `pulumi:"answer"`
	// Unique key for question
	Key pulumi.StringOutput `pulumi:"key"`
	// User factor status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Display text for question
	Text pulumi.StringOutput `pulumi:"text"`
	// ID of a Okta User
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserFactorQuestion registers a new resource with the given unique name, arguments, and options.
func NewUserFactorQuestion(ctx *pulumi.Context,
	name string, args *UserFactorQuestionArgs, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Answer == nil {
		return nil, errors.New("invalid value for required argument 'Answer'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Answer != nil {
		args.Answer = pulumi.ToSecret(args.Answer).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"answer",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserFactorQuestion
	err := ctx.RegisterResource("okta:index/userFactorQuestion:UserFactorQuestion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserFactorQuestion gets an existing UserFactorQuestion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFactorQuestion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserFactorQuestionState, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	var resource UserFactorQuestion
	err := ctx.ReadResource("okta:index/userFactorQuestion:UserFactorQuestion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserFactorQuestion resources.
type userFactorQuestionState struct {
	// User password security answer
	Answer *string `pulumi:"answer"`
	// Unique key for question
	Key *string `pulumi:"key"`
	// User factor status.
	Status *string `pulumi:"status"`
	// Display text for question
	Text *string `pulumi:"text"`
	// ID of a Okta User
	UserId *string `pulumi:"userId"`
}

type UserFactorQuestionState struct {
	// User password security answer
	Answer pulumi.StringPtrInput
	// Unique key for question
	Key pulumi.StringPtrInput
	// User factor status.
	Status pulumi.StringPtrInput
	// Display text for question
	Text pulumi.StringPtrInput
	// ID of a Okta User
	UserId pulumi.StringPtrInput
}

func (UserFactorQuestionState) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionState)(nil)).Elem()
}

type userFactorQuestionArgs struct {
	// User password security answer
	Answer string `pulumi:"answer"`
	// Unique key for question
	Key string `pulumi:"key"`
	// ID of a Okta User
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserFactorQuestion resource.
type UserFactorQuestionArgs struct {
	// User password security answer
	Answer pulumi.StringInput
	// Unique key for question
	Key pulumi.StringInput
	// ID of a Okta User
	UserId pulumi.StringInput
}

func (UserFactorQuestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionArgs)(nil)).Elem()
}

type UserFactorQuestionInput interface {
	pulumi.Input

	ToUserFactorQuestionOutput() UserFactorQuestionOutput
	ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput
}

func (*UserFactorQuestion) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil)).Elem()
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return i.ToUserFactorQuestionOutputWithContext(context.Background())
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionOutput)
}

func (i *UserFactorQuestion) ToOutput(ctx context.Context) pulumix.Output[*UserFactorQuestion] {
	return pulumix.Output[*UserFactorQuestion]{
		OutputState: i.ToUserFactorQuestionOutputWithContext(ctx).OutputState,
	}
}

// UserFactorQuestionArrayInput is an input type that accepts UserFactorQuestionArray and UserFactorQuestionArrayOutput values.
// You can construct a concrete instance of `UserFactorQuestionArrayInput` via:
//
//	UserFactorQuestionArray{ UserFactorQuestionArgs{...} }
type UserFactorQuestionArrayInput interface {
	pulumi.Input

	ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput
	ToUserFactorQuestionArrayOutputWithContext(context.Context) UserFactorQuestionArrayOutput
}

type UserFactorQuestionArray []UserFactorQuestionInput

func (UserFactorQuestionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return i.ToUserFactorQuestionArrayOutputWithContext(context.Background())
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionArrayOutput)
}

func (i UserFactorQuestionArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserFactorQuestion] {
	return pulumix.Output[[]*UserFactorQuestion]{
		OutputState: i.ToUserFactorQuestionArrayOutputWithContext(ctx).OutputState,
	}
}

// UserFactorQuestionMapInput is an input type that accepts UserFactorQuestionMap and UserFactorQuestionMapOutput values.
// You can construct a concrete instance of `UserFactorQuestionMapInput` via:
//
//	UserFactorQuestionMap{ "key": UserFactorQuestionArgs{...} }
type UserFactorQuestionMapInput interface {
	pulumi.Input

	ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput
	ToUserFactorQuestionMapOutputWithContext(context.Context) UserFactorQuestionMapOutput
}

type UserFactorQuestionMap map[string]UserFactorQuestionInput

func (UserFactorQuestionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return i.ToUserFactorQuestionMapOutputWithContext(context.Background())
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionMapOutput)
}

func (i UserFactorQuestionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserFactorQuestion] {
	return pulumix.Output[map[string]*UserFactorQuestion]{
		OutputState: i.ToUserFactorQuestionMapOutputWithContext(ctx).OutputState,
	}
}

type UserFactorQuestionOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return o
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return o
}

func (o UserFactorQuestionOutput) ToOutput(ctx context.Context) pulumix.Output[*UserFactorQuestion] {
	return pulumix.Output[*UserFactorQuestion]{
		OutputState: o.OutputState,
	}
}

// User password security answer
func (o UserFactorQuestionOutput) Answer() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Answer }).(pulumi.StringOutput)
}

// Unique key for question
func (o UserFactorQuestionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// User factor status.
func (o UserFactorQuestionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Display text for question
func (o UserFactorQuestionOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.Text }).(pulumi.StringOutput)
}

// ID of a Okta User
func (o UserFactorQuestionOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserFactorQuestion) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserFactorQuestionArrayOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserFactorQuestion] {
	return pulumix.Output[[]*UserFactorQuestion]{
		OutputState: o.OutputState,
	}
}

func (o UserFactorQuestionArrayOutput) Index(i pulumi.IntInput) UserFactorQuestionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserFactorQuestion {
		return vs[0].([]*UserFactorQuestion)[vs[1].(int)]
	}).(UserFactorQuestionOutput)
}

type UserFactorQuestionMapOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFactorQuestion)(nil)).Elem()
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserFactorQuestion] {
	return pulumix.Output[map[string]*UserFactorQuestion]{
		OutputState: o.OutputState,
	}
}

func (o UserFactorQuestionMapOutput) MapIndex(k pulumi.StringInput) UserFactorQuestionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserFactorQuestion {
		return vs[0].(map[string]*UserFactorQuestion)[vs[1].(string)]
	}).(UserFactorQuestionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionInput)(nil)).Elem(), &UserFactorQuestion{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionArrayInput)(nil)).Elem(), UserFactorQuestionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFactorQuestionMapInput)(nil)).Elem(), UserFactorQuestionMap{})
	pulumi.RegisterOutputType(UserFactorQuestionOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionArrayOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionMapOutput{})
}
