// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates security question factor for a user.
//
// This resource allows you to create and configure security question factor for a user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/factor"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/user"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleUser, err := user.NewUser(ctx, "exampleUser", &user.UserArgs{
// 			FirstName: pulumi.String("John"),
// 			LastName:  pulumi.String("Smith"),
// 			Login:     pulumi.String("john.smith@example.com"),
// 			Email:     pulumi.String("john.smith@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleFactor, err := factor.NewFactor(ctx, "exampleFactor", &factor.FactorArgs{
// 			ProviderId: pulumi.String("okta_question"),
// 			Active:     pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = okta.NewUserFactorQuestion(ctx, "exampleUserFactorQuestion", &okta.UserFactorQuestionArgs{
// 			UserId: exampleUser.ID(),
// 			Key: exampleUserSecurityQuestions.ApplyT(func(exampleUserSecurityQuestions GetUserSecurityQuestionsResult) (string, error) {
// 				return exampleUserSecurityQuestions.Questions[0].Key, nil
// 			}).(pulumi.StringOutput),
// 			Answer: pulumi.String("meatball"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleFactor,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Security question factor for a user can be imported via the `user_id` and the `factor_id`.
//
// ```sh
//  $ pulumi import okta:index/userFactorQuestion:UserFactorQuestion example <user id>/<question factor id>
// ```
type UserFactorQuestion struct {
	pulumi.CustomResourceState

	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringOutput `pulumi:"answer"`
	// Security question unique key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The status of the security question factor.
	Status pulumi.StringOutput `pulumi:"status"`
	// Display text for security question.
	Text pulumi.StringOutput `pulumi:"text"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserFactorQuestion registers a new resource with the given unique name, arguments, and options.
func NewUserFactorQuestion(ctx *pulumi.Context,
	name string, args *UserFactorQuestionArgs, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Answer == nil {
		return nil, errors.New("invalid value for required argument 'Answer'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource UserFactorQuestion
	err := ctx.RegisterResource("okta:index/userFactorQuestion:UserFactorQuestion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserFactorQuestion gets an existing UserFactorQuestion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFactorQuestion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserFactorQuestionState, opts ...pulumi.ResourceOption) (*UserFactorQuestion, error) {
	var resource UserFactorQuestion
	err := ctx.ReadResource("okta:index/userFactorQuestion:UserFactorQuestion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserFactorQuestion resources.
type userFactorQuestionState struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer *string `pulumi:"answer"`
	// Security question unique key.
	Key *string `pulumi:"key"`
	// The status of the security question factor.
	Status *string `pulumi:"status"`
	// Display text for security question.
	Text *string `pulumi:"text"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId *string `pulumi:"userId"`
}

type UserFactorQuestionState struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringPtrInput
	// Security question unique key.
	Key pulumi.StringPtrInput
	// The status of the security question factor.
	Status pulumi.StringPtrInput
	// Display text for security question.
	Text pulumi.StringPtrInput
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringPtrInput
}

func (UserFactorQuestionState) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionState)(nil)).Elem()
}

type userFactorQuestionArgs struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer string `pulumi:"answer"`
	// Security question unique key.
	Key string `pulumi:"key"`
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserFactorQuestion resource.
type UserFactorQuestionArgs struct {
	// Security question answer. Note here that answer won't be set during the resource import.
	Answer pulumi.StringInput
	// Security question unique key.
	Key pulumi.StringInput
	// ID of the user. Resource will be recreated when `userId` changes.
	UserId pulumi.StringInput
}

func (UserFactorQuestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userFactorQuestionArgs)(nil)).Elem()
}

type UserFactorQuestionInput interface {
	pulumi.Input

	ToUserFactorQuestionOutput() UserFactorQuestionOutput
	ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput
}

func (*UserFactorQuestion) ElementType() reflect.Type {
	return reflect.TypeOf((*UserFactorQuestion)(nil))
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return i.ToUserFactorQuestionOutputWithContext(context.Background())
}

func (i *UserFactorQuestion) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionOutput)
}

func (i *UserFactorQuestion) ToUserFactorQuestionPtrOutput() UserFactorQuestionPtrOutput {
	return i.ToUserFactorQuestionPtrOutputWithContext(context.Background())
}

func (i *UserFactorQuestion) ToUserFactorQuestionPtrOutputWithContext(ctx context.Context) UserFactorQuestionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionPtrOutput)
}

type UserFactorQuestionPtrInput interface {
	pulumi.Input

	ToUserFactorQuestionPtrOutput() UserFactorQuestionPtrOutput
	ToUserFactorQuestionPtrOutputWithContext(ctx context.Context) UserFactorQuestionPtrOutput
}

type userFactorQuestionPtrType UserFactorQuestionArgs

func (*userFactorQuestionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil))
}

func (i *userFactorQuestionPtrType) ToUserFactorQuestionPtrOutput() UserFactorQuestionPtrOutput {
	return i.ToUserFactorQuestionPtrOutputWithContext(context.Background())
}

func (i *userFactorQuestionPtrType) ToUserFactorQuestionPtrOutputWithContext(ctx context.Context) UserFactorQuestionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionPtrOutput)
}

// UserFactorQuestionArrayInput is an input type that accepts UserFactorQuestionArray and UserFactorQuestionArrayOutput values.
// You can construct a concrete instance of `UserFactorQuestionArrayInput` via:
//
//          UserFactorQuestionArray{ UserFactorQuestionArgs{...} }
type UserFactorQuestionArrayInput interface {
	pulumi.Input

	ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput
	ToUserFactorQuestionArrayOutputWithContext(context.Context) UserFactorQuestionArrayOutput
}

type UserFactorQuestionArray []UserFactorQuestionInput

func (UserFactorQuestionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return i.ToUserFactorQuestionArrayOutputWithContext(context.Background())
}

func (i UserFactorQuestionArray) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionArrayOutput)
}

// UserFactorQuestionMapInput is an input type that accepts UserFactorQuestionMap and UserFactorQuestionMapOutput values.
// You can construct a concrete instance of `UserFactorQuestionMapInput` via:
//
//          UserFactorQuestionMap{ "key": UserFactorQuestionArgs{...} }
type UserFactorQuestionMapInput interface {
	pulumi.Input

	ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput
	ToUserFactorQuestionMapOutputWithContext(context.Context) UserFactorQuestionMapOutput
}

type UserFactorQuestionMap map[string]UserFactorQuestionInput

func (UserFactorQuestionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserFactorQuestion)(nil)).Elem()
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return i.ToUserFactorQuestionMapOutputWithContext(context.Background())
}

func (i UserFactorQuestionMap) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFactorQuestionMapOutput)
}

type UserFactorQuestionOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserFactorQuestion)(nil))
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutput() UserFactorQuestionOutput {
	return o
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionOutputWithContext(ctx context.Context) UserFactorQuestionOutput {
	return o
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionPtrOutput() UserFactorQuestionPtrOutput {
	return o.ToUserFactorQuestionPtrOutputWithContext(context.Background())
}

func (o UserFactorQuestionOutput) ToUserFactorQuestionPtrOutputWithContext(ctx context.Context) UserFactorQuestionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserFactorQuestion) *UserFactorQuestion {
		return &v
	}).(UserFactorQuestionPtrOutput)
}

type UserFactorQuestionPtrOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserFactorQuestion)(nil))
}

func (o UserFactorQuestionPtrOutput) ToUserFactorQuestionPtrOutput() UserFactorQuestionPtrOutput {
	return o
}

func (o UserFactorQuestionPtrOutput) ToUserFactorQuestionPtrOutputWithContext(ctx context.Context) UserFactorQuestionPtrOutput {
	return o
}

func (o UserFactorQuestionPtrOutput) Elem() UserFactorQuestionOutput {
	return o.ApplyT(func(v *UserFactorQuestion) UserFactorQuestion {
		if v != nil {
			return *v
		}
		var ret UserFactorQuestion
		return ret
	}).(UserFactorQuestionOutput)
}

type UserFactorQuestionArrayOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserFactorQuestion)(nil))
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutput() UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) ToUserFactorQuestionArrayOutputWithContext(ctx context.Context) UserFactorQuestionArrayOutput {
	return o
}

func (o UserFactorQuestionArrayOutput) Index(i pulumi.IntInput) UserFactorQuestionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserFactorQuestion {
		return vs[0].([]UserFactorQuestion)[vs[1].(int)]
	}).(UserFactorQuestionOutput)
}

type UserFactorQuestionMapOutput struct{ *pulumi.OutputState }

func (UserFactorQuestionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserFactorQuestion)(nil))
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutput() UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) ToUserFactorQuestionMapOutputWithContext(ctx context.Context) UserFactorQuestionMapOutput {
	return o
}

func (o UserFactorQuestionMapOutput) MapIndex(k pulumi.StringInput) UserFactorQuestionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserFactorQuestion {
		return vs[0].(map[string]UserFactorQuestion)[vs[1].(string)]
	}).(UserFactorQuestionOutput)
}

func init() {
	pulumi.RegisterOutputType(UserFactorQuestionOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionPtrOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionArrayOutput{})
	pulumi.RegisterOutputType(UserFactorQuestionMapOutput{})
}
