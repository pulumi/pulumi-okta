// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Assigns groups to an application.
//
// This resource allows you to create multiple App Group assignments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"application profile field": "application profile value",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := okta.NewAppGroupAssignments(ctx, "example", &okta.AppGroupAssignmentsArgs{
// 			AppId: pulumi.String("<app id>"),
// 			Groups: AppGroupAssignmentsGroupArray{
// 				&AppGroupAssignmentsGroupArgs{
// 					Id:       pulumi.String("<group id>"),
// 					Priority: pulumi.Int(1),
// 				},
// 				&AppGroupAssignmentsGroupArgs{
// 					Id:       pulumi.String("<another group id>"),
// 					Priority: pulumi.Int(2),
// 					Profile:  pulumi.String(json0),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// !> **NOTE** When using this resource in conjunction with other application resources (e.g. `app.OAuth`) it is advisable to add the following `lifecycle` argument to the associated `app_*` resources to prevent the groups being unassigned on subsequent runs:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/app"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := app.NewOAuth(ctx, "app", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **IMPORTANT:** When using `AppGroupAssignments` it is expected to manage ALL group assignments for the target application.
//
// ## Import
//
// An application's group assignments can be imported via `app_id`.
//
// ```sh
//  $ pulumi import okta:index/appGroupAssignments:AppGroupAssignments example &#60;app_id&#62;
// ```
type AppGroupAssignments struct {
	pulumi.CustomResourceState

	// The ID of the application to assign a group to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// A group to assign the app to.
	Groups AppGroupAssignmentsGroupArrayOutput `pulumi:"groups"`
}

// NewAppGroupAssignments registers a new resource with the given unique name, arguments, and options.
func NewAppGroupAssignments(ctx *pulumi.Context,
	name string, args *AppGroupAssignmentsArgs, opts ...pulumi.ResourceOption) (*AppGroupAssignments, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	var resource AppGroupAssignments
	err := ctx.RegisterResource("okta:index/appGroupAssignments:AppGroupAssignments", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppGroupAssignments gets an existing AppGroupAssignments resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppGroupAssignments(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppGroupAssignmentsState, opts ...pulumi.ResourceOption) (*AppGroupAssignments, error) {
	var resource AppGroupAssignments
	err := ctx.ReadResource("okta:index/appGroupAssignments:AppGroupAssignments", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppGroupAssignments resources.
type appGroupAssignmentsState struct {
	// The ID of the application to assign a group to.
	AppId *string `pulumi:"appId"`
	// A group to assign the app to.
	Groups []AppGroupAssignmentsGroup `pulumi:"groups"`
}

type AppGroupAssignmentsState struct {
	// The ID of the application to assign a group to.
	AppId pulumi.StringPtrInput
	// A group to assign the app to.
	Groups AppGroupAssignmentsGroupArrayInput
}

func (AppGroupAssignmentsState) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupAssignmentsState)(nil)).Elem()
}

type appGroupAssignmentsArgs struct {
	// The ID of the application to assign a group to.
	AppId string `pulumi:"appId"`
	// A group to assign the app to.
	Groups []AppGroupAssignmentsGroup `pulumi:"groups"`
}

// The set of arguments for constructing a AppGroupAssignments resource.
type AppGroupAssignmentsArgs struct {
	// The ID of the application to assign a group to.
	AppId pulumi.StringInput
	// A group to assign the app to.
	Groups AppGroupAssignmentsGroupArrayInput
}

func (AppGroupAssignmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appGroupAssignmentsArgs)(nil)).Elem()
}

type AppGroupAssignmentsInput interface {
	pulumi.Input

	ToAppGroupAssignmentsOutput() AppGroupAssignmentsOutput
	ToAppGroupAssignmentsOutputWithContext(ctx context.Context) AppGroupAssignmentsOutput
}

func (*AppGroupAssignments) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroupAssignments)(nil)).Elem()
}

func (i *AppGroupAssignments) ToAppGroupAssignmentsOutput() AppGroupAssignmentsOutput {
	return i.ToAppGroupAssignmentsOutputWithContext(context.Background())
}

func (i *AppGroupAssignments) ToAppGroupAssignmentsOutputWithContext(ctx context.Context) AppGroupAssignmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupAssignmentsOutput)
}

// AppGroupAssignmentsArrayInput is an input type that accepts AppGroupAssignmentsArray and AppGroupAssignmentsArrayOutput values.
// You can construct a concrete instance of `AppGroupAssignmentsArrayInput` via:
//
//          AppGroupAssignmentsArray{ AppGroupAssignmentsArgs{...} }
type AppGroupAssignmentsArrayInput interface {
	pulumi.Input

	ToAppGroupAssignmentsArrayOutput() AppGroupAssignmentsArrayOutput
	ToAppGroupAssignmentsArrayOutputWithContext(context.Context) AppGroupAssignmentsArrayOutput
}

type AppGroupAssignmentsArray []AppGroupAssignmentsInput

func (AppGroupAssignmentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroupAssignments)(nil)).Elem()
}

func (i AppGroupAssignmentsArray) ToAppGroupAssignmentsArrayOutput() AppGroupAssignmentsArrayOutput {
	return i.ToAppGroupAssignmentsArrayOutputWithContext(context.Background())
}

func (i AppGroupAssignmentsArray) ToAppGroupAssignmentsArrayOutputWithContext(ctx context.Context) AppGroupAssignmentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupAssignmentsArrayOutput)
}

// AppGroupAssignmentsMapInput is an input type that accepts AppGroupAssignmentsMap and AppGroupAssignmentsMapOutput values.
// You can construct a concrete instance of `AppGroupAssignmentsMapInput` via:
//
//          AppGroupAssignmentsMap{ "key": AppGroupAssignmentsArgs{...} }
type AppGroupAssignmentsMapInput interface {
	pulumi.Input

	ToAppGroupAssignmentsMapOutput() AppGroupAssignmentsMapOutput
	ToAppGroupAssignmentsMapOutputWithContext(context.Context) AppGroupAssignmentsMapOutput
}

type AppGroupAssignmentsMap map[string]AppGroupAssignmentsInput

func (AppGroupAssignmentsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroupAssignments)(nil)).Elem()
}

func (i AppGroupAssignmentsMap) ToAppGroupAssignmentsMapOutput() AppGroupAssignmentsMapOutput {
	return i.ToAppGroupAssignmentsMapOutputWithContext(context.Background())
}

func (i AppGroupAssignmentsMap) ToAppGroupAssignmentsMapOutputWithContext(ctx context.Context) AppGroupAssignmentsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppGroupAssignmentsMapOutput)
}

type AppGroupAssignmentsOutput struct{ *pulumi.OutputState }

func (AppGroupAssignmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppGroupAssignments)(nil)).Elem()
}

func (o AppGroupAssignmentsOutput) ToAppGroupAssignmentsOutput() AppGroupAssignmentsOutput {
	return o
}

func (o AppGroupAssignmentsOutput) ToAppGroupAssignmentsOutputWithContext(ctx context.Context) AppGroupAssignmentsOutput {
	return o
}

// The ID of the application to assign a group to.
func (o AppGroupAssignmentsOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppGroupAssignments) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// A group to assign the app to.
func (o AppGroupAssignmentsOutput) Groups() AppGroupAssignmentsGroupArrayOutput {
	return o.ApplyT(func(v *AppGroupAssignments) AppGroupAssignmentsGroupArrayOutput { return v.Groups }).(AppGroupAssignmentsGroupArrayOutput)
}

type AppGroupAssignmentsArrayOutput struct{ *pulumi.OutputState }

func (AppGroupAssignmentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppGroupAssignments)(nil)).Elem()
}

func (o AppGroupAssignmentsArrayOutput) ToAppGroupAssignmentsArrayOutput() AppGroupAssignmentsArrayOutput {
	return o
}

func (o AppGroupAssignmentsArrayOutput) ToAppGroupAssignmentsArrayOutputWithContext(ctx context.Context) AppGroupAssignmentsArrayOutput {
	return o
}

func (o AppGroupAssignmentsArrayOutput) Index(i pulumi.IntInput) AppGroupAssignmentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppGroupAssignments {
		return vs[0].([]*AppGroupAssignments)[vs[1].(int)]
	}).(AppGroupAssignmentsOutput)
}

type AppGroupAssignmentsMapOutput struct{ *pulumi.OutputState }

func (AppGroupAssignmentsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppGroupAssignments)(nil)).Elem()
}

func (o AppGroupAssignmentsMapOutput) ToAppGroupAssignmentsMapOutput() AppGroupAssignmentsMapOutput {
	return o
}

func (o AppGroupAssignmentsMapOutput) ToAppGroupAssignmentsMapOutputWithContext(ctx context.Context) AppGroupAssignmentsMapOutput {
	return o
}

func (o AppGroupAssignmentsMapOutput) MapIndex(k pulumi.StringInput) AppGroupAssignmentsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppGroupAssignments {
		return vs[0].(map[string]*AppGroupAssignments)[vs[1].(string)]
	}).(AppGroupAssignmentsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupAssignmentsInput)(nil)).Elem(), &AppGroupAssignments{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupAssignmentsArrayInput)(nil)).Elem(), AppGroupAssignmentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppGroupAssignmentsMapInput)(nil)).Elem(), AppGroupAssignmentsMap{})
	pulumi.RegisterOutputType(AppGroupAssignmentsOutput{})
	pulumi.RegisterOutputType(AppGroupAssignmentsArrayOutput{})
	pulumi.RegisterOutputType(AppGroupAssignmentsMapOutput{})
}
