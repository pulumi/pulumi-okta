// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DomainCertificate struct {
	pulumi.CustomResourceState

	// Certificate content
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Certificate chain
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`
	// Domain's ID
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Certificate private key
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Certificate type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDomainCertificate registers a new resource with the given unique name, arguments, and options.
func NewDomainCertificate(ctx *pulumi.Context,
	name string, args *DomainCertificateArgs, opts ...pulumi.ResourceOption) (*DomainCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.CertificateChain == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChain'")
	}
	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainCertificate
	err := ctx.RegisterResource("okta:index/domainCertificate:DomainCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainCertificate gets an existing DomainCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainCertificateState, opts ...pulumi.ResourceOption) (*DomainCertificate, error) {
	var resource DomainCertificate
	err := ctx.ReadResource("okta:index/domainCertificate:DomainCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainCertificate resources.
type domainCertificateState struct {
	// Certificate content
	Certificate *string `pulumi:"certificate"`
	// Certificate chain
	CertificateChain *string `pulumi:"certificateChain"`
	// Domain's ID
	DomainId *string `pulumi:"domainId"`
	// Certificate private key
	PrivateKey *string `pulumi:"privateKey"`
	// Certificate type
	Type *string `pulumi:"type"`
}

type DomainCertificateState struct {
	// Certificate content
	Certificate pulumi.StringPtrInput
	// Certificate chain
	CertificateChain pulumi.StringPtrInput
	// Domain's ID
	DomainId pulumi.StringPtrInput
	// Certificate private key
	PrivateKey pulumi.StringPtrInput
	// Certificate type
	Type pulumi.StringPtrInput
}

func (DomainCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainCertificateState)(nil)).Elem()
}

type domainCertificateArgs struct {
	// Certificate content
	Certificate string `pulumi:"certificate"`
	// Certificate chain
	CertificateChain string `pulumi:"certificateChain"`
	// Domain's ID
	DomainId string `pulumi:"domainId"`
	// Certificate private key
	PrivateKey string `pulumi:"privateKey"`
	// Certificate type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DomainCertificate resource.
type DomainCertificateArgs struct {
	// Certificate content
	Certificate pulumi.StringInput
	// Certificate chain
	CertificateChain pulumi.StringInput
	// Domain's ID
	DomainId pulumi.StringInput
	// Certificate private key
	PrivateKey pulumi.StringInput
	// Certificate type
	Type pulumi.StringInput
}

func (DomainCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainCertificateArgs)(nil)).Elem()
}

type DomainCertificateInput interface {
	pulumi.Input

	ToDomainCertificateOutput() DomainCertificateOutput
	ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput
}

func (*DomainCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificate)(nil)).Elem()
}

func (i *DomainCertificate) ToDomainCertificateOutput() DomainCertificateOutput {
	return i.ToDomainCertificateOutputWithContext(context.Background())
}

func (i *DomainCertificate) ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateOutput)
}

func (i *DomainCertificate) ToOutput(ctx context.Context) pulumix.Output[*DomainCertificate] {
	return pulumix.Output[*DomainCertificate]{
		OutputState: i.ToDomainCertificateOutputWithContext(ctx).OutputState,
	}
}

// DomainCertificateArrayInput is an input type that accepts DomainCertificateArray and DomainCertificateArrayOutput values.
// You can construct a concrete instance of `DomainCertificateArrayInput` via:
//
//	DomainCertificateArray{ DomainCertificateArgs{...} }
type DomainCertificateArrayInput interface {
	pulumi.Input

	ToDomainCertificateArrayOutput() DomainCertificateArrayOutput
	ToDomainCertificateArrayOutputWithContext(context.Context) DomainCertificateArrayOutput
}

type DomainCertificateArray []DomainCertificateInput

func (DomainCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainCertificate)(nil)).Elem()
}

func (i DomainCertificateArray) ToDomainCertificateArrayOutput() DomainCertificateArrayOutput {
	return i.ToDomainCertificateArrayOutputWithContext(context.Background())
}

func (i DomainCertificateArray) ToDomainCertificateArrayOutputWithContext(ctx context.Context) DomainCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateArrayOutput)
}

func (i DomainCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]*DomainCertificate] {
	return pulumix.Output[[]*DomainCertificate]{
		OutputState: i.ToDomainCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

// DomainCertificateMapInput is an input type that accepts DomainCertificateMap and DomainCertificateMapOutput values.
// You can construct a concrete instance of `DomainCertificateMapInput` via:
//
//	DomainCertificateMap{ "key": DomainCertificateArgs{...} }
type DomainCertificateMapInput interface {
	pulumi.Input

	ToDomainCertificateMapOutput() DomainCertificateMapOutput
	ToDomainCertificateMapOutputWithContext(context.Context) DomainCertificateMapOutput
}

type DomainCertificateMap map[string]DomainCertificateInput

func (DomainCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainCertificate)(nil)).Elem()
}

func (i DomainCertificateMap) ToDomainCertificateMapOutput() DomainCertificateMapOutput {
	return i.ToDomainCertificateMapOutputWithContext(context.Background())
}

func (i DomainCertificateMap) ToDomainCertificateMapOutputWithContext(ctx context.Context) DomainCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateMapOutput)
}

func (i DomainCertificateMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainCertificate] {
	return pulumix.Output[map[string]*DomainCertificate]{
		OutputState: i.ToDomainCertificateMapOutputWithContext(ctx).OutputState,
	}
}

type DomainCertificateOutput struct{ *pulumi.OutputState }

func (DomainCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateOutput) ToDomainCertificateOutput() DomainCertificateOutput {
	return o
}

func (o DomainCertificateOutput) ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput {
	return o
}

func (o DomainCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainCertificate] {
	return pulumix.Output[*DomainCertificate]{
		OutputState: o.OutputState,
	}
}

// Certificate content
func (o DomainCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Certificate chain
func (o DomainCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.CertificateChain }).(pulumi.StringOutput)
}

// Domain's ID
func (o DomainCertificateOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Certificate private key
func (o DomainCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Certificate type
func (o DomainCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DomainCertificateArrayOutput struct{ *pulumi.OutputState }

func (DomainCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateArrayOutput) ToDomainCertificateArrayOutput() DomainCertificateArrayOutput {
	return o
}

func (o DomainCertificateArrayOutput) ToDomainCertificateArrayOutputWithContext(ctx context.Context) DomainCertificateArrayOutput {
	return o
}

func (o DomainCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DomainCertificate] {
	return pulumix.Output[[]*DomainCertificate]{
		OutputState: o.OutputState,
	}
}

func (o DomainCertificateArrayOutput) Index(i pulumi.IntInput) DomainCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainCertificate {
		return vs[0].([]*DomainCertificate)[vs[1].(int)]
	}).(DomainCertificateOutput)
}

type DomainCertificateMapOutput struct{ *pulumi.OutputState }

func (DomainCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateMapOutput) ToDomainCertificateMapOutput() DomainCertificateMapOutput {
	return o
}

func (o DomainCertificateMapOutput) ToDomainCertificateMapOutputWithContext(ctx context.Context) DomainCertificateMapOutput {
	return o
}

func (o DomainCertificateMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainCertificate] {
	return pulumix.Output[map[string]*DomainCertificate]{
		OutputState: o.OutputState,
	}
}

func (o DomainCertificateMapOutput) MapIndex(k pulumi.StringInput) DomainCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainCertificate {
		return vs[0].(map[string]*DomainCertificate)[vs[1].(string)]
	}).(DomainCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateInput)(nil)).Elem(), &DomainCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateArrayInput)(nil)).Elem(), DomainCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateMapInput)(nil)).Elem(), DomainCertificateMap{})
	pulumi.RegisterOutputType(DomainCertificateOutput{})
	pulumi.RegisterOutputType(DomainCertificateArrayOutput{})
	pulumi.RegisterOutputType(DomainCertificateMapOutput{})
}
