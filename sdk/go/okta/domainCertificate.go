// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages certificate for the domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewDomain(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewDomainCertificate(ctx, "test", &okta.DomainCertificateArgs{
//				DomainId:         pulumi.Any(okta_domain.Test.Id),
//				Type:             pulumi.String("PEM"),
//				Certificate:      pulumi.String("-----BEGIN CERTIFICATE-----\nMIIFNzCCBB+gAwIBAgISBAXomJWRama3ypu8TIxdA9wzMA0GCSqGSIb3DQEBCwUA\nMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD\nEwJSMzAeFw0yMTAyMTAwNTEzMDVaFw0yMTA1MTEwNTEzMDVaMCQxIjAgBgNVBAMT\nGWFuaXRhdGVzdC5zaWdtYW5ldGNvcnAudXMwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQC5cyk6x63iBJSWvtgsOBqIxfO8euPHcRnyWsL9dsvnbNyOnyvc\nqFWxdiW3sh2cItzYtoN1Zfgj5lWGOVXbHxP0VaNG9fHVX3+NHP6LFHQz92BzAYQm\npqi9zaP/aKJklk6LdPFbVLGhuZfm34+ijW9YsgLTKR2WTaZJK5QtamVVmP+VsSCl\na2ifFzjz2FCkMMEc/Y0zUyP+en/mbL71K+VnpZdlEC1s38EvjRTFKFZTKVw5wpWg\nCZQq/AZYj9RxR23IIuRcUJ8TQ2pyoc3kIXPWjiIarSgBlA8G9kCsxgzXP2RyLwKr\nIBIo+qyHweifpPYW28ipdSbPjiypAMdpbGLDAgMBAAGjggJTMIICTzAOBgNVHQ8B\nAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB\n/wQCMAAwHQYDVR0OBBYEFPVZKiovtIK4Av/IBUQeLUs29pT6MB8GA1UdIwQYMBaA\nFBQusxe3WFbLrlAJQOYfr52LFMLGMFUGCCsGAQUFBwEBBEkwRzAhBggrBgEFBQcw\nAYYVaHR0cDovL3IzLm8ubGVuY3Iub3JnMCIGCCsGAQUFBzAChhZodHRwOi8vcjMu\naS5sZW5jci5vcmcvMCQGA1UdEQQdMBuCGWFuaXRhdGVzdC5zaWdtYW5ldGNvcnAu\ndXMwTAYDVR0gBEUwQzAIBgZngQwBAgEwNwYLKwYBBAGC3xMBAQEwKDAmBggrBgEF\nBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcwggEDBgorBgEEAdZ5AgQC\nBIH0BIHxAO8AdgBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXeK\nkmOsAAAEAwBHMEUCIQDSudPEWXk969BT8yz3ag6BJWCMRU5tefEw9nXEQMsh5gIg\nUmfGIuUlcNNI5PydVIHj+zns+SR8P7zfd3FIxW4gK0QAdQD2XJQv0XcwIhRUGAgw\nlFaO400TGTO/3wwvIAvMTvFk4wAAAXeKkmOlAAAEAwBGMEQCIHQkr2qOGuInvonv\nW4vvdI61nraax5V6SC3E0D2JSO91AiBVhpX4BBafRAh36r7l8LrxAfxBM3CjBmAC\nq8fUrWfIWDANBgkqhkiG9w0BAQsFAAOCAQEAgGDMKXofKpDdv5kkID3s5GrKdzaj\njFmb/6kyqd1E6eGXZAewCP1EF5BVvR6lBP2aRXiZ6sJVZktoIfztZnbxBGgbPHfv\nR3iXIG6fxkklzR9Y8puPMBFadANE/QV78tIRAlyaqeSNsoxHi7ssQjHTP111B2lf\n3KmuTpsruut1UesEJcPReLk/1xTkRx262wAncach5Wp+6GWWduTZYJbsNFyrK1RP\nYQ0qYpP9wt2qR+DGaRUBG8i1XLnZS8pkyxtKhVw/a5Fowt+NqCpEBjjJiWJRSGnG\nNSgRtSXq11j8O4JONi8EXe7cEtvzUiLR5PL3itsK2svtrZ9jIwQ95wOPaA==\n-----END CERTIFICATE-----"),
//				PrivateKey:       pulumi.String("-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5cyk6x63iBJSW\nvtgsOBqIxfO8euPHcRnyWsL9dsvnbNyOnyvcqFWxdiW3sh2cItzYtoN1Zfgj5lWG\nOVXbHxP0VaNG9fHVX3+NHP6LFHQz92BzAYQmpqi9zaP/aKJklk6LdPFbVLGhuZfm\n34+ijW9YsgLTKR2WTaZJK5QtamVVmP+VsSCla2ifFzjz2FCkMMEc/Y0zUyP+en/m\nbL71K+VnpZdlEC1s38EvjRTFKFZTKVw5wpWgCZQq/AZYj9RxR23IIuRcUJ8TQ2py\noc3kIXPWjiIarSgBlA8G9kCsxgzXP2RyLwKrIBIo+qyHweifpPYW28ipdSbPjiyp\nAMdpbGLDAgMBAAECggEAUXVfT91z6IqghhKwO8QtC5T/+fN06B8rCYSKj/FFoZL0\n0oTiLFuYwImoCadoUDQUE/Efj0rKE2LSgFHg/44IItQXE01m+5WmHmL1ADxsyoLH\nz9yDosKj7jNM7RyV8F8Bg0pL1hU+rU4rhhL/MaS0mx4eFYjC4UmcWBmXTdelSVJa\nkvXvQLT5y86bqh7tqMjM/kALTWRz5CgNJFk/ONA1yo5RTX9S7SIXimBgAvuGqP8i\nMPEhJou7U3DfzXVfvP8byqNdsZs6ZNhG3wXspl61mRyrY+51SOaNLA7Bkji7x4bH\nNw6mJI0IJTAP9oc1Z8fYeMuxT1bfuD7VOupSP0mAMQKBgQDk+KuyQkmPymeP/Wwu\nII4DUpleVzxTK9obMQQoCEEElbQ6+jTb+8ixP0bWLvBXg/rX734j7OWfn/bljWLH\nXLrSoqQZF1+XMVeY4g4wx9UuTK/D2n791zdOgQivxbIPdWL3a4ap86ar8uyMgJu8\nBLXfFBAOc+9myqUkbeO7wt0e6QKBgQDPV04jPtIJoMrggpQDNreGrANKOmsXWxj4\nOHW13QNdJ2KGQpoTdoqQ8ZmlxuA8Bf2RjHsnB2kgGVTVQR74zRib4MByhvsdhvVm\nF2LNsJoIDfqtv3c+oj13VonRUGuzUeJpwT/snyaL+jQ/ZZcYz0jDgDhIODTcFYj8\nDMSD5SHgywKBgHH6MwWuJ44TNBAiF2qyu959jGjAxf+k0ZI9iRMgYLUWjDvbdtqW\ncCWDGRDfFraJtSEuTz003GzkJPPJuIUC7OCTI1p2HxhU8ITi6itwHfdJJyk4J4TW\nT+qdIqTUpTk6tsPw23zYE3x+lS+viVZDhgEArKl1HpOthh0nMnixnH6ZAoGBAKGn\nV+xy1h9bldFk/TFkP8Jn6ki9MzGKfPVKT7vzDORcCJzU4Hu8OFy5gSmW3Mzvfrsz\n4/CR/oxgM5vwoc0pWr5thJ3GT5K93iYypX3o6q7M91zvonDa3UFl3x2qrc2pUfVS\nDhzWGJ+Z+5JSCnP1aK3EEh18dPoCcELTUYPj6X3xAoGBALAllTb3RCIaqIqk+s3Y\n6KDzikgwGM6j9lmOI2MH4XmCVym4Z40YGK5nxulDh2Ihn/n9zm13Z7ul2DJwgQSO\n0zBc7/CMOsMEBaNXuKL8Qj4enJXMtub4waQ/ywqHIdc50YaPI5Ax8dD/10h9M6Qc\nnUFLNE8pXSnsqb0eOL74f3uQ\n-----END PRIVATE KEY-----"),
//				CertificateChain: readFileOrPanic("www.example.com/fullchain.pem"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support importing.
type DomainCertificate struct {
	pulumi.CustomResourceState

	// Certificate content.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Certificate certificate chain.
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`
	// Domain ID.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Certificate private key.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Certificate type. Valid value is `"PEM"`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDomainCertificate registers a new resource with the given unique name, arguments, and options.
func NewDomainCertificate(ctx *pulumi.Context,
	name string, args *DomainCertificateArgs, opts ...pulumi.ResourceOption) (*DomainCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.CertificateChain == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChain'")
	}
	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DomainCertificate
	err := ctx.RegisterResource("okta:index/domainCertificate:DomainCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainCertificate gets an existing DomainCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainCertificateState, opts ...pulumi.ResourceOption) (*DomainCertificate, error) {
	var resource DomainCertificate
	err := ctx.ReadResource("okta:index/domainCertificate:DomainCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainCertificate resources.
type domainCertificateState struct {
	// Certificate content.
	Certificate *string `pulumi:"certificate"`
	// Certificate certificate chain.
	CertificateChain *string `pulumi:"certificateChain"`
	// Domain ID.
	DomainId *string `pulumi:"domainId"`
	// Certificate private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Certificate type. Valid value is `"PEM"`.
	Type *string `pulumi:"type"`
}

type DomainCertificateState struct {
	// Certificate content.
	Certificate pulumi.StringPtrInput
	// Certificate certificate chain.
	CertificateChain pulumi.StringPtrInput
	// Domain ID.
	DomainId pulumi.StringPtrInput
	// Certificate private key.
	PrivateKey pulumi.StringPtrInput
	// Certificate type. Valid value is `"PEM"`.
	Type pulumi.StringPtrInput
}

func (DomainCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainCertificateState)(nil)).Elem()
}

type domainCertificateArgs struct {
	// Certificate content.
	Certificate string `pulumi:"certificate"`
	// Certificate certificate chain.
	CertificateChain string `pulumi:"certificateChain"`
	// Domain ID.
	DomainId string `pulumi:"domainId"`
	// Certificate private key.
	PrivateKey string `pulumi:"privateKey"`
	// Certificate type. Valid value is `"PEM"`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DomainCertificate resource.
type DomainCertificateArgs struct {
	// Certificate content.
	Certificate pulumi.StringInput
	// Certificate certificate chain.
	CertificateChain pulumi.StringInput
	// Domain ID.
	DomainId pulumi.StringInput
	// Certificate private key.
	PrivateKey pulumi.StringInput
	// Certificate type. Valid value is `"PEM"`.
	Type pulumi.StringInput
}

func (DomainCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainCertificateArgs)(nil)).Elem()
}

type DomainCertificateInput interface {
	pulumi.Input

	ToDomainCertificateOutput() DomainCertificateOutput
	ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput
}

func (*DomainCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificate)(nil)).Elem()
}

func (i *DomainCertificate) ToDomainCertificateOutput() DomainCertificateOutput {
	return i.ToDomainCertificateOutputWithContext(context.Background())
}

func (i *DomainCertificate) ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateOutput)
}

// DomainCertificateArrayInput is an input type that accepts DomainCertificateArray and DomainCertificateArrayOutput values.
// You can construct a concrete instance of `DomainCertificateArrayInput` via:
//
//	DomainCertificateArray{ DomainCertificateArgs{...} }
type DomainCertificateArrayInput interface {
	pulumi.Input

	ToDomainCertificateArrayOutput() DomainCertificateArrayOutput
	ToDomainCertificateArrayOutputWithContext(context.Context) DomainCertificateArrayOutput
}

type DomainCertificateArray []DomainCertificateInput

func (DomainCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainCertificate)(nil)).Elem()
}

func (i DomainCertificateArray) ToDomainCertificateArrayOutput() DomainCertificateArrayOutput {
	return i.ToDomainCertificateArrayOutputWithContext(context.Background())
}

func (i DomainCertificateArray) ToDomainCertificateArrayOutputWithContext(ctx context.Context) DomainCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateArrayOutput)
}

// DomainCertificateMapInput is an input type that accepts DomainCertificateMap and DomainCertificateMapOutput values.
// You can construct a concrete instance of `DomainCertificateMapInput` via:
//
//	DomainCertificateMap{ "key": DomainCertificateArgs{...} }
type DomainCertificateMapInput interface {
	pulumi.Input

	ToDomainCertificateMapOutput() DomainCertificateMapOutput
	ToDomainCertificateMapOutputWithContext(context.Context) DomainCertificateMapOutput
}

type DomainCertificateMap map[string]DomainCertificateInput

func (DomainCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainCertificate)(nil)).Elem()
}

func (i DomainCertificateMap) ToDomainCertificateMapOutput() DomainCertificateMapOutput {
	return i.ToDomainCertificateMapOutputWithContext(context.Background())
}

func (i DomainCertificateMap) ToDomainCertificateMapOutputWithContext(ctx context.Context) DomainCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateMapOutput)
}

type DomainCertificateOutput struct{ *pulumi.OutputState }

func (DomainCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateOutput) ToDomainCertificateOutput() DomainCertificateOutput {
	return o
}

func (o DomainCertificateOutput) ToDomainCertificateOutputWithContext(ctx context.Context) DomainCertificateOutput {
	return o
}

// Certificate content.
func (o DomainCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Certificate certificate chain.
func (o DomainCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.CertificateChain }).(pulumi.StringOutput)
}

// Domain ID.
func (o DomainCertificateOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Certificate private key.
func (o DomainCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Certificate type. Valid value is `"PEM"`.
func (o DomainCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DomainCertificateArrayOutput struct{ *pulumi.OutputState }

func (DomainCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateArrayOutput) ToDomainCertificateArrayOutput() DomainCertificateArrayOutput {
	return o
}

func (o DomainCertificateArrayOutput) ToDomainCertificateArrayOutputWithContext(ctx context.Context) DomainCertificateArrayOutput {
	return o
}

func (o DomainCertificateArrayOutput) Index(i pulumi.IntInput) DomainCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainCertificate {
		return vs[0].([]*DomainCertificate)[vs[1].(int)]
	}).(DomainCertificateOutput)
}

type DomainCertificateMapOutput struct{ *pulumi.OutputState }

func (DomainCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainCertificate)(nil)).Elem()
}

func (o DomainCertificateMapOutput) ToDomainCertificateMapOutput() DomainCertificateMapOutput {
	return o
}

func (o DomainCertificateMapOutput) ToDomainCertificateMapOutputWithContext(ctx context.Context) DomainCertificateMapOutput {
	return o
}

func (o DomainCertificateMapOutput) MapIndex(k pulumi.StringInput) DomainCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainCertificate {
		return vs[0].(map[string]*DomainCertificate)[vs[1].(string)]
	}).(DomainCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateInput)(nil)).Elem(), &DomainCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateArrayInput)(nil)).Elem(), DomainCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateMapInput)(nil)).Elem(), DomainCertificateMap{})
	pulumi.RegisterOutputType(DomainCertificateOutput{})
	pulumi.RegisterOutputType(DomainCertificateArrayOutput{})
	pulumi.RegisterOutputType(DomainCertificateMapOutput{})
}
