// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AppUserSchemaProperty struct {
	pulumi.CustomResourceState

	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// Custom Subschema description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// Subschema external name
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index pulumi.StringOutput `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs AppUserSchemaPropertyOneOfArrayOutput `pulumi:"oneOfs"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the subschema is required
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Enum title
	Title pulumi.StringOutput `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringOutput `pulumi:"type"`
	// Allows to assign attribute's group priority
	Union pulumi.BoolPtrOutput `pulumi:"union"`
	// Subschema unique restriction
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewAppUserSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewAppUserSchemaProperty(ctx *pulumi.Context,
	name string, args *AppUserSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppUserSchemaProperty
	err := ctx.RegisterResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppUserSchemaProperty gets an existing AppUserSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppUserSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppUserSchemaPropertyState, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	var resource AppUserSchemaProperty
	err := ctx.ReadResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppUserSchemaProperty resources.
type appUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId *string `pulumi:"appId"`
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType *string `pulumi:"arrayType"`
	// Custom Subschema description
	Description *string `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums []string `pulumi:"enums"`
	// Subschema external name
	ExternalName *string `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index *string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master *string `pulumi:"master"`
	// Subschema of type string maximum length
	MaxLength *int `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength *int `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope *string `pulumi:"scope"`
	// Enum title
	Title *string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type *string `pulumi:"type"`
	// Allows to assign attribute's group priority
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type AppUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringPtrInput
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayInput
	// array of valid JSON schemas for property type array.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrInput
	// Custom Subschema description
	Description pulumi.StringPtrInput
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayInput
	// Subschema external name
	ExternalName pulumi.StringPtrInput
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringPtrInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrInput
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrInput
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrInput
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrInput
	// Enum title
	Title pulumi.StringPtrInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringPtrInput
	// Allows to assign attribute's group priority
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyState)(nil)).Elem()
}

type appUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId string `pulumi:"appId"`
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// array of valid JSON schemas for property type array.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType *string `pulumi:"arrayType"`
	// Custom Subschema description
	Description *string `pulumi:"description"`
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums []string `pulumi:"enums"`
	// Subschema external name
	ExternalName *string `pulumi:"externalName"`
	// Subschema external namespace
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index string `pulumi:"index"`
	// SubSchema profile manager, if not set it will inherit its setting.
	Master *string `pulumi:"master"`
	// Subschema of type string maximum length
	MaxLength *int `pulumi:"maxLength"`
	// Subschema of type string minimum length
	MinLength *int `pulumi:"minLength"`
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope *string `pulumi:"scope"`
	// Enum title
	Title string `pulumi:"title"`
	// Subschema type: string, boolean, number, integer, array, or object
	Type string `pulumi:"type"`
	// Allows to assign attribute's group priority
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a AppUserSchemaProperty resource.
type AppUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringInput
	// Custom Subschema enumerated value of a property of type array.
	ArrayEnums pulumi.StringArrayInput
	// array of valid JSON schemas for property type array.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// Subschema array type: string, number, integer, reference. Type field must be an array.
	ArrayType pulumi.StringPtrInput
	// Custom Subschema description
	Description pulumi.StringPtrInput
	// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	Enums pulumi.StringArrayInput
	// Subschema external name
	ExternalName pulumi.StringPtrInput
	// Subschema external namespace
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringInput
	// SubSchema profile manager, if not set it will inherit its setting.
	Master pulumi.StringPtrInput
	// Subschema of type string maximum length
	MaxLength pulumi.IntPtrInput
	// Subschema of type string minimum length
	MinLength pulumi.IntPtrInput
	// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrInput
	// Enum title
	Title pulumi.StringInput
	// Subschema type: string, boolean, number, integer, array, or object
	Type pulumi.StringInput
	// Allows to assign attribute's group priority
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyArgs)(nil)).Elem()
}

type AppUserSchemaPropertyInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput
	ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput
}

func (*AppUserSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil)).Elem()
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return i.ToAppUserSchemaPropertyOutputWithContext(context.Background())
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyOutput)
}

func (i *AppUserSchemaProperty) ToOutput(ctx context.Context) pulumix.Output[*AppUserSchemaProperty] {
	return pulumix.Output[*AppUserSchemaProperty]{
		OutputState: i.ToAppUserSchemaPropertyOutputWithContext(ctx).OutputState,
	}
}

// AppUserSchemaPropertyArrayInput is an input type that accepts AppUserSchemaPropertyArray and AppUserSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyArrayInput` via:
//
//	AppUserSchemaPropertyArray{ AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyArrayInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput
	ToAppUserSchemaPropertyArrayOutputWithContext(context.Context) AppUserSchemaPropertyArrayOutput
}

type AppUserSchemaPropertyArray []AppUserSchemaPropertyInput

func (AppUserSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppUserSchemaProperty)(nil)).Elem()
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return i.ToAppUserSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyArrayOutput)
}

func (i AppUserSchemaPropertyArray) ToOutput(ctx context.Context) pulumix.Output[[]*AppUserSchemaProperty] {
	return pulumix.Output[[]*AppUserSchemaProperty]{
		OutputState: i.ToAppUserSchemaPropertyArrayOutputWithContext(ctx).OutputState,
	}
}

// AppUserSchemaPropertyMapInput is an input type that accepts AppUserSchemaPropertyMap and AppUserSchemaPropertyMapOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyMapInput` via:
//
//	AppUserSchemaPropertyMap{ "key": AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyMapInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput
	ToAppUserSchemaPropertyMapOutputWithContext(context.Context) AppUserSchemaPropertyMapOutput
}

type AppUserSchemaPropertyMap map[string]AppUserSchemaPropertyInput

func (AppUserSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppUserSchemaProperty)(nil)).Elem()
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return i.ToAppUserSchemaPropertyMapOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyMapOutput)
}

func (i AppUserSchemaPropertyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AppUserSchemaProperty] {
	return pulumix.Output[map[string]*AppUserSchemaProperty]{
		OutputState: i.ToAppUserSchemaPropertyMapOutputWithContext(ctx).OutputState,
	}
}

type AppUserSchemaPropertyOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return o
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return o
}

func (o AppUserSchemaPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[*AppUserSchemaProperty] {
	return pulumix.Output[*AppUserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

// The Application's ID the user custom schema property should be assigned to.
func (o AppUserSchemaPropertyOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Custom Subschema enumerated value of a property of type array.
func (o AppUserSchemaPropertyOutput) ArrayEnums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringArrayOutput { return v.ArrayEnums }).(pulumi.StringArrayOutput)
}

// array of valid JSON schemas for property type array.
func (o AppUserSchemaPropertyOutput) ArrayOneOfs() AppUserSchemaPropertyArrayOneOfArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) AppUserSchemaPropertyArrayOneOfArrayOutput { return v.ArrayOneOfs }).(AppUserSchemaPropertyArrayOneOfArrayOutput)
}

// Subschema array type: string, number, integer, reference. Type field must be an array.
func (o AppUserSchemaPropertyOutput) ArrayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ArrayType }).(pulumi.StringPtrOutput)
}

// Custom Subschema description
func (o AppUserSchemaPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
func (o AppUserSchemaPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringArrayOutput { return v.Enums }).(pulumi.StringArrayOutput)
}

// Subschema external name
func (o AppUserSchemaPropertyOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// Subschema external namespace
func (o AppUserSchemaPropertyOutput) ExternalNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalNamespace }).(pulumi.StringPtrOutput)
}

// Subschema unique string identifier
func (o AppUserSchemaPropertyOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// SubSchema profile manager, if not set it will inherit its setting.
func (o AppUserSchemaPropertyOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

// Subschema of type string maximum length
func (o AppUserSchemaPropertyOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.IntPtrOutput { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// Subschema of type string minimum length
func (o AppUserSchemaPropertyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.IntPtrOutput { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
func (o AppUserSchemaPropertyOutput) OneOfs() AppUserSchemaPropertyOneOfArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) AppUserSchemaPropertyOneOfArrayOutput { return v.OneOfs }).(AppUserSchemaPropertyOneOfArrayOutput)
}

// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
func (o AppUserSchemaPropertyOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the subschema is required
func (o AppUserSchemaPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
func (o AppUserSchemaPropertyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Enum title
func (o AppUserSchemaPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Subschema type: string, boolean, number, integer, array, or object
func (o AppUserSchemaPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Allows to assign attribute's group priority
func (o AppUserSchemaPropertyOutput) Union() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.BoolPtrOutput { return v.Union }).(pulumi.BoolPtrOutput)
}

// Subschema unique restriction
func (o AppUserSchemaPropertyOutput) Unique() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Unique }).(pulumi.StringPtrOutput)
}

// Custom subschema user type
func (o AppUserSchemaPropertyOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type AppUserSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AppUserSchemaProperty] {
	return pulumix.Output[[]*AppUserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o AppUserSchemaPropertyArrayOutput) Index(i pulumi.IntInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppUserSchemaProperty {
		return vs[0].([]*AppUserSchemaProperty)[vs[1].(int)]
	}).(AppUserSchemaPropertyOutput)
}

type AppUserSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AppUserSchemaProperty] {
	return pulumix.Output[map[string]*AppUserSchemaProperty]{
		OutputState: o.OutputState,
	}
}

func (o AppUserSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppUserSchemaProperty {
		return vs[0].(map[string]*AppUserSchemaProperty)[vs[1].(string)]
	}).(AppUserSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyInput)(nil)).Elem(), &AppUserSchemaProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyArrayInput)(nil)).Elem(), AppUserSchemaPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyMapInput)(nil)).Elem(), AppUserSchemaPropertyMap{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyMapOutput{})
}
