// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewAppUserSchemaProperty(ctx, "example", &okta.AppUserSchemaPropertyArgs{
//				AppId:       pulumi.String("<app id>"),
//				Index:       pulumi.String("customPropertyName"),
//				Title:       pulumi.String("customPropertyName"),
//				Type:        pulumi.String("string"),
//				Description: pulumi.String("My custom property name"),
//				Master:      pulumi.String("OKTA"),
//				Scope:       pulumi.String("SELF"),
//				ArrayEnums: pulumi.StringArray{
//					pulumi.String("1"),
//					pulumi.String("2"),
//				},
//				ArrayOneOfs: okta.AppUserSchemaPropertyArrayOneOfArray{
//					&okta.AppUserSchemaPropertyArrayOneOfArgs{
//						Const: pulumi.String("1"),
//						Title: pulumi.String("one"),
//					},
//					&okta.AppUserSchemaPropertyArrayOneOfArgs{
//						Const: pulumi.String("2"),
//						Title: pulumi.String("two"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/appUserSchemaProperty:AppUserSchemaProperty example <app_id>/<property_name>
// ```
type AppUserSchemaProperty struct {
	pulumi.CustomResourceState

	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `array`
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// The description of the user schema property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `string`
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `string`
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayOutput `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the subschema is required
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Subschema title (display name)
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
	Type pulumi.StringOutput `pulumi:"type"`
	// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
	Union pulumi.BoolPtrOutput `pulumi:"union"`
	// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// User type ID. By default, it is `default`
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewAppUserSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewAppUserSchemaProperty(ctx *pulumi.Context,
	name string, args *AppUserSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppUserSchemaProperty
	err := ctx.RegisterResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppUserSchemaProperty gets an existing AppUserSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppUserSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppUserSchemaPropertyState, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	var resource AppUserSchemaProperty
	err := ctx.ReadResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppUserSchemaProperty resources.
type appUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId *string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `array`
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `string`
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `string`
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope *string `pulumi:"scope"`
	// Subschema title (display name)
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
	Type *string `pulumi:"type"`
	// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
	Union *bool `pulumi:"union"`
	// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
	Unique *string `pulumi:"unique"`
	// User type ID. By default, it is `default`
	UserType *string `pulumi:"userType"`
}

type AppUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringPtrInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `array`
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `string`
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `string`
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrInput
	// Subschema title (display name)
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
	Type pulumi.StringPtrInput
	// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
	Union pulumi.BoolPtrInput
	// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
	Unique pulumi.StringPtrInput
	// User type ID. By default, it is `default`
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyState)(nil)).Elem()
}

type appUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `array`
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// Subschema unique string identifier
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `string`
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `string`
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
	Permissions *string `pulumi:"permissions"`
	// Whether the subschema is required
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope *string `pulumi:"scope"`
	// Subschema title (display name)
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
	Type string `pulumi:"type"`
	// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
	Union *bool `pulumi:"union"`
	// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
	Unique *string `pulumi:"unique"`
	// User type ID. By default, it is `default`
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a AppUserSchemaProperty resource.
type AppUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `array`
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// Subschema unique string identifier
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `string`
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `string`
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	// 	- 'const' - (Required) value mapping to member of 'enum'.
	// 	- 'title' - (Required) display name for the enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
	Permissions pulumi.StringPtrInput
	// Whether the subschema is required
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
	Scope pulumi.StringPtrInput
	// Subschema title (display name)
	Title pulumi.StringInput
	// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
	Type pulumi.StringInput
	// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
	Union pulumi.BoolPtrInput
	// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
	Unique pulumi.StringPtrInput
	// User type ID. By default, it is `default`
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyArgs)(nil)).Elem()
}

type AppUserSchemaPropertyInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput
	ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput
}

func (*AppUserSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil)).Elem()
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return i.ToAppUserSchemaPropertyOutputWithContext(context.Background())
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyOutput)
}

// AppUserSchemaPropertyArrayInput is an input type that accepts AppUserSchemaPropertyArray and AppUserSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyArrayInput` via:
//
//	AppUserSchemaPropertyArray{ AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyArrayInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput
	ToAppUserSchemaPropertyArrayOutputWithContext(context.Context) AppUserSchemaPropertyArrayOutput
}

type AppUserSchemaPropertyArray []AppUserSchemaPropertyInput

func (AppUserSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppUserSchemaProperty)(nil)).Elem()
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return i.ToAppUserSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyArrayOutput)
}

// AppUserSchemaPropertyMapInput is an input type that accepts AppUserSchemaPropertyMap and AppUserSchemaPropertyMapOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyMapInput` via:
//
//	AppUserSchemaPropertyMap{ "key": AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyMapInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput
	ToAppUserSchemaPropertyMapOutputWithContext(context.Context) AppUserSchemaPropertyMapOutput
}

type AppUserSchemaPropertyMap map[string]AppUserSchemaPropertyInput

func (AppUserSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppUserSchemaProperty)(nil)).Elem()
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return i.ToAppUserSchemaPropertyMapOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyMapOutput)
}

type AppUserSchemaPropertyOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return o
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return o
}

// The Application's ID the user custom schema property should be assigned to.
func (o AppUserSchemaPropertyOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Array of values that an array property's items can be set to.
func (o AppUserSchemaPropertyOutput) ArrayEnums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringArrayOutput { return v.ArrayEnums }).(pulumi.StringArrayOutput)
}

// Display name and value an enum array can be set to.
//   - 'const' - (Required) value mapping to member of 'enum'.
//   - 'title' - (Required) display name for the enum value.
func (o AppUserSchemaPropertyOutput) ArrayOneOfs() AppUserSchemaPropertyArrayOneOfArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) AppUserSchemaPropertyArrayOneOfArrayOutput { return v.ArrayOneOfs }).(AppUserSchemaPropertyArrayOneOfArrayOutput)
}

// The type of the array elements if `type` is set to `array`
func (o AppUserSchemaPropertyOutput) ArrayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ArrayType }).(pulumi.StringPtrOutput)
}

// The description of the user schema property.
func (o AppUserSchemaPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
func (o AppUserSchemaPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringArrayOutput { return v.Enums }).(pulumi.StringArrayOutput)
}

// External name of the user schema property.
func (o AppUserSchemaPropertyOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// External namespace of the user schema property.
func (o AppUserSchemaPropertyOutput) ExternalNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.ExternalNamespace }).(pulumi.StringPtrOutput)
}

// Subschema unique string identifier
func (o AppUserSchemaPropertyOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`
func (o AppUserSchemaPropertyOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

// The maximum length of the user property value. Only applies to type `string`
func (o AppUserSchemaPropertyOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.IntPtrOutput { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// The minimum length of the user property value. Only applies to type `string`
func (o AppUserSchemaPropertyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.IntPtrOutput { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Array of maps containing a mapping for display name to enum value.
//   - 'const' - (Required) value mapping to member of 'enum'.
//   - 'title' - (Required) display name for the enum value.
func (o AppUserSchemaPropertyOutput) OneOfs() AppUserSchemaPropertyOneOfArrayOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) AppUserSchemaPropertyOneOfArrayOutput { return v.OneOfs }).(AppUserSchemaPropertyOneOfArrayOutput)
}

// Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
func (o AppUserSchemaPropertyOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the subschema is required
func (o AppUserSchemaPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// determines whether an app user attribute can be set at the Personal `SELF` or Group `NONE` level. Default value is `NONE`.
func (o AppUserSchemaPropertyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Subschema title (display name)
func (o AppUserSchemaPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
func (o AppUserSchemaPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// If `type` is set to `array`, used to set whether attribute value is determined by group priority `false`, or combine values across groups `true`. Can not be set to `true` if `scope` is set to `SELF`.
func (o AppUserSchemaPropertyOutput) Union() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.BoolPtrOutput { return v.Union }).(pulumi.BoolPtrOutput)
}

// Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
func (o AppUserSchemaPropertyOutput) Unique() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.Unique }).(pulumi.StringPtrOutput)
}

// User type ID. By default, it is `default`
func (o AppUserSchemaPropertyOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppUserSchemaProperty) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type AppUserSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) Index(i pulumi.IntInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppUserSchemaProperty {
		return vs[0].([]*AppUserSchemaProperty)[vs[1].(int)]
	}).(AppUserSchemaPropertyOutput)
}

type AppUserSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppUserSchemaProperty)(nil)).Elem()
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppUserSchemaProperty {
		return vs[0].(map[string]*AppUserSchemaProperty)[vs[1].(string)]
	}).(AppUserSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyInput)(nil)).Elem(), &AppUserSchemaProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyArrayInput)(nil)).Elem(), AppUserSchemaPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppUserSchemaPropertyMapInput)(nil)).Elem(), AppUserSchemaPropertyMap{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyMapOutput{})
}
