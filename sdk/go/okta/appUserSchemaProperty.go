// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Application User Schema property.
//
// This resource allows you to create and configure a custom user schema property and associate it with an application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewAppUserSchemaProperty(ctx, "example", &okta.AppUserSchemaPropertyArgs{
// 			AppId:       pulumi.String("<app id>"),
// 			Description: pulumi.String("My custom property name"),
// 			Index:       pulumi.String("customPropertyName"),
// 			Master:      pulumi.String("OKTA"),
// 			Scope:       pulumi.String("SELF"),
// 			Title:       pulumi.String("customPropertyName"),
// 			Type:        pulumi.String("string"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// App user schema property can be imported via the property index and app id.
//
// ```sh
//  $ pulumi import okta:index/appUserSchemaProperty:AppUserSchemaProperty example <app id>/<property name>
// ```
type AppUserSchemaProperty struct {
	pulumi.CustomResourceState

	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// The description of the user schema property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayOutput `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// display name for the enum value.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrOutput `pulumi:"union"`
	// Subschema unique restriction
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
	// Custom subschema user type
	UserType pulumi.StringPtrOutput `pulumi:"userType"`
}

// NewAppUserSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewAppUserSchemaProperty(ctx *pulumi.Context,
	name string, args *AppUserSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource AppUserSchemaProperty
	err := ctx.RegisterResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppUserSchemaProperty gets an existing AppUserSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppUserSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppUserSchemaPropertyState, opts ...pulumi.ResourceOption) (*AppUserSchemaProperty, error) {
	var resource AppUserSchemaProperty
	err := ctx.ReadResource("okta:index/appUserSchemaProperty:AppUserSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppUserSchemaProperty resources.
type appUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId *string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title *string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type *string `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

type AppUserSchemaPropertyState struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringPtrInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringPtrInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringPtrInput
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyState)(nil)).Elem()
}

type appUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId string `pulumi:"appId"`
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []AppUserSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the user schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the user schema property.
	ExternalName *string `pulumi:"externalName"`
	// External namespace of the user schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []AppUserSchemaPropertyOneOf `pulumi:"oneOfs"`
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern *string `pulumi:"pattern"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this application's users.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title string `pulumi:"title"`
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type string `pulumi:"type"`
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union *bool `pulumi:"union"`
	// Subschema unique restriction
	Unique *string `pulumi:"unique"`
	// Custom subschema user type
	UserType *string `pulumi:"userType"`
}

// The set of arguments for constructing a AppUserSchemaProperty resource.
type AppUserSchemaPropertyArgs struct {
	// The Application's ID the user custom schema property should be assigned to.
	AppId pulumi.StringInput
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs AppUserSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the user schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the user schema property.
	ExternalName pulumi.StringPtrInput
	// External namespace of the user schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringInput
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs AppUserSchemaPropertyOneOfArrayInput
	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern pulumi.StringPtrInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this application's users.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringInput
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type pulumi.StringInput
	// Used to assign attribute group priority. Can not be set to 'true' if `scope` is set to Individual level.
	Union pulumi.BoolPtrInput
	// Subschema unique restriction
	Unique pulumi.StringPtrInput
	// Custom subschema user type
	UserType pulumi.StringPtrInput
}

func (AppUserSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appUserSchemaPropertyArgs)(nil)).Elem()
}

type AppUserSchemaPropertyInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput
	ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput
}

func (*AppUserSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((*AppUserSchemaProperty)(nil))
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return i.ToAppUserSchemaPropertyOutputWithContext(context.Background())
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyOutput)
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyPtrOutput() AppUserSchemaPropertyPtrOutput {
	return i.ToAppUserSchemaPropertyPtrOutputWithContext(context.Background())
}

func (i *AppUserSchemaProperty) ToAppUserSchemaPropertyPtrOutputWithContext(ctx context.Context) AppUserSchemaPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyPtrOutput)
}

type AppUserSchemaPropertyPtrInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyPtrOutput() AppUserSchemaPropertyPtrOutput
	ToAppUserSchemaPropertyPtrOutputWithContext(ctx context.Context) AppUserSchemaPropertyPtrOutput
}

type appUserSchemaPropertyPtrType AppUserSchemaPropertyArgs

func (*appUserSchemaPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil))
}

func (i *appUserSchemaPropertyPtrType) ToAppUserSchemaPropertyPtrOutput() AppUserSchemaPropertyPtrOutput {
	return i.ToAppUserSchemaPropertyPtrOutputWithContext(context.Background())
}

func (i *appUserSchemaPropertyPtrType) ToAppUserSchemaPropertyPtrOutputWithContext(ctx context.Context) AppUserSchemaPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyPtrOutput)
}

// AppUserSchemaPropertyArrayInput is an input type that accepts AppUserSchemaPropertyArray and AppUserSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyArrayInput` via:
//
//          AppUserSchemaPropertyArray{ AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyArrayInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput
	ToAppUserSchemaPropertyArrayOutputWithContext(context.Context) AppUserSchemaPropertyArrayOutput
}

type AppUserSchemaPropertyArray []AppUserSchemaPropertyInput

func (AppUserSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppUserSchemaProperty)(nil))
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return i.ToAppUserSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyArray) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyArrayOutput)
}

// AppUserSchemaPropertyMapInput is an input type that accepts AppUserSchemaPropertyMap and AppUserSchemaPropertyMapOutput values.
// You can construct a concrete instance of `AppUserSchemaPropertyMapInput` via:
//
//          AppUserSchemaPropertyMap{ "key": AppUserSchemaPropertyArgs{...} }
type AppUserSchemaPropertyMapInput interface {
	pulumi.Input

	ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput
	ToAppUserSchemaPropertyMapOutputWithContext(context.Context) AppUserSchemaPropertyMapOutput
}

type AppUserSchemaPropertyMap map[string]AppUserSchemaPropertyInput

func (AppUserSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppUserSchemaProperty)(nil))
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return i.ToAppUserSchemaPropertyMapOutputWithContext(context.Background())
}

func (i AppUserSchemaPropertyMap) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppUserSchemaPropertyMapOutput)
}

type AppUserSchemaPropertyOutput struct {
	*pulumi.OutputState
}

func (AppUserSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppUserSchemaProperty)(nil))
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutput() AppUserSchemaPropertyOutput {
	return o
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyOutputWithContext(ctx context.Context) AppUserSchemaPropertyOutput {
	return o
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyPtrOutput() AppUserSchemaPropertyPtrOutput {
	return o.ToAppUserSchemaPropertyPtrOutputWithContext(context.Background())
}

func (o AppUserSchemaPropertyOutput) ToAppUserSchemaPropertyPtrOutputWithContext(ctx context.Context) AppUserSchemaPropertyPtrOutput {
	return o.ApplyT(func(v AppUserSchemaProperty) *AppUserSchemaProperty {
		return &v
	}).(AppUserSchemaPropertyPtrOutput)
}

type AppUserSchemaPropertyPtrOutput struct {
	*pulumi.OutputState
}

func (AppUserSchemaPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppUserSchemaProperty)(nil))
}

func (o AppUserSchemaPropertyPtrOutput) ToAppUserSchemaPropertyPtrOutput() AppUserSchemaPropertyPtrOutput {
	return o
}

func (o AppUserSchemaPropertyPtrOutput) ToAppUserSchemaPropertyPtrOutputWithContext(ctx context.Context) AppUserSchemaPropertyPtrOutput {
	return o
}

type AppUserSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppUserSchemaProperty)(nil))
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutput() AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) ToAppUserSchemaPropertyArrayOutputWithContext(ctx context.Context) AppUserSchemaPropertyArrayOutput {
	return o
}

func (o AppUserSchemaPropertyArrayOutput) Index(i pulumi.IntInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppUserSchemaProperty {
		return vs[0].([]AppUserSchemaProperty)[vs[1].(int)]
	}).(AppUserSchemaPropertyOutput)
}

type AppUserSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (AppUserSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppUserSchemaProperty)(nil))
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutput() AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) ToAppUserSchemaPropertyMapOutputWithContext(ctx context.Context) AppUserSchemaPropertyMapOutput {
	return o
}

func (o AppUserSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) AppUserSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppUserSchemaProperty {
		return vs[0].(map[string]AppUserSchemaProperty)[vs[1].(string)]
	}).(AppUserSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterOutputType(AppUserSchemaPropertyOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyPtrOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(AppUserSchemaPropertyMapOutput{})
}
