// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **DEPRECATED** use `Index.EmailDomain` instead.
//
// This resource allows you to create and configure a custom email sender.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewEmailSender(ctx, "example", &okta.EmailSenderArgs{
//				FromAddress: pulumi.String("no-reply@caladan.planet"),
//				FromName:    pulumi.String("Paul Atreides"),
//				Subdomain:   pulumi.String("mail"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Custom email sender can be imported via the Okta ID.
//
// ```sh
//
//	$ pulumi import okta:index/emailSender:EmailSender example &#60;sender id&#62;
//
// ```
type EmailSender struct {
	pulumi.CustomResourceState

	// TXT and CNAME records to be registered for the domain.
	DnsRecords EmailSenderDnsRecordArrayOutput `pulumi:"dnsRecords"`
	// Email address to send from.
	FromAddress pulumi.StringOutput `pulumi:"fromAddress"`
	// Name of sender.
	FromName pulumi.StringOutput `pulumi:"fromName"`
	// Status of the sender (shows whether the sender is verified).
	Status pulumi.StringOutput `pulumi:"status"`
	// Mail domain to send from.
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
}

// NewEmailSender registers a new resource with the given unique name, arguments, and options.
func NewEmailSender(ctx *pulumi.Context,
	name string, args *EmailSenderArgs, opts ...pulumi.ResourceOption) (*EmailSender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FromAddress == nil {
		return nil, errors.New("invalid value for required argument 'FromAddress'")
	}
	if args.FromName == nil {
		return nil, errors.New("invalid value for required argument 'FromName'")
	}
	if args.Subdomain == nil {
		return nil, errors.New("invalid value for required argument 'Subdomain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailSender
	err := ctx.RegisterResource("okta:index/emailSender:EmailSender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailSender gets an existing EmailSender resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailSender(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailSenderState, opts ...pulumi.ResourceOption) (*EmailSender, error) {
	var resource EmailSender
	err := ctx.ReadResource("okta:index/emailSender:EmailSender", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailSender resources.
type emailSenderState struct {
	// TXT and CNAME records to be registered for the domain.
	DnsRecords []EmailSenderDnsRecord `pulumi:"dnsRecords"`
	// Email address to send from.
	FromAddress *string `pulumi:"fromAddress"`
	// Name of sender.
	FromName *string `pulumi:"fromName"`
	// Status of the sender (shows whether the sender is verified).
	Status *string `pulumi:"status"`
	// Mail domain to send from.
	Subdomain *string `pulumi:"subdomain"`
}

type EmailSenderState struct {
	// TXT and CNAME records to be registered for the domain.
	DnsRecords EmailSenderDnsRecordArrayInput
	// Email address to send from.
	FromAddress pulumi.StringPtrInput
	// Name of sender.
	FromName pulumi.StringPtrInput
	// Status of the sender (shows whether the sender is verified).
	Status pulumi.StringPtrInput
	// Mail domain to send from.
	Subdomain pulumi.StringPtrInput
}

func (EmailSenderState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailSenderState)(nil)).Elem()
}

type emailSenderArgs struct {
	// Email address to send from.
	FromAddress string `pulumi:"fromAddress"`
	// Name of sender.
	FromName string `pulumi:"fromName"`
	// Mail domain to send from.
	Subdomain string `pulumi:"subdomain"`
}

// The set of arguments for constructing a EmailSender resource.
type EmailSenderArgs struct {
	// Email address to send from.
	FromAddress pulumi.StringInput
	// Name of sender.
	FromName pulumi.StringInput
	// Mail domain to send from.
	Subdomain pulumi.StringInput
}

func (EmailSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailSenderArgs)(nil)).Elem()
}

type EmailSenderInput interface {
	pulumi.Input

	ToEmailSenderOutput() EmailSenderOutput
	ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput
}

func (*EmailSender) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSender)(nil)).Elem()
}

func (i *EmailSender) ToEmailSenderOutput() EmailSenderOutput {
	return i.ToEmailSenderOutputWithContext(context.Background())
}

func (i *EmailSender) ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderOutput)
}

func (i *EmailSender) ToOutput(ctx context.Context) pulumix.Output[*EmailSender] {
	return pulumix.Output[*EmailSender]{
		OutputState: i.ToEmailSenderOutputWithContext(ctx).OutputState,
	}
}

// EmailSenderArrayInput is an input type that accepts EmailSenderArray and EmailSenderArrayOutput values.
// You can construct a concrete instance of `EmailSenderArrayInput` via:
//
//	EmailSenderArray{ EmailSenderArgs{...} }
type EmailSenderArrayInput interface {
	pulumi.Input

	ToEmailSenderArrayOutput() EmailSenderArrayOutput
	ToEmailSenderArrayOutputWithContext(context.Context) EmailSenderArrayOutput
}

type EmailSenderArray []EmailSenderInput

func (EmailSenderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSender)(nil)).Elem()
}

func (i EmailSenderArray) ToEmailSenderArrayOutput() EmailSenderArrayOutput {
	return i.ToEmailSenderArrayOutputWithContext(context.Background())
}

func (i EmailSenderArray) ToEmailSenderArrayOutputWithContext(ctx context.Context) EmailSenderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderArrayOutput)
}

func (i EmailSenderArray) ToOutput(ctx context.Context) pulumix.Output[[]*EmailSender] {
	return pulumix.Output[[]*EmailSender]{
		OutputState: i.ToEmailSenderArrayOutputWithContext(ctx).OutputState,
	}
}

// EmailSenderMapInput is an input type that accepts EmailSenderMap and EmailSenderMapOutput values.
// You can construct a concrete instance of `EmailSenderMapInput` via:
//
//	EmailSenderMap{ "key": EmailSenderArgs{...} }
type EmailSenderMapInput interface {
	pulumi.Input

	ToEmailSenderMapOutput() EmailSenderMapOutput
	ToEmailSenderMapOutputWithContext(context.Context) EmailSenderMapOutput
}

type EmailSenderMap map[string]EmailSenderInput

func (EmailSenderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSender)(nil)).Elem()
}

func (i EmailSenderMap) ToEmailSenderMapOutput() EmailSenderMapOutput {
	return i.ToEmailSenderMapOutputWithContext(context.Background())
}

func (i EmailSenderMap) ToEmailSenderMapOutputWithContext(ctx context.Context) EmailSenderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderMapOutput)
}

func (i EmailSenderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailSender] {
	return pulumix.Output[map[string]*EmailSender]{
		OutputState: i.ToEmailSenderMapOutputWithContext(ctx).OutputState,
	}
}

type EmailSenderOutput struct{ *pulumi.OutputState }

func (EmailSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSender)(nil)).Elem()
}

func (o EmailSenderOutput) ToEmailSenderOutput() EmailSenderOutput {
	return o
}

func (o EmailSenderOutput) ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput {
	return o
}

func (o EmailSenderOutput) ToOutput(ctx context.Context) pulumix.Output[*EmailSender] {
	return pulumix.Output[*EmailSender]{
		OutputState: o.OutputState,
	}
}

// TXT and CNAME records to be registered for the domain.
func (o EmailSenderOutput) DnsRecords() EmailSenderDnsRecordArrayOutput {
	return o.ApplyT(func(v *EmailSender) EmailSenderDnsRecordArrayOutput { return v.DnsRecords }).(EmailSenderDnsRecordArrayOutput)
}

// Email address to send from.
func (o EmailSenderOutput) FromAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringOutput { return v.FromAddress }).(pulumi.StringOutput)
}

// Name of sender.
func (o EmailSenderOutput) FromName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringOutput { return v.FromName }).(pulumi.StringOutput)
}

// Status of the sender (shows whether the sender is verified).
func (o EmailSenderOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Mail domain to send from.
func (o EmailSenderOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

type EmailSenderArrayOutput struct{ *pulumi.OutputState }

func (EmailSenderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSender)(nil)).Elem()
}

func (o EmailSenderArrayOutput) ToEmailSenderArrayOutput() EmailSenderArrayOutput {
	return o
}

func (o EmailSenderArrayOutput) ToEmailSenderArrayOutputWithContext(ctx context.Context) EmailSenderArrayOutput {
	return o
}

func (o EmailSenderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EmailSender] {
	return pulumix.Output[[]*EmailSender]{
		OutputState: o.OutputState,
	}
}

func (o EmailSenderArrayOutput) Index(i pulumi.IntInput) EmailSenderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailSender {
		return vs[0].([]*EmailSender)[vs[1].(int)]
	}).(EmailSenderOutput)
}

type EmailSenderMapOutput struct{ *pulumi.OutputState }

func (EmailSenderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSender)(nil)).Elem()
}

func (o EmailSenderMapOutput) ToEmailSenderMapOutput() EmailSenderMapOutput {
	return o
}

func (o EmailSenderMapOutput) ToEmailSenderMapOutputWithContext(ctx context.Context) EmailSenderMapOutput {
	return o
}

func (o EmailSenderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EmailSender] {
	return pulumix.Output[map[string]*EmailSender]{
		OutputState: o.OutputState,
	}
}

func (o EmailSenderMapOutput) MapIndex(k pulumi.StringInput) EmailSenderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailSender {
		return vs[0].(map[string]*EmailSender)[vs[1].(string)]
	}).(EmailSenderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderInput)(nil)).Elem(), &EmailSender{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderArrayInput)(nil)).Elem(), EmailSenderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderMapInput)(nil)).Elem(), EmailSenderMap{})
	pulumi.RegisterOutputType(EmailSenderOutput{})
	pulumi.RegisterOutputType(EmailSenderArrayOutput{})
	pulumi.RegisterOutputType(EmailSenderMapOutput{})
}
