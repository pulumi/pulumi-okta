// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Configures Default Authorization Server.
//
// This resource allows you to configure Default Authorization Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewAuthServerDefault(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Authorization Server can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:index/authServerDefault:AuthServerDefault example <auth server name>
// ```
type AuthServerDefault struct {
	pulumi.CustomResourceState

	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayOutput `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringOutput `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation pulumi.StringOutput `pulumi:"credentialsNextRotation"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrOutput `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// The name of the authorization server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the auth server.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewAuthServerDefault registers a new resource with the given unique name, arguments, and options.
func NewAuthServerDefault(ctx *pulumi.Context,
	name string, args *AuthServerDefaultArgs, opts ...pulumi.ResourceOption) (*AuthServerDefault, error) {
	if args == nil {
		args = &AuthServerDefaultArgs{}
	}

	var resource AuthServerDefault
	err := ctx.RegisterResource("okta:index/authServerDefault:AuthServerDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthServerDefault gets an existing AuthServerDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthServerDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthServerDefaultState, opts ...pulumi.ResourceOption) (*AuthServerDefault, error) {
	var resource AuthServerDefault
	err := ctx.ReadResource("okta:index/authServerDefault:AuthServerDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthServerDefault resources.
type authServerDefaultState struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences []string `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated *string `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation *string `pulumi:"credentialsNextRotation"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer *string `pulumi:"issuer"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid *string `pulumi:"kid"`
	// The name of the authorization server.
	Name *string `pulumi:"name"`
	// The status of the auth server.
	Status *string `pulumi:"status"`
}

type AuthServerDefaultState struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayInput
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringPtrInput
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation pulumi.StringPtrInput
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer pulumi.StringPtrInput
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringPtrInput
	// The name of the authorization server.
	Name pulumi.StringPtrInput
	// The status of the auth server.
	Status pulumi.StringPtrInput
}

func (AuthServerDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerDefaultState)(nil)).Elem()
}

type authServerDefaultArgs struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences []string `pulumi:"audiences"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// The name of the authorization server.
	Name *string `pulumi:"name"`
	// The status of the auth server.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a AuthServerDefault resource.
type AuthServerDefaultArgs struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayInput
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// The name of the authorization server.
	Name pulumi.StringPtrInput
	// The status of the auth server.
	Status pulumi.StringPtrInput
}

func (AuthServerDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authServerDefaultArgs)(nil)).Elem()
}

type AuthServerDefaultInput interface {
	pulumi.Input

	ToAuthServerDefaultOutput() AuthServerDefaultOutput
	ToAuthServerDefaultOutputWithContext(ctx context.Context) AuthServerDefaultOutput
}

func (*AuthServerDefault) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServerDefault)(nil))
}

func (i *AuthServerDefault) ToAuthServerDefaultOutput() AuthServerDefaultOutput {
	return i.ToAuthServerDefaultOutputWithContext(context.Background())
}

func (i *AuthServerDefault) ToAuthServerDefaultOutputWithContext(ctx context.Context) AuthServerDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerDefaultOutput)
}

func (i *AuthServerDefault) ToAuthServerDefaultPtrOutput() AuthServerDefaultPtrOutput {
	return i.ToAuthServerDefaultPtrOutputWithContext(context.Background())
}

func (i *AuthServerDefault) ToAuthServerDefaultPtrOutputWithContext(ctx context.Context) AuthServerDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerDefaultPtrOutput)
}

type AuthServerDefaultPtrInput interface {
	pulumi.Input

	ToAuthServerDefaultPtrOutput() AuthServerDefaultPtrOutput
	ToAuthServerDefaultPtrOutputWithContext(ctx context.Context) AuthServerDefaultPtrOutput
}

type authServerDefaultPtrType AuthServerDefaultArgs

func (*authServerDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerDefault)(nil))
}

func (i *authServerDefaultPtrType) ToAuthServerDefaultPtrOutput() AuthServerDefaultPtrOutput {
	return i.ToAuthServerDefaultPtrOutputWithContext(context.Background())
}

func (i *authServerDefaultPtrType) ToAuthServerDefaultPtrOutputWithContext(ctx context.Context) AuthServerDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerDefaultPtrOutput)
}

// AuthServerDefaultArrayInput is an input type that accepts AuthServerDefaultArray and AuthServerDefaultArrayOutput values.
// You can construct a concrete instance of `AuthServerDefaultArrayInput` via:
//
//          AuthServerDefaultArray{ AuthServerDefaultArgs{...} }
type AuthServerDefaultArrayInput interface {
	pulumi.Input

	ToAuthServerDefaultArrayOutput() AuthServerDefaultArrayOutput
	ToAuthServerDefaultArrayOutputWithContext(context.Context) AuthServerDefaultArrayOutput
}

type AuthServerDefaultArray []AuthServerDefaultInput

func (AuthServerDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AuthServerDefault)(nil))
}

func (i AuthServerDefaultArray) ToAuthServerDefaultArrayOutput() AuthServerDefaultArrayOutput {
	return i.ToAuthServerDefaultArrayOutputWithContext(context.Background())
}

func (i AuthServerDefaultArray) ToAuthServerDefaultArrayOutputWithContext(ctx context.Context) AuthServerDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerDefaultArrayOutput)
}

// AuthServerDefaultMapInput is an input type that accepts AuthServerDefaultMap and AuthServerDefaultMapOutput values.
// You can construct a concrete instance of `AuthServerDefaultMapInput` via:
//
//          AuthServerDefaultMap{ "key": AuthServerDefaultArgs{...} }
type AuthServerDefaultMapInput interface {
	pulumi.Input

	ToAuthServerDefaultMapOutput() AuthServerDefaultMapOutput
	ToAuthServerDefaultMapOutputWithContext(context.Context) AuthServerDefaultMapOutput
}

type AuthServerDefaultMap map[string]AuthServerDefaultInput

func (AuthServerDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AuthServerDefault)(nil))
}

func (i AuthServerDefaultMap) ToAuthServerDefaultMapOutput() AuthServerDefaultMapOutput {
	return i.ToAuthServerDefaultMapOutputWithContext(context.Background())
}

func (i AuthServerDefaultMap) ToAuthServerDefaultMapOutputWithContext(ctx context.Context) AuthServerDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServerDefaultMapOutput)
}

type AuthServerDefaultOutput struct {
	*pulumi.OutputState
}

func (AuthServerDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServerDefault)(nil))
}

func (o AuthServerDefaultOutput) ToAuthServerDefaultOutput() AuthServerDefaultOutput {
	return o
}

func (o AuthServerDefaultOutput) ToAuthServerDefaultOutputWithContext(ctx context.Context) AuthServerDefaultOutput {
	return o
}

func (o AuthServerDefaultOutput) ToAuthServerDefaultPtrOutput() AuthServerDefaultPtrOutput {
	return o.ToAuthServerDefaultPtrOutputWithContext(context.Background())
}

func (o AuthServerDefaultOutput) ToAuthServerDefaultPtrOutputWithContext(ctx context.Context) AuthServerDefaultPtrOutput {
	return o.ApplyT(func(v AuthServerDefault) *AuthServerDefault {
		return &v
	}).(AuthServerDefaultPtrOutput)
}

type AuthServerDefaultPtrOutput struct {
	*pulumi.OutputState
}

func (AuthServerDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServerDefault)(nil))
}

func (o AuthServerDefaultPtrOutput) ToAuthServerDefaultPtrOutput() AuthServerDefaultPtrOutput {
	return o
}

func (o AuthServerDefaultPtrOutput) ToAuthServerDefaultPtrOutputWithContext(ctx context.Context) AuthServerDefaultPtrOutput {
	return o
}

type AuthServerDefaultArrayOutput struct{ *pulumi.OutputState }

func (AuthServerDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthServerDefault)(nil))
}

func (o AuthServerDefaultArrayOutput) ToAuthServerDefaultArrayOutput() AuthServerDefaultArrayOutput {
	return o
}

func (o AuthServerDefaultArrayOutput) ToAuthServerDefaultArrayOutputWithContext(ctx context.Context) AuthServerDefaultArrayOutput {
	return o
}

func (o AuthServerDefaultArrayOutput) Index(i pulumi.IntInput) AuthServerDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthServerDefault {
		return vs[0].([]AuthServerDefault)[vs[1].(int)]
	}).(AuthServerDefaultOutput)
}

type AuthServerDefaultMapOutput struct{ *pulumi.OutputState }

func (AuthServerDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AuthServerDefault)(nil))
}

func (o AuthServerDefaultMapOutput) ToAuthServerDefaultMapOutput() AuthServerDefaultMapOutput {
	return o
}

func (o AuthServerDefaultMapOutput) ToAuthServerDefaultMapOutputWithContext(ctx context.Context) AuthServerDefaultMapOutput {
	return o
}

func (o AuthServerDefaultMapOutput) MapIndex(k pulumi.StringInput) AuthServerDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AuthServerDefault {
		return vs[0].(map[string]AuthServerDefault)[vs[1].(string)]
	}).(AuthServerDefaultOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthServerDefaultOutput{})
	pulumi.RegisterOutputType(AuthServerDefaultPtrOutput{})
	pulumi.RegisterOutputType(AuthServerDefaultArrayOutput{})
	pulumi.RegisterOutputType(AuthServerDefaultMapOutput{})
}
