// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//
// This resource allows you to create and configure a sign-on policy rule for the application.
//
// A default or `Catch-all Rule` sign-on policy rule can be imported and managed as a custom rule.
// The only difference is that these fields are immutable and can not be managed: `networkConnection`, `networkExcludes`,
// `networkIncludes`, `platformInclude`, `customExpression`, `deviceIsRegistered`, `deviceIsManaged`, `usersExcluded`,
// `usersIncluded`, `groupsExcluded`, `groupsIncluded`, `userTypesExcluded` and `userTypesIncluded`.
//
// ## Example Usage
//
// ### Rule with Constraints
// ### Example 1:
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"knowledge": map[string]interface{}{
//					"types": []string{
//						"password",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = okta.NewAppSignonPolicyRule(ctx, "test", &okta.AppSignonPolicyRuleArgs{
//				PolicyId: pulumi.Any(data.Okta_app_signon_policy.Test.Id),
//				Constraints: pulumi.StringArray{
//					pulumi.String(json0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This will create an app sign-on policy rule with the following `THEN` block:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
// ### Example 2:
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"knowledge": map[string]interface{}{
//					"reauthenticateIn": "PT2H",
//					"types": []string{
//						"password",
//					},
//				},
//				"possession": map[string]interface{}{
//					"deviceBound":        "REQUIRED",
//					"hardwareProtection": "REQUIRED",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = okta.NewAppSignonPolicyRule(ctx, "test", &okta.AppSignonPolicyRuleArgs{
//				PolicyId: pulumi.Any(data.Okta_app_signon_policy.Test.Id),
//				Constraints: pulumi.StringArray{
//					pulumi.String(json0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This will create an app sign-on policy rule with the following `THEN` block:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// More examples can be
// found [here](https://developer.okta.com/docs/reference/api/policy/#verification-method-json-examples).
//
// ## Import
//
// Okta app sign-on policy rule can be imported via the Okta ID.
//
// ```sh
//
//	$ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example &#60;policy_id&#62;/&#60;rule_id&#62;
//
// ```
type AppSignonPolicyRule struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
	Constraints pulumi.StringArrayOutput `pulumi:"constraints"`
	// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrOutput `pulumi:"customExpression"`
	// List of device assurances IDs to be included.
	DeviceAssurancesIncludeds pulumi.StringArrayOutput `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management
	// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
	DeviceIsManaged pulumi.BoolPtrOutput `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta
	// Verify that is installed on the device. Can only be set to `true`.
	DeviceIsRegistered pulumi.BoolPtrOutput `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
	FactorMode pulumi.StringPtrOutput `pulumi:"factorMode"`
	// List of groups IDs to be excluded.
	GroupsExcludeds pulumi.StringArrayOutput `pulumi:"groupsExcludeds"`
	// List of groups IDs to be included.
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
	InactivityPeriod pulumi.StringPtrOutput `pulumi:"inactivityPeriod"`
	// Name of the policy rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// List of network zones IDs to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// List of particular platforms or devices to match on.
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayOutput `pulumi:"platformIncludes"`
	// ID of the app sign-on policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Priority of the rule.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
	ReAuthenticationFrequency pulumi.StringPtrOutput `pulumi:"reAuthenticationFrequency"`
	// Status of the rule
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// List of user types IDs to be excluded.
	UserTypesExcludeds pulumi.StringArrayOutput `pulumi:"userTypesExcludeds"`
	// List of user types IDs to be included.
	UserTypesIncludeds pulumi.StringArrayOutput `pulumi:"userTypesIncludeds"`
	// List of users IDs to be excluded.
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
	// List of users IDs to be included.
	UsersIncludeds pulumi.StringArrayOutput `pulumi:"usersIncludeds"`
}

// NewAppSignonPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewAppSignonPolicyRule(ctx *pulumi.Context,
	name string, args *AppSignonPolicyRuleArgs, opts ...pulumi.ResourceOption) (*AppSignonPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppSignonPolicyRule
	err := ctx.RegisterResource("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSignonPolicyRule gets an existing AppSignonPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSignonPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSignonPolicyRuleState, opts ...pulumi.ResourceOption) (*AppSignonPolicyRule, error) {
	var resource AppSignonPolicyRule
	err := ctx.ReadResource("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSignonPolicyRule resources.
type appSignonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
	Constraints []string `pulumi:"constraints"`
	// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression *string `pulumi:"customExpression"`
	// List of device assurances IDs to be included.
	DeviceAssurancesIncludeds []string `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management
	// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
	DeviceIsManaged *bool `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta
	// Verify that is installed on the device. Can only be set to `true`.
	DeviceIsRegistered *bool `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
	FactorMode *string `pulumi:"factorMode"`
	// List of groups IDs to be excluded.
	GroupsExcludeds []string `pulumi:"groupsExcludeds"`
	// List of groups IDs to be included.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
	InactivityPeriod *string `pulumi:"inactivityPeriod"`
	// Name of the policy rule.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// List of network zones IDs to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// List of particular platforms or devices to match on.
	PlatformIncludes []AppSignonPolicyRulePlatformInclude `pulumi:"platformIncludes"`
	// ID of the app sign-on policy.
	PolicyId *string `pulumi:"policyId"`
	// Priority of the rule.
	Priority *int `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
	ReAuthenticationFrequency *string `pulumi:"reAuthenticationFrequency"`
	// Status of the rule
	Status *string `pulumi:"status"`
	// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
	Type *string `pulumi:"type"`
	// List of user types IDs to be excluded.
	UserTypesExcludeds []string `pulumi:"userTypesExcludeds"`
	// List of user types IDs to be included.
	UserTypesIncludeds []string `pulumi:"userTypesIncludeds"`
	// List of users IDs to be excluded.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
	// List of users IDs to be included.
	UsersIncludeds []string `pulumi:"usersIncludeds"`
}

type AppSignonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
	Constraints pulumi.StringArrayInput
	// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrInput
	// List of device assurances IDs to be included.
	DeviceAssurancesIncludeds pulumi.StringArrayInput
	// If the device is managed. A device is managed if it's managed by a device management
	// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
	DeviceIsManaged pulumi.BoolPtrInput
	// If the device is registered. A device is registered if the User enrolls with Okta
	// Verify that is installed on the device. Can only be set to `true`.
	DeviceIsRegistered pulumi.BoolPtrInput
	// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
	FactorMode pulumi.StringPtrInput
	// List of groups IDs to be excluded.
	GroupsExcludeds pulumi.StringArrayInput
	// List of groups IDs to be included.
	GroupsIncludeds pulumi.StringArrayInput
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
	InactivityPeriod pulumi.StringPtrInput
	// Name of the policy rule.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// List of network zones IDs to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// List of particular platforms or devices to match on.
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayInput
	// ID of the app sign-on policy.
	PolicyId pulumi.StringPtrInput
	// Priority of the rule.
	Priority pulumi.IntPtrInput
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
	ReAuthenticationFrequency pulumi.StringPtrInput
	// Status of the rule
	Status pulumi.StringPtrInput
	// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
	Type pulumi.StringPtrInput
	// List of user types IDs to be excluded.
	UserTypesExcludeds pulumi.StringArrayInput
	// List of user types IDs to be included.
	UserTypesIncludeds pulumi.StringArrayInput
	// List of users IDs to be excluded.
	UsersExcludeds pulumi.StringArrayInput
	// List of users IDs to be included.
	UsersIncludeds pulumi.StringArrayInput
}

func (AppSignonPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSignonPolicyRuleState)(nil)).Elem()
}

type appSignonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
	Constraints []string `pulumi:"constraints"`
	// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression *string `pulumi:"customExpression"`
	// List of device assurances IDs to be included.
	DeviceAssurancesIncludeds []string `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management
	// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
	DeviceIsManaged *bool `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta
	// Verify that is installed on the device. Can only be set to `true`.
	DeviceIsRegistered *bool `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
	FactorMode *string `pulumi:"factorMode"`
	// List of groups IDs to be excluded.
	GroupsExcludeds []string `pulumi:"groupsExcludeds"`
	// List of groups IDs to be included.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
	InactivityPeriod *string `pulumi:"inactivityPeriod"`
	// Name of the policy rule.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// List of network zones IDs to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// List of particular platforms or devices to match on.
	PlatformIncludes []AppSignonPolicyRulePlatformInclude `pulumi:"platformIncludes"`
	// ID of the app sign-on policy.
	PolicyId string `pulumi:"policyId"`
	// Priority of the rule.
	Priority *int `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
	ReAuthenticationFrequency *string `pulumi:"reAuthenticationFrequency"`
	// Status of the rule
	Status *string `pulumi:"status"`
	// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
	Type *string `pulumi:"type"`
	// List of user types IDs to be excluded.
	UserTypesExcludeds []string `pulumi:"userTypesExcludeds"`
	// List of user types IDs to be included.
	UserTypesIncludeds []string `pulumi:"userTypesIncludeds"`
	// List of users IDs to be excluded.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
	// List of users IDs to be included.
	UsersIncludeds []string `pulumi:"usersIncludeds"`
}

// The set of arguments for constructing a AppSignonPolicyRule resource.
type AppSignonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
	Constraints pulumi.StringArrayInput
	// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrInput
	// List of device assurances IDs to be included.
	DeviceAssurancesIncludeds pulumi.StringArrayInput
	// If the device is managed. A device is managed if it's managed by a device management
	// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
	DeviceIsManaged pulumi.BoolPtrInput
	// If the device is registered. A device is registered if the User enrolls with Okta
	// Verify that is installed on the device. Can only be set to `true`.
	DeviceIsRegistered pulumi.BoolPtrInput
	// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
	FactorMode pulumi.StringPtrInput
	// List of groups IDs to be excluded.
	GroupsExcludeds pulumi.StringArrayInput
	// List of groups IDs to be included.
	GroupsIncludeds pulumi.StringArrayInput
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
	InactivityPeriod pulumi.StringPtrInput
	// Name of the policy rule.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// List of network zones IDs to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// List of particular platforms or devices to match on.
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayInput
	// ID of the app sign-on policy.
	PolicyId pulumi.StringInput
	// Priority of the rule.
	Priority pulumi.IntPtrInput
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
	ReAuthenticationFrequency pulumi.StringPtrInput
	// Status of the rule
	Status pulumi.StringPtrInput
	// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
	Type pulumi.StringPtrInput
	// List of user types IDs to be excluded.
	UserTypesExcludeds pulumi.StringArrayInput
	// List of user types IDs to be included.
	UserTypesIncludeds pulumi.StringArrayInput
	// List of users IDs to be excluded.
	UsersExcludeds pulumi.StringArrayInput
	// List of users IDs to be included.
	UsersIncludeds pulumi.StringArrayInput
}

func (AppSignonPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSignonPolicyRuleArgs)(nil)).Elem()
}

type AppSignonPolicyRuleInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput
	ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput
}

func (*AppSignonPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSignonPolicyRule)(nil)).Elem()
}

func (i *AppSignonPolicyRule) ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput {
	return i.ToAppSignonPolicyRuleOutputWithContext(context.Background())
}

func (i *AppSignonPolicyRule) ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleOutput)
}

func (i *AppSignonPolicyRule) ToOutput(ctx context.Context) pulumix.Output[*AppSignonPolicyRule] {
	return pulumix.Output[*AppSignonPolicyRule]{
		OutputState: i.ToAppSignonPolicyRuleOutputWithContext(ctx).OutputState,
	}
}

// AppSignonPolicyRuleArrayInput is an input type that accepts AppSignonPolicyRuleArray and AppSignonPolicyRuleArrayOutput values.
// You can construct a concrete instance of `AppSignonPolicyRuleArrayInput` via:
//
//	AppSignonPolicyRuleArray{ AppSignonPolicyRuleArgs{...} }
type AppSignonPolicyRuleArrayInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput
	ToAppSignonPolicyRuleArrayOutputWithContext(context.Context) AppSignonPolicyRuleArrayOutput
}

type AppSignonPolicyRuleArray []AppSignonPolicyRuleInput

func (AppSignonPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSignonPolicyRule)(nil)).Elem()
}

func (i AppSignonPolicyRuleArray) ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput {
	return i.ToAppSignonPolicyRuleArrayOutputWithContext(context.Background())
}

func (i AppSignonPolicyRuleArray) ToAppSignonPolicyRuleArrayOutputWithContext(ctx context.Context) AppSignonPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleArrayOutput)
}

func (i AppSignonPolicyRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*AppSignonPolicyRule] {
	return pulumix.Output[[]*AppSignonPolicyRule]{
		OutputState: i.ToAppSignonPolicyRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// AppSignonPolicyRuleMapInput is an input type that accepts AppSignonPolicyRuleMap and AppSignonPolicyRuleMapOutput values.
// You can construct a concrete instance of `AppSignonPolicyRuleMapInput` via:
//
//	AppSignonPolicyRuleMap{ "key": AppSignonPolicyRuleArgs{...} }
type AppSignonPolicyRuleMapInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput
	ToAppSignonPolicyRuleMapOutputWithContext(context.Context) AppSignonPolicyRuleMapOutput
}

type AppSignonPolicyRuleMap map[string]AppSignonPolicyRuleInput

func (AppSignonPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSignonPolicyRule)(nil)).Elem()
}

func (i AppSignonPolicyRuleMap) ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput {
	return i.ToAppSignonPolicyRuleMapOutputWithContext(context.Background())
}

func (i AppSignonPolicyRuleMap) ToAppSignonPolicyRuleMapOutputWithContext(ctx context.Context) AppSignonPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleMapOutput)
}

func (i AppSignonPolicyRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AppSignonPolicyRule] {
	return pulumix.Output[map[string]*AppSignonPolicyRule]{
		OutputState: i.ToAppSignonPolicyRuleMapOutputWithContext(ctx).OutputState,
	}
}

type AppSignonPolicyRuleOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleOutput) ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput {
	return o
}

func (o AppSignonPolicyRuleOutput) ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput {
	return o
}

func (o AppSignonPolicyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*AppSignonPolicyRule] {
	return pulumix.Output[*AppSignonPolicyRule]{
		OutputState: o.OutputState,
	}
}

// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
func (o AppSignonPolicyRuleOutput) Access() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Access }).(pulumi.StringPtrOutput)
}

// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
func (o AppSignonPolicyRuleOutput) Constraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.Constraints }).(pulumi.StringArrayOutput)
}

// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
func (o AppSignonPolicyRuleOutput) CustomExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.CustomExpression }).(pulumi.StringPtrOutput)
}

// List of device assurances IDs to be included.
func (o AppSignonPolicyRuleOutput) DeviceAssurancesIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.DeviceAssurancesIncludeds }).(pulumi.StringArrayOutput)
}

// If the device is managed. A device is managed if it's managed by a device management
// system. When managed is passed, `deviceIsRegistered` must also be included and must be set to `true`.
func (o AppSignonPolicyRuleOutput) DeviceIsManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.BoolPtrOutput { return v.DeviceIsManaged }).(pulumi.BoolPtrOutput)
}

// If the device is registered. A device is registered if the User enrolls with Okta
// Verify that is installed on the device. Can only be set to `true`.
func (o AppSignonPolicyRuleOutput) DeviceIsRegistered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.BoolPtrOutput { return v.DeviceIsRegistered }).(pulumi.BoolPtrOutput)
}

// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
func (o AppSignonPolicyRuleOutput) FactorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.FactorMode }).(pulumi.StringPtrOutput)
}

// List of groups IDs to be excluded.
func (o AppSignonPolicyRuleOutput) GroupsExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.GroupsExcludeds }).(pulumi.StringArrayOutput)
}

// List of groups IDs to be included.
func (o AppSignonPolicyRuleOutput) GroupsIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.GroupsIncludeds }).(pulumi.StringArrayOutput)
}

// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
func (o AppSignonPolicyRuleOutput) InactivityPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.InactivityPeriod }).(pulumi.StringPtrOutput)
}

// Name of the policy rule.
func (o AppSignonPolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
func (o AppSignonPolicyRuleOutput) NetworkConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.NetworkConnection }).(pulumi.StringPtrOutput)
}

// List of network zones IDs to exclude. Conflicts with `networkIncludes`.
func (o AppSignonPolicyRuleOutput) NetworkExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.NetworkExcludes }).(pulumi.StringArrayOutput)
}

// List of network zones IDs to include. Conflicts with `networkExcludes`.
func (o AppSignonPolicyRuleOutput) NetworkIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.NetworkIncludes }).(pulumi.StringArrayOutput)
}

// List of particular platforms or devices to match on.
func (o AppSignonPolicyRuleOutput) PlatformIncludes() AppSignonPolicyRulePlatformIncludeArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) AppSignonPolicyRulePlatformIncludeArrayOutput { return v.PlatformIncludes }).(AppSignonPolicyRulePlatformIncludeArrayOutput)
}

// ID of the app sign-on policy.
func (o AppSignonPolicyRuleOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Priority of the rule.
func (o AppSignonPolicyRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
func (o AppSignonPolicyRuleOutput) ReAuthenticationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.ReAuthenticationFrequency }).(pulumi.StringPtrOutput)
}

// Status of the rule
func (o AppSignonPolicyRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
func (o AppSignonPolicyRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// List of user types IDs to be excluded.
func (o AppSignonPolicyRuleOutput) UserTypesExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UserTypesExcludeds }).(pulumi.StringArrayOutput)
}

// List of user types IDs to be included.
func (o AppSignonPolicyRuleOutput) UserTypesIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UserTypesIncludeds }).(pulumi.StringArrayOutput)
}

// List of users IDs to be excluded.
func (o AppSignonPolicyRuleOutput) UsersExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UsersExcludeds }).(pulumi.StringArrayOutput)
}

// List of users IDs to be included.
func (o AppSignonPolicyRuleOutput) UsersIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UsersIncludeds }).(pulumi.StringArrayOutput)
}

type AppSignonPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleArrayOutput) ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput {
	return o
}

func (o AppSignonPolicyRuleArrayOutput) ToAppSignonPolicyRuleArrayOutputWithContext(ctx context.Context) AppSignonPolicyRuleArrayOutput {
	return o
}

func (o AppSignonPolicyRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AppSignonPolicyRule] {
	return pulumix.Output[[]*AppSignonPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o AppSignonPolicyRuleArrayOutput) Index(i pulumi.IntInput) AppSignonPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSignonPolicyRule {
		return vs[0].([]*AppSignonPolicyRule)[vs[1].(int)]
	}).(AppSignonPolicyRuleOutput)
}

type AppSignonPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleMapOutput) ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput {
	return o
}

func (o AppSignonPolicyRuleMapOutput) ToAppSignonPolicyRuleMapOutputWithContext(ctx context.Context) AppSignonPolicyRuleMapOutput {
	return o
}

func (o AppSignonPolicyRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AppSignonPolicyRule] {
	return pulumix.Output[map[string]*AppSignonPolicyRule]{
		OutputState: o.OutputState,
	}
}

func (o AppSignonPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) AppSignonPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSignonPolicyRule {
		return vs[0].(map[string]*AppSignonPolicyRule)[vs[1].(string)]
	}).(AppSignonPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleInput)(nil)).Elem(), &AppSignonPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleArrayInput)(nil)).Elem(), AppSignonPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleMapInput)(nil)).Elem(), AppSignonPolicyRuleMap{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleOutput{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleMapOutput{})
}
