// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a sign-on policy rules for the application.
// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
// This resource allows you to create and configure a sign-on policy rule for the application.
// A default or 'Catch-all Rule' sign-on policy rule can be imported and managed as a custom rule.
// The only difference is that these fields are immutable and can not be managed: 'network_connection', 'network_excludes',
// 'network_includes', 'platform_include', 'custom_expression', 'device_is_registered', 'device_is_managed', 'users_excluded',
// 'users_included', 'groups_excluded', 'groups_included', 'user_types_excluded' and 'user_types_included'.
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example <policy_id>/<rule_id>
// ```
type AppSignonPolicyRule struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions: ALLOW or DENY
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
	Chains pulumi.StringArrayOutput `pulumi:"chains"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
	Constraints pulumi.StringArrayOutput `pulumi:"constraints"`
	// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrOutput `pulumi:"customExpression"`
	// List of device assurance IDs to include
	DeviceAssurancesIncludeds pulumi.StringArrayOutput `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
	DeviceIsManaged pulumi.BoolPtrOutput `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
	DeviceIsRegistered pulumi.BoolPtrOutput `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level
	FactorMode pulumi.StringPtrOutput `pulumi:"factorMode"`
	// List of group IDs to exclude
	GroupsExcludeds pulumi.StringArrayOutput `pulumi:"groupsExcludeds"`
	// List of group IDs to include
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
	InactivityPeriod pulumi.StringPtrOutput `pulumi:"inactivityPeriod"`
	// Policy Rule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes  pulumi.StringArrayOutput                      `pulumi:"networkIncludes"`
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayOutput `pulumi:"platformIncludes"`
	// ID of the policy
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Priority of the rule.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
	ReAuthenticationFrequency pulumi.StringPtrOutput `pulumi:"reAuthenticationFrequency"`
	// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
	RiskScore pulumi.StringOutput `pulumi:"riskScore"`
	// Status of the rule
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
	System pulumi.BoolOutput `pulumi:"system"`
	// The Verification Method type
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Set of User Type IDs to exclude
	UserTypesExcludeds pulumi.StringArrayOutput `pulumi:"userTypesExcludeds"`
	// Set of User Type IDs to include
	UserTypesIncludeds pulumi.StringArrayOutput `pulumi:"userTypesIncludeds"`
	// Set of User IDs to exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
	// Set of User IDs to include
	UsersIncludeds pulumi.StringArrayOutput `pulumi:"usersIncludeds"`
}

// NewAppSignonPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewAppSignonPolicyRule(ctx *pulumi.Context,
	name string, args *AppSignonPolicyRuleArgs, opts ...pulumi.ResourceOption) (*AppSignonPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppSignonPolicyRule
	err := ctx.RegisterResource("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSignonPolicyRule gets an existing AppSignonPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSignonPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSignonPolicyRuleState, opts ...pulumi.ResourceOption) (*AppSignonPolicyRule, error) {
	var resource AppSignonPolicyRule
	err := ctx.ReadResource("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSignonPolicyRule resources.
type appSignonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions: ALLOW or DENY
	Access *string `pulumi:"access"`
	// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
	Chains []string `pulumi:"chains"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
	Constraints []string `pulumi:"constraints"`
	// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression *string `pulumi:"customExpression"`
	// List of device assurance IDs to include
	DeviceAssurancesIncludeds []string `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
	DeviceIsManaged *bool `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
	DeviceIsRegistered *bool `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level
	FactorMode *string `pulumi:"factorMode"`
	// List of group IDs to exclude
	GroupsExcludeds []string `pulumi:"groupsExcludeds"`
	// List of group IDs to include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
	InactivityPeriod *string `pulumi:"inactivityPeriod"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes  []string                             `pulumi:"networkIncludes"`
	PlatformIncludes []AppSignonPolicyRulePlatformInclude `pulumi:"platformIncludes"`
	// ID of the policy
	PolicyId *string `pulumi:"policyId"`
	// Priority of the rule.
	Priority *int `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
	ReAuthenticationFrequency *string `pulumi:"reAuthenticationFrequency"`
	// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
	RiskScore *string `pulumi:"riskScore"`
	// Status of the rule
	Status *string `pulumi:"status"`
	// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
	System *bool `pulumi:"system"`
	// The Verification Method type
	Type *string `pulumi:"type"`
	// Set of User Type IDs to exclude
	UserTypesExcludeds []string `pulumi:"userTypesExcludeds"`
	// Set of User Type IDs to include
	UserTypesIncludeds []string `pulumi:"userTypesIncludeds"`
	// Set of User IDs to exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
	// Set of User IDs to include
	UsersIncludeds []string `pulumi:"usersIncludeds"`
}

type AppSignonPolicyRuleState struct {
	// Allow or deny access based on the rule conditions: ALLOW or DENY
	Access pulumi.StringPtrInput
	// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
	Chains pulumi.StringArrayInput
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
	Constraints pulumi.StringArrayInput
	// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrInput
	// List of device assurance IDs to include
	DeviceAssurancesIncludeds pulumi.StringArrayInput
	// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
	DeviceIsManaged pulumi.BoolPtrInput
	// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
	DeviceIsRegistered pulumi.BoolPtrInput
	// The number of factors required to satisfy this assurance level
	FactorMode pulumi.StringPtrInput
	// List of group IDs to exclude
	GroupsExcludeds pulumi.StringArrayInput
	// List of group IDs to include
	GroupsIncludeds pulumi.StringArrayInput
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
	InactivityPeriod pulumi.StringPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes  pulumi.StringArrayInput
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayInput
	// ID of the policy
	PolicyId pulumi.StringPtrInput
	// Priority of the rule.
	Priority pulumi.IntPtrInput
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
	ReAuthenticationFrequency pulumi.StringPtrInput
	// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
	RiskScore pulumi.StringPtrInput
	// Status of the rule
	Status pulumi.StringPtrInput
	// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
	System pulumi.BoolPtrInput
	// The Verification Method type
	Type pulumi.StringPtrInput
	// Set of User Type IDs to exclude
	UserTypesExcludeds pulumi.StringArrayInput
	// Set of User Type IDs to include
	UserTypesIncludeds pulumi.StringArrayInput
	// Set of User IDs to exclude
	UsersExcludeds pulumi.StringArrayInput
	// Set of User IDs to include
	UsersIncludeds pulumi.StringArrayInput
}

func (AppSignonPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSignonPolicyRuleState)(nil)).Elem()
}

type appSignonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions: ALLOW or DENY
	Access *string `pulumi:"access"`
	// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
	Chains []string `pulumi:"chains"`
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
	Constraints []string `pulumi:"constraints"`
	// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression *string `pulumi:"customExpression"`
	// List of device assurance IDs to include
	DeviceAssurancesIncludeds []string `pulumi:"deviceAssurancesIncludeds"`
	// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
	DeviceIsManaged *bool `pulumi:"deviceIsManaged"`
	// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
	DeviceIsRegistered *bool `pulumi:"deviceIsRegistered"`
	// The number of factors required to satisfy this assurance level
	FactorMode *string `pulumi:"factorMode"`
	// List of group IDs to exclude
	GroupsExcludeds []string `pulumi:"groupsExcludeds"`
	// List of group IDs to include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
	InactivityPeriod *string `pulumi:"inactivityPeriod"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The zones to exclude
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The zones to include
	NetworkIncludes  []string                             `pulumi:"networkIncludes"`
	PlatformIncludes []AppSignonPolicyRulePlatformInclude `pulumi:"platformIncludes"`
	// ID of the policy
	PolicyId string `pulumi:"policyId"`
	// Priority of the rule.
	Priority *int `pulumi:"priority"`
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
	ReAuthenticationFrequency *string `pulumi:"reAuthenticationFrequency"`
	// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
	RiskScore *string `pulumi:"riskScore"`
	// Status of the rule
	Status *string `pulumi:"status"`
	// The Verification Method type
	Type *string `pulumi:"type"`
	// Set of User Type IDs to exclude
	UserTypesExcludeds []string `pulumi:"userTypesExcludeds"`
	// Set of User Type IDs to include
	UserTypesIncludeds []string `pulumi:"userTypesIncludeds"`
	// Set of User IDs to exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
	// Set of User IDs to include
	UsersIncludeds []string `pulumi:"usersIncludeds"`
}

// The set of arguments for constructing a AppSignonPolicyRule resource.
type AppSignonPolicyRuleArgs struct {
	// Allow or deny access based on the rule conditions: ALLOW or DENY
	Access pulumi.StringPtrInput
	// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
	Chains pulumi.StringArrayInput
	// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
	Constraints pulumi.StringArrayInput
	// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
	CustomExpression pulumi.StringPtrInput
	// List of device assurance IDs to include
	DeviceAssurancesIncludeds pulumi.StringArrayInput
	// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
	DeviceIsManaged pulumi.BoolPtrInput
	// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
	DeviceIsRegistered pulumi.BoolPtrInput
	// The number of factors required to satisfy this assurance level
	FactorMode pulumi.StringPtrInput
	// List of group IDs to exclude
	GroupsExcludeds pulumi.StringArrayInput
	// List of group IDs to include
	GroupsIncludeds pulumi.StringArrayInput
	// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
	InactivityPeriod pulumi.StringPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
	NetworkConnection pulumi.StringPtrInput
	// The zones to exclude
	NetworkExcludes pulumi.StringArrayInput
	// The zones to include
	NetworkIncludes  pulumi.StringArrayInput
	PlatformIncludes AppSignonPolicyRulePlatformIncludeArrayInput
	// ID of the policy
	PolicyId pulumi.StringInput
	// Priority of the rule.
	Priority pulumi.IntPtrInput
	// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
	ReAuthenticationFrequency pulumi.StringPtrInput
	// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
	RiskScore pulumi.StringPtrInput
	// Status of the rule
	Status pulumi.StringPtrInput
	// The Verification Method type
	Type pulumi.StringPtrInput
	// Set of User Type IDs to exclude
	UserTypesExcludeds pulumi.StringArrayInput
	// Set of User Type IDs to include
	UserTypesIncludeds pulumi.StringArrayInput
	// Set of User IDs to exclude
	UsersExcludeds pulumi.StringArrayInput
	// Set of User IDs to include
	UsersIncludeds pulumi.StringArrayInput
}

func (AppSignonPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSignonPolicyRuleArgs)(nil)).Elem()
}

type AppSignonPolicyRuleInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput
	ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput
}

func (*AppSignonPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSignonPolicyRule)(nil)).Elem()
}

func (i *AppSignonPolicyRule) ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput {
	return i.ToAppSignonPolicyRuleOutputWithContext(context.Background())
}

func (i *AppSignonPolicyRule) ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleOutput)
}

// AppSignonPolicyRuleArrayInput is an input type that accepts AppSignonPolicyRuleArray and AppSignonPolicyRuleArrayOutput values.
// You can construct a concrete instance of `AppSignonPolicyRuleArrayInput` via:
//
//	AppSignonPolicyRuleArray{ AppSignonPolicyRuleArgs{...} }
type AppSignonPolicyRuleArrayInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput
	ToAppSignonPolicyRuleArrayOutputWithContext(context.Context) AppSignonPolicyRuleArrayOutput
}

type AppSignonPolicyRuleArray []AppSignonPolicyRuleInput

func (AppSignonPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSignonPolicyRule)(nil)).Elem()
}

func (i AppSignonPolicyRuleArray) ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput {
	return i.ToAppSignonPolicyRuleArrayOutputWithContext(context.Background())
}

func (i AppSignonPolicyRuleArray) ToAppSignonPolicyRuleArrayOutputWithContext(ctx context.Context) AppSignonPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleArrayOutput)
}

// AppSignonPolicyRuleMapInput is an input type that accepts AppSignonPolicyRuleMap and AppSignonPolicyRuleMapOutput values.
// You can construct a concrete instance of `AppSignonPolicyRuleMapInput` via:
//
//	AppSignonPolicyRuleMap{ "key": AppSignonPolicyRuleArgs{...} }
type AppSignonPolicyRuleMapInput interface {
	pulumi.Input

	ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput
	ToAppSignonPolicyRuleMapOutputWithContext(context.Context) AppSignonPolicyRuleMapOutput
}

type AppSignonPolicyRuleMap map[string]AppSignonPolicyRuleInput

func (AppSignonPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSignonPolicyRule)(nil)).Elem()
}

func (i AppSignonPolicyRuleMap) ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput {
	return i.ToAppSignonPolicyRuleMapOutputWithContext(context.Background())
}

func (i AppSignonPolicyRuleMap) ToAppSignonPolicyRuleMapOutputWithContext(ctx context.Context) AppSignonPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSignonPolicyRuleMapOutput)
}

type AppSignonPolicyRuleOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleOutput) ToAppSignonPolicyRuleOutput() AppSignonPolicyRuleOutput {
	return o
}

func (o AppSignonPolicyRuleOutput) ToAppSignonPolicyRuleOutputWithContext(ctx context.Context) AppSignonPolicyRuleOutput {
	return o
}

// Allow or deny access based on the rule conditions: ALLOW or DENY
func (o AppSignonPolicyRuleOutput) Access() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Access }).(pulumi.StringPtrOutput)
}

// Authentication method chains. Only supports 5 items in the array. Each chain can support maximum 3 steps. To be used only with verification method type `AUTH_METHOD_CHAIN`.
func (o AppSignonPolicyRuleOutput) Chains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.Chains }).(pulumi.StringArrayOutput)
}

// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
func (o AppSignonPolicyRuleOutput) Constraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.Constraints }).(pulumi.StringArrayOutput)
}

// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
func (o AppSignonPolicyRuleOutput) CustomExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.CustomExpression }).(pulumi.StringPtrOutput)
}

// List of device assurance IDs to include
func (o AppSignonPolicyRuleOutput) DeviceAssurancesIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.DeviceAssurancesIncludeds }).(pulumi.StringArrayOutput)
}

// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
func (o AppSignonPolicyRuleOutput) DeviceIsManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.BoolPtrOutput { return v.DeviceIsManaged }).(pulumi.BoolPtrOutput)
}

// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
func (o AppSignonPolicyRuleOutput) DeviceIsRegistered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.BoolPtrOutput { return v.DeviceIsRegistered }).(pulumi.BoolPtrOutput)
}

// The number of factors required to satisfy this assurance level
func (o AppSignonPolicyRuleOutput) FactorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.FactorMode }).(pulumi.StringPtrOutput)
}

// List of group IDs to exclude
func (o AppSignonPolicyRuleOutput) GroupsExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.GroupsExcludeds }).(pulumi.StringArrayOutput)
}

// List of group IDs to include
func (o AppSignonPolicyRuleOutput) GroupsIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.GroupsIncludeds }).(pulumi.StringArrayOutput)
}

// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
func (o AppSignonPolicyRuleOutput) InactivityPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.InactivityPeriod }).(pulumi.StringPtrOutput)
}

// Policy Rule Name
func (o AppSignonPolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
func (o AppSignonPolicyRuleOutput) NetworkConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.NetworkConnection }).(pulumi.StringPtrOutput)
}

// The zones to exclude
func (o AppSignonPolicyRuleOutput) NetworkExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.NetworkExcludes }).(pulumi.StringArrayOutput)
}

// The zones to include
func (o AppSignonPolicyRuleOutput) NetworkIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.NetworkIncludes }).(pulumi.StringArrayOutput)
}

func (o AppSignonPolicyRuleOutput) PlatformIncludes() AppSignonPolicyRulePlatformIncludeArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) AppSignonPolicyRulePlatformIncludeArrayOutput { return v.PlatformIncludes }).(AppSignonPolicyRulePlatformIncludeArrayOutput)
}

// ID of the policy
func (o AppSignonPolicyRuleOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Priority of the rule.
func (o AppSignonPolicyRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session. Cannot be set if reauthenticateIn is set in one or more entries of chains.
func (o AppSignonPolicyRuleOutput) ReAuthenticationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.ReAuthenticationFrequency }).(pulumi.StringPtrOutput)
}

// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
func (o AppSignonPolicyRuleOutput) RiskScore() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringOutput { return v.RiskScore }).(pulumi.StringOutput)
}

// Status of the rule
func (o AppSignonPolicyRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
func (o AppSignonPolicyRuleOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.BoolOutput { return v.System }).(pulumi.BoolOutput)
}

// The Verification Method type
func (o AppSignonPolicyRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Set of User Type IDs to exclude
func (o AppSignonPolicyRuleOutput) UserTypesExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UserTypesExcludeds }).(pulumi.StringArrayOutput)
}

// Set of User Type IDs to include
func (o AppSignonPolicyRuleOutput) UserTypesIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UserTypesIncludeds }).(pulumi.StringArrayOutput)
}

// Set of User IDs to exclude
func (o AppSignonPolicyRuleOutput) UsersExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UsersExcludeds }).(pulumi.StringArrayOutput)
}

// Set of User IDs to include
func (o AppSignonPolicyRuleOutput) UsersIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSignonPolicyRule) pulumi.StringArrayOutput { return v.UsersIncludeds }).(pulumi.StringArrayOutput)
}

type AppSignonPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleArrayOutput) ToAppSignonPolicyRuleArrayOutput() AppSignonPolicyRuleArrayOutput {
	return o
}

func (o AppSignonPolicyRuleArrayOutput) ToAppSignonPolicyRuleArrayOutputWithContext(ctx context.Context) AppSignonPolicyRuleArrayOutput {
	return o
}

func (o AppSignonPolicyRuleArrayOutput) Index(i pulumi.IntInput) AppSignonPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSignonPolicyRule {
		return vs[0].([]*AppSignonPolicyRule)[vs[1].(int)]
	}).(AppSignonPolicyRuleOutput)
}

type AppSignonPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (AppSignonPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSignonPolicyRule)(nil)).Elem()
}

func (o AppSignonPolicyRuleMapOutput) ToAppSignonPolicyRuleMapOutput() AppSignonPolicyRuleMapOutput {
	return o
}

func (o AppSignonPolicyRuleMapOutput) ToAppSignonPolicyRuleMapOutputWithContext(ctx context.Context) AppSignonPolicyRuleMapOutput {
	return o
}

func (o AppSignonPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) AppSignonPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSignonPolicyRule {
		return vs[0].(map[string]*AppSignonPolicyRule)[vs[1].(string)]
	}).(AppSignonPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleInput)(nil)).Elem(), &AppSignonPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleArrayInput)(nil)).Elem(), AppSignonPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSignonPolicyRuleMapInput)(nil)).Elem(), AppSignonPolicyRuleMap{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleOutput{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(AppSignonPolicyRuleMapOutput{})
}
