// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and configure SMTP email server configuration for your org.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewEmailSmtpServer(ctx, "example", &okta.EmailSmtpServerArgs{
//				Alias:    pulumi.String("CustomServer"),
//				Host:     pulumi.String("192.168.160.1"),
//				Port:     pulumi.Int(8086),
//				Username: pulumi.String("abcd"),
//				Enabled:  pulumi.Bool(false),
//				Password: pulumi.String("pwd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EmailSmtpServer struct {
	pulumi.CustomResourceState

	// Human-readable name for your SMTP server
	Alias pulumi.StringOutput `pulumi:"alias"`
	// If true, routes all email traffic through your SMTP server.Default: `false`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Hostname or IP address of your SMTP server
	Host pulumi.StringOutput `pulumi:"host"`
	// Password used to access your SMTP server
	Password pulumi.StringOutput `pulumi:"password"`
	// Port number of your SMTP server
	Port pulumi.IntOutput `pulumi:"port"`
	// Username used to access your SMTP server
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewEmailSmtpServer registers a new resource with the given unique name, arguments, and options.
func NewEmailSmtpServer(ctx *pulumi.Context,
	name string, args *EmailSmtpServerArgs, opts ...pulumi.ResourceOption) (*EmailSmtpServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailSmtpServer
	err := ctx.RegisterResource("okta:index/emailSmtpServer:EmailSmtpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailSmtpServer gets an existing EmailSmtpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailSmtpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailSmtpServerState, opts ...pulumi.ResourceOption) (*EmailSmtpServer, error) {
	var resource EmailSmtpServer
	err := ctx.ReadResource("okta:index/emailSmtpServer:EmailSmtpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailSmtpServer resources.
type emailSmtpServerState struct {
	// Human-readable name for your SMTP server
	Alias *string `pulumi:"alias"`
	// If true, routes all email traffic through your SMTP server.Default: `false`
	Enabled *bool `pulumi:"enabled"`
	// Hostname or IP address of your SMTP server
	Host *string `pulumi:"host"`
	// Password used to access your SMTP server
	Password *string `pulumi:"password"`
	// Port number of your SMTP server
	Port *int `pulumi:"port"`
	// Username used to access your SMTP server
	Username *string `pulumi:"username"`
}

type EmailSmtpServerState struct {
	// Human-readable name for your SMTP server
	Alias pulumi.StringPtrInput
	// If true, routes all email traffic through your SMTP server.Default: `false`
	Enabled pulumi.BoolPtrInput
	// Hostname or IP address of your SMTP server
	Host pulumi.StringPtrInput
	// Password used to access your SMTP server
	Password pulumi.StringPtrInput
	// Port number of your SMTP server
	Port pulumi.IntPtrInput
	// Username used to access your SMTP server
	Username pulumi.StringPtrInput
}

func (EmailSmtpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailSmtpServerState)(nil)).Elem()
}

type emailSmtpServerArgs struct {
	// Human-readable name for your SMTP server
	Alias string `pulumi:"alias"`
	// If true, routes all email traffic through your SMTP server.Default: `false`
	Enabled *bool `pulumi:"enabled"`
	// Hostname or IP address of your SMTP server
	Host string `pulumi:"host"`
	// Password used to access your SMTP server
	Password string `pulumi:"password"`
	// Port number of your SMTP server
	Port int `pulumi:"port"`
	// Username used to access your SMTP server
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a EmailSmtpServer resource.
type EmailSmtpServerArgs struct {
	// Human-readable name for your SMTP server
	Alias pulumi.StringInput
	// If true, routes all email traffic through your SMTP server.Default: `false`
	Enabled pulumi.BoolPtrInput
	// Hostname or IP address of your SMTP server
	Host pulumi.StringInput
	// Password used to access your SMTP server
	Password pulumi.StringInput
	// Port number of your SMTP server
	Port pulumi.IntInput
	// Username used to access your SMTP server
	Username pulumi.StringInput
}

func (EmailSmtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailSmtpServerArgs)(nil)).Elem()
}

type EmailSmtpServerInput interface {
	pulumi.Input

	ToEmailSmtpServerOutput() EmailSmtpServerOutput
	ToEmailSmtpServerOutputWithContext(ctx context.Context) EmailSmtpServerOutput
}

func (*EmailSmtpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSmtpServer)(nil)).Elem()
}

func (i *EmailSmtpServer) ToEmailSmtpServerOutput() EmailSmtpServerOutput {
	return i.ToEmailSmtpServerOutputWithContext(context.Background())
}

func (i *EmailSmtpServer) ToEmailSmtpServerOutputWithContext(ctx context.Context) EmailSmtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSmtpServerOutput)
}

// EmailSmtpServerArrayInput is an input type that accepts EmailSmtpServerArray and EmailSmtpServerArrayOutput values.
// You can construct a concrete instance of `EmailSmtpServerArrayInput` via:
//
//	EmailSmtpServerArray{ EmailSmtpServerArgs{...} }
type EmailSmtpServerArrayInput interface {
	pulumi.Input

	ToEmailSmtpServerArrayOutput() EmailSmtpServerArrayOutput
	ToEmailSmtpServerArrayOutputWithContext(context.Context) EmailSmtpServerArrayOutput
}

type EmailSmtpServerArray []EmailSmtpServerInput

func (EmailSmtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSmtpServer)(nil)).Elem()
}

func (i EmailSmtpServerArray) ToEmailSmtpServerArrayOutput() EmailSmtpServerArrayOutput {
	return i.ToEmailSmtpServerArrayOutputWithContext(context.Background())
}

func (i EmailSmtpServerArray) ToEmailSmtpServerArrayOutputWithContext(ctx context.Context) EmailSmtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSmtpServerArrayOutput)
}

// EmailSmtpServerMapInput is an input type that accepts EmailSmtpServerMap and EmailSmtpServerMapOutput values.
// You can construct a concrete instance of `EmailSmtpServerMapInput` via:
//
//	EmailSmtpServerMap{ "key": EmailSmtpServerArgs{...} }
type EmailSmtpServerMapInput interface {
	pulumi.Input

	ToEmailSmtpServerMapOutput() EmailSmtpServerMapOutput
	ToEmailSmtpServerMapOutputWithContext(context.Context) EmailSmtpServerMapOutput
}

type EmailSmtpServerMap map[string]EmailSmtpServerInput

func (EmailSmtpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSmtpServer)(nil)).Elem()
}

func (i EmailSmtpServerMap) ToEmailSmtpServerMapOutput() EmailSmtpServerMapOutput {
	return i.ToEmailSmtpServerMapOutputWithContext(context.Background())
}

func (i EmailSmtpServerMap) ToEmailSmtpServerMapOutputWithContext(ctx context.Context) EmailSmtpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSmtpServerMapOutput)
}

type EmailSmtpServerOutput struct{ *pulumi.OutputState }

func (EmailSmtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSmtpServer)(nil)).Elem()
}

func (o EmailSmtpServerOutput) ToEmailSmtpServerOutput() EmailSmtpServerOutput {
	return o
}

func (o EmailSmtpServerOutput) ToEmailSmtpServerOutputWithContext(ctx context.Context) EmailSmtpServerOutput {
	return o
}

// Human-readable name for your SMTP server
func (o EmailSmtpServerOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// If true, routes all email traffic through your SMTP server.Default: `false`
func (o EmailSmtpServerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Hostname or IP address of your SMTP server
func (o EmailSmtpServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Password used to access your SMTP server
func (o EmailSmtpServerOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Port number of your SMTP server
func (o EmailSmtpServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Username used to access your SMTP server
func (o EmailSmtpServerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSmtpServer) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type EmailSmtpServerArrayOutput struct{ *pulumi.OutputState }

func (EmailSmtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSmtpServer)(nil)).Elem()
}

func (o EmailSmtpServerArrayOutput) ToEmailSmtpServerArrayOutput() EmailSmtpServerArrayOutput {
	return o
}

func (o EmailSmtpServerArrayOutput) ToEmailSmtpServerArrayOutputWithContext(ctx context.Context) EmailSmtpServerArrayOutput {
	return o
}

func (o EmailSmtpServerArrayOutput) Index(i pulumi.IntInput) EmailSmtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailSmtpServer {
		return vs[0].([]*EmailSmtpServer)[vs[1].(int)]
	}).(EmailSmtpServerOutput)
}

type EmailSmtpServerMapOutput struct{ *pulumi.OutputState }

func (EmailSmtpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSmtpServer)(nil)).Elem()
}

func (o EmailSmtpServerMapOutput) ToEmailSmtpServerMapOutput() EmailSmtpServerMapOutput {
	return o
}

func (o EmailSmtpServerMapOutput) ToEmailSmtpServerMapOutputWithContext(ctx context.Context) EmailSmtpServerMapOutput {
	return o
}

func (o EmailSmtpServerMapOutput) MapIndex(k pulumi.StringInput) EmailSmtpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailSmtpServer {
		return vs[0].(map[string]*EmailSmtpServer)[vs[1].(string)]
	}).(EmailSmtpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSmtpServerInput)(nil)).Elem(), &EmailSmtpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSmtpServerArrayInput)(nil)).Elem(), EmailSmtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSmtpServerMapInput)(nil)).Elem(), EmailSmtpServerMap{})
	pulumi.RegisterOutputType(EmailSmtpServerOutput{})
	pulumi.RegisterOutputType(EmailSmtpServerArrayOutput{})
	pulumi.RegisterOutputType(EmailSmtpServerMapOutput{})
}
