// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to manage the time-based one-time password (TOTP) factors. A time-based one-time password (TOTP) is a
//
//	temporary passcode that is generated for user authentication. Examples of TOTP include hardware authenticators and
//	mobile app authenticators.
//
// Once saved, the settings cannot be changed (except for the 'name' field). Any other change would force resource
// recreation.
//
// > IMPORTANT: Okta API does not allow deletion of the TOTP factors through the
// API. This provider will print a warning if it attempts to destroy the resource
// receives a 501 not implemented error from the API instead of outright failing.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewFactorTotp(ctx, "example", &okta.FactorTotpArgs{
//				Name:                 pulumi.String("example"),
//				OtpLength:            pulumi.Int(10),
//				HmacAlgorithm:        pulumi.String("HMacSHA256"),
//				TimeStep:             pulumi.Int(30),
//				ClockDriftInterval:   pulumi.Int(10),
//				SharedSecretEncoding: pulumi.String("hexadecimal"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FactorTotp struct {
	pulumi.CustomResourceState

	// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
	ClockDriftInterval pulumi.IntPtrOutput `pulumi:"clockDriftInterval"`
	// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
	HmacAlgorithm pulumi.StringPtrOutput `pulumi:"hmacAlgorithm"`
	// The TOTP name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Length of the password. Default is `6`.
	OtpLength pulumi.IntPtrOutput `pulumi:"otpLength"`
	// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
	SharedSecretEncoding pulumi.StringPtrOutput `pulumi:"sharedSecretEncoding"`
	// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
	TimeStep pulumi.IntPtrOutput `pulumi:"timeStep"`
}

// NewFactorTotp registers a new resource with the given unique name, arguments, and options.
func NewFactorTotp(ctx *pulumi.Context,
	name string, args *FactorTotpArgs, opts ...pulumi.ResourceOption) (*FactorTotp, error) {
	if args == nil {
		args = &FactorTotpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FactorTotp
	err := ctx.RegisterResource("okta:index/factorTotp:FactorTotp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactorTotp gets an existing FactorTotp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactorTotp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactorTotpState, opts ...pulumi.ResourceOption) (*FactorTotp, error) {
	var resource FactorTotp
	err := ctx.ReadResource("okta:index/factorTotp:FactorTotp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FactorTotp resources.
type factorTotpState struct {
	// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
	ClockDriftInterval *int `pulumi:"clockDriftInterval"`
	// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// The TOTP name.
	Name *string `pulumi:"name"`
	// Length of the password. Default is `6`.
	OtpLength *int `pulumi:"otpLength"`
	// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
	SharedSecretEncoding *string `pulumi:"sharedSecretEncoding"`
	// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
	TimeStep *int `pulumi:"timeStep"`
}

type FactorTotpState struct {
	// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
	ClockDriftInterval pulumi.IntPtrInput
	// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
	HmacAlgorithm pulumi.StringPtrInput
	// The TOTP name.
	Name pulumi.StringPtrInput
	// Length of the password. Default is `6`.
	OtpLength pulumi.IntPtrInput
	// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
	SharedSecretEncoding pulumi.StringPtrInput
	// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
	TimeStep pulumi.IntPtrInput
}

func (FactorTotpState) ElementType() reflect.Type {
	return reflect.TypeOf((*factorTotpState)(nil)).Elem()
}

type factorTotpArgs struct {
	// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
	ClockDriftInterval *int `pulumi:"clockDriftInterval"`
	// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// The TOTP name.
	Name *string `pulumi:"name"`
	// Length of the password. Default is `6`.
	OtpLength *int `pulumi:"otpLength"`
	// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
	SharedSecretEncoding *string `pulumi:"sharedSecretEncoding"`
	// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
	TimeStep *int `pulumi:"timeStep"`
}

// The set of arguments for constructing a FactorTotp resource.
type FactorTotpArgs struct {
	// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
	ClockDriftInterval pulumi.IntPtrInput
	// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
	HmacAlgorithm pulumi.StringPtrInput
	// The TOTP name.
	Name pulumi.StringPtrInput
	// Length of the password. Default is `6`.
	OtpLength pulumi.IntPtrInput
	// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
	SharedSecretEncoding pulumi.StringPtrInput
	// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
	TimeStep pulumi.IntPtrInput
}

func (FactorTotpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factorTotpArgs)(nil)).Elem()
}

type FactorTotpInput interface {
	pulumi.Input

	ToFactorTotpOutput() FactorTotpOutput
	ToFactorTotpOutputWithContext(ctx context.Context) FactorTotpOutput
}

func (*FactorTotp) ElementType() reflect.Type {
	return reflect.TypeOf((**FactorTotp)(nil)).Elem()
}

func (i *FactorTotp) ToFactorTotpOutput() FactorTotpOutput {
	return i.ToFactorTotpOutputWithContext(context.Background())
}

func (i *FactorTotp) ToFactorTotpOutputWithContext(ctx context.Context) FactorTotpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorTotpOutput)
}

// FactorTotpArrayInput is an input type that accepts FactorTotpArray and FactorTotpArrayOutput values.
// You can construct a concrete instance of `FactorTotpArrayInput` via:
//
//	FactorTotpArray{ FactorTotpArgs{...} }
type FactorTotpArrayInput interface {
	pulumi.Input

	ToFactorTotpArrayOutput() FactorTotpArrayOutput
	ToFactorTotpArrayOutputWithContext(context.Context) FactorTotpArrayOutput
}

type FactorTotpArray []FactorTotpInput

func (FactorTotpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FactorTotp)(nil)).Elem()
}

func (i FactorTotpArray) ToFactorTotpArrayOutput() FactorTotpArrayOutput {
	return i.ToFactorTotpArrayOutputWithContext(context.Background())
}

func (i FactorTotpArray) ToFactorTotpArrayOutputWithContext(ctx context.Context) FactorTotpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorTotpArrayOutput)
}

// FactorTotpMapInput is an input type that accepts FactorTotpMap and FactorTotpMapOutput values.
// You can construct a concrete instance of `FactorTotpMapInput` via:
//
//	FactorTotpMap{ "key": FactorTotpArgs{...} }
type FactorTotpMapInput interface {
	pulumi.Input

	ToFactorTotpMapOutput() FactorTotpMapOutput
	ToFactorTotpMapOutputWithContext(context.Context) FactorTotpMapOutput
}

type FactorTotpMap map[string]FactorTotpInput

func (FactorTotpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FactorTotp)(nil)).Elem()
}

func (i FactorTotpMap) ToFactorTotpMapOutput() FactorTotpMapOutput {
	return i.ToFactorTotpMapOutputWithContext(context.Background())
}

func (i FactorTotpMap) ToFactorTotpMapOutputWithContext(ctx context.Context) FactorTotpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactorTotpMapOutput)
}

type FactorTotpOutput struct{ *pulumi.OutputState }

func (FactorTotpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactorTotp)(nil)).Elem()
}

func (o FactorTotpOutput) ToFactorTotpOutput() FactorTotpOutput {
	return o
}

func (o FactorTotpOutput) ToFactorTotpOutputWithContext(ctx context.Context) FactorTotpOutput {
	return o
}

// Clock drift interval. This setting allows you to build in tolerance for any drift between the token's current time and the server's current time. Valid values: `3`, `5`, `10`. Default is `3`.
func (o FactorTotpOutput) ClockDriftInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.IntPtrOutput { return v.ClockDriftInterval }).(pulumi.IntPtrOutput)
}

// HMAC Algorithm. Valid values: `HMacSHA1`, `HMacSHA256`, `HMacSHA512`. Default is `HMacSHA512`.
func (o FactorTotpOutput) HmacAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.StringPtrOutput { return v.HmacAlgorithm }).(pulumi.StringPtrOutput)
}

// The TOTP name.
func (o FactorTotpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Length of the password. Default is `6`.
func (o FactorTotpOutput) OtpLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.IntPtrOutput { return v.OtpLength }).(pulumi.IntPtrOutput)
}

// Shared secret encoding. Valid values: `base32`, `base64`, `hexadecimal`. Default is `base32`.
func (o FactorTotpOutput) SharedSecretEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.StringPtrOutput { return v.SharedSecretEncoding }).(pulumi.StringPtrOutput)
}

// Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
func (o FactorTotpOutput) TimeStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FactorTotp) pulumi.IntPtrOutput { return v.TimeStep }).(pulumi.IntPtrOutput)
}

type FactorTotpArrayOutput struct{ *pulumi.OutputState }

func (FactorTotpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FactorTotp)(nil)).Elem()
}

func (o FactorTotpArrayOutput) ToFactorTotpArrayOutput() FactorTotpArrayOutput {
	return o
}

func (o FactorTotpArrayOutput) ToFactorTotpArrayOutputWithContext(ctx context.Context) FactorTotpArrayOutput {
	return o
}

func (o FactorTotpArrayOutput) Index(i pulumi.IntInput) FactorTotpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FactorTotp {
		return vs[0].([]*FactorTotp)[vs[1].(int)]
	}).(FactorTotpOutput)
}

type FactorTotpMapOutput struct{ *pulumi.OutputState }

func (FactorTotpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FactorTotp)(nil)).Elem()
}

func (o FactorTotpMapOutput) ToFactorTotpMapOutput() FactorTotpMapOutput {
	return o
}

func (o FactorTotpMapOutput) ToFactorTotpMapOutputWithContext(ctx context.Context) FactorTotpMapOutput {
	return o
}

func (o FactorTotpMapOutput) MapIndex(k pulumi.StringInput) FactorTotpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FactorTotp {
		return vs[0].(map[string]*FactorTotp)[vs[1].(string)]
	}).(FactorTotpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FactorTotpInput)(nil)).Elem(), &FactorTotp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactorTotpArrayInput)(nil)).Elem(), FactorTotpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactorTotpMapInput)(nil)).Elem(), FactorTotpMap{})
	pulumi.RegisterOutputType(FactorTotpOutput{})
	pulumi.RegisterOutputType(FactorTotpArrayOutput{})
	pulumi.RegisterOutputType(FactorTotpMapOutput{})
}
