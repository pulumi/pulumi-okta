// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get authorization server claim from Okta.
func GetAuthServerClaim(ctx *pulumi.Context, args *GetAuthServerClaimArgs, opts ...pulumi.InvokeOption) (*GetAuthServerClaimResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuthServerClaimResult
	err := ctx.Invoke("okta:index/getAuthServerClaim:getAuthServerClaim", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthServerClaim.
type GetAuthServerClaimArgs struct {
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
	// Name of the claim. Conflicts with `name`.
	Id *string `pulumi:"id"`
	// Name of the claim. Conflicts with `id`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAuthServerClaim.
type GetAuthServerClaimResult struct {
	// Specifies whether to include Claims in the token.
	AlwaysIncludeInToken bool `pulumi:"alwaysIncludeInToken"`
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
	// Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
	ClaimType string `pulumi:"claimType"`
	// Name of the claim. Conflicts with `name`.
	Id *string `pulumi:"id"`
	// Name of the claim. Conflicts with `id`.
	Name *string `pulumi:"name"`
	// Auth server claim list of scopes
	Scopes []string `pulumi:"scopes"`
	// Status of the claim.
	Status string `pulumi:"status"`
	// Value of the claim.
	Value string `pulumi:"value"`
	// Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
	ValueType string `pulumi:"valueType"`
}

func GetAuthServerClaimOutput(ctx *pulumi.Context, args GetAuthServerClaimOutputArgs, opts ...pulumi.InvokeOption) GetAuthServerClaimResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAuthServerClaimResult, error) {
			args := v.(GetAuthServerClaimArgs)
			r, err := GetAuthServerClaim(ctx, &args, opts...)
			var s GetAuthServerClaimResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAuthServerClaimResultOutput)
}

// A collection of arguments for invoking getAuthServerClaim.
type GetAuthServerClaimOutputArgs struct {
	// Auth server ID
	AuthServerId pulumi.StringInput `pulumi:"authServerId"`
	// Name of the claim. Conflicts with `name`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the claim. Conflicts with `id`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetAuthServerClaimOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthServerClaimArgs)(nil)).Elem()
}

// A collection of values returned by getAuthServerClaim.
type GetAuthServerClaimResultOutput struct{ *pulumi.OutputState }

func (GetAuthServerClaimResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthServerClaimResult)(nil)).Elem()
}

func (o GetAuthServerClaimResultOutput) ToGetAuthServerClaimResultOutput() GetAuthServerClaimResultOutput {
	return o
}

func (o GetAuthServerClaimResultOutput) ToGetAuthServerClaimResultOutputWithContext(ctx context.Context) GetAuthServerClaimResultOutput {
	return o
}

func (o GetAuthServerClaimResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetAuthServerClaimResult] {
	return pulumix.Output[GetAuthServerClaimResult]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to include Claims in the token.
func (o GetAuthServerClaimResultOutput) AlwaysIncludeInToken() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) bool { return v.AlwaysIncludeInToken }).(pulumi.BoolOutput)
}

// Auth server ID
func (o GetAuthServerClaimResultOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) string { return v.AuthServerId }).(pulumi.StringOutput)
}

// Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
func (o GetAuthServerClaimResultOutput) ClaimType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) string { return v.ClaimType }).(pulumi.StringOutput)
}

// Name of the claim. Conflicts with `name`.
func (o GetAuthServerClaimResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the claim. Conflicts with `id`.
func (o GetAuthServerClaimResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Auth server claim list of scopes
func (o GetAuthServerClaimResultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Status of the claim.
func (o GetAuthServerClaimResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) string { return v.Status }).(pulumi.StringOutput)
}

// Value of the claim.
func (o GetAuthServerClaimResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) string { return v.Value }).(pulumi.StringOutput)
}

// Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
func (o GetAuthServerClaimResultOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthServerClaimResult) string { return v.ValueType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuthServerClaimResultOutput{})
}
