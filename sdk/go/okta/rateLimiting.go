// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages rate limiting.
// This resource allows you to configure the client-based rate limit and rate limiting communications settings.
// > **WARNING:** This resource is deprecated and will be removed in a future release. A new resource to manage rate limiting settings will be implemented in the future.
//
// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/rateLimiting:RateLimiting example .
// ```
type RateLimiting struct {
	pulumi.CustomResourceState

	DefaultMode pulumi.StringOutput `pulumi:"defaultMode"`
	// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
	UseCaseModeOverrides RateLimitingUseCaseModeOverridesPtrOutput `pulumi:"useCaseModeOverrides"`
}

// NewRateLimiting registers a new resource with the given unique name, arguments, and options.
func NewRateLimiting(ctx *pulumi.Context,
	name string, args *RateLimitingArgs, opts ...pulumi.ResourceOption) (*RateLimiting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultMode == nil {
		return nil, errors.New("invalid value for required argument 'DefaultMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RateLimiting
	err := ctx.RegisterResource("okta:index/rateLimiting:RateLimiting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRateLimiting gets an existing RateLimiting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRateLimiting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RateLimitingState, opts ...pulumi.ResourceOption) (*RateLimiting, error) {
	var resource RateLimiting
	err := ctx.ReadResource("okta:index/rateLimiting:RateLimiting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RateLimiting resources.
type rateLimitingState struct {
	DefaultMode *string `pulumi:"defaultMode"`
	// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
	UseCaseModeOverrides *RateLimitingUseCaseModeOverrides `pulumi:"useCaseModeOverrides"`
}

type RateLimitingState struct {
	DefaultMode pulumi.StringPtrInput
	// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
	UseCaseModeOverrides RateLimitingUseCaseModeOverridesPtrInput
}

func (RateLimitingState) ElementType() reflect.Type {
	return reflect.TypeOf((*rateLimitingState)(nil)).Elem()
}

type rateLimitingArgs struct {
	DefaultMode string `pulumi:"defaultMode"`
	// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
	UseCaseModeOverrides *RateLimitingUseCaseModeOverrides `pulumi:"useCaseModeOverrides"`
}

// The set of arguments for constructing a RateLimiting resource.
type RateLimitingArgs struct {
	DefaultMode pulumi.StringInput
	// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
	UseCaseModeOverrides RateLimitingUseCaseModeOverridesPtrInput
}

func (RateLimitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rateLimitingArgs)(nil)).Elem()
}

type RateLimitingInput interface {
	pulumi.Input

	ToRateLimitingOutput() RateLimitingOutput
	ToRateLimitingOutputWithContext(ctx context.Context) RateLimitingOutput
}

func (*RateLimiting) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimiting)(nil)).Elem()
}

func (i *RateLimiting) ToRateLimitingOutput() RateLimitingOutput {
	return i.ToRateLimitingOutputWithContext(context.Background())
}

func (i *RateLimiting) ToRateLimitingOutputWithContext(ctx context.Context) RateLimitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitingOutput)
}

// RateLimitingArrayInput is an input type that accepts RateLimitingArray and RateLimitingArrayOutput values.
// You can construct a concrete instance of `RateLimitingArrayInput` via:
//
//	RateLimitingArray{ RateLimitingArgs{...} }
type RateLimitingArrayInput interface {
	pulumi.Input

	ToRateLimitingArrayOutput() RateLimitingArrayOutput
	ToRateLimitingArrayOutputWithContext(context.Context) RateLimitingArrayOutput
}

type RateLimitingArray []RateLimitingInput

func (RateLimitingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RateLimiting)(nil)).Elem()
}

func (i RateLimitingArray) ToRateLimitingArrayOutput() RateLimitingArrayOutput {
	return i.ToRateLimitingArrayOutputWithContext(context.Background())
}

func (i RateLimitingArray) ToRateLimitingArrayOutputWithContext(ctx context.Context) RateLimitingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitingArrayOutput)
}

// RateLimitingMapInput is an input type that accepts RateLimitingMap and RateLimitingMapOutput values.
// You can construct a concrete instance of `RateLimitingMapInput` via:
//
//	RateLimitingMap{ "key": RateLimitingArgs{...} }
type RateLimitingMapInput interface {
	pulumi.Input

	ToRateLimitingMapOutput() RateLimitingMapOutput
	ToRateLimitingMapOutputWithContext(context.Context) RateLimitingMapOutput
}

type RateLimitingMap map[string]RateLimitingInput

func (RateLimitingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RateLimiting)(nil)).Elem()
}

func (i RateLimitingMap) ToRateLimitingMapOutput() RateLimitingMapOutput {
	return i.ToRateLimitingMapOutputWithContext(context.Background())
}

func (i RateLimitingMap) ToRateLimitingMapOutputWithContext(ctx context.Context) RateLimitingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitingMapOutput)
}

type RateLimitingOutput struct{ *pulumi.OutputState }

func (RateLimitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimiting)(nil)).Elem()
}

func (o RateLimitingOutput) ToRateLimitingOutput() RateLimitingOutput {
	return o
}

func (o RateLimitingOutput) ToRateLimitingOutputWithContext(ctx context.Context) RateLimitingOutput {
	return o
}

func (o RateLimitingOutput) DefaultMode() pulumi.StringOutput {
	return o.ApplyT(func(v *RateLimiting) pulumi.StringOutput { return v.DefaultMode }).(pulumi.StringOutput)
}

// A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
func (o RateLimitingOutput) UseCaseModeOverrides() RateLimitingUseCaseModeOverridesPtrOutput {
	return o.ApplyT(func(v *RateLimiting) RateLimitingUseCaseModeOverridesPtrOutput { return v.UseCaseModeOverrides }).(RateLimitingUseCaseModeOverridesPtrOutput)
}

type RateLimitingArrayOutput struct{ *pulumi.OutputState }

func (RateLimitingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RateLimiting)(nil)).Elem()
}

func (o RateLimitingArrayOutput) ToRateLimitingArrayOutput() RateLimitingArrayOutput {
	return o
}

func (o RateLimitingArrayOutput) ToRateLimitingArrayOutputWithContext(ctx context.Context) RateLimitingArrayOutput {
	return o
}

func (o RateLimitingArrayOutput) Index(i pulumi.IntInput) RateLimitingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RateLimiting {
		return vs[0].([]*RateLimiting)[vs[1].(int)]
	}).(RateLimitingOutput)
}

type RateLimitingMapOutput struct{ *pulumi.OutputState }

func (RateLimitingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RateLimiting)(nil)).Elem()
}

func (o RateLimitingMapOutput) ToRateLimitingMapOutput() RateLimitingMapOutput {
	return o
}

func (o RateLimitingMapOutput) ToRateLimitingMapOutputWithContext(ctx context.Context) RateLimitingMapOutput {
	return o
}

func (o RateLimitingMapOutput) MapIndex(k pulumi.StringInput) RateLimitingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RateLimiting {
		return vs[0].(map[string]*RateLimiting)[vs[1].(string)]
	}).(RateLimitingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitingInput)(nil)).Elem(), &RateLimiting{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitingArrayInput)(nil)).Elem(), RateLimitingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitingMapInput)(nil)).Elem(), RateLimitingMap{})
	pulumi.RegisterOutputType(RateLimitingOutput{})
	pulumi.RegisterOutputType(RateLimitingArrayOutput{})
	pulumi.RegisterOutputType(RateLimitingMapOutput{})
}
