// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Profile Enrollment Policy Rule.
//
// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
// A [profile enrollment
// policy](https://developer.okta.com/docs/reference/api/policy/#profile-enrollment-policy)
// is limited to one default rule. This resource does not create a rule for an
// enrollment policy, it allows the default policy rule to be updated.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/group"
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/inline"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := okta.NewPolicyProfileEnrollment(ctx, "example", &okta.PolicyProfileEnrollmentArgs{
//				Name: pulumi.String("My Enrollment Policy"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHook, err := inline.NewHook(ctx, "example", &inline.HookArgs{
//				Name:    pulumi.String("My Inline Hook"),
//				Status:  pulumi.String("ACTIVE"),
//				Type:    pulumi.String("com.okta.user.pre-registration"),
//				Version: pulumi.String("1.0.3"),
//				Channel: pulumi.StringMap{
//					"type":    pulumi.String("HTTP"),
//					"version": pulumi.String("1.0.0"),
//					"uri":     pulumi.String("https://example.com/test2"),
//					"method":  pulumi.String("POST"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleGroup, err := group.NewGroup(ctx, "example", &group.GroupArgs{
//				Name:        pulumi.String("My Group"),
//				Description: pulumi.String("Group of some users"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewPolicyRuleProfileEnrollment(ctx, "example", &okta.PolicyRuleProfileEnrollmentArgs{
//				PolicyId:          example.ID(),
//				InlineHookId:      exampleHook.ID(),
//				TargetGroupId:     exampleGroup.ID(),
//				UnknownUserAction: pulumi.String("REGISTER"),
//				EmailVerification: pulumi.Bool(true),
//				Access:            pulumi.String("ALLOW"),
//				ProfileAttributes: okta.PolicyRuleProfileEnrollmentProfileAttributeArray{
//					&okta.PolicyRuleProfileEnrollmentProfileAttributeArgs{
//						Name:     pulumi.String("email"),
//						Label:    pulumi.String("Email"),
//						Required: pulumi.Bool(true),
//					},
//					&okta.PolicyRuleProfileEnrollmentProfileAttributeArgs{
//						Name:     pulumi.String("name"),
//						Label:    pulumi.String("Name"),
//						Required: pulumi.Bool(true),
//					},
//					&okta.PolicyRuleProfileEnrollmentProfileAttributeArgs{
//						Name:     pulumi.String("t-shirt"),
//						Label:    pulumi.String("T-Shirt Size"),
//						Required: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment example <policy_id>/<rule_id>
// ```
type PolicyRuleProfileEnrollment struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default: `true`.
	EmailVerification pulumi.BoolPtrOutput `pulumi:"emailVerification"`
	// Enrolls authenticator types
	EnrollAuthenticatorTypes pulumi.StringArrayOutput `pulumi:"enrollAuthenticatorTypes"`
	// ID of a Registration Inline Hook
	InlineHookId pulumi.StringPtrOutput `pulumi:"inlineHookId"`
	// Name of the rule
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the policy
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
	// 	- 'label' - (Required) A display-friendly label for this property
	// 	- 'name' - (Required) The name of a User Profile property
	// 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayOutput `pulumi:"profileAttributes"`
	// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
	ProgressiveProfilingAction pulumi.StringPtrOutput `pulumi:"progressiveProfilingAction"`
	// Status of the rule
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of a Group that this User should be added to
	TargetGroupId pulumi.StringPtrOutput `pulumi:"targetGroupId"`
	// Value created by the backend. If present all policy updates must include this attribute/value.
	UiSchemaId pulumi.StringPtrOutput `pulumi:"uiSchemaId"`
	// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
	UnknownUserAction pulumi.StringOutput `pulumi:"unknownUserAction"`
}

// NewPolicyRuleProfileEnrollment registers a new resource with the given unique name, arguments, and options.
func NewPolicyRuleProfileEnrollment(ctx *pulumi.Context,
	name string, args *PolicyRuleProfileEnrollmentArgs, opts ...pulumi.ResourceOption) (*PolicyRuleProfileEnrollment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.UnknownUserAction == nil {
		return nil, errors.New("invalid value for required argument 'UnknownUserAction'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyRuleProfileEnrollment
	err := ctx.RegisterResource("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyRuleProfileEnrollment gets an existing PolicyRuleProfileEnrollment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyRuleProfileEnrollment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyRuleProfileEnrollmentState, opts ...pulumi.ResourceOption) (*PolicyRuleProfileEnrollment, error) {
	var resource PolicyRuleProfileEnrollment
	err := ctx.ReadResource("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyRuleProfileEnrollment resources.
type policyRuleProfileEnrollmentState struct {
	// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
	Access *string `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default: `true`.
	EmailVerification *bool `pulumi:"emailVerification"`
	// Enrolls authenticator types
	EnrollAuthenticatorTypes []string `pulumi:"enrollAuthenticatorTypes"`
	// ID of a Registration Inline Hook
	InlineHookId *string `pulumi:"inlineHookId"`
	// Name of the rule
	Name *string `pulumi:"name"`
	// ID of the policy
	PolicyId *string `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
	// 	- 'label' - (Required) A display-friendly label for this property
	// 	- 'name' - (Required) The name of a User Profile property
	// 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
	ProfileAttributes []PolicyRuleProfileEnrollmentProfileAttribute `pulumi:"profileAttributes"`
	// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
	ProgressiveProfilingAction *string `pulumi:"progressiveProfilingAction"`
	// Status of the rule
	Status *string `pulumi:"status"`
	// The ID of a Group that this User should be added to
	TargetGroupId *string `pulumi:"targetGroupId"`
	// Value created by the backend. If present all policy updates must include this attribute/value.
	UiSchemaId *string `pulumi:"uiSchemaId"`
	// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
	UnknownUserAction *string `pulumi:"unknownUserAction"`
}

type PolicyRuleProfileEnrollmentState struct {
	// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
	Access pulumi.StringPtrInput
	// Indicates whether email verification should occur before access is granted. Default: `true`.
	EmailVerification pulumi.BoolPtrInput
	// Enrolls authenticator types
	EnrollAuthenticatorTypes pulumi.StringArrayInput
	// ID of a Registration Inline Hook
	InlineHookId pulumi.StringPtrInput
	// Name of the rule
	Name pulumi.StringPtrInput
	// ID of the policy
	PolicyId pulumi.StringPtrInput
	// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
	// 	- 'label' - (Required) A display-friendly label for this property
	// 	- 'name' - (Required) The name of a User Profile property
	// 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayInput
	// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
	ProgressiveProfilingAction pulumi.StringPtrInput
	// Status of the rule
	Status pulumi.StringPtrInput
	// The ID of a Group that this User should be added to
	TargetGroupId pulumi.StringPtrInput
	// Value created by the backend. If present all policy updates must include this attribute/value.
	UiSchemaId pulumi.StringPtrInput
	// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
	UnknownUserAction pulumi.StringPtrInput
}

func (PolicyRuleProfileEnrollmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRuleProfileEnrollmentState)(nil)).Elem()
}

type policyRuleProfileEnrollmentArgs struct {
	// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
	Access *string `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default: `true`.
	EmailVerification *bool `pulumi:"emailVerification"`
	// Enrolls authenticator types
	EnrollAuthenticatorTypes []string `pulumi:"enrollAuthenticatorTypes"`
	// ID of a Registration Inline Hook
	InlineHookId *string `pulumi:"inlineHookId"`
	// ID of the policy
	PolicyId string `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
	// 	- 'label' - (Required) A display-friendly label for this property
	// 	- 'name' - (Required) The name of a User Profile property
	// 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
	ProfileAttributes []PolicyRuleProfileEnrollmentProfileAttribute `pulumi:"profileAttributes"`
	// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
	ProgressiveProfilingAction *string `pulumi:"progressiveProfilingAction"`
	// The ID of a Group that this User should be added to
	TargetGroupId *string `pulumi:"targetGroupId"`
	// Value created by the backend. If present all policy updates must include this attribute/value.
	UiSchemaId *string `pulumi:"uiSchemaId"`
	// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
	UnknownUserAction string `pulumi:"unknownUserAction"`
}

// The set of arguments for constructing a PolicyRuleProfileEnrollment resource.
type PolicyRuleProfileEnrollmentArgs struct {
	// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
	Access pulumi.StringPtrInput
	// Indicates whether email verification should occur before access is granted. Default: `true`.
	EmailVerification pulumi.BoolPtrInput
	// Enrolls authenticator types
	EnrollAuthenticatorTypes pulumi.StringArrayInput
	// ID of a Registration Inline Hook
	InlineHookId pulumi.StringPtrInput
	// ID of the policy
	PolicyId pulumi.StringInput
	// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
	// 	- 'label' - (Required) A display-friendly label for this property
	// 	- 'name' - (Required) The name of a User Profile property
	// 	- 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayInput
	// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
	ProgressiveProfilingAction pulumi.StringPtrInput
	// The ID of a Group that this User should be added to
	TargetGroupId pulumi.StringPtrInput
	// Value created by the backend. If present all policy updates must include this attribute/value.
	UiSchemaId pulumi.StringPtrInput
	// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
	UnknownUserAction pulumi.StringInput
}

func (PolicyRuleProfileEnrollmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRuleProfileEnrollmentArgs)(nil)).Elem()
}

type PolicyRuleProfileEnrollmentInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput
	ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput
}

func (*PolicyRuleProfileEnrollment) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i *PolicyRuleProfileEnrollment) ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput {
	return i.ToPolicyRuleProfileEnrollmentOutputWithContext(context.Background())
}

func (i *PolicyRuleProfileEnrollment) ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentOutput)
}

// PolicyRuleProfileEnrollmentArrayInput is an input type that accepts PolicyRuleProfileEnrollmentArray and PolicyRuleProfileEnrollmentArrayOutput values.
// You can construct a concrete instance of `PolicyRuleProfileEnrollmentArrayInput` via:
//
//	PolicyRuleProfileEnrollmentArray{ PolicyRuleProfileEnrollmentArgs{...} }
type PolicyRuleProfileEnrollmentArrayInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput
	ToPolicyRuleProfileEnrollmentArrayOutputWithContext(context.Context) PolicyRuleProfileEnrollmentArrayOutput
}

type PolicyRuleProfileEnrollmentArray []PolicyRuleProfileEnrollmentInput

func (PolicyRuleProfileEnrollmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i PolicyRuleProfileEnrollmentArray) ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput {
	return i.ToPolicyRuleProfileEnrollmentArrayOutputWithContext(context.Background())
}

func (i PolicyRuleProfileEnrollmentArray) ToPolicyRuleProfileEnrollmentArrayOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentArrayOutput)
}

// PolicyRuleProfileEnrollmentMapInput is an input type that accepts PolicyRuleProfileEnrollmentMap and PolicyRuleProfileEnrollmentMapOutput values.
// You can construct a concrete instance of `PolicyRuleProfileEnrollmentMapInput` via:
//
//	PolicyRuleProfileEnrollmentMap{ "key": PolicyRuleProfileEnrollmentArgs{...} }
type PolicyRuleProfileEnrollmentMapInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput
	ToPolicyRuleProfileEnrollmentMapOutputWithContext(context.Context) PolicyRuleProfileEnrollmentMapOutput
}

type PolicyRuleProfileEnrollmentMap map[string]PolicyRuleProfileEnrollmentInput

func (PolicyRuleProfileEnrollmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i PolicyRuleProfileEnrollmentMap) ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput {
	return i.ToPolicyRuleProfileEnrollmentMapOutputWithContext(context.Background())
}

func (i PolicyRuleProfileEnrollmentMap) ToPolicyRuleProfileEnrollmentMapOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentMapOutput)
}

type PolicyRuleProfileEnrollmentOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentOutput) ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentOutput) ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput {
	return o
}

// Allow or deny access based on the rule conditions. Valid values are: `ALLOW`, `DENY`. Default: `ALLOW`.
func (o PolicyRuleProfileEnrollmentOutput) Access() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringPtrOutput { return v.Access }).(pulumi.StringPtrOutput)
}

// Indicates whether email verification should occur before access is granted. Default: `true`.
func (o PolicyRuleProfileEnrollmentOutput) EmailVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.BoolPtrOutput { return v.EmailVerification }).(pulumi.BoolPtrOutput)
}

// Enrolls authenticator types
func (o PolicyRuleProfileEnrollmentOutput) EnrollAuthenticatorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringArrayOutput { return v.EnrollAuthenticatorTypes }).(pulumi.StringArrayOutput)
}

// ID of a Registration Inline Hook
func (o PolicyRuleProfileEnrollmentOutput) InlineHookId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringPtrOutput { return v.InlineHookId }).(pulumi.StringPtrOutput)
}

// Name of the rule
func (o PolicyRuleProfileEnrollmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the policy
func (o PolicyRuleProfileEnrollmentOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
//   - 'label' - (Required) A display-friendly label for this property
//   - 'name' - (Required) The name of a User Profile property
//   - 'required' - (Required) Indicates if this property is required for enrollment. Default is 'false'.
func (o PolicyRuleProfileEnrollmentOutput) ProfileAttributes() PolicyRuleProfileEnrollmentProfileAttributeArrayOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) PolicyRuleProfileEnrollmentProfileAttributeArrayOutput {
		return v.ProfileAttributes
	}).(PolicyRuleProfileEnrollmentProfileAttributeArrayOutput)
}

// Enabled or disabled progressive profiling action rule conditions: `ENABLED` or `DISABLED`. Default: `DISABLED`
func (o PolicyRuleProfileEnrollmentOutput) ProgressiveProfilingAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringPtrOutput { return v.ProgressiveProfilingAction }).(pulumi.StringPtrOutput)
}

// Status of the rule
func (o PolicyRuleProfileEnrollmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of a Group that this User should be added to
func (o PolicyRuleProfileEnrollmentOutput) TargetGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringPtrOutput { return v.TargetGroupId }).(pulumi.StringPtrOutput)
}

// Value created by the backend. If present all policy updates must include this attribute/value.
func (o PolicyRuleProfileEnrollmentOutput) UiSchemaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringPtrOutput { return v.UiSchemaId }).(pulumi.StringPtrOutput)
}

// Which action should be taken if this User is new. Valid values are: `DENY`, `REGISTER`
func (o PolicyRuleProfileEnrollmentOutput) UnknownUserAction() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRuleProfileEnrollment) pulumi.StringOutput { return v.UnknownUserAction }).(pulumi.StringOutput)
}

type PolicyRuleProfileEnrollmentArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentArrayOutput) ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentArrayOutput) ToPolicyRuleProfileEnrollmentArrayOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentArrayOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentArrayOutput) Index(i pulumi.IntInput) PolicyRuleProfileEnrollmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyRuleProfileEnrollment {
		return vs[0].([]*PolicyRuleProfileEnrollment)[vs[1].(int)]
	}).(PolicyRuleProfileEnrollmentOutput)
}

type PolicyRuleProfileEnrollmentMapOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentMapOutput) ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentMapOutput) ToPolicyRuleProfileEnrollmentMapOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentMapOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentMapOutput) MapIndex(k pulumi.StringInput) PolicyRuleProfileEnrollmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyRuleProfileEnrollment {
		return vs[0].(map[string]*PolicyRuleProfileEnrollment)[vs[1].(string)]
	}).(PolicyRuleProfileEnrollmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentInput)(nil)).Elem(), &PolicyRuleProfileEnrollment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentArrayInput)(nil)).Elem(), PolicyRuleProfileEnrollmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentMapInput)(nil)).Elem(), PolicyRuleProfileEnrollmentMap{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentOutput{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentMapOutput{})
}
