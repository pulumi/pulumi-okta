// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//
// This resource allows you to create and configure a Profile Enrollment Policy Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/group"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/inline"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		examplePolicyProfileEnrollment, err := okta.NewPolicyProfileEnrollment(ctx, "examplePolicyProfileEnrollment", nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleHook, err := inline.NewHook(ctx, "exampleHook", &inline.HookArgs{
// 			Status:  pulumi.String("ACTIVE"),
// 			Type:    pulumi.String("com.okta.user.pre-registration"),
// 			Version: pulumi.String("1.0.3"),
// 			Channel: pulumi.StringMap{
// 				"type":    pulumi.String("HTTP"),
// 				"version": pulumi.String("1.0.0"),
// 				"uri":     pulumi.String("https://example.com/test2"),
// 				"method":  pulumi.String("POST"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleGroup, err := group.NewGroup(ctx, "exampleGroup", &group.GroupArgs{
// 			Description: pulumi.String("Group of some users"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = okta.NewPolicyRuleProfileEnrollment(ctx, "examplePolicyRuleProfileEnrollment", &okta.PolicyRuleProfileEnrollmentArgs{
// 			PolicyId:          examplePolicyProfileEnrollment.ID(),
// 			InlineHookId:      exampleHook.ID(),
// 			TargetGroupId:     exampleGroup.ID(),
// 			UnknownUserAction: pulumi.String("REGISTER"),
// 			EmailVerification: pulumi.Bool(true),
// 			Access:            pulumi.String("ALLOW"),
// 			ProfileAttributes: PolicyRuleProfileEnrollmentProfileAttributeArray{
// 				&PolicyRuleProfileEnrollmentProfileAttributeArgs{
// 					Name:     pulumi.String("email"),
// 					Label:    pulumi.String("Email"),
// 					Required: pulumi.Bool(true),
// 				},
// 				&PolicyRuleProfileEnrollmentProfileAttributeArgs{
// 					Name:     pulumi.String("name"),
// 					Label:    pulumi.String("Name"),
// 					Required: pulumi.Bool(true),
// 				},
// 				&PolicyRuleProfileEnrollmentProfileAttributeArgs{
// 					Name:     pulumi.String("t-shirt"),
// 					Label:    pulumi.String("T-Shirt Size"),
// 					Required: pulumi.Bool(false),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Policy Rule can be imported via the Policy and Rule ID.
//
// ```sh
//  $ pulumi import okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment example <policy id>/<rule id>
// ```
type PolicyRuleProfileEnrollment struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default is `true`.
	EmailVerification pulumi.BoolPtrOutput `pulumi:"emailVerification"`
	// ID of a Registration Inline Hook.
	InlineHookId pulumi.StringPtrOutput `pulumi:"inlineHookId"`
	// The name of a User Profile property
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy ID.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayOutput `pulumi:"profileAttributes"`
	// Status of the Rule.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of a Group that this User should be added to.
	TargetGroupId pulumi.StringPtrOutput `pulumi:"targetGroupId"`
	// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
	UnknownUserAction pulumi.StringOutput `pulumi:"unknownUserAction"`
}

// NewPolicyRuleProfileEnrollment registers a new resource with the given unique name, arguments, and options.
func NewPolicyRuleProfileEnrollment(ctx *pulumi.Context,
	name string, args *PolicyRuleProfileEnrollmentArgs, opts ...pulumi.ResourceOption) (*PolicyRuleProfileEnrollment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.UnknownUserAction == nil {
		return nil, errors.New("invalid value for required argument 'UnknownUserAction'")
	}
	var resource PolicyRuleProfileEnrollment
	err := ctx.RegisterResource("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyRuleProfileEnrollment gets an existing PolicyRuleProfileEnrollment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyRuleProfileEnrollment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyRuleProfileEnrollmentState, opts ...pulumi.ResourceOption) (*PolicyRuleProfileEnrollment, error) {
	var resource PolicyRuleProfileEnrollment
	err := ctx.ReadResource("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyRuleProfileEnrollment resources.
type policyRuleProfileEnrollmentState struct {
	// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default is `true`.
	EmailVerification *bool `pulumi:"emailVerification"`
	// ID of a Registration Inline Hook.
	InlineHookId *string `pulumi:"inlineHookId"`
	// The name of a User Profile property
	Name *string `pulumi:"name"`
	// Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling.
	ProfileAttributes []PolicyRuleProfileEnrollmentProfileAttribute `pulumi:"profileAttributes"`
	// Status of the Rule.
	Status *string `pulumi:"status"`
	// The ID of a Group that this User should be added to.
	TargetGroupId *string `pulumi:"targetGroupId"`
	// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
	UnknownUserAction *string `pulumi:"unknownUserAction"`
}

type PolicyRuleProfileEnrollmentState struct {
	// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// Indicates whether email verification should occur before access is granted. Default is `true`.
	EmailVerification pulumi.BoolPtrInput
	// ID of a Registration Inline Hook.
	InlineHookId pulumi.StringPtrInput
	// The name of a User Profile property
	Name pulumi.StringPtrInput
	// Policy ID.
	PolicyId pulumi.StringPtrInput
	// A list of attributes to prompt the user during registration or progressive profiling.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayInput
	// Status of the Rule.
	Status pulumi.StringPtrInput
	// The ID of a Group that this User should be added to.
	TargetGroupId pulumi.StringPtrInput
	// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
	UnknownUserAction pulumi.StringPtrInput
}

func (PolicyRuleProfileEnrollmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRuleProfileEnrollmentState)(nil)).Elem()
}

type policyRuleProfileEnrollmentArgs struct {
	// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// Indicates whether email verification should occur before access is granted. Default is `true`.
	EmailVerification *bool `pulumi:"emailVerification"`
	// ID of a Registration Inline Hook.
	InlineHookId *string `pulumi:"inlineHookId"`
	// Policy ID.
	PolicyId string `pulumi:"policyId"`
	// A list of attributes to prompt the user during registration or progressive profiling.
	ProfileAttributes []PolicyRuleProfileEnrollmentProfileAttribute `pulumi:"profileAttributes"`
	// The ID of a Group that this User should be added to.
	TargetGroupId *string `pulumi:"targetGroupId"`
	// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
	UnknownUserAction string `pulumi:"unknownUserAction"`
}

// The set of arguments for constructing a PolicyRuleProfileEnrollment resource.
type PolicyRuleProfileEnrollmentArgs struct {
	// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// Indicates whether email verification should occur before access is granted. Default is `true`.
	EmailVerification pulumi.BoolPtrInput
	// ID of a Registration Inline Hook.
	InlineHookId pulumi.StringPtrInput
	// Policy ID.
	PolicyId pulumi.StringInput
	// A list of attributes to prompt the user during registration or progressive profiling.
	ProfileAttributes PolicyRuleProfileEnrollmentProfileAttributeArrayInput
	// The ID of a Group that this User should be added to.
	TargetGroupId pulumi.StringPtrInput
	// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
	UnknownUserAction pulumi.StringInput
}

func (PolicyRuleProfileEnrollmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRuleProfileEnrollmentArgs)(nil)).Elem()
}

type PolicyRuleProfileEnrollmentInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput
	ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput
}

func (*PolicyRuleProfileEnrollment) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i *PolicyRuleProfileEnrollment) ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput {
	return i.ToPolicyRuleProfileEnrollmentOutputWithContext(context.Background())
}

func (i *PolicyRuleProfileEnrollment) ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentOutput)
}

// PolicyRuleProfileEnrollmentArrayInput is an input type that accepts PolicyRuleProfileEnrollmentArray and PolicyRuleProfileEnrollmentArrayOutput values.
// You can construct a concrete instance of `PolicyRuleProfileEnrollmentArrayInput` via:
//
//          PolicyRuleProfileEnrollmentArray{ PolicyRuleProfileEnrollmentArgs{...} }
type PolicyRuleProfileEnrollmentArrayInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput
	ToPolicyRuleProfileEnrollmentArrayOutputWithContext(context.Context) PolicyRuleProfileEnrollmentArrayOutput
}

type PolicyRuleProfileEnrollmentArray []PolicyRuleProfileEnrollmentInput

func (PolicyRuleProfileEnrollmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i PolicyRuleProfileEnrollmentArray) ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput {
	return i.ToPolicyRuleProfileEnrollmentArrayOutputWithContext(context.Background())
}

func (i PolicyRuleProfileEnrollmentArray) ToPolicyRuleProfileEnrollmentArrayOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentArrayOutput)
}

// PolicyRuleProfileEnrollmentMapInput is an input type that accepts PolicyRuleProfileEnrollmentMap and PolicyRuleProfileEnrollmentMapOutput values.
// You can construct a concrete instance of `PolicyRuleProfileEnrollmentMapInput` via:
//
//          PolicyRuleProfileEnrollmentMap{ "key": PolicyRuleProfileEnrollmentArgs{...} }
type PolicyRuleProfileEnrollmentMapInput interface {
	pulumi.Input

	ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput
	ToPolicyRuleProfileEnrollmentMapOutputWithContext(context.Context) PolicyRuleProfileEnrollmentMapOutput
}

type PolicyRuleProfileEnrollmentMap map[string]PolicyRuleProfileEnrollmentInput

func (PolicyRuleProfileEnrollmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (i PolicyRuleProfileEnrollmentMap) ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput {
	return i.ToPolicyRuleProfileEnrollmentMapOutputWithContext(context.Background())
}

func (i PolicyRuleProfileEnrollmentMap) ToPolicyRuleProfileEnrollmentMapOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleProfileEnrollmentMapOutput)
}

type PolicyRuleProfileEnrollmentOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentOutput) ToPolicyRuleProfileEnrollmentOutput() PolicyRuleProfileEnrollmentOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentOutput) ToPolicyRuleProfileEnrollmentOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentOutput {
	return o
}

type PolicyRuleProfileEnrollmentArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentArrayOutput) ToPolicyRuleProfileEnrollmentArrayOutput() PolicyRuleProfileEnrollmentArrayOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentArrayOutput) ToPolicyRuleProfileEnrollmentArrayOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentArrayOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentArrayOutput) Index(i pulumi.IntInput) PolicyRuleProfileEnrollmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyRuleProfileEnrollment {
		return vs[0].([]*PolicyRuleProfileEnrollment)[vs[1].(int)]
	}).(PolicyRuleProfileEnrollmentOutput)
}

type PolicyRuleProfileEnrollmentMapOutput struct{ *pulumi.OutputState }

func (PolicyRuleProfileEnrollmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyRuleProfileEnrollment)(nil)).Elem()
}

func (o PolicyRuleProfileEnrollmentMapOutput) ToPolicyRuleProfileEnrollmentMapOutput() PolicyRuleProfileEnrollmentMapOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentMapOutput) ToPolicyRuleProfileEnrollmentMapOutputWithContext(ctx context.Context) PolicyRuleProfileEnrollmentMapOutput {
	return o
}

func (o PolicyRuleProfileEnrollmentMapOutput) MapIndex(k pulumi.StringInput) PolicyRuleProfileEnrollmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyRuleProfileEnrollment {
		return vs[0].(map[string]*PolicyRuleProfileEnrollment)[vs[1].(string)]
	}).(PolicyRuleProfileEnrollmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentInput)(nil)).Elem(), &PolicyRuleProfileEnrollment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentArrayInput)(nil)).Elem(), PolicyRuleProfileEnrollmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleProfileEnrollmentMapInput)(nil)).Elem(), PolicyRuleProfileEnrollmentMap{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentOutput{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleProfileEnrollmentMapOutput{})
}
