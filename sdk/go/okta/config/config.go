// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// API Token granting privileges to Okta API.
func GetApiToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:apiToken")
}

// Use exponential back off strategy for rate limits.
func GetBackoff(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "okta:backoff")
}

// The Okta url. (Use 'oktapreview.com' for Okta testing)
func GetBaseUrl(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:baseUrl")
}

// API Token granting privileges to Okta API.
func GetClientId(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:clientId")
}

// providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
func GetLogLevel(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:logLevel")
}

// maximum number of retries to attempt before erroring out.
func GetMaxRetries(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:maxRetries")
}

// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
func GetMaxWaitSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:maxWaitSeconds")
}

// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
func GetMinWaitSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:minWaitSeconds")
}

// The organization to manage in Okta.
func GetOrgName(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:orgName")
}

// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
// https://developer.okta.com/docs/api/getting_started/rate-limits.
func GetParallelism(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:parallelism")
}

// API Token granting privileges to Okta API.
func GetPrivateKey(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:privateKey")
}

// Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
// value can be `100`.
func GetRequestTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "okta:requestTimeout")
}

// API Token granting privileges to Okta API.
func GetScopes(ctx *pulumi.Context) string {
	return config.Get(ctx, "okta:scopes")
}
