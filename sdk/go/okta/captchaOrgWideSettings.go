// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//
// This resource allows you to configure which parts of the authentication flow requires users to pass the CAPTCHA logic.
// CAPTCHA org-wide settings can be disabled by unsetting `captchaId` and `enabledFor`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewCaptcha(ctx, "exampleCaptcha", &okta.CaptchaArgs{
// 			Type:      pulumi.String("HCAPTCHA"),
// 			SiteKey:   pulumi.String("some_key"),
// 			SecretKey: pulumi.String("some_secret_key"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = okta.NewCaptchaOrgWideSettings(ctx, "exampleCaptchaOrgWideSettings", &okta.CaptchaOrgWideSettingsArgs{
// 			CaptchaId: pulumi.Any(okta_captcha.Test.Id),
// 			EnabledFors: pulumi.StringArray{
// 				pulumi.String("SSR"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// The following example disables org-wide CAPTCHA.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewCaptcha(ctx, "exampleCaptcha", &okta.CaptchaArgs{
// 			SecretKey: pulumi.String("some_secret_key"),
// 			SiteKey:   pulumi.String("some_key"),
// 			Type:      pulumi.String("HCAPTCHA"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = okta.NewCaptchaOrgWideSettings(ctx, "exampleCaptchaOrgWideSettings", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Org-Wide CAPTCHA settings can be imported without any parameters.
//
// ```sh
//  $ pulumi import okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings example _
// ```
type CaptchaOrgWideSettings struct {
	pulumi.CustomResourceState

	// The ID of the CAPTCHA.
	CaptchaId pulumi.StringPtrOutput `pulumi:"captchaId"`
	// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
	EnabledFors pulumi.StringArrayOutput `pulumi:"enabledFors"`
}

// NewCaptchaOrgWideSettings registers a new resource with the given unique name, arguments, and options.
func NewCaptchaOrgWideSettings(ctx *pulumi.Context,
	name string, args *CaptchaOrgWideSettingsArgs, opts ...pulumi.ResourceOption) (*CaptchaOrgWideSettings, error) {
	if args == nil {
		args = &CaptchaOrgWideSettingsArgs{}
	}

	var resource CaptchaOrgWideSettings
	err := ctx.RegisterResource("okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaptchaOrgWideSettings gets an existing CaptchaOrgWideSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaptchaOrgWideSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaptchaOrgWideSettingsState, opts ...pulumi.ResourceOption) (*CaptchaOrgWideSettings, error) {
	var resource CaptchaOrgWideSettings
	err := ctx.ReadResource("okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaptchaOrgWideSettings resources.
type captchaOrgWideSettingsState struct {
	// The ID of the CAPTCHA.
	CaptchaId *string `pulumi:"captchaId"`
	// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
	EnabledFors []string `pulumi:"enabledFors"`
}

type CaptchaOrgWideSettingsState struct {
	// The ID of the CAPTCHA.
	CaptchaId pulumi.StringPtrInput
	// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
	EnabledFors pulumi.StringArrayInput
}

func (CaptchaOrgWideSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*captchaOrgWideSettingsState)(nil)).Elem()
}

type captchaOrgWideSettingsArgs struct {
	// The ID of the CAPTCHA.
	CaptchaId *string `pulumi:"captchaId"`
	// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
	EnabledFors []string `pulumi:"enabledFors"`
}

// The set of arguments for constructing a CaptchaOrgWideSettings resource.
type CaptchaOrgWideSettingsArgs struct {
	// The ID of the CAPTCHA.
	CaptchaId pulumi.StringPtrInput
	// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
	EnabledFors pulumi.StringArrayInput
}

func (CaptchaOrgWideSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*captchaOrgWideSettingsArgs)(nil)).Elem()
}

type CaptchaOrgWideSettingsInput interface {
	pulumi.Input

	ToCaptchaOrgWideSettingsOutput() CaptchaOrgWideSettingsOutput
	ToCaptchaOrgWideSettingsOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsOutput
}

func (*CaptchaOrgWideSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**CaptchaOrgWideSettings)(nil)).Elem()
}

func (i *CaptchaOrgWideSettings) ToCaptchaOrgWideSettingsOutput() CaptchaOrgWideSettingsOutput {
	return i.ToCaptchaOrgWideSettingsOutputWithContext(context.Background())
}

func (i *CaptchaOrgWideSettings) ToCaptchaOrgWideSettingsOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaOrgWideSettingsOutput)
}

// CaptchaOrgWideSettingsArrayInput is an input type that accepts CaptchaOrgWideSettingsArray and CaptchaOrgWideSettingsArrayOutput values.
// You can construct a concrete instance of `CaptchaOrgWideSettingsArrayInput` via:
//
//          CaptchaOrgWideSettingsArray{ CaptchaOrgWideSettingsArgs{...} }
type CaptchaOrgWideSettingsArrayInput interface {
	pulumi.Input

	ToCaptchaOrgWideSettingsArrayOutput() CaptchaOrgWideSettingsArrayOutput
	ToCaptchaOrgWideSettingsArrayOutputWithContext(context.Context) CaptchaOrgWideSettingsArrayOutput
}

type CaptchaOrgWideSettingsArray []CaptchaOrgWideSettingsInput

func (CaptchaOrgWideSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaptchaOrgWideSettings)(nil)).Elem()
}

func (i CaptchaOrgWideSettingsArray) ToCaptchaOrgWideSettingsArrayOutput() CaptchaOrgWideSettingsArrayOutput {
	return i.ToCaptchaOrgWideSettingsArrayOutputWithContext(context.Background())
}

func (i CaptchaOrgWideSettingsArray) ToCaptchaOrgWideSettingsArrayOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaOrgWideSettingsArrayOutput)
}

// CaptchaOrgWideSettingsMapInput is an input type that accepts CaptchaOrgWideSettingsMap and CaptchaOrgWideSettingsMapOutput values.
// You can construct a concrete instance of `CaptchaOrgWideSettingsMapInput` via:
//
//          CaptchaOrgWideSettingsMap{ "key": CaptchaOrgWideSettingsArgs{...} }
type CaptchaOrgWideSettingsMapInput interface {
	pulumi.Input

	ToCaptchaOrgWideSettingsMapOutput() CaptchaOrgWideSettingsMapOutput
	ToCaptchaOrgWideSettingsMapOutputWithContext(context.Context) CaptchaOrgWideSettingsMapOutput
}

type CaptchaOrgWideSettingsMap map[string]CaptchaOrgWideSettingsInput

func (CaptchaOrgWideSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaptchaOrgWideSettings)(nil)).Elem()
}

func (i CaptchaOrgWideSettingsMap) ToCaptchaOrgWideSettingsMapOutput() CaptchaOrgWideSettingsMapOutput {
	return i.ToCaptchaOrgWideSettingsMapOutputWithContext(context.Background())
}

func (i CaptchaOrgWideSettingsMap) ToCaptchaOrgWideSettingsMapOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptchaOrgWideSettingsMapOutput)
}

type CaptchaOrgWideSettingsOutput struct{ *pulumi.OutputState }

func (CaptchaOrgWideSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaptchaOrgWideSettings)(nil)).Elem()
}

func (o CaptchaOrgWideSettingsOutput) ToCaptchaOrgWideSettingsOutput() CaptchaOrgWideSettingsOutput {
	return o
}

func (o CaptchaOrgWideSettingsOutput) ToCaptchaOrgWideSettingsOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsOutput {
	return o
}

// The ID of the CAPTCHA.
func (o CaptchaOrgWideSettingsOutput) CaptchaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaptchaOrgWideSettings) pulumi.StringPtrOutput { return v.CaptchaId }).(pulumi.StringPtrOutput)
}

// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
func (o CaptchaOrgWideSettingsOutput) EnabledFors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CaptchaOrgWideSettings) pulumi.StringArrayOutput { return v.EnabledFors }).(pulumi.StringArrayOutput)
}

type CaptchaOrgWideSettingsArrayOutput struct{ *pulumi.OutputState }

func (CaptchaOrgWideSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaptchaOrgWideSettings)(nil)).Elem()
}

func (o CaptchaOrgWideSettingsArrayOutput) ToCaptchaOrgWideSettingsArrayOutput() CaptchaOrgWideSettingsArrayOutput {
	return o
}

func (o CaptchaOrgWideSettingsArrayOutput) ToCaptchaOrgWideSettingsArrayOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsArrayOutput {
	return o
}

func (o CaptchaOrgWideSettingsArrayOutput) Index(i pulumi.IntInput) CaptchaOrgWideSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CaptchaOrgWideSettings {
		return vs[0].([]*CaptchaOrgWideSettings)[vs[1].(int)]
	}).(CaptchaOrgWideSettingsOutput)
}

type CaptchaOrgWideSettingsMapOutput struct{ *pulumi.OutputState }

func (CaptchaOrgWideSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaptchaOrgWideSettings)(nil)).Elem()
}

func (o CaptchaOrgWideSettingsMapOutput) ToCaptchaOrgWideSettingsMapOutput() CaptchaOrgWideSettingsMapOutput {
	return o
}

func (o CaptchaOrgWideSettingsMapOutput) ToCaptchaOrgWideSettingsMapOutputWithContext(ctx context.Context) CaptchaOrgWideSettingsMapOutput {
	return o
}

func (o CaptchaOrgWideSettingsMapOutput) MapIndex(k pulumi.StringInput) CaptchaOrgWideSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CaptchaOrgWideSettings {
		return vs[0].(map[string]*CaptchaOrgWideSettings)[vs[1].(string)]
	}).(CaptchaOrgWideSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaOrgWideSettingsInput)(nil)).Elem(), &CaptchaOrgWideSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaOrgWideSettingsArrayInput)(nil)).Elem(), CaptchaOrgWideSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptchaOrgWideSettingsMapInput)(nil)).Elem(), CaptchaOrgWideSettingsMap{})
	pulumi.RegisterOutputType(CaptchaOrgWideSettingsOutput{})
	pulumi.RegisterOutputType(CaptchaOrgWideSettingsArrayOutput{})
	pulumi.RegisterOutputType(CaptchaOrgWideSettingsMapOutput{})
}
