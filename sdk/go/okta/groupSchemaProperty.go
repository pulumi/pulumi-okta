// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewGroupSchemaProperty(ctx, "example", &okta.GroupSchemaPropertyArgs{
//				Description: pulumi.String("My custom property name"),
//				Index:       pulumi.String("customPropertyName"),
//				Master:      pulumi.String("OKTA"),
//				Scope:       pulumi.String("SELF"),
//				Title:       pulumi.String("customPropertyName"),
//				Type:        pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Group schema property can be imported via the property index.
//
// ```sh
//
//	$ pulumi import okta:index/groupSchemaProperty:GroupSchemaProperty example &#60;index&#62;
//
// ```
type GroupSchemaProperty struct {
	pulumi.CustomResourceState

	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayOutput `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs GroupSchemaPropertyArrayOneOfArrayOutput `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrOutput `pulumi:"arrayType"`
	// The description of the group schema property.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayOutput `pulumi:"enums"`
	// External name of the group schema property.
	ExternalName pulumi.StringPtrOutput `pulumi:"externalName"`
	// External name of the group schema property.
	ExternalNamespace pulumi.StringPtrOutput `pulumi:"externalNamespace"`
	// The property name.
	Index pulumi.StringOutput `pulumi:"index"`
	// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrOutput `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities GroupSchemaPropertyMasterOverridePriorityArrayOutput `pulumi:"masterOverridePriorities"`
	// The maximum length of the group property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// The minimum length of the group property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs GroupSchemaPropertyOneOfArrayOutput `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// Whether the property is required for this group.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// display name for the enum value.
	Title pulumi.StringOutput `pulumi:"title"`
	// Type of profile source.
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrOutput `pulumi:"unique"`
}

// NewGroupSchemaProperty registers a new resource with the given unique name, arguments, and options.
func NewGroupSchemaProperty(ctx *pulumi.Context,
	name string, args *GroupSchemaPropertyArgs, opts ...pulumi.ResourceOption) (*GroupSchemaProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource GroupSchemaProperty
	err := ctx.RegisterResource("okta:index/groupSchemaProperty:GroupSchemaProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupSchemaProperty gets an existing GroupSchemaProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupSchemaProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupSchemaPropertyState, opts ...pulumi.ResourceOption) (*GroupSchemaProperty, error) {
	var resource GroupSchemaProperty
	err := ctx.ReadResource("okta:index/groupSchemaProperty:GroupSchemaProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupSchemaProperty resources.
type groupSchemaPropertyState struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []GroupSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the group schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the group schema property.
	ExternalName *string `pulumi:"externalName"`
	// External name of the group schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index *string `pulumi:"index"`
	// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities []GroupSchemaPropertyMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// The maximum length of the group property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the group property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []GroupSchemaPropertyOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this group.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title *string `pulumi:"title"`
	// Type of profile source.
	Type *string `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique *string `pulumi:"unique"`
}

type GroupSchemaPropertyState struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs GroupSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the group schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the group schema property.
	ExternalName pulumi.StringPtrInput
	// External name of the group schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringPtrInput
	// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities GroupSchemaPropertyMasterOverridePriorityArrayInput
	// The maximum length of the group property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the group property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs GroupSchemaPropertyOneOfArrayInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this group.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringPtrInput
	// Type of profile source.
	Type pulumi.StringPtrInput
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrInput
}

func (GroupSchemaPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSchemaPropertyState)(nil)).Elem()
}

type groupSchemaPropertyArgs struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums []string `pulumi:"arrayEnums"`
	// Display name and value an enum array can be set to.
	ArrayOneOfs []GroupSchemaPropertyArrayOneOf `pulumi:"arrayOneOfs"`
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType *string `pulumi:"arrayType"`
	// The description of the group schema property.
	Description *string `pulumi:"description"`
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums []string `pulumi:"enums"`
	// External name of the group schema property.
	ExternalName *string `pulumi:"externalName"`
	// External name of the group schema property.
	ExternalNamespace *string `pulumi:"externalNamespace"`
	// The property name.
	Index string `pulumi:"index"`
	// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master *string `pulumi:"master"`
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities []GroupSchemaPropertyMasterOverridePriority `pulumi:"masterOverridePriorities"`
	// The maximum length of the group property value. Only applies to type `"string"`.
	MaxLength *int `pulumi:"maxLength"`
	// The minimum length of the group property value. Only applies to type `"string"`.
	MinLength *int `pulumi:"minLength"`
	// Array of maps containing a mapping for display name to enum value.
	OneOfs []GroupSchemaPropertyOneOf `pulumi:"oneOfs"`
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions *string `pulumi:"permissions"`
	// Whether the property is required for this group.
	Required *bool `pulumi:"required"`
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope *string `pulumi:"scope"`
	// display name for the enum value.
	Title string `pulumi:"title"`
	// Type of profile source.
	Type string `pulumi:"type"`
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique *string `pulumi:"unique"`
}

// The set of arguments for constructing a GroupSchemaProperty resource.
type GroupSchemaPropertyArgs struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums pulumi.StringArrayInput
	// Display name and value an enum array can be set to.
	ArrayOneOfs GroupSchemaPropertyArrayOneOfArrayInput
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType pulumi.StringPtrInput
	// The description of the group schema property.
	Description pulumi.StringPtrInput
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums pulumi.StringArrayInput
	// External name of the group schema property.
	ExternalName pulumi.StringPtrInput
	// External name of the group schema property.
	ExternalNamespace pulumi.StringPtrInput
	// The property name.
	Index pulumi.StringInput
	// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
	Master pulumi.StringPtrInput
	// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
	MasterOverridePriorities GroupSchemaPropertyMasterOverridePriorityArrayInput
	// The maximum length of the group property value. Only applies to type `"string"`.
	MaxLength pulumi.IntPtrInput
	// The minimum length of the group property value. Only applies to type `"string"`.
	MinLength pulumi.IntPtrInput
	// Array of maps containing a mapping for display name to enum value.
	OneOfs GroupSchemaPropertyOneOfArrayInput
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions pulumi.StringPtrInput
	// Whether the property is required for this group.
	Required pulumi.BoolPtrInput
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope pulumi.StringPtrInput
	// display name for the enum value.
	Title pulumi.StringInput
	// Type of profile source.
	Type pulumi.StringInput
	// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
	Unique pulumi.StringPtrInput
}

func (GroupSchemaPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSchemaPropertyArgs)(nil)).Elem()
}

type GroupSchemaPropertyInput interface {
	pulumi.Input

	ToGroupSchemaPropertyOutput() GroupSchemaPropertyOutput
	ToGroupSchemaPropertyOutputWithContext(ctx context.Context) GroupSchemaPropertyOutput
}

func (*GroupSchemaProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSchemaProperty)(nil)).Elem()
}

func (i *GroupSchemaProperty) ToGroupSchemaPropertyOutput() GroupSchemaPropertyOutput {
	return i.ToGroupSchemaPropertyOutputWithContext(context.Background())
}

func (i *GroupSchemaProperty) ToGroupSchemaPropertyOutputWithContext(ctx context.Context) GroupSchemaPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSchemaPropertyOutput)
}

// GroupSchemaPropertyArrayInput is an input type that accepts GroupSchemaPropertyArray and GroupSchemaPropertyArrayOutput values.
// You can construct a concrete instance of `GroupSchemaPropertyArrayInput` via:
//
//	GroupSchemaPropertyArray{ GroupSchemaPropertyArgs{...} }
type GroupSchemaPropertyArrayInput interface {
	pulumi.Input

	ToGroupSchemaPropertyArrayOutput() GroupSchemaPropertyArrayOutput
	ToGroupSchemaPropertyArrayOutputWithContext(context.Context) GroupSchemaPropertyArrayOutput
}

type GroupSchemaPropertyArray []GroupSchemaPropertyInput

func (GroupSchemaPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupSchemaProperty)(nil)).Elem()
}

func (i GroupSchemaPropertyArray) ToGroupSchemaPropertyArrayOutput() GroupSchemaPropertyArrayOutput {
	return i.ToGroupSchemaPropertyArrayOutputWithContext(context.Background())
}

func (i GroupSchemaPropertyArray) ToGroupSchemaPropertyArrayOutputWithContext(ctx context.Context) GroupSchemaPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSchemaPropertyArrayOutput)
}

// GroupSchemaPropertyMapInput is an input type that accepts GroupSchemaPropertyMap and GroupSchemaPropertyMapOutput values.
// You can construct a concrete instance of `GroupSchemaPropertyMapInput` via:
//
//	GroupSchemaPropertyMap{ "key": GroupSchemaPropertyArgs{...} }
type GroupSchemaPropertyMapInput interface {
	pulumi.Input

	ToGroupSchemaPropertyMapOutput() GroupSchemaPropertyMapOutput
	ToGroupSchemaPropertyMapOutputWithContext(context.Context) GroupSchemaPropertyMapOutput
}

type GroupSchemaPropertyMap map[string]GroupSchemaPropertyInput

func (GroupSchemaPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupSchemaProperty)(nil)).Elem()
}

func (i GroupSchemaPropertyMap) ToGroupSchemaPropertyMapOutput() GroupSchemaPropertyMapOutput {
	return i.ToGroupSchemaPropertyMapOutputWithContext(context.Background())
}

func (i GroupSchemaPropertyMap) ToGroupSchemaPropertyMapOutputWithContext(ctx context.Context) GroupSchemaPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSchemaPropertyMapOutput)
}

type GroupSchemaPropertyOutput struct{ *pulumi.OutputState }

func (GroupSchemaPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSchemaProperty)(nil)).Elem()
}

func (o GroupSchemaPropertyOutput) ToGroupSchemaPropertyOutput() GroupSchemaPropertyOutput {
	return o
}

func (o GroupSchemaPropertyOutput) ToGroupSchemaPropertyOutputWithContext(ctx context.Context) GroupSchemaPropertyOutput {
	return o
}

// Array of values that an array property's items can be set to.
func (o GroupSchemaPropertyOutput) ArrayEnums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringArrayOutput { return v.ArrayEnums }).(pulumi.StringArrayOutput)
}

// Display name and value an enum array can be set to.
func (o GroupSchemaPropertyOutput) ArrayOneOfs() GroupSchemaPropertyArrayOneOfArrayOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) GroupSchemaPropertyArrayOneOfArrayOutput { return v.ArrayOneOfs }).(GroupSchemaPropertyArrayOneOfArrayOutput)
}

// The type of the array elements if `type` is set to `"array"`.
func (o GroupSchemaPropertyOutput) ArrayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.ArrayType }).(pulumi.StringPtrOutput)
}

// The description of the group schema property.
func (o GroupSchemaPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
func (o GroupSchemaPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringArrayOutput { return v.Enums }).(pulumi.StringArrayOutput)
}

// External name of the group schema property.
func (o GroupSchemaPropertyOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// External name of the group schema property.
func (o GroupSchemaPropertyOutput) ExternalNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.ExternalNamespace }).(pulumi.StringPtrOutput)
}

// The property name.
func (o GroupSchemaPropertyOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// Master priority for the group schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
func (o GroupSchemaPropertyOutput) Master() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.Master }).(pulumi.StringPtrOutput)
}

// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
func (o GroupSchemaPropertyOutput) MasterOverridePriorities() GroupSchemaPropertyMasterOverridePriorityArrayOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) GroupSchemaPropertyMasterOverridePriorityArrayOutput {
		return v.MasterOverridePriorities
	}).(GroupSchemaPropertyMasterOverridePriorityArrayOutput)
}

// The maximum length of the group property value. Only applies to type `"string"`.
func (o GroupSchemaPropertyOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.IntPtrOutput { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// The minimum length of the group property value. Only applies to type `"string"`.
func (o GroupSchemaPropertyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.IntPtrOutput { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Array of maps containing a mapping for display name to enum value.
func (o GroupSchemaPropertyOutput) OneOfs() GroupSchemaPropertyOneOfArrayOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) GroupSchemaPropertyOneOfArrayOutput { return v.OneOfs }).(GroupSchemaPropertyOneOfArrayOutput)
}

// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
func (o GroupSchemaPropertyOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Whether the property is required for this group.
func (o GroupSchemaPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// determines whether an app user attribute can be set at the Individual or Group Level.
func (o GroupSchemaPropertyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// display name for the enum value.
func (o GroupSchemaPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Type of profile source.
func (o GroupSchemaPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
func (o GroupSchemaPropertyOutput) Unique() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupSchemaProperty) pulumi.StringPtrOutput { return v.Unique }).(pulumi.StringPtrOutput)
}

type GroupSchemaPropertyArrayOutput struct{ *pulumi.OutputState }

func (GroupSchemaPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupSchemaProperty)(nil)).Elem()
}

func (o GroupSchemaPropertyArrayOutput) ToGroupSchemaPropertyArrayOutput() GroupSchemaPropertyArrayOutput {
	return o
}

func (o GroupSchemaPropertyArrayOutput) ToGroupSchemaPropertyArrayOutputWithContext(ctx context.Context) GroupSchemaPropertyArrayOutput {
	return o
}

func (o GroupSchemaPropertyArrayOutput) Index(i pulumi.IntInput) GroupSchemaPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupSchemaProperty {
		return vs[0].([]*GroupSchemaProperty)[vs[1].(int)]
	}).(GroupSchemaPropertyOutput)
}

type GroupSchemaPropertyMapOutput struct{ *pulumi.OutputState }

func (GroupSchemaPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupSchemaProperty)(nil)).Elem()
}

func (o GroupSchemaPropertyMapOutput) ToGroupSchemaPropertyMapOutput() GroupSchemaPropertyMapOutput {
	return o
}

func (o GroupSchemaPropertyMapOutput) ToGroupSchemaPropertyMapOutputWithContext(ctx context.Context) GroupSchemaPropertyMapOutput {
	return o
}

func (o GroupSchemaPropertyMapOutput) MapIndex(k pulumi.StringInput) GroupSchemaPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupSchemaProperty {
		return vs[0].(map[string]*GroupSchemaProperty)[vs[1].(string)]
	}).(GroupSchemaPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSchemaPropertyInput)(nil)).Elem(), &GroupSchemaProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSchemaPropertyArrayInput)(nil)).Elem(), GroupSchemaPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSchemaPropertyMapInput)(nil)).Elem(), GroupSchemaPropertyMap{})
	pulumi.RegisterOutputType(GroupSchemaPropertyOutput{})
	pulumi.RegisterOutputType(GroupSchemaPropertyArrayOutput{})
	pulumi.RegisterOutputType(GroupSchemaPropertyMapOutput{})
}
