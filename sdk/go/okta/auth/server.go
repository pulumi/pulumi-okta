// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	// Currently Okta only supports a single value here
	Audiences pulumi.StringArrayOutput `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringOutput `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
	CredentialsNextRotation pulumi.StringOutput `pulumi:"credentialsNextRotation"`
	// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
	CredentialsRotationMode pulumi.StringPtrOutput `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// allows you to use a custom issuer URL
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// The name of the authorization server.
	Name   pulumi.StringOutput    `pulumi:"name"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Audiences == nil {
		return nil, errors.New("invalid value for required argument 'Audiences'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("okta:auth/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("okta:auth/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Currently Okta only supports a single value here
	Audiences []string `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated *string `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
	CredentialsNextRotation *string `pulumi:"credentialsNextRotation"`
	// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// allows you to use a custom issuer URL
	Issuer *string `pulumi:"issuer"`
	// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
	IssuerMode *string `pulumi:"issuerMode"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid *string `pulumi:"kid"`
	// The name of the authorization server.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

type ServerState struct {
	// Currently Okta only supports a single value here
	Audiences pulumi.StringArrayInput
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringPtrInput
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
	CredentialsNextRotation pulumi.StringPtrInput
	// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// allows you to use a custom issuer URL
	Issuer pulumi.StringPtrInput
	// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
	IssuerMode pulumi.StringPtrInput
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringPtrInput
	// The name of the authorization server.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// Currently Okta only supports a single value here
	Audiences []string `pulumi:"audiences"`
	// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
	IssuerMode *string `pulumi:"issuerMode"`
	// The name of the authorization server.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// Currently Okta only supports a single value here
	Audiences pulumi.StringArrayInput
	// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
	IssuerMode pulumi.StringPtrInput
	// The name of the authorization server.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// Currently Okta only supports a single value here
func (o ServerOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The timestamp when the authorization server started to use the `kid` for signing tokens.
func (o ServerOutput) CredentialsLastRotated() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CredentialsLastRotated }).(pulumi.StringOutput)
}

// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `AUTO`.
func (o ServerOutput) CredentialsNextRotation() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CredentialsNextRotation }).(pulumi.StringOutput)
}

// Credential rotation mode, in many cases you cannot set this to MANUAL, the API will ignore the value and you will get a perpetual diff. This should rarely be used.
func (o ServerOutput) CredentialsRotationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.CredentialsRotationMode }).(pulumi.StringPtrOutput)
}

// The description of the authorization server.
func (o ServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// allows you to use a custom issuer URL
func (o ServerOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// *Early Access Property*. Indicates which value is specified in the issuer of the tokens that a Custom Authorization Server returns: the original Okta org domain URL or a custom domain URL
func (o ServerOutput) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
func (o ServerOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Kid }).(pulumi.StringOutput)
}

// The name of the authorization server.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
