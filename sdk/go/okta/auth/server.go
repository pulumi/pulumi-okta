// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Authorization Server.
//
// This resource allows you to create and configure an Authorization Server.
type Server struct {
	pulumi.CustomResourceState

	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayOutput `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringOutput `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation pulumi.StringOutput `pulumi:"credentialsNextRotation"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrOutput `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Allows you to use a custom issuer URL. It can be set to `"CUSTOM_URL"` or `"ORG_URL"`
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// The name of the authorization server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the auth server. It defaults to `"ACTIVE"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil || args.Audiences == nil {
		return nil, errors.New("missing required argument 'Audiences'")
	}
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("okta:auth/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("okta:auth/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences []string `pulumi:"audiences"`
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated *string `pulumi:"credentialsLastRotated"`
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation *string `pulumi:"credentialsNextRotation"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer *string `pulumi:"issuer"`
	// Allows you to use a custom issuer URL. It can be set to `"CUSTOM_URL"` or `"ORG_URL"`
	IssuerMode *string `pulumi:"issuerMode"`
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid *string `pulumi:"kid"`
	// The name of the authorization server.
	Name *string `pulumi:"name"`
	// The status of the auth server. It defaults to `"ACTIVE"`
	Status *string `pulumi:"status"`
}

type ServerState struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayInput
	// The timestamp when the authorization server started to use the `kid` for signing tokens.
	CredentialsLastRotated pulumi.StringPtrInput
	// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentialsRotationMode` is `"AUTO"`.
	CredentialsNextRotation pulumi.StringPtrInput
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
	Issuer pulumi.StringPtrInput
	// Allows you to use a custom issuer URL. It can be set to `"CUSTOM_URL"` or `"ORG_URL"`
	IssuerMode pulumi.StringPtrInput
	// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
	Kid pulumi.StringPtrInput
	// The name of the authorization server.
	Name pulumi.StringPtrInput
	// The status of the auth server. It defaults to `"ACTIVE"`
	Status pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences []string `pulumi:"audiences"`
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode *string `pulumi:"credentialsRotationMode"`
	// The description of the authorization server.
	Description *string `pulumi:"description"`
	// Allows you to use a custom issuer URL. It can be set to `"CUSTOM_URL"` or `"ORG_URL"`
	IssuerMode *string `pulumi:"issuerMode"`
	// The name of the authorization server.
	Name *string `pulumi:"name"`
	// The status of the auth server. It defaults to `"ACTIVE"`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token.
	Audiences pulumi.StringArrayInput
	// The key rotation mode for the authorization server. Can be `"AUTO"` or `"MANUAL"`.
	CredentialsRotationMode pulumi.StringPtrInput
	// The description of the authorization server.
	Description pulumi.StringPtrInput
	// Allows you to use a custom issuer URL. It can be set to `"CUSTOM_URL"` or `"ORG_URL"`
	IssuerMode pulumi.StringPtrInput
	// The name of the authorization server.
	Name pulumi.StringPtrInput
	// The status of the auth server. It defaults to `"ACTIVE"`
	Status pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}
