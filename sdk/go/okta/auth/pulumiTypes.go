// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetServerScopesScope struct {
	// Indicates whether a consent dialog is needed for the Scope
	Consent string `pulumi:"consent"`
	// Whether the Scope is a default Scope
	Default bool `pulumi:"default"`
	// Description of the Scope
	Description string `pulumi:"description"`
	// Name of the end user displayed in a consent dialog box
	DisplayName string `pulumi:"displayName"`
	// ID of the Scope
	Id string `pulumi:"id"`
	// Whether the Scope should be included in the metadata
	MetadataPublish string `pulumi:"metadataPublish"`
	// Name of the Scope
	Name string `pulumi:"name"`
	// Whether the Scope is optional
	Optional bool `pulumi:"optional"`
	// Whether Okta created the Scope
	System bool `pulumi:"system"`
}

// GetServerScopesScopeInput is an input type that accepts GetServerScopesScopeArgs and GetServerScopesScopeOutput values.
// You can construct a concrete instance of `GetServerScopesScopeInput` via:
//
//	GetServerScopesScopeArgs{...}
type GetServerScopesScopeInput interface {
	pulumi.Input

	ToGetServerScopesScopeOutput() GetServerScopesScopeOutput
	ToGetServerScopesScopeOutputWithContext(context.Context) GetServerScopesScopeOutput
}

type GetServerScopesScopeArgs struct {
	// Indicates whether a consent dialog is needed for the Scope
	Consent pulumi.StringInput `pulumi:"consent"`
	// Whether the Scope is a default Scope
	Default pulumi.BoolInput `pulumi:"default"`
	// Description of the Scope
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the end user displayed in a consent dialog box
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// ID of the Scope
	Id pulumi.StringInput `pulumi:"id"`
	// Whether the Scope should be included in the metadata
	MetadataPublish pulumi.StringInput `pulumi:"metadataPublish"`
	// Name of the Scope
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the Scope is optional
	Optional pulumi.BoolInput `pulumi:"optional"`
	// Whether Okta created the Scope
	System pulumi.BoolInput `pulumi:"system"`
}

func (GetServerScopesScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerScopesScope)(nil)).Elem()
}

func (i GetServerScopesScopeArgs) ToGetServerScopesScopeOutput() GetServerScopesScopeOutput {
	return i.ToGetServerScopesScopeOutputWithContext(context.Background())
}

func (i GetServerScopesScopeArgs) ToGetServerScopesScopeOutputWithContext(ctx context.Context) GetServerScopesScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerScopesScopeOutput)
}

// GetServerScopesScopeArrayInput is an input type that accepts GetServerScopesScopeArray and GetServerScopesScopeArrayOutput values.
// You can construct a concrete instance of `GetServerScopesScopeArrayInput` via:
//
//	GetServerScopesScopeArray{ GetServerScopesScopeArgs{...} }
type GetServerScopesScopeArrayInput interface {
	pulumi.Input

	ToGetServerScopesScopeArrayOutput() GetServerScopesScopeArrayOutput
	ToGetServerScopesScopeArrayOutputWithContext(context.Context) GetServerScopesScopeArrayOutput
}

type GetServerScopesScopeArray []GetServerScopesScopeInput

func (GetServerScopesScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerScopesScope)(nil)).Elem()
}

func (i GetServerScopesScopeArray) ToGetServerScopesScopeArrayOutput() GetServerScopesScopeArrayOutput {
	return i.ToGetServerScopesScopeArrayOutputWithContext(context.Background())
}

func (i GetServerScopesScopeArray) ToGetServerScopesScopeArrayOutputWithContext(ctx context.Context) GetServerScopesScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerScopesScopeArrayOutput)
}

type GetServerScopesScopeOutput struct{ *pulumi.OutputState }

func (GetServerScopesScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerScopesScope)(nil)).Elem()
}

func (o GetServerScopesScopeOutput) ToGetServerScopesScopeOutput() GetServerScopesScopeOutput {
	return o
}

func (o GetServerScopesScopeOutput) ToGetServerScopesScopeOutputWithContext(ctx context.Context) GetServerScopesScopeOutput {
	return o
}

// Indicates whether a consent dialog is needed for the Scope
func (o GetServerScopesScopeOutput) Consent() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.Consent }).(pulumi.StringOutput)
}

// Whether the Scope is a default Scope
func (o GetServerScopesScopeOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerScopesScope) bool { return v.Default }).(pulumi.BoolOutput)
}

// Description of the Scope
func (o GetServerScopesScopeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.Description }).(pulumi.StringOutput)
}

// Name of the end user displayed in a consent dialog box
func (o GetServerScopesScopeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.DisplayName }).(pulumi.StringOutput)
}

// ID of the Scope
func (o GetServerScopesScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Scope should be included in the metadata
func (o GetServerScopesScopeOutput) MetadataPublish() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.MetadataPublish }).(pulumi.StringOutput)
}

// Name of the Scope
func (o GetServerScopesScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesScope) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the Scope is optional
func (o GetServerScopesScopeOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerScopesScope) bool { return v.Optional }).(pulumi.BoolOutput)
}

// Whether Okta created the Scope
func (o GetServerScopesScopeOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerScopesScope) bool { return v.System }).(pulumi.BoolOutput)
}

type GetServerScopesScopeArrayOutput struct{ *pulumi.OutputState }

func (GetServerScopesScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerScopesScope)(nil)).Elem()
}

func (o GetServerScopesScopeArrayOutput) ToGetServerScopesScopeArrayOutput() GetServerScopesScopeArrayOutput {
	return o
}

func (o GetServerScopesScopeArrayOutput) ToGetServerScopesScopeArrayOutputWithContext(ctx context.Context) GetServerScopesScopeArrayOutput {
	return o
}

func (o GetServerScopesScopeArrayOutput) Index(i pulumi.IntInput) GetServerScopesScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerScopesScope {
		return vs[0].([]GetServerScopesScope)[vs[1].(int)]
	}).(GetServerScopesScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerScopesScopeInput)(nil)).Elem(), GetServerScopesScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerScopesScopeArrayInput)(nil)).Elem(), GetServerScopesScopeArray{})
	pulumi.RegisterOutputType(GetServerScopesScopeOutput{})
	pulumi.RegisterOutputType(GetServerScopesScopeArrayOutput{})
}
