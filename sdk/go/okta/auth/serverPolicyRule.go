// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auth.NewServerPolicyRule(ctx, "example", &auth.ServerPolicyRuleArgs{
//				AuthServerId: pulumi.String("<auth server id>"),
//				GrantTypeWhitelists: pulumi.StringArray{
//					pulumi.String("implicit"),
//				},
//				GroupWhitelists: pulumi.StringArray{
//					pulumi.String("<group ids>"),
//				},
//				PolicyId: pulumi.String("<auth server policy id>"),
//				Priority: pulumi.Int(1),
//				Status:   pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Authorization Server Policy Rule can be imported via the Auth Server ID, Policy ID, and Policy Rule ID.
//
// ```sh
//
//	$ pulumi import okta:auth/serverPolicyRule:ServerPolicyRule example &#60;auth server id&#62;/&#60;policy id&#62;/&#60;policy rule id&#62;
//
// ```
type ServerPolicyRule struct {
	pulumi.CustomResourceState

	// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
	AccessTokenLifetimeMinutes pulumi.IntPtrOutput `pulumi:"accessTokenLifetimeMinutes"`
	// Auth Server ID.
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
	// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
	// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
	GrantTypeWhitelists pulumi.StringArrayOutput `pulumi:"grantTypeWhitelists"`
	// Specifies a set of Groups whose Users are to be excluded.
	GroupBlacklists pulumi.StringArrayOutput `pulumi:"groupBlacklists"`
	// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
	GroupWhitelists pulumi.StringArrayOutput `pulumi:"groupWhitelists"`
	// The ID of the inline token to trigger.
	InlineHookId pulumi.StringPtrOutput `pulumi:"inlineHookId"`
	// Auth Server Policy Rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Auth Server Policy ID.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Priority of the auth server policy rule.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes pulumi.IntPtrOutput `pulumi:"refreshTokenLifetimeMinutes"`
	// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
	// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
	RefreshTokenWindowMinutes pulumi.IntPtrOutput `pulumi:"refreshTokenWindowMinutes"`
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists pulumi.StringArrayOutput `pulumi:"scopeWhitelists"`
	// The status of the Auth Server Policy Rule.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of the Auth Server Policy Rule.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Specifies a set of Users to be excluded.
	UserBlacklists pulumi.StringArrayOutput `pulumi:"userBlacklists"`
	// Specifies a set of Users to be included.
	UserWhitelists pulumi.StringArrayOutput `pulumi:"userWhitelists"`
}

// NewServerPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewServerPolicyRule(ctx *pulumi.Context,
	name string, args *ServerPolicyRuleArgs, opts ...pulumi.ResourceOption) (*ServerPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	if args.GrantTypeWhitelists == nil {
		return nil, errors.New("invalid value for required argument 'GrantTypeWhitelists'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("okta:auth/serverPolicyClaim:ServerPolicyClaim"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerPolicyRule
	err := ctx.RegisterResource("okta:auth/serverPolicyRule:ServerPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerPolicyRule gets an existing ServerPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerPolicyRuleState, opts ...pulumi.ResourceOption) (*ServerPolicyRule, error) {
	var resource ServerPolicyRule
	err := ctx.ReadResource("okta:auth/serverPolicyRule:ServerPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerPolicyRule resources.
type serverPolicyRuleState struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
	AccessTokenLifetimeMinutes *int `pulumi:"accessTokenLifetimeMinutes"`
	// Auth Server ID.
	AuthServerId *string `pulumi:"authServerId"`
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
	// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
	// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
	GrantTypeWhitelists []string `pulumi:"grantTypeWhitelists"`
	// Specifies a set of Groups whose Users are to be excluded.
	GroupBlacklists []string `pulumi:"groupBlacklists"`
	// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
	GroupWhitelists []string `pulumi:"groupWhitelists"`
	// The ID of the inline token to trigger.
	InlineHookId *string `pulumi:"inlineHookId"`
	// Auth Server Policy Rule name.
	Name *string `pulumi:"name"`
	// Auth Server Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// Priority of the auth server policy rule.
	Priority *int `pulumi:"priority"`
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes *int `pulumi:"refreshTokenLifetimeMinutes"`
	// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
	// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
	RefreshTokenWindowMinutes *int `pulumi:"refreshTokenWindowMinutes"`
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists []string `pulumi:"scopeWhitelists"`
	// The status of the Auth Server Policy Rule.
	Status *string `pulumi:"status"`
	// The type of the Auth Server Policy Rule.
	Type *string `pulumi:"type"`
	// Specifies a set of Users to be excluded.
	UserBlacklists []string `pulumi:"userBlacklists"`
	// Specifies a set of Users to be included.
	UserWhitelists []string `pulumi:"userWhitelists"`
}

type ServerPolicyRuleState struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
	AccessTokenLifetimeMinutes pulumi.IntPtrInput
	// Auth Server ID.
	AuthServerId pulumi.StringPtrInput
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
	// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
	// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
	GrantTypeWhitelists pulumi.StringArrayInput
	// Specifies a set of Groups whose Users are to be excluded.
	GroupBlacklists pulumi.StringArrayInput
	// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
	GroupWhitelists pulumi.StringArrayInput
	// The ID of the inline token to trigger.
	InlineHookId pulumi.StringPtrInput
	// Auth Server Policy Rule name.
	Name pulumi.StringPtrInput
	// Auth Server Policy ID.
	PolicyId pulumi.StringPtrInput
	// Priority of the auth server policy rule.
	Priority pulumi.IntPtrInput
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes pulumi.IntPtrInput
	// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
	// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
	RefreshTokenWindowMinutes pulumi.IntPtrInput
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists pulumi.StringArrayInput
	// The status of the Auth Server Policy Rule.
	Status pulumi.StringPtrInput
	// The type of the Auth Server Policy Rule.
	Type pulumi.StringPtrInput
	// Specifies a set of Users to be excluded.
	UserBlacklists pulumi.StringArrayInput
	// Specifies a set of Users to be included.
	UserWhitelists pulumi.StringArrayInput
}

func (ServerPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverPolicyRuleState)(nil)).Elem()
}

type serverPolicyRuleArgs struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
	AccessTokenLifetimeMinutes *int `pulumi:"accessTokenLifetimeMinutes"`
	// Auth Server ID.
	AuthServerId string `pulumi:"authServerId"`
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
	// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
	// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
	GrantTypeWhitelists []string `pulumi:"grantTypeWhitelists"`
	// Specifies a set of Groups whose Users are to be excluded.
	GroupBlacklists []string `pulumi:"groupBlacklists"`
	// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
	GroupWhitelists []string `pulumi:"groupWhitelists"`
	// The ID of the inline token to trigger.
	InlineHookId *string `pulumi:"inlineHookId"`
	// Auth Server Policy Rule name.
	Name *string `pulumi:"name"`
	// Auth Server Policy ID.
	PolicyId string `pulumi:"policyId"`
	// Priority of the auth server policy rule.
	Priority int `pulumi:"priority"`
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes *int `pulumi:"refreshTokenLifetimeMinutes"`
	// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
	// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
	RefreshTokenWindowMinutes *int `pulumi:"refreshTokenWindowMinutes"`
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists []string `pulumi:"scopeWhitelists"`
	// The status of the Auth Server Policy Rule.
	Status *string `pulumi:"status"`
	// The type of the Auth Server Policy Rule.
	Type *string `pulumi:"type"`
	// Specifies a set of Users to be excluded.
	UserBlacklists []string `pulumi:"userBlacklists"`
	// Specifies a set of Users to be included.
	UserWhitelists []string `pulumi:"userWhitelists"`
}

// The set of arguments for constructing a ServerPolicyRule resource.
type ServerPolicyRuleArgs struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
	AccessTokenLifetimeMinutes pulumi.IntPtrInput
	// Auth Server ID.
	AuthServerId pulumi.StringInput
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
	// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
	// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
	GrantTypeWhitelists pulumi.StringArrayInput
	// Specifies a set of Groups whose Users are to be excluded.
	GroupBlacklists pulumi.StringArrayInput
	// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
	GroupWhitelists pulumi.StringArrayInput
	// The ID of the inline token to trigger.
	InlineHookId pulumi.StringPtrInput
	// Auth Server Policy Rule name.
	Name pulumi.StringPtrInput
	// Auth Server Policy ID.
	PolicyId pulumi.StringInput
	// Priority of the auth server policy rule.
	Priority pulumi.IntInput
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes pulumi.IntPtrInput
	// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
	// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
	RefreshTokenWindowMinutes pulumi.IntPtrInput
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists pulumi.StringArrayInput
	// The status of the Auth Server Policy Rule.
	Status pulumi.StringPtrInput
	// The type of the Auth Server Policy Rule.
	Type pulumi.StringPtrInput
	// Specifies a set of Users to be excluded.
	UserBlacklists pulumi.StringArrayInput
	// Specifies a set of Users to be included.
	UserWhitelists pulumi.StringArrayInput
}

func (ServerPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverPolicyRuleArgs)(nil)).Elem()
}

type ServerPolicyRuleInput interface {
	pulumi.Input

	ToServerPolicyRuleOutput() ServerPolicyRuleOutput
	ToServerPolicyRuleOutputWithContext(ctx context.Context) ServerPolicyRuleOutput
}

func (*ServerPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerPolicyRule)(nil)).Elem()
}

func (i *ServerPolicyRule) ToServerPolicyRuleOutput() ServerPolicyRuleOutput {
	return i.ToServerPolicyRuleOutputWithContext(context.Background())
}

func (i *ServerPolicyRule) ToServerPolicyRuleOutputWithContext(ctx context.Context) ServerPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPolicyRuleOutput)
}

// ServerPolicyRuleArrayInput is an input type that accepts ServerPolicyRuleArray and ServerPolicyRuleArrayOutput values.
// You can construct a concrete instance of `ServerPolicyRuleArrayInput` via:
//
//	ServerPolicyRuleArray{ ServerPolicyRuleArgs{...} }
type ServerPolicyRuleArrayInput interface {
	pulumi.Input

	ToServerPolicyRuleArrayOutput() ServerPolicyRuleArrayOutput
	ToServerPolicyRuleArrayOutputWithContext(context.Context) ServerPolicyRuleArrayOutput
}

type ServerPolicyRuleArray []ServerPolicyRuleInput

func (ServerPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerPolicyRule)(nil)).Elem()
}

func (i ServerPolicyRuleArray) ToServerPolicyRuleArrayOutput() ServerPolicyRuleArrayOutput {
	return i.ToServerPolicyRuleArrayOutputWithContext(context.Background())
}

func (i ServerPolicyRuleArray) ToServerPolicyRuleArrayOutputWithContext(ctx context.Context) ServerPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPolicyRuleArrayOutput)
}

// ServerPolicyRuleMapInput is an input type that accepts ServerPolicyRuleMap and ServerPolicyRuleMapOutput values.
// You can construct a concrete instance of `ServerPolicyRuleMapInput` via:
//
//	ServerPolicyRuleMap{ "key": ServerPolicyRuleArgs{...} }
type ServerPolicyRuleMapInput interface {
	pulumi.Input

	ToServerPolicyRuleMapOutput() ServerPolicyRuleMapOutput
	ToServerPolicyRuleMapOutputWithContext(context.Context) ServerPolicyRuleMapOutput
}

type ServerPolicyRuleMap map[string]ServerPolicyRuleInput

func (ServerPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerPolicyRule)(nil)).Elem()
}

func (i ServerPolicyRuleMap) ToServerPolicyRuleMapOutput() ServerPolicyRuleMapOutput {
	return i.ToServerPolicyRuleMapOutputWithContext(context.Background())
}

func (i ServerPolicyRuleMap) ToServerPolicyRuleMapOutputWithContext(ctx context.Context) ServerPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPolicyRuleMapOutput)
}

type ServerPolicyRuleOutput struct{ *pulumi.OutputState }

func (ServerPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerPolicyRule)(nil)).Elem()
}

func (o ServerPolicyRuleOutput) ToServerPolicyRuleOutput() ServerPolicyRuleOutput {
	return o
}

func (o ServerPolicyRuleOutput) ToServerPolicyRuleOutputWithContext(ctx context.Context) ServerPolicyRuleOutput {
	return o
}

// Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
func (o ServerPolicyRuleOutput) AccessTokenLifetimeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.IntPtrOutput { return v.AccessTokenLifetimeMinutes }).(pulumi.IntPtrOutput)
}

// Auth Server ID.
func (o ServerPolicyRuleOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringOutput { return v.AuthServerId }).(pulumi.StringOutput)
}

// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`, `"clientCredentials"`,
// `"urn:ietf:params:oauth:grant-type:saml2-bearer"` (*Early Access Property*), `"urn:ietf:params:oauth:grant-type:token-exchange"` (*Early Access Property*),
// `"urn:ietf:params:oauth:grant-type:device_code"` (*Early Access Property*), `"interactionCode"` (*OIE only*). For `"implicit"` value either `userWhitelist` or `groupWhitelist` should be set.
func (o ServerPolicyRuleOutput) GrantTypeWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.GrantTypeWhitelists }).(pulumi.StringArrayOutput)
}

// Specifies a set of Groups whose Users are to be excluded.
func (o ServerPolicyRuleOutput) GroupBlacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.GroupBlacklists }).(pulumi.StringArrayOutput)
}

// Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `"EVERYONE"`.
func (o ServerPolicyRuleOutput) GroupWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.GroupWhitelists }).(pulumi.StringArrayOutput)
}

// The ID of the inline token to trigger.
func (o ServerPolicyRuleOutput) InlineHookId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringPtrOutput { return v.InlineHookId }).(pulumi.StringPtrOutput)
}

// Auth Server Policy Rule name.
func (o ServerPolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Auth Server Policy ID.
func (o ServerPolicyRuleOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Priority of the auth server policy rule.
func (o ServerPolicyRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Lifetime of refresh token.
func (o ServerPolicyRuleOutput) RefreshTokenLifetimeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.IntPtrOutput { return v.RefreshTokenLifetimeMinutes }).(pulumi.IntPtrOutput)
}

// Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
// `"refreshTokenWindowMinutes"` must be between `"accessTokenLifetimeMinutes"` and `"refreshTokenLifetimeMinutes"`.
func (o ServerPolicyRuleOutput) RefreshTokenWindowMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.IntPtrOutput { return v.RefreshTokenWindowMinutes }).(pulumi.IntPtrOutput)
}

// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
func (o ServerPolicyRuleOutput) ScopeWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.ScopeWhitelists }).(pulumi.StringArrayOutput)
}

// The status of the Auth Server Policy Rule.
func (o ServerPolicyRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of the Auth Server Policy Rule.
func (o ServerPolicyRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies a set of Users to be excluded.
func (o ServerPolicyRuleOutput) UserBlacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.UserBlacklists }).(pulumi.StringArrayOutput)
}

// Specifies a set of Users to be included.
func (o ServerPolicyRuleOutput) UserWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerPolicyRule) pulumi.StringArrayOutput { return v.UserWhitelists }).(pulumi.StringArrayOutput)
}

type ServerPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (ServerPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerPolicyRule)(nil)).Elem()
}

func (o ServerPolicyRuleArrayOutput) ToServerPolicyRuleArrayOutput() ServerPolicyRuleArrayOutput {
	return o
}

func (o ServerPolicyRuleArrayOutput) ToServerPolicyRuleArrayOutputWithContext(ctx context.Context) ServerPolicyRuleArrayOutput {
	return o
}

func (o ServerPolicyRuleArrayOutput) Index(i pulumi.IntInput) ServerPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerPolicyRule {
		return vs[0].([]*ServerPolicyRule)[vs[1].(int)]
	}).(ServerPolicyRuleOutput)
}

type ServerPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (ServerPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerPolicyRule)(nil)).Elem()
}

func (o ServerPolicyRuleMapOutput) ToServerPolicyRuleMapOutput() ServerPolicyRuleMapOutput {
	return o
}

func (o ServerPolicyRuleMapOutput) ToServerPolicyRuleMapOutputWithContext(ctx context.Context) ServerPolicyRuleMapOutput {
	return o
}

func (o ServerPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) ServerPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerPolicyRule {
		return vs[0].(map[string]*ServerPolicyRule)[vs[1].(string)]
	}).(ServerPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPolicyRuleInput)(nil)).Elem(), &ServerPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPolicyRuleArrayInput)(nil)).Elem(), ServerPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPolicyRuleMapInput)(nil)).Elem(), ServerPolicyRuleMap{})
	pulumi.RegisterOutputType(ServerPolicyRuleOutput{})
	pulumi.RegisterOutputType(ServerPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(ServerPolicyRuleMapOutput{})
}
