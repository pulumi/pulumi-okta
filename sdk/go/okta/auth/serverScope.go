// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerScope struct {
	pulumi.CustomResourceState

	// Auth server ID
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// EA Feature and thus it is simply ignored if the feature is off
	Consent pulumi.StringPtrOutput `pulumi:"consent"`
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Description of the Auth Server Scope.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the end user displayed in a consent dialog box
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish pulumi.StringPtrOutput `pulumi:"metadataPublish"`
	// Auth server scope name
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the scope optional
	Optional pulumi.BoolPtrOutput `pulumi:"optional"`
	// Whether Okta created the Scope
	System pulumi.BoolOutput `pulumi:"system"`
}

// NewServerScope registers a new resource with the given unique name, arguments, and options.
func NewServerScope(ctx *pulumi.Context,
	name string, args *ServerScopeArgs, opts ...pulumi.ResourceOption) (*ServerScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerScope
	err := ctx.RegisterResource("okta:auth/serverScope:ServerScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerScope gets an existing ServerScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerScopeState, opts ...pulumi.ResourceOption) (*ServerScope, error) {
	var resource ServerScope
	err := ctx.ReadResource("okta:auth/serverScope:ServerScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerScope resources.
type serverScopeState struct {
	// Auth server ID
	AuthServerId *string `pulumi:"authServerId"`
	// EA Feature and thus it is simply ignored if the feature is off
	Consent *string `pulumi:"consent"`
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default *bool `pulumi:"default"`
	// Description of the Auth Server Scope.
	Description *string `pulumi:"description"`
	// Name of the end user displayed in a consent dialog box
	DisplayName *string `pulumi:"displayName"`
	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish *string `pulumi:"metadataPublish"`
	// Auth server scope name
	Name *string `pulumi:"name"`
	// Whether the scope optional
	Optional *bool `pulumi:"optional"`
	// Whether Okta created the Scope
	System *bool `pulumi:"system"`
}

type ServerScopeState struct {
	// Auth server ID
	AuthServerId pulumi.StringPtrInput
	// EA Feature and thus it is simply ignored if the feature is off
	Consent pulumi.StringPtrInput
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default pulumi.BoolPtrInput
	// Description of the Auth Server Scope.
	Description pulumi.StringPtrInput
	// Name of the end user displayed in a consent dialog box
	DisplayName pulumi.StringPtrInput
	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish pulumi.StringPtrInput
	// Auth server scope name
	Name pulumi.StringPtrInput
	// Whether the scope optional
	Optional pulumi.BoolPtrInput
	// Whether Okta created the Scope
	System pulumi.BoolPtrInput
}

func (ServerScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverScopeState)(nil)).Elem()
}

type serverScopeArgs struct {
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
	// EA Feature and thus it is simply ignored if the feature is off
	Consent *string `pulumi:"consent"`
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default *bool `pulumi:"default"`
	// Description of the Auth Server Scope.
	Description *string `pulumi:"description"`
	// Name of the end user displayed in a consent dialog box
	DisplayName *string `pulumi:"displayName"`
	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish *string `pulumi:"metadataPublish"`
	// Auth server scope name
	Name *string `pulumi:"name"`
	// Whether the scope optional
	Optional *bool `pulumi:"optional"`
}

// The set of arguments for constructing a ServerScope resource.
type ServerScopeArgs struct {
	// Auth server ID
	AuthServerId pulumi.StringInput
	// EA Feature and thus it is simply ignored if the feature is off
	Consent pulumi.StringPtrInput
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default pulumi.BoolPtrInput
	// Description of the Auth Server Scope.
	Description pulumi.StringPtrInput
	// Name of the end user displayed in a consent dialog box
	DisplayName pulumi.StringPtrInput
	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish pulumi.StringPtrInput
	// Auth server scope name
	Name pulumi.StringPtrInput
	// Whether the scope optional
	Optional pulumi.BoolPtrInput
}

func (ServerScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverScopeArgs)(nil)).Elem()
}

type ServerScopeInput interface {
	pulumi.Input

	ToServerScopeOutput() ServerScopeOutput
	ToServerScopeOutputWithContext(ctx context.Context) ServerScopeOutput
}

func (*ServerScope) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerScope)(nil)).Elem()
}

func (i *ServerScope) ToServerScopeOutput() ServerScopeOutput {
	return i.ToServerScopeOutputWithContext(context.Background())
}

func (i *ServerScope) ToServerScopeOutputWithContext(ctx context.Context) ServerScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerScopeOutput)
}

// ServerScopeArrayInput is an input type that accepts ServerScopeArray and ServerScopeArrayOutput values.
// You can construct a concrete instance of `ServerScopeArrayInput` via:
//
//	ServerScopeArray{ ServerScopeArgs{...} }
type ServerScopeArrayInput interface {
	pulumi.Input

	ToServerScopeArrayOutput() ServerScopeArrayOutput
	ToServerScopeArrayOutputWithContext(context.Context) ServerScopeArrayOutput
}

type ServerScopeArray []ServerScopeInput

func (ServerScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerScope)(nil)).Elem()
}

func (i ServerScopeArray) ToServerScopeArrayOutput() ServerScopeArrayOutput {
	return i.ToServerScopeArrayOutputWithContext(context.Background())
}

func (i ServerScopeArray) ToServerScopeArrayOutputWithContext(ctx context.Context) ServerScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerScopeArrayOutput)
}

// ServerScopeMapInput is an input type that accepts ServerScopeMap and ServerScopeMapOutput values.
// You can construct a concrete instance of `ServerScopeMapInput` via:
//
//	ServerScopeMap{ "key": ServerScopeArgs{...} }
type ServerScopeMapInput interface {
	pulumi.Input

	ToServerScopeMapOutput() ServerScopeMapOutput
	ToServerScopeMapOutputWithContext(context.Context) ServerScopeMapOutput
}

type ServerScopeMap map[string]ServerScopeInput

func (ServerScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerScope)(nil)).Elem()
}

func (i ServerScopeMap) ToServerScopeMapOutput() ServerScopeMapOutput {
	return i.ToServerScopeMapOutputWithContext(context.Background())
}

func (i ServerScopeMap) ToServerScopeMapOutputWithContext(ctx context.Context) ServerScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerScopeMapOutput)
}

type ServerScopeOutput struct{ *pulumi.OutputState }

func (ServerScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerScope)(nil)).Elem()
}

func (o ServerScopeOutput) ToServerScopeOutput() ServerScopeOutput {
	return o
}

func (o ServerScopeOutput) ToServerScopeOutputWithContext(ctx context.Context) ServerScopeOutput {
	return o
}

// Auth server ID
func (o ServerScopeOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringOutput { return v.AuthServerId }).(pulumi.StringOutput)
}

// EA Feature and thus it is simply ignored if the feature is off
func (o ServerScopeOutput) Consent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringPtrOutput { return v.Consent }).(pulumi.StringPtrOutput)
}

// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
func (o ServerScopeOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Description of the Auth Server Scope.
func (o ServerScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the end user displayed in a consent dialog box
func (o ServerScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
func (o ServerScopeOutput) MetadataPublish() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringPtrOutput { return v.MetadataPublish }).(pulumi.StringPtrOutput)
}

// Auth server scope name
func (o ServerScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the scope optional
func (o ServerScopeOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.BoolPtrOutput { return v.Optional }).(pulumi.BoolPtrOutput)
}

// Whether Okta created the Scope
func (o ServerScopeOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServerScope) pulumi.BoolOutput { return v.System }).(pulumi.BoolOutput)
}

type ServerScopeArrayOutput struct{ *pulumi.OutputState }

func (ServerScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerScope)(nil)).Elem()
}

func (o ServerScopeArrayOutput) ToServerScopeArrayOutput() ServerScopeArrayOutput {
	return o
}

func (o ServerScopeArrayOutput) ToServerScopeArrayOutputWithContext(ctx context.Context) ServerScopeArrayOutput {
	return o
}

func (o ServerScopeArrayOutput) Index(i pulumi.IntInput) ServerScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerScope {
		return vs[0].([]*ServerScope)[vs[1].(int)]
	}).(ServerScopeOutput)
}

type ServerScopeMapOutput struct{ *pulumi.OutputState }

func (ServerScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerScope)(nil)).Elem()
}

func (o ServerScopeMapOutput) ToServerScopeMapOutput() ServerScopeMapOutput {
	return o
}

func (o ServerScopeMapOutput) ToServerScopeMapOutputWithContext(ctx context.Context) ServerScopeMapOutput {
	return o
}

func (o ServerScopeMapOutput) MapIndex(k pulumi.StringInput) ServerScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerScope {
		return vs[0].(map[string]*ServerScope)[vs[1].(string)]
	}).(ServerScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerScopeInput)(nil)).Elem(), &ServerScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerScopeArrayInput)(nil)).Elem(), ServerScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerScopeMapInput)(nil)).Elem(), ServerScopeMap{})
	pulumi.RegisterOutputType(ServerScopeOutput{})
	pulumi.RegisterOutputType(ServerScopeArrayOutput{})
	pulumi.RegisterOutputType(ServerScopeMapOutput{})
}
