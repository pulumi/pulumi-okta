// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Authorization Server Claim.
//
// This resource allows you to create and configure an Authorization Server Claim.
//
// ## Import
//
// Authorization Server Claim can be imported via the Auth Server ID and Claim ID.
//
// ```sh
//  $ pulumi import okta:auth/serverClaim:ServerClaim example <auth server id>/<claim id>
// ```
type ServerClaim struct {
	pulumi.CustomResourceState

	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrOutput `pulumi:"alwaysIncludeInToken"`
	// The Application's display name.
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringOutput `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrOutput `pulumi:"groupFilterType"`
	// The name of the claim.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The value of the claim.
	Value pulumi.StringOutput `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrOutput `pulumi:"valueType"`
}

// NewServerClaim registers a new resource with the given unique name, arguments, and options.
func NewServerClaim(ctx *pulumi.Context,
	name string, args *ServerClaimArgs, opts ...pulumi.ResourceOption) (*ServerClaim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	if args.ClaimType == nil {
		return nil, errors.New("invalid value for required argument 'ClaimType'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource ServerClaim
	err := ctx.RegisterResource("okta:auth/serverClaim:ServerClaim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerClaim gets an existing ServerClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerClaim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerClaimState, opts ...pulumi.ResourceOption) (*ServerClaim, error) {
	var resource ServerClaim
	err := ctx.ReadResource("okta:auth/serverClaim:ServerClaim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerClaim resources.
type serverClaimState struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// The Application's display name.
	AuthServerId *string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType *string `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType *string `pulumi:"groupFilterType"`
	// The name of the claim.
	Name *string `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes []string `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// The value of the claim.
	Value *string `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType *string `pulumi:"valueType"`
}

type ServerClaimState struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// The Application's display name.
	AuthServerId pulumi.StringPtrInput
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringPtrInput
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrInput
	// The name of the claim.
	Name pulumi.StringPtrInput
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayInput
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringPtrInput
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrInput
}

func (ServerClaimState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverClaimState)(nil)).Elem()
}

type serverClaimArgs struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// The Application's display name.
	AuthServerId string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType string `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType *string `pulumi:"groupFilterType"`
	// The name of the claim.
	Name *string `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes []string `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// The value of the claim.
	Value string `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType *string `pulumi:"valueType"`
}

// The set of arguments for constructing a ServerClaim resource.
type ServerClaimArgs struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// The Application's display name.
	AuthServerId pulumi.StringInput
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringInput
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrInput
	// The name of the claim.
	Name pulumi.StringPtrInput
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayInput
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringInput
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrInput
}

func (ServerClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverClaimArgs)(nil)).Elem()
}

type ServerClaimInput interface {
	pulumi.Input

	ToServerClaimOutput() ServerClaimOutput
	ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput
}

func (*ServerClaim) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerClaim)(nil))
}

func (i *ServerClaim) ToServerClaimOutput() ServerClaimOutput {
	return i.ToServerClaimOutputWithContext(context.Background())
}

func (i *ServerClaim) ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerClaimOutput)
}

type ServerClaimOutput struct {
	*pulumi.OutputState
}

func (ServerClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerClaim)(nil))
}

func (o ServerClaimOutput) ToServerClaimOutput() ServerClaimOutput {
	return o
}

func (o ServerClaimOutput) ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServerClaimOutput{})
}
