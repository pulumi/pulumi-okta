// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an Authorization Server Claim.
//
// This resource allows you to create and configure an Authorization Server Claim.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auth.NewServerClaim(ctx, "example", &auth.ServerClaimArgs{
//				AuthServerId: pulumi.String("<auth server id>"),
//				ClaimType:    pulumi.String("IDENTITY"),
//				Scopes: pulumi.StringArray{
//					okta_auth_server_scope.Example.Name,
//				},
//				Value: pulumi.String("String.substringAfter(user.email, \"@\") == \"example.com\""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Authorization Server Claim can be imported via the Auth Server ID and Claim ID.
//
// ```sh
//
//	$ pulumi import okta:auth/serverClaim:ServerClaim example &#60;auth server id&#62;/&#60;claim id&#62;
//
// ```
type ServerClaim struct {
	pulumi.CustomResourceState

	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrOutput `pulumi:"alwaysIncludeInToken"`
	// ID of the authorization server.
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringOutput `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrOutput `pulumi:"groupFilterType"`
	// The name of the claim.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The value of the claim.
	Value pulumi.StringOutput `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrOutput `pulumi:"valueType"`
}

// NewServerClaim registers a new resource with the given unique name, arguments, and options.
func NewServerClaim(ctx *pulumi.Context,
	name string, args *ServerClaimArgs, opts ...pulumi.ResourceOption) (*ServerClaim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	if args.ClaimType == nil {
		return nil, errors.New("invalid value for required argument 'ClaimType'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerClaim
	err := ctx.RegisterResource("okta:auth/serverClaim:ServerClaim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerClaim gets an existing ServerClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerClaim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerClaimState, opts ...pulumi.ResourceOption) (*ServerClaim, error) {
	var resource ServerClaim
	err := ctx.ReadResource("okta:auth/serverClaim:ServerClaim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerClaim resources.
type serverClaimState struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// ID of the authorization server.
	AuthServerId *string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType *string `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType *string `pulumi:"groupFilterType"`
	// The name of the claim.
	Name *string `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes []string `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// The value of the claim.
	Value *string `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType *string `pulumi:"valueType"`
}

type ServerClaimState struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// ID of the authorization server.
	AuthServerId pulumi.StringPtrInput
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringPtrInput
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrInput
	// The name of the claim.
	Name pulumi.StringPtrInput
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayInput
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringPtrInput
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrInput
}

func (ServerClaimState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverClaimState)(nil)).Elem()
}

type serverClaimArgs struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken *bool `pulumi:"alwaysIncludeInToken"`
	// ID of the authorization server.
	AuthServerId string `pulumi:"authServerId"`
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType string `pulumi:"claimType"`
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType *string `pulumi:"groupFilterType"`
	// The name of the claim.
	Name *string `pulumi:"name"`
	// The list of scopes the auth server claim is tied to.
	Scopes []string `pulumi:"scopes"`
	// The status of the application. It defaults to `"ACTIVE"`.
	Status *string `pulumi:"status"`
	// The value of the claim.
	Value string `pulumi:"value"`
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType *string `pulumi:"valueType"`
}

// The set of arguments for constructing a ServerClaim resource.
type ServerClaimArgs struct {
	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken pulumi.BoolPtrInput
	// ID of the authorization server.
	AuthServerId pulumi.StringInput
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType pulumi.StringInput
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType pulumi.StringPtrInput
	// The name of the claim.
	Name pulumi.StringPtrInput
	// The list of scopes the auth server claim is tied to.
	Scopes pulumi.StringArrayInput
	// The status of the application. It defaults to `"ACTIVE"`.
	Status pulumi.StringPtrInput
	// The value of the claim.
	Value pulumi.StringInput
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType pulumi.StringPtrInput
}

func (ServerClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverClaimArgs)(nil)).Elem()
}

type ServerClaimInput interface {
	pulumi.Input

	ToServerClaimOutput() ServerClaimOutput
	ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput
}

func (*ServerClaim) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerClaim)(nil)).Elem()
}

func (i *ServerClaim) ToServerClaimOutput() ServerClaimOutput {
	return i.ToServerClaimOutputWithContext(context.Background())
}

func (i *ServerClaim) ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerClaimOutput)
}

func (i *ServerClaim) ToOutput(ctx context.Context) pulumix.Output[*ServerClaim] {
	return pulumix.Output[*ServerClaim]{
		OutputState: i.ToServerClaimOutputWithContext(ctx).OutputState,
	}
}

// ServerClaimArrayInput is an input type that accepts ServerClaimArray and ServerClaimArrayOutput values.
// You can construct a concrete instance of `ServerClaimArrayInput` via:
//
//	ServerClaimArray{ ServerClaimArgs{...} }
type ServerClaimArrayInput interface {
	pulumi.Input

	ToServerClaimArrayOutput() ServerClaimArrayOutput
	ToServerClaimArrayOutputWithContext(context.Context) ServerClaimArrayOutput
}

type ServerClaimArray []ServerClaimInput

func (ServerClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerClaim)(nil)).Elem()
}

func (i ServerClaimArray) ToServerClaimArrayOutput() ServerClaimArrayOutput {
	return i.ToServerClaimArrayOutputWithContext(context.Background())
}

func (i ServerClaimArray) ToServerClaimArrayOutputWithContext(ctx context.Context) ServerClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerClaimArrayOutput)
}

func (i ServerClaimArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServerClaim] {
	return pulumix.Output[[]*ServerClaim]{
		OutputState: i.ToServerClaimArrayOutputWithContext(ctx).OutputState,
	}
}

// ServerClaimMapInput is an input type that accepts ServerClaimMap and ServerClaimMapOutput values.
// You can construct a concrete instance of `ServerClaimMapInput` via:
//
//	ServerClaimMap{ "key": ServerClaimArgs{...} }
type ServerClaimMapInput interface {
	pulumi.Input

	ToServerClaimMapOutput() ServerClaimMapOutput
	ToServerClaimMapOutputWithContext(context.Context) ServerClaimMapOutput
}

type ServerClaimMap map[string]ServerClaimInput

func (ServerClaimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerClaim)(nil)).Elem()
}

func (i ServerClaimMap) ToServerClaimMapOutput() ServerClaimMapOutput {
	return i.ToServerClaimMapOutputWithContext(context.Background())
}

func (i ServerClaimMap) ToServerClaimMapOutputWithContext(ctx context.Context) ServerClaimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerClaimMapOutput)
}

func (i ServerClaimMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerClaim] {
	return pulumix.Output[map[string]*ServerClaim]{
		OutputState: i.ToServerClaimMapOutputWithContext(ctx).OutputState,
	}
}

type ServerClaimOutput struct{ *pulumi.OutputState }

func (ServerClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerClaim)(nil)).Elem()
}

func (o ServerClaimOutput) ToServerClaimOutput() ServerClaimOutput {
	return o
}

func (o ServerClaimOutput) ToServerClaimOutputWithContext(ctx context.Context) ServerClaimOutput {
	return o
}

func (o ServerClaimOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerClaim] {
	return pulumix.Output[*ServerClaim]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to include claims in token, by default it is set to `true`.
func (o ServerClaimOutput) AlwaysIncludeInToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.BoolPtrOutput { return v.AlwaysIncludeInToken }).(pulumi.BoolPtrOutput)
}

// ID of the authorization server.
func (o ServerClaimOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringOutput { return v.AuthServerId }).(pulumi.StringOutput)
}

// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
func (o ServerClaimOutput) ClaimType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringOutput { return v.ClaimType }).(pulumi.StringOutput)
}

// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
func (o ServerClaimOutput) GroupFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringPtrOutput { return v.GroupFilterType }).(pulumi.StringPtrOutput)
}

// The name of the claim.
func (o ServerClaimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of scopes the auth server claim is tied to.
func (o ServerClaimOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The status of the application. It defaults to `"ACTIVE"`.
func (o ServerClaimOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The value of the claim.
func (o ServerClaimOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
func (o ServerClaimOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerClaim) pulumi.StringPtrOutput { return v.ValueType }).(pulumi.StringPtrOutput)
}

type ServerClaimArrayOutput struct{ *pulumi.OutputState }

func (ServerClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerClaim)(nil)).Elem()
}

func (o ServerClaimArrayOutput) ToServerClaimArrayOutput() ServerClaimArrayOutput {
	return o
}

func (o ServerClaimArrayOutput) ToServerClaimArrayOutputWithContext(ctx context.Context) ServerClaimArrayOutput {
	return o
}

func (o ServerClaimArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServerClaim] {
	return pulumix.Output[[]*ServerClaim]{
		OutputState: o.OutputState,
	}
}

func (o ServerClaimArrayOutput) Index(i pulumi.IntInput) ServerClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerClaim {
		return vs[0].([]*ServerClaim)[vs[1].(int)]
	}).(ServerClaimOutput)
}

type ServerClaimMapOutput struct{ *pulumi.OutputState }

func (ServerClaimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerClaim)(nil)).Elem()
}

func (o ServerClaimMapOutput) ToServerClaimMapOutput() ServerClaimMapOutput {
	return o
}

func (o ServerClaimMapOutput) ToServerClaimMapOutputWithContext(ctx context.Context) ServerClaimMapOutput {
	return o
}

func (o ServerClaimMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerClaim] {
	return pulumix.Output[map[string]*ServerClaim]{
		OutputState: o.OutputState,
	}
}

func (o ServerClaimMapOutput) MapIndex(k pulumi.StringInput) ServerClaimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerClaim {
		return vs[0].(map[string]*ServerClaim)[vs[1].(string)]
	}).(ServerClaimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerClaimInput)(nil)).Elem(), &ServerClaim{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerClaimArrayInput)(nil)).Elem(), ServerClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerClaimMapInput)(nil)).Elem(), ServerClaimMap{})
	pulumi.RegisterOutputType(ServerClaimOutput{})
	pulumi.RegisterOutputType(ServerClaimArrayOutput{})
	pulumi.RegisterOutputType(ServerClaimMapOutput{})
}
