// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a list of authorization server scopes from Okta.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/auth"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auth.GetServerScopes(ctx, &auth.GetServerScopesArgs{
//				AuthServerId: "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetServerScopes(ctx *pulumi.Context, args *GetServerScopesArgs, opts ...pulumi.InvokeOption) (*GetServerScopesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServerScopesResult
	err := ctx.Invoke("okta:auth/getServerScopes:getServerScopes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerScopes.
type GetServerScopesArgs struct {
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
}

// A collection of values returned by getServerScopes.
type GetServerScopesResult struct {
	// Auth server ID
	AuthServerId string `pulumi:"authServerId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Collection of authorization server scopes retrieved from Okta with the following properties.
	Scopes []GetServerScopesScope `pulumi:"scopes"`
}

func GetServerScopesOutput(ctx *pulumi.Context, args GetServerScopesOutputArgs, opts ...pulumi.InvokeOption) GetServerScopesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServerScopesResultOutput, error) {
			args := v.(GetServerScopesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetServerScopesResult
			secret, err := ctx.InvokePackageRaw("okta:auth/getServerScopes:getServerScopes", args, &rv, "", opts...)
			if err != nil {
				return GetServerScopesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetServerScopesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetServerScopesResultOutput), nil
			}
			return output, nil
		}).(GetServerScopesResultOutput)
}

// A collection of arguments for invoking getServerScopes.
type GetServerScopesOutputArgs struct {
	// Auth server ID
	AuthServerId pulumi.StringInput `pulumi:"authServerId"`
}

func (GetServerScopesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerScopesArgs)(nil)).Elem()
}

// A collection of values returned by getServerScopes.
type GetServerScopesResultOutput struct{ *pulumi.OutputState }

func (GetServerScopesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerScopesResult)(nil)).Elem()
}

func (o GetServerScopesResultOutput) ToGetServerScopesResultOutput() GetServerScopesResultOutput {
	return o
}

func (o GetServerScopesResultOutput) ToGetServerScopesResultOutputWithContext(ctx context.Context) GetServerScopesResultOutput {
	return o
}

// Auth server ID
func (o GetServerScopesResultOutput) AuthServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesResult) string { return v.AuthServerId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServerScopesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerScopesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Collection of authorization server scopes retrieved from Okta with the following properties.
func (o GetServerScopesResultOutput) Scopes() GetServerScopesScopeArrayOutput {
	return o.ApplyT(func(v GetServerScopesResult) []GetServerScopesScope { return v.Scopes }).(GetServerScopesScopeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerScopesResultOutput{})
}
