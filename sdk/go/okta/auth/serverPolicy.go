// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an Authorization Server Policy.
//
// This resource allows you to create and configure an Authorization Server Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta/auth"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := auth.NewServerPolicy(ctx, "example", &auth.ServerPolicyArgs{
// 			AuthServerId: pulumi.String("<auth server id>"),
// 			ClientWhitelists: pulumi.StringArray{
// 				pulumi.String("ALL_CLIENTS"),
// 			},
// 			Description: pulumi.String("example"),
// 			Priority:    pulumi.Int(1),
// 			Status:      pulumi.String("ACTIVE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Authorization Server Policy can be imported via the Auth Server ID and Policy ID.
//
// ```sh
//  $ pulumi import okta:auth/serverPolicy:ServerPolicy example <auth server id>/<policy id>
// ```
type ServerPolicy struct {
	pulumi.CustomResourceState

	// The ID of the Auth Server.
	AuthServerId pulumi.StringOutput `pulumi:"authServerId"`
	// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelists pulumi.StringArrayOutput `pulumi:"clientWhitelists"`
	// The description of the Auth Server Policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Auth Server Policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the Auth Server Policy.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The status of the Auth Server Policy.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of the Auth Server Policy.
	//
	// Deprecated: Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewServerPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerPolicy(ctx *pulumi.Context,
	name string, args *ServerPolicyArgs, opts ...pulumi.ResourceOption) (*ServerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthServerId == nil {
		return nil, errors.New("invalid value for required argument 'AuthServerId'")
	}
	if args.ClientWhitelists == nil {
		return nil, errors.New("invalid value for required argument 'ClientWhitelists'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	var resource ServerPolicy
	err := ctx.RegisterResource("okta:auth/serverPolicy:ServerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerPolicy gets an existing ServerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerPolicyState, opts ...pulumi.ResourceOption) (*ServerPolicy, error) {
	var resource ServerPolicy
	err := ctx.ReadResource("okta:auth/serverPolicy:ServerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerPolicy resources.
type serverPolicyState struct {
	// The ID of the Auth Server.
	AuthServerId *string `pulumi:"authServerId"`
	// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelists []string `pulumi:"clientWhitelists"`
	// The description of the Auth Server Policy.
	Description *string `pulumi:"description"`
	// The name of the Auth Server Policy.
	Name *string `pulumi:"name"`
	// The priority of the Auth Server Policy.
	Priority *int `pulumi:"priority"`
	// The status of the Auth Server Policy.
	Status *string `pulumi:"status"`
	// The type of the Auth Server Policy.
	//
	// Deprecated: Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value
	Type *string `pulumi:"type"`
}

type ServerPolicyState struct {
	// The ID of the Auth Server.
	AuthServerId pulumi.StringPtrInput
	// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelists pulumi.StringArrayInput
	// The description of the Auth Server Policy.
	Description pulumi.StringPtrInput
	// The name of the Auth Server Policy.
	Name pulumi.StringPtrInput
	// The priority of the Auth Server Policy.
	Priority pulumi.IntPtrInput
	// The status of the Auth Server Policy.
	Status pulumi.StringPtrInput
	// The type of the Auth Server Policy.
	//
	// Deprecated: Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value
	Type pulumi.StringPtrInput
}

func (ServerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverPolicyState)(nil)).Elem()
}

type serverPolicyArgs struct {
	// The ID of the Auth Server.
	AuthServerId string `pulumi:"authServerId"`
	// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelists []string `pulumi:"clientWhitelists"`
	// The description of the Auth Server Policy.
	Description string `pulumi:"description"`
	// The name of the Auth Server Policy.
	Name *string `pulumi:"name"`
	// The priority of the Auth Server Policy.
	Priority int `pulumi:"priority"`
	// The status of the Auth Server Policy.
	Status *string `pulumi:"status"`
	// The type of the Auth Server Policy.
	//
	// Deprecated: Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ServerPolicy resource.
type ServerPolicyArgs struct {
	// The ID of the Auth Server.
	AuthServerId pulumi.StringInput
	// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelists pulumi.StringArrayInput
	// The description of the Auth Server Policy.
	Description pulumi.StringInput
	// The name of the Auth Server Policy.
	Name pulumi.StringPtrInput
	// The priority of the Auth Server Policy.
	Priority pulumi.IntInput
	// The status of the Auth Server Policy.
	Status pulumi.StringPtrInput
	// The type of the Auth Server Policy.
	//
	// Deprecated: Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value
	Type pulumi.StringPtrInput
}

func (ServerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverPolicyArgs)(nil)).Elem()
}

type ServerPolicyInput interface {
	pulumi.Input

	ToServerPolicyOutput() ServerPolicyOutput
	ToServerPolicyOutputWithContext(ctx context.Context) ServerPolicyOutput
}

func (*ServerPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPolicy)(nil))
}

func (i *ServerPolicy) ToServerPolicyOutput() ServerPolicyOutput {
	return i.ToServerPolicyOutputWithContext(context.Background())
}

func (i *ServerPolicy) ToServerPolicyOutputWithContext(ctx context.Context) ServerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPolicyOutput)
}

type ServerPolicyOutput struct {
	*pulumi.OutputState
}

func (ServerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPolicy)(nil))
}

func (o ServerPolicyOutput) ToServerPolicyOutput() ServerPolicyOutput {
	return o
}

func (o ServerPolicyOutput) ToServerPolicyOutputWithContext(ctx context.Context) ServerPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServerPolicyOutput{})
}
