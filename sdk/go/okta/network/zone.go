// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Okta Network Zone.
//
// This resource allows you to create and configure an Okta Network Zone.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/network_zone.html.markdown.
type Zone struct {
	pulumi.CustomResourceState

	// Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayOutput `pulumi:"dynamicLocations"`
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Array of values in CIDR/range form.
	Proxies pulumi.StringArrayOutput `pulumi:"proxies"`
	// Type of the Network Zone - can either be IP or DYNAMIC only.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ZoneArgs{}
	}
	var resource Zone
	err := ctx.RegisterResource("okta:network/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("okta:network/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations []string `pulumi:"dynamicLocations"`
	// Array of values in CIDR/range form.
	Gateways []string `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name *string `pulumi:"name"`
	// Array of values in CIDR/range form.
	Proxies []string `pulumi:"proxies"`
	// Type of the Network Zone - can either be IP or DYNAMIC only.
	Type *string `pulumi:"type"`
}

type ZoneState struct {
	// Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayInput
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayInput
	// Name of the Network Zone Resource.
	Name pulumi.StringPtrInput
	// Array of values in CIDR/range form.
	Proxies pulumi.StringArrayInput
	// Type of the Network Zone - can either be IP or DYNAMIC only.
	Type pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations []string `pulumi:"dynamicLocations"`
	// Array of values in CIDR/range form.
	Gateways []string `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name *string `pulumi:"name"`
	// Array of values in CIDR/range form.
	Proxies []string `pulumi:"proxies"`
	// Type of the Network Zone - can either be IP or DYNAMIC only.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// Array of locations ISO-3166-1(2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayInput
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayInput
	// Name of the Network Zone Resource.
	Name pulumi.StringPtrInput
	// Array of values in CIDR/range form.
	Proxies pulumi.StringArrayInput
	// Type of the Network Zone - can either be IP or DYNAMIC only.
	Type pulumi.StringInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}
