// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Okta Network Zone.
//
// This resource allows you to create and configure an Okta Network Zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := network.NewZone(ctx, "example", &network.ZoneArgs{
// 			Gateways: pulumi.StringArray{
// 				pulumi.String("1.2.3.4/24"),
// 				pulumi.String("2.3.4.5-2.3.4.15"),
// 			},
// 			Proxies: pulumi.StringArray{
// 				pulumi.String("2.2.3.4/24"),
// 				pulumi.String("3.3.4.5-3.3.4.15"),
// 			},
// 			Type: pulumi.String("IP"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Dynamic Tor Blocker
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := network.NewZone(ctx, "example", &network.ZoneArgs{
// 			DynamicProxyType: pulumi.String("TorAnonymizer"),
// 			Type:             pulumi.String("DYNAMIC"),
// 			Usage:            pulumi.String("BLOCKLIST"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Okta Network Zone can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:network/zone:Zone example <zone id>
// ```
type Zone struct {
	pulumi.CustomResourceState

	// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
	Asns pulumi.StringArrayOutput `pulumi:"asns"`
	// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayOutput `pulumi:"dynamicLocations"`
	// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
	DynamicProxyType pulumi.StringPtrOutput `pulumi:"dynamicProxyType"`
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
	Proxies pulumi.StringArrayOutput `pulumi:"proxies"`
	// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
	Type pulumi.StringOutput `pulumi:"type"`
	// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
	Usage pulumi.StringPtrOutput `pulumi:"usage"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Zone
	err := ctx.RegisterResource("okta:network/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("okta:network/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
	Asns []string `pulumi:"asns"`
	// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations []string `pulumi:"dynamicLocations"`
	// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
	DynamicProxyType *string `pulumi:"dynamicProxyType"`
	// Array of values in CIDR/range form.
	Gateways []string `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name *string `pulumi:"name"`
	// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
	Proxies []string `pulumi:"proxies"`
	// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
	Type *string `pulumi:"type"`
	// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
	Usage *string `pulumi:"usage"`
}

type ZoneState struct {
	// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
	Asns pulumi.StringArrayInput
	// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayInput
	// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
	DynamicProxyType pulumi.StringPtrInput
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayInput
	// Name of the Network Zone Resource.
	Name pulumi.StringPtrInput
	// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
	Proxies pulumi.StringArrayInput
	// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
	Type pulumi.StringPtrInput
	// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
	Usage pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
	Asns []string `pulumi:"asns"`
	// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations []string `pulumi:"dynamicLocations"`
	// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
	DynamicProxyType *string `pulumi:"dynamicProxyType"`
	// Array of values in CIDR/range form.
	Gateways []string `pulumi:"gateways"`
	// Name of the Network Zone Resource.
	Name *string `pulumi:"name"`
	// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
	Proxies []string `pulumi:"proxies"`
	// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
	Type string `pulumi:"type"`
	// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
	Usage *string `pulumi:"usage"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
	Asns pulumi.StringArrayInput
	// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
	DynamicLocations pulumi.StringArrayInput
	// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
	DynamicProxyType pulumi.StringPtrInput
	// Array of values in CIDR/range form.
	Gateways pulumi.StringArrayInput
	// Name of the Network Zone Resource.
	Name pulumi.StringPtrInput
	// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
	Proxies pulumi.StringArrayInput
	// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
	Type pulumi.StringInput
	// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
	Usage pulumi.StringPtrInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//          ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//          ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
