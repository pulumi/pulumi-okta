// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Password Policy Rule. This resource allows you to create and configure a Password Policy Rule.
//
// ## Import
//
// ```sh
// $ pulumi import okta:policy/rulePassword:RulePassword example <policy_id>/<rule_id>
// ```
type RulePassword struct {
	pulumi.CustomResourceState

	// Policy Rule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordChange pulumi.StringPtrOutput `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default: `DENY`
	PasswordUnlock pulumi.StringPtrOutput `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewRulePassword registers a new resource with the given unique name, arguments, and options.
func NewRulePassword(ctx *pulumi.Context,
	name string, args *RulePasswordArgs, opts ...pulumi.ResourceOption) (*RulePassword, error) {
	if args == nil {
		args = &RulePasswordArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RulePassword
	err := ctx.RegisterResource("okta:policy/rulePassword:RulePassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRulePassword gets an existing RulePassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRulePassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RulePasswordState, opts ...pulumi.ResourceOption) (*RulePassword, error) {
	var resource RulePassword
	err := ctx.ReadResource("okta:policy/rulePassword:RulePassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RulePassword resources.
type rulePasswordState struct {
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection *string `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordChange *string `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordReset *string `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default: `DENY`
	PasswordUnlock *string `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type RulePasswordState struct {
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayInput
	// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordChange pulumi.StringPtrInput
	// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordReset pulumi.StringPtrInput
	// Allow or deny a user to unlock. Default: `DENY`
	PasswordUnlock pulumi.StringPtrInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RulePasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*rulePasswordState)(nil)).Elem()
}

type rulePasswordArgs struct {
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection *string `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordChange *string `pulumi:"passwordChange"`
	// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordReset *string `pulumi:"passwordReset"`
	// Allow or deny a user to unlock. Default: `DENY`
	PasswordUnlock *string `pulumi:"passwordUnlock"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a RulePassword resource.
type RulePasswordArgs struct {
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayInput
	// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordChange pulumi.StringPtrInput
	// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
	PasswordReset pulumi.StringPtrInput
	// Allow or deny a user to unlock. Default: `DENY`
	PasswordUnlock pulumi.StringPtrInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RulePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rulePasswordArgs)(nil)).Elem()
}

type RulePasswordInput interface {
	pulumi.Input

	ToRulePasswordOutput() RulePasswordOutput
	ToRulePasswordOutputWithContext(ctx context.Context) RulePasswordOutput
}

func (*RulePassword) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePassword)(nil)).Elem()
}

func (i *RulePassword) ToRulePasswordOutput() RulePasswordOutput {
	return i.ToRulePasswordOutputWithContext(context.Background())
}

func (i *RulePassword) ToRulePasswordOutputWithContext(ctx context.Context) RulePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePasswordOutput)
}

// RulePasswordArrayInput is an input type that accepts RulePasswordArray and RulePasswordArrayOutput values.
// You can construct a concrete instance of `RulePasswordArrayInput` via:
//
//	RulePasswordArray{ RulePasswordArgs{...} }
type RulePasswordArrayInput interface {
	pulumi.Input

	ToRulePasswordArrayOutput() RulePasswordArrayOutput
	ToRulePasswordArrayOutputWithContext(context.Context) RulePasswordArrayOutput
}

type RulePasswordArray []RulePasswordInput

func (RulePasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RulePassword)(nil)).Elem()
}

func (i RulePasswordArray) ToRulePasswordArrayOutput() RulePasswordArrayOutput {
	return i.ToRulePasswordArrayOutputWithContext(context.Background())
}

func (i RulePasswordArray) ToRulePasswordArrayOutputWithContext(ctx context.Context) RulePasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePasswordArrayOutput)
}

// RulePasswordMapInput is an input type that accepts RulePasswordMap and RulePasswordMapOutput values.
// You can construct a concrete instance of `RulePasswordMapInput` via:
//
//	RulePasswordMap{ "key": RulePasswordArgs{...} }
type RulePasswordMapInput interface {
	pulumi.Input

	ToRulePasswordMapOutput() RulePasswordMapOutput
	ToRulePasswordMapOutputWithContext(context.Context) RulePasswordMapOutput
}

type RulePasswordMap map[string]RulePasswordInput

func (RulePasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RulePassword)(nil)).Elem()
}

func (i RulePasswordMap) ToRulePasswordMapOutput() RulePasswordMapOutput {
	return i.ToRulePasswordMapOutputWithContext(context.Background())
}

func (i RulePasswordMap) ToRulePasswordMapOutputWithContext(ctx context.Context) RulePasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePasswordMapOutput)
}

type RulePasswordOutput struct{ *pulumi.OutputState }

func (RulePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePassword)(nil)).Elem()
}

func (o RulePasswordOutput) ToRulePasswordOutput() RulePasswordOutput {
	return o
}

func (o RulePasswordOutput) ToRulePasswordOutputWithContext(ctx context.Context) RulePasswordOutput {
	return o
}

// Policy Rule Name
func (o RulePasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
func (o RulePasswordOutput) NetworkConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.NetworkConnection }).(pulumi.StringPtrOutput)
}

// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
func (o RulePasswordOutput) NetworkExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringArrayOutput { return v.NetworkExcludes }).(pulumi.StringArrayOutput)
}

// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
func (o RulePasswordOutput) NetworkIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringArrayOutput { return v.NetworkIncludes }).(pulumi.StringArrayOutput)
}

// Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
func (o RulePasswordOutput) PasswordChange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.PasswordChange }).(pulumi.StringPtrOutput)
}

// Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
func (o RulePasswordOutput) PasswordReset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.PasswordReset }).(pulumi.StringPtrOutput)
}

// Allow or deny a user to unlock. Default: `DENY`
func (o RulePasswordOutput) PasswordUnlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.PasswordUnlock }).(pulumi.StringPtrOutput)
}

// Policy ID of the Rule
func (o RulePasswordOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
func (o RulePasswordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
func (o RulePasswordOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Set of User IDs to Exclude
func (o RulePasswordOutput) UsersExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RulePassword) pulumi.StringArrayOutput { return v.UsersExcludeds }).(pulumi.StringArrayOutput)
}

type RulePasswordArrayOutput struct{ *pulumi.OutputState }

func (RulePasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RulePassword)(nil)).Elem()
}

func (o RulePasswordArrayOutput) ToRulePasswordArrayOutput() RulePasswordArrayOutput {
	return o
}

func (o RulePasswordArrayOutput) ToRulePasswordArrayOutputWithContext(ctx context.Context) RulePasswordArrayOutput {
	return o
}

func (o RulePasswordArrayOutput) Index(i pulumi.IntInput) RulePasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RulePassword {
		return vs[0].([]*RulePassword)[vs[1].(int)]
	}).(RulePasswordOutput)
}

type RulePasswordMapOutput struct{ *pulumi.OutputState }

func (RulePasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RulePassword)(nil)).Elem()
}

func (o RulePasswordMapOutput) ToRulePasswordMapOutput() RulePasswordMapOutput {
	return o
}

func (o RulePasswordMapOutput) ToRulePasswordMapOutputWithContext(ctx context.Context) RulePasswordMapOutput {
	return o
}

func (o RulePasswordMapOutput) MapIndex(k pulumi.StringInput) RulePasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RulePassword {
		return vs[0].(map[string]*RulePassword)[vs[1].(string)]
	}).(RulePasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulePasswordInput)(nil)).Elem(), &RulePassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePasswordArrayInput)(nil)).Elem(), RulePasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePasswordMapInput)(nil)).Elem(), RulePasswordMap{})
	pulumi.RegisterOutputType(RulePasswordOutput{})
	pulumi.RegisterOutputType(RulePasswordArrayOutput{})
	pulumi.RegisterOutputType(RulePasswordMapOutput{})
}
