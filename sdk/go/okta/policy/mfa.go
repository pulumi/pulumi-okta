// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an MFA Policy.
//
// This resource allows you to create and configure an MFA Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := policy.NewMfa(ctx, "example", &policy.MfaArgs{
// 			Description: pulumi.String("Example"),
// 			GroupsIncludeds: pulumi.StringArray{
// 				pulumi.Any(data.Okta_group.Everyone.Id),
// 			},
// 			OktaOtp: pulumi.StringMap{
// 				"enroll": pulumi.String("REQUIRED"),
// 			},
// 			Status: pulumi.String("ACTIVE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An MFA Policy can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:policy/mfa:Mfa example <policy id>
// ```
type Mfa struct {
	pulumi.CustomResourceState

	// Policy Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DUO MFA policy settings.
	Duo pulumi.StringMapOutput `pulumi:"duo"`
	// Fido U2F MFA policy settings.
	FidoU2f pulumi.StringMapOutput `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings.
	FidoWebauthn pulumi.StringMapOutput `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings.
	GoogleOtp pulumi.StringMapOutput `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings.
	Hotp pulumi.StringMapOutput `pulumi:"hotp"`
	// Policy Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Okta Call MFA policy settings.
	OktaCall pulumi.StringMapOutput `pulumi:"oktaCall"`
	// Okta Email MFA policy settings.
	OktaEmail pulumi.StringMapOutput `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings.
	OktaOtp pulumi.StringMapOutput `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings.
	OktaPassword pulumi.StringMapOutput `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings.
	OktaPush pulumi.StringMapOutput `pulumi:"oktaPush"`
	// Okta Question MFA policy settings.
	OktaQuestion pulumi.StringMapOutput `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings.
	OktaSms pulumi.StringMapOutput `pulumi:"oktaSms"`
	// Priority of the policy.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// RSA Token MFA policy settings.
	RsaToken pulumi.StringMapOutput `pulumi:"rsaToken"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Symantec VIP MFA policy settings.
	SymantecVip pulumi.StringMapOutput `pulumi:"symantecVip"`
	// Yubikey Token MFA policy settings.
	YubikeyToken pulumi.StringMapOutput `pulumi:"yubikeyToken"`
}

// NewMfa registers a new resource with the given unique name, arguments, and options.
func NewMfa(ctx *pulumi.Context,
	name string, args *MfaArgs, opts ...pulumi.ResourceOption) (*Mfa, error) {
	if args == nil {
		args = &MfaArgs{}
	}

	var resource Mfa
	err := ctx.RegisterResource("okta:policy/mfa:Mfa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfa gets an existing Mfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaState, opts ...pulumi.ResourceOption) (*Mfa, error) {
	var resource Mfa
	err := ctx.ReadResource("okta:policy/mfa:Mfa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mfa resources.
type mfaState struct {
	// Policy Description.
	Description *string `pulumi:"description"`
	// DUO MFA policy settings.
	Duo map[string]string `pulumi:"duo"`
	// Fido U2F MFA policy settings.
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings.
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings.
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings.
	Hotp map[string]string `pulumi:"hotp"`
	// Policy Name.
	Name *string `pulumi:"name"`
	// Okta Call MFA policy settings.
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings.
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings.
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings.
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings.
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings.
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings.
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Priority of the policy.
	Priority *int `pulumi:"priority"`
	// RSA Token MFA policy settings.
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Symantec VIP MFA policy settings.
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// Yubikey Token MFA policy settings.
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

type MfaState struct {
	// Policy Description.
	Description pulumi.StringPtrInput
	// DUO MFA policy settings.
	Duo pulumi.StringMapInput
	// Fido U2F MFA policy settings.
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings.
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings.
	GoogleOtp pulumi.StringMapInput
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayInput
	// HMAC-based One-Time Password MFA policy settings.
	Hotp pulumi.StringMapInput
	// Policy Name.
	Name pulumi.StringPtrInput
	// Okta Call MFA policy settings.
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings.
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings.
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings.
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings.
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings.
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings.
	OktaSms pulumi.StringMapInput
	// Priority of the policy.
	Priority pulumi.IntPtrInput
	// RSA Token MFA policy settings.
	RsaToken pulumi.StringMapInput
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Symantec VIP MFA policy settings.
	SymantecVip pulumi.StringMapInput
	// Yubikey Token MFA policy settings.
	YubikeyToken pulumi.StringMapInput
}

func (MfaState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaState)(nil)).Elem()
}

type mfaArgs struct {
	// Policy Description.
	Description *string `pulumi:"description"`
	// DUO MFA policy settings.
	Duo map[string]string `pulumi:"duo"`
	// Fido U2F MFA policy settings.
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings.
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings.
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings.
	Hotp map[string]string `pulumi:"hotp"`
	// Policy Name.
	Name *string `pulumi:"name"`
	// Okta Call MFA policy settings.
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings.
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings.
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings.
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings.
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings.
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings.
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Priority of the policy.
	Priority *int `pulumi:"priority"`
	// RSA Token MFA policy settings.
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Symantec VIP MFA policy settings.
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// Yubikey Token MFA policy settings.
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

// The set of arguments for constructing a Mfa resource.
type MfaArgs struct {
	// Policy Description.
	Description pulumi.StringPtrInput
	// DUO MFA policy settings.
	Duo pulumi.StringMapInput
	// Fido U2F MFA policy settings.
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings.
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings.
	GoogleOtp pulumi.StringMapInput
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayInput
	// HMAC-based One-Time Password MFA policy settings.
	Hotp pulumi.StringMapInput
	// Policy Name.
	Name pulumi.StringPtrInput
	// Okta Call MFA policy settings.
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings.
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings.
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings.
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings.
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings.
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings.
	OktaSms pulumi.StringMapInput
	// Priority of the policy.
	Priority pulumi.IntPtrInput
	// RSA Token MFA policy settings.
	RsaToken pulumi.StringMapInput
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Symantec VIP MFA policy settings.
	SymantecVip pulumi.StringMapInput
	// Yubikey Token MFA policy settings.
	YubikeyToken pulumi.StringMapInput
}

func (MfaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaArgs)(nil)).Elem()
}

type MfaInput interface {
	pulumi.Input

	ToMfaOutput() MfaOutput
	ToMfaOutputWithContext(ctx context.Context) MfaOutput
}

func (*Mfa) ElementType() reflect.Type {
	return reflect.TypeOf((*Mfa)(nil))
}

func (i *Mfa) ToMfaOutput() MfaOutput {
	return i.ToMfaOutputWithContext(context.Background())
}

func (i *Mfa) ToMfaOutputWithContext(ctx context.Context) MfaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaOutput)
}

func (i *Mfa) ToMfaPtrOutput() MfaPtrOutput {
	return i.ToMfaPtrOutputWithContext(context.Background())
}

func (i *Mfa) ToMfaPtrOutputWithContext(ctx context.Context) MfaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPtrOutput)
}

type MfaPtrInput interface {
	pulumi.Input

	ToMfaPtrOutput() MfaPtrOutput
	ToMfaPtrOutputWithContext(ctx context.Context) MfaPtrOutput
}

type mfaPtrType MfaArgs

func (*mfaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Mfa)(nil))
}

func (i *mfaPtrType) ToMfaPtrOutput() MfaPtrOutput {
	return i.ToMfaPtrOutputWithContext(context.Background())
}

func (i *mfaPtrType) ToMfaPtrOutputWithContext(ctx context.Context) MfaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaPtrOutput)
}

// MfaArrayInput is an input type that accepts MfaArray and MfaArrayOutput values.
// You can construct a concrete instance of `MfaArrayInput` via:
//
//          MfaArray{ MfaArgs{...} }
type MfaArrayInput interface {
	pulumi.Input

	ToMfaArrayOutput() MfaArrayOutput
	ToMfaArrayOutputWithContext(context.Context) MfaArrayOutput
}

type MfaArray []MfaInput

func (MfaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mfa)(nil)).Elem()
}

func (i MfaArray) ToMfaArrayOutput() MfaArrayOutput {
	return i.ToMfaArrayOutputWithContext(context.Background())
}

func (i MfaArray) ToMfaArrayOutputWithContext(ctx context.Context) MfaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaArrayOutput)
}

// MfaMapInput is an input type that accepts MfaMap and MfaMapOutput values.
// You can construct a concrete instance of `MfaMapInput` via:
//
//          MfaMap{ "key": MfaArgs{...} }
type MfaMapInput interface {
	pulumi.Input

	ToMfaMapOutput() MfaMapOutput
	ToMfaMapOutputWithContext(context.Context) MfaMapOutput
}

type MfaMap map[string]MfaInput

func (MfaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mfa)(nil)).Elem()
}

func (i MfaMap) ToMfaMapOutput() MfaMapOutput {
	return i.ToMfaMapOutputWithContext(context.Background())
}

func (i MfaMap) ToMfaMapOutputWithContext(ctx context.Context) MfaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaMapOutput)
}

type MfaOutput struct{ *pulumi.OutputState }

func (MfaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mfa)(nil))
}

func (o MfaOutput) ToMfaOutput() MfaOutput {
	return o
}

func (o MfaOutput) ToMfaOutputWithContext(ctx context.Context) MfaOutput {
	return o
}

func (o MfaOutput) ToMfaPtrOutput() MfaPtrOutput {
	return o.ToMfaPtrOutputWithContext(context.Background())
}

func (o MfaOutput) ToMfaPtrOutputWithContext(ctx context.Context) MfaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mfa) *Mfa {
		return &v
	}).(MfaPtrOutput)
}

type MfaPtrOutput struct{ *pulumi.OutputState }

func (MfaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mfa)(nil))
}

func (o MfaPtrOutput) ToMfaPtrOutput() MfaPtrOutput {
	return o
}

func (o MfaPtrOutput) ToMfaPtrOutputWithContext(ctx context.Context) MfaPtrOutput {
	return o
}

func (o MfaPtrOutput) Elem() MfaOutput {
	return o.ApplyT(func(v *Mfa) Mfa {
		if v != nil {
			return *v
		}
		var ret Mfa
		return ret
	}).(MfaOutput)
}

type MfaArrayOutput struct{ *pulumi.OutputState }

func (MfaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Mfa)(nil))
}

func (o MfaArrayOutput) ToMfaArrayOutput() MfaArrayOutput {
	return o
}

func (o MfaArrayOutput) ToMfaArrayOutputWithContext(ctx context.Context) MfaArrayOutput {
	return o
}

func (o MfaArrayOutput) Index(i pulumi.IntInput) MfaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Mfa {
		return vs[0].([]Mfa)[vs[1].(int)]
	}).(MfaOutput)
}

type MfaMapOutput struct{ *pulumi.OutputState }

func (MfaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Mfa)(nil))
}

func (o MfaMapOutput) ToMfaMapOutput() MfaMapOutput {
	return o
}

func (o MfaMapOutput) ToMfaMapOutputWithContext(ctx context.Context) MfaMapOutput {
	return o
}

func (o MfaMapOutput) MapIndex(k pulumi.StringInput) MfaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Mfa {
		return vs[0].(map[string]Mfa)[vs[1].(string)]
	}).(MfaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaInput)(nil)).Elem(), &Mfa{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaPtrInput)(nil)).Elem(), &Mfa{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaArrayInput)(nil)).Elem(), MfaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaMapInput)(nil)).Elem(), MfaMap{})
	pulumi.RegisterOutputType(MfaOutput{})
	pulumi.RegisterOutputType(MfaPtrOutput{})
	pulumi.RegisterOutputType(MfaArrayOutput{})
	pulumi.RegisterOutputType(MfaMapOutput{})
}
