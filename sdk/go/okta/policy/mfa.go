// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an MFA Policy.
//
// This resource allows you to create and configure an MFA Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := policy.NewMfa(ctx, "classicExample", &policy.MfaArgs{
// 			Description: pulumi.String("Example MFA policy using Okta Classic engine with factors."),
// 			GroupsIncludeds: pulumi.StringArray{
// 				pulumi.Any(data.Okta_group.Everyone.Id),
// 			},
// 			IsOie: pulumi.Bool(false),
// 			OktaOtp: pulumi.StringMap{
// 				"enroll": pulumi.String("REQUIRED"),
// 			},
// 			Status: pulumi.String("ACTIVE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = policy.NewMfa(ctx, "oieExample", &policy.MfaArgs{
// 			Description: pulumi.String("Example MFA policy that uses Okta Identity Engine (OIE) with authenticators"),
// 			GroupsIncludeds: pulumi.StringArray{
// 				pulumi.Any(data.Okta_group.Everyone.Id),
// 			},
// 			IsOie: pulumi.Bool(true),
// 			OktaVerify: pulumi.StringMap{
// 				"enroll": pulumi.String("REQUIRED"),
// 			},
// 			Status: pulumi.String("ACTIVE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An MFA Policy can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:policy/mfa:Mfa example <policy id>
// ```
type Mfa struct {
	pulumi.CustomResourceState

	// Policy Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapOutput `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapOutput `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapOutput `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapOutput `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapOutput `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapOutput `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrOutput `pulumi:"isOie"`
	// Policy Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapOutput `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapOutput `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapOutput `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapOutput `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapOutput `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapOutput `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapOutput `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapOutput `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapOutput `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapOutput `pulumi:"phoneNumber"`
	// Priority of the policy.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapOutput `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapOutput `pulumi:"securityQuestion"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapOutput `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapOutput `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapOutput `pulumi:"yubikeyToken"`
}

// NewMfa registers a new resource with the given unique name, arguments, and options.
func NewMfa(ctx *pulumi.Context,
	name string, args *MfaArgs, opts ...pulumi.ResourceOption) (*Mfa, error) {
	if args == nil {
		args = &MfaArgs{}
	}

	var resource Mfa
	err := ctx.RegisterResource("okta:policy/mfa:Mfa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfa gets an existing Mfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaState, opts ...pulumi.ResourceOption) (*Mfa, error) {
	var resource Mfa
	err := ctx.ReadResource("okta:policy/mfa:Mfa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mfa resources.
type mfaState struct {
	// Policy Description.
	Description *string `pulumi:"description"`
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo map[string]string `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp map[string]string `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp map[string]string `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie *bool `pulumi:"isOie"`
	// Policy Name.
	Name *string `pulumi:"name"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify map[string]string `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa map[string]string `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber map[string]string `pulumi:"phoneNumber"`
	// Priority of the policy.
	Priority *int `pulumi:"priority"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn map[string]string `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

type MfaState struct {
	// Policy Description.
	Description pulumi.StringPtrInput
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapInput
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapInput
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapInput
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayInput
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapInput
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrInput
	// Policy Name.
	Name pulumi.StringPtrInput
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapInput
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapInput
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapInput
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapInput
	// Priority of the policy.
	Priority pulumi.IntPtrInput
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapInput
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapInput
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapInput
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapInput
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapInput
}

func (MfaState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaState)(nil)).Elem()
}

type mfaArgs struct {
	// Policy Description.
	Description *string `pulumi:"description"`
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo map[string]string `pulumi:"duo"`
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp map[string]string `pulumi:"externalIdp"`
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f map[string]string `pulumi:"fidoU2f"`
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn map[string]string `pulumi:"fidoWebauthn"`
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp map[string]string `pulumi:"googleOtp"`
	// List of Group IDs to Include.
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp map[string]string `pulumi:"hotp"`
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie *bool `pulumi:"isOie"`
	// Policy Name.
	Name *string `pulumi:"name"`
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall map[string]string `pulumi:"oktaCall"`
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail map[string]string `pulumi:"oktaEmail"`
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp map[string]string `pulumi:"oktaOtp"`
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword map[string]string `pulumi:"oktaPassword"`
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush map[string]string `pulumi:"oktaPush"`
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion map[string]string `pulumi:"oktaQuestion"`
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms map[string]string `pulumi:"oktaSms"`
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify map[string]string `pulumi:"oktaVerify"`
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa map[string]string `pulumi:"onpremMfa"`
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber map[string]string `pulumi:"phoneNumber"`
	// Priority of the policy.
	Priority *int `pulumi:"priority"`
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken map[string]string `pulumi:"rsaToken"`
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion map[string]string `pulumi:"securityQuestion"`
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip map[string]string `pulumi:"symantecVip"`
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn map[string]string `pulumi:"webauthn"`
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken map[string]string `pulumi:"yubikeyToken"`
}

// The set of arguments for constructing a Mfa resource.
type MfaArgs struct {
	// Policy Description.
	Description pulumi.StringPtrInput
	// DUO MFA policy settings (✓ Classic, ✓ OIE).
	Duo pulumi.StringMapInput
	// External IDP MFA policy settings (✓ OIE).
	ExternalIdp pulumi.StringMapInput
	// Fido U2F MFA policy settings (✓ Classic).
	FidoU2f pulumi.StringMapInput
	// Fido Web Authn MFA policy settings (✓ Classic).
	FidoWebauthn pulumi.StringMapInput
	// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
	GoogleOtp pulumi.StringMapInput
	// List of Group IDs to Include.
	GroupsIncludeds pulumi.StringArrayInput
	// HMAC-based One-Time Password MFA policy settings (✓ Classic).
	Hotp pulumi.StringMapInput
	// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
	// > **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
	IsOie pulumi.BoolPtrInput
	// Policy Name.
	Name pulumi.StringPtrInput
	// Okta Call MFA policy settings (✓ Classic).
	OktaCall pulumi.StringMapInput
	// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
	OktaEmail pulumi.StringMapInput
	// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
	OktaOtp pulumi.StringMapInput
	// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
	OktaPassword pulumi.StringMapInput
	// Okta Push MFA policy settings (✓ Classic).
	OktaPush pulumi.StringMapInput
	// Okta Question MFA policy settings (✓ Classic).
	OktaQuestion pulumi.StringMapInput
	// Okta SMS MFA policy settings (✓ Classic).
	OktaSms pulumi.StringMapInput
	// Okta Verify MFA policy settings (✓ OIE).
	OktaVerify pulumi.StringMapInput
	// On-Prem MFA MFA policy settings (✓ OIE).
	OnpremMfa pulumi.StringMapInput
	// Phone Number MFA policy settings (✓ OIE).
	PhoneNumber pulumi.StringMapInput
	// Priority of the policy.
	Priority pulumi.IntPtrInput
	// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
	RsaToken pulumi.StringMapInput
	// Security Question MFA policy settings (✓ OIE).
	SecurityQuestion pulumi.StringMapInput
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Symantec VIP MFA policy settings (✓ Classic).
	SymantecVip pulumi.StringMapInput
	// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
	Webauthn pulumi.StringMapInput
	// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
	YubikeyToken pulumi.StringMapInput
}

func (MfaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaArgs)(nil)).Elem()
}

type MfaInput interface {
	pulumi.Input

	ToMfaOutput() MfaOutput
	ToMfaOutputWithContext(ctx context.Context) MfaOutput
}

func (*Mfa) ElementType() reflect.Type {
	return reflect.TypeOf((**Mfa)(nil)).Elem()
}

func (i *Mfa) ToMfaOutput() MfaOutput {
	return i.ToMfaOutputWithContext(context.Background())
}

func (i *Mfa) ToMfaOutputWithContext(ctx context.Context) MfaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaOutput)
}

// MfaArrayInput is an input type that accepts MfaArray and MfaArrayOutput values.
// You can construct a concrete instance of `MfaArrayInput` via:
//
//          MfaArray{ MfaArgs{...} }
type MfaArrayInput interface {
	pulumi.Input

	ToMfaArrayOutput() MfaArrayOutput
	ToMfaArrayOutputWithContext(context.Context) MfaArrayOutput
}

type MfaArray []MfaInput

func (MfaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mfa)(nil)).Elem()
}

func (i MfaArray) ToMfaArrayOutput() MfaArrayOutput {
	return i.ToMfaArrayOutputWithContext(context.Background())
}

func (i MfaArray) ToMfaArrayOutputWithContext(ctx context.Context) MfaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaArrayOutput)
}

// MfaMapInput is an input type that accepts MfaMap and MfaMapOutput values.
// You can construct a concrete instance of `MfaMapInput` via:
//
//          MfaMap{ "key": MfaArgs{...} }
type MfaMapInput interface {
	pulumi.Input

	ToMfaMapOutput() MfaMapOutput
	ToMfaMapOutputWithContext(context.Context) MfaMapOutput
}

type MfaMap map[string]MfaInput

func (MfaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mfa)(nil)).Elem()
}

func (i MfaMap) ToMfaMapOutput() MfaMapOutput {
	return i.ToMfaMapOutputWithContext(context.Background())
}

func (i MfaMap) ToMfaMapOutputWithContext(ctx context.Context) MfaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaMapOutput)
}

type MfaOutput struct{ *pulumi.OutputState }

func (MfaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mfa)(nil)).Elem()
}

func (o MfaOutput) ToMfaOutput() MfaOutput {
	return o
}

func (o MfaOutput) ToMfaOutputWithContext(ctx context.Context) MfaOutput {
	return o
}

type MfaArrayOutput struct{ *pulumi.OutputState }

func (MfaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mfa)(nil)).Elem()
}

func (o MfaArrayOutput) ToMfaArrayOutput() MfaArrayOutput {
	return o
}

func (o MfaArrayOutput) ToMfaArrayOutputWithContext(ctx context.Context) MfaArrayOutput {
	return o
}

func (o MfaArrayOutput) Index(i pulumi.IntInput) MfaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mfa {
		return vs[0].([]*Mfa)[vs[1].(int)]
	}).(MfaOutput)
}

type MfaMapOutput struct{ *pulumi.OutputState }

func (MfaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mfa)(nil)).Elem()
}

func (o MfaMapOutput) ToMfaMapOutput() MfaMapOutput {
	return o
}

func (o MfaMapOutput) ToMfaMapOutputWithContext(ctx context.Context) MfaMapOutput {
	return o
}

func (o MfaMapOutput) MapIndex(k pulumi.StringInput) MfaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mfa {
		return vs[0].(map[string]*Mfa)[vs[1].(string)]
	}).(MfaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaInput)(nil)).Elem(), &Mfa{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaArrayInput)(nil)).Elem(), MfaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaMapInput)(nil)).Elem(), MfaMap{})
	pulumi.RegisterOutputType(MfaOutput{})
	pulumi.RegisterOutputType(MfaArrayOutput{})
	pulumi.RegisterOutputType(MfaMapOutput{})
}
