// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `riscLevel`
// to an empty string, since this feature is not enabled.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := policy.NewSignon(ctx, "test", &policy.SignonArgs{
// 			Status:      pulumi.String("ACTIVE"),
// 			Description: pulumi.String("Example Policy"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		newCity, err := okta.LookupBehaviour(ctx, &GetBehaviourArgs{
// 			Name: pulumi.StringRef("New City"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = policy.NewRuleSignon(ctx, "example", &policy.RuleSignonArgs{
// 			Access:            pulumi.String("CHALLENGE"),
// 			Authtype:          pulumi.String("RADIUS"),
// 			NetworkConnection: pulumi.String("ANYWHERE"),
// 			PolicyId:          pulumi.Any(okta_policy_signon.Example.Id),
// 			Status:            pulumi.String("ACTIVE"),
// 			RiscLevel:         pulumi.String("HIGH"),
// 			Behaviors: pulumi.StringArray{
// 				pulumi.String(newCity.Id),
// 			},
// 			FactorSequences: policy.RuleSignonFactorSequenceArray{
// 				&policy.RuleSignonFactorSequenceArgs{
// 					PrimaryCriteriaFactorType: pulumi.String("token:hotp"),
// 					PrimaryCriteriaProvider:   pulumi.String("CUSTOM"),
// 					SecondaryCriterias: policy.RuleSignonFactorSequenceSecondaryCriteriaArray{
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("token:software:totp"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("push"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("password"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("question"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("sms"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("token:software:totp"),
// 							Provider:   pulumi.String("GOOGLE"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("email"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("call"),
// 							Provider:   pulumi.String("OKTA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("webauthn"),
// 							Provider:   pulumi.String("FIDO"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("token"),
// 							Provider:   pulumi.String("RSA"),
// 						},
// 						&policy.RuleSignonFactorSequenceSecondaryCriteriaArgs{
// 							FactorType: pulumi.String("token"),
// 							Provider:   pulumi.String("SYMANTEC"),
// 						},
// 					},
// 				},
// 				&policy.RuleSignonFactorSequenceArgs{
// 					PrimaryCriteriaFactorType: pulumi.String("token:software:totp"),
// 					PrimaryCriteriaProvider:   pulumi.String("OKTA"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Policy Rule can be imported via the Policy and Rule ID.
//
// ```sh
//  $ pulumi import okta:policy/ruleSignon:RuleSignon example <policy id>/<rule id>
// ```
type RuleSignon struct {
	pulumi.CustomResourceState

	// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
	Authtype pulumi.StringPtrOutput `pulumi:"authtype"`
	// List of behavior IDs.
	Behaviors pulumi.StringArrayOutput `pulumi:"behaviors"`
	// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
	FactorSequences RuleSignonFactorSequenceArrayOutput `pulumi:"factorSequences"`
	// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
	IdentityProvider pulumi.StringPtrOutput `pulumi:"identityProvider"`
	// When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
	IdentityProviderIds pulumi.StringArrayOutput `pulumi:"identityProviderIds"`
	// Elapsed time before the next MFA challenge.
	MfaLifetime pulumi.IntPtrOutput `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
	MfaPrompt pulumi.StringPtrOutput `pulumi:"mfaPrompt"`
	// Remember MFA device. The default `false`.
	MfaRememberDevice pulumi.BoolPtrOutput `pulumi:"mfaRememberDevice"`
	// Require MFA. By default is `false`.
	MfaRequired pulumi.BoolPtrOutput `pulumi:"mfaRequired"`
	// Policy Rule Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrOutput `pulumi:"policyid"`
	// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
	// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
	PrimaryFactor pulumi.StringOutput `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also
	// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
	RiscLevel pulumi.StringPtrOutput `pulumi:"riscLevel"`
	// Max minutes a session can be idle.,
	SessionIdle pulumi.IntPtrOutput `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrOutput `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
	SessionPersistent pulumi.BoolPtrOutput `pulumi:"sessionPersistent"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewRuleSignon registers a new resource with the given unique name, arguments, and options.
func NewRuleSignon(ctx *pulumi.Context,
	name string, args *RuleSignonArgs, opts ...pulumi.ResourceOption) (*RuleSignon, error) {
	if args == nil {
		args = &RuleSignonArgs{}
	}

	var resource RuleSignon
	err := ctx.RegisterResource("okta:policy/ruleSignon:RuleSignon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleSignon gets an existing RuleSignon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleSignon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleSignonState, opts ...pulumi.ResourceOption) (*RuleSignon, error) {
	var resource RuleSignon
	err := ctx.ReadResource("okta:policy/ruleSignon:RuleSignon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleSignon resources.
type ruleSignonState struct {
	// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
	Authtype *string `pulumi:"authtype"`
	// List of behavior IDs.
	Behaviors []string `pulumi:"behaviors"`
	// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
	FactorSequences []RuleSignonFactorSequence `pulumi:"factorSequences"`
	// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
	IdentityProvider *string `pulumi:"identityProvider"`
	// When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
	IdentityProviderIds []string `pulumi:"identityProviderIds"`
	// Elapsed time before the next MFA challenge.
	MfaLifetime *int `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
	MfaPrompt *string `pulumi:"mfaPrompt"`
	// Remember MFA device. The default `false`.
	MfaRememberDevice *bool `pulumi:"mfaRememberDevice"`
	// Require MFA. By default is `false`.
	MfaRequired *bool `pulumi:"mfaRequired"`
	// Policy Rule Name.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
	// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
	PrimaryFactor *string `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also
	// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
	RiscLevel *string `pulumi:"riscLevel"`
	// Max minutes a session can be idle.,
	SessionIdle *int `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime *int `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
	SessionPersistent *bool `pulumi:"sessionPersistent"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type RuleSignonState struct {
	// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
	Authtype pulumi.StringPtrInput
	// List of behavior IDs.
	Behaviors pulumi.StringArrayInput
	// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
	FactorSequences RuleSignonFactorSequenceArrayInput
	// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
	IdentityProvider pulumi.StringPtrInput
	// When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
	IdentityProviderIds pulumi.StringArrayInput
	// Elapsed time before the next MFA challenge.
	MfaLifetime pulumi.IntPtrInput
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
	MfaPrompt pulumi.StringPtrInput
	// Remember MFA device. The default `false`.
	MfaRememberDevice pulumi.BoolPtrInput
	// Require MFA. By default is `false`.
	MfaRequired pulumi.BoolPtrInput
	// Policy Rule Name.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID.
	PolicyId pulumi.StringPtrInput
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
	// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
	PrimaryFactor pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also
	// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
	RiscLevel pulumi.StringPtrInput
	// Max minutes a session can be idle.,
	SessionIdle pulumi.IntPtrInput
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrInput
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
	SessionPersistent pulumi.BoolPtrInput
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleSignonState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSignonState)(nil)).Elem()
}

type ruleSignonArgs struct {
	// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
	Access *string `pulumi:"access"`
	// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
	Authtype *string `pulumi:"authtype"`
	// List of behavior IDs.
	Behaviors []string `pulumi:"behaviors"`
	// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
	FactorSequences []RuleSignonFactorSequence `pulumi:"factorSequences"`
	// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
	IdentityProvider *string `pulumi:"identityProvider"`
	// When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
	IdentityProviderIds []string `pulumi:"identityProviderIds"`
	// Elapsed time before the next MFA challenge.
	MfaLifetime *int `pulumi:"mfaLifetime"`
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
	MfaPrompt *string `pulumi:"mfaPrompt"`
	// Remember MFA device. The default `false`.
	MfaRememberDevice *bool `pulumi:"mfaRememberDevice"`
	// Require MFA. By default is `false`.
	MfaRequired *bool `pulumi:"mfaRequired"`
	// Policy Rule Name.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
	// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
	PrimaryFactor *string `pulumi:"primaryFactor"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also
	// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
	RiscLevel *string `pulumi:"riscLevel"`
	// Max minutes a session can be idle.,
	SessionIdle *int `pulumi:"sessionIdle"`
	// Max minutes a session is active: Disable = 0.
	SessionLifetime *int `pulumi:"sessionLifetime"`
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
	SessionPersistent *bool `pulumi:"sessionPersistent"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a RuleSignon resource.
type RuleSignonArgs struct {
	// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
	Access pulumi.StringPtrInput
	// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
	Authtype pulumi.StringPtrInput
	// List of behavior IDs.
	Behaviors pulumi.StringArrayInput
	// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
	FactorSequences RuleSignonFactorSequenceArrayInput
	// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
	IdentityProvider pulumi.StringPtrInput
	// When identityProvider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
	IdentityProviderIds pulumi.StringArrayInput
	// Elapsed time before the next MFA challenge.
	MfaLifetime pulumi.IntPtrInput
	// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
	MfaPrompt pulumi.StringPtrInput
	// Remember MFA device. The default `false`.
	MfaRememberDevice pulumi.BoolPtrInput
	// Require MFA. By default is `false`.
	MfaRequired pulumi.BoolPtrInput
	// Policy Rule Name.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID.
	PolicyId pulumi.StringPtrInput
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
	// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
	PrimaryFactor pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also
	// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
	RiscLevel pulumi.StringPtrInput
	// Max minutes a session can be idle.,
	SessionIdle pulumi.IntPtrInput
	// Max minutes a session is active: Disable = 0.
	SessionLifetime pulumi.IntPtrInput
	// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
	SessionPersistent pulumi.BoolPtrInput
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// The list of user IDs that would be excluded when rules are processed.
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleSignonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSignonArgs)(nil)).Elem()
}

type RuleSignonInput interface {
	pulumi.Input

	ToRuleSignonOutput() RuleSignonOutput
	ToRuleSignonOutputWithContext(ctx context.Context) RuleSignonOutput
}

func (*RuleSignon) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSignon)(nil)).Elem()
}

func (i *RuleSignon) ToRuleSignonOutput() RuleSignonOutput {
	return i.ToRuleSignonOutputWithContext(context.Background())
}

func (i *RuleSignon) ToRuleSignonOutputWithContext(ctx context.Context) RuleSignonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSignonOutput)
}

// RuleSignonArrayInput is an input type that accepts RuleSignonArray and RuleSignonArrayOutput values.
// You can construct a concrete instance of `RuleSignonArrayInput` via:
//
//          RuleSignonArray{ RuleSignonArgs{...} }
type RuleSignonArrayInput interface {
	pulumi.Input

	ToRuleSignonArrayOutput() RuleSignonArrayOutput
	ToRuleSignonArrayOutputWithContext(context.Context) RuleSignonArrayOutput
}

type RuleSignonArray []RuleSignonInput

func (RuleSignonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleSignon)(nil)).Elem()
}

func (i RuleSignonArray) ToRuleSignonArrayOutput() RuleSignonArrayOutput {
	return i.ToRuleSignonArrayOutputWithContext(context.Background())
}

func (i RuleSignonArray) ToRuleSignonArrayOutputWithContext(ctx context.Context) RuleSignonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSignonArrayOutput)
}

// RuleSignonMapInput is an input type that accepts RuleSignonMap and RuleSignonMapOutput values.
// You can construct a concrete instance of `RuleSignonMapInput` via:
//
//          RuleSignonMap{ "key": RuleSignonArgs{...} }
type RuleSignonMapInput interface {
	pulumi.Input

	ToRuleSignonMapOutput() RuleSignonMapOutput
	ToRuleSignonMapOutputWithContext(context.Context) RuleSignonMapOutput
}

type RuleSignonMap map[string]RuleSignonInput

func (RuleSignonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleSignon)(nil)).Elem()
}

func (i RuleSignonMap) ToRuleSignonMapOutput() RuleSignonMapOutput {
	return i.ToRuleSignonMapOutputWithContext(context.Background())
}

func (i RuleSignonMap) ToRuleSignonMapOutputWithContext(ctx context.Context) RuleSignonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSignonMapOutput)
}

type RuleSignonOutput struct{ *pulumi.OutputState }

func (RuleSignonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSignon)(nil)).Elem()
}

func (o RuleSignonOutput) ToRuleSignonOutput() RuleSignonOutput {
	return o
}

func (o RuleSignonOutput) ToRuleSignonOutputWithContext(ctx context.Context) RuleSignonOutput {
	return o
}

type RuleSignonArrayOutput struct{ *pulumi.OutputState }

func (RuleSignonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleSignon)(nil)).Elem()
}

func (o RuleSignonArrayOutput) ToRuleSignonArrayOutput() RuleSignonArrayOutput {
	return o
}

func (o RuleSignonArrayOutput) ToRuleSignonArrayOutputWithContext(ctx context.Context) RuleSignonArrayOutput {
	return o
}

func (o RuleSignonArrayOutput) Index(i pulumi.IntInput) RuleSignonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleSignon {
		return vs[0].([]*RuleSignon)[vs[1].(int)]
	}).(RuleSignonOutput)
}

type RuleSignonMapOutput struct{ *pulumi.OutputState }

func (RuleSignonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleSignon)(nil)).Elem()
}

func (o RuleSignonMapOutput) ToRuleSignonMapOutput() RuleSignonMapOutput {
	return o
}

func (o RuleSignonMapOutput) ToRuleSignonMapOutputWithContext(ctx context.Context) RuleSignonMapOutput {
	return o
}

func (o RuleSignonMapOutput) MapIndex(k pulumi.StringInput) RuleSignonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleSignon {
		return vs[0].(map[string]*RuleSignon)[vs[1].(string)]
	}).(RuleSignonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSignonInput)(nil)).Elem(), &RuleSignon{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSignonArrayInput)(nil)).Elem(), RuleSignonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSignonMapInput)(nil)).Elem(), RuleSignonMap{})
	pulumi.RegisterOutputType(RuleSignonOutput{})
	pulumi.RegisterOutputType(RuleSignonArrayOutput{})
	pulumi.RegisterOutputType(RuleSignonMapOutput{})
}
