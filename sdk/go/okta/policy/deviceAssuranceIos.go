// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DeviceAssuranceIos struct {
	pulumi.CustomResourceState

	// Created by
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Created date
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// The device jailbreak. Only for android and iOS platform
	Jailbreak pulumi.BoolPtrOutput `pulumi:"jailbreak"`
	// Last update
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// Last updated by
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// Policy device assurance name
	Name pulumi.StringOutput `pulumi:"name"`
	// The device os minimum version
	OsVersion pulumi.StringPtrOutput `pulumi:"osVersion"`
	// Policy device assurance platform
	Platform pulumi.StringOutput `pulumi:"platform"`
	// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
	ScreenlockTypes pulumi.StringArrayOutput `pulumi:"screenlockTypes"`
}

// NewDeviceAssuranceIos registers a new resource with the given unique name, arguments, and options.
func NewDeviceAssuranceIos(ctx *pulumi.Context,
	name string, args *DeviceAssuranceIosArgs, opts ...pulumi.ResourceOption) (*DeviceAssuranceIos, error) {
	if args == nil {
		args = &DeviceAssuranceIosArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeviceAssuranceIos
	err := ctx.RegisterResource("okta:policy/deviceAssuranceIos:DeviceAssuranceIos", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceAssuranceIos gets an existing DeviceAssuranceIos resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceAssuranceIos(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceAssuranceIosState, opts ...pulumi.ResourceOption) (*DeviceAssuranceIos, error) {
	var resource DeviceAssuranceIos
	err := ctx.ReadResource("okta:policy/deviceAssuranceIos:DeviceAssuranceIos", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceAssuranceIos resources.
type deviceAssuranceIosState struct {
	// Created by
	CreatedBy *string `pulumi:"createdBy"`
	// Created date
	CreatedDate *string `pulumi:"createdDate"`
	// The device jailbreak. Only for android and iOS platform
	Jailbreak *bool `pulumi:"jailbreak"`
	// Last update
	LastUpdate *string `pulumi:"lastUpdate"`
	// Last updated by
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// Policy device assurance name
	Name *string `pulumi:"name"`
	// The device os minimum version
	OsVersion *string `pulumi:"osVersion"`
	// Policy device assurance platform
	Platform *string `pulumi:"platform"`
	// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
	ScreenlockTypes []string `pulumi:"screenlockTypes"`
}

type DeviceAssuranceIosState struct {
	// Created by
	CreatedBy pulumi.StringPtrInput
	// Created date
	CreatedDate pulumi.StringPtrInput
	// The device jailbreak. Only for android and iOS platform
	Jailbreak pulumi.BoolPtrInput
	// Last update
	LastUpdate pulumi.StringPtrInput
	// Last updated by
	LastUpdatedBy pulumi.StringPtrInput
	// Policy device assurance name
	Name pulumi.StringPtrInput
	// The device os minimum version
	OsVersion pulumi.StringPtrInput
	// Policy device assurance platform
	Platform pulumi.StringPtrInput
	// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
	ScreenlockTypes pulumi.StringArrayInput
}

func (DeviceAssuranceIosState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceAssuranceIosState)(nil)).Elem()
}

type deviceAssuranceIosArgs struct {
	// The device jailbreak. Only for android and iOS platform
	Jailbreak *bool `pulumi:"jailbreak"`
	// Policy device assurance name
	Name *string `pulumi:"name"`
	// The device os minimum version
	OsVersion *string `pulumi:"osVersion"`
	// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
	ScreenlockTypes []string `pulumi:"screenlockTypes"`
}

// The set of arguments for constructing a DeviceAssuranceIos resource.
type DeviceAssuranceIosArgs struct {
	// The device jailbreak. Only for android and iOS platform
	Jailbreak pulumi.BoolPtrInput
	// Policy device assurance name
	Name pulumi.StringPtrInput
	// The device os minimum version
	OsVersion pulumi.StringPtrInput
	// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
	ScreenlockTypes pulumi.StringArrayInput
}

func (DeviceAssuranceIosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceAssuranceIosArgs)(nil)).Elem()
}

type DeviceAssuranceIosInput interface {
	pulumi.Input

	ToDeviceAssuranceIosOutput() DeviceAssuranceIosOutput
	ToDeviceAssuranceIosOutputWithContext(ctx context.Context) DeviceAssuranceIosOutput
}

func (*DeviceAssuranceIos) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAssuranceIos)(nil)).Elem()
}

func (i *DeviceAssuranceIos) ToDeviceAssuranceIosOutput() DeviceAssuranceIosOutput {
	return i.ToDeviceAssuranceIosOutputWithContext(context.Background())
}

func (i *DeviceAssuranceIos) ToDeviceAssuranceIosOutputWithContext(ctx context.Context) DeviceAssuranceIosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAssuranceIosOutput)
}

func (i *DeviceAssuranceIos) ToOutput(ctx context.Context) pulumix.Output[*DeviceAssuranceIos] {
	return pulumix.Output[*DeviceAssuranceIos]{
		OutputState: i.ToDeviceAssuranceIosOutputWithContext(ctx).OutputState,
	}
}

// DeviceAssuranceIosArrayInput is an input type that accepts DeviceAssuranceIosArray and DeviceAssuranceIosArrayOutput values.
// You can construct a concrete instance of `DeviceAssuranceIosArrayInput` via:
//
//	DeviceAssuranceIosArray{ DeviceAssuranceIosArgs{...} }
type DeviceAssuranceIosArrayInput interface {
	pulumi.Input

	ToDeviceAssuranceIosArrayOutput() DeviceAssuranceIosArrayOutput
	ToDeviceAssuranceIosArrayOutputWithContext(context.Context) DeviceAssuranceIosArrayOutput
}

type DeviceAssuranceIosArray []DeviceAssuranceIosInput

func (DeviceAssuranceIosArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceAssuranceIos)(nil)).Elem()
}

func (i DeviceAssuranceIosArray) ToDeviceAssuranceIosArrayOutput() DeviceAssuranceIosArrayOutput {
	return i.ToDeviceAssuranceIosArrayOutputWithContext(context.Background())
}

func (i DeviceAssuranceIosArray) ToDeviceAssuranceIosArrayOutputWithContext(ctx context.Context) DeviceAssuranceIosArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAssuranceIosArrayOutput)
}

func (i DeviceAssuranceIosArray) ToOutput(ctx context.Context) pulumix.Output[[]*DeviceAssuranceIos] {
	return pulumix.Output[[]*DeviceAssuranceIos]{
		OutputState: i.ToDeviceAssuranceIosArrayOutputWithContext(ctx).OutputState,
	}
}

// DeviceAssuranceIosMapInput is an input type that accepts DeviceAssuranceIosMap and DeviceAssuranceIosMapOutput values.
// You can construct a concrete instance of `DeviceAssuranceIosMapInput` via:
//
//	DeviceAssuranceIosMap{ "key": DeviceAssuranceIosArgs{...} }
type DeviceAssuranceIosMapInput interface {
	pulumi.Input

	ToDeviceAssuranceIosMapOutput() DeviceAssuranceIosMapOutput
	ToDeviceAssuranceIosMapOutputWithContext(context.Context) DeviceAssuranceIosMapOutput
}

type DeviceAssuranceIosMap map[string]DeviceAssuranceIosInput

func (DeviceAssuranceIosMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceAssuranceIos)(nil)).Elem()
}

func (i DeviceAssuranceIosMap) ToDeviceAssuranceIosMapOutput() DeviceAssuranceIosMapOutput {
	return i.ToDeviceAssuranceIosMapOutputWithContext(context.Background())
}

func (i DeviceAssuranceIosMap) ToDeviceAssuranceIosMapOutputWithContext(ctx context.Context) DeviceAssuranceIosMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAssuranceIosMapOutput)
}

func (i DeviceAssuranceIosMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeviceAssuranceIos] {
	return pulumix.Output[map[string]*DeviceAssuranceIos]{
		OutputState: i.ToDeviceAssuranceIosMapOutputWithContext(ctx).OutputState,
	}
}

type DeviceAssuranceIosOutput struct{ *pulumi.OutputState }

func (DeviceAssuranceIosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAssuranceIos)(nil)).Elem()
}

func (o DeviceAssuranceIosOutput) ToDeviceAssuranceIosOutput() DeviceAssuranceIosOutput {
	return o
}

func (o DeviceAssuranceIosOutput) ToDeviceAssuranceIosOutputWithContext(ctx context.Context) DeviceAssuranceIosOutput {
	return o
}

func (o DeviceAssuranceIosOutput) ToOutput(ctx context.Context) pulumix.Output[*DeviceAssuranceIos] {
	return pulumix.Output[*DeviceAssuranceIos]{
		OutputState: o.OutputState,
	}
}

// Created by
func (o DeviceAssuranceIosOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Created date
func (o DeviceAssuranceIosOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// The device jailbreak. Only for android and iOS platform
func (o DeviceAssuranceIosOutput) Jailbreak() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.BoolPtrOutput { return v.Jailbreak }).(pulumi.BoolPtrOutput)
}

// Last update
func (o DeviceAssuranceIosOutput) LastUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.LastUpdate }).(pulumi.StringOutput)
}

// Last updated by
func (o DeviceAssuranceIosOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// Policy device assurance name
func (o DeviceAssuranceIosOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The device os minimum version
func (o DeviceAssuranceIosOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringPtrOutput { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// Policy device assurance platform
func (o DeviceAssuranceIosOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
func (o DeviceAssuranceIosOutput) ScreenlockTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceAssuranceIos) pulumi.StringArrayOutput { return v.ScreenlockTypes }).(pulumi.StringArrayOutput)
}

type DeviceAssuranceIosArrayOutput struct{ *pulumi.OutputState }

func (DeviceAssuranceIosArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceAssuranceIos)(nil)).Elem()
}

func (o DeviceAssuranceIosArrayOutput) ToDeviceAssuranceIosArrayOutput() DeviceAssuranceIosArrayOutput {
	return o
}

func (o DeviceAssuranceIosArrayOutput) ToDeviceAssuranceIosArrayOutputWithContext(ctx context.Context) DeviceAssuranceIosArrayOutput {
	return o
}

func (o DeviceAssuranceIosArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DeviceAssuranceIos] {
	return pulumix.Output[[]*DeviceAssuranceIos]{
		OutputState: o.OutputState,
	}
}

func (o DeviceAssuranceIosArrayOutput) Index(i pulumi.IntInput) DeviceAssuranceIosOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceAssuranceIos {
		return vs[0].([]*DeviceAssuranceIos)[vs[1].(int)]
	}).(DeviceAssuranceIosOutput)
}

type DeviceAssuranceIosMapOutput struct{ *pulumi.OutputState }

func (DeviceAssuranceIosMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceAssuranceIos)(nil)).Elem()
}

func (o DeviceAssuranceIosMapOutput) ToDeviceAssuranceIosMapOutput() DeviceAssuranceIosMapOutput {
	return o
}

func (o DeviceAssuranceIosMapOutput) ToDeviceAssuranceIosMapOutputWithContext(ctx context.Context) DeviceAssuranceIosMapOutput {
	return o
}

func (o DeviceAssuranceIosMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeviceAssuranceIos] {
	return pulumix.Output[map[string]*DeviceAssuranceIos]{
		OutputState: o.OutputState,
	}
}

func (o DeviceAssuranceIosMapOutput) MapIndex(k pulumi.StringInput) DeviceAssuranceIosOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceAssuranceIos {
		return vs[0].(map[string]*DeviceAssuranceIos)[vs[1].(string)]
	}).(DeviceAssuranceIosOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAssuranceIosInput)(nil)).Elem(), &DeviceAssuranceIos{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAssuranceIosArrayInput)(nil)).Elem(), DeviceAssuranceIosArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAssuranceIosMapInput)(nil)).Elem(), DeviceAssuranceIosMap{})
	pulumi.RegisterOutputType(DeviceAssuranceIosOutput{})
	pulumi.RegisterOutputType(DeviceAssuranceIosArrayOutput{})
	pulumi.RegisterOutputType(DeviceAssuranceIosMapOutput{})
}
