// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Sign On Policy. This resource allows you to create and configure a Sign On Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := policy.NewSignon(ctx, "example", &policy.SignonArgs{
//				Name:        pulumi.String("example"),
//				Status:      pulumi.String("ACTIVE"),
//				Description: pulumi.String("Example"),
//				GroupsIncludeds: pulumi.StringArray{
//					everyone.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:policy/signon:Signon example &#60;policy id&#62;
// ```
type Signon struct {
	pulumi.CustomResourceState

	// Policy Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// Policy Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewSignon registers a new resource with the given unique name, arguments, and options.
func NewSignon(ctx *pulumi.Context,
	name string, args *SignonArgs, opts ...pulumi.ResourceOption) (*Signon, error) {
	if args == nil {
		args = &SignonArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Signon
	err := ctx.RegisterResource("okta:policy/signon:Signon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignon gets an existing Signon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignonState, opts ...pulumi.ResourceOption) (*Signon, error) {
	var resource Signon
	err := ctx.ReadResource("okta:policy/signon:Signon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Signon resources.
type signonState struct {
	// Policy Description
	Description *string `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
}

type SignonState struct {
	// Policy Description
	Description pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
}

func (SignonState) ElementType() reflect.Type {
	return reflect.TypeOf((*signonState)(nil)).Elem()
}

type signonArgs struct {
	// Policy Description
	Description *string `pulumi:"description"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Signon resource.
type SignonArgs struct {
	// Policy Description
	Description pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
}

func (SignonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signonArgs)(nil)).Elem()
}

type SignonInput interface {
	pulumi.Input

	ToSignonOutput() SignonOutput
	ToSignonOutputWithContext(ctx context.Context) SignonOutput
}

func (*Signon) ElementType() reflect.Type {
	return reflect.TypeOf((**Signon)(nil)).Elem()
}

func (i *Signon) ToSignonOutput() SignonOutput {
	return i.ToSignonOutputWithContext(context.Background())
}

func (i *Signon) ToSignonOutputWithContext(ctx context.Context) SignonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonOutput)
}

// SignonArrayInput is an input type that accepts SignonArray and SignonArrayOutput values.
// You can construct a concrete instance of `SignonArrayInput` via:
//
//	SignonArray{ SignonArgs{...} }
type SignonArrayInput interface {
	pulumi.Input

	ToSignonArrayOutput() SignonArrayOutput
	ToSignonArrayOutputWithContext(context.Context) SignonArrayOutput
}

type SignonArray []SignonInput

func (SignonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Signon)(nil)).Elem()
}

func (i SignonArray) ToSignonArrayOutput() SignonArrayOutput {
	return i.ToSignonArrayOutputWithContext(context.Background())
}

func (i SignonArray) ToSignonArrayOutputWithContext(ctx context.Context) SignonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonArrayOutput)
}

// SignonMapInput is an input type that accepts SignonMap and SignonMapOutput values.
// You can construct a concrete instance of `SignonMapInput` via:
//
//	SignonMap{ "key": SignonArgs{...} }
type SignonMapInput interface {
	pulumi.Input

	ToSignonMapOutput() SignonMapOutput
	ToSignonMapOutputWithContext(context.Context) SignonMapOutput
}

type SignonMap map[string]SignonInput

func (SignonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Signon)(nil)).Elem()
}

func (i SignonMap) ToSignonMapOutput() SignonMapOutput {
	return i.ToSignonMapOutputWithContext(context.Background())
}

func (i SignonMap) ToSignonMapOutputWithContext(ctx context.Context) SignonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignonMapOutput)
}

type SignonOutput struct{ *pulumi.OutputState }

func (SignonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Signon)(nil)).Elem()
}

func (o SignonOutput) ToSignonOutput() SignonOutput {
	return o
}

func (o SignonOutput) ToSignonOutputWithContext(ctx context.Context) SignonOutput {
	return o
}

// Policy Description
func (o SignonOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Signon) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of Group IDs to Include
func (o SignonOutput) GroupsIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Signon) pulumi.StringArrayOutput { return v.GroupsIncludeds }).(pulumi.StringArrayOutput)
}

// Policy Name
func (o SignonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Signon) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
func (o SignonOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Signon) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
func (o SignonOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Signon) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type SignonArrayOutput struct{ *pulumi.OutputState }

func (SignonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Signon)(nil)).Elem()
}

func (o SignonArrayOutput) ToSignonArrayOutput() SignonArrayOutput {
	return o
}

func (o SignonArrayOutput) ToSignonArrayOutputWithContext(ctx context.Context) SignonArrayOutput {
	return o
}

func (o SignonArrayOutput) Index(i pulumi.IntInput) SignonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Signon {
		return vs[0].([]*Signon)[vs[1].(int)]
	}).(SignonOutput)
}

type SignonMapOutput struct{ *pulumi.OutputState }

func (SignonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Signon)(nil)).Elem()
}

func (o SignonMapOutput) ToSignonMapOutput() SignonMapOutput {
	return o
}

func (o SignonMapOutput) ToSignonMapOutputWithContext(ctx context.Context) SignonMapOutput {
	return o
}

func (o SignonMapOutput) MapIndex(k pulumi.StringInput) SignonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Signon {
		return vs[0].(map[string]*Signon)[vs[1].(string)]
	}).(SignonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SignonInput)(nil)).Elem(), &Signon{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignonArrayInput)(nil)).Elem(), SignonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignonMapInput)(nil)).Elem(), SignonMap{})
	pulumi.RegisterOutputType(SignonOutput{})
	pulumi.RegisterOutputType(SignonArrayOutput{})
	pulumi.RegisterOutputType(SignonMapOutput{})
}
