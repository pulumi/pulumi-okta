// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an MFA Policy Rule. This resource allows you to create and configure an MFA Policy Rule.
//
// ## Import
//
// ```sh
// $ pulumi import okta:policy/ruleMfa:RuleMfa example <policy_id>/<rule_id>
// ```
type RuleMfa struct {
	pulumi.CustomResourceState

	// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppExcludes RuleMfaAppExcludeArrayOutput `pulumi:"appExcludes"`
	// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppIncludes RuleMfaAppIncludeArrayOutput `pulumi:"appIncludes"`
	// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
	Enroll pulumi.StringPtrOutput `pulumi:"enroll"`
	// Policy Rule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
	// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewRuleMfa registers a new resource with the given unique name, arguments, and options.
func NewRuleMfa(ctx *pulumi.Context,
	name string, args *RuleMfaArgs, opts ...pulumi.ResourceOption) (*RuleMfa, error) {
	if args == nil {
		args = &RuleMfaArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleMfa
	err := ctx.RegisterResource("okta:policy/ruleMfa:RuleMfa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleMfa gets an existing RuleMfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleMfa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleMfaState, opts ...pulumi.ResourceOption) (*RuleMfa, error) {
	var resource RuleMfa
	err := ctx.ReadResource("okta:policy/ruleMfa:RuleMfa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleMfa resources.
type ruleMfaState struct {
	// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppExcludes []RuleMfaAppExclude `pulumi:"appExcludes"`
	// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppIncludes []RuleMfaAppInclude `pulumi:"appIncludes"`
	// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
	Enroll *string `pulumi:"enroll"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection *string `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
	// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type RuleMfaState struct {
	// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppExcludes RuleMfaAppExcludeArrayInput
	// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppIncludes RuleMfaAppIncludeArrayInput
	// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
	Enroll pulumi.StringPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
	// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleMfaState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleMfaState)(nil)).Elem()
}

type ruleMfaArgs struct {
	// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppExcludes []RuleMfaAppExclude `pulumi:"appExcludes"`
	// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppIncludes []RuleMfaAppInclude `pulumi:"appIncludes"`
	// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
	Enroll *string `pulumi:"enroll"`
	// Policy Rule Name
	Name *string `pulumi:"name"`
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection *string `pulumi:"networkConnection"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID of the Rule
	PolicyId *string `pulumi:"policyId"`
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
	// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a RuleMfa resource.
type RuleMfaArgs struct {
	// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppExcludes RuleMfaAppExcludeArrayInput
	// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
	// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
	//   is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
	//   of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
	AppIncludes RuleMfaAppIncludeArrayInput
	// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
	Enroll pulumi.StringPtrInput
	// Policy Rule Name
	Name pulumi.StringPtrInput
	// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
	NetworkConnection pulumi.StringPtrInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
	NetworkExcludes pulumi.StringArrayInput
	// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID of the Rule
	PolicyId pulumi.StringPtrInput
	// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
	// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleMfaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleMfaArgs)(nil)).Elem()
}

type RuleMfaInput interface {
	pulumi.Input

	ToRuleMfaOutput() RuleMfaOutput
	ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput
}

func (*RuleMfa) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleMfa)(nil)).Elem()
}

func (i *RuleMfa) ToRuleMfaOutput() RuleMfaOutput {
	return i.ToRuleMfaOutputWithContext(context.Background())
}

func (i *RuleMfa) ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaOutput)
}

// RuleMfaArrayInput is an input type that accepts RuleMfaArray and RuleMfaArrayOutput values.
// You can construct a concrete instance of `RuleMfaArrayInput` via:
//
//	RuleMfaArray{ RuleMfaArgs{...} }
type RuleMfaArrayInput interface {
	pulumi.Input

	ToRuleMfaArrayOutput() RuleMfaArrayOutput
	ToRuleMfaArrayOutputWithContext(context.Context) RuleMfaArrayOutput
}

type RuleMfaArray []RuleMfaInput

func (RuleMfaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleMfa)(nil)).Elem()
}

func (i RuleMfaArray) ToRuleMfaArrayOutput() RuleMfaArrayOutput {
	return i.ToRuleMfaArrayOutputWithContext(context.Background())
}

func (i RuleMfaArray) ToRuleMfaArrayOutputWithContext(ctx context.Context) RuleMfaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaArrayOutput)
}

// RuleMfaMapInput is an input type that accepts RuleMfaMap and RuleMfaMapOutput values.
// You can construct a concrete instance of `RuleMfaMapInput` via:
//
//	RuleMfaMap{ "key": RuleMfaArgs{...} }
type RuleMfaMapInput interface {
	pulumi.Input

	ToRuleMfaMapOutput() RuleMfaMapOutput
	ToRuleMfaMapOutputWithContext(context.Context) RuleMfaMapOutput
}

type RuleMfaMap map[string]RuleMfaInput

func (RuleMfaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleMfa)(nil)).Elem()
}

func (i RuleMfaMap) ToRuleMfaMapOutput() RuleMfaMapOutput {
	return i.ToRuleMfaMapOutputWithContext(context.Background())
}

func (i RuleMfaMap) ToRuleMfaMapOutputWithContext(ctx context.Context) RuleMfaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaMapOutput)
}

type RuleMfaOutput struct{ *pulumi.OutputState }

func (RuleMfaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleMfa)(nil)).Elem()
}

func (o RuleMfaOutput) ToRuleMfaOutput() RuleMfaOutput {
	return o
}

func (o RuleMfaOutput) ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput {
	return o
}

// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
//   - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
//     is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
//     of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
func (o RuleMfaOutput) AppExcludes() RuleMfaAppExcludeArrayOutput {
	return o.ApplyT(func(v *RuleMfa) RuleMfaAppExcludeArrayOutput { return v.AppExcludes }).(RuleMfaAppExcludeArrayOutput)
}

// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
//   - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
//     is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
//     of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
func (o RuleMfaOutput) AppIncludes() RuleMfaAppIncludeArrayOutput {
	return o.ApplyT(func(v *RuleMfa) RuleMfaAppIncludeArrayOutput { return v.AppIncludes }).(RuleMfaAppIncludeArrayOutput)
}

// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
func (o RuleMfaOutput) Enroll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringPtrOutput { return v.Enroll }).(pulumi.StringPtrOutput)
}

// Policy Rule Name
func (o RuleMfaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
func (o RuleMfaOutput) NetworkConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringPtrOutput { return v.NetworkConnection }).(pulumi.StringPtrOutput)
}

// Required if `networkConnection` = `ZONE`. Indicates the network zones to exclude.
func (o RuleMfaOutput) NetworkExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringArrayOutput { return v.NetworkExcludes }).(pulumi.StringArrayOutput)
}

// Required if `networkConnection` = `ZONE`. Indicates the network zones to include.
func (o RuleMfaOutput) NetworkIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringArrayOutput { return v.NetworkIncludes }).(pulumi.StringArrayOutput)
}

// Policy ID of the Rule
func (o RuleMfaOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
func (o RuleMfaOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
func (o RuleMfaOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Set of User IDs to Exclude
func (o RuleMfaOutput) UsersExcludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleMfa) pulumi.StringArrayOutput { return v.UsersExcludeds }).(pulumi.StringArrayOutput)
}

type RuleMfaArrayOutput struct{ *pulumi.OutputState }

func (RuleMfaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleMfa)(nil)).Elem()
}

func (o RuleMfaArrayOutput) ToRuleMfaArrayOutput() RuleMfaArrayOutput {
	return o
}

func (o RuleMfaArrayOutput) ToRuleMfaArrayOutputWithContext(ctx context.Context) RuleMfaArrayOutput {
	return o
}

func (o RuleMfaArrayOutput) Index(i pulumi.IntInput) RuleMfaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleMfa {
		return vs[0].([]*RuleMfa)[vs[1].(int)]
	}).(RuleMfaOutput)
}

type RuleMfaMapOutput struct{ *pulumi.OutputState }

func (RuleMfaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleMfa)(nil)).Elem()
}

func (o RuleMfaMapOutput) ToRuleMfaMapOutput() RuleMfaMapOutput {
	return o
}

func (o RuleMfaMapOutput) ToRuleMfaMapOutputWithContext(ctx context.Context) RuleMfaMapOutput {
	return o
}

func (o RuleMfaMapOutput) MapIndex(k pulumi.StringInput) RuleMfaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleMfa {
		return vs[0].(map[string]*RuleMfa)[vs[1].(string)]
	}).(RuleMfaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMfaInput)(nil)).Elem(), &RuleMfa{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMfaArrayInput)(nil)).Elem(), RuleMfaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMfaMapInput)(nil)).Elem(), RuleMfaMap{})
	pulumi.RegisterOutputType(RuleMfaOutput{})
	pulumi.RegisterOutputType(RuleMfaArrayOutput{})
	pulumi.RegisterOutputType(RuleMfaMapOutput{})
}
