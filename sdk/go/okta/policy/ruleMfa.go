// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an MFA Policy Rule.
//
// This resource allows you to create and configure an MFA Policy Rule.
//
// ## Import
//
// A Policy Rule can be imported via the Policy and Rule ID.
//
// ```sh
//  $ pulumi import okta:policy/ruleMfa:RuleMfa example <policy id>/<rule id>
// ```
type RuleMfa struct {
	pulumi.CustomResourceState

	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll pulumi.StringPtrOutput `pulumi:"enroll"`
	// Policy Rule Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrOutput `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayOutput `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayOutput `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrOutput `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayOutput `pulumi:"usersExcludeds"`
}

// NewRuleMfa registers a new resource with the given unique name, arguments, and options.
func NewRuleMfa(ctx *pulumi.Context,
	name string, args *RuleMfaArgs, opts ...pulumi.ResourceOption) (*RuleMfa, error) {
	if args == nil {
		args = &RuleMfaArgs{}
	}

	var resource RuleMfa
	err := ctx.RegisterResource("okta:policy/ruleMfa:RuleMfa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleMfa gets an existing RuleMfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleMfa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleMfaState, opts ...pulumi.ResourceOption) (*RuleMfa, error) {
	var resource RuleMfa
	err := ctx.ReadResource("okta:policy/ruleMfa:RuleMfa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleMfa resources.
type ruleMfaState struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll *string `pulumi:"enroll"`
	// Policy Rule Name.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

type RuleMfaState struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll pulumi.StringPtrInput
	// Policy Rule Name.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID.
	PolicyId pulumi.StringPtrInput
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleMfaState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleMfaState)(nil)).Elem()
}

type ruleMfaArgs struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll *string `pulumi:"enroll"`
	// Policy Rule Name.
	Name *string `pulumi:"name"`
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection *string `pulumi:"networkConnection"`
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes []string `pulumi:"networkExcludes"`
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes []string `pulumi:"networkIncludes"`
	// Policy ID.
	PolicyId *string `pulumi:"policyId"`
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid *string `pulumi:"policyid"`
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status *string `pulumi:"status"`
	// Set of User IDs to Exclude
	UsersExcludeds []string `pulumi:"usersExcludeds"`
}

// The set of arguments for constructing a RuleMfa resource.
type RuleMfaArgs struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll pulumi.StringPtrInput
	// Policy Rule Name.
	Name pulumi.StringPtrInput
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection pulumi.StringPtrInput
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes pulumi.StringArrayInput
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes pulumi.StringArrayInput
	// Policy ID.
	PolicyId pulumi.StringPtrInput
	// Policy ID.
	//
	// Deprecated: Because of incorrect naming, 'policyid' field will be deprecated and then removed in the next versions of the provider. Please use 'policy_id' instead
	Policyid pulumi.StringPtrInput
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status pulumi.StringPtrInput
	// Set of User IDs to Exclude
	UsersExcludeds pulumi.StringArrayInput
}

func (RuleMfaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleMfaArgs)(nil)).Elem()
}

type RuleMfaInput interface {
	pulumi.Input

	ToRuleMfaOutput() RuleMfaOutput
	ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput
}

func (*RuleMfa) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMfa)(nil))
}

func (i *RuleMfa) ToRuleMfaOutput() RuleMfaOutput {
	return i.ToRuleMfaOutputWithContext(context.Background())
}

func (i *RuleMfa) ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaOutput)
}

func (i *RuleMfa) ToRuleMfaPtrOutput() RuleMfaPtrOutput {
	return i.ToRuleMfaPtrOutputWithContext(context.Background())
}

func (i *RuleMfa) ToRuleMfaPtrOutputWithContext(ctx context.Context) RuleMfaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaPtrOutput)
}

type RuleMfaPtrInput interface {
	pulumi.Input

	ToRuleMfaPtrOutput() RuleMfaPtrOutput
	ToRuleMfaPtrOutputWithContext(ctx context.Context) RuleMfaPtrOutput
}

type ruleMfaPtrType RuleMfaArgs

func (*ruleMfaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleMfa)(nil))
}

func (i *ruleMfaPtrType) ToRuleMfaPtrOutput() RuleMfaPtrOutput {
	return i.ToRuleMfaPtrOutputWithContext(context.Background())
}

func (i *ruleMfaPtrType) ToRuleMfaPtrOutputWithContext(ctx context.Context) RuleMfaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaPtrOutput)
}

// RuleMfaArrayInput is an input type that accepts RuleMfaArray and RuleMfaArrayOutput values.
// You can construct a concrete instance of `RuleMfaArrayInput` via:
//
//          RuleMfaArray{ RuleMfaArgs{...} }
type RuleMfaArrayInput interface {
	pulumi.Input

	ToRuleMfaArrayOutput() RuleMfaArrayOutput
	ToRuleMfaArrayOutputWithContext(context.Context) RuleMfaArrayOutput
}

type RuleMfaArray []RuleMfaInput

func (RuleMfaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleMfa)(nil)).Elem()
}

func (i RuleMfaArray) ToRuleMfaArrayOutput() RuleMfaArrayOutput {
	return i.ToRuleMfaArrayOutputWithContext(context.Background())
}

func (i RuleMfaArray) ToRuleMfaArrayOutputWithContext(ctx context.Context) RuleMfaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaArrayOutput)
}

// RuleMfaMapInput is an input type that accepts RuleMfaMap and RuleMfaMapOutput values.
// You can construct a concrete instance of `RuleMfaMapInput` via:
//
//          RuleMfaMap{ "key": RuleMfaArgs{...} }
type RuleMfaMapInput interface {
	pulumi.Input

	ToRuleMfaMapOutput() RuleMfaMapOutput
	ToRuleMfaMapOutputWithContext(context.Context) RuleMfaMapOutput
}

type RuleMfaMap map[string]RuleMfaInput

func (RuleMfaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleMfa)(nil)).Elem()
}

func (i RuleMfaMap) ToRuleMfaMapOutput() RuleMfaMapOutput {
	return i.ToRuleMfaMapOutputWithContext(context.Background())
}

func (i RuleMfaMap) ToRuleMfaMapOutputWithContext(ctx context.Context) RuleMfaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMfaMapOutput)
}

type RuleMfaOutput struct{ *pulumi.OutputState }

func (RuleMfaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMfa)(nil))
}

func (o RuleMfaOutput) ToRuleMfaOutput() RuleMfaOutput {
	return o
}

func (o RuleMfaOutput) ToRuleMfaOutputWithContext(ctx context.Context) RuleMfaOutput {
	return o
}

func (o RuleMfaOutput) ToRuleMfaPtrOutput() RuleMfaPtrOutput {
	return o.ToRuleMfaPtrOutputWithContext(context.Background())
}

func (o RuleMfaOutput) ToRuleMfaPtrOutputWithContext(ctx context.Context) RuleMfaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleMfa) *RuleMfa {
		return &v
	}).(RuleMfaPtrOutput)
}

type RuleMfaPtrOutput struct{ *pulumi.OutputState }

func (RuleMfaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleMfa)(nil))
}

func (o RuleMfaPtrOutput) ToRuleMfaPtrOutput() RuleMfaPtrOutput {
	return o
}

func (o RuleMfaPtrOutput) ToRuleMfaPtrOutputWithContext(ctx context.Context) RuleMfaPtrOutput {
	return o
}

func (o RuleMfaPtrOutput) Elem() RuleMfaOutput {
	return o.ApplyT(func(v *RuleMfa) RuleMfa {
		if v != nil {
			return *v
		}
		var ret RuleMfa
		return ret
	}).(RuleMfaOutput)
}

type RuleMfaArrayOutput struct{ *pulumi.OutputState }

func (RuleMfaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleMfa)(nil))
}

func (o RuleMfaArrayOutput) ToRuleMfaArrayOutput() RuleMfaArrayOutput {
	return o
}

func (o RuleMfaArrayOutput) ToRuleMfaArrayOutputWithContext(ctx context.Context) RuleMfaArrayOutput {
	return o
}

func (o RuleMfaArrayOutput) Index(i pulumi.IntInput) RuleMfaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleMfa {
		return vs[0].([]RuleMfa)[vs[1].(int)]
	}).(RuleMfaOutput)
}

type RuleMfaMapOutput struct{ *pulumi.OutputState }

func (RuleMfaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RuleMfa)(nil))
}

func (o RuleMfaMapOutput) ToRuleMfaMapOutput() RuleMfaMapOutput {
	return o
}

func (o RuleMfaMapOutput) ToRuleMfaMapOutputWithContext(ctx context.Context) RuleMfaMapOutput {
	return o
}

func (o RuleMfaMapOutput) MapIndex(k pulumi.StringInput) RuleMfaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RuleMfa {
		return vs[0].(map[string]RuleMfa)[vs[1].(string)]
	}).(RuleMfaOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleMfaOutput{})
	pulumi.RegisterOutputType(RuleMfaPtrOutput{})
	pulumi.RegisterOutputType(RuleMfaArrayOutput{})
	pulumi.RegisterOutputType(RuleMfaMapOutput{})
}
