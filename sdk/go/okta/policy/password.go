// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Password struct {
	pulumi.CustomResourceState

	// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
	AuthProvider pulumi.StringPtrOutput `pulumi:"authProvider"`
	// Enable or disable voice call recovery: ACTIVE or INACTIVE.
	CallRecovery pulumi.StringPtrOutput `pulumi:"callRecovery"`
	// Policy Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable or disable email password recovery: ACTIVE or INACTIVE.
	EmailRecovery pulumi.StringPtrOutput `pulumi:"emailRecovery"`
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayOutput `pulumi:"groupsIncludeds"`
	// Policy Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of minutes before a locked account is unlocked: 0 = no limit.
	PasswordAutoUnlockMinutes pulumi.IntPtrOutput `pulumi:"passwordAutoUnlockMinutes"`
	// Check Passwords Against Common Password Dictionary.
	PasswordDictionaryLookup pulumi.BoolPtrOutput `pulumi:"passwordDictionaryLookup"`
	// User firstName attribute must be excluded from the password
	PasswordExcludeFirstName pulumi.BoolPtrOutput `pulumi:"passwordExcludeFirstName"`
	// User lastName attribute must be excluded from the password
	PasswordExcludeLastName pulumi.BoolPtrOutput `pulumi:"passwordExcludeLastName"`
	// If the user name must be excluded from the password.
	PasswordExcludeUsername pulumi.BoolPtrOutput `pulumi:"passwordExcludeUsername"`
	// Length in days a user will be warned before password expiry: 0 = no warning.
	PasswordExpireWarnDays pulumi.IntPtrOutput `pulumi:"passwordExpireWarnDays"`
	// Number of distinct passwords that must be created before they can be reused: 0 = none.
	PasswordHistoryCount pulumi.IntPtrOutput `pulumi:"passwordHistoryCount"`
	// Notification channels to use to notify a user when their account has been locked.
	PasswordLockoutNotificationChannels pulumi.StringArrayOutput `pulumi:"passwordLockoutNotificationChannels"`
	// Length in days a password is valid before expiry: 0 = no limit.
	PasswordMaxAgeDays pulumi.IntPtrOutput `pulumi:"passwordMaxAgeDays"`
	// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
	PasswordMaxLockoutAttempts pulumi.IntPtrOutput `pulumi:"passwordMaxLockoutAttempts"`
	// Minimum time interval in minutes between password changes: 0 = no limit.
	PasswordMinAgeMinutes pulumi.IntPtrOutput `pulumi:"passwordMinAgeMinutes"`
	// Minimum password length.
	PasswordMinLength pulumi.IntPtrOutput `pulumi:"passwordMinLength"`
	// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinLowercase pulumi.IntPtrOutput `pulumi:"passwordMinLowercase"`
	// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
	PasswordMinNumber pulumi.IntPtrOutput `pulumi:"passwordMinNumber"`
	// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
	PasswordMinSymbol pulumi.IntPtrOutput `pulumi:"passwordMinSymbol"`
	// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinUppercase pulumi.IntPtrOutput `pulumi:"passwordMinUppercase"`
	// If a user should be informed when their account is locked.
	PasswordShowLockoutFailures pulumi.BoolPtrOutput `pulumi:"passwordShowLockoutFailures"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Min length of the password recovery question answer.
	QuestionMinLength pulumi.IntPtrOutput `pulumi:"questionMinLength"`
	// Enable or disable security question password recovery: ACTIVE or INACTIVE.
	QuestionRecovery pulumi.StringPtrOutput `pulumi:"questionRecovery"`
	// Lifetime in minutes of the recovery email token.
	RecoveryEmailToken pulumi.IntPtrOutput `pulumi:"recoveryEmailToken"`
	// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
	SkipUnlock pulumi.BoolPtrOutput `pulumi:"skipUnlock"`
	// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
	SmsRecovery pulumi.StringPtrOutput `pulumi:"smsRecovery"`
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewPassword registers a new resource with the given unique name, arguments, and options.
func NewPassword(ctx *pulumi.Context,
	name string, args *PasswordArgs, opts ...pulumi.ResourceOption) (*Password, error) {
	if args == nil {
		args = &PasswordArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Password
	err := ctx.RegisterResource("okta:policy/password:Password", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPassword gets an existing Password resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordState, opts ...pulumi.ResourceOption) (*Password, error) {
	var resource Password
	err := ctx.ReadResource("okta:policy/password:Password", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Password resources.
type passwordState struct {
	// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
	AuthProvider *string `pulumi:"authProvider"`
	// Enable or disable voice call recovery: ACTIVE or INACTIVE.
	CallRecovery *string `pulumi:"callRecovery"`
	// Policy Description
	Description *string `pulumi:"description"`
	// Enable or disable email password recovery: ACTIVE or INACTIVE.
	EmailRecovery *string `pulumi:"emailRecovery"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Number of minutes before a locked account is unlocked: 0 = no limit.
	PasswordAutoUnlockMinutes *int `pulumi:"passwordAutoUnlockMinutes"`
	// Check Passwords Against Common Password Dictionary.
	PasswordDictionaryLookup *bool `pulumi:"passwordDictionaryLookup"`
	// User firstName attribute must be excluded from the password
	PasswordExcludeFirstName *bool `pulumi:"passwordExcludeFirstName"`
	// User lastName attribute must be excluded from the password
	PasswordExcludeLastName *bool `pulumi:"passwordExcludeLastName"`
	// If the user name must be excluded from the password.
	PasswordExcludeUsername *bool `pulumi:"passwordExcludeUsername"`
	// Length in days a user will be warned before password expiry: 0 = no warning.
	PasswordExpireWarnDays *int `pulumi:"passwordExpireWarnDays"`
	// Number of distinct passwords that must be created before they can be reused: 0 = none.
	PasswordHistoryCount *int `pulumi:"passwordHistoryCount"`
	// Notification channels to use to notify a user when their account has been locked.
	PasswordLockoutNotificationChannels []string `pulumi:"passwordLockoutNotificationChannels"`
	// Length in days a password is valid before expiry: 0 = no limit.
	PasswordMaxAgeDays *int `pulumi:"passwordMaxAgeDays"`
	// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
	PasswordMaxLockoutAttempts *int `pulumi:"passwordMaxLockoutAttempts"`
	// Minimum time interval in minutes between password changes: 0 = no limit.
	PasswordMinAgeMinutes *int `pulumi:"passwordMinAgeMinutes"`
	// Minimum password length.
	PasswordMinLength *int `pulumi:"passwordMinLength"`
	// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinLowercase *int `pulumi:"passwordMinLowercase"`
	// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
	PasswordMinNumber *int `pulumi:"passwordMinNumber"`
	// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
	PasswordMinSymbol *int `pulumi:"passwordMinSymbol"`
	// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinUppercase *int `pulumi:"passwordMinUppercase"`
	// If a user should be informed when their account is locked.
	PasswordShowLockoutFailures *bool `pulumi:"passwordShowLockoutFailures"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Min length of the password recovery question answer.
	QuestionMinLength *int `pulumi:"questionMinLength"`
	// Enable or disable security question password recovery: ACTIVE or INACTIVE.
	QuestionRecovery *string `pulumi:"questionRecovery"`
	// Lifetime in minutes of the recovery email token.
	RecoveryEmailToken *int `pulumi:"recoveryEmailToken"`
	// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
	SkipUnlock *bool `pulumi:"skipUnlock"`
	// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
	SmsRecovery *string `pulumi:"smsRecovery"`
	// Policy Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
}

type PasswordState struct {
	// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
	AuthProvider pulumi.StringPtrInput
	// Enable or disable voice call recovery: ACTIVE or INACTIVE.
	CallRecovery pulumi.StringPtrInput
	// Policy Description
	Description pulumi.StringPtrInput
	// Enable or disable email password recovery: ACTIVE or INACTIVE.
	EmailRecovery pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Number of minutes before a locked account is unlocked: 0 = no limit.
	PasswordAutoUnlockMinutes pulumi.IntPtrInput
	// Check Passwords Against Common Password Dictionary.
	PasswordDictionaryLookup pulumi.BoolPtrInput
	// User firstName attribute must be excluded from the password
	PasswordExcludeFirstName pulumi.BoolPtrInput
	// User lastName attribute must be excluded from the password
	PasswordExcludeLastName pulumi.BoolPtrInput
	// If the user name must be excluded from the password.
	PasswordExcludeUsername pulumi.BoolPtrInput
	// Length in days a user will be warned before password expiry: 0 = no warning.
	PasswordExpireWarnDays pulumi.IntPtrInput
	// Number of distinct passwords that must be created before they can be reused: 0 = none.
	PasswordHistoryCount pulumi.IntPtrInput
	// Notification channels to use to notify a user when their account has been locked.
	PasswordLockoutNotificationChannels pulumi.StringArrayInput
	// Length in days a password is valid before expiry: 0 = no limit.
	PasswordMaxAgeDays pulumi.IntPtrInput
	// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
	PasswordMaxLockoutAttempts pulumi.IntPtrInput
	// Minimum time interval in minutes between password changes: 0 = no limit.
	PasswordMinAgeMinutes pulumi.IntPtrInput
	// Minimum password length.
	PasswordMinLength pulumi.IntPtrInput
	// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinLowercase pulumi.IntPtrInput
	// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
	PasswordMinNumber pulumi.IntPtrInput
	// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
	PasswordMinSymbol pulumi.IntPtrInput
	// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinUppercase pulumi.IntPtrInput
	// If a user should be informed when their account is locked.
	PasswordShowLockoutFailures pulumi.BoolPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Min length of the password recovery question answer.
	QuestionMinLength pulumi.IntPtrInput
	// Enable or disable security question password recovery: ACTIVE or INACTIVE.
	QuestionRecovery pulumi.StringPtrInput
	// Lifetime in minutes of the recovery email token.
	RecoveryEmailToken pulumi.IntPtrInput
	// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
	SkipUnlock pulumi.BoolPtrInput
	// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
	SmsRecovery pulumi.StringPtrInput
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
}

func (PasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordState)(nil)).Elem()
}

type passwordArgs struct {
	// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
	AuthProvider *string `pulumi:"authProvider"`
	// Enable or disable voice call recovery: ACTIVE or INACTIVE.
	CallRecovery *string `pulumi:"callRecovery"`
	// Policy Description
	Description *string `pulumi:"description"`
	// Enable or disable email password recovery: ACTIVE or INACTIVE.
	EmailRecovery *string `pulumi:"emailRecovery"`
	// List of Group IDs to Include
	GroupsIncludeds []string `pulumi:"groupsIncludeds"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Number of minutes before a locked account is unlocked: 0 = no limit.
	PasswordAutoUnlockMinutes *int `pulumi:"passwordAutoUnlockMinutes"`
	// Check Passwords Against Common Password Dictionary.
	PasswordDictionaryLookup *bool `pulumi:"passwordDictionaryLookup"`
	// User firstName attribute must be excluded from the password
	PasswordExcludeFirstName *bool `pulumi:"passwordExcludeFirstName"`
	// User lastName attribute must be excluded from the password
	PasswordExcludeLastName *bool `pulumi:"passwordExcludeLastName"`
	// If the user name must be excluded from the password.
	PasswordExcludeUsername *bool `pulumi:"passwordExcludeUsername"`
	// Length in days a user will be warned before password expiry: 0 = no warning.
	PasswordExpireWarnDays *int `pulumi:"passwordExpireWarnDays"`
	// Number of distinct passwords that must be created before they can be reused: 0 = none.
	PasswordHistoryCount *int `pulumi:"passwordHistoryCount"`
	// Notification channels to use to notify a user when their account has been locked.
	PasswordLockoutNotificationChannels []string `pulumi:"passwordLockoutNotificationChannels"`
	// Length in days a password is valid before expiry: 0 = no limit.
	PasswordMaxAgeDays *int `pulumi:"passwordMaxAgeDays"`
	// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
	PasswordMaxLockoutAttempts *int `pulumi:"passwordMaxLockoutAttempts"`
	// Minimum time interval in minutes between password changes: 0 = no limit.
	PasswordMinAgeMinutes *int `pulumi:"passwordMinAgeMinutes"`
	// Minimum password length.
	PasswordMinLength *int `pulumi:"passwordMinLength"`
	// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinLowercase *int `pulumi:"passwordMinLowercase"`
	// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
	PasswordMinNumber *int `pulumi:"passwordMinNumber"`
	// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
	PasswordMinSymbol *int `pulumi:"passwordMinSymbol"`
	// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinUppercase *int `pulumi:"passwordMinUppercase"`
	// If a user should be informed when their account is locked.
	PasswordShowLockoutFailures *bool `pulumi:"passwordShowLockoutFailures"`
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority *int `pulumi:"priority"`
	// Min length of the password recovery question answer.
	QuestionMinLength *int `pulumi:"questionMinLength"`
	// Enable or disable security question password recovery: ACTIVE or INACTIVE.
	QuestionRecovery *string `pulumi:"questionRecovery"`
	// Lifetime in minutes of the recovery email token.
	RecoveryEmailToken *int `pulumi:"recoveryEmailToken"`
	// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
	SkipUnlock *bool `pulumi:"skipUnlock"`
	// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
	SmsRecovery *string `pulumi:"smsRecovery"`
	// Policy Status: ACTIVE or INACTIVE.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Password resource.
type PasswordArgs struct {
	// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
	AuthProvider pulumi.StringPtrInput
	// Enable or disable voice call recovery: ACTIVE or INACTIVE.
	CallRecovery pulumi.StringPtrInput
	// Policy Description
	Description pulumi.StringPtrInput
	// Enable or disable email password recovery: ACTIVE or INACTIVE.
	EmailRecovery pulumi.StringPtrInput
	// List of Group IDs to Include
	GroupsIncludeds pulumi.StringArrayInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Number of minutes before a locked account is unlocked: 0 = no limit.
	PasswordAutoUnlockMinutes pulumi.IntPtrInput
	// Check Passwords Against Common Password Dictionary.
	PasswordDictionaryLookup pulumi.BoolPtrInput
	// User firstName attribute must be excluded from the password
	PasswordExcludeFirstName pulumi.BoolPtrInput
	// User lastName attribute must be excluded from the password
	PasswordExcludeLastName pulumi.BoolPtrInput
	// If the user name must be excluded from the password.
	PasswordExcludeUsername pulumi.BoolPtrInput
	// Length in days a user will be warned before password expiry: 0 = no warning.
	PasswordExpireWarnDays pulumi.IntPtrInput
	// Number of distinct passwords that must be created before they can be reused: 0 = none.
	PasswordHistoryCount pulumi.IntPtrInput
	// Notification channels to use to notify a user when their account has been locked.
	PasswordLockoutNotificationChannels pulumi.StringArrayInput
	// Length in days a password is valid before expiry: 0 = no limit.
	PasswordMaxAgeDays pulumi.IntPtrInput
	// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
	PasswordMaxLockoutAttempts pulumi.IntPtrInput
	// Minimum time interval in minutes between password changes: 0 = no limit.
	PasswordMinAgeMinutes pulumi.IntPtrInput
	// Minimum password length.
	PasswordMinLength pulumi.IntPtrInput
	// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinLowercase pulumi.IntPtrInput
	// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
	PasswordMinNumber pulumi.IntPtrInput
	// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
	PasswordMinSymbol pulumi.IntPtrInput
	// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
	PasswordMinUppercase pulumi.IntPtrInput
	// If a user should be informed when their account is locked.
	PasswordShowLockoutFailures pulumi.BoolPtrInput
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
	Priority pulumi.IntPtrInput
	// Min length of the password recovery question answer.
	QuestionMinLength pulumi.IntPtrInput
	// Enable or disable security question password recovery: ACTIVE or INACTIVE.
	QuestionRecovery pulumi.StringPtrInput
	// Lifetime in minutes of the recovery email token.
	RecoveryEmailToken pulumi.IntPtrInput
	// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
	SkipUnlock pulumi.BoolPtrInput
	// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
	SmsRecovery pulumi.StringPtrInput
	// Policy Status: ACTIVE or INACTIVE.
	Status pulumi.StringPtrInput
}

func (PasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordArgs)(nil)).Elem()
}

type PasswordInput interface {
	pulumi.Input

	ToPasswordOutput() PasswordOutput
	ToPasswordOutputWithContext(ctx context.Context) PasswordOutput
}

func (*Password) ElementType() reflect.Type {
	return reflect.TypeOf((**Password)(nil)).Elem()
}

func (i *Password) ToPasswordOutput() PasswordOutput {
	return i.ToPasswordOutputWithContext(context.Background())
}

func (i *Password) ToPasswordOutputWithContext(ctx context.Context) PasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordOutput)
}

// PasswordArrayInput is an input type that accepts PasswordArray and PasswordArrayOutput values.
// You can construct a concrete instance of `PasswordArrayInput` via:
//
//	PasswordArray{ PasswordArgs{...} }
type PasswordArrayInput interface {
	pulumi.Input

	ToPasswordArrayOutput() PasswordArrayOutput
	ToPasswordArrayOutputWithContext(context.Context) PasswordArrayOutput
}

type PasswordArray []PasswordInput

func (PasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Password)(nil)).Elem()
}

func (i PasswordArray) ToPasswordArrayOutput() PasswordArrayOutput {
	return i.ToPasswordArrayOutputWithContext(context.Background())
}

func (i PasswordArray) ToPasswordArrayOutputWithContext(ctx context.Context) PasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordArrayOutput)
}

// PasswordMapInput is an input type that accepts PasswordMap and PasswordMapOutput values.
// You can construct a concrete instance of `PasswordMapInput` via:
//
//	PasswordMap{ "key": PasswordArgs{...} }
type PasswordMapInput interface {
	pulumi.Input

	ToPasswordMapOutput() PasswordMapOutput
	ToPasswordMapOutputWithContext(context.Context) PasswordMapOutput
}

type PasswordMap map[string]PasswordInput

func (PasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Password)(nil)).Elem()
}

func (i PasswordMap) ToPasswordMapOutput() PasswordMapOutput {
	return i.ToPasswordMapOutputWithContext(context.Background())
}

func (i PasswordMap) ToPasswordMapOutputWithContext(ctx context.Context) PasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordMapOutput)
}

type PasswordOutput struct{ *pulumi.OutputState }

func (PasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Password)(nil)).Elem()
}

func (o PasswordOutput) ToPasswordOutput() PasswordOutput {
	return o
}

func (o PasswordOutput) ToPasswordOutputWithContext(ctx context.Context) PasswordOutput {
	return o
}

// Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
func (o PasswordOutput) AuthProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.AuthProvider }).(pulumi.StringPtrOutput)
}

// Enable or disable voice call recovery: ACTIVE or INACTIVE.
func (o PasswordOutput) CallRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.CallRecovery }).(pulumi.StringPtrOutput)
}

// Policy Description
func (o PasswordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable or disable email password recovery: ACTIVE or INACTIVE.
func (o PasswordOutput) EmailRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.EmailRecovery }).(pulumi.StringPtrOutput)
}

// List of Group IDs to Include
func (o PasswordOutput) GroupsIncludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Password) pulumi.StringArrayOutput { return v.GroupsIncludeds }).(pulumi.StringArrayOutput)
}

// Policy Name
func (o PasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Password) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of minutes before a locked account is unlocked: 0 = no limit.
func (o PasswordOutput) PasswordAutoUnlockMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordAutoUnlockMinutes }).(pulumi.IntPtrOutput)
}

// Check Passwords Against Common Password Dictionary.
func (o PasswordOutput) PasswordDictionaryLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.PasswordDictionaryLookup }).(pulumi.BoolPtrOutput)
}

// User firstName attribute must be excluded from the password
func (o PasswordOutput) PasswordExcludeFirstName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.PasswordExcludeFirstName }).(pulumi.BoolPtrOutput)
}

// User lastName attribute must be excluded from the password
func (o PasswordOutput) PasswordExcludeLastName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.PasswordExcludeLastName }).(pulumi.BoolPtrOutput)
}

// If the user name must be excluded from the password.
func (o PasswordOutput) PasswordExcludeUsername() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.PasswordExcludeUsername }).(pulumi.BoolPtrOutput)
}

// Length in days a user will be warned before password expiry: 0 = no warning.
func (o PasswordOutput) PasswordExpireWarnDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordExpireWarnDays }).(pulumi.IntPtrOutput)
}

// Number of distinct passwords that must be created before they can be reused: 0 = none.
func (o PasswordOutput) PasswordHistoryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordHistoryCount }).(pulumi.IntPtrOutput)
}

// Notification channels to use to notify a user when their account has been locked.
func (o PasswordOutput) PasswordLockoutNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Password) pulumi.StringArrayOutput { return v.PasswordLockoutNotificationChannels }).(pulumi.StringArrayOutput)
}

// Length in days a password is valid before expiry: 0 = no limit.
func (o PasswordOutput) PasswordMaxAgeDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMaxAgeDays }).(pulumi.IntPtrOutput)
}

// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
func (o PasswordOutput) PasswordMaxLockoutAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMaxLockoutAttempts }).(pulumi.IntPtrOutput)
}

// Minimum time interval in minutes between password changes: 0 = no limit.
func (o PasswordOutput) PasswordMinAgeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinAgeMinutes }).(pulumi.IntPtrOutput)
}

// Minimum password length.
func (o PasswordOutput) PasswordMinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinLength }).(pulumi.IntPtrOutput)
}

// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
func (o PasswordOutput) PasswordMinLowercase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinLowercase }).(pulumi.IntPtrOutput)
}

// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
func (o PasswordOutput) PasswordMinNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinNumber }).(pulumi.IntPtrOutput)
}

// If a password must contain at least one symbol (!@#$%^&*): 0 = no, 1 = yes. Default = 1
func (o PasswordOutput) PasswordMinSymbol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinSymbol }).(pulumi.IntPtrOutput)
}

// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
func (o PasswordOutput) PasswordMinUppercase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.PasswordMinUppercase }).(pulumi.IntPtrOutput)
}

// If a user should be informed when their account is locked.
func (o PasswordOutput) PasswordShowLockoutFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.PasswordShowLockoutFailures }).(pulumi.BoolPtrOutput)
}

// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
func (o PasswordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Min length of the password recovery question answer.
func (o PasswordOutput) QuestionMinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.QuestionMinLength }).(pulumi.IntPtrOutput)
}

// Enable or disable security question password recovery: ACTIVE or INACTIVE.
func (o PasswordOutput) QuestionRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.QuestionRecovery }).(pulumi.StringPtrOutput)
}

// Lifetime in minutes of the recovery email token.
func (o PasswordOutput) RecoveryEmailToken() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.IntPtrOutput { return v.RecoveryEmailToken }).(pulumi.IntPtrOutput)
}

// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account.
func (o PasswordOutput) SkipUnlock() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.BoolPtrOutput { return v.SkipUnlock }).(pulumi.BoolPtrOutput)
}

// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
func (o PasswordOutput) SmsRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.SmsRecovery }).(pulumi.StringPtrOutput)
}

// Policy Status: ACTIVE or INACTIVE.
func (o PasswordOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Password) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type PasswordArrayOutput struct{ *pulumi.OutputState }

func (PasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Password)(nil)).Elem()
}

func (o PasswordArrayOutput) ToPasswordArrayOutput() PasswordArrayOutput {
	return o
}

func (o PasswordArrayOutput) ToPasswordArrayOutputWithContext(ctx context.Context) PasswordArrayOutput {
	return o
}

func (o PasswordArrayOutput) Index(i pulumi.IntInput) PasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Password {
		return vs[0].([]*Password)[vs[1].(int)]
	}).(PasswordOutput)
}

type PasswordMapOutput struct{ *pulumi.OutputState }

func (PasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Password)(nil)).Elem()
}

func (o PasswordMapOutput) ToPasswordMapOutput() PasswordMapOutput {
	return o
}

func (o PasswordMapOutput) ToPasswordMapOutputWithContext(ctx context.Context) PasswordMapOutput {
	return o
}

func (o PasswordMapOutput) MapIndex(k pulumi.StringInput) PasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Password {
		return vs[0].(map[string]*Password)[vs[1].(string)]
	}).(PasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordInput)(nil)).Elem(), &Password{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordArrayInput)(nil)).Elem(), PasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordMapInput)(nil)).Elem(), PasswordMap{})
	pulumi.RegisterOutputType(PasswordOutput{})
	pulumi.RegisterOutputType(PasswordArrayOutput{})
	pulumi.RegisterOutputType(PasswordMapOutput{})
}
