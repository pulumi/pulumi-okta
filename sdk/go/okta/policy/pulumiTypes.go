// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RuleIdpDiscoveryAppExclude struct {
	// Use if `type` is `"APP"` to indicate the application id to include.
	Id *string `pulumi:"id"`
	// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
	Name *string `pulumi:"name"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type string `pulumi:"type"`
}

// RuleIdpDiscoveryAppExcludeInput is an input type that accepts RuleIdpDiscoveryAppExcludeArgs and RuleIdpDiscoveryAppExcludeOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryAppExcludeInput` via:
//
//          RuleIdpDiscoveryAppExcludeArgs{...}
type RuleIdpDiscoveryAppExcludeInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryAppExcludeOutput() RuleIdpDiscoveryAppExcludeOutput
	ToRuleIdpDiscoveryAppExcludeOutputWithContext(context.Context) RuleIdpDiscoveryAppExcludeOutput
}

type RuleIdpDiscoveryAppExcludeArgs struct {
	// Use if `type` is `"APP"` to indicate the application id to include.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (RuleIdpDiscoveryAppExcludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryAppExclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryAppExcludeArgs) ToRuleIdpDiscoveryAppExcludeOutput() RuleIdpDiscoveryAppExcludeOutput {
	return i.ToRuleIdpDiscoveryAppExcludeOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryAppExcludeArgs) ToRuleIdpDiscoveryAppExcludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppExcludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryAppExcludeOutput)
}

// RuleIdpDiscoveryAppExcludeArrayInput is an input type that accepts RuleIdpDiscoveryAppExcludeArray and RuleIdpDiscoveryAppExcludeArrayOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryAppExcludeArrayInput` via:
//
//          RuleIdpDiscoveryAppExcludeArray{ RuleIdpDiscoveryAppExcludeArgs{...} }
type RuleIdpDiscoveryAppExcludeArrayInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryAppExcludeArrayOutput() RuleIdpDiscoveryAppExcludeArrayOutput
	ToRuleIdpDiscoveryAppExcludeArrayOutputWithContext(context.Context) RuleIdpDiscoveryAppExcludeArrayOutput
}

type RuleIdpDiscoveryAppExcludeArray []RuleIdpDiscoveryAppExcludeInput

func (RuleIdpDiscoveryAppExcludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryAppExclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryAppExcludeArray) ToRuleIdpDiscoveryAppExcludeArrayOutput() RuleIdpDiscoveryAppExcludeArrayOutput {
	return i.ToRuleIdpDiscoveryAppExcludeArrayOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryAppExcludeArray) ToRuleIdpDiscoveryAppExcludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppExcludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryAppExcludeArrayOutput)
}

type RuleIdpDiscoveryAppExcludeOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryAppExcludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryAppExclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryAppExcludeOutput) ToRuleIdpDiscoveryAppExcludeOutput() RuleIdpDiscoveryAppExcludeOutput {
	return o
}

func (o RuleIdpDiscoveryAppExcludeOutput) ToRuleIdpDiscoveryAppExcludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppExcludeOutput {
	return o
}

// Use if `type` is `"APP"` to indicate the application id to include.
func (o RuleIdpDiscoveryAppExcludeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppExclude) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
func (o RuleIdpDiscoveryAppExcludeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppExclude) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
func (o RuleIdpDiscoveryAppExcludeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppExclude) string { return v.Type }).(pulumi.StringOutput)
}

type RuleIdpDiscoveryAppExcludeArrayOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryAppExcludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryAppExclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryAppExcludeArrayOutput) ToRuleIdpDiscoveryAppExcludeArrayOutput() RuleIdpDiscoveryAppExcludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryAppExcludeArrayOutput) ToRuleIdpDiscoveryAppExcludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppExcludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryAppExcludeArrayOutput) Index(i pulumi.IntInput) RuleIdpDiscoveryAppExcludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleIdpDiscoveryAppExclude {
		return vs[0].([]RuleIdpDiscoveryAppExclude)[vs[1].(int)]
	}).(RuleIdpDiscoveryAppExcludeOutput)
}

type RuleIdpDiscoveryAppInclude struct {
	// Use if `type` is `"APP"` to indicate the application id to include.
	Id *string `pulumi:"id"`
	// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
	Name *string `pulumi:"name"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type string `pulumi:"type"`
}

// RuleIdpDiscoveryAppIncludeInput is an input type that accepts RuleIdpDiscoveryAppIncludeArgs and RuleIdpDiscoveryAppIncludeOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryAppIncludeInput` via:
//
//          RuleIdpDiscoveryAppIncludeArgs{...}
type RuleIdpDiscoveryAppIncludeInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryAppIncludeOutput() RuleIdpDiscoveryAppIncludeOutput
	ToRuleIdpDiscoveryAppIncludeOutputWithContext(context.Context) RuleIdpDiscoveryAppIncludeOutput
}

type RuleIdpDiscoveryAppIncludeArgs struct {
	// Use if `type` is `"APP"` to indicate the application id to include.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (RuleIdpDiscoveryAppIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryAppInclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryAppIncludeArgs) ToRuleIdpDiscoveryAppIncludeOutput() RuleIdpDiscoveryAppIncludeOutput {
	return i.ToRuleIdpDiscoveryAppIncludeOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryAppIncludeArgs) ToRuleIdpDiscoveryAppIncludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryAppIncludeOutput)
}

// RuleIdpDiscoveryAppIncludeArrayInput is an input type that accepts RuleIdpDiscoveryAppIncludeArray and RuleIdpDiscoveryAppIncludeArrayOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryAppIncludeArrayInput` via:
//
//          RuleIdpDiscoveryAppIncludeArray{ RuleIdpDiscoveryAppIncludeArgs{...} }
type RuleIdpDiscoveryAppIncludeArrayInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryAppIncludeArrayOutput() RuleIdpDiscoveryAppIncludeArrayOutput
	ToRuleIdpDiscoveryAppIncludeArrayOutputWithContext(context.Context) RuleIdpDiscoveryAppIncludeArrayOutput
}

type RuleIdpDiscoveryAppIncludeArray []RuleIdpDiscoveryAppIncludeInput

func (RuleIdpDiscoveryAppIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryAppInclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryAppIncludeArray) ToRuleIdpDiscoveryAppIncludeArrayOutput() RuleIdpDiscoveryAppIncludeArrayOutput {
	return i.ToRuleIdpDiscoveryAppIncludeArrayOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryAppIncludeArray) ToRuleIdpDiscoveryAppIncludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryAppIncludeArrayOutput)
}

type RuleIdpDiscoveryAppIncludeOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryAppIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryAppInclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryAppIncludeOutput) ToRuleIdpDiscoveryAppIncludeOutput() RuleIdpDiscoveryAppIncludeOutput {
	return o
}

func (o RuleIdpDiscoveryAppIncludeOutput) ToRuleIdpDiscoveryAppIncludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppIncludeOutput {
	return o
}

// Use if `type` is `"APP"` to indicate the application id to include.
func (o RuleIdpDiscoveryAppIncludeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppInclude) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahooMail`) of applications should be included.
func (o RuleIdpDiscoveryAppIncludeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppInclude) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
func (o RuleIdpDiscoveryAppIncludeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryAppInclude) string { return v.Type }).(pulumi.StringOutput)
}

type RuleIdpDiscoveryAppIncludeArrayOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryAppIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryAppInclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryAppIncludeArrayOutput) ToRuleIdpDiscoveryAppIncludeArrayOutput() RuleIdpDiscoveryAppIncludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryAppIncludeArrayOutput) ToRuleIdpDiscoveryAppIncludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryAppIncludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryAppIncludeArrayOutput) Index(i pulumi.IntInput) RuleIdpDiscoveryAppIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleIdpDiscoveryAppInclude {
		return vs[0].([]RuleIdpDiscoveryAppInclude)[vs[1].(int)]
	}).(RuleIdpDiscoveryAppIncludeOutput)
}

type RuleIdpDiscoveryPlatformInclude struct {
	// Only available when using `osType = "OTHER"`
	OsExpression *string `pulumi:"osExpression"`
	// One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`
	OsType *string `pulumi:"osType"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type *string `pulumi:"type"`
}

// RuleIdpDiscoveryPlatformIncludeInput is an input type that accepts RuleIdpDiscoveryPlatformIncludeArgs and RuleIdpDiscoveryPlatformIncludeOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryPlatformIncludeInput` via:
//
//          RuleIdpDiscoveryPlatformIncludeArgs{...}
type RuleIdpDiscoveryPlatformIncludeInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryPlatformIncludeOutput() RuleIdpDiscoveryPlatformIncludeOutput
	ToRuleIdpDiscoveryPlatformIncludeOutputWithContext(context.Context) RuleIdpDiscoveryPlatformIncludeOutput
}

type RuleIdpDiscoveryPlatformIncludeArgs struct {
	// Only available when using `osType = "OTHER"`
	OsExpression pulumi.StringPtrInput `pulumi:"osExpression"`
	// One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RuleIdpDiscoveryPlatformIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryPlatformInclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryPlatformIncludeArgs) ToRuleIdpDiscoveryPlatformIncludeOutput() RuleIdpDiscoveryPlatformIncludeOutput {
	return i.ToRuleIdpDiscoveryPlatformIncludeOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryPlatformIncludeArgs) ToRuleIdpDiscoveryPlatformIncludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryPlatformIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryPlatformIncludeOutput)
}

// RuleIdpDiscoveryPlatformIncludeArrayInput is an input type that accepts RuleIdpDiscoveryPlatformIncludeArray and RuleIdpDiscoveryPlatformIncludeArrayOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryPlatformIncludeArrayInput` via:
//
//          RuleIdpDiscoveryPlatformIncludeArray{ RuleIdpDiscoveryPlatformIncludeArgs{...} }
type RuleIdpDiscoveryPlatformIncludeArrayInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryPlatformIncludeArrayOutput() RuleIdpDiscoveryPlatformIncludeArrayOutput
	ToRuleIdpDiscoveryPlatformIncludeArrayOutputWithContext(context.Context) RuleIdpDiscoveryPlatformIncludeArrayOutput
}

type RuleIdpDiscoveryPlatformIncludeArray []RuleIdpDiscoveryPlatformIncludeInput

func (RuleIdpDiscoveryPlatformIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryPlatformInclude)(nil)).Elem()
}

func (i RuleIdpDiscoveryPlatformIncludeArray) ToRuleIdpDiscoveryPlatformIncludeArrayOutput() RuleIdpDiscoveryPlatformIncludeArrayOutput {
	return i.ToRuleIdpDiscoveryPlatformIncludeArrayOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryPlatformIncludeArray) ToRuleIdpDiscoveryPlatformIncludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryPlatformIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryPlatformIncludeArrayOutput)
}

type RuleIdpDiscoveryPlatformIncludeOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryPlatformIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryPlatformInclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryPlatformIncludeOutput) ToRuleIdpDiscoveryPlatformIncludeOutput() RuleIdpDiscoveryPlatformIncludeOutput {
	return o
}

func (o RuleIdpDiscoveryPlatformIncludeOutput) ToRuleIdpDiscoveryPlatformIncludeOutputWithContext(ctx context.Context) RuleIdpDiscoveryPlatformIncludeOutput {
	return o
}

// Only available when using `osType = "OTHER"`
func (o RuleIdpDiscoveryPlatformIncludeOutput) OsExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryPlatformInclude) *string { return v.OsExpression }).(pulumi.StringPtrOutput)
}

// One of: `"ANY"`, `"IOS"`, `"WINDOWS"`, `"ANDROID"`, `"OTHER"`, `"OSX"`
func (o RuleIdpDiscoveryPlatformIncludeOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryPlatformInclude) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// One of: `"ANY"`, `"MOBILE"`, `"DESKTOP"`
func (o RuleIdpDiscoveryPlatformIncludeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryPlatformInclude) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RuleIdpDiscoveryPlatformIncludeArrayOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryPlatformIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryPlatformInclude)(nil)).Elem()
}

func (o RuleIdpDiscoveryPlatformIncludeArrayOutput) ToRuleIdpDiscoveryPlatformIncludeArrayOutput() RuleIdpDiscoveryPlatformIncludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryPlatformIncludeArrayOutput) ToRuleIdpDiscoveryPlatformIncludeArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryPlatformIncludeArrayOutput {
	return o
}

func (o RuleIdpDiscoveryPlatformIncludeArrayOutput) Index(i pulumi.IntInput) RuleIdpDiscoveryPlatformIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleIdpDiscoveryPlatformInclude {
		return vs[0].([]RuleIdpDiscoveryPlatformInclude)[vs[1].(int)]
	}).(RuleIdpDiscoveryPlatformIncludeOutput)
}

type RuleIdpDiscoveryUserIdentifierPattern struct {
	// The kind of pattern. For regex, use `"EXPRESSION"`. For simple string matches, use one of the following: `"SUFFIX"`, `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`
	MatchType *string `pulumi:"matchType"`
	// The regex or simple match string to match against.
	Value *string `pulumi:"value"`
}

// RuleIdpDiscoveryUserIdentifierPatternInput is an input type that accepts RuleIdpDiscoveryUserIdentifierPatternArgs and RuleIdpDiscoveryUserIdentifierPatternOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryUserIdentifierPatternInput` via:
//
//          RuleIdpDiscoveryUserIdentifierPatternArgs{...}
type RuleIdpDiscoveryUserIdentifierPatternInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryUserIdentifierPatternOutput() RuleIdpDiscoveryUserIdentifierPatternOutput
	ToRuleIdpDiscoveryUserIdentifierPatternOutputWithContext(context.Context) RuleIdpDiscoveryUserIdentifierPatternOutput
}

type RuleIdpDiscoveryUserIdentifierPatternArgs struct {
	// The kind of pattern. For regex, use `"EXPRESSION"`. For simple string matches, use one of the following: `"SUFFIX"`, `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The regex or simple match string to match against.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RuleIdpDiscoveryUserIdentifierPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryUserIdentifierPattern)(nil)).Elem()
}

func (i RuleIdpDiscoveryUserIdentifierPatternArgs) ToRuleIdpDiscoveryUserIdentifierPatternOutput() RuleIdpDiscoveryUserIdentifierPatternOutput {
	return i.ToRuleIdpDiscoveryUserIdentifierPatternOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryUserIdentifierPatternArgs) ToRuleIdpDiscoveryUserIdentifierPatternOutputWithContext(ctx context.Context) RuleIdpDiscoveryUserIdentifierPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryUserIdentifierPatternOutput)
}

// RuleIdpDiscoveryUserIdentifierPatternArrayInput is an input type that accepts RuleIdpDiscoveryUserIdentifierPatternArray and RuleIdpDiscoveryUserIdentifierPatternArrayOutput values.
// You can construct a concrete instance of `RuleIdpDiscoveryUserIdentifierPatternArrayInput` via:
//
//          RuleIdpDiscoveryUserIdentifierPatternArray{ RuleIdpDiscoveryUserIdentifierPatternArgs{...} }
type RuleIdpDiscoveryUserIdentifierPatternArrayInput interface {
	pulumi.Input

	ToRuleIdpDiscoveryUserIdentifierPatternArrayOutput() RuleIdpDiscoveryUserIdentifierPatternArrayOutput
	ToRuleIdpDiscoveryUserIdentifierPatternArrayOutputWithContext(context.Context) RuleIdpDiscoveryUserIdentifierPatternArrayOutput
}

type RuleIdpDiscoveryUserIdentifierPatternArray []RuleIdpDiscoveryUserIdentifierPatternInput

func (RuleIdpDiscoveryUserIdentifierPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryUserIdentifierPattern)(nil)).Elem()
}

func (i RuleIdpDiscoveryUserIdentifierPatternArray) ToRuleIdpDiscoveryUserIdentifierPatternArrayOutput() RuleIdpDiscoveryUserIdentifierPatternArrayOutput {
	return i.ToRuleIdpDiscoveryUserIdentifierPatternArrayOutputWithContext(context.Background())
}

func (i RuleIdpDiscoveryUserIdentifierPatternArray) ToRuleIdpDiscoveryUserIdentifierPatternArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryUserIdentifierPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleIdpDiscoveryUserIdentifierPatternArrayOutput)
}

type RuleIdpDiscoveryUserIdentifierPatternOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryUserIdentifierPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleIdpDiscoveryUserIdentifierPattern)(nil)).Elem()
}

func (o RuleIdpDiscoveryUserIdentifierPatternOutput) ToRuleIdpDiscoveryUserIdentifierPatternOutput() RuleIdpDiscoveryUserIdentifierPatternOutput {
	return o
}

func (o RuleIdpDiscoveryUserIdentifierPatternOutput) ToRuleIdpDiscoveryUserIdentifierPatternOutputWithContext(ctx context.Context) RuleIdpDiscoveryUserIdentifierPatternOutput {
	return o
}

// The kind of pattern. For regex, use `"EXPRESSION"`. For simple string matches, use one of the following: `"SUFFIX"`, `"EQUALS"`, `"STARTS_WITH"`, `"CONTAINS"`
func (o RuleIdpDiscoveryUserIdentifierPatternOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryUserIdentifierPattern) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The regex or simple match string to match against.
func (o RuleIdpDiscoveryUserIdentifierPatternOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleIdpDiscoveryUserIdentifierPattern) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RuleIdpDiscoveryUserIdentifierPatternArrayOutput struct{ *pulumi.OutputState }

func (RuleIdpDiscoveryUserIdentifierPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleIdpDiscoveryUserIdentifierPattern)(nil)).Elem()
}

func (o RuleIdpDiscoveryUserIdentifierPatternArrayOutput) ToRuleIdpDiscoveryUserIdentifierPatternArrayOutput() RuleIdpDiscoveryUserIdentifierPatternArrayOutput {
	return o
}

func (o RuleIdpDiscoveryUserIdentifierPatternArrayOutput) ToRuleIdpDiscoveryUserIdentifierPatternArrayOutputWithContext(ctx context.Context) RuleIdpDiscoveryUserIdentifierPatternArrayOutput {
	return o
}

func (o RuleIdpDiscoveryUserIdentifierPatternArrayOutput) Index(i pulumi.IntInput) RuleIdpDiscoveryUserIdentifierPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleIdpDiscoveryUserIdentifierPattern {
		return vs[0].([]RuleIdpDiscoveryUserIdentifierPattern)[vs[1].(int)]
	}).(RuleIdpDiscoveryUserIdentifierPatternOutput)
}

func init() {
	pulumi.RegisterOutputType(RuleIdpDiscoveryAppExcludeOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryAppExcludeArrayOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryAppIncludeOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryAppIncludeArrayOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryPlatformIncludeOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryPlatformIncludeArrayOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryUserIdentifierPatternOutput{})
	pulumi.RegisterOutputType(RuleIdpDiscoveryUserIdentifierPatternArrayOutput{})
}
