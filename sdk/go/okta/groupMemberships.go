// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to manage a set of memberships for a specific group.
//
// This resource will allow you to bulk manage group membership in Okta for a given
// group. This offers an interface to pass multiple users into a single resource
// call, for better API resource usage. Effectively this is the same as using the
// `group.Membership` resource several times with a single group and different
// users. If you need a relationship of a single user to many groups, please use
// the `UserGroupMemberships` resource.
//
// **Important**: The default behavior of the resource is to only maintain the
// state of user ids that are assigned it. This behavior will signal drift only if
// those users stop being part of the group. If the desired behavior is track all
// users that are added/removed from the group make use of the `trackAllUsers`
// argument with this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta/group"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testGroup, err := group.NewGroup(ctx, "testGroup", &group.GroupArgs{
//				Description: pulumi.String("testing, testing"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewGroupMemberships(ctx, "testGroupMemberships", &okta.GroupMembershipsArgs{
//				GroupId: testGroup.ID(),
//				Users: pulumi.StringArray{
//					okta_user.Test1.Id,
//					okta_user.Test2.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// an Okta Group's memberships can be imported via the Okta group ID.
//
// ```sh
//
//	$ pulumi import okta:index/groupMemberships:GroupMemberships test &#60;group id&#62;
//
// ```
type GroupMemberships struct {
	pulumi.CustomResourceState

	// Okta group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
	TrackAllUsers pulumi.BoolPtrOutput `pulumi:"trackAllUsers"`
	// The list of Okta user IDs which the group should have membership managed for.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewGroupMemberships registers a new resource with the given unique name, arguments, and options.
func NewGroupMemberships(ctx *pulumi.Context,
	name string, args *GroupMembershipsArgs, opts ...pulumi.ResourceOption) (*GroupMemberships, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource GroupMemberships
	err := ctx.RegisterResource("okta:index/groupMemberships:GroupMemberships", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMemberships gets an existing GroupMemberships resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMemberships(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipsState, opts ...pulumi.ResourceOption) (*GroupMemberships, error) {
	var resource GroupMemberships
	err := ctx.ReadResource("okta:index/groupMemberships:GroupMemberships", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMemberships resources.
type groupMembershipsState struct {
	// Okta group ID.
	GroupId *string `pulumi:"groupId"`
	// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
	TrackAllUsers *bool `pulumi:"trackAllUsers"`
	// The list of Okta user IDs which the group should have membership managed for.
	Users []string `pulumi:"users"`
}

type GroupMembershipsState struct {
	// Okta group ID.
	GroupId pulumi.StringPtrInput
	// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
	TrackAllUsers pulumi.BoolPtrInput
	// The list of Okta user IDs which the group should have membership managed for.
	Users pulumi.StringArrayInput
}

func (GroupMembershipsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipsState)(nil)).Elem()
}

type groupMembershipsArgs struct {
	// Okta group ID.
	GroupId string `pulumi:"groupId"`
	// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
	TrackAllUsers *bool `pulumi:"trackAllUsers"`
	// The list of Okta user IDs which the group should have membership managed for.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a GroupMemberships resource.
type GroupMembershipsArgs struct {
	// Okta group ID.
	GroupId pulumi.StringInput
	// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
	TrackAllUsers pulumi.BoolPtrInput
	// The list of Okta user IDs which the group should have membership managed for.
	Users pulumi.StringArrayInput
}

func (GroupMembershipsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipsArgs)(nil)).Elem()
}

type GroupMembershipsInput interface {
	pulumi.Input

	ToGroupMembershipsOutput() GroupMembershipsOutput
	ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput
}

func (*GroupMemberships) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMemberships)(nil)).Elem()
}

func (i *GroupMemberships) ToGroupMembershipsOutput() GroupMembershipsOutput {
	return i.ToGroupMembershipsOutputWithContext(context.Background())
}

func (i *GroupMemberships) ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipsOutput)
}

// GroupMembershipsArrayInput is an input type that accepts GroupMembershipsArray and GroupMembershipsArrayOutput values.
// You can construct a concrete instance of `GroupMembershipsArrayInput` via:
//
//	GroupMembershipsArray{ GroupMembershipsArgs{...} }
type GroupMembershipsArrayInput interface {
	pulumi.Input

	ToGroupMembershipsArrayOutput() GroupMembershipsArrayOutput
	ToGroupMembershipsArrayOutputWithContext(context.Context) GroupMembershipsArrayOutput
}

type GroupMembershipsArray []GroupMembershipsInput

func (GroupMembershipsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMemberships)(nil)).Elem()
}

func (i GroupMembershipsArray) ToGroupMembershipsArrayOutput() GroupMembershipsArrayOutput {
	return i.ToGroupMembershipsArrayOutputWithContext(context.Background())
}

func (i GroupMembershipsArray) ToGroupMembershipsArrayOutputWithContext(ctx context.Context) GroupMembershipsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipsArrayOutput)
}

// GroupMembershipsMapInput is an input type that accepts GroupMembershipsMap and GroupMembershipsMapOutput values.
// You can construct a concrete instance of `GroupMembershipsMapInput` via:
//
//	GroupMembershipsMap{ "key": GroupMembershipsArgs{...} }
type GroupMembershipsMapInput interface {
	pulumi.Input

	ToGroupMembershipsMapOutput() GroupMembershipsMapOutput
	ToGroupMembershipsMapOutputWithContext(context.Context) GroupMembershipsMapOutput
}

type GroupMembershipsMap map[string]GroupMembershipsInput

func (GroupMembershipsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMemberships)(nil)).Elem()
}

func (i GroupMembershipsMap) ToGroupMembershipsMapOutput() GroupMembershipsMapOutput {
	return i.ToGroupMembershipsMapOutputWithContext(context.Background())
}

func (i GroupMembershipsMap) ToGroupMembershipsMapOutputWithContext(ctx context.Context) GroupMembershipsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipsMapOutput)
}

type GroupMembershipsOutput struct{ *pulumi.OutputState }

func (GroupMembershipsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMemberships)(nil)).Elem()
}

func (o GroupMembershipsOutput) ToGroupMembershipsOutput() GroupMembershipsOutput {
	return o
}

func (o GroupMembershipsOutput) ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput {
	return o
}

// Okta group ID.
func (o GroupMembershipsOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMemberships) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The resource will concern itself with all users added/deleted to the group; even those managed outside of the resource.
func (o GroupMembershipsOutput) TrackAllUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupMemberships) pulumi.BoolPtrOutput { return v.TrackAllUsers }).(pulumi.BoolPtrOutput)
}

// The list of Okta user IDs which the group should have membership managed for.
func (o GroupMembershipsOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupMemberships) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type GroupMembershipsArrayOutput struct{ *pulumi.OutputState }

func (GroupMembershipsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMemberships)(nil)).Elem()
}

func (o GroupMembershipsArrayOutput) ToGroupMembershipsArrayOutput() GroupMembershipsArrayOutput {
	return o
}

func (o GroupMembershipsArrayOutput) ToGroupMembershipsArrayOutputWithContext(ctx context.Context) GroupMembershipsArrayOutput {
	return o
}

func (o GroupMembershipsArrayOutput) Index(i pulumi.IntInput) GroupMembershipsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupMemberships {
		return vs[0].([]*GroupMemberships)[vs[1].(int)]
	}).(GroupMembershipsOutput)
}

type GroupMembershipsMapOutput struct{ *pulumi.OutputState }

func (GroupMembershipsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMemberships)(nil)).Elem()
}

func (o GroupMembershipsMapOutput) ToGroupMembershipsMapOutput() GroupMembershipsMapOutput {
	return o
}

func (o GroupMembershipsMapOutput) ToGroupMembershipsMapOutputWithContext(ctx context.Context) GroupMembershipsMapOutput {
	return o
}

func (o GroupMembershipsMapOutput) MapIndex(k pulumi.StringInput) GroupMembershipsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupMemberships {
		return vs[0].(map[string]*GroupMemberships)[vs[1].(string)]
	}).(GroupMembershipsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipsInput)(nil)).Elem(), &GroupMemberships{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipsArrayInput)(nil)).Elem(), GroupMembershipsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipsMapInput)(nil)).Elem(), GroupMembershipsMap{})
	pulumi.RegisterOutputType(GroupMembershipsOutput{})
	pulumi.RegisterOutputType(GroupMembershipsArrayOutput{})
	pulumi.RegisterOutputType(GroupMembershipsMapOutput{})
}
