// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type OrgSupport struct {
	pulumi.CustomResourceState

	// Expiration of Okta Support
	Expiration pulumi.StringOutput `pulumi:"expiration"`
	// Number of days the support should be extended by
	ExtendBy pulumi.IntPtrOutput `pulumi:"extendBy"`
	// Status of Okta Support
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewOrgSupport registers a new resource with the given unique name, arguments, and options.
func NewOrgSupport(ctx *pulumi.Context,
	name string, args *OrgSupportArgs, opts ...pulumi.ResourceOption) (*OrgSupport, error) {
	if args == nil {
		args = &OrgSupportArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgSupport
	err := ctx.RegisterResource("okta:index/orgSupport:OrgSupport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgSupport gets an existing OrgSupport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgSupport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgSupportState, opts ...pulumi.ResourceOption) (*OrgSupport, error) {
	var resource OrgSupport
	err := ctx.ReadResource("okta:index/orgSupport:OrgSupport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgSupport resources.
type orgSupportState struct {
	// Expiration of Okta Support
	Expiration *string `pulumi:"expiration"`
	// Number of days the support should be extended by
	ExtendBy *int `pulumi:"extendBy"`
	// Status of Okta Support
	Status *string `pulumi:"status"`
}

type OrgSupportState struct {
	// Expiration of Okta Support
	Expiration pulumi.StringPtrInput
	// Number of days the support should be extended by
	ExtendBy pulumi.IntPtrInput
	// Status of Okta Support
	Status pulumi.StringPtrInput
}

func (OrgSupportState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgSupportState)(nil)).Elem()
}

type orgSupportArgs struct {
	// Number of days the support should be extended by
	ExtendBy *int `pulumi:"extendBy"`
}

// The set of arguments for constructing a OrgSupport resource.
type OrgSupportArgs struct {
	// Number of days the support should be extended by
	ExtendBy pulumi.IntPtrInput
}

func (OrgSupportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgSupportArgs)(nil)).Elem()
}

type OrgSupportInput interface {
	pulumi.Input

	ToOrgSupportOutput() OrgSupportOutput
	ToOrgSupportOutputWithContext(ctx context.Context) OrgSupportOutput
}

func (*OrgSupport) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgSupport)(nil)).Elem()
}

func (i *OrgSupport) ToOrgSupportOutput() OrgSupportOutput {
	return i.ToOrgSupportOutputWithContext(context.Background())
}

func (i *OrgSupport) ToOrgSupportOutputWithContext(ctx context.Context) OrgSupportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSupportOutput)
}

func (i *OrgSupport) ToOutput(ctx context.Context) pulumix.Output[*OrgSupport] {
	return pulumix.Output[*OrgSupport]{
		OutputState: i.ToOrgSupportOutputWithContext(ctx).OutputState,
	}
}

// OrgSupportArrayInput is an input type that accepts OrgSupportArray and OrgSupportArrayOutput values.
// You can construct a concrete instance of `OrgSupportArrayInput` via:
//
//	OrgSupportArray{ OrgSupportArgs{...} }
type OrgSupportArrayInput interface {
	pulumi.Input

	ToOrgSupportArrayOutput() OrgSupportArrayOutput
	ToOrgSupportArrayOutputWithContext(context.Context) OrgSupportArrayOutput
}

type OrgSupportArray []OrgSupportInput

func (OrgSupportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgSupport)(nil)).Elem()
}

func (i OrgSupportArray) ToOrgSupportArrayOutput() OrgSupportArrayOutput {
	return i.ToOrgSupportArrayOutputWithContext(context.Background())
}

func (i OrgSupportArray) ToOrgSupportArrayOutputWithContext(ctx context.Context) OrgSupportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSupportArrayOutput)
}

func (i OrgSupportArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrgSupport] {
	return pulumix.Output[[]*OrgSupport]{
		OutputState: i.ToOrgSupportArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgSupportMapInput is an input type that accepts OrgSupportMap and OrgSupportMapOutput values.
// You can construct a concrete instance of `OrgSupportMapInput` via:
//
//	OrgSupportMap{ "key": OrgSupportArgs{...} }
type OrgSupportMapInput interface {
	pulumi.Input

	ToOrgSupportMapOutput() OrgSupportMapOutput
	ToOrgSupportMapOutputWithContext(context.Context) OrgSupportMapOutput
}

type OrgSupportMap map[string]OrgSupportInput

func (OrgSupportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgSupport)(nil)).Elem()
}

func (i OrgSupportMap) ToOrgSupportMapOutput() OrgSupportMapOutput {
	return i.ToOrgSupportMapOutputWithContext(context.Background())
}

func (i OrgSupportMap) ToOrgSupportMapOutputWithContext(ctx context.Context) OrgSupportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSupportMapOutput)
}

func (i OrgSupportMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgSupport] {
	return pulumix.Output[map[string]*OrgSupport]{
		OutputState: i.ToOrgSupportMapOutputWithContext(ctx).OutputState,
	}
}

type OrgSupportOutput struct{ *pulumi.OutputState }

func (OrgSupportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgSupport)(nil)).Elem()
}

func (o OrgSupportOutput) ToOrgSupportOutput() OrgSupportOutput {
	return o
}

func (o OrgSupportOutput) ToOrgSupportOutputWithContext(ctx context.Context) OrgSupportOutput {
	return o
}

func (o OrgSupportOutput) ToOutput(ctx context.Context) pulumix.Output[*OrgSupport] {
	return pulumix.Output[*OrgSupport]{
		OutputState: o.OutputState,
	}
}

// Expiration of Okta Support
func (o OrgSupportOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgSupport) pulumi.StringOutput { return v.Expiration }).(pulumi.StringOutput)
}

// Number of days the support should be extended by
func (o OrgSupportOutput) ExtendBy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgSupport) pulumi.IntPtrOutput { return v.ExtendBy }).(pulumi.IntPtrOutput)
}

// Status of Okta Support
func (o OrgSupportOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgSupport) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type OrgSupportArrayOutput struct{ *pulumi.OutputState }

func (OrgSupportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgSupport)(nil)).Elem()
}

func (o OrgSupportArrayOutput) ToOrgSupportArrayOutput() OrgSupportArrayOutput {
	return o
}

func (o OrgSupportArrayOutput) ToOrgSupportArrayOutputWithContext(ctx context.Context) OrgSupportArrayOutput {
	return o
}

func (o OrgSupportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrgSupport] {
	return pulumix.Output[[]*OrgSupport]{
		OutputState: o.OutputState,
	}
}

func (o OrgSupportArrayOutput) Index(i pulumi.IntInput) OrgSupportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgSupport {
		return vs[0].([]*OrgSupport)[vs[1].(int)]
	}).(OrgSupportOutput)
}

type OrgSupportMapOutput struct{ *pulumi.OutputState }

func (OrgSupportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgSupport)(nil)).Elem()
}

func (o OrgSupportMapOutput) ToOrgSupportMapOutput() OrgSupportMapOutput {
	return o
}

func (o OrgSupportMapOutput) ToOrgSupportMapOutputWithContext(ctx context.Context) OrgSupportMapOutput {
	return o
}

func (o OrgSupportMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgSupport] {
	return pulumix.Output[map[string]*OrgSupport]{
		OutputState: o.OutputState,
	}
}

func (o OrgSupportMapOutput) MapIndex(k pulumi.StringInput) OrgSupportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgSupport {
		return vs[0].(map[string]*OrgSupport)[vs[1].(string)]
	}).(OrgSupportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSupportInput)(nil)).Elem(), &OrgSupport{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSupportArrayInput)(nil)).Elem(), OrgSupportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSupportMapInput)(nil)).Elem(), OrgSupportMap{})
	pulumi.RegisterOutputType(OrgSupportOutput{})
	pulumi.RegisterOutputType(OrgSupportArrayOutput{})
	pulumi.RegisterOutputType(OrgSupportMapOutput{})
}
