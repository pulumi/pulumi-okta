// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v5/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RealmAssignment struct {
	pulumi.CustomResourceState

	// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
	// `user.profile.state.contains("example")`.
	ConditionExpression pulumi.StringPtrOutput `pulumi:"conditionExpression"`
	// Indicates whether the realm assignment is the default.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// The name of the Okta Realm Assignment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Priority of the Realm Assignment. The lower the number, the higher the priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The ID of the Profile Source.
	ProfileSourceId pulumi.StringOutput `pulumi:"profileSourceId"`
	// The ID of the Realm asscociated with the Realm Assignment.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewRealmAssignment registers a new resource with the given unique name, arguments, and options.
func NewRealmAssignment(ctx *pulumi.Context,
	name string, args *RealmAssignmentArgs, opts ...pulumi.ResourceOption) (*RealmAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfileSourceId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileSourceId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RealmAssignment
	err := ctx.RegisterResource("okta:index/realmAssignment:RealmAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmAssignment gets an existing RealmAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmAssignmentState, opts ...pulumi.ResourceOption) (*RealmAssignment, error) {
	var resource RealmAssignment
	err := ctx.ReadResource("okta:index/realmAssignment:RealmAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmAssignment resources.
type realmAssignmentState struct {
	// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
	// `user.profile.state.contains("example")`.
	ConditionExpression *string `pulumi:"conditionExpression"`
	// Indicates whether the realm assignment is the default.
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the Okta Realm Assignment.
	Name *string `pulumi:"name"`
	// The Priority of the Realm Assignment. The lower the number, the higher the priority.
	Priority *int `pulumi:"priority"`
	// The ID of the Profile Source.
	ProfileSourceId *string `pulumi:"profileSourceId"`
	// The ID of the Realm asscociated with the Realm Assignment.
	RealmId *string `pulumi:"realmId"`
	// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
}

type RealmAssignmentState struct {
	// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
	// `user.profile.state.contains("example")`.
	ConditionExpression pulumi.StringPtrInput
	// Indicates whether the realm assignment is the default.
	IsDefault pulumi.BoolPtrInput
	// The name of the Okta Realm Assignment.
	Name pulumi.StringPtrInput
	// The Priority of the Realm Assignment. The lower the number, the higher the priority.
	Priority pulumi.IntPtrInput
	// The ID of the Profile Source.
	ProfileSourceId pulumi.StringPtrInput
	// The ID of the Realm asscociated with the Realm Assignment.
	RealmId pulumi.StringPtrInput
	// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringPtrInput
}

func (RealmAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmAssignmentState)(nil)).Elem()
}

type realmAssignmentArgs struct {
	// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
	// `user.profile.state.contains("example")`.
	ConditionExpression *string `pulumi:"conditionExpression"`
	// The name of the Okta Realm Assignment.
	Name *string `pulumi:"name"`
	// The Priority of the Realm Assignment. The lower the number, the higher the priority.
	Priority *int `pulumi:"priority"`
	// The ID of the Profile Source.
	ProfileSourceId string `pulumi:"profileSourceId"`
	// The ID of the Realm asscociated with the Realm Assignment.
	RealmId string `pulumi:"realmId"`
	// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a RealmAssignment resource.
type RealmAssignmentArgs struct {
	// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
	// `user.profile.state.contains("example")`.
	ConditionExpression pulumi.StringPtrInput
	// The name of the Okta Realm Assignment.
	Name pulumi.StringPtrInput
	// The Priority of the Realm Assignment. The lower the number, the higher the priority.
	Priority pulumi.IntPtrInput
	// The ID of the Profile Source.
	ProfileSourceId pulumi.StringInput
	// The ID of the Realm asscociated with the Realm Assignment.
	RealmId pulumi.StringInput
	// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringPtrInput
}

func (RealmAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmAssignmentArgs)(nil)).Elem()
}

type RealmAssignmentInput interface {
	pulumi.Input

	ToRealmAssignmentOutput() RealmAssignmentOutput
	ToRealmAssignmentOutputWithContext(ctx context.Context) RealmAssignmentOutput
}

func (*RealmAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmAssignment)(nil)).Elem()
}

func (i *RealmAssignment) ToRealmAssignmentOutput() RealmAssignmentOutput {
	return i.ToRealmAssignmentOutputWithContext(context.Background())
}

func (i *RealmAssignment) ToRealmAssignmentOutputWithContext(ctx context.Context) RealmAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmAssignmentOutput)
}

// RealmAssignmentArrayInput is an input type that accepts RealmAssignmentArray and RealmAssignmentArrayOutput values.
// You can construct a concrete instance of `RealmAssignmentArrayInput` via:
//
//	RealmAssignmentArray{ RealmAssignmentArgs{...} }
type RealmAssignmentArrayInput interface {
	pulumi.Input

	ToRealmAssignmentArrayOutput() RealmAssignmentArrayOutput
	ToRealmAssignmentArrayOutputWithContext(context.Context) RealmAssignmentArrayOutput
}

type RealmAssignmentArray []RealmAssignmentInput

func (RealmAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmAssignment)(nil)).Elem()
}

func (i RealmAssignmentArray) ToRealmAssignmentArrayOutput() RealmAssignmentArrayOutput {
	return i.ToRealmAssignmentArrayOutputWithContext(context.Background())
}

func (i RealmAssignmentArray) ToRealmAssignmentArrayOutputWithContext(ctx context.Context) RealmAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmAssignmentArrayOutput)
}

// RealmAssignmentMapInput is an input type that accepts RealmAssignmentMap and RealmAssignmentMapOutput values.
// You can construct a concrete instance of `RealmAssignmentMapInput` via:
//
//	RealmAssignmentMap{ "key": RealmAssignmentArgs{...} }
type RealmAssignmentMapInput interface {
	pulumi.Input

	ToRealmAssignmentMapOutput() RealmAssignmentMapOutput
	ToRealmAssignmentMapOutputWithContext(context.Context) RealmAssignmentMapOutput
}

type RealmAssignmentMap map[string]RealmAssignmentInput

func (RealmAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmAssignment)(nil)).Elem()
}

func (i RealmAssignmentMap) ToRealmAssignmentMapOutput() RealmAssignmentMapOutput {
	return i.ToRealmAssignmentMapOutputWithContext(context.Background())
}

func (i RealmAssignmentMap) ToRealmAssignmentMapOutputWithContext(ctx context.Context) RealmAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmAssignmentMapOutput)
}

type RealmAssignmentOutput struct{ *pulumi.OutputState }

func (RealmAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmAssignment)(nil)).Elem()
}

func (o RealmAssignmentOutput) ToRealmAssignmentOutput() RealmAssignmentOutput {
	return o
}

func (o RealmAssignmentOutput) ToRealmAssignmentOutputWithContext(ctx context.Context) RealmAssignmentOutput {
	return o
}

// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
// `user.profile.state.contains("example")`.
func (o RealmAssignmentOutput) ConditionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.StringPtrOutput { return v.ConditionExpression }).(pulumi.StringPtrOutput)
}

// Indicates whether the realm assignment is the default.
func (o RealmAssignmentOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// The name of the Okta Realm Assignment.
func (o RealmAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Priority of the Realm Assignment. The lower the number, the higher the priority.
func (o RealmAssignmentOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The ID of the Profile Source.
func (o RealmAssignmentOutput) ProfileSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.StringOutput { return v.ProfileSourceId }).(pulumi.StringOutput)
}

// The ID of the Realm asscociated with the Realm Assignment.
func (o RealmAssignmentOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
func (o RealmAssignmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmAssignment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type RealmAssignmentArrayOutput struct{ *pulumi.OutputState }

func (RealmAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmAssignment)(nil)).Elem()
}

func (o RealmAssignmentArrayOutput) ToRealmAssignmentArrayOutput() RealmAssignmentArrayOutput {
	return o
}

func (o RealmAssignmentArrayOutput) ToRealmAssignmentArrayOutputWithContext(ctx context.Context) RealmAssignmentArrayOutput {
	return o
}

func (o RealmAssignmentArrayOutput) Index(i pulumi.IntInput) RealmAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmAssignment {
		return vs[0].([]*RealmAssignment)[vs[1].(int)]
	}).(RealmAssignmentOutput)
}

type RealmAssignmentMapOutput struct{ *pulumi.OutputState }

func (RealmAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmAssignment)(nil)).Elem()
}

func (o RealmAssignmentMapOutput) ToRealmAssignmentMapOutput() RealmAssignmentMapOutput {
	return o
}

func (o RealmAssignmentMapOutput) ToRealmAssignmentMapOutputWithContext(ctx context.Context) RealmAssignmentMapOutput {
	return o
}

func (o RealmAssignmentMapOutput) MapIndex(k pulumi.StringInput) RealmAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmAssignment {
		return vs[0].(map[string]*RealmAssignment)[vs[1].(string)]
	}).(RealmAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmAssignmentInput)(nil)).Elem(), &RealmAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmAssignmentArrayInput)(nil)).Elem(), RealmAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmAssignmentMapInput)(nil)).Elem(), RealmAssignmentMap{})
	pulumi.RegisterOutputType(RealmAssignmentOutput{})
	pulumi.RegisterOutputType(RealmAssignmentArrayOutput{})
	pulumi.RegisterOutputType(RealmAssignmentMapOutput{})
}
