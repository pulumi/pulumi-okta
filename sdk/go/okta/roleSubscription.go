// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to configure subscriptions of a Role with a specific type.
// Check [configure email notifications](https://help.okta.com/oie/en-us/Content/Topics/Security/custom-admin-role/administrator-email-settings.htm)
// page regarding what notifications are available for specific admin roles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewRoleSubscription(ctx, "test", &okta.RoleSubscriptionArgs{
//				NotificationType: pulumi.String("APP_IMPORT"),
//				RoleType:         pulumi.String("SUPER_ADMIN"),
//				Status:           pulumi.String("unsubscribed"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A role subscription can be imported via the Okta ID.
//
// ```sh
//
//	$ pulumi import okta:index/roleSubscription:RoleSubscription example &#60;role_type&#62;/&#60;notification_type&#62;
//
// ```
type RoleSubscription struct {
	pulumi.CustomResourceState

	// Type of the notification. Valid values:
	// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
	// - `"USER_LOCKED_OUT"` - User lockouts.
	// - `"APP_IMPORT"` - App user import status.
	// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
	// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
	// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
	// - `"OKTA_ISSUE"` - Trust incidents and updates.
	// - `"OKTA_UPDATE"` - Scheduled system updates.
	// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
	// - `"USER_DEPROVISION"` - User deprovisions.
	// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
	// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
	// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
	NotificationType pulumi.StringOutput `pulumi:"notificationType"`
	// Type of the role. Valid values:
	// `"API_ADMIN"`,
	// `"APP_ADMIN"`,
	// `"CUSTOM"`,
	// `"GROUP_MEMBERSHIP_ADMIN"`,
	// `"HELP_DESK_ADMIN"`,
	// `"MOBILE_ADMIN"`,
	// `"ORG_ADMIN"`,
	// `"READ_ONLY_ADMIN"`,
	// `"REPORT_ADMIN"`,
	// `"SUPER_ADMIN"`,
	// `"USER_ADMIN"`
	// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
	RoleType pulumi.StringOutput `pulumi:"roleType"`
	// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewRoleSubscription registers a new resource with the given unique name, arguments, and options.
func NewRoleSubscription(ctx *pulumi.Context,
	name string, args *RoleSubscriptionArgs, opts ...pulumi.ResourceOption) (*RoleSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.RoleType == nil {
		return nil, errors.New("invalid value for required argument 'RoleType'")
	}
	var resource RoleSubscription
	err := ctx.RegisterResource("okta:index/roleSubscription:RoleSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleSubscription gets an existing RoleSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleSubscriptionState, opts ...pulumi.ResourceOption) (*RoleSubscription, error) {
	var resource RoleSubscription
	err := ctx.ReadResource("okta:index/roleSubscription:RoleSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleSubscription resources.
type roleSubscriptionState struct {
	// Type of the notification. Valid values:
	// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
	// - `"USER_LOCKED_OUT"` - User lockouts.
	// - `"APP_IMPORT"` - App user import status.
	// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
	// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
	// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
	// - `"OKTA_ISSUE"` - Trust incidents and updates.
	// - `"OKTA_UPDATE"` - Scheduled system updates.
	// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
	// - `"USER_DEPROVISION"` - User deprovisions.
	// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
	// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
	// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
	NotificationType *string `pulumi:"notificationType"`
	// Type of the role. Valid values:
	// `"API_ADMIN"`,
	// `"APP_ADMIN"`,
	// `"CUSTOM"`,
	// `"GROUP_MEMBERSHIP_ADMIN"`,
	// `"HELP_DESK_ADMIN"`,
	// `"MOBILE_ADMIN"`,
	// `"ORG_ADMIN"`,
	// `"READ_ONLY_ADMIN"`,
	// `"REPORT_ADMIN"`,
	// `"SUPER_ADMIN"`,
	// `"USER_ADMIN"`
	// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
	RoleType *string `pulumi:"roleType"`
	// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
	Status *string `pulumi:"status"`
}

type RoleSubscriptionState struct {
	// Type of the notification. Valid values:
	// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
	// - `"USER_LOCKED_OUT"` - User lockouts.
	// - `"APP_IMPORT"` - App user import status.
	// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
	// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
	// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
	// - `"OKTA_ISSUE"` - Trust incidents and updates.
	// - `"OKTA_UPDATE"` - Scheduled system updates.
	// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
	// - `"USER_DEPROVISION"` - User deprovisions.
	// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
	// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
	// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
	NotificationType pulumi.StringPtrInput
	// Type of the role. Valid values:
	// `"API_ADMIN"`,
	// `"APP_ADMIN"`,
	// `"CUSTOM"`,
	// `"GROUP_MEMBERSHIP_ADMIN"`,
	// `"HELP_DESK_ADMIN"`,
	// `"MOBILE_ADMIN"`,
	// `"ORG_ADMIN"`,
	// `"READ_ONLY_ADMIN"`,
	// `"REPORT_ADMIN"`,
	// `"SUPER_ADMIN"`,
	// `"USER_ADMIN"`
	// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
	RoleType pulumi.StringPtrInput
	// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
	Status pulumi.StringPtrInput
}

func (RoleSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleSubscriptionState)(nil)).Elem()
}

type roleSubscriptionArgs struct {
	// Type of the notification. Valid values:
	// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
	// - `"USER_LOCKED_OUT"` - User lockouts.
	// - `"APP_IMPORT"` - App user import status.
	// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
	// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
	// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
	// - `"OKTA_ISSUE"` - Trust incidents and updates.
	// - `"OKTA_UPDATE"` - Scheduled system updates.
	// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
	// - `"USER_DEPROVISION"` - User deprovisions.
	// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
	// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
	// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
	NotificationType string `pulumi:"notificationType"`
	// Type of the role. Valid values:
	// `"API_ADMIN"`,
	// `"APP_ADMIN"`,
	// `"CUSTOM"`,
	// `"GROUP_MEMBERSHIP_ADMIN"`,
	// `"HELP_DESK_ADMIN"`,
	// `"MOBILE_ADMIN"`,
	// `"ORG_ADMIN"`,
	// `"READ_ONLY_ADMIN"`,
	// `"REPORT_ADMIN"`,
	// `"SUPER_ADMIN"`,
	// `"USER_ADMIN"`
	// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
	RoleType string `pulumi:"roleType"`
	// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a RoleSubscription resource.
type RoleSubscriptionArgs struct {
	// Type of the notification. Valid values:
	// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
	// - `"USER_LOCKED_OUT"` - User lockouts.
	// - `"APP_IMPORT"` - App user import status.
	// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
	// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
	// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
	// - `"OKTA_ISSUE"` - Trust incidents and updates.
	// - `"OKTA_UPDATE"` - Scheduled system updates.
	// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
	// - `"USER_DEPROVISION"` - User deprovisions.
	// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
	// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
	// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
	NotificationType pulumi.StringInput
	// Type of the role. Valid values:
	// `"API_ADMIN"`,
	// `"APP_ADMIN"`,
	// `"CUSTOM"`,
	// `"GROUP_MEMBERSHIP_ADMIN"`,
	// `"HELP_DESK_ADMIN"`,
	// `"MOBILE_ADMIN"`,
	// `"ORG_ADMIN"`,
	// `"READ_ONLY_ADMIN"`,
	// `"REPORT_ADMIN"`,
	// `"SUPER_ADMIN"`,
	// `"USER_ADMIN"`
	// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
	RoleType pulumi.StringInput
	// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
	Status pulumi.StringPtrInput
}

func (RoleSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleSubscriptionArgs)(nil)).Elem()
}

type RoleSubscriptionInput interface {
	pulumi.Input

	ToRoleSubscriptionOutput() RoleSubscriptionOutput
	ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput
}

func (*RoleSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleSubscription)(nil)).Elem()
}

func (i *RoleSubscription) ToRoleSubscriptionOutput() RoleSubscriptionOutput {
	return i.ToRoleSubscriptionOutputWithContext(context.Background())
}

func (i *RoleSubscription) ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionOutput)
}

// RoleSubscriptionArrayInput is an input type that accepts RoleSubscriptionArray and RoleSubscriptionArrayOutput values.
// You can construct a concrete instance of `RoleSubscriptionArrayInput` via:
//
//	RoleSubscriptionArray{ RoleSubscriptionArgs{...} }
type RoleSubscriptionArrayInput interface {
	pulumi.Input

	ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput
	ToRoleSubscriptionArrayOutputWithContext(context.Context) RoleSubscriptionArrayOutput
}

type RoleSubscriptionArray []RoleSubscriptionInput

func (RoleSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleSubscription)(nil)).Elem()
}

func (i RoleSubscriptionArray) ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput {
	return i.ToRoleSubscriptionArrayOutputWithContext(context.Background())
}

func (i RoleSubscriptionArray) ToRoleSubscriptionArrayOutputWithContext(ctx context.Context) RoleSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionArrayOutput)
}

// RoleSubscriptionMapInput is an input type that accepts RoleSubscriptionMap and RoleSubscriptionMapOutput values.
// You can construct a concrete instance of `RoleSubscriptionMapInput` via:
//
//	RoleSubscriptionMap{ "key": RoleSubscriptionArgs{...} }
type RoleSubscriptionMapInput interface {
	pulumi.Input

	ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput
	ToRoleSubscriptionMapOutputWithContext(context.Context) RoleSubscriptionMapOutput
}

type RoleSubscriptionMap map[string]RoleSubscriptionInput

func (RoleSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleSubscription)(nil)).Elem()
}

func (i RoleSubscriptionMap) ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput {
	return i.ToRoleSubscriptionMapOutputWithContext(context.Background())
}

func (i RoleSubscriptionMap) ToRoleSubscriptionMapOutputWithContext(ctx context.Context) RoleSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionMapOutput)
}

type RoleSubscriptionOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionOutput) ToRoleSubscriptionOutput() RoleSubscriptionOutput {
	return o
}

func (o RoleSubscriptionOutput) ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput {
	return o
}

// Type of the notification. Valid values:
// - `"CONNECTOR_AGENT"` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
// - `"USER_LOCKED_OUT"` - User lockouts.
// - `"APP_IMPORT"` - App user import status.
// - `"LDAP_AGENT"` - Disconnects and reconnects: LDAP agent.
// - `"AD_AGENT"` - Disconnects and reconnects: AD agent.
// - `"OKTA_ANNOUNCEMENT"` - Okta release notes and announcements.
// - `"OKTA_ISSUE"` - Trust incidents and updates.
// - `"OKTA_UPDATE"` - Scheduled system updates.
// - `"IWA_AGENT"` - Disconnects and reconnects: IWA agent.
// - `"USER_DEPROVISION"` - User deprovisions.
// - `"REPORT_SUSPICIOUS_ACTIVITY"` - User reporting of suspicious activity.
// - `"RATELIMIT_NOTIFICATION"` - Rate limit warning and violation.
// - `"AGENT_AUTO_UPDATE_NOTIFICATION"` - Agent auto-update notifications: AD Agent.
func (o RoleSubscriptionOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringOutput { return v.NotificationType }).(pulumi.StringOutput)
}

// Type of the role. Valid values:
// `"API_ADMIN"`,
// `"APP_ADMIN"`,
// `"CUSTOM"`,
// `"GROUP_MEMBERSHIP_ADMIN"`,
// `"HELP_DESK_ADMIN"`,
// `"MOBILE_ADMIN"`,
// `"ORG_ADMIN"`,
// `"READ_ONLY_ADMIN"`,
// `"REPORT_ADMIN"`,
// `"SUPER_ADMIN"`,
// `"USER_ADMIN"`
// . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
func (o RoleSubscriptionOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringOutput { return v.RoleType }).(pulumi.StringOutput)
}

// Subscription status. Valid values: `"subscribed"`, `"unsubscribed"`.
func (o RoleSubscriptionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type RoleSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionArrayOutput) ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput {
	return o
}

func (o RoleSubscriptionArrayOutput) ToRoleSubscriptionArrayOutputWithContext(ctx context.Context) RoleSubscriptionArrayOutput {
	return o
}

func (o RoleSubscriptionArrayOutput) Index(i pulumi.IntInput) RoleSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleSubscription {
		return vs[0].([]*RoleSubscription)[vs[1].(int)]
	}).(RoleSubscriptionOutput)
}

type RoleSubscriptionMapOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionMapOutput) ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput {
	return o
}

func (o RoleSubscriptionMapOutput) ToRoleSubscriptionMapOutputWithContext(ctx context.Context) RoleSubscriptionMapOutput {
	return o
}

func (o RoleSubscriptionMapOutput) MapIndex(k pulumi.StringInput) RoleSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleSubscription {
		return vs[0].(map[string]*RoleSubscription)[vs[1].(string)]
	}).(RoleSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionInput)(nil)).Elem(), &RoleSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionArrayInput)(nil)).Elem(), RoleSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionMapInput)(nil)).Elem(), RoleSubscriptionMap{})
	pulumi.RegisterOutputType(RoleSubscriptionOutput{})
	pulumi.RegisterOutputType(RoleSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(RoleSubscriptionMapOutput{})
}
