// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RoleSubscription struct {
	pulumi.CustomResourceState

	// Type of the notification
	NotificationType pulumi.StringOutput `pulumi:"notificationType"`
	// Type of the role
	RoleType pulumi.StringOutput `pulumi:"roleType"`
	// Status of subscription
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewRoleSubscription registers a new resource with the given unique name, arguments, and options.
func NewRoleSubscription(ctx *pulumi.Context,
	name string, args *RoleSubscriptionArgs, opts ...pulumi.ResourceOption) (*RoleSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.RoleType == nil {
		return nil, errors.New("invalid value for required argument 'RoleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleSubscription
	err := ctx.RegisterResource("okta:index/roleSubscription:RoleSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleSubscription gets an existing RoleSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleSubscriptionState, opts ...pulumi.ResourceOption) (*RoleSubscription, error) {
	var resource RoleSubscription
	err := ctx.ReadResource("okta:index/roleSubscription:RoleSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleSubscription resources.
type roleSubscriptionState struct {
	// Type of the notification
	NotificationType *string `pulumi:"notificationType"`
	// Type of the role
	RoleType *string `pulumi:"roleType"`
	// Status of subscription
	Status *string `pulumi:"status"`
}

type RoleSubscriptionState struct {
	// Type of the notification
	NotificationType pulumi.StringPtrInput
	// Type of the role
	RoleType pulumi.StringPtrInput
	// Status of subscription
	Status pulumi.StringPtrInput
}

func (RoleSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleSubscriptionState)(nil)).Elem()
}

type roleSubscriptionArgs struct {
	// Type of the notification
	NotificationType string `pulumi:"notificationType"`
	// Type of the role
	RoleType string `pulumi:"roleType"`
	// Status of subscription
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a RoleSubscription resource.
type RoleSubscriptionArgs struct {
	// Type of the notification
	NotificationType pulumi.StringInput
	// Type of the role
	RoleType pulumi.StringInput
	// Status of subscription
	Status pulumi.StringPtrInput
}

func (RoleSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleSubscriptionArgs)(nil)).Elem()
}

type RoleSubscriptionInput interface {
	pulumi.Input

	ToRoleSubscriptionOutput() RoleSubscriptionOutput
	ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput
}

func (*RoleSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleSubscription)(nil)).Elem()
}

func (i *RoleSubscription) ToRoleSubscriptionOutput() RoleSubscriptionOutput {
	return i.ToRoleSubscriptionOutputWithContext(context.Background())
}

func (i *RoleSubscription) ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionOutput)
}

func (i *RoleSubscription) ToOutput(ctx context.Context) pulumix.Output[*RoleSubscription] {
	return pulumix.Output[*RoleSubscription]{
		OutputState: i.ToRoleSubscriptionOutputWithContext(ctx).OutputState,
	}
}

// RoleSubscriptionArrayInput is an input type that accepts RoleSubscriptionArray and RoleSubscriptionArrayOutput values.
// You can construct a concrete instance of `RoleSubscriptionArrayInput` via:
//
//	RoleSubscriptionArray{ RoleSubscriptionArgs{...} }
type RoleSubscriptionArrayInput interface {
	pulumi.Input

	ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput
	ToRoleSubscriptionArrayOutputWithContext(context.Context) RoleSubscriptionArrayOutput
}

type RoleSubscriptionArray []RoleSubscriptionInput

func (RoleSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleSubscription)(nil)).Elem()
}

func (i RoleSubscriptionArray) ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput {
	return i.ToRoleSubscriptionArrayOutputWithContext(context.Background())
}

func (i RoleSubscriptionArray) ToRoleSubscriptionArrayOutputWithContext(ctx context.Context) RoleSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionArrayOutput)
}

func (i RoleSubscriptionArray) ToOutput(ctx context.Context) pulumix.Output[[]*RoleSubscription] {
	return pulumix.Output[[]*RoleSubscription]{
		OutputState: i.ToRoleSubscriptionArrayOutputWithContext(ctx).OutputState,
	}
}

// RoleSubscriptionMapInput is an input type that accepts RoleSubscriptionMap and RoleSubscriptionMapOutput values.
// You can construct a concrete instance of `RoleSubscriptionMapInput` via:
//
//	RoleSubscriptionMap{ "key": RoleSubscriptionArgs{...} }
type RoleSubscriptionMapInput interface {
	pulumi.Input

	ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput
	ToRoleSubscriptionMapOutputWithContext(context.Context) RoleSubscriptionMapOutput
}

type RoleSubscriptionMap map[string]RoleSubscriptionInput

func (RoleSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleSubscription)(nil)).Elem()
}

func (i RoleSubscriptionMap) ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput {
	return i.ToRoleSubscriptionMapOutputWithContext(context.Background())
}

func (i RoleSubscriptionMap) ToRoleSubscriptionMapOutputWithContext(ctx context.Context) RoleSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSubscriptionMapOutput)
}

func (i RoleSubscriptionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RoleSubscription] {
	return pulumix.Output[map[string]*RoleSubscription]{
		OutputState: i.ToRoleSubscriptionMapOutputWithContext(ctx).OutputState,
	}
}

type RoleSubscriptionOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionOutput) ToRoleSubscriptionOutput() RoleSubscriptionOutput {
	return o
}

func (o RoleSubscriptionOutput) ToRoleSubscriptionOutputWithContext(ctx context.Context) RoleSubscriptionOutput {
	return o
}

func (o RoleSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[*RoleSubscription] {
	return pulumix.Output[*RoleSubscription]{
		OutputState: o.OutputState,
	}
}

// Type of the notification
func (o RoleSubscriptionOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringOutput { return v.NotificationType }).(pulumi.StringOutput)
}

// Type of the role
func (o RoleSubscriptionOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringOutput { return v.RoleType }).(pulumi.StringOutput)
}

// Status of subscription
func (o RoleSubscriptionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleSubscription) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type RoleSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionArrayOutput) ToRoleSubscriptionArrayOutput() RoleSubscriptionArrayOutput {
	return o
}

func (o RoleSubscriptionArrayOutput) ToRoleSubscriptionArrayOutputWithContext(ctx context.Context) RoleSubscriptionArrayOutput {
	return o
}

func (o RoleSubscriptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RoleSubscription] {
	return pulumix.Output[[]*RoleSubscription]{
		OutputState: o.OutputState,
	}
}

func (o RoleSubscriptionArrayOutput) Index(i pulumi.IntInput) RoleSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleSubscription {
		return vs[0].([]*RoleSubscription)[vs[1].(int)]
	}).(RoleSubscriptionOutput)
}

type RoleSubscriptionMapOutput struct{ *pulumi.OutputState }

func (RoleSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleSubscription)(nil)).Elem()
}

func (o RoleSubscriptionMapOutput) ToRoleSubscriptionMapOutput() RoleSubscriptionMapOutput {
	return o
}

func (o RoleSubscriptionMapOutput) ToRoleSubscriptionMapOutputWithContext(ctx context.Context) RoleSubscriptionMapOutput {
	return o
}

func (o RoleSubscriptionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RoleSubscription] {
	return pulumix.Output[map[string]*RoleSubscription]{
		OutputState: o.OutputState,
	}
}

func (o RoleSubscriptionMapOutput) MapIndex(k pulumi.StringInput) RoleSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleSubscription {
		return vs[0].(map[string]*RoleSubscription)[vs[1].(string)]
	}).(RoleSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionInput)(nil)).Elem(), &RoleSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionArrayInput)(nil)).Elem(), RoleSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleSubscriptionMapInput)(nil)).Elem(), RoleSubscriptionMap{})
	pulumi.RegisterOutputType(RoleSubscriptionOutput{})
	pulumi.RegisterOutputType(RoleSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(RoleSubscriptionMapOutput{})
}
