// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages principal rate limits.
// Principal Rate Limits provides operations to manage Principal Rate Limits for your organization.
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewRateLimitAdminNotificationSettings(ctx, "example", &okta.RateLimitAdminNotificationSettingsArgs{
//				NotificationsEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings example .
// ```
type RateLimitAdminNotificationSettings struct {
	pulumi.CustomResourceState

	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled pulumi.BoolOutput `pulumi:"notificationsEnabled"`
}

// NewRateLimitAdminNotificationSettings registers a new resource with the given unique name, arguments, and options.
func NewRateLimitAdminNotificationSettings(ctx *pulumi.Context,
	name string, args *RateLimitAdminNotificationSettingsArgs, opts ...pulumi.ResourceOption) (*RateLimitAdminNotificationSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'NotificationsEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RateLimitAdminNotificationSettings
	err := ctx.RegisterResource("okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRateLimitAdminNotificationSettings gets an existing RateLimitAdminNotificationSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRateLimitAdminNotificationSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RateLimitAdminNotificationSettingsState, opts ...pulumi.ResourceOption) (*RateLimitAdminNotificationSettings, error) {
	var resource RateLimitAdminNotificationSettings
	err := ctx.ReadResource("okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RateLimitAdminNotificationSettings resources.
type rateLimitAdminNotificationSettingsState struct {
	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
}

type RateLimitAdminNotificationSettingsState struct {
	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled pulumi.BoolPtrInput
}

func (RateLimitAdminNotificationSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*rateLimitAdminNotificationSettingsState)(nil)).Elem()
}

type rateLimitAdminNotificationSettingsArgs struct {
	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled bool `pulumi:"notificationsEnabled"`
}

// The set of arguments for constructing a RateLimitAdminNotificationSettings resource.
type RateLimitAdminNotificationSettingsArgs struct {
	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled pulumi.BoolInput
}

func (RateLimitAdminNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rateLimitAdminNotificationSettingsArgs)(nil)).Elem()
}

type RateLimitAdminNotificationSettingsInput interface {
	pulumi.Input

	ToRateLimitAdminNotificationSettingsOutput() RateLimitAdminNotificationSettingsOutput
	ToRateLimitAdminNotificationSettingsOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsOutput
}

func (*RateLimitAdminNotificationSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (i *RateLimitAdminNotificationSettings) ToRateLimitAdminNotificationSettingsOutput() RateLimitAdminNotificationSettingsOutput {
	return i.ToRateLimitAdminNotificationSettingsOutputWithContext(context.Background())
}

func (i *RateLimitAdminNotificationSettings) ToRateLimitAdminNotificationSettingsOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitAdminNotificationSettingsOutput)
}

// RateLimitAdminNotificationSettingsArrayInput is an input type that accepts RateLimitAdminNotificationSettingsArray and RateLimitAdminNotificationSettingsArrayOutput values.
// You can construct a concrete instance of `RateLimitAdminNotificationSettingsArrayInput` via:
//
//	RateLimitAdminNotificationSettingsArray{ RateLimitAdminNotificationSettingsArgs{...} }
type RateLimitAdminNotificationSettingsArrayInput interface {
	pulumi.Input

	ToRateLimitAdminNotificationSettingsArrayOutput() RateLimitAdminNotificationSettingsArrayOutput
	ToRateLimitAdminNotificationSettingsArrayOutputWithContext(context.Context) RateLimitAdminNotificationSettingsArrayOutput
}

type RateLimitAdminNotificationSettingsArray []RateLimitAdminNotificationSettingsInput

func (RateLimitAdminNotificationSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (i RateLimitAdminNotificationSettingsArray) ToRateLimitAdminNotificationSettingsArrayOutput() RateLimitAdminNotificationSettingsArrayOutput {
	return i.ToRateLimitAdminNotificationSettingsArrayOutputWithContext(context.Background())
}

func (i RateLimitAdminNotificationSettingsArray) ToRateLimitAdminNotificationSettingsArrayOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitAdminNotificationSettingsArrayOutput)
}

// RateLimitAdminNotificationSettingsMapInput is an input type that accepts RateLimitAdminNotificationSettingsMap and RateLimitAdminNotificationSettingsMapOutput values.
// You can construct a concrete instance of `RateLimitAdminNotificationSettingsMapInput` via:
//
//	RateLimitAdminNotificationSettingsMap{ "key": RateLimitAdminNotificationSettingsArgs{...} }
type RateLimitAdminNotificationSettingsMapInput interface {
	pulumi.Input

	ToRateLimitAdminNotificationSettingsMapOutput() RateLimitAdminNotificationSettingsMapOutput
	ToRateLimitAdminNotificationSettingsMapOutputWithContext(context.Context) RateLimitAdminNotificationSettingsMapOutput
}

type RateLimitAdminNotificationSettingsMap map[string]RateLimitAdminNotificationSettingsInput

func (RateLimitAdminNotificationSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (i RateLimitAdminNotificationSettingsMap) ToRateLimitAdminNotificationSettingsMapOutput() RateLimitAdminNotificationSettingsMapOutput {
	return i.ToRateLimitAdminNotificationSettingsMapOutputWithContext(context.Background())
}

func (i RateLimitAdminNotificationSettingsMap) ToRateLimitAdminNotificationSettingsMapOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitAdminNotificationSettingsMapOutput)
}

type RateLimitAdminNotificationSettingsOutput struct{ *pulumi.OutputState }

func (RateLimitAdminNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (o RateLimitAdminNotificationSettingsOutput) ToRateLimitAdminNotificationSettingsOutput() RateLimitAdminNotificationSettingsOutput {
	return o
}

func (o RateLimitAdminNotificationSettingsOutput) ToRateLimitAdminNotificationSettingsOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsOutput {
	return o
}

// Enables or disables admin notifications for rate limiting events.
func (o RateLimitAdminNotificationSettingsOutput) NotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RateLimitAdminNotificationSettings) pulumi.BoolOutput { return v.NotificationsEnabled }).(pulumi.BoolOutput)
}

type RateLimitAdminNotificationSettingsArrayOutput struct{ *pulumi.OutputState }

func (RateLimitAdminNotificationSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (o RateLimitAdminNotificationSettingsArrayOutput) ToRateLimitAdminNotificationSettingsArrayOutput() RateLimitAdminNotificationSettingsArrayOutput {
	return o
}

func (o RateLimitAdminNotificationSettingsArrayOutput) ToRateLimitAdminNotificationSettingsArrayOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsArrayOutput {
	return o
}

func (o RateLimitAdminNotificationSettingsArrayOutput) Index(i pulumi.IntInput) RateLimitAdminNotificationSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RateLimitAdminNotificationSettings {
		return vs[0].([]*RateLimitAdminNotificationSettings)[vs[1].(int)]
	}).(RateLimitAdminNotificationSettingsOutput)
}

type RateLimitAdminNotificationSettingsMapOutput struct{ *pulumi.OutputState }

func (RateLimitAdminNotificationSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RateLimitAdminNotificationSettings)(nil)).Elem()
}

func (o RateLimitAdminNotificationSettingsMapOutput) ToRateLimitAdminNotificationSettingsMapOutput() RateLimitAdminNotificationSettingsMapOutput {
	return o
}

func (o RateLimitAdminNotificationSettingsMapOutput) ToRateLimitAdminNotificationSettingsMapOutputWithContext(ctx context.Context) RateLimitAdminNotificationSettingsMapOutput {
	return o
}

func (o RateLimitAdminNotificationSettingsMapOutput) MapIndex(k pulumi.StringInput) RateLimitAdminNotificationSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RateLimitAdminNotificationSettings {
		return vs[0].(map[string]*RateLimitAdminNotificationSettings)[vs[1].(string)]
	}).(RateLimitAdminNotificationSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitAdminNotificationSettingsInput)(nil)).Elem(), &RateLimitAdminNotificationSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitAdminNotificationSettingsArrayInput)(nil)).Elem(), RateLimitAdminNotificationSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateLimitAdminNotificationSettingsMapInput)(nil)).Elem(), RateLimitAdminNotificationSettingsMap{})
	pulumi.RegisterOutputType(RateLimitAdminNotificationSettingsOutput{})
	pulumi.RegisterOutputType(RateLimitAdminNotificationSettingsArrayOutput{})
	pulumi.RegisterOutputType(RateLimitAdminNotificationSettingsMapOutput{})
}
