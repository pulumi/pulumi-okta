// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the currently configured Rate Limit Admin Notification Settings
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.LookupRateLimitAdminNotificationSettings(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRateLimitAdminNotificationSettings(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*LookupRateLimitAdminNotificationSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRateLimitAdminNotificationSettingsResult
	err := ctx.Invoke("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getRateLimitAdminNotificationSettings.
type LookupRateLimitAdminNotificationSettingsResult struct {
	// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
	Id string `pulumi:"id"`
	// Enables or disables admin notifications for rate limiting events.
	NotificationsEnabled bool `pulumi:"notificationsEnabled"`
}

func LookupRateLimitAdminNotificationSettingsOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) LookupRateLimitAdminNotificationSettingsResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (LookupRateLimitAdminNotificationSettingsResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", nil, LookupRateLimitAdminNotificationSettingsResultOutput{}, options).(LookupRateLimitAdminNotificationSettingsResultOutput), nil
	}).(LookupRateLimitAdminNotificationSettingsResultOutput)
}

// A collection of values returned by getRateLimitAdminNotificationSettings.
type LookupRateLimitAdminNotificationSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupRateLimitAdminNotificationSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRateLimitAdminNotificationSettingsResult)(nil)).Elem()
}

func (o LookupRateLimitAdminNotificationSettingsResultOutput) ToLookupRateLimitAdminNotificationSettingsResultOutput() LookupRateLimitAdminNotificationSettingsResultOutput {
	return o
}

func (o LookupRateLimitAdminNotificationSettingsResultOutput) ToLookupRateLimitAdminNotificationSettingsResultOutputWithContext(ctx context.Context) LookupRateLimitAdminNotificationSettingsResultOutput {
	return o
}

// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
func (o LookupRateLimitAdminNotificationSettingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRateLimitAdminNotificationSettingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enables or disables admin notifications for rate limiting events.
func (o LookupRateLimitAdminNotificationSettingsResultOutput) NotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRateLimitAdminNotificationSettingsResult) bool { return v.NotificationsEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRateLimitAdminNotificationSettingsResultOutput{})
}
