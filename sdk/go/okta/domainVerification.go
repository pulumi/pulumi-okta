// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Verifies the Domain. This is replacement for the `verify` field from the `Domain` resource. The resource won't be
// created if the domain could not be verified. The provider will make several requests to verify the domain until
// the API returns `VERIFIED` verification status.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewDomain(ctx, "exampleDomain", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = okta.NewDomainVerification(ctx, "exampleDomainVerification", &okta.DomainVerificationArgs{
// 			DomainId: pulumi.Any(okta_domain.Test.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource does not support importing.
type DomainVerification struct {
	pulumi.CustomResourceState

	// Domain ID.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
}

// NewDomainVerification registers a new resource with the given unique name, arguments, and options.
func NewDomainVerification(ctx *pulumi.Context,
	name string, args *DomainVerificationArgs, opts ...pulumi.ResourceOption) (*DomainVerification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	var resource DomainVerification
	err := ctx.RegisterResource("okta:index/domainVerification:DomainVerification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainVerification gets an existing DomainVerification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainVerification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainVerificationState, opts ...pulumi.ResourceOption) (*DomainVerification, error) {
	var resource DomainVerification
	err := ctx.ReadResource("okta:index/domainVerification:DomainVerification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainVerification resources.
type domainVerificationState struct {
	// Domain ID.
	DomainId *string `pulumi:"domainId"`
}

type DomainVerificationState struct {
	// Domain ID.
	DomainId pulumi.StringPtrInput
}

func (DomainVerificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainVerificationState)(nil)).Elem()
}

type domainVerificationArgs struct {
	// Domain ID.
	DomainId string `pulumi:"domainId"`
}

// The set of arguments for constructing a DomainVerification resource.
type DomainVerificationArgs struct {
	// Domain ID.
	DomainId pulumi.StringInput
}

func (DomainVerificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainVerificationArgs)(nil)).Elem()
}

type DomainVerificationInput interface {
	pulumi.Input

	ToDomainVerificationOutput() DomainVerificationOutput
	ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput
}

func (*DomainVerification) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVerification)(nil))
}

func (i *DomainVerification) ToDomainVerificationOutput() DomainVerificationOutput {
	return i.ToDomainVerificationOutputWithContext(context.Background())
}

func (i *DomainVerification) ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationOutput)
}

func (i *DomainVerification) ToDomainVerificationPtrOutput() DomainVerificationPtrOutput {
	return i.ToDomainVerificationPtrOutputWithContext(context.Background())
}

func (i *DomainVerification) ToDomainVerificationPtrOutputWithContext(ctx context.Context) DomainVerificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationPtrOutput)
}

type DomainVerificationPtrInput interface {
	pulumi.Input

	ToDomainVerificationPtrOutput() DomainVerificationPtrOutput
	ToDomainVerificationPtrOutputWithContext(ctx context.Context) DomainVerificationPtrOutput
}

type domainVerificationPtrType DomainVerificationArgs

func (*domainVerificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVerification)(nil))
}

func (i *domainVerificationPtrType) ToDomainVerificationPtrOutput() DomainVerificationPtrOutput {
	return i.ToDomainVerificationPtrOutputWithContext(context.Background())
}

func (i *domainVerificationPtrType) ToDomainVerificationPtrOutputWithContext(ctx context.Context) DomainVerificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationPtrOutput)
}

// DomainVerificationArrayInput is an input type that accepts DomainVerificationArray and DomainVerificationArrayOutput values.
// You can construct a concrete instance of `DomainVerificationArrayInput` via:
//
//          DomainVerificationArray{ DomainVerificationArgs{...} }
type DomainVerificationArrayInput interface {
	pulumi.Input

	ToDomainVerificationArrayOutput() DomainVerificationArrayOutput
	ToDomainVerificationArrayOutputWithContext(context.Context) DomainVerificationArrayOutput
}

type DomainVerificationArray []DomainVerificationInput

func (DomainVerificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainVerification)(nil)).Elem()
}

func (i DomainVerificationArray) ToDomainVerificationArrayOutput() DomainVerificationArrayOutput {
	return i.ToDomainVerificationArrayOutputWithContext(context.Background())
}

func (i DomainVerificationArray) ToDomainVerificationArrayOutputWithContext(ctx context.Context) DomainVerificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationArrayOutput)
}

// DomainVerificationMapInput is an input type that accepts DomainVerificationMap and DomainVerificationMapOutput values.
// You can construct a concrete instance of `DomainVerificationMapInput` via:
//
//          DomainVerificationMap{ "key": DomainVerificationArgs{...} }
type DomainVerificationMapInput interface {
	pulumi.Input

	ToDomainVerificationMapOutput() DomainVerificationMapOutput
	ToDomainVerificationMapOutputWithContext(context.Context) DomainVerificationMapOutput
}

type DomainVerificationMap map[string]DomainVerificationInput

func (DomainVerificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainVerification)(nil)).Elem()
}

func (i DomainVerificationMap) ToDomainVerificationMapOutput() DomainVerificationMapOutput {
	return i.ToDomainVerificationMapOutputWithContext(context.Background())
}

func (i DomainVerificationMap) ToDomainVerificationMapOutputWithContext(ctx context.Context) DomainVerificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationMapOutput)
}

type DomainVerificationOutput struct{ *pulumi.OutputState }

func (DomainVerificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVerification)(nil))
}

func (o DomainVerificationOutput) ToDomainVerificationOutput() DomainVerificationOutput {
	return o
}

func (o DomainVerificationOutput) ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput {
	return o
}

func (o DomainVerificationOutput) ToDomainVerificationPtrOutput() DomainVerificationPtrOutput {
	return o.ToDomainVerificationPtrOutputWithContext(context.Background())
}

func (o DomainVerificationOutput) ToDomainVerificationPtrOutputWithContext(ctx context.Context) DomainVerificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainVerification) *DomainVerification {
		return &v
	}).(DomainVerificationPtrOutput)
}

type DomainVerificationPtrOutput struct{ *pulumi.OutputState }

func (DomainVerificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVerification)(nil))
}

func (o DomainVerificationPtrOutput) ToDomainVerificationPtrOutput() DomainVerificationPtrOutput {
	return o
}

func (o DomainVerificationPtrOutput) ToDomainVerificationPtrOutputWithContext(ctx context.Context) DomainVerificationPtrOutput {
	return o
}

func (o DomainVerificationPtrOutput) Elem() DomainVerificationOutput {
	return o.ApplyT(func(v *DomainVerification) DomainVerification {
		if v != nil {
			return *v
		}
		var ret DomainVerification
		return ret
	}).(DomainVerificationOutput)
}

type DomainVerificationArrayOutput struct{ *pulumi.OutputState }

func (DomainVerificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainVerification)(nil))
}

func (o DomainVerificationArrayOutput) ToDomainVerificationArrayOutput() DomainVerificationArrayOutput {
	return o
}

func (o DomainVerificationArrayOutput) ToDomainVerificationArrayOutputWithContext(ctx context.Context) DomainVerificationArrayOutput {
	return o
}

func (o DomainVerificationArrayOutput) Index(i pulumi.IntInput) DomainVerificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainVerification {
		return vs[0].([]DomainVerification)[vs[1].(int)]
	}).(DomainVerificationOutput)
}

type DomainVerificationMapOutput struct{ *pulumi.OutputState }

func (DomainVerificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DomainVerification)(nil))
}

func (o DomainVerificationMapOutput) ToDomainVerificationMapOutput() DomainVerificationMapOutput {
	return o
}

func (o DomainVerificationMapOutput) ToDomainVerificationMapOutputWithContext(ctx context.Context) DomainVerificationMapOutput {
	return o
}

func (o DomainVerificationMapOutput) MapIndex(k pulumi.StringInput) DomainVerificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DomainVerification {
		return vs[0].(map[string]DomainVerification)[vs[1].(string)]
	}).(DomainVerificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationInput)(nil)).Elem(), &DomainVerification{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationPtrInput)(nil)).Elem(), &DomainVerification{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationArrayInput)(nil)).Elem(), DomainVerificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationMapInput)(nil)).Elem(), DomainVerificationMap{})
	pulumi.RegisterOutputType(DomainVerificationOutput{})
	pulumi.RegisterOutputType(DomainVerificationPtrOutput{})
	pulumi.RegisterOutputType(DomainVerificationArrayOutput{})
	pulumi.RegisterOutputType(DomainVerificationMapOutput{})
}
