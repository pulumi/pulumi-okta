// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DomainVerification struct {
	pulumi.CustomResourceState

	// Domain's ID
	DomainId pulumi.StringOutput `pulumi:"domainId"`
}

// NewDomainVerification registers a new resource with the given unique name, arguments, and options.
func NewDomainVerification(ctx *pulumi.Context,
	name string, args *DomainVerificationArgs, opts ...pulumi.ResourceOption) (*DomainVerification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainVerification
	err := ctx.RegisterResource("okta:index/domainVerification:DomainVerification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainVerification gets an existing DomainVerification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainVerification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainVerificationState, opts ...pulumi.ResourceOption) (*DomainVerification, error) {
	var resource DomainVerification
	err := ctx.ReadResource("okta:index/domainVerification:DomainVerification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainVerification resources.
type domainVerificationState struct {
	// Domain's ID
	DomainId *string `pulumi:"domainId"`
}

type DomainVerificationState struct {
	// Domain's ID
	DomainId pulumi.StringPtrInput
}

func (DomainVerificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainVerificationState)(nil)).Elem()
}

type domainVerificationArgs struct {
	// Domain's ID
	DomainId string `pulumi:"domainId"`
}

// The set of arguments for constructing a DomainVerification resource.
type DomainVerificationArgs struct {
	// Domain's ID
	DomainId pulumi.StringInput
}

func (DomainVerificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainVerificationArgs)(nil)).Elem()
}

type DomainVerificationInput interface {
	pulumi.Input

	ToDomainVerificationOutput() DomainVerificationOutput
	ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput
}

func (*DomainVerification) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVerification)(nil)).Elem()
}

func (i *DomainVerification) ToDomainVerificationOutput() DomainVerificationOutput {
	return i.ToDomainVerificationOutputWithContext(context.Background())
}

func (i *DomainVerification) ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationOutput)
}

func (i *DomainVerification) ToOutput(ctx context.Context) pulumix.Output[*DomainVerification] {
	return pulumix.Output[*DomainVerification]{
		OutputState: i.ToDomainVerificationOutputWithContext(ctx).OutputState,
	}
}

// DomainVerificationArrayInput is an input type that accepts DomainVerificationArray and DomainVerificationArrayOutput values.
// You can construct a concrete instance of `DomainVerificationArrayInput` via:
//
//	DomainVerificationArray{ DomainVerificationArgs{...} }
type DomainVerificationArrayInput interface {
	pulumi.Input

	ToDomainVerificationArrayOutput() DomainVerificationArrayOutput
	ToDomainVerificationArrayOutputWithContext(context.Context) DomainVerificationArrayOutput
}

type DomainVerificationArray []DomainVerificationInput

func (DomainVerificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainVerification)(nil)).Elem()
}

func (i DomainVerificationArray) ToDomainVerificationArrayOutput() DomainVerificationArrayOutput {
	return i.ToDomainVerificationArrayOutputWithContext(context.Background())
}

func (i DomainVerificationArray) ToDomainVerificationArrayOutputWithContext(ctx context.Context) DomainVerificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationArrayOutput)
}

func (i DomainVerificationArray) ToOutput(ctx context.Context) pulumix.Output[[]*DomainVerification] {
	return pulumix.Output[[]*DomainVerification]{
		OutputState: i.ToDomainVerificationArrayOutputWithContext(ctx).OutputState,
	}
}

// DomainVerificationMapInput is an input type that accepts DomainVerificationMap and DomainVerificationMapOutput values.
// You can construct a concrete instance of `DomainVerificationMapInput` via:
//
//	DomainVerificationMap{ "key": DomainVerificationArgs{...} }
type DomainVerificationMapInput interface {
	pulumi.Input

	ToDomainVerificationMapOutput() DomainVerificationMapOutput
	ToDomainVerificationMapOutputWithContext(context.Context) DomainVerificationMapOutput
}

type DomainVerificationMap map[string]DomainVerificationInput

func (DomainVerificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainVerification)(nil)).Elem()
}

func (i DomainVerificationMap) ToDomainVerificationMapOutput() DomainVerificationMapOutput {
	return i.ToDomainVerificationMapOutputWithContext(context.Background())
}

func (i DomainVerificationMap) ToDomainVerificationMapOutputWithContext(ctx context.Context) DomainVerificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVerificationMapOutput)
}

func (i DomainVerificationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainVerification] {
	return pulumix.Output[map[string]*DomainVerification]{
		OutputState: i.ToDomainVerificationMapOutputWithContext(ctx).OutputState,
	}
}

type DomainVerificationOutput struct{ *pulumi.OutputState }

func (DomainVerificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainVerification)(nil)).Elem()
}

func (o DomainVerificationOutput) ToDomainVerificationOutput() DomainVerificationOutput {
	return o
}

func (o DomainVerificationOutput) ToDomainVerificationOutputWithContext(ctx context.Context) DomainVerificationOutput {
	return o
}

func (o DomainVerificationOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainVerification] {
	return pulumix.Output[*DomainVerification]{
		OutputState: o.OutputState,
	}
}

// Domain's ID
func (o DomainVerificationOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainVerification) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

type DomainVerificationArrayOutput struct{ *pulumi.OutputState }

func (DomainVerificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainVerification)(nil)).Elem()
}

func (o DomainVerificationArrayOutput) ToDomainVerificationArrayOutput() DomainVerificationArrayOutput {
	return o
}

func (o DomainVerificationArrayOutput) ToDomainVerificationArrayOutputWithContext(ctx context.Context) DomainVerificationArrayOutput {
	return o
}

func (o DomainVerificationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DomainVerification] {
	return pulumix.Output[[]*DomainVerification]{
		OutputState: o.OutputState,
	}
}

func (o DomainVerificationArrayOutput) Index(i pulumi.IntInput) DomainVerificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainVerification {
		return vs[0].([]*DomainVerification)[vs[1].(int)]
	}).(DomainVerificationOutput)
}

type DomainVerificationMapOutput struct{ *pulumi.OutputState }

func (DomainVerificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainVerification)(nil)).Elem()
}

func (o DomainVerificationMapOutput) ToDomainVerificationMapOutput() DomainVerificationMapOutput {
	return o
}

func (o DomainVerificationMapOutput) ToDomainVerificationMapOutputWithContext(ctx context.Context) DomainVerificationMapOutput {
	return o
}

func (o DomainVerificationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainVerification] {
	return pulumix.Output[map[string]*DomainVerification]{
		OutputState: o.OutputState,
	}
}

func (o DomainVerificationMapOutput) MapIndex(k pulumi.StringInput) DomainVerificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainVerification {
		return vs[0].(map[string]*DomainVerification)[vs[1].(string)]
	}).(DomainVerificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationInput)(nil)).Elem(), &DomainVerification{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationArrayInput)(nil)).Elem(), DomainVerificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainVerificationMapInput)(nil)).Elem(), DomainVerificationMap{})
	pulumi.RegisterOutputType(DomainVerificationOutput{})
	pulumi.RegisterOutputType(DomainVerificationArrayOutput{})
	pulumi.RegisterOutputType(DomainVerificationMapOutput{})
}
