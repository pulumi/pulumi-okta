// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an event hook.
//
// This resource allows you to create and configure an event hook.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v2/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewEventHook(ctx, "example", &okta.EventHookArgs{
// 			Auth: &okta.EventHookAuthArgs{
// 				Key:   pulumi.String("Authorization"),
// 				Type:  pulumi.String("HEADER"),
// 				Value: pulumi.String("123"),
// 			},
// 			Channel: &okta.EventHookChannelArgs{
// 				Type:    pulumi.String("HTTP"),
// 				Uri:     pulumi.String("https://example.com/test"),
// 				Version: pulumi.String("1.0.0"),
// 			},
// 			Events: pulumi.StringArray{
// 				pulumi.String("user.lifecycle.create"),
// 				pulumi.String("user.lifecycle.delete.initiated"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type EventHook struct {
	pulumi.CustomResourceState

	// Authentication required for event hook request.
	Auth EventHookAuthPtrOutput `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel EventHookChannelOutput `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayOutput `pulumi:"headers"`
	// The event hook display name.
	Name   pulumi.StringOutput    `pulumi:"name"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewEventHook registers a new resource with the given unique name, arguments, and options.
func NewEventHook(ctx *pulumi.Context,
	name string, args *EventHookArgs, opts ...pulumi.ResourceOption) (*EventHook, error) {
	if args == nil || args.Channel == nil {
		return nil, errors.New("missing required argument 'Channel'")
	}
	if args == nil || args.Events == nil {
		return nil, errors.New("missing required argument 'Events'")
	}
	if args == nil {
		args = &EventHookArgs{}
	}
	var resource EventHook
	err := ctx.RegisterResource("okta:index/eventHook:EventHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHook gets an existing EventHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHookState, opts ...pulumi.ResourceOption) (*EventHook, error) {
	var resource EventHook
	err := ctx.ReadResource("okta:index/eventHook:EventHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHook resources.
type eventHookState struct {
	// Authentication required for event hook request.
	Auth *EventHookAuth `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel *EventHookChannel `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events []string `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers []EventHookHeader `pulumi:"headers"`
	// The event hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

type EventHookState struct {
	// Authentication required for event hook request.
	Auth EventHookAuthPtrInput
	// Details of the endpoint the event hook will hit.
	Channel EventHookChannelPtrInput
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayInput
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayInput
	// The event hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (EventHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookState)(nil)).Elem()
}

type eventHookArgs struct {
	// Authentication required for event hook request.
	Auth *EventHookAuth `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel EventHookChannel `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events []string `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers []EventHookHeader `pulumi:"headers"`
	// The event hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a EventHook resource.
type EventHookArgs struct {
	// Authentication required for event hook request.
	Auth EventHookAuthPtrInput
	// Details of the endpoint the event hook will hit.
	Channel EventHookChannelInput
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayInput
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayInput
	// The event hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (EventHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookArgs)(nil)).Elem()
}
