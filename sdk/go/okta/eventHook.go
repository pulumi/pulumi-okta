// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an event hook.
//
// This resource allows you to create and configure an event hook.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := okta.NewEventHook(ctx, "example", &okta.EventHookArgs{
// 			Auth: pulumi.StringMap{
// 				"key":   pulumi.String("Authorization"),
// 				"type":  pulumi.String("HEADER"),
// 				"value": pulumi.String("123"),
// 			},
// 			Channel: pulumi.StringMap{
// 				"type":    pulumi.String("HTTP"),
// 				"uri":     pulumi.String("https://example.com/test"),
// 				"version": pulumi.String("1.0.0"),
// 			},
// 			Events: pulumi.StringArray{
// 				pulumi.String("user.lifecycle.create"),
// 				pulumi.String("user.lifecycle.delete.initiated"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An event hook can be imported via the Okta ID.
//
// ```sh
//  $ pulumi import okta:index/eventHook:EventHook example <hook id>
// ```
type EventHook struct {
	pulumi.CustomResourceState

	// Authentication required for event hook request.
	Auth pulumi.StringMapOutput `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel pulumi.StringMapOutput `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayOutput `pulumi:"headers"`
	// The event hook display name.
	Name   pulumi.StringOutput    `pulumi:"name"`
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewEventHook registers a new resource with the given unique name, arguments, and options.
func NewEventHook(ctx *pulumi.Context,
	name string, args *EventHookArgs, opts ...pulumi.ResourceOption) (*EventHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	var resource EventHook
	err := ctx.RegisterResource("okta:index/eventHook:EventHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHook gets an existing EventHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHookState, opts ...pulumi.ResourceOption) (*EventHook, error) {
	var resource EventHook
	err := ctx.ReadResource("okta:index/eventHook:EventHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHook resources.
type eventHookState struct {
	// Authentication required for event hook request.
	Auth map[string]string `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel map[string]string `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events []string `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers []EventHookHeader `pulumi:"headers"`
	// The event hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

type EventHookState struct {
	// Authentication required for event hook request.
	Auth pulumi.StringMapInput
	// Details of the endpoint the event hook will hit.
	Channel pulumi.StringMapInput
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayInput
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayInput
	// The event hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (EventHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookState)(nil)).Elem()
}

type eventHookArgs struct {
	// Authentication required for event hook request.
	Auth map[string]string `pulumi:"auth"`
	// Details of the endpoint the event hook will hit.
	Channel map[string]string `pulumi:"channel"`
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events []string `pulumi:"events"`
	// Map of headers to send along in event hook request.
	Headers []EventHookHeader `pulumi:"headers"`
	// The event hook display name.
	Name   *string `pulumi:"name"`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a EventHook resource.
type EventHookArgs struct {
	// Authentication required for event hook request.
	Auth pulumi.StringMapInput
	// Details of the endpoint the event hook will hit.
	Channel pulumi.StringMapInput
	// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
	Events pulumi.StringArrayInput
	// Map of headers to send along in event hook request.
	Headers EventHookHeaderArrayInput
	// The event hook display name.
	Name   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
}

func (EventHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHookArgs)(nil)).Elem()
}

type EventHookInput interface {
	pulumi.Input

	ToEventHookOutput() EventHookOutput
	ToEventHookOutputWithContext(ctx context.Context) EventHookOutput
}

func (*EventHook) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHook)(nil))
}

func (i *EventHook) ToEventHookOutput() EventHookOutput {
	return i.ToEventHookOutputWithContext(context.Background())
}

func (i *EventHook) ToEventHookOutputWithContext(ctx context.Context) EventHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookOutput)
}

func (i *EventHook) ToEventHookPtrOutput() EventHookPtrOutput {
	return i.ToEventHookPtrOutputWithContext(context.Background())
}

func (i *EventHook) ToEventHookPtrOutputWithContext(ctx context.Context) EventHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookPtrOutput)
}

type EventHookPtrInput interface {
	pulumi.Input

	ToEventHookPtrOutput() EventHookPtrOutput
	ToEventHookPtrOutputWithContext(ctx context.Context) EventHookPtrOutput
}

type eventHookPtrType EventHookArgs

func (*eventHookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHook)(nil))
}

func (i *eventHookPtrType) ToEventHookPtrOutput() EventHookPtrOutput {
	return i.ToEventHookPtrOutputWithContext(context.Background())
}

func (i *eventHookPtrType) ToEventHookPtrOutputWithContext(ctx context.Context) EventHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookPtrOutput)
}

// EventHookArrayInput is an input type that accepts EventHookArray and EventHookArrayOutput values.
// You can construct a concrete instance of `EventHookArrayInput` via:
//
//          EventHookArray{ EventHookArgs{...} }
type EventHookArrayInput interface {
	pulumi.Input

	ToEventHookArrayOutput() EventHookArrayOutput
	ToEventHookArrayOutputWithContext(context.Context) EventHookArrayOutput
}

type EventHookArray []EventHookInput

func (EventHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHook)(nil)).Elem()
}

func (i EventHookArray) ToEventHookArrayOutput() EventHookArrayOutput {
	return i.ToEventHookArrayOutputWithContext(context.Background())
}

func (i EventHookArray) ToEventHookArrayOutputWithContext(ctx context.Context) EventHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookArrayOutput)
}

// EventHookMapInput is an input type that accepts EventHookMap and EventHookMapOutput values.
// You can construct a concrete instance of `EventHookMapInput` via:
//
//          EventHookMap{ "key": EventHookArgs{...} }
type EventHookMapInput interface {
	pulumi.Input

	ToEventHookMapOutput() EventHookMapOutput
	ToEventHookMapOutputWithContext(context.Context) EventHookMapOutput
}

type EventHookMap map[string]EventHookInput

func (EventHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHook)(nil)).Elem()
}

func (i EventHookMap) ToEventHookMapOutput() EventHookMapOutput {
	return i.ToEventHookMapOutputWithContext(context.Background())
}

func (i EventHookMap) ToEventHookMapOutputWithContext(ctx context.Context) EventHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHookMapOutput)
}

type EventHookOutput struct{ *pulumi.OutputState }

func (EventHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHook)(nil))
}

func (o EventHookOutput) ToEventHookOutput() EventHookOutput {
	return o
}

func (o EventHookOutput) ToEventHookOutputWithContext(ctx context.Context) EventHookOutput {
	return o
}

func (o EventHookOutput) ToEventHookPtrOutput() EventHookPtrOutput {
	return o.ToEventHookPtrOutputWithContext(context.Background())
}

func (o EventHookOutput) ToEventHookPtrOutputWithContext(ctx context.Context) EventHookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHook) *EventHook {
		return &v
	}).(EventHookPtrOutput)
}

type EventHookPtrOutput struct{ *pulumi.OutputState }

func (EventHookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHook)(nil))
}

func (o EventHookPtrOutput) ToEventHookPtrOutput() EventHookPtrOutput {
	return o
}

func (o EventHookPtrOutput) ToEventHookPtrOutputWithContext(ctx context.Context) EventHookPtrOutput {
	return o
}

func (o EventHookPtrOutput) Elem() EventHookOutput {
	return o.ApplyT(func(v *EventHook) EventHook {
		if v != nil {
			return *v
		}
		var ret EventHook
		return ret
	}).(EventHookOutput)
}

type EventHookArrayOutput struct{ *pulumi.OutputState }

func (EventHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHook)(nil))
}

func (o EventHookArrayOutput) ToEventHookArrayOutput() EventHookArrayOutput {
	return o
}

func (o EventHookArrayOutput) ToEventHookArrayOutputWithContext(ctx context.Context) EventHookArrayOutput {
	return o
}

func (o EventHookArrayOutput) Index(i pulumi.IntInput) EventHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHook {
		return vs[0].([]EventHook)[vs[1].(int)]
	}).(EventHookOutput)
}

type EventHookMapOutput struct{ *pulumi.OutputState }

func (EventHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EventHook)(nil))
}

func (o EventHookMapOutput) ToEventHookMapOutput() EventHookMapOutput {
	return o
}

func (o EventHookMapOutput) ToEventHookMapOutputWithContext(ctx context.Context) EventHookMapOutput {
	return o
}

func (o EventHookMapOutput) MapIndex(k pulumi.StringInput) EventHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EventHook {
		return vs[0].(map[string]EventHook)[vs[1].(string)]
	}).(EventHookOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHookOutput{})
	pulumi.RegisterOutputType(EventHookPtrOutput{})
	pulumi.RegisterOutputType(EventHookArrayOutput{})
	pulumi.RegisterOutputType(EventHookMapOutput{})
}
