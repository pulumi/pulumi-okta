// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Authenticator struct {
	pulumi.CustomResourceState

	// A human-readable string that identifies the Authenticator
	Key pulumi.StringOutput `pulumi:"key"`
	// Display name of the Authenticator
	Name pulumi.StringOutput `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
	ProviderAuthPort pulumi.IntPtrOutput `pulumi:"providerAuthPort"`
	// The Duo Security API hostname
	ProviderHost pulumi.StringPtrOutput `pulumi:"providerHost"`
	// Server host name or IP address
	ProviderHostname pulumi.StringPtrOutput `pulumi:"providerHostname"`
	// App Instance ID.
	ProviderInstanceId pulumi.StringOutput `pulumi:"providerInstanceId"`
	// The Duo Security integration key
	ProviderIntegrationKey pulumi.StringPtrOutput `pulumi:"providerIntegrationKey"`
	// Provider in JSON format
	ProviderJson pulumi.StringPtrOutput `pulumi:"providerJson"`
	// The Duo Security secret key
	ProviderSecretKey pulumi.StringPtrOutput `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
	ProviderSharedSecret pulumi.StringPtrOutput `pulumi:"providerSharedSecret"`
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// Format expected by the provider
	ProviderUserNameTemplate pulumi.StringPtrOutput `pulumi:"providerUserNameTemplate"`
	// Authenticator settings in JSON format
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
	// Authenticator status: ACTIVE or INACTIVE
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of Authenticator
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAuthenticator registers a new resource with the given unique name, arguments, and options.
func NewAuthenticator(ctx *pulumi.Context,
	name string, args *AuthenticatorArgs, opts ...pulumi.ResourceOption) (*Authenticator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ProviderSharedSecret != nil {
		args.ProviderSharedSecret = pulumi.ToSecret(args.ProviderSharedSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"providerSharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authenticator
	err := ctx.RegisterResource("okta:index/authenticator:Authenticator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticator gets an existing Authenticator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticatorState, opts ...pulumi.ResourceOption) (*Authenticator, error) {
	var resource Authenticator
	err := ctx.ReadResource("okta:index/authenticator:Authenticator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authenticator resources.
type authenticatorState struct {
	// A human-readable string that identifies the Authenticator
	Key *string `pulumi:"key"`
	// Display name of the Authenticator
	Name *string `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
	ProviderAuthPort *int `pulumi:"providerAuthPort"`
	// The Duo Security API hostname
	ProviderHost *string `pulumi:"providerHost"`
	// Server host name or IP address
	ProviderHostname *string `pulumi:"providerHostname"`
	// App Instance ID.
	ProviderInstanceId *string `pulumi:"providerInstanceId"`
	// The Duo Security integration key
	ProviderIntegrationKey *string `pulumi:"providerIntegrationKey"`
	// Provider in JSON format
	ProviderJson *string `pulumi:"providerJson"`
	// The Duo Security secret key
	ProviderSecretKey *string `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
	ProviderSharedSecret *string `pulumi:"providerSharedSecret"`
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType *string `pulumi:"providerType"`
	// Format expected by the provider
	ProviderUserNameTemplate *string `pulumi:"providerUserNameTemplate"`
	// Authenticator settings in JSON format
	Settings *string `pulumi:"settings"`
	// Authenticator status: ACTIVE or INACTIVE
	Status *string `pulumi:"status"`
	// The type of Authenticator
	Type *string `pulumi:"type"`
}

type AuthenticatorState struct {
	// A human-readable string that identifies the Authenticator
	Key pulumi.StringPtrInput
	// Display name of the Authenticator
	Name pulumi.StringPtrInput
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
	ProviderAuthPort pulumi.IntPtrInput
	// The Duo Security API hostname
	ProviderHost pulumi.StringPtrInput
	// Server host name or IP address
	ProviderHostname pulumi.StringPtrInput
	// App Instance ID.
	ProviderInstanceId pulumi.StringPtrInput
	// The Duo Security integration key
	ProviderIntegrationKey pulumi.StringPtrInput
	// Provider in JSON format
	ProviderJson pulumi.StringPtrInput
	// The Duo Security secret key
	ProviderSecretKey pulumi.StringPtrInput
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
	ProviderSharedSecret pulumi.StringPtrInput
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType pulumi.StringPtrInput
	// Format expected by the provider
	ProviderUserNameTemplate pulumi.StringPtrInput
	// Authenticator settings in JSON format
	Settings pulumi.StringPtrInput
	// Authenticator status: ACTIVE or INACTIVE
	Status pulumi.StringPtrInput
	// The type of Authenticator
	Type pulumi.StringPtrInput
}

func (AuthenticatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatorState)(nil)).Elem()
}

type authenticatorArgs struct {
	// A human-readable string that identifies the Authenticator
	Key string `pulumi:"key"`
	// Display name of the Authenticator
	Name *string `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
	ProviderAuthPort *int `pulumi:"providerAuthPort"`
	// The Duo Security API hostname
	ProviderHost *string `pulumi:"providerHost"`
	// Server host name or IP address
	ProviderHostname *string `pulumi:"providerHostname"`
	// The Duo Security integration key
	ProviderIntegrationKey *string `pulumi:"providerIntegrationKey"`
	// Provider in JSON format
	ProviderJson *string `pulumi:"providerJson"`
	// The Duo Security secret key
	ProviderSecretKey *string `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
	ProviderSharedSecret *string `pulumi:"providerSharedSecret"`
	// Format expected by the provider
	ProviderUserNameTemplate *string `pulumi:"providerUserNameTemplate"`
	// Authenticator settings in JSON format
	Settings *string `pulumi:"settings"`
	// Authenticator status: ACTIVE or INACTIVE
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Authenticator resource.
type AuthenticatorArgs struct {
	// A human-readable string that identifies the Authenticator
	Key pulumi.StringInput
	// Display name of the Authenticator
	Name pulumi.StringPtrInput
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
	ProviderAuthPort pulumi.IntPtrInput
	// The Duo Security API hostname
	ProviderHost pulumi.StringPtrInput
	// Server host name or IP address
	ProviderHostname pulumi.StringPtrInput
	// The Duo Security integration key
	ProviderIntegrationKey pulumi.StringPtrInput
	// Provider in JSON format
	ProviderJson pulumi.StringPtrInput
	// The Duo Security secret key
	ProviderSecretKey pulumi.StringPtrInput
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
	ProviderSharedSecret pulumi.StringPtrInput
	// Format expected by the provider
	ProviderUserNameTemplate pulumi.StringPtrInput
	// Authenticator settings in JSON format
	Settings pulumi.StringPtrInput
	// Authenticator status: ACTIVE or INACTIVE
	Status pulumi.StringPtrInput
}

func (AuthenticatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatorArgs)(nil)).Elem()
}

type AuthenticatorInput interface {
	pulumi.Input

	ToAuthenticatorOutput() AuthenticatorOutput
	ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput
}

func (*Authenticator) ElementType() reflect.Type {
	return reflect.TypeOf((**Authenticator)(nil)).Elem()
}

func (i *Authenticator) ToAuthenticatorOutput() AuthenticatorOutput {
	return i.ToAuthenticatorOutputWithContext(context.Background())
}

func (i *Authenticator) ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorOutput)
}

func (i *Authenticator) ToOutput(ctx context.Context) pulumix.Output[*Authenticator] {
	return pulumix.Output[*Authenticator]{
		OutputState: i.ToAuthenticatorOutputWithContext(ctx).OutputState,
	}
}

// AuthenticatorArrayInput is an input type that accepts AuthenticatorArray and AuthenticatorArrayOutput values.
// You can construct a concrete instance of `AuthenticatorArrayInput` via:
//
//	AuthenticatorArray{ AuthenticatorArgs{...} }
type AuthenticatorArrayInput interface {
	pulumi.Input

	ToAuthenticatorArrayOutput() AuthenticatorArrayOutput
	ToAuthenticatorArrayOutputWithContext(context.Context) AuthenticatorArrayOutput
}

type AuthenticatorArray []AuthenticatorInput

func (AuthenticatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authenticator)(nil)).Elem()
}

func (i AuthenticatorArray) ToAuthenticatorArrayOutput() AuthenticatorArrayOutput {
	return i.ToAuthenticatorArrayOutputWithContext(context.Background())
}

func (i AuthenticatorArray) ToAuthenticatorArrayOutputWithContext(ctx context.Context) AuthenticatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorArrayOutput)
}

func (i AuthenticatorArray) ToOutput(ctx context.Context) pulumix.Output[[]*Authenticator] {
	return pulumix.Output[[]*Authenticator]{
		OutputState: i.ToAuthenticatorArrayOutputWithContext(ctx).OutputState,
	}
}

// AuthenticatorMapInput is an input type that accepts AuthenticatorMap and AuthenticatorMapOutput values.
// You can construct a concrete instance of `AuthenticatorMapInput` via:
//
//	AuthenticatorMap{ "key": AuthenticatorArgs{...} }
type AuthenticatorMapInput interface {
	pulumi.Input

	ToAuthenticatorMapOutput() AuthenticatorMapOutput
	ToAuthenticatorMapOutputWithContext(context.Context) AuthenticatorMapOutput
}

type AuthenticatorMap map[string]AuthenticatorInput

func (AuthenticatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authenticator)(nil)).Elem()
}

func (i AuthenticatorMap) ToAuthenticatorMapOutput() AuthenticatorMapOutput {
	return i.ToAuthenticatorMapOutputWithContext(context.Background())
}

func (i AuthenticatorMap) ToAuthenticatorMapOutputWithContext(ctx context.Context) AuthenticatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorMapOutput)
}

func (i AuthenticatorMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Authenticator] {
	return pulumix.Output[map[string]*Authenticator]{
		OutputState: i.ToAuthenticatorMapOutputWithContext(ctx).OutputState,
	}
}

type AuthenticatorOutput struct{ *pulumi.OutputState }

func (AuthenticatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authenticator)(nil)).Elem()
}

func (o AuthenticatorOutput) ToAuthenticatorOutput() AuthenticatorOutput {
	return o
}

func (o AuthenticatorOutput) ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput {
	return o
}

func (o AuthenticatorOutput) ToOutput(ctx context.Context) pulumix.Output[*Authenticator] {
	return pulumix.Output[*Authenticator]{
		OutputState: o.OutputState,
	}
}

// A human-readable string that identifies the Authenticator
func (o AuthenticatorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Display name of the Authenticator
func (o AuthenticatorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
func (o AuthenticatorOutput) ProviderAuthPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.IntPtrOutput { return v.ProviderAuthPort }).(pulumi.IntPtrOutput)
}

// The Duo Security API hostname
func (o AuthenticatorOutput) ProviderHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderHost }).(pulumi.StringPtrOutput)
}

// Server host name or IP address
func (o AuthenticatorOutput) ProviderHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderHostname }).(pulumi.StringPtrOutput)
}

// App Instance ID.
func (o AuthenticatorOutput) ProviderInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.ProviderInstanceId }).(pulumi.StringOutput)
}

// The Duo Security integration key
func (o AuthenticatorOutput) ProviderIntegrationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderIntegrationKey }).(pulumi.StringPtrOutput)
}

// Provider in JSON format
func (o AuthenticatorOutput) ProviderJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderJson }).(pulumi.StringPtrOutput)
}

// The Duo Security secret key
func (o AuthenticatorOutput) ProviderSecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderSecretKey }).(pulumi.StringPtrOutput)
}

// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
func (o AuthenticatorOutput) ProviderSharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderSharedSecret }).(pulumi.StringPtrOutput)
}

// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
func (o AuthenticatorOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// Format expected by the provider
func (o AuthenticatorOutput) ProviderUserNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderUserNameTemplate }).(pulumi.StringPtrOutput)
}

// Authenticator settings in JSON format
func (o AuthenticatorOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

// Authenticator status: ACTIVE or INACTIVE
func (o AuthenticatorOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of Authenticator
func (o AuthenticatorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AuthenticatorArrayOutput struct{ *pulumi.OutputState }

func (AuthenticatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authenticator)(nil)).Elem()
}

func (o AuthenticatorArrayOutput) ToAuthenticatorArrayOutput() AuthenticatorArrayOutput {
	return o
}

func (o AuthenticatorArrayOutput) ToAuthenticatorArrayOutputWithContext(ctx context.Context) AuthenticatorArrayOutput {
	return o
}

func (o AuthenticatorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Authenticator] {
	return pulumix.Output[[]*Authenticator]{
		OutputState: o.OutputState,
	}
}

func (o AuthenticatorArrayOutput) Index(i pulumi.IntInput) AuthenticatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authenticator {
		return vs[0].([]*Authenticator)[vs[1].(int)]
	}).(AuthenticatorOutput)
}

type AuthenticatorMapOutput struct{ *pulumi.OutputState }

func (AuthenticatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authenticator)(nil)).Elem()
}

func (o AuthenticatorMapOutput) ToAuthenticatorMapOutput() AuthenticatorMapOutput {
	return o
}

func (o AuthenticatorMapOutput) ToAuthenticatorMapOutputWithContext(ctx context.Context) AuthenticatorMapOutput {
	return o
}

func (o AuthenticatorMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Authenticator] {
	return pulumix.Output[map[string]*Authenticator]{
		OutputState: o.OutputState,
	}
}

func (o AuthenticatorMapOutput) MapIndex(k pulumi.StringInput) AuthenticatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authenticator {
		return vs[0].(map[string]*Authenticator)[vs[1].(string)]
	}).(AuthenticatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorInput)(nil)).Elem(), &Authenticator{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorArrayInput)(nil)).Elem(), AuthenticatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorMapInput)(nil)).Elem(), AuthenticatorMap{})
	pulumi.RegisterOutputType(AuthenticatorOutput{})
	pulumi.RegisterOutputType(AuthenticatorArrayOutput{})
	pulumi.RegisterOutputType(AuthenticatorMapOutput{})
}
