// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
//
// This resource allows you to configure different authenticators.
//
// > **Create:** The Okta API has an odd notion of create for authenticators. If
// the authenticator doesn't exist then a one time `POST /api/v1/authenticators` to
// create the authenticator (hard create) will be performed. Thereafter, that
// authenticator is never deleted, it is only deactivated (soft delete). Therefore,
// if the authenticator already exists create is just a soft import of an existing
// authenticator.
//
// > **Delete:** Authenticators can not be truly deleted therefore delete is soft.
// Delete will attempt to deativate the authenticator. An authenticator can only be
// deactivated if it's not in use by any other policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"allowedFor": "recovery",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = okta.NewAuthenticator(ctx, "test", &okta.AuthenticatorArgs{
//				Name:     pulumi.String("Security Question"),
//				Key:      pulumi.String("security_question"),
//				Settings: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"protocol":                    "TOTP",
//				"acceptableAdjacentIntervals": 3,
//				"timeIntervalInSeconds":       30,
//				"encoding":                    "base32",
//				"algorithm":                   "HMacSHA256",
//				"passCodeLength":              6,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = okta.NewAuthenticator(ctx, "test", &okta.AuthenticatorArgs{
//				Name:     pulumi.String("Custom OTP"),
//				Key:      pulumi.String("custom_otp"),
//				Status:   pulumi.String("ACTIVE"),
//				Settings: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Okta authenticator can be imported via the Okta ID.
//
// ```sh
// $ pulumi import okta:index/authenticator:Authenticator example &#60;authenticator_id&#62;
// ```
type Authenticator struct {
	pulumi.CustomResourceState

	// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of the authenticator.
	Name pulumi.StringOutput `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderAuthPort pulumi.IntPtrOutput `pulumi:"providerAuthPort"`
	// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
	ProviderHost pulumi.StringPtrOutput `pulumi:"providerHost"`
	// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderHostname pulumi.StringPtrOutput `pulumi:"providerHostname"`
	// App Instance ID.
	ProviderInstanceId pulumi.StringOutput `pulumi:"providerInstanceId"`
	// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
	ProviderIntegrationKey pulumi.StringPtrOutput `pulumi:"providerIntegrationKey"`
	// Provider JSON allows for expressive provider
	// values. This argument conflicts with the other `providerXxx` arguments.  The
	// [Create
	// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
	// illustrates detailed provider values for a Duo authenticator.  [Provider
	// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
	// are listed in Okta API.
	ProviderJson pulumi.StringPtrOutput `pulumi:"providerJson"`
	// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
	ProviderSecretKey pulumi.StringPtrOutput `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderSharedSecret pulumi.StringPtrOutput `pulumi:"providerSharedSecret"`
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderUserNameTemplate pulumi.StringPtrOutput `pulumi:"providerUserNameTemplate"`
	// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
	// Status of the authenticator. Default is `ACTIVE`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The type of Authenticator. Values include: `"password"`, `"securityQuestion"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"securityKey"`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAuthenticator registers a new resource with the given unique name, arguments, and options.
func NewAuthenticator(ctx *pulumi.Context,
	name string, args *AuthenticatorArgs, opts ...pulumi.ResourceOption) (*Authenticator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ProviderSharedSecret != nil {
		args.ProviderSharedSecret = pulumi.ToSecret(args.ProviderSharedSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"providerSharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authenticator
	err := ctx.RegisterResource("okta:index/authenticator:Authenticator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticator gets an existing Authenticator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticatorState, opts ...pulumi.ResourceOption) (*Authenticator, error) {
	var resource Authenticator
	err := ctx.ReadResource("okta:index/authenticator:Authenticator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authenticator resources.
type authenticatorState struct {
	// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
	Key *string `pulumi:"key"`
	// Name of the authenticator.
	Name *string `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderAuthPort *int `pulumi:"providerAuthPort"`
	// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
	ProviderHost *string `pulumi:"providerHost"`
	// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderHostname *string `pulumi:"providerHostname"`
	// App Instance ID.
	ProviderInstanceId *string `pulumi:"providerInstanceId"`
	// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
	ProviderIntegrationKey *string `pulumi:"providerIntegrationKey"`
	// Provider JSON allows for expressive provider
	// values. This argument conflicts with the other `providerXxx` arguments.  The
	// [Create
	// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
	// illustrates detailed provider values for a Duo authenticator.  [Provider
	// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
	// are listed in Okta API.
	ProviderJson *string `pulumi:"providerJson"`
	// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
	ProviderSecretKey *string `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderSharedSecret *string `pulumi:"providerSharedSecret"`
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType *string `pulumi:"providerType"`
	// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderUserNameTemplate *string `pulumi:"providerUserNameTemplate"`
	// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
	Settings *string `pulumi:"settings"`
	// Status of the authenticator. Default is `ACTIVE`.
	Status *string `pulumi:"status"`
	// The type of Authenticator. Values include: `"password"`, `"securityQuestion"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"securityKey"`.
	Type *string `pulumi:"type"`
}

type AuthenticatorState struct {
	// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
	Key pulumi.StringPtrInput
	// Name of the authenticator.
	Name pulumi.StringPtrInput
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderAuthPort pulumi.IntPtrInput
	// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
	ProviderHost pulumi.StringPtrInput
	// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderHostname pulumi.StringPtrInput
	// App Instance ID.
	ProviderInstanceId pulumi.StringPtrInput
	// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
	ProviderIntegrationKey pulumi.StringPtrInput
	// Provider JSON allows for expressive provider
	// values. This argument conflicts with the other `providerXxx` arguments.  The
	// [Create
	// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
	// illustrates detailed provider values for a Duo authenticator.  [Provider
	// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
	// are listed in Okta API.
	ProviderJson pulumi.StringPtrInput
	// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
	ProviderSecretKey pulumi.StringPtrInput
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderSharedSecret pulumi.StringPtrInput
	// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
	ProviderType pulumi.StringPtrInput
	// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderUserNameTemplate pulumi.StringPtrInput
	// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
	Settings pulumi.StringPtrInput
	// Status of the authenticator. Default is `ACTIVE`.
	Status pulumi.StringPtrInput
	// The type of Authenticator. Values include: `"password"`, `"securityQuestion"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"securityKey"`.
	Type pulumi.StringPtrInput
}

func (AuthenticatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatorState)(nil)).Elem()
}

type authenticatorArgs struct {
	// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
	Key string `pulumi:"key"`
	// Name of the authenticator.
	Name *string `pulumi:"name"`
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderAuthPort *int `pulumi:"providerAuthPort"`
	// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
	ProviderHost *string `pulumi:"providerHost"`
	// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderHostname *string `pulumi:"providerHostname"`
	// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
	ProviderIntegrationKey *string `pulumi:"providerIntegrationKey"`
	// Provider JSON allows for expressive provider
	// values. This argument conflicts with the other `providerXxx` arguments.  The
	// [Create
	// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
	// illustrates detailed provider values for a Duo authenticator.  [Provider
	// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
	// are listed in Okta API.
	ProviderJson *string `pulumi:"providerJson"`
	// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
	ProviderSecretKey *string `pulumi:"providerSecretKey"`
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderSharedSecret *string `pulumi:"providerSharedSecret"`
	// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderUserNameTemplate *string `pulumi:"providerUserNameTemplate"`
	// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
	Settings *string `pulumi:"settings"`
	// Status of the authenticator. Default is `ACTIVE`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Authenticator resource.
type AuthenticatorArgs struct {
	// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
	Key pulumi.StringInput
	// Name of the authenticator.
	Name pulumi.StringPtrInput
	// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderAuthPort pulumi.IntPtrInput
	// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
	ProviderHost pulumi.StringPtrInput
	// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderHostname pulumi.StringPtrInput
	// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
	ProviderIntegrationKey pulumi.StringPtrInput
	// Provider JSON allows for expressive provider
	// values. This argument conflicts with the other `providerXxx` arguments.  The
	// [Create
	// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
	// illustrates detailed provider values for a Duo authenticator.  [Provider
	// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
	// are listed in Okta API.
	ProviderJson pulumi.StringPtrInput
	// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
	ProviderSecretKey pulumi.StringPtrInput
	// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderSharedSecret pulumi.StringPtrInput
	// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
	ProviderUserNameTemplate pulumi.StringPtrInput
	// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
	Settings pulumi.StringPtrInput
	// Status of the authenticator. Default is `ACTIVE`.
	Status pulumi.StringPtrInput
}

func (AuthenticatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatorArgs)(nil)).Elem()
}

type AuthenticatorInput interface {
	pulumi.Input

	ToAuthenticatorOutput() AuthenticatorOutput
	ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput
}

func (*Authenticator) ElementType() reflect.Type {
	return reflect.TypeOf((**Authenticator)(nil)).Elem()
}

func (i *Authenticator) ToAuthenticatorOutput() AuthenticatorOutput {
	return i.ToAuthenticatorOutputWithContext(context.Background())
}

func (i *Authenticator) ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorOutput)
}

// AuthenticatorArrayInput is an input type that accepts AuthenticatorArray and AuthenticatorArrayOutput values.
// You can construct a concrete instance of `AuthenticatorArrayInput` via:
//
//	AuthenticatorArray{ AuthenticatorArgs{...} }
type AuthenticatorArrayInput interface {
	pulumi.Input

	ToAuthenticatorArrayOutput() AuthenticatorArrayOutput
	ToAuthenticatorArrayOutputWithContext(context.Context) AuthenticatorArrayOutput
}

type AuthenticatorArray []AuthenticatorInput

func (AuthenticatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authenticator)(nil)).Elem()
}

func (i AuthenticatorArray) ToAuthenticatorArrayOutput() AuthenticatorArrayOutput {
	return i.ToAuthenticatorArrayOutputWithContext(context.Background())
}

func (i AuthenticatorArray) ToAuthenticatorArrayOutputWithContext(ctx context.Context) AuthenticatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorArrayOutput)
}

// AuthenticatorMapInput is an input type that accepts AuthenticatorMap and AuthenticatorMapOutput values.
// You can construct a concrete instance of `AuthenticatorMapInput` via:
//
//	AuthenticatorMap{ "key": AuthenticatorArgs{...} }
type AuthenticatorMapInput interface {
	pulumi.Input

	ToAuthenticatorMapOutput() AuthenticatorMapOutput
	ToAuthenticatorMapOutputWithContext(context.Context) AuthenticatorMapOutput
}

type AuthenticatorMap map[string]AuthenticatorInput

func (AuthenticatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authenticator)(nil)).Elem()
}

func (i AuthenticatorMap) ToAuthenticatorMapOutput() AuthenticatorMapOutput {
	return i.ToAuthenticatorMapOutputWithContext(context.Background())
}

func (i AuthenticatorMap) ToAuthenticatorMapOutputWithContext(ctx context.Context) AuthenticatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorMapOutput)
}

type AuthenticatorOutput struct{ *pulumi.OutputState }

func (AuthenticatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authenticator)(nil)).Elem()
}

func (o AuthenticatorOutput) ToAuthenticatorOutput() AuthenticatorOutput {
	return o
}

func (o AuthenticatorOutput) ToAuthenticatorOutputWithContext(ctx context.Context) AuthenticatorOutput {
	return o
}

// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`, `customOtp`
func (o AuthenticatorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Name of the authenticator.
func (o AuthenticatorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderAuthPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.IntPtrOutput { return v.ProviderAuthPort }).(pulumi.IntPtrOutput)
}

// (DUO specific) - The Duo Security API hostname". Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderHost }).(pulumi.StringPtrOutput)
}

// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderHostname }).(pulumi.StringPtrOutput)
}

// App Instance ID.
func (o AuthenticatorOutput) ProviderInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.ProviderInstanceId }).(pulumi.StringOutput)
}

// (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderIntegrationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderIntegrationKey }).(pulumi.StringPtrOutput)
}

// Provider JSON allows for expressive provider
// values. This argument conflicts with the other `providerXxx` arguments.  The
// [Create
// Provider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request)
// illustrates detailed provider values for a Duo authenticator.  [Provider
// values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)
// are listed in Okta API.
func (o AuthenticatorOutput) ProviderJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderJson }).(pulumi.StringPtrOutput)
}

// (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderSecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderSecretKey }).(pulumi.StringPtrOutput)
}

// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderSharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderSharedSecret }).(pulumi.StringPtrOutput)
}

// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
func (o AuthenticatorOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// Username template expected by the provider. Used only for authenticators with type `"securityKey"`.  Conflicts with `providerJson` argument.
func (o AuthenticatorOutput) ProviderUserNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.ProviderUserNameTemplate }).(pulumi.StringPtrOutput)
}

// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `"securityKey"`.
func (o AuthenticatorOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

// Status of the authenticator. Default is `ACTIVE`.
func (o AuthenticatorOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of Authenticator. Values include: `"password"`, `"securityQuestion"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"securityKey"`.
func (o AuthenticatorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Authenticator) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AuthenticatorArrayOutput struct{ *pulumi.OutputState }

func (AuthenticatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authenticator)(nil)).Elem()
}

func (o AuthenticatorArrayOutput) ToAuthenticatorArrayOutput() AuthenticatorArrayOutput {
	return o
}

func (o AuthenticatorArrayOutput) ToAuthenticatorArrayOutputWithContext(ctx context.Context) AuthenticatorArrayOutput {
	return o
}

func (o AuthenticatorArrayOutput) Index(i pulumi.IntInput) AuthenticatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authenticator {
		return vs[0].([]*Authenticator)[vs[1].(int)]
	}).(AuthenticatorOutput)
}

type AuthenticatorMapOutput struct{ *pulumi.OutputState }

func (AuthenticatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authenticator)(nil)).Elem()
}

func (o AuthenticatorMapOutput) ToAuthenticatorMapOutput() AuthenticatorMapOutput {
	return o
}

func (o AuthenticatorMapOutput) ToAuthenticatorMapOutputWithContext(ctx context.Context) AuthenticatorMapOutput {
	return o
}

func (o AuthenticatorMapOutput) MapIndex(k pulumi.StringInput) AuthenticatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authenticator {
		return vs[0].(map[string]*Authenticator)[vs[1].(string)]
	}).(AuthenticatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorInput)(nil)).Elem(), &Authenticator{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorArrayInput)(nil)).Elem(), AuthenticatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorMapInput)(nil)).Elem(), AuthenticatorMap{})
	pulumi.RegisterOutputType(AuthenticatorOutput{})
	pulumi.RegisterOutputType(AuthenticatorArrayOutput{})
	pulumi.RegisterOutputType(AuthenticatorMapOutput{})
}
