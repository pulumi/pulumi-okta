// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you manage org settings, logo, support and communication options.
//
// > **IMPORTANT:** You must specify all Org Setting properties when you update an org's profile. Any property not specified in the script will be deleted.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v4/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewOrgConfiguration(ctx, "example", &okta.OrgConfigurationArgs{
//				CompanyName: pulumi.String("Umbrella Corporation"),
//				Website:     pulumi.String("https://terraform.io"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Okta Org Configuration can be imported even without specifying the Org ID.
//
// ```sh
// $ pulumi import okta:index/orgConfiguration:OrgConfiguration example _
// ```
type OrgConfiguration struct {
	pulumi.CustomResourceState

	// Primary address of org
	Address1 pulumi.StringPtrOutput `pulumi:"address1"`
	// Secondary address of org
	Address2 pulumi.StringPtrOutput `pulumi:"address2"`
	// User ID representing the billing contact
	BillingContactUser pulumi.StringPtrOutput `pulumi:"billingContactUser"`
	// City of org
	City pulumi.StringPtrOutput `pulumi:"city"`
	// Name of org
	CompanyName pulumi.StringOutput `pulumi:"companyName"`
	// Country of org
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// Support link of org
	EndUserSupportHelpUrl pulumi.StringPtrOutput `pulumi:"endUserSupportHelpUrl"`
	// Expiration of org
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
	// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// Indicates whether the org's users receive Okta Communication emails
	OptOutCommunicationEmails pulumi.BoolPtrOutput `pulumi:"optOutCommunicationEmails"`
	// Support help phone of org
	PhoneNumber pulumi.StringPtrOutput `pulumi:"phoneNumber"`
	// Postal code of org
	PostalCode pulumi.StringPtrOutput `pulumi:"postalCode"`
	// State of org
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Subdomain of org
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
	// Support help phone of org
	SupportPhoneNumber pulumi.StringPtrOutput `pulumi:"supportPhoneNumber"`
	// User ID representing the technical contact
	TechnicalContactUser pulumi.StringPtrOutput `pulumi:"technicalContactUser"`
	// The org's website
	Website pulumi.StringPtrOutput `pulumi:"website"`
}

// NewOrgConfiguration registers a new resource with the given unique name, arguments, and options.
func NewOrgConfiguration(ctx *pulumi.Context,
	name string, args *OrgConfigurationArgs, opts ...pulumi.ResourceOption) (*OrgConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompanyName == nil {
		return nil, errors.New("invalid value for required argument 'CompanyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgConfiguration
	err := ctx.RegisterResource("okta:index/orgConfiguration:OrgConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgConfiguration gets an existing OrgConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgConfigurationState, opts ...pulumi.ResourceOption) (*OrgConfiguration, error) {
	var resource OrgConfiguration
	err := ctx.ReadResource("okta:index/orgConfiguration:OrgConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgConfiguration resources.
type orgConfigurationState struct {
	// Primary address of org
	Address1 *string `pulumi:"address1"`
	// Secondary address of org
	Address2 *string `pulumi:"address2"`
	// User ID representing the billing contact
	BillingContactUser *string `pulumi:"billingContactUser"`
	// City of org
	City *string `pulumi:"city"`
	// Name of org
	CompanyName *string `pulumi:"companyName"`
	// Country of org
	Country *string `pulumi:"country"`
	// Support link of org
	EndUserSupportHelpUrl *string `pulumi:"endUserSupportHelpUrl"`
	// Expiration of org
	ExpiresAt *string `pulumi:"expiresAt"`
	// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
	// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
	Logo *string `pulumi:"logo"`
	// Indicates whether the org's users receive Okta Communication emails
	OptOutCommunicationEmails *bool `pulumi:"optOutCommunicationEmails"`
	// Support help phone of org
	PhoneNumber *string `pulumi:"phoneNumber"`
	// Postal code of org
	PostalCode *string `pulumi:"postalCode"`
	// State of org
	State *string `pulumi:"state"`
	// Subdomain of org
	Subdomain *string `pulumi:"subdomain"`
	// Support help phone of org
	SupportPhoneNumber *string `pulumi:"supportPhoneNumber"`
	// User ID representing the technical contact
	TechnicalContactUser *string `pulumi:"technicalContactUser"`
	// The org's website
	Website *string `pulumi:"website"`
}

type OrgConfigurationState struct {
	// Primary address of org
	Address1 pulumi.StringPtrInput
	// Secondary address of org
	Address2 pulumi.StringPtrInput
	// User ID representing the billing contact
	BillingContactUser pulumi.StringPtrInput
	// City of org
	City pulumi.StringPtrInput
	// Name of org
	CompanyName pulumi.StringPtrInput
	// Country of org
	Country pulumi.StringPtrInput
	// Support link of org
	EndUserSupportHelpUrl pulumi.StringPtrInput
	// Expiration of org
	ExpiresAt pulumi.StringPtrInput
	// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
	// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
	Logo pulumi.StringPtrInput
	// Indicates whether the org's users receive Okta Communication emails
	OptOutCommunicationEmails pulumi.BoolPtrInput
	// Support help phone of org
	PhoneNumber pulumi.StringPtrInput
	// Postal code of org
	PostalCode pulumi.StringPtrInput
	// State of org
	State pulumi.StringPtrInput
	// Subdomain of org
	Subdomain pulumi.StringPtrInput
	// Support help phone of org
	SupportPhoneNumber pulumi.StringPtrInput
	// User ID representing the technical contact
	TechnicalContactUser pulumi.StringPtrInput
	// The org's website
	Website pulumi.StringPtrInput
}

func (OrgConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgConfigurationState)(nil)).Elem()
}

type orgConfigurationArgs struct {
	// Primary address of org
	Address1 *string `pulumi:"address1"`
	// Secondary address of org
	Address2 *string `pulumi:"address2"`
	// User ID representing the billing contact
	BillingContactUser *string `pulumi:"billingContactUser"`
	// City of org
	City *string `pulumi:"city"`
	// Name of org
	CompanyName string `pulumi:"companyName"`
	// Country of org
	Country *string `pulumi:"country"`
	// Support link of org
	EndUserSupportHelpUrl *string `pulumi:"endUserSupportHelpUrl"`
	// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
	// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
	Logo *string `pulumi:"logo"`
	// Indicates whether the org's users receive Okta Communication emails
	OptOutCommunicationEmails *bool `pulumi:"optOutCommunicationEmails"`
	// Support help phone of org
	PhoneNumber *string `pulumi:"phoneNumber"`
	// Postal code of org
	PostalCode *string `pulumi:"postalCode"`
	// State of org
	State *string `pulumi:"state"`
	// Support help phone of org
	SupportPhoneNumber *string `pulumi:"supportPhoneNumber"`
	// User ID representing the technical contact
	TechnicalContactUser *string `pulumi:"technicalContactUser"`
	// The org's website
	Website *string `pulumi:"website"`
}

// The set of arguments for constructing a OrgConfiguration resource.
type OrgConfigurationArgs struct {
	// Primary address of org
	Address1 pulumi.StringPtrInput
	// Secondary address of org
	Address2 pulumi.StringPtrInput
	// User ID representing the billing contact
	BillingContactUser pulumi.StringPtrInput
	// City of org
	City pulumi.StringPtrInput
	// Name of org
	CompanyName pulumi.StringInput
	// Country of org
	Country pulumi.StringPtrInput
	// Support link of org
	EndUserSupportHelpUrl pulumi.StringPtrInput
	// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
	// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
	Logo pulumi.StringPtrInput
	// Indicates whether the org's users receive Okta Communication emails
	OptOutCommunicationEmails pulumi.BoolPtrInput
	// Support help phone of org
	PhoneNumber pulumi.StringPtrInput
	// Postal code of org
	PostalCode pulumi.StringPtrInput
	// State of org
	State pulumi.StringPtrInput
	// Support help phone of org
	SupportPhoneNumber pulumi.StringPtrInput
	// User ID representing the technical contact
	TechnicalContactUser pulumi.StringPtrInput
	// The org's website
	Website pulumi.StringPtrInput
}

func (OrgConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgConfigurationArgs)(nil)).Elem()
}

type OrgConfigurationInput interface {
	pulumi.Input

	ToOrgConfigurationOutput() OrgConfigurationOutput
	ToOrgConfigurationOutputWithContext(ctx context.Context) OrgConfigurationOutput
}

func (*OrgConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgConfiguration)(nil)).Elem()
}

func (i *OrgConfiguration) ToOrgConfigurationOutput() OrgConfigurationOutput {
	return i.ToOrgConfigurationOutputWithContext(context.Background())
}

func (i *OrgConfiguration) ToOrgConfigurationOutputWithContext(ctx context.Context) OrgConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConfigurationOutput)
}

// OrgConfigurationArrayInput is an input type that accepts OrgConfigurationArray and OrgConfigurationArrayOutput values.
// You can construct a concrete instance of `OrgConfigurationArrayInput` via:
//
//	OrgConfigurationArray{ OrgConfigurationArgs{...} }
type OrgConfigurationArrayInput interface {
	pulumi.Input

	ToOrgConfigurationArrayOutput() OrgConfigurationArrayOutput
	ToOrgConfigurationArrayOutputWithContext(context.Context) OrgConfigurationArrayOutput
}

type OrgConfigurationArray []OrgConfigurationInput

func (OrgConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgConfiguration)(nil)).Elem()
}

func (i OrgConfigurationArray) ToOrgConfigurationArrayOutput() OrgConfigurationArrayOutput {
	return i.ToOrgConfigurationArrayOutputWithContext(context.Background())
}

func (i OrgConfigurationArray) ToOrgConfigurationArrayOutputWithContext(ctx context.Context) OrgConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConfigurationArrayOutput)
}

// OrgConfigurationMapInput is an input type that accepts OrgConfigurationMap and OrgConfigurationMapOutput values.
// You can construct a concrete instance of `OrgConfigurationMapInput` via:
//
//	OrgConfigurationMap{ "key": OrgConfigurationArgs{...} }
type OrgConfigurationMapInput interface {
	pulumi.Input

	ToOrgConfigurationMapOutput() OrgConfigurationMapOutput
	ToOrgConfigurationMapOutputWithContext(context.Context) OrgConfigurationMapOutput
}

type OrgConfigurationMap map[string]OrgConfigurationInput

func (OrgConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgConfiguration)(nil)).Elem()
}

func (i OrgConfigurationMap) ToOrgConfigurationMapOutput() OrgConfigurationMapOutput {
	return i.ToOrgConfigurationMapOutputWithContext(context.Background())
}

func (i OrgConfigurationMap) ToOrgConfigurationMapOutputWithContext(ctx context.Context) OrgConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConfigurationMapOutput)
}

type OrgConfigurationOutput struct{ *pulumi.OutputState }

func (OrgConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgConfiguration)(nil)).Elem()
}

func (o OrgConfigurationOutput) ToOrgConfigurationOutput() OrgConfigurationOutput {
	return o
}

func (o OrgConfigurationOutput) ToOrgConfigurationOutputWithContext(ctx context.Context) OrgConfigurationOutput {
	return o
}

// Primary address of org
func (o OrgConfigurationOutput) Address1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.Address1 }).(pulumi.StringPtrOutput)
}

// Secondary address of org
func (o OrgConfigurationOutput) Address2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.Address2 }).(pulumi.StringPtrOutput)
}

// User ID representing the billing contact
func (o OrgConfigurationOutput) BillingContactUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.BillingContactUser }).(pulumi.StringPtrOutput)
}

// City of org
func (o OrgConfigurationOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// Name of org
func (o OrgConfigurationOutput) CompanyName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringOutput { return v.CompanyName }).(pulumi.StringOutput)
}

// Country of org
func (o OrgConfigurationOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// Support link of org
func (o OrgConfigurationOutput) EndUserSupportHelpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.EndUserSupportHelpUrl }).(pulumi.StringPtrOutput)
}

// Expiration of org
func (o OrgConfigurationOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape
// orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
func (o OrgConfigurationOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.Logo }).(pulumi.StringPtrOutput)
}

// Indicates whether the org's users receive Okta Communication emails
func (o OrgConfigurationOutput) OptOutCommunicationEmails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.BoolPtrOutput { return v.OptOutCommunicationEmails }).(pulumi.BoolPtrOutput)
}

// Support help phone of org
func (o OrgConfigurationOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

// Postal code of org
func (o OrgConfigurationOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// State of org
func (o OrgConfigurationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Subdomain of org
func (o OrgConfigurationOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

// Support help phone of org
func (o OrgConfigurationOutput) SupportPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.SupportPhoneNumber }).(pulumi.StringPtrOutput)
}

// User ID representing the technical contact
func (o OrgConfigurationOutput) TechnicalContactUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.TechnicalContactUser }).(pulumi.StringPtrOutput)
}

// The org's website
func (o OrgConfigurationOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgConfiguration) pulumi.StringPtrOutput { return v.Website }).(pulumi.StringPtrOutput)
}

type OrgConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OrgConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgConfiguration)(nil)).Elem()
}

func (o OrgConfigurationArrayOutput) ToOrgConfigurationArrayOutput() OrgConfigurationArrayOutput {
	return o
}

func (o OrgConfigurationArrayOutput) ToOrgConfigurationArrayOutputWithContext(ctx context.Context) OrgConfigurationArrayOutput {
	return o
}

func (o OrgConfigurationArrayOutput) Index(i pulumi.IntInput) OrgConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgConfiguration {
		return vs[0].([]*OrgConfiguration)[vs[1].(int)]
	}).(OrgConfigurationOutput)
}

type OrgConfigurationMapOutput struct{ *pulumi.OutputState }

func (OrgConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgConfiguration)(nil)).Elem()
}

func (o OrgConfigurationMapOutput) ToOrgConfigurationMapOutput() OrgConfigurationMapOutput {
	return o
}

func (o OrgConfigurationMapOutput) ToOrgConfigurationMapOutputWithContext(ctx context.Context) OrgConfigurationMapOutput {
	return o
}

func (o OrgConfigurationMapOutput) MapIndex(k pulumi.StringInput) OrgConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgConfiguration {
		return vs[0].(map[string]*OrgConfiguration)[vs[1].(string)]
	}).(OrgConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConfigurationInput)(nil)).Elem(), &OrgConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConfigurationArrayInput)(nil)).Elem(), OrgConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConfigurationMapInput)(nil)).Elem(), OrgConfigurationMap{})
	pulumi.RegisterOutputType(OrgConfigurationOutput{})
	pulumi.RegisterOutputType(OrgConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OrgConfigurationMapOutput{})
}
