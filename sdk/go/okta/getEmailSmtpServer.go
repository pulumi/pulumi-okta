// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get existing SMTP email server configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v6/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewEmailSmtpServer(ctx, "smtp_server", &okta.EmailSmtpServerArgs{
//				Alias:    pulumi.String("CustomServer"),
//				Host:     pulumi.String("192.168.160.1"),
//				Port:     pulumi.Int(8086),
//				Username: pulumi.String("aUser"),
//				Password: pulumi.String("abcd"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.LookupEmailSmtpServer(ctx, &okta.LookupEmailSmtpServerArgs{
//				Id: "id-of-your-smtp-server",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEmailSmtpServer(ctx *pulumi.Context, args *LookupEmailSmtpServerArgs, opts ...pulumi.InvokeOption) (*LookupEmailSmtpServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEmailSmtpServerResult
	err := ctx.Invoke("okta:index/getEmailSmtpServer:getEmailSmtpServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEmailSmtpServer.
type LookupEmailSmtpServerArgs struct {
	// ID of your SMTP server
	Id string `pulumi:"id"`
}

// A collection of values returned by getEmailSmtpServer.
type LookupEmailSmtpServerResult struct {
	// Human-readable name for SMTP server
	Alias string `pulumi:"alias"`
	// If true, routes all email traffic through the SMTP server.
	Enabled bool `pulumi:"enabled"`
	// Hostname or IP address of the SMTP server
	Host string `pulumi:"host"`
	// ID of your SMTP server
	Id string `pulumi:"id"`
	// The port number of the SMTP server
	Port int `pulumi:"port"`
	// Username used to access the SMTP server
	Username string `pulumi:"username"`
}

func LookupEmailSmtpServerOutput(ctx *pulumi.Context, args LookupEmailSmtpServerOutputArgs, opts ...pulumi.InvokeOption) LookupEmailSmtpServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEmailSmtpServerResultOutput, error) {
			args := v.(LookupEmailSmtpServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("okta:index/getEmailSmtpServer:getEmailSmtpServer", args, LookupEmailSmtpServerResultOutput{}, options).(LookupEmailSmtpServerResultOutput), nil
		}).(LookupEmailSmtpServerResultOutput)
}

// A collection of arguments for invoking getEmailSmtpServer.
type LookupEmailSmtpServerOutputArgs struct {
	// ID of your SMTP server
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEmailSmtpServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEmailSmtpServerArgs)(nil)).Elem()
}

// A collection of values returned by getEmailSmtpServer.
type LookupEmailSmtpServerResultOutput struct{ *pulumi.OutputState }

func (LookupEmailSmtpServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEmailSmtpServerResult)(nil)).Elem()
}

func (o LookupEmailSmtpServerResultOutput) ToLookupEmailSmtpServerResultOutput() LookupEmailSmtpServerResultOutput {
	return o
}

func (o LookupEmailSmtpServerResultOutput) ToLookupEmailSmtpServerResultOutputWithContext(ctx context.Context) LookupEmailSmtpServerResultOutput {
	return o
}

// Human-readable name for SMTP server
func (o LookupEmailSmtpServerResultOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) string { return v.Alias }).(pulumi.StringOutput)
}

// If true, routes all email traffic through the SMTP server.
func (o LookupEmailSmtpServerResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Hostname or IP address of the SMTP server
func (o LookupEmailSmtpServerResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) string { return v.Host }).(pulumi.StringOutput)
}

// ID of your SMTP server
func (o LookupEmailSmtpServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The port number of the SMTP server
func (o LookupEmailSmtpServerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) int { return v.Port }).(pulumi.IntOutput)
}

// Username used to access the SMTP server
func (o LookupEmailSmtpServerResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEmailSmtpServerResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEmailSmtpServerResultOutput{})
}
