// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Okta SMS Template.
//
// This resource allows you to create and configure an Okta SMS Template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-okta/sdk/v3/go/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okta.NewTemplateSms(ctx, "example", &okta.TemplateSmsArgs{
//				Template: pulumi.String("Your ${org.name} code is: ${code}"),
//				Translations: okta.TemplateSmsTranslationArray{
//					&okta.TemplateSmsTranslationArgs{
//						Language: pulumi.String("en"),
//						Template: pulumi.String("Your ${org.name} code is: ${code}"),
//					},
//					&okta.TemplateSmsTranslationArgs{
//						Language: pulumi.String("es"),
//						Template: pulumi.String("Tu c√≥digo de ${org.name} es: ${code}."),
//					},
//				},
//				Type: pulumi.String("SMS_VERIFY_CODE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An Okta SMS Template can be imported via the template type.
//
// ```sh
//
//	$ pulumi import okta:index/templateSms:TemplateSms example &#60;template type&#62;
//
// ```
type TemplateSms struct {
	pulumi.CustomResourceState

	// The SMS message.
	Template pulumi.StringOutput `pulumi:"template"`
	// Set of translations for a particular template.
	Translations TemplateSmsTranslationArrayOutput `pulumi:"translations"`
	// SMS template type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTemplateSms registers a new resource with the given unique name, arguments, and options.
func NewTemplateSms(ctx *pulumi.Context,
	name string, args *TemplateSmsArgs, opts ...pulumi.ResourceOption) (*TemplateSms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource TemplateSms
	err := ctx.RegisterResource("okta:index/templateSms:TemplateSms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateSms gets an existing TemplateSms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateSms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateSmsState, opts ...pulumi.ResourceOption) (*TemplateSms, error) {
	var resource TemplateSms
	err := ctx.ReadResource("okta:index/templateSms:TemplateSms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateSms resources.
type templateSmsState struct {
	// The SMS message.
	Template *string `pulumi:"template"`
	// Set of translations for a particular template.
	Translations []TemplateSmsTranslation `pulumi:"translations"`
	// SMS template type
	Type *string `pulumi:"type"`
}

type TemplateSmsState struct {
	// The SMS message.
	Template pulumi.StringPtrInput
	// Set of translations for a particular template.
	Translations TemplateSmsTranslationArrayInput
	// SMS template type
	Type pulumi.StringPtrInput
}

func (TemplateSmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateSmsState)(nil)).Elem()
}

type templateSmsArgs struct {
	// The SMS message.
	Template string `pulumi:"template"`
	// Set of translations for a particular template.
	Translations []TemplateSmsTranslation `pulumi:"translations"`
	// SMS template type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TemplateSms resource.
type TemplateSmsArgs struct {
	// The SMS message.
	Template pulumi.StringInput
	// Set of translations for a particular template.
	Translations TemplateSmsTranslationArrayInput
	// SMS template type
	Type pulumi.StringInput
}

func (TemplateSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateSmsArgs)(nil)).Elem()
}

type TemplateSmsInput interface {
	pulumi.Input

	ToTemplateSmsOutput() TemplateSmsOutput
	ToTemplateSmsOutputWithContext(ctx context.Context) TemplateSmsOutput
}

func (*TemplateSms) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSms)(nil)).Elem()
}

func (i *TemplateSms) ToTemplateSmsOutput() TemplateSmsOutput {
	return i.ToTemplateSmsOutputWithContext(context.Background())
}

func (i *TemplateSms) ToTemplateSmsOutputWithContext(ctx context.Context) TemplateSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmsOutput)
}

// TemplateSmsArrayInput is an input type that accepts TemplateSmsArray and TemplateSmsArrayOutput values.
// You can construct a concrete instance of `TemplateSmsArrayInput` via:
//
//	TemplateSmsArray{ TemplateSmsArgs{...} }
type TemplateSmsArrayInput interface {
	pulumi.Input

	ToTemplateSmsArrayOutput() TemplateSmsArrayOutput
	ToTemplateSmsArrayOutputWithContext(context.Context) TemplateSmsArrayOutput
}

type TemplateSmsArray []TemplateSmsInput

func (TemplateSmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateSms)(nil)).Elem()
}

func (i TemplateSmsArray) ToTemplateSmsArrayOutput() TemplateSmsArrayOutput {
	return i.ToTemplateSmsArrayOutputWithContext(context.Background())
}

func (i TemplateSmsArray) ToTemplateSmsArrayOutputWithContext(ctx context.Context) TemplateSmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmsArrayOutput)
}

// TemplateSmsMapInput is an input type that accepts TemplateSmsMap and TemplateSmsMapOutput values.
// You can construct a concrete instance of `TemplateSmsMapInput` via:
//
//	TemplateSmsMap{ "key": TemplateSmsArgs{...} }
type TemplateSmsMapInput interface {
	pulumi.Input

	ToTemplateSmsMapOutput() TemplateSmsMapOutput
	ToTemplateSmsMapOutputWithContext(context.Context) TemplateSmsMapOutput
}

type TemplateSmsMap map[string]TemplateSmsInput

func (TemplateSmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateSms)(nil)).Elem()
}

func (i TemplateSmsMap) ToTemplateSmsMapOutput() TemplateSmsMapOutput {
	return i.ToTemplateSmsMapOutputWithContext(context.Background())
}

func (i TemplateSmsMap) ToTemplateSmsMapOutputWithContext(ctx context.Context) TemplateSmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmsMapOutput)
}

type TemplateSmsOutput struct{ *pulumi.OutputState }

func (TemplateSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSms)(nil)).Elem()
}

func (o TemplateSmsOutput) ToTemplateSmsOutput() TemplateSmsOutput {
	return o
}

func (o TemplateSmsOutput) ToTemplateSmsOutputWithContext(ctx context.Context) TemplateSmsOutput {
	return o
}

// The SMS message.
func (o TemplateSmsOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateSms) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

// Set of translations for a particular template.
func (o TemplateSmsOutput) Translations() TemplateSmsTranslationArrayOutput {
	return o.ApplyT(func(v *TemplateSms) TemplateSmsTranslationArrayOutput { return v.Translations }).(TemplateSmsTranslationArrayOutput)
}

// SMS template type
func (o TemplateSmsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateSms) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TemplateSmsArrayOutput struct{ *pulumi.OutputState }

func (TemplateSmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateSms)(nil)).Elem()
}

func (o TemplateSmsArrayOutput) ToTemplateSmsArrayOutput() TemplateSmsArrayOutput {
	return o
}

func (o TemplateSmsArrayOutput) ToTemplateSmsArrayOutputWithContext(ctx context.Context) TemplateSmsArrayOutput {
	return o
}

func (o TemplateSmsArrayOutput) Index(i pulumi.IntInput) TemplateSmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemplateSms {
		return vs[0].([]*TemplateSms)[vs[1].(int)]
	}).(TemplateSmsOutput)
}

type TemplateSmsMapOutput struct{ *pulumi.OutputState }

func (TemplateSmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateSms)(nil)).Elem()
}

func (o TemplateSmsMapOutput) ToTemplateSmsMapOutput() TemplateSmsMapOutput {
	return o
}

func (o TemplateSmsMapOutput) ToTemplateSmsMapOutputWithContext(ctx context.Context) TemplateSmsMapOutput {
	return o
}

func (o TemplateSmsMapOutput) MapIndex(k pulumi.StringInput) TemplateSmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemplateSms {
		return vs[0].(map[string]*TemplateSms)[vs[1].(string)]
	}).(TemplateSmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmsInput)(nil)).Elem(), &TemplateSms{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmsArrayInput)(nil)).Elem(), TemplateSmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmsMapInput)(nil)).Elem(), TemplateSmsMap{})
	pulumi.RegisterOutputType(TemplateSmsOutput{})
	pulumi.RegisterOutputType(TemplateSmsArrayOutput{})
	pulumi.RegisterOutputType(TemplateSmsMapOutput{})
}
