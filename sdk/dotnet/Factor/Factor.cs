// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Factor
{
    /// <summary>
    /// Allows you to manage the activation of Okta MFA methods.
    /// 
    /// This resource allows you to manage Okta MFA methods.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Okta.Factor.Factor("example", new Okta.Factor.FactorArgs
    ///         {
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = "google_otp",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Factor : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not to activate the provider, by default it is set to `true`.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Factor provider ID
        /// </summary>
        [Output("providerId")]
        public Output<string> ProviderId { get; private set; } = null!;


        /// <summary>
        /// Create a Factor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Factor(string name, FactorArgs args, CustomResourceOptions? options = null)
            : base("okta:factor/factor:Factor", name, args ?? new FactorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Factor(string name, Input<string> id, FactorState? state = null, CustomResourceOptions? options = null)
            : base("okta:factor/factor:Factor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Factor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Factor Get(string name, Input<string> id, FactorState? state = null, CustomResourceOptions? options = null)
        {
            return new Factor(name, id, state, options);
        }
    }

    public sealed class FactorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to activate the provider, by default it is set to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Factor provider ID
        /// </summary>
        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        public FactorArgs()
        {
        }
    }

    public sealed class FactorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to activate the provider, by default it is set to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Factor provider ID
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        public FactorState()
        {
        }
    }
}
