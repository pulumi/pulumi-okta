// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages the creation and removal of the link definitions.
    /// 
    /// Link definition operations allow you to manage the creation and removal of the link definitions. If you remove a link
    /// definition, links based on that definition are unavailable. Note that this resource is immutable, thus can not be modified.
    /// &gt; **NOTE:** Links reappear if you recreate the definition. However, Okta is likely to change this behavior so that links don't reappear. Don't rely on this behavior in production environments.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.LinkDefinition("example", new()
    ///     {
    ///         PrimaryName = "emperor",
    ///         PrimaryTitle = "Emperor",
    ///         PrimaryDescription = "Hereditary ruler of the Imperium and the Known Universe",
    ///         AssociatedName = "sardaukar",
    ///         AssociatedTitle = "Sardaukar",
    ///         AssociatedDescription = "Elite military force member",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/linkDefinition:LinkDefinition example &lt;primary_name&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/linkDefinition:LinkDefinition")]
    public partial class LinkDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the associated relationship.
        /// </summary>
        [Output("associatedDescription")]
        public Output<string> AssociatedDescription { get; private set; } = null!;

        /// <summary>
        /// API name of the associated link.
        /// </summary>
        [Output("associatedName")]
        public Output<string> AssociatedName { get; private set; } = null!;

        /// <summary>
        /// Display name of the associated link.
        /// </summary>
        [Output("associatedTitle")]
        public Output<string> AssociatedTitle { get; private set; } = null!;

        /// <summary>
        /// Description of the primary relationship.
        /// </summary>
        [Output("primaryDescription")]
        public Output<string> PrimaryDescription { get; private set; } = null!;

        /// <summary>
        /// API name of the primary link.
        /// </summary>
        [Output("primaryName")]
        public Output<string> PrimaryName { get; private set; } = null!;

        /// <summary>
        /// Display name of the primary link.
        /// </summary>
        [Output("primaryTitle")]
        public Output<string> PrimaryTitle { get; private set; } = null!;


        /// <summary>
        /// Create a LinkDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkDefinition(string name, LinkDefinitionArgs args, CustomResourceOptions? options = null)
            : base("okta:index/linkDefinition:LinkDefinition", name, args ?? new LinkDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LinkDefinition(string name, Input<string> id, LinkDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/linkDefinition:LinkDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkDefinition Get(string name, Input<string> id, LinkDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkDefinition(name, id, state, options);
        }
    }

    public sealed class LinkDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the associated relationship.
        /// </summary>
        [Input("associatedDescription", required: true)]
        public Input<string> AssociatedDescription { get; set; } = null!;

        /// <summary>
        /// API name of the associated link.
        /// </summary>
        [Input("associatedName", required: true)]
        public Input<string> AssociatedName { get; set; } = null!;

        /// <summary>
        /// Display name of the associated link.
        /// </summary>
        [Input("associatedTitle", required: true)]
        public Input<string> AssociatedTitle { get; set; } = null!;

        /// <summary>
        /// Description of the primary relationship.
        /// </summary>
        [Input("primaryDescription", required: true)]
        public Input<string> PrimaryDescription { get; set; } = null!;

        /// <summary>
        /// API name of the primary link.
        /// </summary>
        [Input("primaryName", required: true)]
        public Input<string> PrimaryName { get; set; } = null!;

        /// <summary>
        /// Display name of the primary link.
        /// </summary>
        [Input("primaryTitle", required: true)]
        public Input<string> PrimaryTitle { get; set; } = null!;

        public LinkDefinitionArgs()
        {
        }
        public static new LinkDefinitionArgs Empty => new LinkDefinitionArgs();
    }

    public sealed class LinkDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the associated relationship.
        /// </summary>
        [Input("associatedDescription")]
        public Input<string>? AssociatedDescription { get; set; }

        /// <summary>
        /// API name of the associated link.
        /// </summary>
        [Input("associatedName")]
        public Input<string>? AssociatedName { get; set; }

        /// <summary>
        /// Display name of the associated link.
        /// </summary>
        [Input("associatedTitle")]
        public Input<string>? AssociatedTitle { get; set; }

        /// <summary>
        /// Description of the primary relationship.
        /// </summary>
        [Input("primaryDescription")]
        public Input<string>? PrimaryDescription { get; set; }

        /// <summary>
        /// API name of the primary link.
        /// </summary>
        [Input("primaryName")]
        public Input<string>? PrimaryName { get; set; }

        /// <summary>
        /// Display name of the primary link.
        /// </summary>
        [Input("primaryTitle")]
        public Input<string>? PrimaryTitle { get; set; }

        public LinkDefinitionState()
        {
        }
        public static new LinkDefinitionState Empty => new LinkDefinitionState();
    }
}
