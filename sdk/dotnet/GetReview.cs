// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetReview
    {
        /// <summary>
        /// Get the reviews belonging to a campaign
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetReview.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Required:
        /// 
        /// - `Email` (String) The Okta user's email address.
        /// - `Id` (String) The Okta user id.
        /// - `Status` (String) The status of the principal's profile. Enum: `INACTIVE`, `ACTIVE`.
        /// 
        /// ## Optional:
        /// 
        /// - `FirstName` (String) The Okta user's first name.
        /// - `lastName` (String) The Okta user's last name
        /// - `Login` (String) The Okta user's login
        /// </summary>
        public static Task<GetReviewResult> InvokeAsync(GetReviewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReviewResult>("okta:index/getReview:getReview", args ?? new GetReviewArgs(), options.WithDefaults());

        /// <summary>
        /// Get the reviews belonging to a campaign
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetReview.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Required:
        /// 
        /// - `Email` (String) The Okta user's email address.
        /// - `Id` (String) The Okta user id.
        /// - `Status` (String) The status of the principal's profile. Enum: `INACTIVE`, `ACTIVE`.
        /// 
        /// ## Optional:
        /// 
        /// - `FirstName` (String) The Okta user's first name.
        /// - `lastName` (String) The Okta user's last name
        /// - `Login` (String) The Okta user's login
        /// </summary>
        public static Output<GetReviewResult> Invoke(GetReviewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReviewResult>("okta:index/getReview:getReview", args ?? new GetReviewInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the reviews belonging to a campaign
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetReview.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Required:
        /// 
        /// - `Email` (String) The Okta user's email address.
        /// - `Id` (String) The Okta user id.
        /// - `Status` (String) The status of the principal's profile. Enum: `INACTIVE`, `ACTIVE`.
        /// 
        /// ## Optional:
        /// 
        /// - `FirstName` (String) The Okta user's first name.
        /// - `lastName` (String) The Okta user's last name
        /// - `Login` (String) The Okta user's login
        /// </summary>
        public static Output<GetReviewResult> Invoke(GetReviewInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetReviewResult>("okta:index/getReview:getReview", args ?? new GetReviewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReviewArgs : global::Pulumi.InvokeArgs
    {
        [Input("allReviewerLevels")]
        private List<Inputs.GetReviewAllReviewerLevelArgs>? _allReviewerLevels;
        public List<Inputs.GetReviewAllReviewerLevelArgs> AllReviewerLevels
        {
            get => _allReviewerLevels ?? (_allReviewerLevels = new List<Inputs.GetReviewAllReviewerLevelArgs>());
            set => _allReviewerLevels = value;
        }

        [Input("entitlementBundle")]
        public Inputs.GetReviewEntitlementBundleArgs? EntitlementBundle { get; set; }

        [Input("entitlementValue")]
        public Inputs.GetReviewEntitlementValueArgs? EntitlementValue { get; set; }

        /// <summary>
        /// The ID of  review.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("links")]
        public Inputs.GetReviewLinksArgs? Links { get; set; }

        [Input("note")]
        public Inputs.GetReviewNoteArgs? Note { get; set; }

        /// <summary>
        /// A limited set of properties from the user profile who created the review.
        /// </summary>
        [Input("principalProfile")]
        public Inputs.GetReviewPrincipalProfileArgs? PrincipalProfile { get; set; }

        [Input("reviewerProfile")]
        public Inputs.GetReviewReviewerProfileArgs? ReviewerProfile { get; set; }

        public GetReviewArgs()
        {
        }
        public static new GetReviewArgs Empty => new GetReviewArgs();
    }

    public sealed class GetReviewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("allReviewerLevels")]
        private InputList<Inputs.GetReviewAllReviewerLevelInputArgs>? _allReviewerLevels;
        public InputList<Inputs.GetReviewAllReviewerLevelInputArgs> AllReviewerLevels
        {
            get => _allReviewerLevels ?? (_allReviewerLevels = new InputList<Inputs.GetReviewAllReviewerLevelInputArgs>());
            set => _allReviewerLevels = value;
        }

        [Input("entitlementBundle")]
        public Input<Inputs.GetReviewEntitlementBundleInputArgs>? EntitlementBundle { get; set; }

        [Input("entitlementValue")]
        public Input<Inputs.GetReviewEntitlementValueInputArgs>? EntitlementValue { get; set; }

        /// <summary>
        /// The ID of  review.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("links")]
        public Input<Inputs.GetReviewLinksInputArgs>? Links { get; set; }

        [Input("note")]
        public Input<Inputs.GetReviewNoteInputArgs>? Note { get; set; }

        /// <summary>
        /// A limited set of properties from the user profile who created the review.
        /// </summary>
        [Input("principalProfile")]
        public Input<Inputs.GetReviewPrincipalProfileInputArgs>? PrincipalProfile { get; set; }

        [Input("reviewerProfile")]
        public Input<Inputs.GetReviewReviewerProfileInputArgs>? ReviewerProfile { get; set; }

        public GetReviewInvokeArgs()
        {
        }
        public static new GetReviewInvokeArgs Empty => new GetReviewInvokeArgs();
    }


    [OutputType]
    public sealed class GetReviewResult
    {
        public readonly ImmutableArray<Outputs.GetReviewAllReviewerLevelResult> AllReviewerLevels;
        /// <summary>
        /// ID of the Campaign.
        /// </summary>
        public readonly string CampaignId;
        /// <summary>
        /// The ISO 8601 formatted date and time when the resource was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The id of user who created the resource.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Identifies the reviewer level of each reviews during access certification.
        /// </summary>
        public readonly string CurrentReviewerLevel;
        /// <summary>
        /// The ISO 8601 formatted date and time when the object status was decided.
        /// </summary>
        public readonly string Decided;
        /// <summary>
        /// The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
        /// </summary>
        public readonly string Decision;
        public readonly Outputs.GetReviewEntitlementBundleResult? EntitlementBundle;
        public readonly Outputs.GetReviewEntitlementValueResult? EntitlementValue;
        /// <summary>
        /// The ID of  review.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ISO 8601 formatted date and time when the object was last updated.
        /// </summary>
        public readonly string LastUpdated;
        /// <summary>
        /// The id of user who last updated the object.
        /// </summary>
        public readonly string LastUpdatedBy;
        public readonly Outputs.GetReviewLinksResult? Links;
        public readonly Outputs.GetReviewNoteResult? Note;
        /// <summary>
        /// A limited set of properties from the user profile who created the review.
        /// </summary>
        public readonly Outputs.GetReviewPrincipalProfileResult? PrincipalProfile;
        /// <summary>
        /// Enum: `ERROR`, `MANUAL`, `NONE`, `OPEN`, `SUCCESS`.
        /// </summary>
        public readonly string RemediationStatus;
        /// <summary>
        /// Resource ID for the Review.
        /// </summary>
        public readonly string ResourceId;
        public readonly Outputs.GetReviewReviewerProfileResult? ReviewerProfile;
        /// <summary>
        /// The type of reviewer to which the review is assigned.
        /// </summary>
        public readonly string ReviewerType;

        [OutputConstructor]
        private GetReviewResult(
            ImmutableArray<Outputs.GetReviewAllReviewerLevelResult> allReviewerLevels,

            string campaignId,

            string created,

            string createdBy,

            string currentReviewerLevel,

            string decided,

            string decision,

            Outputs.GetReviewEntitlementBundleResult? entitlementBundle,

            Outputs.GetReviewEntitlementValueResult? entitlementValue,

            string id,

            string lastUpdated,

            string lastUpdatedBy,

            Outputs.GetReviewLinksResult? links,

            Outputs.GetReviewNoteResult? note,

            Outputs.GetReviewPrincipalProfileResult? principalProfile,

            string remediationStatus,

            string resourceId,

            Outputs.GetReviewReviewerProfileResult? reviewerProfile,

            string reviewerType)
        {
            AllReviewerLevels = allReviewerLevels;
            CampaignId = campaignId;
            Created = created;
            CreatedBy = createdBy;
            CurrentReviewerLevel = currentReviewerLevel;
            Decided = decided;
            Decision = decision;
            EntitlementBundle = entitlementBundle;
            EntitlementValue = entitlementValue;
            Id = id;
            LastUpdated = lastUpdated;
            LastUpdatedBy = lastUpdatedBy;
            Links = links;
            Note = note;
            PrincipalProfile = principalProfile;
            RemediationStatus = remediationStatus;
            ResourceId = resourceId;
            ReviewerProfile = reviewerProfile;
            ReviewerType = reviewerType;
        }
    }
}
