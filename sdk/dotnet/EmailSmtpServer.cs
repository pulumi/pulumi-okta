// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/emailSmtpServer:EmailSmtpServer")]
    public partial class EmailSmtpServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Human-readable name for your SMTP server.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// If true, routes all email traffic through your SMTP server.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Hostname or IP address of your SMTP server.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Port number of your SMTP server.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a EmailSmtpServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailSmtpServer(string name, EmailSmtpServerArgs args, CustomResourceOptions? options = null)
            : base("okta:index/emailSmtpServer:EmailSmtpServer", name, args ?? new EmailSmtpServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailSmtpServer(string name, Input<string> id, EmailSmtpServerState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/emailSmtpServer:EmailSmtpServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailSmtpServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailSmtpServer Get(string name, Input<string> id, EmailSmtpServerState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailSmtpServer(name, id, state, options);
        }
    }

    public sealed class EmailSmtpServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable name for your SMTP server.
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// If true, routes all email traffic through your SMTP server.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Hostname or IP address of your SMTP server.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// Port number of your SMTP server.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public EmailSmtpServerArgs()
        {
        }
        public static new EmailSmtpServerArgs Empty => new EmailSmtpServerArgs();
    }

    public sealed class EmailSmtpServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable name for your SMTP server.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// If true, routes all email traffic through your SMTP server.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Hostname or IP address of your SMTP server.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Port number of your SMTP server.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public EmailSmtpServerState()
        {
        }
        public static new EmailSmtpServerState Empty => new EmailSmtpServerState();
    }
}
