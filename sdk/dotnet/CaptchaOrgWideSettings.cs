// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 
    /// This resource allows you to configure which parts of the authentication flow requires users to pass the CAPTCHA logic.
    /// CAPTCHA org-wide settings can be disabled by unsetting `captcha_id` and `enabled_for`.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCaptcha = new Okta.Captcha("exampleCaptcha", new()
    ///     {
    ///         Type = "HCAPTCHA",
    ///         SiteKey = "some_key",
    ///         SecretKey = "some_secret_key",
    ///     });
    /// 
    ///     var exampleCaptchaOrgWideSettings = new Okta.CaptchaOrgWideSettings("exampleCaptchaOrgWideSettings", new()
    ///     {
    ///         CaptchaId = okta_captcha.Test.Id,
    ///         EnabledFors = new[]
    ///         {
    ///             "SSR",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// The following example disables org-wide CAPTCHA.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCaptcha = new Okta.Captcha("exampleCaptcha", new()
    ///     {
    ///         SecretKey = "some_secret_key",
    ///         SiteKey = "some_key",
    ///         Type = "HCAPTCHA",
    ///     });
    /// 
    ///     var exampleCaptchaOrgWideSettings = new Okta.CaptchaOrgWideSettings("exampleCaptchaOrgWideSettings");
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Org-Wide CAPTCHA settings can be imported without any parameters.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings example _
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings")]
    public partial class CaptchaOrgWideSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the CAPTCHA.
        /// </summary>
        [Output("captchaId")]
        public Output<string?> CaptchaId { get; private set; } = null!;

        /// <summary>
        /// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
        /// </summary>
        [Output("enabledFors")]
        public Output<ImmutableArray<string>> EnabledFors { get; private set; } = null!;


        /// <summary>
        /// Create a CaptchaOrgWideSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CaptchaOrgWideSettings(string name, CaptchaOrgWideSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings", name, args ?? new CaptchaOrgWideSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CaptchaOrgWideSettings(string name, Input<string> id, CaptchaOrgWideSettingsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CaptchaOrgWideSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CaptchaOrgWideSettings Get(string name, Input<string> id, CaptchaOrgWideSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new CaptchaOrgWideSettings(name, id, state, options);
        }
    }

    public sealed class CaptchaOrgWideSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the CAPTCHA.
        /// </summary>
        [Input("captchaId")]
        public Input<string>? CaptchaId { get; set; }

        [Input("enabledFors")]
        private InputList<string>? _enabledFors;

        /// <summary>
        /// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
        /// </summary>
        public InputList<string> EnabledFors
        {
            get => _enabledFors ?? (_enabledFors = new InputList<string>());
            set => _enabledFors = value;
        }

        public CaptchaOrgWideSettingsArgs()
        {
        }
        public static new CaptchaOrgWideSettingsArgs Empty => new CaptchaOrgWideSettingsArgs();
    }

    public sealed class CaptchaOrgWideSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the CAPTCHA.
        /// </summary>
        [Input("captchaId")]
        public Input<string>? CaptchaId { get; set; }

        [Input("enabledFors")]
        private InputList<string>? _enabledFors;

        /// <summary>
        /// Array of pages that have CAPTCHA enabled. Valid values: `"SSR"`, `"SSPR"` and `"SIGN_IN"`.
        /// </summary>
        public InputList<string> EnabledFors
        {
            get => _enabledFors ?? (_enabledFors = new InputList<string>());
            set => _enabledFors = value;
        }

        public CaptchaOrgWideSettingsState()
        {
        }
        public static new CaptchaOrgWideSettingsState Empty => new CaptchaOrgWideSettingsState();
    }
}
