// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetAuthenticator
    {
        /// <summary>
        /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
        /// 
        /// Use this data source to retrieve an authenticator.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetAuthenticator.Invoke(new()
        ///     {
        ///         Name = "Security Question",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetAuthenticator.Invoke(new()
        ///     {
        ///         Key = "okta_email",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthenticatorResult> InvokeAsync(GetAuthenticatorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAuthenticatorResult>("okta:index/getAuthenticator:getAuthenticator", args ?? new GetAuthenticatorArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
        /// 
        /// Use this data source to retrieve an authenticator.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetAuthenticator.Invoke(new()
        ///     {
        ///         Name = "Security Question",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetAuthenticator.Invoke(new()
        ///     {
        ///         Key = "okta_email",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthenticatorResult> Invoke(GetAuthenticatorInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAuthenticatorResult>("okta:index/getAuthenticator:getAuthenticator", args ?? new GetAuthenticatorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthenticatorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the authenticator.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A human-readable string that identifies the authenticator.
        /// </summary>
        [Input("key")]
        public string? Key { get; set; }

        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAuthenticatorArgs()
        {
        }
        public static new GetAuthenticatorArgs Empty => new GetAuthenticatorArgs();
    }

    public sealed class GetAuthenticatorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the authenticator.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A human-readable string that identifies the authenticator.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAuthenticatorInvokeArgs()
        {
        }
        public static new GetAuthenticatorInvokeArgs Empty => new GetAuthenticatorInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthenticatorResult
    {
        /// <summary>
        /// ID of the authenticator.
        /// </summary>
        public readonly string? Id;
        public readonly string? Key;
        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        public readonly string? Name;
        public readonly int ProviderAuthPort;
        public readonly string ProviderHostname;
        public readonly string ProviderInstanceId;
        public readonly string ProviderType;
        public readonly string ProviderUserNameTemplate;
        /// <summary>
        /// Settings for the authenticator.
        /// </summary>
        public readonly string Settings;
        public readonly string Status;
        /// <summary>
        /// Type of the Authenticator.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAuthenticatorResult(
            string? id,

            string? key,

            string? name,

            int providerAuthPort,

            string providerHostname,

            string providerInstanceId,

            string providerType,

            string providerUserNameTemplate,

            string settings,

            string status,

            string type)
        {
            Id = id;
            Key = key;
            Name = name;
            ProviderAuthPort = providerAuthPort;
            ProviderHostname = providerHostname;
            ProviderInstanceId = providerInstanceId;
            ProviderType = providerType;
            ProviderUserNameTemplate = providerUserNameTemplate;
            Settings = settings;
            Status = status;
            Type = type;
        }
    }
}
