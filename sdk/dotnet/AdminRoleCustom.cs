// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Resource to manage administrative Role assignments for a User
    /// 
    /// These operations allow the creation and manipulation of custom roles as custom collections of permissions.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.AdminRoleCustom("example", new()
    ///     {
    ///         Label = "AppAssignmentManager",
    ///         Description = "This role allows app assignment management",
    ///         Permissions = new[]
    ///         {
    ///             "okta.apps.assignment.manage",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/adminRoleCustom:AdminRoleCustom example &lt;custom_role_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/adminRoleCustom:AdminRoleCustom")]
    public partial class AdminRoleCustom : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable description of the new Role
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name given to the new Role
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The permissions that the new Role grants. At least one
        /// 			permission must be specified when creating custom role. Valid values: "okta.users.manage",
        /// 			"okta.users.create",
        /// 			"okta.users.read",
        /// 			"okta.users.credentials.manage",
        /// 			"okta.users.credentials.resetFactors",
        /// 			"okta.users.credentials.resetPassword",
        /// 			"okta.users.credentials.expirePassword",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.users.lifecycle.manage",
        /// 			"okta.users.lifecycle.activate",
        /// 			"okta.users.lifecycle.deactivate",
        /// 			"okta.users.lifecycle.suspend",
        /// 			"okta.users.lifecycle.unsuspend",
        /// 			"okta.users.lifecycle.delete",
        /// 			"okta.users.lifecycle.unlock",
        /// 			"okta.users.lifecycle.clearSessions",
        /// 			"okta.users.groupMembership.manage",
        /// 			"okta.users.appAssignment.manage",
        /// 			"okta.users.apitokens.manage",
        /// 			"okta.users.apitokens.read",
        /// 			"okta.groups.manage",
        /// 			"okta.groups.create",
        /// 			"okta.groups.members.manage",
        /// 			"okta.groups.read",
        /// 			"okta.groups.appAssignment.manage",
        /// 			"okta.apps.read",
        /// 			"okta.apps.manage",
        /// 			"okta.apps.assignment.manage",
        /// 			"okta.profilesources.import.run",
        /// 			"okta.authzServers.read",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.authzServers.manage",
        /// 			"okta.customizations.read",
        /// 			"okta.customizations.manage",
        /// 			"okta.identityProviders.read",
        /// 			"okta.identityProviders.manage",
        /// 			"okta.workflows.read",
        /// 			"okta.workflows.invoke".
        /// 			"okta.governance.accessCertifications.manage",
        /// 			"okta.governance.accessRequests.manage",
        /// 			"okta.apps.manageFirstPartyApps",
        /// 			"okta.agents.manage",
        /// 			"okta.agents.register",
        /// 			"okta.agents.view",
        /// 			"okta.directories.manage",
        /// 			"okta.directories.read",
        /// 			"okta.devices.manage",
        /// 			"okta.devices.lifecycle.manage",
        /// 			"okta.devices.lifecycle.activate",
        /// 			"okta.devices.lifecycle.deactivate",
        /// 			"okta.devices.lifecycle.suspend",
        /// 			"okta.devices.lifecycle.unsuspend",
        /// 			"okta.devices.lifecycle.delete",
        /// 			"okta.devices.read",
        /// 			"okta.iam.read",
        /// 			"okta.support.cases.manage".,
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;


        /// <summary>
        /// Create a AdminRoleCustom resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdminRoleCustom(string name, AdminRoleCustomArgs args, CustomResourceOptions? options = null)
            : base("okta:index/adminRoleCustom:AdminRoleCustom", name, args ?? new AdminRoleCustomArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdminRoleCustom(string name, Input<string> id, AdminRoleCustomState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/adminRoleCustom:AdminRoleCustom", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdminRoleCustom resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdminRoleCustom Get(string name, Input<string> id, AdminRoleCustomState? state = null, CustomResourceOptions? options = null)
        {
            return new AdminRoleCustom(name, id, state, options);
        }
    }

    public sealed class AdminRoleCustomArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the new Role
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The name given to the new Role
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions that the new Role grants. At least one
        /// 			permission must be specified when creating custom role. Valid values: "okta.users.manage",
        /// 			"okta.users.create",
        /// 			"okta.users.read",
        /// 			"okta.users.credentials.manage",
        /// 			"okta.users.credentials.resetFactors",
        /// 			"okta.users.credentials.resetPassword",
        /// 			"okta.users.credentials.expirePassword",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.users.lifecycle.manage",
        /// 			"okta.users.lifecycle.activate",
        /// 			"okta.users.lifecycle.deactivate",
        /// 			"okta.users.lifecycle.suspend",
        /// 			"okta.users.lifecycle.unsuspend",
        /// 			"okta.users.lifecycle.delete",
        /// 			"okta.users.lifecycle.unlock",
        /// 			"okta.users.lifecycle.clearSessions",
        /// 			"okta.users.groupMembership.manage",
        /// 			"okta.users.appAssignment.manage",
        /// 			"okta.users.apitokens.manage",
        /// 			"okta.users.apitokens.read",
        /// 			"okta.groups.manage",
        /// 			"okta.groups.create",
        /// 			"okta.groups.members.manage",
        /// 			"okta.groups.read",
        /// 			"okta.groups.appAssignment.manage",
        /// 			"okta.apps.read",
        /// 			"okta.apps.manage",
        /// 			"okta.apps.assignment.manage",
        /// 			"okta.profilesources.import.run",
        /// 			"okta.authzServers.read",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.authzServers.manage",
        /// 			"okta.customizations.read",
        /// 			"okta.customizations.manage",
        /// 			"okta.identityProviders.read",
        /// 			"okta.identityProviders.manage",
        /// 			"okta.workflows.read",
        /// 			"okta.workflows.invoke".
        /// 			"okta.governance.accessCertifications.manage",
        /// 			"okta.governance.accessRequests.manage",
        /// 			"okta.apps.manageFirstPartyApps",
        /// 			"okta.agents.manage",
        /// 			"okta.agents.register",
        /// 			"okta.agents.view",
        /// 			"okta.directories.manage",
        /// 			"okta.directories.read",
        /// 			"okta.devices.manage",
        /// 			"okta.devices.lifecycle.manage",
        /// 			"okta.devices.lifecycle.activate",
        /// 			"okta.devices.lifecycle.deactivate",
        /// 			"okta.devices.lifecycle.suspend",
        /// 			"okta.devices.lifecycle.unsuspend",
        /// 			"okta.devices.lifecycle.delete",
        /// 			"okta.devices.read",
        /// 			"okta.iam.read",
        /// 			"okta.support.cases.manage".,
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public AdminRoleCustomArgs()
        {
        }
        public static new AdminRoleCustomArgs Empty => new AdminRoleCustomArgs();
    }

    public sealed class AdminRoleCustomState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the new Role
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name given to the new Role
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions that the new Role grants. At least one
        /// 			permission must be specified when creating custom role. Valid values: "okta.users.manage",
        /// 			"okta.users.create",
        /// 			"okta.users.read",
        /// 			"okta.users.credentials.manage",
        /// 			"okta.users.credentials.resetFactors",
        /// 			"okta.users.credentials.resetPassword",
        /// 			"okta.users.credentials.expirePassword",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.users.lifecycle.manage",
        /// 			"okta.users.lifecycle.activate",
        /// 			"okta.users.lifecycle.deactivate",
        /// 			"okta.users.lifecycle.suspend",
        /// 			"okta.users.lifecycle.unsuspend",
        /// 			"okta.users.lifecycle.delete",
        /// 			"okta.users.lifecycle.unlock",
        /// 			"okta.users.lifecycle.clearSessions",
        /// 			"okta.users.groupMembership.manage",
        /// 			"okta.users.appAssignment.manage",
        /// 			"okta.users.apitokens.manage",
        /// 			"okta.users.apitokens.read",
        /// 			"okta.groups.manage",
        /// 			"okta.groups.create",
        /// 			"okta.groups.members.manage",
        /// 			"okta.groups.read",
        /// 			"okta.groups.appAssignment.manage",
        /// 			"okta.apps.read",
        /// 			"okta.apps.manage",
        /// 			"okta.apps.assignment.manage",
        /// 			"okta.profilesources.import.run",
        /// 			"okta.authzServers.read",
        /// 			"okta.users.userprofile.manage",
        /// 			"okta.authzServers.manage",
        /// 			"okta.customizations.read",
        /// 			"okta.customizations.manage",
        /// 			"okta.identityProviders.read",
        /// 			"okta.identityProviders.manage",
        /// 			"okta.workflows.read",
        /// 			"okta.workflows.invoke".
        /// 			"okta.governance.accessCertifications.manage",
        /// 			"okta.governance.accessRequests.manage",
        /// 			"okta.apps.manageFirstPartyApps",
        /// 			"okta.agents.manage",
        /// 			"okta.agents.register",
        /// 			"okta.agents.view",
        /// 			"okta.directories.manage",
        /// 			"okta.directories.read",
        /// 			"okta.devices.manage",
        /// 			"okta.devices.lifecycle.manage",
        /// 			"okta.devices.lifecycle.activate",
        /// 			"okta.devices.lifecycle.deactivate",
        /// 			"okta.devices.lifecycle.suspend",
        /// 			"okta.devices.lifecycle.unsuspend",
        /// 			"okta.devices.lifecycle.delete",
        /// 			"okta.devices.read",
        /// 			"okta.iam.read",
        /// 			"okta.support.cases.manage".,
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public AdminRoleCustomState()
        {
        }
        public static new AdminRoleCustomState Empty => new AdminRoleCustomState();
    }
}
