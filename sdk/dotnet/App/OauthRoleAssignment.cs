// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    /// <summary>
    /// Manages assignment of an admin role to an OAuth application
    /// 		This resource allows you to assign an Okta admin role to a OAuth
    /// 		service application. This requires the Okta tenant feature flag for this function to be enabled.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:app/oauthRoleAssignment:OauthRoleAssignment test &lt;clientID&gt;/&lt;roleAssignmentID&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:app/oauthRoleAssignment:OauthRoleAssignment")]
    public partial class OauthRoleAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Client ID for the role to be assigned to
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// Label of the role assignment
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Resource set for the custom role to assign, must be the ID of the created resource set.
        /// </summary>
        [Output("resourceSet")]
        public Output<string?> ResourceSet { get; private set; } = null!;

        /// <summary>
        /// Custom Role ID
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// Status of the role assignment
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `ResourceSet` and `Role` attributes to be set.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a OauthRoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OauthRoleAssignment(string name, OauthRoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("okta:app/oauthRoleAssignment:OauthRoleAssignment", name, args ?? new OauthRoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OauthRoleAssignment(string name, Input<string> id, OauthRoleAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("okta:app/oauthRoleAssignment:OauthRoleAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OauthRoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OauthRoleAssignment Get(string name, Input<string> id, OauthRoleAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new OauthRoleAssignment(name, id, state, options);
        }
    }

    public sealed class OauthRoleAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Client ID for the role to be assigned to
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// Resource set for the custom role to assign, must be the ID of the created resource set.
        /// </summary>
        [Input("resourceSet")]
        public Input<string>? ResourceSet { get; set; }

        /// <summary>
        /// Custom Role ID
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `ResourceSet` and `Role` attributes to be set.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public OauthRoleAssignmentArgs()
        {
        }
        public static new OauthRoleAssignmentArgs Empty => new OauthRoleAssignmentArgs();
    }

    public sealed class OauthRoleAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Client ID for the role to be assigned to
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Label of the role assignment
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Resource set for the custom role to assign, must be the ID of the created resource set.
        /// </summary>
        [Input("resourceSet")]
        public Input<string>? ResourceSet { get; set; }

        /// <summary>
        /// Custom Role ID
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Status of the role assignment
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `ResourceSet` and `Role` attributes to be set.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public OauthRoleAssignmentState()
        {
        }
        public static new OauthRoleAssignmentState Empty => new OauthRoleAssignmentState();
    }
}
