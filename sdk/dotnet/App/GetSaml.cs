// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    public static class GetSaml
    {
        /// <summary>
        /// Use this data source to retrieve the collaborators for a given repository.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.App.GetSaml.InvokeAsync(new Okta.App.GetSamlArgs
        ///         {
        ///             Label = "Example App",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSamlResult> InvokeAsync(GetSamlArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSamlResult>("okta:app/getSaml:getSaml", args ?? new GetSamlArgs(), options.WithVersion());
    }


    public sealed class GetSamlArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public string? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page URL.
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public string? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self service.
        /// </summary>
        [Input("accessibilitySelfService")]
        public bool? AccessibilitySelfService { get; set; }

        /// <summary>
        /// tells the provider to query for only `ACTIVE` applications.
        /// </summary>
        [Input("activeOnly")]
        public bool? ActiveOnly { get; set; }

        /// <summary>
        /// Application settings in JSON format.
        /// </summary>
        [Input("appSettingsJson")]
        public string? AppSettingsJson { get; set; }

        /// <summary>
        /// Determines whether the SAML assertion is digitally signed.
        /// </summary>
        [Input("assertionSigned")]
        public bool? AssertionSigned { get; set; }

        [Input("attributeStatements")]
        private List<Inputs.GetSamlAttributeStatementArgs>? _attributeStatements;

        /// <summary>
        /// SAML Attribute statements.
        /// </summary>
        public List<Inputs.GetSamlAttributeStatementArgs> AttributeStatements
        {
            get => _attributeStatements ?? (_attributeStatements = new List<Inputs.GetSamlAttributeStatementArgs>());
            set => _attributeStatements = value;
        }

        /// <summary>
        /// Audience restriction.
        /// </summary>
        [Input("audience")]
        public string? Audience { get; set; }

        /// <summary>
        /// Identifies the SAML authentication context class for the assertion’s authentication statement.
        /// </summary>
        [Input("authnContextClassRef")]
        public string? AuthnContextClassRef { get; set; }

        /// <summary>
        /// Display auto submit toolbar.
        /// </summary>
        [Input("autoSubmitToolbar")]
        public bool? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// Identifies a specific application resource in an IDP initiated SSO scenario.
        /// </summary>
        [Input("defaultRelayState")]
        public string? DefaultRelayState { get; set; }

        /// <summary>
        /// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion.
        /// </summary>
        [Input("destination")]
        public string? Destination { get; set; }

        /// <summary>
        /// Determines the digest algorithm used to digitally sign the SAML assertion and response.
        /// </summary>
        [Input("digestAlgorithm")]
        public string? DigestAlgorithm { get; set; }

        [Input("features")]
        private List<string>? _features;

        /// <summary>
        /// features enabled.
        /// </summary>
        public List<string> Features
        {
            get => _features ?? (_features = new List<string>());
            set => _features = value;
        }

        /// <summary>
        /// Do not display application icon on mobile app.
        /// </summary>
        [Input("hideIos")]
        public bool? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users
        /// </summary>
        [Input("hideWeb")]
        public bool? HideWeb { get; set; }

        /// <summary>
        /// Prompt user to re-authenticate if SP asks for it.
        /// </summary>
        [Input("honorForceAuthn")]
        public bool? HonorForceAuthn { get; set; }

        /// <summary>
        /// `id` of application to retrieve, conflicts with `label` and `label_prefix`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// SAML issuer ID.
        /// </summary>
        [Input("idpIssuer")]
        public string? IdpIssuer { get; set; }

        /// <summary>
        /// The label of the app to retrieve, conflicts with `label_prefix` and `id`.
        /// </summary>
        [Input("label")]
        public string? Label { get; set; }

        /// <summary>
        /// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the provider to do a `starts with` query as opposed to an `equals` query.
        /// </summary>
        [Input("labelPrefix")]
        public string? LabelPrefix { get; set; }

        /// <summary>
        /// The location where the app may present the SAML assertion.
        /// </summary>
        [Input("recipient")]
        public string? Recipient { get; set; }

        /// <summary>
        /// Denotes whether the request is compressed or not.
        /// </summary>
        [Input("requestCompressed")]
        public bool? RequestCompressed { get; set; }

        /// <summary>
        /// Determines whether the SAML auth response message is digitally signed.
        /// </summary>
        [Input("responseSigned")]
        public bool? ResponseSigned { get; set; }

        /// <summary>
        /// Signature algorithm used ot digitally sign the assertion and response.
        /// </summary>
        [Input("signatureAlgorithm")]
        public string? SignatureAlgorithm { get; set; }

        /// <summary>
        /// SAML service provider issuer.
        /// </summary>
        [Input("spIssuer")]
        public string? SpIssuer { get; set; }

        /// <summary>
        /// Single Sign on Url.
        /// </summary>
        [Input("ssoUrl")]
        public string? SsoUrl { get; set; }

        /// <summary>
        /// Identifies the SAML processing rules.
        /// </summary>
        [Input("subjectNameIdFormat")]
        public string? SubjectNameIdFormat { get; set; }

        /// <summary>
        /// Template for app user's username when a user is assigned to the app.
        /// </summary>
        [Input("subjectNameIdTemplate")]
        public string? SubjectNameIdTemplate { get; set; }

        /// <summary>
        /// Username template.
        /// </summary>
        [Input("userNameTemplate")]
        public string? UserNameTemplate { get; set; }

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public string? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type.
        /// </summary>
        [Input("userNameTemplateType")]
        public string? UserNameTemplateType { get; set; }

        public GetSamlArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSamlResult
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        public readonly string? AccessibilityErrorRedirectUrl;
        /// <summary>
        /// Custom login page URL.
        /// </summary>
        public readonly string? AccessibilityLoginRedirectUrl;
        /// <summary>
        /// Enable self service.
        /// </summary>
        public readonly bool? AccessibilitySelfService;
        public readonly bool? ActiveOnly;
        /// <summary>
        /// Application settings in JSON format.
        /// </summary>
        public readonly string? AppSettingsJson;
        /// <summary>
        /// Determines whether the SAML assertion is digitally signed.
        /// </summary>
        public readonly bool? AssertionSigned;
        /// <summary>
        /// SAML Attribute statements.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSamlAttributeStatementResult> AttributeStatements;
        /// <summary>
        /// Audience restriction.
        /// </summary>
        public readonly string? Audience;
        /// <summary>
        /// Identifies the SAML authentication context class for the assertion’s authentication statement.
        /// </summary>
        public readonly string? AuthnContextClassRef;
        /// <summary>
        /// Display auto submit toolbar.
        /// </summary>
        public readonly bool? AutoSubmitToolbar;
        /// <summary>
        /// Identifies a specific application resource in an IDP initiated SSO scenario.
        /// </summary>
        public readonly string? DefaultRelayState;
        /// <summary>
        /// description of application.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion.
        /// </summary>
        public readonly string? Destination;
        /// <summary>
        /// Determines the digest algorithm used to digitally sign the SAML assertion and response.
        /// </summary>
        public readonly string? DigestAlgorithm;
        /// <summary>
        /// features enabled.
        /// </summary>
        public readonly ImmutableArray<string> Features;
        /// <summary>
        /// Do not display application icon on mobile app.
        /// </summary>
        public readonly bool? HideIos;
        /// <summary>
        /// Do not display application icon to users
        /// </summary>
        public readonly bool? HideWeb;
        /// <summary>
        /// Prompt user to re-authenticate if SP asks for it.
        /// </summary>
        public readonly bool? HonorForceAuthn;
        /// <summary>
        /// id of application.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// SAML issuer ID.
        /// </summary>
        public readonly string? IdpIssuer;
        /// <summary>
        /// Certificate key ID.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// label of application.
        /// </summary>
        public readonly string? Label;
        public readonly string? LabelPrefix;
        /// <summary>
        /// name of application.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The location where the app may present the SAML assertion.
        /// </summary>
        public readonly string? Recipient;
        /// <summary>
        /// Denotes whether the request is compressed or not.
        /// </summary>
        public readonly bool? RequestCompressed;
        /// <summary>
        /// Determines whether the SAML auth response message is digitally signed.
        /// </summary>
        public readonly bool? ResponseSigned;
        /// <summary>
        /// Signature algorithm used ot digitally sign the assertion and response.
        /// </summary>
        public readonly string? SignatureAlgorithm;
        /// <summary>
        /// SAML service provider issuer.
        /// </summary>
        public readonly string? SpIssuer;
        /// <summary>
        /// Single Sign on Url.
        /// </summary>
        public readonly string? SsoUrl;
        /// <summary>
        /// status of application.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Identifies the SAML processing rules.
        /// </summary>
        public readonly string? SubjectNameIdFormat;
        /// <summary>
        /// Template for app user's username when a user is assigned to the app.
        /// </summary>
        public readonly string? SubjectNameIdTemplate;
        /// <summary>
        /// Username template.
        /// </summary>
        public readonly string? UserNameTemplate;
        /// <summary>
        /// Username template suffix.
        /// </summary>
        public readonly string? UserNameTemplateSuffix;
        /// <summary>
        /// Username template type.
        /// </summary>
        public readonly string? UserNameTemplateType;

        [OutputConstructor]
        private GetSamlResult(
            string? accessibilityErrorRedirectUrl,

            string? accessibilityLoginRedirectUrl,

            bool? accessibilitySelfService,

            bool? activeOnly,

            string? appSettingsJson,

            bool? assertionSigned,

            ImmutableArray<Outputs.GetSamlAttributeStatementResult> attributeStatements,

            string? audience,

            string? authnContextClassRef,

            bool? autoSubmitToolbar,

            string? defaultRelayState,

            string description,

            string? destination,

            string? digestAlgorithm,

            ImmutableArray<string> features,

            bool? hideIos,

            bool? hideWeb,

            bool? honorForceAuthn,

            string? id,

            string? idpIssuer,

            string keyId,

            string? label,

            string? labelPrefix,

            string name,

            string? recipient,

            bool? requestCompressed,

            bool? responseSigned,

            string? signatureAlgorithm,

            string? spIssuer,

            string? ssoUrl,

            string status,

            string? subjectNameIdFormat,

            string? subjectNameIdTemplate,

            string? userNameTemplate,

            string? userNameTemplateSuffix,

            string? userNameTemplateType)
        {
            AccessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            AccessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            AccessibilitySelfService = accessibilitySelfService;
            ActiveOnly = activeOnly;
            AppSettingsJson = appSettingsJson;
            AssertionSigned = assertionSigned;
            AttributeStatements = attributeStatements;
            Audience = audience;
            AuthnContextClassRef = authnContextClassRef;
            AutoSubmitToolbar = autoSubmitToolbar;
            DefaultRelayState = defaultRelayState;
            Description = description;
            Destination = destination;
            DigestAlgorithm = digestAlgorithm;
            Features = features;
            HideIos = hideIos;
            HideWeb = hideWeb;
            HonorForceAuthn = honorForceAuthn;
            Id = id;
            IdpIssuer = idpIssuer;
            KeyId = keyId;
            Label = label;
            LabelPrefix = labelPrefix;
            Name = name;
            Recipient = recipient;
            RequestCompressed = requestCompressed;
            ResponseSigned = responseSigned;
            SignatureAlgorithm = signatureAlgorithm;
            SpIssuer = spIssuer;
            SsoUrl = ssoUrl;
            Status = status;
            SubjectNameIdFormat = subjectNameIdFormat;
            SubjectNameIdTemplate = subjectNameIdTemplate;
            UserNameTemplate = userNameTemplate;
            UserNameTemplateSuffix = userNameTemplateSuffix;
            UserNameTemplateType = userNameTemplateType;
        }
    }
}
