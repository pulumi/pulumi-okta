// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    public static class GetOauth
    {
        public static Task<GetOauthResult> InvokeAsync(GetOauthArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOauthResult>("okta:app/getOauth:getOauth", args ?? new GetOauthArgs(), options.WithVersion());
    }


    public sealed class GetOauthArgs : Pulumi.InvokeArgs
    {
        [Input("activeOnly")]
        public bool? ActiveOnly { get; set; }

        [Input("autoSubmitToolbar")]
        public bool? AutoSubmitToolbar { get; set; }

        [Input("hideIos")]
        public bool? HideIos { get; set; }

        [Input("hideWeb")]
        public bool? HideWeb { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("label")]
        public string? Label { get; set; }

        [Input("labelPrefix")]
        public string? LabelPrefix { get; set; }

        public GetOauthArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOauthResult
    {
        public readonly bool? ActiveOnly;
        public readonly bool? AutoSubmitToolbar;
        public readonly string ClientId;
        public readonly string ClientUri;
        public readonly ImmutableArray<string> GrantTypes;
        public readonly bool? HideIos;
        public readonly bool? HideWeb;
        public readonly string? Id;
        public readonly string? Label;
        public readonly string? LabelPrefix;
        public readonly string LoginMode;
        public readonly ImmutableArray<string> LoginScopes;
        public readonly string LoginUri;
        public readonly string LogoUri;
        public readonly string Name;
        public readonly string PolicyUri;
        public readonly ImmutableArray<string> PostLogoutRedirectUris;
        public readonly ImmutableArray<string> RedirectUris;
        public readonly ImmutableArray<string> ResponseTypes;
        public readonly string Status;
        public readonly string Type;

        [OutputConstructor]
        private GetOauthResult(
            bool? activeOnly,

            bool? autoSubmitToolbar,

            string clientId,

            string clientUri,

            ImmutableArray<string> grantTypes,

            bool? hideIos,

            bool? hideWeb,

            string? id,

            string? label,

            string? labelPrefix,

            string loginMode,

            ImmutableArray<string> loginScopes,

            string loginUri,

            string logoUri,

            string name,

            string policyUri,

            ImmutableArray<string> postLogoutRedirectUris,

            ImmutableArray<string> redirectUris,

            ImmutableArray<string> responseTypes,

            string status,

            string type)
        {
            ActiveOnly = activeOnly;
            AutoSubmitToolbar = autoSubmitToolbar;
            ClientId = clientId;
            ClientUri = clientUri;
            GrantTypes = grantTypes;
            HideIos = hideIos;
            HideWeb = hideWeb;
            Id = id;
            Label = label;
            LabelPrefix = labelPrefix;
            LoginMode = loginMode;
            LoginScopes = loginScopes;
            LoginUri = loginUri;
            LogoUri = logoUri;
            Name = name;
            PolicyUri = policyUri;
            PostLogoutRedirectUris = postLogoutRedirectUris;
            RedirectUris = redirectUris;
            ResponseTypes = responseTypes;
            Status = status;
            Type = type;
        }
    }
}
