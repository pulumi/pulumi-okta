// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Okta.App
{
    public static class GetApp
    {
        /// <summary>
        /// Use this data source to retrieve an application from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.App.GetApp.InvokeAsync(new Okta.App.GetAppArgs
        ///         {
        ///             Label = "Example App",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAppResult> InvokeAsync(GetAppArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppResult>("okta:app/getApp:getApp", args ?? new GetAppArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to retrieve an application from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.App.GetApp.InvokeAsync(new Okta.App.GetAppArgs
        ///         {
        ///             Label = "Example App",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAppResult> Invoke(GetAppInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAppResult>("okta:app/getApp:getApp", args ?? new GetAppInvokeArgs(), options.WithVersion());
    }


    public sealed class GetAppArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// tells the provider to query for only `ACTIVE` applications.
        /// </summary>
        [Input("activeOnly")]
        public bool? ActiveOnly { get; set; }

        [Input("groups")]
        private List<string>? _groups;

        /// <summary>
        /// List of groups IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
        /// </summary>
        [Obsolete(@"The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`")]
        public List<string> Groups
        {
            get => _groups ?? (_groups = new List<string>());
            set => _groups = value;
        }

        /// <summary>
        /// `id` of application to retrieve, conflicts with `label` and `label_prefix`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
        /// the `?q=&lt;label&gt;` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
        /// and `label`. This is used to avoid paginating through all applications.
        /// </summary>
        [Input("label")]
        public string? Label { get; set; }

        /// <summary>
        /// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
        /// provider to do a `starts with` query as opposed to an `equals` query.
        /// </summary>
        [Input("labelPrefix")]
        public string? LabelPrefix { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `groups` sync. Default is `false`.
        /// </summary>
        [Input("skipGroups")]
        public bool? SkipGroups { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `users` sync. Default is `false`.
        /// </summary>
        [Input("skipUsers")]
        public bool? SkipUsers { get; set; }

        [Input("users")]
        private List<string>? _users;

        /// <summary>
        /// List of users IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
        /// </summary>
        [Obsolete(@"The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`")]
        public List<string> Users
        {
            get => _users ?? (_users = new List<string>());
            set => _users = value;
        }

        public GetAppArgs()
        {
        }
    }

    public sealed class GetAppInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// tells the provider to query for only `ACTIVE` applications.
        /// </summary>
        [Input("activeOnly")]
        public Input<bool>? ActiveOnly { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// List of groups IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
        /// </summary>
        [Obsolete(@"The `groups` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_group_assignments`")]
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// `id` of application to retrieve, conflicts with `label` and `label_prefix`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
        /// the `?q=&lt;label&gt;` query parameter exposed by Okta's API. It should be noted that at this time this searches both `name`
        /// and `label`. This is used to avoid paginating through all applications.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
        /// provider to do a `starts with` query as opposed to an `equals` query.
        /// </summary>
        [Input("labelPrefix")]
        public Input<string>? LabelPrefix { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `groups` sync. Default is `false`.
        /// </summary>
        [Input("skipGroups")]
        public Input<bool>? SkipGroups { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `users` sync. Default is `false`.
        /// </summary>
        [Input("skipUsers")]
        public Input<bool>? SkipUsers { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// List of users IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
        /// </summary>
        [Obsolete(@"The `users` field is now deprecated for the data source `okta_app`, please replace all uses of this with: `okta_app_user_assignments`")]
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public GetAppInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAppResult
    {
        public readonly bool? ActiveOnly;
        /// <summary>
        /// List of groups IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
        /// </summary>
        public readonly ImmutableArray<string> Groups;
        /// <summary>
        /// Application ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Application label.
        /// </summary>
        public readonly string? Label;
        public readonly string? LabelPrefix;
        /// <summary>
        /// Generic JSON containing discoverable resources related to the app.
        /// </summary>
        public readonly string Links;
        /// <summary>
        /// Application name.
        /// </summary>
        public readonly string Name;
        public readonly bool? SkipGroups;
        public readonly bool? SkipUsers;
        /// <summary>
        /// Application status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// List of users IDs assigned to the application.
        /// - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
        /// </summary>
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private GetAppResult(
            bool? activeOnly,

            ImmutableArray<string> groups,

            string? id,

            string? label,

            string? labelPrefix,

            string links,

            string name,

            bool? skipGroups,

            bool? skipUsers,

            string status,

            ImmutableArray<string> users)
        {
            ActiveOnly = activeOnly;
            Groups = groups;
            Id = id;
            Label = label;
            LabelPrefix = labelPrefix;
            Links = links;
            Name = name;
            SkipGroups = skipGroups;
            SkipUsers = skipUsers;
            Status = status;
            Users = users;
        }
    }
}
