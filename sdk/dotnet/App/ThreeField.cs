// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    /// <summary>
    /// Creates a Three Field Application.
    /// This resource allows you to create and configure a Three Field Application.
    /// &gt; During an apply if there is change in 'status' the app will first be
    /// activated or deactivated in accordance with the 'status' change. Then, all
    /// other arguments that changed will be applied.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:app/threeField:ThreeField example &amp;#60;app id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:app/threeField:ThreeField")]
    public partial class ThreeField : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom error page URL
        /// </summary>
        [Output("accessibilityErrorRedirectUrl")]
        public Output<string?> AccessibilityErrorRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Custom login page URL
        /// </summary>
        [Output("accessibilityLoginRedirectUrl")]
        public Output<string?> AccessibilityLoginRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Enable self service. Default is `false`
        /// </summary>
        [Output("accessibilitySelfService")]
        public Output<bool?> AccessibilitySelfService { get; private set; } = null!;

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Output("adminNote")]
        public Output<string?> AdminNote { get; private set; } = null!;

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Output("appLinksJson")]
        public Output<string?> AppLinksJson { get; private set; } = null!;

        /// <summary>
        /// Display auto submit toolbar
        /// </summary>
        [Output("autoSubmitToolbar")]
        public Output<bool?> AutoSubmitToolbar { get; private set; } = null!;

        /// <summary>
        /// Login button field CSS selector
        /// </summary>
        [Output("buttonSelector")]
        public Output<string> ButtonSelector { get; private set; } = null!;

        /// <summary>
        /// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
        /// </summary>
        [Output("credentialsScheme")]
        public Output<string?> CredentialsScheme { get; private set; } = null!;

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Output("enduserNote")]
        public Output<string?> EnduserNote { get; private set; } = null!;

        /// <summary>
        /// Extra field CSS selector
        /// </summary>
        [Output("extraFieldSelector")]
        public Output<string> ExtraFieldSelector { get; private set; } = null!;

        /// <summary>
        /// Value for extra form field
        /// </summary>
        [Output("extraFieldValue")]
        public Output<string> ExtraFieldValue { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon on mobile app
        /// </summary>
        [Output("hideIos")]
        public Output<bool?> HideIos { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon to users
        /// </summary>
        [Output("hideWeb")]
        public Output<bool?> HideWeb { get; private set; } = null!;

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Output("logo")]
        public Output<string?> Logo { get; private set; } = null!;

        /// <summary>
        /// URL of the application's logo
        /// </summary>
        [Output("logoUrl")]
        public Output<string> LogoUrl { get; private set; } = null!;

        /// <summary>
        /// Name of the app.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Login password field CSS selector
        /// </summary>
        [Output("passwordSelector")]
        public Output<string> PasswordSelector { get; private set; } = null!;

        /// <summary>
        /// Allow user to reveal password. It can not be set to `true` if `credentials_scheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
        /// </summary>
        [Output("revealPassword")]
        public Output<bool?> RevealPassword { get; private set; } = null!;

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Output("sharedPassword")]
        public Output<string?> SharedPassword { get; private set; } = null!;

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Output("sharedUsername")]
        public Output<string?> SharedUsername { get; private set; } = null!;

        /// <summary>
        /// Sign on mode of application.
        /// </summary>
        [Output("signOnMode")]
        public Output<string> SignOnMode { get; private set; } = null!;

        /// <summary>
        /// Status of application. By default, it is `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Login URL
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// A regex that further restricts URL to the specified regex
        /// </summary>
        [Output("urlRegex")]
        public Output<string?> UrlRegex { get; private set; } = null!;

        /// <summary>
        /// Username template. Default: `${source.login}`
        /// </summary>
        [Output("userNameTemplate")]
        public Output<string?> UserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
        /// </summary>
        [Output("userNameTemplatePushStatus")]
        public Output<string?> UserNameTemplatePushStatus { get; private set; } = null!;

        /// <summary>
        /// Username template suffix
        /// </summary>
        [Output("userNameTemplateSuffix")]
        public Output<string?> UserNameTemplateSuffix { get; private set; } = null!;

        /// <summary>
        /// Username template type. Default: `BUILT_IN`
        /// </summary>
        [Output("userNameTemplateType")]
        public Output<string?> UserNameTemplateType { get; private set; } = null!;

        /// <summary>
        /// Login username field CSS selector
        /// </summary>
        [Output("usernameSelector")]
        public Output<string> UsernameSelector { get; private set; } = null!;


        /// <summary>
        /// Create a ThreeField resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ThreeField(string name, ThreeFieldArgs args, CustomResourceOptions? options = null)
            : base("okta:app/threeField:ThreeField", name, args ?? new ThreeFieldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ThreeField(string name, Input<string> id, ThreeFieldState? state = null, CustomResourceOptions? options = null)
            : base("okta:app/threeField:ThreeField", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ThreeField resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ThreeField Get(string name, Input<string> id, ThreeFieldState? state = null, CustomResourceOptions? options = null)
        {
            return new ThreeField(name, id, state, options);
        }
    }

    public sealed class ThreeFieldArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page URL
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self service. Default is `false`
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Display auto submit toolbar
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// Login button field CSS selector
        /// </summary>
        [Input("buttonSelector", required: true)]
        public Input<string> ButtonSelector { get; set; } = null!;

        /// <summary>
        /// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
        /// </summary>
        [Input("credentialsScheme")]
        public Input<string>? CredentialsScheme { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        /// <summary>
        /// Extra field CSS selector
        /// </summary>
        [Input("extraFieldSelector", required: true)]
        public Input<string> ExtraFieldSelector { get; set; } = null!;

        /// <summary>
        /// Value for extra form field
        /// </summary>
        [Input("extraFieldValue", required: true)]
        public Input<string> ExtraFieldValue { get; set; } = null!;

        /// <summary>
        /// Do not display application icon on mobile app
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// Login password field CSS selector
        /// </summary>
        [Input("passwordSelector", required: true)]
        public Input<string> PasswordSelector { get; set; } = null!;

        /// <summary>
        /// Allow user to reveal password. It can not be set to `true` if `credentials_scheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
        /// </summary>
        [Input("revealPassword")]
        public Input<bool>? RevealPassword { get; set; }

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Input("sharedPassword")]
        public Input<string>? SharedPassword { get; set; }

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Input("sharedUsername")]
        public Input<string>? SharedUsername { get; set; }

        /// <summary>
        /// Status of application. By default, it is `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Login URL
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// A regex that further restricts URL to the specified regex
        /// </summary>
        [Input("urlRegex")]
        public Input<string>? UrlRegex { get; set; }

        /// <summary>
        /// Username template. Default: `${source.login}`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default: `BUILT_IN`
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        /// <summary>
        /// Login username field CSS selector
        /// </summary>
        [Input("usernameSelector", required: true)]
        public Input<string> UsernameSelector { get; set; } = null!;

        public ThreeFieldArgs()
        {
        }
        public static new ThreeFieldArgs Empty => new ThreeFieldArgs();
    }

    public sealed class ThreeFieldState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page URL
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self service. Default is `false`
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Display auto submit toolbar
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// Login button field CSS selector
        /// </summary>
        [Input("buttonSelector")]
        public Input<string>? ButtonSelector { get; set; }

        /// <summary>
        /// Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
        /// </summary>
        [Input("credentialsScheme")]
        public Input<string>? CredentialsScheme { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        /// <summary>
        /// Extra field CSS selector
        /// </summary>
        [Input("extraFieldSelector")]
        public Input<string>? ExtraFieldSelector { get; set; }

        /// <summary>
        /// Value for extra form field
        /// </summary>
        [Input("extraFieldValue")]
        public Input<string>? ExtraFieldValue { get; set; }

        /// <summary>
        /// Do not display application icon on mobile app
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// URL of the application's logo
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Login password field CSS selector
        /// </summary>
        [Input("passwordSelector")]
        public Input<string>? PasswordSelector { get; set; }

        /// <summary>
        /// Allow user to reveal password. It can not be set to `true` if `credentials_scheme` is `ADMIN_SETS_CREDENTIALS`, `SHARED_USERNAME_AND_PASSWORD` or `EXTERNAL_PASSWORD_SYNC`.
        /// </summary>
        [Input("revealPassword")]
        public Input<bool>? RevealPassword { get; set; }

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Input("sharedPassword")]
        public Input<string>? SharedPassword { get; set; }

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Input("sharedUsername")]
        public Input<string>? SharedUsername { get; set; }

        /// <summary>
        /// Sign on mode of application.
        /// </summary>
        [Input("signOnMode")]
        public Input<string>? SignOnMode { get; set; }

        /// <summary>
        /// Status of application. By default, it is `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Login URL
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// A regex that further restricts URL to the specified regex
        /// </summary>
        [Input("urlRegex")]
        public Input<string>? UrlRegex { get; set; }

        /// <summary>
        /// Username template. Default: `${source.login}`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `PUSH` and `DONT_PUSH`
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default: `BUILT_IN`
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        /// <summary>
        /// Login username field CSS selector
        /// </summary>
        [Input("usernameSelector")]
        public Input<string>? UsernameSelector { get; set; }

        public ThreeFieldState()
        {
        }
        public static new ThreeFieldState Empty => new ThreeFieldState();
    }
}
