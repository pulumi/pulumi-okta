// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve the collaborators for a given repository.
        /// 
        /// &gt; This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/d/app_metadata_saml.html.markdown.
        /// </summary>
        [Obsolete("Use GetMetadataSaml.InvokeAsync() instead")]
        public static Task<GetMetadataSamlResult> GetMetadataSaml(GetMetadataSamlArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMetadataSamlResult>("okta:app/getMetadataSaml:getMetadataSaml", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetMetadataSaml
    {
        /// <summary>
        /// Use this data source to retrieve the collaborators for a given repository.
        /// 
        /// &gt; This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/d/app_metadata_saml.html.markdown.
        /// </summary>
        public static Task<GetMetadataSamlResult> InvokeAsync(GetMetadataSamlArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMetadataSamlResult>("okta:app/getMetadataSaml:getMetadataSaml", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetMetadataSamlArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        /// <summary>
        /// Certificate Key ID.
        /// </summary>
        [Input("keyId", required: true)]
        public string KeyId { get; set; } = null!;

        public GetMetadataSamlArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetMetadataSamlResult
    {
        public readonly string AppId;
        /// <summary>
        /// public certificate from application metadata.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Entity URL for instance `https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf`.
        /// </summary>
        public readonly string EntityId;
        /// <summary>
        /// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
        /// </summary>
        public readonly string HttpPostBinding;
        /// <summary>
        /// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
        /// </summary>
        public readonly string HttpRedirectBinding;
        public readonly string KeyId;
        /// <summary>
        /// raw metadata of application.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// Whether authn requests are signed.
        /// </summary>
        public readonly bool WantAuthnRequestsSigned;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetMetadataSamlResult(
            string appId,
            string certificate,
            string entityId,
            string httpPostBinding,
            string httpRedirectBinding,
            string keyId,
            string metadata,
            bool wantAuthnRequestsSigned,
            string id)
        {
            AppId = appId;
            Certificate = certificate;
            EntityId = entityId;
            HttpPostBinding = httpPostBinding;
            HttpRedirectBinding = httpRedirectBinding;
            KeyId = keyId;
            Metadata = metadata;
            WantAuthnRequestsSigned = wantAuthnRequestsSigned;
            Id = id;
        }
    }
}
