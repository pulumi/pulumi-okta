// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.App
{
    /// <summary>
    /// This resource allows you to create and configure a SAML Application.
    /// 
    /// &gt; If you receive the error `You do not have permission to access the feature
    /// you are requesting` contact support and
    /// request feature flag `ADVANCED_SSO` be applied to your org.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.App.Saml("example", new()
    ///     {
    ///         AttributeStatements = new[]
    ///         {
    ///             new Okta.App.Inputs.SamlAttributeStatementArgs
    ///             {
    ///                 FilterType = "REGEX",
    ///                 FilterValue = ".*",
    ///                 Name = "groups",
    ///                 Type = "GROUP",
    ///             },
    ///         },
    ///         Audience = "https://example.com/audience",
    ///         AuthnContextClassRef = "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
    ///         Destination = "https://example.com",
    ///         DigestAlgorithm = "SHA256",
    ///         HonorForceAuthn = false,
    ///         Label = "example",
    ///         Recipient = "https://example.com",
    ///         ResponseSigned = true,
    ///         SignatureAlgorithm = "RSA_SHA256",
    ///         SsoUrl = "https://example.com",
    ///         SubjectNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
    ///         SubjectNameIdTemplate = "${user.userName}",
    ///     });
    /// 
    /// });
    /// ```
    /// ### With inline hook
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testHook = new Okta.Inline.Hook("testHook", new()
    ///     {
    ///         Status = "ACTIVE",
    ///         Type = "com.okta.saml.tokens.transform",
    ///         Version = "1.0.2",
    ///         Channel = 
    ///         {
    ///             { "type", "HTTP" },
    ///             { "version", "1.0.0" },
    ///             { "uri", "https://example.com/test1" },
    ///             { "method", "POST" },
    ///         },
    ///         Auth = 
    ///         {
    ///             { "key", "Authorization" },
    ///             { "type", "HEADER" },
    ///             { "value", "secret" },
    ///         },
    ///     });
    /// 
    ///     var testSaml = new Okta.App.Saml("testSaml", new()
    ///     {
    ///         Label = "testAcc_replace_with_uuid",
    ///         SsoUrl = "https://google.com",
    ///         Recipient = "https://here.com",
    ///         Destination = "https://its-about-the-journey.com",
    ///         Audience = "https://audience.com",
    ///         SubjectNameIdTemplate = "${user.userName}",
    ///         SubjectNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
    ///         ResponseSigned = true,
    ///         SignatureAlgorithm = "RSA_SHA256",
    ///         DigestAlgorithm = "SHA256",
    ///         HonorForceAuthn = false,
    ///         AuthnContextClassRef = "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
    ///         InlineHookId = testHook.Id,
    ///         AttributeStatements = new[]
    ///         {
    ///             new Okta.App.Inputs.SamlAttributeStatementArgs
    ///             {
    ///                 Type = "GROUP",
    ///                 Name = "groups",
    ///                 FilterType = "REGEX",
    ///                 FilterValue = ".*",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             testHook,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pre-configured app with SAML 1.1 sign-on mode
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.App.Saml("test", new()
    ///     {
    ///         AppSettingsJson = @"{
    ///     ""groupFilter"": ""app1.*"",
    ///     ""siteURL"": ""https://www.okta.com""
    /// }
    /// 
    /// ",
    ///         Label = "SharePoint (On-Premise)",
    ///         PreconfiguredApp = "sharepoint_onpremise",
    ///         SamlVersion = "1.1",
    ///         Status = "ACTIVE",
    ///         UserNameTemplate = "${source.login}",
    ///         UserNameTemplateType = "BUILT_IN",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pre-configured app with SAML 1.1 sign-on mode, `app_settings_json` and `app_links_json`
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var office365 = new Okta.App.Saml("office365", new()
    ///     {
    ///         AppLinksJson = @"  {
    ///       ""calendar"": false,
    ///       ""crm"": false,
    ///       ""delve"": false,
    ///       ""excel"": false,
    ///       ""forms"": false,
    ///       ""mail"": false,
    ///       ""newsfeed"": false,
    ///       ""onedrive"": false,
    ///       ""people"": false,
    ///       ""planner"": false,
    ///       ""powerbi"": false,
    ///       ""powerpoint"": false,
    ///       ""sites"": false,
    ///       ""sway"": false,
    ///       ""tasks"": false,
    ///       ""teams"": false,
    ///       ""video"": false,
    ///       ""word"": false,
    ///       ""yammer"": false,
    ///       ""login"": true
    ///   }
    /// 
    /// ",
    ///         AppSettingsJson = @"    {
    ///        ""wsFedConfigureType"": ""AUTO"",
    ///        ""windowsTransportEnabled"": false,
    ///        ""domain"": ""okta.com"",
    ///        ""msftTenant"": ""okta"",
    ///        ""domains"": [],
    ///        ""requireAdminConsent"": false
    ///     }
    /// 
    /// ",
    ///         Label = "Microsoft Office 365",
    ///         PreconfiguredApp = "office365",
    ///         SamlVersion = "1.1",
    ///         Status = "ACTIVE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A SAML App can be imported via the Okta ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:app/saml:Saml example &amp;#60;app id&amp;#62;
    /// ```
    /// 
    ///  It's also possible to import app without groups or/and users. In this case ID may look like this
    /// 
    /// ```sh
    ///  $ pulumi import okta:app/saml:Saml example &amp;#60;app id&amp;#62;/skip_users
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import okta:app/saml:Saml example &amp;#60;app id&amp;#62;/skip_users/skip_groups
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import okta:app/saml:Saml example &amp;#60;app id&amp;#62;/skip_groups
    /// ```
    /// </summary>
    [OktaResourceType("okta:app/saml:Saml")]
    public partial class Saml : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Output("accessibilityErrorRedirectUrl")]
        public Output<string?> AccessibilityErrorRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Output("accessibilityLoginRedirectUrl")]
        public Output<string?> AccessibilityLoginRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Enable self-service. Default is: `false`.
        /// </summary>
        [Output("accessibilitySelfService")]
        public Output<bool?> AccessibilitySelfService { get; private set; } = null!;

        /// <summary>
        /// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
        /// </summary>
        [Output("acsEndpoints")]
        public Output<ImmutableArray<string>> AcsEndpoints { get; private set; } = null!;

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Output("adminNote")]
        public Output<string?> AdminNote { get; private set; } = null!;

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Output("appLinksJson")]
        public Output<string?> AppLinksJson { get; private set; } = null!;

        /// <summary>
        /// Application settings in JSON format.
        /// </summary>
        [Output("appSettingsJson")]
        public Output<string?> AppSettingsJson { get; private set; } = null!;

        /// <summary>
        /// Determines whether the SAML assertion is digitally signed.
        /// </summary>
        [Output("assertionSigned")]
        public Output<bool?> AssertionSigned { get; private set; } = null!;

        /// <summary>
        /// List of SAML Attribute statements.
        /// </summary>
        [Output("attributeStatements")]
        public Output<ImmutableArray<Outputs.SamlAttributeStatement>> AttributeStatements { get; private set; } = null!;

        /// <summary>
        /// Audience Restriction
        /// </summary>
        [Output("audience")]
        public Output<string?> Audience { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated `app_signon_policy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.
        /// </summary>
        [Output("authenticationPolicy")]
        public Output<string?> AuthenticationPolicy { get; private set; } = null!;

        /// <summary>
        /// Identifies the SAML authentication context class for the assertion’s authentication statement
        /// </summary>
        [Output("authnContextClassRef")]
        public Output<string?> AuthnContextClassRef { get; private set; } = null!;

        /// <summary>
        /// Display auto submit toolbar. Default is: `false`
        /// </summary>
        [Output("autoSubmitToolbar")]
        public Output<bool?> AutoSubmitToolbar { get; private set; } = null!;

        /// <summary>
        /// The raw signing certificate.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// Identifies a specific application resource in an IDP initiated SSO scenario.
        /// </summary>
        [Output("defaultRelayState")]
        public Output<string?> DefaultRelayState { get; private set; } = null!;

        /// <summary>
        /// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
        /// </summary>
        [Output("destination")]
        public Output<string?> Destination { get; private set; } = null!;

        /// <summary>
        /// Determines the digest algorithm used to digitally sign the SAML assertion and response
        /// </summary>
        [Output("digestAlgorithm")]
        public Output<string?> DigestAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Url that can be used to embed this application into another portal.
        /// </summary>
        [Output("embedUrl")]
        public Output<string> EmbedUrl { get; private set; } = null!;

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Output("enduserNote")]
        public Output<string?> EnduserNote { get; private set; } = null!;

        /// <summary>
        /// Entity ID, the ID portion of the `entity_url`.
        /// </summary>
        [Output("entityKey")]
        public Output<string> EntityKey { get; private set; } = null!;

        /// <summary>
        /// Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
        /// </summary>
        [Output("entityUrl")]
        public Output<string> EntityUrl { get; private set; } = null!;

        /// <summary>
        /// features enabled. Notice: you can't currently configure provisioning features via the API.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<string>> Features { get; private set; } = null!;

        /// <summary>
        /// Groups associated with the application.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<string>> Groups { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon on mobile app. Default is: `false`
        /// </summary>
        [Output("hideIos")]
        public Output<bool?> HideIos { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon to users. Default is: `false`
        /// </summary>
        [Output("hideWeb")]
        public Output<bool?> HideWeb { get; private set; } = null!;

        /// <summary>
        /// Prompt user to re-authenticate if SP asks for it. Default is: `false`
        /// </summary>
        [Output("honorForceAuthn")]
        public Output<bool?> HonorForceAuthn { get; private set; } = null!;

        /// <summary>
        /// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
        /// </summary>
        [Output("httpPostBinding")]
        public Output<string> HttpPostBinding { get; private set; } = null!;

        /// <summary>
        /// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
        /// </summary>
        [Output("httpRedirectBinding")]
        public Output<string> HttpRedirectBinding { get; private set; } = null!;

        /// <summary>
        /// SAML issuer ID.
        /// </summary>
        [Output("idpIssuer")]
        public Output<string?> IdpIssuer { get; private set; } = null!;

        /// <summary>
        /// _Early Access Property_. Enables [Federation Broker Mode](https://help.okta.com/en/prod/Content/Topics/Apps/apps-fbm-enable.htm). When this mode is enabled, `users` and `groups` arguments are ignored.
        /// </summary>
        [Output("implicitAssignment")]
        public Output<bool?> ImplicitAssignment { get; private set; } = null!;

        /// <summary>
        /// Saml Inline Hook associated with the application.
        /// </summary>
        [Output("inlineHookId")]
        public Output<string?> InlineHookId { get; private set; } = null!;

        /// <summary>
        /// Certificate key ID.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `key_years_valid`.
        /// </summary>
        [Output("keyName")]
        public Output<string?> KeyName { get; private set; } = null!;

        /// <summary>
        /// Number of years the certificate is valid (2 - 10 years).
        /// </summary>
        [Output("keyYearsValid")]
        public Output<int?> KeyYearsValid { get; private set; } = null!;

        /// <summary>
        /// An array of all key credentials for the application. Format of each entry is as follows:
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.SamlKey>> Keys { get; private set; } = null!;

        /// <summary>
        /// label of application.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Output("logo")]
        public Output<string?> Logo { get; private set; } = null!;

        /// <summary>
        /// Direct link of application logo.
        /// </summary>
        [Output("logoUrl")]
        public Output<string> LogoUrl { get; private set; } = null!;

        /// <summary>
        /// The raw SAML metadata in XML.
        /// </summary>
        [Output("metadata")]
        public Output<string> Metadata { get; private set; } = null!;

        /// <summary>
        /// SAML xml metadata URL.
        /// </summary>
        [Output("metadataUrl")]
        public Output<string> MetadataUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the attribute statement.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.  If not provided the following arguments are required:
        /// </summary>
        [Output("preconfiguredApp")]
        public Output<string?> PreconfiguredApp { get; private set; } = null!;

        /// <summary>
        /// The location where the app may present the SAML assertion.
        /// </summary>
        [Output("recipient")]
        public Output<string?> Recipient { get; private set; } = null!;

        /// <summary>
        /// Denotes whether the request is compressed or not.
        /// </summary>
        [Output("requestCompressed")]
        public Output<bool?> RequestCompressed { get; private set; } = null!;

        /// <summary>
        /// Determines whether the SAML auth response message is digitally signed.
        /// </summary>
        [Output("responseSigned")]
        public Output<bool?> ResponseSigned { get; private set; } = null!;

        /// <summary>
        /// SAML Signed Request enabled
        /// </summary>
        [Output("samlSignedRequestEnabled")]
        public Output<bool?> SamlSignedRequestEnabled { get; private set; } = null!;

        /// <summary>
        /// SAML version for the app's sign-on mode. Valid values are: `"2.0"` or `"1.1"`. Default is `"2.0"`.
        /// </summary>
        [Output("samlVersion")]
        public Output<string?> SamlVersion { get; private set; } = null!;

        /// <summary>
        /// Sign-on mode of application.
        /// </summary>
        [Output("signOnMode")]
        public Output<string> SignOnMode { get; private set; } = null!;

        /// <summary>
        /// Signature algorithm used ot digitally sign the assertion and response.
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string?> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.  Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
        /// </summary>
        [Output("singleLogoutCertificate")]
        public Output<string?> SingleLogoutCertificate { get; private set; } = null!;

        /// <summary>
        /// The issuer of the Service Provider that generates the Single Logout request.
        /// </summary>
        [Output("singleLogoutIssuer")]
        public Output<string?> SingleLogoutIssuer { get; private set; } = null!;

        /// <summary>
        /// The location where the logout response is sent.
        /// </summary>
        [Output("singleLogoutUrl")]
        public Output<string?> SingleLogoutUrl { get; private set; } = null!;

        /// <summary>
        /// Indicator that allows the app to skip `groups` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Output("skipGroups")]
        public Output<bool?> SkipGroups { get; private set; } = null!;

        /// <summary>
        /// Indicator that allows the app to skip `users` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Output("skipUsers")]
        public Output<bool?> SkipUsers { get; private set; } = null!;

        /// <summary>
        /// SAML service provider issuer.
        /// </summary>
        [Output("spIssuer")]
        public Output<string?> SpIssuer { get; private set; } = null!;

        /// <summary>
        /// Single Sign-on Url.
        /// </summary>
        [Output("ssoUrl")]
        public Output<string?> SsoUrl { get; private set; } = null!;

        /// <summary>
        /// status of application.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Identifies the SAML processing rules.
        /// </summary>
        [Output("subjectNameIdFormat")]
        public Output<string?> SubjectNameIdFormat { get; private set; } = null!;

        /// <summary>
        /// Template for app user's username when a user is assigned to the app.
        /// </summary>
        [Output("subjectNameIdTemplate")]
        public Output<string?> SubjectNameIdTemplate { get; private set; } = null!;

        /// <summary>
        /// Username template. Default is: `"${source.login}"`
        /// </summary>
        [Output("userNameTemplate")]
        public Output<string?> UserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Output("userNameTemplatePushStatus")]
        public Output<string?> UserNameTemplatePushStatus { get; private set; } = null!;

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Output("userNameTemplateSuffix")]
        public Output<string?> UserNameTemplateSuffix { get; private set; } = null!;

        /// <summary>
        /// Username template type. Default is: `"BUILT_IN"`.
        /// </summary>
        [Output("userNameTemplateType")]
        public Output<string?> UserNameTemplateType { get; private set; } = null!;

        /// <summary>
        /// Users associated with the application.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.SamlUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Saml resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Saml(string name, SamlArgs args, CustomResourceOptions? options = null)
            : base("okta:app/saml:Saml", name, args ?? new SamlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Saml(string name, Input<string> id, SamlState? state = null, CustomResourceOptions? options = null)
            : base("okta:app/saml:Saml", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Saml resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Saml Get(string name, Input<string> id, SamlState? state = null, CustomResourceOptions? options = null)
        {
            return new Saml(name, id, state, options);
        }
    }

    public sealed class SamlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self-service. Default is: `false`.
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        [Input("acsEndpoints")]
        private InputList<string>? _acsEndpoints;

        /// <summary>
        /// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
        /// </summary>
        public InputList<string> AcsEndpoints
        {
            get => _acsEndpoints ?? (_acsEndpoints = new InputList<string>());
            set => _acsEndpoints = value;
        }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Application settings in JSON format.
        /// </summary>
        [Input("appSettingsJson")]
        public Input<string>? AppSettingsJson { get; set; }

        /// <summary>
        /// Determines whether the SAML assertion is digitally signed.
        /// </summary>
        [Input("assertionSigned")]
        public Input<bool>? AssertionSigned { get; set; }

        [Input("attributeStatements")]
        private InputList<Inputs.SamlAttributeStatementArgs>? _attributeStatements;

        /// <summary>
        /// List of SAML Attribute statements.
        /// </summary>
        public InputList<Inputs.SamlAttributeStatementArgs> AttributeStatements
        {
            get => _attributeStatements ?? (_attributeStatements = new InputList<Inputs.SamlAttributeStatementArgs>());
            set => _attributeStatements = value;
        }

        /// <summary>
        /// Audience Restriction
        /// </summary>
        [Input("audience")]
        public Input<string>? Audience { get; set; }

        /// <summary>
        /// The ID of the associated `app_signon_policy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.
        /// </summary>
        [Input("authenticationPolicy")]
        public Input<string>? AuthenticationPolicy { get; set; }

        /// <summary>
        /// Identifies the SAML authentication context class for the assertion’s authentication statement
        /// </summary>
        [Input("authnContextClassRef")]
        public Input<string>? AuthnContextClassRef { get; set; }

        /// <summary>
        /// Display auto submit toolbar. Default is: `false`
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// Identifies a specific application resource in an IDP initiated SSO scenario.
        /// </summary>
        [Input("defaultRelayState")]
        public Input<string>? DefaultRelayState { get; set; }

        /// <summary>
        /// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Determines the digest algorithm used to digitally sign the SAML assertion and response
        /// </summary>
        [Input("digestAlgorithm")]
        public Input<string>? DigestAlgorithm { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// Groups associated with the application.
        /// </summary>
        [Obsolete(@"The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.")]
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// Do not display application icon on mobile app. Default is: `false`
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users. Default is: `false`
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// Prompt user to re-authenticate if SP asks for it. Default is: `false`
        /// </summary>
        [Input("honorForceAuthn")]
        public Input<bool>? HonorForceAuthn { get; set; }

        /// <summary>
        /// SAML issuer ID.
        /// </summary>
        [Input("idpIssuer")]
        public Input<string>? IdpIssuer { get; set; }

        /// <summary>
        /// _Early Access Property_. Enables [Federation Broker Mode](https://help.okta.com/en/prod/Content/Topics/Apps/apps-fbm-enable.htm). When this mode is enabled, `users` and `groups` arguments are ignored.
        /// </summary>
        [Input("implicitAssignment")]
        public Input<bool>? ImplicitAssignment { get; set; }

        /// <summary>
        /// Saml Inline Hook associated with the application.
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `key_years_valid`.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Number of years the certificate is valid (2 - 10 years).
        /// </summary>
        [Input("keyYearsValid")]
        public Input<int>? KeyYearsValid { get; set; }

        /// <summary>
        /// label of application.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.  If not provided the following arguments are required:
        /// </summary>
        [Input("preconfiguredApp")]
        public Input<string>? PreconfiguredApp { get; set; }

        /// <summary>
        /// The location where the app may present the SAML assertion.
        /// </summary>
        [Input("recipient")]
        public Input<string>? Recipient { get; set; }

        /// <summary>
        /// Denotes whether the request is compressed or not.
        /// </summary>
        [Input("requestCompressed")]
        public Input<bool>? RequestCompressed { get; set; }

        /// <summary>
        /// Determines whether the SAML auth response message is digitally signed.
        /// </summary>
        [Input("responseSigned")]
        public Input<bool>? ResponseSigned { get; set; }

        /// <summary>
        /// SAML Signed Request enabled
        /// </summary>
        [Input("samlSignedRequestEnabled")]
        public Input<bool>? SamlSignedRequestEnabled { get; set; }

        /// <summary>
        /// SAML version for the app's sign-on mode. Valid values are: `"2.0"` or `"1.1"`. Default is `"2.0"`.
        /// </summary>
        [Input("samlVersion")]
        public Input<string>? SamlVersion { get; set; }

        /// <summary>
        /// Signature algorithm used ot digitally sign the assertion and response.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.  Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
        /// </summary>
        [Input("singleLogoutCertificate")]
        public Input<string>? SingleLogoutCertificate { get; set; }

        /// <summary>
        /// The issuer of the Service Provider that generates the Single Logout request.
        /// </summary>
        [Input("singleLogoutIssuer")]
        public Input<string>? SingleLogoutIssuer { get; set; }

        /// <summary>
        /// The location where the logout response is sent.
        /// </summary>
        [Input("singleLogoutUrl")]
        public Input<string>? SingleLogoutUrl { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `groups` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Input("skipGroups")]
        public Input<bool>? SkipGroups { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `users` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Input("skipUsers")]
        public Input<bool>? SkipUsers { get; set; }

        /// <summary>
        /// SAML service provider issuer.
        /// </summary>
        [Input("spIssuer")]
        public Input<string>? SpIssuer { get; set; }

        /// <summary>
        /// Single Sign-on Url.
        /// </summary>
        [Input("ssoUrl")]
        public Input<string>? SsoUrl { get; set; }

        /// <summary>
        /// status of application.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifies the SAML processing rules.
        /// </summary>
        [Input("subjectNameIdFormat")]
        public Input<string>? SubjectNameIdFormat { get; set; }

        /// <summary>
        /// Template for app user's username when a user is assigned to the app.
        /// </summary>
        [Input("subjectNameIdTemplate")]
        public Input<string>? SubjectNameIdTemplate { get; set; }

        /// <summary>
        /// Username template. Default is: `"${source.login}"`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default is: `"BUILT_IN"`.
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        [Input("users")]
        private InputList<Inputs.SamlUserArgs>? _users;

        /// <summary>
        /// Users associated with the application.
        /// </summary>
        [Obsolete(@"The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.")]
        public InputList<Inputs.SamlUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.SamlUserArgs>());
            set => _users = value;
        }

        public SamlArgs()
        {
        }
        public static new SamlArgs Empty => new SamlArgs();
    }

    public sealed class SamlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self-service. Default is: `false`.
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        [Input("acsEndpoints")]
        private InputList<string>? _acsEndpoints;

        /// <summary>
        /// An array of ACS endpoints. You can configure a maximum of 100 endpoints.
        /// </summary>
        public InputList<string> AcsEndpoints
        {
            get => _acsEndpoints ?? (_acsEndpoints = new InputList<string>());
            set => _acsEndpoints = value;
        }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Application settings in JSON format.
        /// </summary>
        [Input("appSettingsJson")]
        public Input<string>? AppSettingsJson { get; set; }

        /// <summary>
        /// Determines whether the SAML assertion is digitally signed.
        /// </summary>
        [Input("assertionSigned")]
        public Input<bool>? AssertionSigned { get; set; }

        [Input("attributeStatements")]
        private InputList<Inputs.SamlAttributeStatementGetArgs>? _attributeStatements;

        /// <summary>
        /// List of SAML Attribute statements.
        /// </summary>
        public InputList<Inputs.SamlAttributeStatementGetArgs> AttributeStatements
        {
            get => _attributeStatements ?? (_attributeStatements = new InputList<Inputs.SamlAttributeStatementGetArgs>());
            set => _attributeStatements = value;
        }

        /// <summary>
        /// Audience Restriction
        /// </summary>
        [Input("audience")]
        public Input<string>? Audience { get; set; }

        /// <summary>
        /// The ID of the associated `app_signon_policy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.
        /// </summary>
        [Input("authenticationPolicy")]
        public Input<string>? AuthenticationPolicy { get; set; }

        /// <summary>
        /// Identifies the SAML authentication context class for the assertion’s authentication statement
        /// </summary>
        [Input("authnContextClassRef")]
        public Input<string>? AuthnContextClassRef { get; set; }

        /// <summary>
        /// Display auto submit toolbar. Default is: `false`
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// The raw signing certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Identifies a specific application resource in an IDP initiated SSO scenario.
        /// </summary>
        [Input("defaultRelayState")]
        public Input<string>? DefaultRelayState { get; set; }

        /// <summary>
        /// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Determines the digest algorithm used to digitally sign the SAML assertion and response
        /// </summary>
        [Input("digestAlgorithm")]
        public Input<string>? DigestAlgorithm { get; set; }

        /// <summary>
        /// Url that can be used to embed this application into another portal.
        /// </summary>
        [Input("embedUrl")]
        public Input<string>? EmbedUrl { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        /// <summary>
        /// Entity ID, the ID portion of the `entity_url`.
        /// </summary>
        [Input("entityKey")]
        public Input<string>? EntityKey { get; set; }

        /// <summary>
        /// Entity URL for instance [http://www.okta.com/exk1fcia6d6EMsf331d8](http://www.okta.com/exk1fcia6d6EMsf331d8).
        /// </summary>
        [Input("entityUrl")]
        public Input<string>? EntityUrl { get; set; }

        [Input("features")]
        private InputList<string>? _features;

        /// <summary>
        /// features enabled. Notice: you can't currently configure provisioning features via the API.
        /// </summary>
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// Groups associated with the application.
        /// </summary>
        [Obsolete(@"The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.")]
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// Do not display application icon on mobile app. Default is: `false`
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users. Default is: `false`
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// Prompt user to re-authenticate if SP asks for it. Default is: `false`
        /// </summary>
        [Input("honorForceAuthn")]
        public Input<bool>? HonorForceAuthn { get; set; }

        /// <summary>
        /// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post` location from the SAML metadata.
        /// </summary>
        [Input("httpPostBinding")]
        public Input<string>? HttpPostBinding { get; set; }

        /// <summary>
        /// `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` location from the SAML metadata.
        /// </summary>
        [Input("httpRedirectBinding")]
        public Input<string>? HttpRedirectBinding { get; set; }

        /// <summary>
        /// SAML issuer ID.
        /// </summary>
        [Input("idpIssuer")]
        public Input<string>? IdpIssuer { get; set; }

        /// <summary>
        /// _Early Access Property_. Enables [Federation Broker Mode](https://help.okta.com/en/prod/Content/Topics/Apps/apps-fbm-enable.htm). When this mode is enabled, `users` and `groups` arguments are ignored.
        /// </summary>
        [Input("implicitAssignment")]
        public Input<bool>? ImplicitAssignment { get; set; }

        /// <summary>
        /// Saml Inline Hook associated with the application.
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// Certificate key ID.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `key_years_valid`.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Number of years the certificate is valid (2 - 10 years).
        /// </summary>
        [Input("keyYearsValid")]
        public Input<int>? KeyYearsValid { get; set; }

        [Input("keys")]
        private InputList<Inputs.SamlKeyGetArgs>? _keys;

        /// <summary>
        /// An array of all key credentials for the application. Format of each entry is as follows:
        /// </summary>
        public InputList<Inputs.SamlKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.SamlKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// label of application.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// Direct link of application logo.
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// The raw SAML metadata in XML.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// SAML xml metadata URL.
        /// </summary>
        [Input("metadataUrl")]
        public Input<string>? MetadataUrl { get; set; }

        /// <summary>
        /// The name of the attribute statement.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.  If not provided the following arguments are required:
        /// </summary>
        [Input("preconfiguredApp")]
        public Input<string>? PreconfiguredApp { get; set; }

        /// <summary>
        /// The location where the app may present the SAML assertion.
        /// </summary>
        [Input("recipient")]
        public Input<string>? Recipient { get; set; }

        /// <summary>
        /// Denotes whether the request is compressed or not.
        /// </summary>
        [Input("requestCompressed")]
        public Input<bool>? RequestCompressed { get; set; }

        /// <summary>
        /// Determines whether the SAML auth response message is digitally signed.
        /// </summary>
        [Input("responseSigned")]
        public Input<bool>? ResponseSigned { get; set; }

        /// <summary>
        /// SAML Signed Request enabled
        /// </summary>
        [Input("samlSignedRequestEnabled")]
        public Input<bool>? SamlSignedRequestEnabled { get; set; }

        /// <summary>
        /// SAML version for the app's sign-on mode. Valid values are: `"2.0"` or `"1.1"`. Default is `"2.0"`.
        /// </summary>
        [Input("samlVersion")]
        public Input<string>? SamlVersion { get; set; }

        /// <summary>
        /// Sign-on mode of application.
        /// </summary>
        [Input("signOnMode")]
        public Input<string>? SignOnMode { get; set; }

        /// <summary>
        /// Signature algorithm used ot digitally sign the assertion and response.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// x509 encoded certificate that the Service Provider uses to sign Single Logout requests.  Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
        /// </summary>
        [Input("singleLogoutCertificate")]
        public Input<string>? SingleLogoutCertificate { get; set; }

        /// <summary>
        /// The issuer of the Service Provider that generates the Single Logout request.
        /// </summary>
        [Input("singleLogoutIssuer")]
        public Input<string>? SingleLogoutIssuer { get; set; }

        /// <summary>
        /// The location where the logout response is sent.
        /// </summary>
        [Input("singleLogoutUrl")]
        public Input<string>? SingleLogoutUrl { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `groups` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Input("skipGroups")]
        public Input<bool>? SkipGroups { get; set; }

        /// <summary>
        /// Indicator that allows the app to skip `users` sync (it can also be provided during import). Default is `false`.
        /// </summary>
        [Input("skipUsers")]
        public Input<bool>? SkipUsers { get; set; }

        /// <summary>
        /// SAML service provider issuer.
        /// </summary>
        [Input("spIssuer")]
        public Input<string>? SpIssuer { get; set; }

        /// <summary>
        /// Single Sign-on Url.
        /// </summary>
        [Input("ssoUrl")]
        public Input<string>? SsoUrl { get; set; }

        /// <summary>
        /// status of application.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifies the SAML processing rules.
        /// </summary>
        [Input("subjectNameIdFormat")]
        public Input<string>? SubjectNameIdFormat { get; set; }

        /// <summary>
        /// Template for app user's username when a user is assigned to the app.
        /// </summary>
        [Input("subjectNameIdTemplate")]
        public Input<string>? SubjectNameIdTemplate { get; set; }

        /// <summary>
        /// Username template. Default is: `"${source.login}"`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default is: `"BUILT_IN"`.
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        [Input("users")]
        private InputList<Inputs.SamlUserGetArgs>? _users;

        /// <summary>
        /// Users associated with the application.
        /// </summary>
        [Obsolete(@"The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.")]
        public InputList<Inputs.SamlUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.SamlUserGetArgs>());
            set => _users = value;
        }

        public SamlState()
        {
        }
        public static new SamlState Empty => new SamlState();
    }
}
