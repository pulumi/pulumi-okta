// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Configures default MFA Policy.
    /// 
    /// This resource allows you to configure default MFA Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var classicExample = new Okta.PolicyMfaDefault("classicExample", new Okta.PolicyMfaDefaultArgs
    ///         {
    ///             IsOie = false,
    ///             OktaOtp = 
    ///             {
    ///                 { "enroll", "REQUIRED" },
    ///             },
    ///         });
    ///         var oieExample = new Okta.PolicyMfaDefault("oieExample", new Okta.PolicyMfaDefaultArgs
    ///         {
    ///             IsOie = true,
    ///             OktaVerify = 
    ///             {
    ///                 { "enroll", "REQUIRED" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; If the `okta.PolicyMfaDefault` is used in conjunction with `okta.policy.Mfa` resources, ensure to use a `depends_on` attribute for the default policy to ensure that all other policies are created/updated first such that the `priority` field can be appropriately computed on the first plan/apply.
    /// 
    /// ## Import
    /// 
    /// Default MFA Policy can be imported without providing Okta ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/policyMfaDefault:PolicyMfaDefault example .
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/policyMfaDefault:PolicyMfaDefault")]
    public partial class PolicyMfaDefault : Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the default Okta group.
        /// </summary>
        [Output("defaultIncludedGroupId")]
        public Output<string> DefaultIncludedGroupId { get; private set; } = null!;

        /// <summary>
        /// Default policy description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// DUO MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("duo")]
        public Output<ImmutableDictionary<string, string>?> Duo { get; private set; } = null!;

        /// <summary>
        /// External IDP MFA policy settings (✓ OIE).
        /// </summary>
        [Output("externalIdp")]
        public Output<ImmutableDictionary<string, string>?> ExternalIdp { get; private set; } = null!;

        /// <summary>
        /// Fido U2F MFA policy settings (✓ Classic).
        /// </summary>
        [Output("fidoU2f")]
        public Output<ImmutableDictionary<string, string>?> FidoU2f { get; private set; } = null!;

        /// <summary>
        /// Fido Web Authn MFA policy settings (✓ Classic).
        /// </summary>
        [Output("fidoWebauthn")]
        public Output<ImmutableDictionary<string, string>?> FidoWebauthn { get; private set; } = null!;

        /// <summary>
        /// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("googleOtp")]
        public Output<ImmutableDictionary<string, string>?> GoogleOtp { get; private set; } = null!;

        /// <summary>
        /// HMAC-based One-Time Password MFA policy settings (✓ Classic).
        /// </summary>
        [Output("hotp")]
        public Output<ImmutableDictionary<string, string>?> Hotp { get; private set; } = null!;

        /// <summary>
        /// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
        /// &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
        /// </summary>
        [Output("isOie")]
        public Output<bool?> IsOie { get; private set; } = null!;

        /// <summary>
        /// Default policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Okta Call MFA policy settings (✓ Classic).
        /// </summary>
        [Output("oktaCall")]
        public Output<ImmutableDictionary<string, string>?> OktaCall { get; private set; } = null!;

        /// <summary>
        /// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("oktaEmail")]
        public Output<ImmutableDictionary<string, string>?> OktaEmail { get; private set; } = null!;

        /// <summary>
        /// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
        /// </summary>
        [Output("oktaOtp")]
        public Output<ImmutableDictionary<string, string>?> OktaOtp { get; private set; } = null!;

        /// <summary>
        /// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("oktaPassword")]
        public Output<ImmutableDictionary<string, string>?> OktaPassword { get; private set; } = null!;

        /// <summary>
        /// Okta Push MFA policy settings (✓ Classic).
        /// </summary>
        [Output("oktaPush")]
        public Output<ImmutableDictionary<string, string>?> OktaPush { get; private set; } = null!;

        /// <summary>
        /// Okta Question MFA policy settings (✓ Classic).
        /// </summary>
        [Output("oktaQuestion")]
        public Output<ImmutableDictionary<string, string>?> OktaQuestion { get; private set; } = null!;

        /// <summary>
        /// Okta SMS MFA policy settings (✓ Classic).
        /// </summary>
        [Output("oktaSms")]
        public Output<ImmutableDictionary<string, string>?> OktaSms { get; private set; } = null!;

        /// <summary>
        /// Okta Verify MFA policy settings (✓ OIE).
        /// </summary>
        [Output("oktaVerify")]
        public Output<ImmutableDictionary<string, string>?> OktaVerify { get; private set; } = null!;

        /// <summary>
        /// On-Prem MFA MFA policy settings (✓ OIE).
        /// </summary>
        [Output("onpremMfa")]
        public Output<ImmutableDictionary<string, string>?> OnpremMfa { get; private set; } = null!;

        /// <summary>
        /// Phone Number MFA policy settings (✓ OIE).
        /// </summary>
        [Output("phoneNumber")]
        public Output<ImmutableDictionary<string, string>?> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// Default policy priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("rsaToken")]
        public Output<ImmutableDictionary<string, string>?> RsaToken { get; private set; } = null!;

        /// <summary>
        /// Security Question MFA policy settings (✓ OIE).
        /// </summary>
        [Output("securityQuestion")]
        public Output<ImmutableDictionary<string, string>?> SecurityQuestion { get; private set; } = null!;

        /// <summary>
        /// Default policy status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Symantec VIP MFA policy settings (✓ Classic).
        /// </summary>
        [Output("symantecVip")]
        public Output<ImmutableDictionary<string, string>?> SymantecVip { get; private set; } = null!;

        /// <summary>
        /// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
        /// </summary>
        [Output("webauthn")]
        public Output<ImmutableDictionary<string, string>?> Webauthn { get; private set; } = null!;

        /// <summary>
        /// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        [Output("yubikeyToken")]
        public Output<ImmutableDictionary<string, string>?> YubikeyToken { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyMfaDefault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyMfaDefault(string name, PolicyMfaDefaultArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:index/policyMfaDefault:PolicyMfaDefault", name, args ?? new PolicyMfaDefaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyMfaDefault(string name, Input<string> id, PolicyMfaDefaultState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/policyMfaDefault:PolicyMfaDefault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyMfaDefault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyMfaDefault Get(string name, Input<string> id, PolicyMfaDefaultState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyMfaDefault(name, id, state, options);
        }
    }

    public sealed class PolicyMfaDefaultArgs : Pulumi.ResourceArgs
    {
        [Input("duo")]
        private InputMap<string>? _duo;

        /// <summary>
        /// DUO MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> Duo
        {
            get => _duo ?? (_duo = new InputMap<string>());
            set => _duo = value;
        }

        [Input("externalIdp")]
        private InputMap<string>? _externalIdp;

        /// <summary>
        /// External IDP MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> ExternalIdp
        {
            get => _externalIdp ?? (_externalIdp = new InputMap<string>());
            set => _externalIdp = value;
        }

        [Input("fidoU2f")]
        private InputMap<string>? _fidoU2f;

        /// <summary>
        /// Fido U2F MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> FidoU2f
        {
            get => _fidoU2f ?? (_fidoU2f = new InputMap<string>());
            set => _fidoU2f = value;
        }

        [Input("fidoWebauthn")]
        private InputMap<string>? _fidoWebauthn;

        /// <summary>
        /// Fido Web Authn MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> FidoWebauthn
        {
            get => _fidoWebauthn ?? (_fidoWebauthn = new InputMap<string>());
            set => _fidoWebauthn = value;
        }

        [Input("googleOtp")]
        private InputMap<string>? _googleOtp;

        /// <summary>
        /// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> GoogleOtp
        {
            get => _googleOtp ?? (_googleOtp = new InputMap<string>());
            set => _googleOtp = value;
        }

        [Input("hotp")]
        private InputMap<string>? _hotp;

        /// <summary>
        /// HMAC-based One-Time Password MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> Hotp
        {
            get => _hotp ?? (_hotp = new InputMap<string>());
            set => _hotp = value;
        }

        /// <summary>
        /// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
        /// &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
        /// </summary>
        [Input("isOie")]
        public Input<bool>? IsOie { get; set; }

        [Input("oktaCall")]
        private InputMap<string>? _oktaCall;

        /// <summary>
        /// Okta Call MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaCall
        {
            get => _oktaCall ?? (_oktaCall = new InputMap<string>());
            set => _oktaCall = value;
        }

        [Input("oktaEmail")]
        private InputMap<string>? _oktaEmail;

        /// <summary>
        /// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> OktaEmail
        {
            get => _oktaEmail ?? (_oktaEmail = new InputMap<string>());
            set => _oktaEmail = value;
        }

        [Input("oktaOtp")]
        private InputMap<string>? _oktaOtp;

        /// <summary>
        /// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaOtp
        {
            get => _oktaOtp ?? (_oktaOtp = new InputMap<string>());
            set => _oktaOtp = value;
        }

        [Input("oktaPassword")]
        private InputMap<string>? _oktaPassword;

        /// <summary>
        /// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> OktaPassword
        {
            get => _oktaPassword ?? (_oktaPassword = new InputMap<string>());
            set => _oktaPassword = value;
        }

        [Input("oktaPush")]
        private InputMap<string>? _oktaPush;

        /// <summary>
        /// Okta Push MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaPush
        {
            get => _oktaPush ?? (_oktaPush = new InputMap<string>());
            set => _oktaPush = value;
        }

        [Input("oktaQuestion")]
        private InputMap<string>? _oktaQuestion;

        /// <summary>
        /// Okta Question MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaQuestion
        {
            get => _oktaQuestion ?? (_oktaQuestion = new InputMap<string>());
            set => _oktaQuestion = value;
        }

        [Input("oktaSms")]
        private InputMap<string>? _oktaSms;

        /// <summary>
        /// Okta SMS MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaSms
        {
            get => _oktaSms ?? (_oktaSms = new InputMap<string>());
            set => _oktaSms = value;
        }

        [Input("oktaVerify")]
        private InputMap<string>? _oktaVerify;

        /// <summary>
        /// Okta Verify MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> OktaVerify
        {
            get => _oktaVerify ?? (_oktaVerify = new InputMap<string>());
            set => _oktaVerify = value;
        }

        [Input("onpremMfa")]
        private InputMap<string>? _onpremMfa;

        /// <summary>
        /// On-Prem MFA MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> OnpremMfa
        {
            get => _onpremMfa ?? (_onpremMfa = new InputMap<string>());
            set => _onpremMfa = value;
        }

        [Input("phoneNumber")]
        private InputMap<string>? _phoneNumber;

        /// <summary>
        /// Phone Number MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> PhoneNumber
        {
            get => _phoneNumber ?? (_phoneNumber = new InputMap<string>());
            set => _phoneNumber = value;
        }

        [Input("rsaToken")]
        private InputMap<string>? _rsaToken;

        /// <summary>
        /// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> RsaToken
        {
            get => _rsaToken ?? (_rsaToken = new InputMap<string>());
            set => _rsaToken = value;
        }

        [Input("securityQuestion")]
        private InputMap<string>? _securityQuestion;

        /// <summary>
        /// Security Question MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> SecurityQuestion
        {
            get => _securityQuestion ?? (_securityQuestion = new InputMap<string>());
            set => _securityQuestion = value;
        }

        [Input("symantecVip")]
        private InputMap<string>? _symantecVip;

        /// <summary>
        /// Symantec VIP MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> SymantecVip
        {
            get => _symantecVip ?? (_symantecVip = new InputMap<string>());
            set => _symantecVip = value;
        }

        [Input("webauthn")]
        private InputMap<string>? _webauthn;

        /// <summary>
        /// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> Webauthn
        {
            get => _webauthn ?? (_webauthn = new InputMap<string>());
            set => _webauthn = value;
        }

        [Input("yubikeyToken")]
        private InputMap<string>? _yubikeyToken;

        /// <summary>
        /// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> YubikeyToken
        {
            get => _yubikeyToken ?? (_yubikeyToken = new InputMap<string>());
            set => _yubikeyToken = value;
        }

        public PolicyMfaDefaultArgs()
        {
        }
    }

    public sealed class PolicyMfaDefaultState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the default Okta group.
        /// </summary>
        [Input("defaultIncludedGroupId")]
        public Input<string>? DefaultIncludedGroupId { get; set; }

        /// <summary>
        /// Default policy description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("duo")]
        private InputMap<string>? _duo;

        /// <summary>
        /// DUO MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> Duo
        {
            get => _duo ?? (_duo = new InputMap<string>());
            set => _duo = value;
        }

        [Input("externalIdp")]
        private InputMap<string>? _externalIdp;

        /// <summary>
        /// External IDP MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> ExternalIdp
        {
            get => _externalIdp ?? (_externalIdp = new InputMap<string>());
            set => _externalIdp = value;
        }

        [Input("fidoU2f")]
        private InputMap<string>? _fidoU2f;

        /// <summary>
        /// Fido U2F MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> FidoU2f
        {
            get => _fidoU2f ?? (_fidoU2f = new InputMap<string>());
            set => _fidoU2f = value;
        }

        [Input("fidoWebauthn")]
        private InputMap<string>? _fidoWebauthn;

        /// <summary>
        /// Fido Web Authn MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> FidoWebauthn
        {
            get => _fidoWebauthn ?? (_fidoWebauthn = new InputMap<string>());
            set => _fidoWebauthn = value;
        }

        [Input("googleOtp")]
        private InputMap<string>? _googleOtp;

        /// <summary>
        /// Google OTP MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> GoogleOtp
        {
            get => _googleOtp ?? (_googleOtp = new InputMap<string>());
            set => _googleOtp = value;
        }

        [Input("hotp")]
        private InputMap<string>? _hotp;

        /// <summary>
        /// HMAC-based One-Time Password MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> Hotp
        {
            get => _hotp ?? (_hotp = new InputMap<string>());
            set => _hotp = value;
        }

        /// <summary>
        /// Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
        /// &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
        /// </summary>
        [Input("isOie")]
        public Input<bool>? IsOie { get; set; }

        /// <summary>
        /// Default policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oktaCall")]
        private InputMap<string>? _oktaCall;

        /// <summary>
        /// Okta Call MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaCall
        {
            get => _oktaCall ?? (_oktaCall = new InputMap<string>());
            set => _oktaCall = value;
        }

        [Input("oktaEmail")]
        private InputMap<string>? _oktaEmail;

        /// <summary>
        /// Okta Email MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> OktaEmail
        {
            get => _oktaEmail ?? (_oktaEmail = new InputMap<string>());
            set => _oktaEmail = value;
        }

        [Input("oktaOtp")]
        private InputMap<string>? _oktaOtp;

        /// <summary>
        /// Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaOtp
        {
            get => _oktaOtp ?? (_oktaOtp = new InputMap<string>());
            set => _oktaOtp = value;
        }

        [Input("oktaPassword")]
        private InputMap<string>? _oktaPassword;

        /// <summary>
        /// Okta Password MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> OktaPassword
        {
            get => _oktaPassword ?? (_oktaPassword = new InputMap<string>());
            set => _oktaPassword = value;
        }

        [Input("oktaPush")]
        private InputMap<string>? _oktaPush;

        /// <summary>
        /// Okta Push MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaPush
        {
            get => _oktaPush ?? (_oktaPush = new InputMap<string>());
            set => _oktaPush = value;
        }

        [Input("oktaQuestion")]
        private InputMap<string>? _oktaQuestion;

        /// <summary>
        /// Okta Question MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaQuestion
        {
            get => _oktaQuestion ?? (_oktaQuestion = new InputMap<string>());
            set => _oktaQuestion = value;
        }

        [Input("oktaSms")]
        private InputMap<string>? _oktaSms;

        /// <summary>
        /// Okta SMS MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> OktaSms
        {
            get => _oktaSms ?? (_oktaSms = new InputMap<string>());
            set => _oktaSms = value;
        }

        [Input("oktaVerify")]
        private InputMap<string>? _oktaVerify;

        /// <summary>
        /// Okta Verify MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> OktaVerify
        {
            get => _oktaVerify ?? (_oktaVerify = new InputMap<string>());
            set => _oktaVerify = value;
        }

        [Input("onpremMfa")]
        private InputMap<string>? _onpremMfa;

        /// <summary>
        /// On-Prem MFA MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> OnpremMfa
        {
            get => _onpremMfa ?? (_onpremMfa = new InputMap<string>());
            set => _onpremMfa = value;
        }

        [Input("phoneNumber")]
        private InputMap<string>? _phoneNumber;

        /// <summary>
        /// Phone Number MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> PhoneNumber
        {
            get => _phoneNumber ?? (_phoneNumber = new InputMap<string>());
            set => _phoneNumber = value;
        }

        /// <summary>
        /// Default policy priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("rsaToken")]
        private InputMap<string>? _rsaToken;

        /// <summary>
        /// RSA Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> RsaToken
        {
            get => _rsaToken ?? (_rsaToken = new InputMap<string>());
            set => _rsaToken = value;
        }

        [Input("securityQuestion")]
        private InputMap<string>? _securityQuestion;

        /// <summary>
        /// Security Question MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> SecurityQuestion
        {
            get => _securityQuestion ?? (_securityQuestion = new InputMap<string>());
            set => _securityQuestion = value;
        }

        /// <summary>
        /// Default policy status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("symantecVip")]
        private InputMap<string>? _symantecVip;

        /// <summary>
        /// Symantec VIP MFA policy settings (✓ Classic).
        /// </summary>
        public InputMap<string> SymantecVip
        {
            get => _symantecVip ?? (_symantecVip = new InputMap<string>());
            set => _symantecVip = value;
        }

        [Input("webauthn")]
        private InputMap<string>? _webauthn;

        /// <summary>
        /// FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
        /// </summary>
        public InputMap<string> Webauthn
        {
            get => _webauthn ?? (_webauthn = new InputMap<string>());
            set => _webauthn = value;
        }

        [Input("yubikeyToken")]
        private InputMap<string>? _yubikeyToken;

        /// <summary>
        /// Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
        /// </summary>
        public InputMap<string> YubikeyToken
        {
            get => _yubikeyToken ?? (_yubikeyToken = new InputMap<string>());
            set => _yubikeyToken = value;
        }

        public PolicyMfaDefaultState()
        {
        }
    }
}
