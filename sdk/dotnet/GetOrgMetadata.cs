// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetOrgMetadata
    {
        /// <summary>
        /// Retrieves the well-known org metadata, which includes the id, configured custom domains, authentication pipeline, and various other org settings.
        /// 
        /// - [Org Well Known Metadata Reference](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/OrgSetting/#tag/OrgSetting/operation/getWellknownOrgMetadata)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetOrgMetadata.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrgMetadataResult> InvokeAsync(GetOrgMetadataArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrgMetadataResult>("okta:index/getOrgMetadata:getOrgMetadata", args ?? new GetOrgMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the well-known org metadata, which includes the id, configured custom domains, authentication pipeline, and various other org settings.
        /// 
        /// - [Org Well Known Metadata Reference](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/OrgSetting/#tag/OrgSetting/operation/getWellknownOrgMetadata)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetOrgMetadata.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrgMetadataResult> Invoke(GetOrgMetadataInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgMetadataResult>("okta:index/getOrgMetadata:getOrgMetadata", args ?? new GetOrgMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrgMetadataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The URIs for the org's configured domains.
        /// </summary>
        [Input("domains")]
        public Inputs.GetOrgMetadataDomainsArgs? Domains { get; set; }

        /// <summary>
        /// The wellknown org settings (safe for public consumption).
        /// </summary>
        [Input("settings")]
        public Inputs.GetOrgMetadataSettingsArgs? Settings { get; set; }

        public GetOrgMetadataArgs()
        {
        }
        public static new GetOrgMetadataArgs Empty => new GetOrgMetadataArgs();
    }

    public sealed class GetOrgMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The URIs for the org's configured domains.
        /// </summary>
        [Input("domains")]
        public Input<Inputs.GetOrgMetadataDomainsInputArgs>? Domains { get; set; }

        /// <summary>
        /// The wellknown org settings (safe for public consumption).
        /// </summary>
        [Input("settings")]
        public Input<Inputs.GetOrgMetadataSettingsInputArgs>? Settings { get; set; }

        public GetOrgMetadataInvokeArgs()
        {
        }
        public static new GetOrgMetadataInvokeArgs Empty => new GetOrgMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrgMetadataResult
    {
        /// <summary>
        /// The URIs for the org's configured domains.
        /// </summary>
        public readonly Outputs.GetOrgMetadataDomainsResult? Domains;
        /// <summary>
        /// The unique identifier of the Org.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The authentication pipeline of the org. idx means the org is using the Identity Engine, while v1 means the org is using the Classic authentication pipeline.
        /// </summary>
        public readonly string Pipeline;
        /// <summary>
        /// The wellknown org settings (safe for public consumption).
        /// </summary>
        public readonly Outputs.GetOrgMetadataSettingsResult? Settings;

        [OutputConstructor]
        private GetOrgMetadataResult(
            Outputs.GetOrgMetadataDomainsResult? domains,

            string id,

            string pipeline,

            Outputs.GetOrgMetadataSettingsResult? settings)
        {
            Domains = domains;
            Id = id;
            Pipeline = pipeline;
            Settings = settings;
        }
    }
}
