// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages request conditions. This resource allows you to create and configure an Okta [request-condition](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Conditions/#tag/Request-Conditions).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.RequestCondition("example", new()
    ///     {
    ///         ResourceId = "&lt;resource_id&gt;",
    ///         ApprovalSequenceId = "&lt;approval_sequence_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         AccessScopeSettings = new Okta.Inputs.RequestConditionAccessScopeSettingsArgs
    ///         {
    ///             Type = "RESOURCE_DEFAULT",
    ///         },
    ///         RequesterSettings = new Okta.Inputs.RequestConditionRequesterSettingsArgs
    ///         {
    ///             Type = "EVERYONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/requestCondition:RequestCondition example &lt;resource_id&gt;/&lt;request_condition_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/requestCondition:RequestCondition")]
    public partial class RequestCondition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access duration settings for the request condition
        /// </summary>
        [Output("accessDurationSettings")]
        public Output<Outputs.RequestConditionAccessDurationSettings?> AccessDurationSettings { get; private set; } = null!;

        [Output("accessScopeSettings")]
        public Output<Outputs.RequestConditionAccessScopeSettings?> AccessScopeSettings { get; private set; } = null!;

        /// <summary>
        /// The ID of the approval sequence.
        /// </summary>
        [Output("approvalSequenceId")]
        public Output<string> ApprovalSequenceId { get; private set; } = null!;

        /// <summary>
        /// The date and time when the request condition was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The id of the user who created the request condition.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The description of the request condition.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The date and time when the request condition was last updated.
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The id of the user who last updated the request condition.
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// The name of the request condition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The priority of the request condition. Lower numbers indicate higher priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        [Output("requesterSettings")]
        public Output<Outputs.RequestConditionRequesterSettings?> RequesterSettings { get; private set; } = null!;

        /// <summary>
        /// The id of the resource in Okta ID format.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a RequestCondition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RequestCondition(string name, RequestConditionArgs args, CustomResourceOptions? options = null)
            : base("okta:index/requestCondition:RequestCondition", name, args ?? new RequestConditionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RequestCondition(string name, Input<string> id, RequestConditionState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/requestCondition:RequestCondition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RequestCondition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RequestCondition Get(string name, Input<string> id, RequestConditionState? state = null, CustomResourceOptions? options = null)
        {
            return new RequestCondition(name, id, state, options);
        }
    }

    public sealed class RequestConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access duration settings for the request condition
        /// </summary>
        [Input("accessDurationSettings")]
        public Input<Inputs.RequestConditionAccessDurationSettingsArgs>? AccessDurationSettings { get; set; }

        [Input("accessScopeSettings")]
        public Input<Inputs.RequestConditionAccessScopeSettingsArgs>? AccessScopeSettings { get; set; }

        /// <summary>
        /// The ID of the approval sequence.
        /// </summary>
        [Input("approvalSequenceId", required: true)]
        public Input<string> ApprovalSequenceId { get; set; } = null!;

        /// <summary>
        /// The description of the request condition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the request condition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the request condition. Lower numbers indicate higher priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("requesterSettings")]
        public Input<Inputs.RequestConditionRequesterSettingsArgs>? RequesterSettings { get; set; }

        /// <summary>
        /// The id of the resource in Okta ID format.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        public RequestConditionArgs()
        {
        }
        public static new RequestConditionArgs Empty => new RequestConditionArgs();
    }

    public sealed class RequestConditionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access duration settings for the request condition
        /// </summary>
        [Input("accessDurationSettings")]
        public Input<Inputs.RequestConditionAccessDurationSettingsGetArgs>? AccessDurationSettings { get; set; }

        [Input("accessScopeSettings")]
        public Input<Inputs.RequestConditionAccessScopeSettingsGetArgs>? AccessScopeSettings { get; set; }

        /// <summary>
        /// The ID of the approval sequence.
        /// </summary>
        [Input("approvalSequenceId")]
        public Input<string>? ApprovalSequenceId { get; set; }

        /// <summary>
        /// The date and time when the request condition was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The id of the user who created the request condition.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the request condition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The date and time when the request condition was last updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The id of the user who last updated the request condition.
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// The name of the request condition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the request condition. Lower numbers indicate higher priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("requesterSettings")]
        public Input<Inputs.RequestConditionRequesterSettingsGetArgs>? RequesterSettings { get; set; }

        /// <summary>
        /// The id of the resource in Okta ID format.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// Status indicates if this condition is active or not. Default status is INACTIVE. Enum: `ACTIVE`, `INACTIVE`, `DELETED`, `INVALID`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public RequestConditionState()
        {
        }
        public static new RequestConditionState Empty => new RequestConditionState();
    }
}
