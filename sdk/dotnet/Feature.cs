// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages brand. This resource allows you to toggle an Okta Feature.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/feature:Feature example &lt;id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/feature:Feature")]
    public partial class Feature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the feature.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        /// </summary>
        [Output("featureId")]
        public Output<string> FeatureId { get; private set; } = null!;

        /// <summary>
        /// Whether to `ENABLE` or `DISABLE` the feature
        /// </summary>
        [Output("lifeCycle")]
        public Output<string?> LifeCycle { get; private set; } = null!;

        /// <summary>
        /// Indicates if you want to force enable or disable a feature. Value is `True` meaning force
        /// </summary>
        [Output("mode")]
        public Output<bool?> Mode { get; private set; } = null!;

        /// <summary>
        /// Name of the feature.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Current release cycle stage of a feature.
        /// </summary>
        [Output("stage")]
        public Output<Outputs.FeatureStage> Stage { get; private set; } = null!;

        /// <summary>
        /// The feature status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Type of feature.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Feature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Feature(string name, FeatureArgs args, CustomResourceOptions? options = null)
            : base("okta:index/feature:Feature", name, args ?? new FeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Feature(string name, Input<string> id, FeatureState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/feature:Feature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Feature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Feature Get(string name, Input<string> id, FeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new Feature(name, id, state, options);
        }
    }

    public sealed class FeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        /// </summary>
        [Input("featureId", required: true)]
        public Input<string> FeatureId { get; set; } = null!;

        /// <summary>
        /// Whether to `ENABLE` or `DISABLE` the feature
        /// </summary>
        [Input("lifeCycle")]
        public Input<string>? LifeCycle { get; set; }

        /// <summary>
        /// Indicates if you want to force enable or disable a feature. Value is `True` meaning force
        /// </summary>
        [Input("mode")]
        public Input<bool>? Mode { get; set; }

        public FeatureArgs()
        {
        }
        public static new FeatureArgs Empty => new FeatureArgs();
    }

    public sealed class FeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the feature.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        /// </summary>
        [Input("featureId")]
        public Input<string>? FeatureId { get; set; }

        /// <summary>
        /// Whether to `ENABLE` or `DISABLE` the feature
        /// </summary>
        [Input("lifeCycle")]
        public Input<string>? LifeCycle { get; set; }

        /// <summary>
        /// Indicates if you want to force enable or disable a feature. Value is `True` meaning force
        /// </summary>
        [Input("mode")]
        public Input<bool>? Mode { get; set; }

        /// <summary>
        /// Name of the feature.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Current release cycle stage of a feature.
        /// </summary>
        [Input("stage")]
        public Input<Inputs.FeatureStageGetArgs>? Stage { get; set; }

        /// <summary>
        /// The feature status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Type of feature.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public FeatureState()
        {
        }
        public static new FeatureState Empty => new FeatureState();
    }
}
