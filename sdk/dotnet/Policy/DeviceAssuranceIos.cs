// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    [OktaResourceType("okta:policy/deviceAssuranceIos:DeviceAssuranceIos")]
    public partial class DeviceAssuranceIos : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Created date
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The device jailbreak. Only for android and iOS platform
        /// </summary>
        [Output("jailbreak")]
        public Output<bool?> Jailbreak { get; private set; } = null!;

        /// <summary>
        /// Last update
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// Last updated by
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Output("osVersion")]
        public Output<string?> OsVersion { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        [Output("screenlockTypes")]
        public Output<ImmutableArray<string>> ScreenlockTypes { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceAssuranceIos resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceAssuranceIos(string name, DeviceAssuranceIosArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceIos:DeviceAssuranceIos", name, args ?? new DeviceAssuranceIosArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceAssuranceIos(string name, Input<string> id, DeviceAssuranceIosState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceIos:DeviceAssuranceIos", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceAssuranceIos resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceAssuranceIos Get(string name, Input<string> id, DeviceAssuranceIosState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceAssuranceIos(name, id, state, options);
        }
    }

    public sealed class DeviceAssuranceIosArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The device jailbreak. Only for android and iOS platform
        /// </summary>
        [Input("jailbreak")]
        public Input<bool>? Jailbreak { get; set; }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        public DeviceAssuranceIosArgs()
        {
        }
        public static new DeviceAssuranceIosArgs Empty => new DeviceAssuranceIosArgs();
    }

    public sealed class DeviceAssuranceIosState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The device jailbreak. Only for android and iOS platform
        /// </summary>
        [Input("jailbreak")]
        public Input<bool>? Jailbreak { get; set; }

        /// <summary>
        /// Last update
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// Last updated by
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        public DeviceAssuranceIosState()
        {
        }
        public static new DeviceAssuranceIosState Empty => new DeviceAssuranceIosState();
    }
}
