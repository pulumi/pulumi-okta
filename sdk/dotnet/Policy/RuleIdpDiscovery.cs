// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Creates an IdP Discovery Policy Rule.
    /// 
    /// This resource allows you to create and configure an IdP Discovery Policy Rule.
    /// </summary>
    public partial class RuleIdpDiscovery : Pulumi.CustomResource
    {
        /// <summary>
        /// Applications to exclude in discovery rule
        /// </summary>
        [Output("appExcludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryAppExclude>> AppExcludes { get; private set; } = null!;

        /// <summary>
        /// Applications to include in discovery rule
        /// </summary>
        [Output("appIncludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryAppInclude>> AppIncludes { get; private set; } = null!;

        [Output("idpId")]
        public Output<string?> IdpId { get; private set; } = null!;

        [Output("idpType")]
        public Output<string?> IdpType { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        [Output("platformIncludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryPlatformInclude>> PlatformIncludes { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyid")]
        public Output<string> Policyid { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("userIdentifierAttribute")]
        public Output<string?> UserIdentifierAttribute { get; private set; } = null!;

        [Output("userIdentifierPatterns")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryUserIdentifierPattern>> UserIdentifierPatterns { get; private set; } = null!;

        [Output("userIdentifierType")]
        public Output<string?> UserIdentifierType { get; private set; } = null!;


        /// <summary>
        /// Create a RuleIdpDiscovery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleIdpDiscovery(string name, RuleIdpDiscoveryArgs args, CustomResourceOptions? options = null)
            : base("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, args ?? new RuleIdpDiscoveryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleIdpDiscovery(string name, Input<string> id, RuleIdpDiscoveryState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleIdpDiscovery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleIdpDiscovery Get(string name, Input<string> id, RuleIdpDiscoveryState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleIdpDiscovery(name, id, state, options);
        }
    }

    public sealed class RuleIdpDiscoveryArgs : Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery rule
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs>());
            set => _appIncludes = value;
        }

        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        [Input("idpType")]
        public Input<string>? IdpType { get; set; }

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs>? _platformIncludes;
        public InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid", required: true)]
        public Input<string> Policyid { get; set; } = null!;

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("userIdentifierAttribute")]
        public Input<string>? UserIdentifierAttribute { get; set; }

        [Input("userIdentifierPatterns")]
        private InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs>? _userIdentifierPatterns;
        public InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs> UserIdentifierPatterns
        {
            get => _userIdentifierPatterns ?? (_userIdentifierPatterns = new InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs>());
            set => _userIdentifierPatterns = value;
        }

        [Input("userIdentifierType")]
        public Input<string>? UserIdentifierType { get; set; }

        public RuleIdpDiscoveryArgs()
        {
        }
    }

    public sealed class RuleIdpDiscoveryState : Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery rule
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs>());
            set => _appIncludes = value;
        }

        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        [Input("idpType")]
        public Input<string>? IdpType { get; set; }

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs>? _platformIncludes;
        public InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<string>? Policyid { get; set; }

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("userIdentifierAttribute")]
        public Input<string>? UserIdentifierAttribute { get; set; }

        [Input("userIdentifierPatterns")]
        private InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs>? _userIdentifierPatterns;
        public InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs> UserIdentifierPatterns
        {
            get => _userIdentifierPatterns ?? (_userIdentifierPatterns = new InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs>());
            set => _userIdentifierPatterns = value;
        }

        [Input("userIdentifierType")]
        public Input<string>? UserIdentifierType { get; set; }

        public RuleIdpDiscoveryState()
        {
        }
    }
}
