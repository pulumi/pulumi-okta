// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// This resource allows you to create and configure an IdP Discovery Policy Rule.
    /// 
    /// &gt; If you receive the error `You do not have permission to access the feature
    /// you are requesting` contact support and
    /// request feature flag `ADVANCED_SSO` be applied to your org.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // All Okta orgs contain only one IdP Discovery Policy
    ///     var idpDiscoveryPolicy = Okta.Policy.GetPolicy.Invoke(new()
    ///     {
    ///         Name = "Idp Discovery Policy",
    ///         Type = "IDP_DISCOVERY",
    ///     });
    /// 
    ///     var example = new Okta.Policy.RuleIdpDiscovery("example", new()
    ///     {
    ///         PolicyId = idpDiscoveryPolicy.Apply(getPolicyResult =&gt; getPolicyResult.Id),
    ///         Name = "example",
    ///         IdpId = "&lt;idp id&gt;",
    ///         IdpType = "OIDC",
    ///         NetworkConnection = "ANYWHERE",
    ///         Priority = 1,
    ///         Status = "ACTIVE",
    ///         UserIdentifierType = "ATTRIBUTE",
    ///         UserIdentifierAttribute = "company",
    ///         AppExcludes = new[]
    ///         {
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryAppExcludeArgs
    ///             {
    ///                 Id = "&lt;app id&gt;",
    ///                 Type = "APP",
    ///             },
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryAppExcludeArgs
    ///             {
    ///                 Name = "yahoo_mail",
    ///                 Type = "APP_TYPE",
    ///             },
    ///         },
    ///         AppIncludes = new[]
    ///         {
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryAppIncludeArgs
    ///             {
    ///                 Id = "&lt;app id&gt;",
    ///                 Type = "APP",
    ///             },
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryAppIncludeArgs
    ///             {
    ///                 Name = "&lt;app type name&gt;",
    ///                 Type = "APP_TYPE",
    ///             },
    ///         },
    ///         PlatformIncludes = new[]
    ///         {
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryPlatformIncludeArgs
    ///             {
    ///                 Type = "MOBILE",
    ///                 OsType = "OSX",
    ///             },
    ///         },
    ///         UserIdentifierPatterns = new[]
    ///         {
    ///             new Okta.Policy.Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs
    ///             {
    ///                 MatchType = "EQUALS",
    ///                 Value = "Articulate",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Policy Rule can be imported via the Policy and Rule ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/ruleIdpDiscovery:RuleIdpDiscovery example &amp;#60;policy id&amp;#62;/&amp;#60;rule id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery")]
    public partial class RuleIdpDiscovery : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Applications to exclude in discovery. See `app_include` for details.
        /// </summary>
        [Output("appExcludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryAppExclude>> AppExcludes { get; private set; } = null!;

        /// <summary>
        /// Applications to include in discovery rule.
        /// </summary>
        [Output("appIncludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryAppInclude>> AppIncludes { get; private set; } = null!;

        /// <summary>
        /// The identifier for the Idp the rule should route to if all conditions are met.
        /// </summary>
        [Output("idpId")]
        public Output<string?> IdpId { get; private set; } = null!;

        /// <summary>
        /// Type of Idp. One of: `"SAML2"`, `"IWA"`, `"AgentlessDSSO"`, `"X509"`, `"FACEBOOK"`, `"GOOGLE"`, `"LINKEDIN"`, `"MICROSOFT"`, `"OIDC"`
        /// </summary>
        [Output("idpType")]
        public Output<string?> IdpType { get; private set; } = null!;

        /// <summary>
        /// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network selection mode. One of `"ANYWEHRE"` or `"ZONE"`.
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to exclude.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to include.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// Platform to include in discovery rule. - 'type' - (Optional) One of: 'ANY', 'MOBILE', 'DESKTOP' - 'os_expression -
        /// (Optional) Only available when using os_type = 'OTHER' - 'os_type' - (Optional) One of: 'ANY', 'IOS', 'WINDOWS',
        /// 'ANDROID', 'OTHER', 'OSX'
        /// </summary>
        [Output("platformIncludes")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryPlatformInclude>> PlatformIncludes { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyId")]
        public Output<string?> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Idp rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Idp rule status: `"ACTIVE"` or `"INACTIVE"`. By default, it is `"ACTIVE"`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Profile attribute matching can only have a single value that describes the type indicated in `user_identifier_type`. This is the attribute or identifier that the `user_identifier_patterns` are checked against.
        /// </summary>
        [Output("userIdentifierAttribute")]
        public Output<string?> UserIdentifierAttribute { get; private set; } = null!;

        /// <summary>
        /// Specifies a User Identifier pattern condition to match against. If `match_type` of `"EXPRESSION"` is used, only a *single* element can be set, otherwise multiple elements of matching patterns may be provided.
        /// </summary>
        [Output("userIdentifierPatterns")]
        public Output<ImmutableArray<Outputs.RuleIdpDiscoveryUserIdentifierPattern>> UserIdentifierPatterns { get; private set; } = null!;

        /// <summary>
        /// One of: `"IDENTIFIER"`, `"ATTRIBUTE"`
        /// </summary>
        [Output("userIdentifierType")]
        public Output<string?> UserIdentifierType { get; private set; } = null!;


        /// <summary>
        /// Create a RuleIdpDiscovery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleIdpDiscovery(string name, RuleIdpDiscoveryArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, args ?? new RuleIdpDiscoveryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleIdpDiscovery(string name, Input<string> id, RuleIdpDiscoveryState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleIdpDiscovery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleIdpDiscovery Get(string name, Input<string> id, RuleIdpDiscoveryState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleIdpDiscovery(name, id, state, options);
        }
    }

    public sealed class RuleIdpDiscoveryArgs : global::Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery. See `app_include` for details.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleIdpDiscoveryAppExcludeArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleIdpDiscoveryAppIncludeArgs>());
            set => _appIncludes = value;
        }

        /// <summary>
        /// The identifier for the Idp the rule should route to if all conditions are met.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// Type of Idp. One of: `"SAML2"`, `"IWA"`, `"AgentlessDSSO"`, `"X509"`, `"FACEBOOK"`, `"GOOGLE"`, `"LINKEDIN"`, `"MICROSOFT"`, `"OIDC"`
        /// </summary>
        [Input("idpType")]
        public Input<string>? IdpType { get; set; }

        /// <summary>
        /// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network selection mode. One of `"ANYWEHRE"` or `"ZONE"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs>? _platformIncludes;

        /// <summary>
        /// Platform to include in discovery rule. - 'type' - (Optional) One of: 'ANY', 'MOBILE', 'DESKTOP' - 'os_expression -
        /// (Optional) Only available when using os_type = 'OTHER' - 'os_type' - (Optional) One of: 'ANY', 'IOS', 'WINDOWS',
        /// 'ANDROID', 'OTHER', 'OSX'
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.RuleIdpDiscoveryPlatformIncludeArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Idp rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Idp rule status: `"ACTIVE"` or `"INACTIVE"`. By default, it is `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Profile attribute matching can only have a single value that describes the type indicated in `user_identifier_type`. This is the attribute or identifier that the `user_identifier_patterns` are checked against.
        /// </summary>
        [Input("userIdentifierAttribute")]
        public Input<string>? UserIdentifierAttribute { get; set; }

        [Input("userIdentifierPatterns")]
        private InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs>? _userIdentifierPatterns;

        /// <summary>
        /// Specifies a User Identifier pattern condition to match against. If `match_type` of `"EXPRESSION"` is used, only a *single* element can be set, otherwise multiple elements of matching patterns may be provided.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs> UserIdentifierPatterns
        {
            get => _userIdentifierPatterns ?? (_userIdentifierPatterns = new InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternArgs>());
            set => _userIdentifierPatterns = value;
        }

        /// <summary>
        /// One of: `"IDENTIFIER"`, `"ATTRIBUTE"`
        /// </summary>
        [Input("userIdentifierType")]
        public Input<string>? UserIdentifierType { get; set; }

        public RuleIdpDiscoveryArgs()
        {
        }
        public static new RuleIdpDiscoveryArgs Empty => new RuleIdpDiscoveryArgs();
    }

    public sealed class RuleIdpDiscoveryState : global::Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery. See `app_include` for details.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleIdpDiscoveryAppExcludeGetArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleIdpDiscoveryAppIncludeGetArgs>());
            set => _appIncludes = value;
        }

        /// <summary>
        /// The identifier for the Idp the rule should route to if all conditions are met.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// Type of Idp. One of: `"SAML2"`, `"IWA"`, `"AgentlessDSSO"`, `"X509"`, `"FACEBOOK"`, `"GOOGLE"`, `"LINKEDIN"`, `"MICROSOFT"`, `"OIDC"`
        /// </summary>
        [Input("idpType")]
        public Input<string>? IdpType { get; set; }

        /// <summary>
        /// Use if the `type` is `"APP_TYPE"` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network selection mode. One of `"ANYWEHRE"` or `"ZONE"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `"ZONE"`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs>? _platformIncludes;

        /// <summary>
        /// Platform to include in discovery rule. - 'type' - (Optional) One of: 'ANY', 'MOBILE', 'DESKTOP' - 'os_expression -
        /// (Optional) Only available when using os_type = 'OTHER' - 'os_type' - (Optional) One of: 'ANY', 'IOS', 'WINDOWS',
        /// 'ANDROID', 'OTHER', 'OSX'
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.RuleIdpDiscoveryPlatformIncludeGetArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Idp rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Idp rule status: `"ACTIVE"` or `"INACTIVE"`. By default, it is `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Profile attribute matching can only have a single value that describes the type indicated in `user_identifier_type`. This is the attribute or identifier that the `user_identifier_patterns` are checked against.
        /// </summary>
        [Input("userIdentifierAttribute")]
        public Input<string>? UserIdentifierAttribute { get; set; }

        [Input("userIdentifierPatterns")]
        private InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs>? _userIdentifierPatterns;

        /// <summary>
        /// Specifies a User Identifier pattern condition to match against. If `match_type` of `"EXPRESSION"` is used, only a *single* element can be set, otherwise multiple elements of matching patterns may be provided.
        /// </summary>
        public InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs> UserIdentifierPatterns
        {
            get => _userIdentifierPatterns ?? (_userIdentifierPatterns = new InputList<Inputs.RuleIdpDiscoveryUserIdentifierPatternGetArgs>());
            set => _userIdentifierPatterns = value;
        }

        /// <summary>
        /// One of: `"IDENTIFIER"`, `"ATTRIBUTE"`
        /// </summary>
        [Input("userIdentifierType")]
        public Input<string>? UserIdentifierType { get; set; }

        public RuleIdpDiscoveryState()
        {
        }
        public static new RuleIdpDiscoveryState Empty => new RuleIdpDiscoveryState();
    }
}
