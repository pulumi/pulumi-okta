// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Manages a device assurance policy for chromeos.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Policy.DeviceAssuranceChromeos("example", new()
    ///     {
    ///         Name = "example",
    ///         TpspAllowScreenLock = true,
    ///         TpspBrowserVersion = "15393.27.0",
    ///         TpspBuiltinDnsClientEnabled = true,
    ///         TpspChromeRemoteDesktopAppBlocked = true,
    ///         TpspDeviceEnrollmentDomain = "exampleDomain",
    ///         TpspDiskEncrypted = true,
    ///         TpspKeyTrustLevel = "CHROME_OS_VERIFIED_MODE",
    ///         TpspOsFirewall = true,
    ///         TpspOsVersion = "10.0.19041.1110",
    ///         TpspPasswordProctectionWarningTrigger = "PASSWORD_PROTECTION_OFF",
    ///         TpspRealtimeUrlCheckMode = true,
    ///         TpspSafeBrowsingProtectionLevel = "ENHANCED_PROTECTION",
    ///         TpspScreenLockSecured = true,
    ///         TpspSiteIsolationEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos example &lt;device_assurance_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos")]
    public partial class DeviceAssuranceChromeos : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Created date
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// Last update
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// Last updated by
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Name of the device assurance policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider allow screen lock
        /// </summary>
        [Output("tpspAllowScreenLock")]
        public Output<bool?> TpspAllowScreenLock { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Output("tpspBrowserVersion")]
        public Output<string?> TpspBrowserVersion { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider builtin dns client enabled
        /// </summary>
        [Output("tpspBuiltinDnsClientEnabled")]
        public Output<bool?> TpspBuiltinDnsClientEnabled { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Output("tpspChromeRemoteDesktopAppBlocked")]
        public Output<bool?> TpspChromeRemoteDesktopAppBlocked { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Output("tpspDeviceEnrollmentDomain")]
        public Output<string?> TpspDeviceEnrollmentDomain { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Output("tpspDiskEncrypted")]
        public Output<bool?> TpspDiskEncrypted { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Output("tpspKeyTrustLevel")]
        public Output<string?> TpspKeyTrustLevel { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Output("tpspOsFirewall")]
        public Output<bool?> TpspOsFirewall { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Output("tpspOsVersion")]
        public Output<string?> TpspOsVersion { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Output("tpspPasswordProctectionWarningTrigger")]
        public Output<string?> TpspPasswordProctectionWarningTrigger { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Output("tpspRealtimeUrlCheckMode")]
        public Output<bool?> TpspRealtimeUrlCheckMode { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Output("tpspSafeBrowsingProtectionLevel")]
        public Output<string?> TpspSafeBrowsingProtectionLevel { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Output("tpspScreenLockSecured")]
        public Output<bool?> TpspScreenLockSecured { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Output("tpspSiteIsolationEnabled")]
        public Output<bool?> TpspSiteIsolationEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceAssuranceChromeos resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceAssuranceChromeos(string name, DeviceAssuranceChromeosArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos", name, args ?? new DeviceAssuranceChromeosArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceAssuranceChromeos(string name, Input<string> id, DeviceAssuranceChromeosState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceChromeos:DeviceAssuranceChromeos", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceAssuranceChromeos resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceAssuranceChromeos Get(string name, Input<string> id, DeviceAssuranceChromeosState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceAssuranceChromeos(name, id, state, options);
        }
    }

    public sealed class DeviceAssuranceChromeosArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the device assurance policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Third party signal provider allow screen lock
        /// </summary>
        [Input("tpspAllowScreenLock")]
        public Input<bool>? TpspAllowScreenLock { get; set; }

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Input("tpspBrowserVersion")]
        public Input<string>? TpspBrowserVersion { get; set; }

        /// <summary>
        /// Third party signal provider builtin dns client enabled
        /// </summary>
        [Input("tpspBuiltinDnsClientEnabled")]
        public Input<bool>? TpspBuiltinDnsClientEnabled { get; set; }

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Input("tpspChromeRemoteDesktopAppBlocked")]
        public Input<bool>? TpspChromeRemoteDesktopAppBlocked { get; set; }

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Input("tpspDeviceEnrollmentDomain")]
        public Input<string>? TpspDeviceEnrollmentDomain { get; set; }

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Input("tpspDiskEncrypted")]
        public Input<bool>? TpspDiskEncrypted { get; set; }

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Input("tpspKeyTrustLevel")]
        public Input<string>? TpspKeyTrustLevel { get; set; }

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Input("tpspOsFirewall")]
        public Input<bool>? TpspOsFirewall { get; set; }

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Input("tpspOsVersion")]
        public Input<string>? TpspOsVersion { get; set; }

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Input("tpspPasswordProctectionWarningTrigger")]
        public Input<string>? TpspPasswordProctectionWarningTrigger { get; set; }

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Input("tpspRealtimeUrlCheckMode")]
        public Input<bool>? TpspRealtimeUrlCheckMode { get; set; }

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Input("tpspSafeBrowsingProtectionLevel")]
        public Input<string>? TpspSafeBrowsingProtectionLevel { get; set; }

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Input("tpspScreenLockSecured")]
        public Input<bool>? TpspScreenLockSecured { get; set; }

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Input("tpspSiteIsolationEnabled")]
        public Input<bool>? TpspSiteIsolationEnabled { get; set; }

        public DeviceAssuranceChromeosArgs()
        {
        }
        public static new DeviceAssuranceChromeosArgs Empty => new DeviceAssuranceChromeosArgs();
    }

    public sealed class DeviceAssuranceChromeosState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// Last update
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// Last updated by
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// Name of the device assurance policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// Third party signal provider allow screen lock
        /// </summary>
        [Input("tpspAllowScreenLock")]
        public Input<bool>? TpspAllowScreenLock { get; set; }

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Input("tpspBrowserVersion")]
        public Input<string>? TpspBrowserVersion { get; set; }

        /// <summary>
        /// Third party signal provider builtin dns client enabled
        /// </summary>
        [Input("tpspBuiltinDnsClientEnabled")]
        public Input<bool>? TpspBuiltinDnsClientEnabled { get; set; }

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Input("tpspChromeRemoteDesktopAppBlocked")]
        public Input<bool>? TpspChromeRemoteDesktopAppBlocked { get; set; }

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Input("tpspDeviceEnrollmentDomain")]
        public Input<string>? TpspDeviceEnrollmentDomain { get; set; }

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Input("tpspDiskEncrypted")]
        public Input<bool>? TpspDiskEncrypted { get; set; }

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Input("tpspKeyTrustLevel")]
        public Input<string>? TpspKeyTrustLevel { get; set; }

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Input("tpspOsFirewall")]
        public Input<bool>? TpspOsFirewall { get; set; }

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Input("tpspOsVersion")]
        public Input<string>? TpspOsVersion { get; set; }

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Input("tpspPasswordProctectionWarningTrigger")]
        public Input<string>? TpspPasswordProctectionWarningTrigger { get; set; }

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Input("tpspRealtimeUrlCheckMode")]
        public Input<bool>? TpspRealtimeUrlCheckMode { get; set; }

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Input("tpspSafeBrowsingProtectionLevel")]
        public Input<string>? TpspSafeBrowsingProtectionLevel { get; set; }

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Input("tpspScreenLockSecured")]
        public Input<bool>? TpspScreenLockSecured { get; set; }

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Input("tpspSiteIsolationEnabled")]
        public Input<bool>? TpspSiteIsolationEnabled { get; set; }

        public DeviceAssuranceChromeosState()
        {
        }
        public static new DeviceAssuranceChromeosState Empty => new DeviceAssuranceChromeosState();
    }
}
