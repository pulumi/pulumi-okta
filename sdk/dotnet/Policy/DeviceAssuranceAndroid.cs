// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Manages a device assurance policy for android.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid example &lt;device_assurance_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid")]
    public partial class DeviceAssuranceAndroid : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Created date
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// List of disk encryption type, can be `FULL`, `USER`
        /// </summary>
        [Output("diskEncryptionTypes")]
        public Output<ImmutableArray<string>> DiskEncryptionTypes { get; private set; } = null!;

        /// <summary>
        /// Is the device jailbroken in the device assurance policy.
        /// </summary>
        [Output("jailbreak")]
        public Output<bool?> Jailbreak { get; private set; } = null!;

        /// <summary>
        /// Last update
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// Last updated by
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Minimum os version of the device in the device assurance policy.
        /// </summary>
        [Output("osVersion")]
        public Output<string?> OsVersion { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
        /// </summary>
        [Output("screenlockTypes")]
        public Output<ImmutableArray<string>> ScreenlockTypes { get; private set; } = null!;

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Output("secureHardwarePresent")]
        public Output<bool?> SecureHardwarePresent { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceAssuranceAndroid resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceAssuranceAndroid(string name, DeviceAssuranceAndroidArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid", name, args ?? new DeviceAssuranceAndroidArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceAssuranceAndroid(string name, Input<string> id, DeviceAssuranceAndroidState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceAndroid:DeviceAssuranceAndroid", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceAssuranceAndroid resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceAssuranceAndroid Get(string name, Input<string> id, DeviceAssuranceAndroidState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceAssuranceAndroid(name, id, state, options);
        }
    }

    public sealed class DeviceAssuranceAndroidArgs : global::Pulumi.ResourceArgs
    {
        [Input("diskEncryptionTypes")]
        private InputList<string>? _diskEncryptionTypes;

        /// <summary>
        /// List of disk encryption type, can be `FULL`, `USER`
        /// </summary>
        public InputList<string> DiskEncryptionTypes
        {
            get => _diskEncryptionTypes ?? (_diskEncryptionTypes = new InputList<string>());
            set => _diskEncryptionTypes = value;
        }

        /// <summary>
        /// Is the device jailbroken in the device assurance policy.
        /// </summary>
        [Input("jailbreak")]
        public Input<bool>? Jailbreak { get; set; }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Minimum os version of the device in the device assurance policy.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public Input<bool>? SecureHardwarePresent { get; set; }

        public DeviceAssuranceAndroidArgs()
        {
        }
        public static new DeviceAssuranceAndroidArgs Empty => new DeviceAssuranceAndroidArgs();
    }

    public sealed class DeviceAssuranceAndroidState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        [Input("diskEncryptionTypes")]
        private InputList<string>? _diskEncryptionTypes;

        /// <summary>
        /// List of disk encryption type, can be `FULL`, `USER`
        /// </summary>
        public InputList<string> DiskEncryptionTypes
        {
            get => _diskEncryptionTypes ?? (_diskEncryptionTypes = new InputList<string>());
            set => _diskEncryptionTypes = value;
        }

        /// <summary>
        /// Is the device jailbroken in the device assurance policy.
        /// </summary>
        [Input("jailbreak")]
        public Input<bool>? Jailbreak { get; set; }

        /// <summary>
        /// Last update
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// Last updated by
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Minimum os version of the device in the device assurance policy.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public Input<bool>? SecureHardwarePresent { get; set; }

        public DeviceAssuranceAndroidState()
        {
        }
        public static new DeviceAssuranceAndroidState Empty => new DeviceAssuranceAndroidState();
    }
}
