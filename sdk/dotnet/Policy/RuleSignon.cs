// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `risc_level`
    /// to an empty string, since this feature is not enabled.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Okta.Policy.Signon("test", new Okta.Policy.SignonArgs
    ///         {
    ///             Status = "ACTIVE",
    ///             Description = "Example Policy",
    ///         });
    ///         var newCity = Output.Create(Okta.GetBehaviour.InvokeAsync(new Okta.GetBehaviourArgs
    ///         {
    ///             Name = "New City",
    ///         }));
    ///         var example = new Okta.Policy.RuleSignon("example", new Okta.Policy.RuleSignonArgs
    ///         {
    ///             Access = "CHALLENGE",
    ///             Authtype = "RADIUS",
    ///             NetworkConnection = "ANYWHERE",
    ///             PolicyId = okta_policy_signon.Example.Id,
    ///             Status = "ACTIVE",
    ///             RiscLevel = "HIGH",
    ///             Behaviors = 
    ///             {
    ///                 newCity.Apply(newCity =&gt; newCity.Id),
    ///             },
    ///             FactorSequences = 
    ///             {
    ///                 new Okta.Policy.Inputs.RuleSignonFactorSequenceArgs
    ///                 {
    ///                     PrimaryCriteriaFactorType = "token:hotp",
    ///                     PrimaryCriteriaProvider = "CUSTOM",
    ///                     SecondaryCriterias = 
    ///                     {
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "token:software:totp",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "push",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "password",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "question",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "sms",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "token:software:totp",
    ///                             Provider = "GOOGLE",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "email",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "call",
    ///                             Provider = "OKTA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "webauthn",
    ///                             Provider = "FIDO",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "token",
    ///                             Provider = "RSA",
    ///                         },
    ///                         new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                         {
    ///                             FactorType = "token",
    ///                             Provider = "SYMANTEC",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Okta.Policy.Inputs.RuleSignonFactorSequenceArgs
    ///                 {
    ///                     PrimaryCriteriaFactorType = "token:software:totp",
    ///                     PrimaryCriteriaProvider = "OKTA",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Policy Rule can be imported via the Policy and Rule ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:policy/ruleSignon:RuleSignon example &amp;#60;policy id&amp;#62;/&amp;#60;rule id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/ruleSignon:RuleSignon")]
    public partial class RuleSignon : Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
        /// </summary>
        [Output("authtype")]
        public Output<string?> Authtype { get; private set; } = null!;

        /// <summary>
        /// List of behavior IDs.
        /// </summary>
        [Output("behaviors")]
        public Output<ImmutableArray<string>> Behaviors { get; private set; } = null!;

        /// <summary>
        /// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
        /// </summary>
        [Output("factorSequences")]
        public Output<ImmutableArray<Outputs.RuleSignonFactorSequence>> FactorSequences { get; private set; } = null!;

        /// <summary>
        /// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
        /// </summary>
        [Output("identityProvider")]
        public Output<string?> IdentityProvider { get; private set; } = null!;

        /// <summary>
        /// When identity_provider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
        /// </summary>
        [Output("identityProviderIds")]
        public Output<ImmutableArray<string>> IdentityProviderIds { get; private set; } = null!;

        /// <summary>
        /// Elapsed time before the next MFA challenge.
        /// </summary>
        [Output("mfaLifetime")]
        public Output<int?> MfaLifetime { get; private set; } = null!;

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
        /// </summary>
        [Output("mfaPrompt")]
        public Output<string?> MfaPrompt { get; private set; } = null!;

        /// <summary>
        /// Remember MFA device. The default `false`.
        /// </summary>
        [Output("mfaRememberDevice")]
        public Output<bool?> MfaRememberDevice { get; private set; } = null!;

        /// <summary>
        /// Require MFA. By default is `false`.
        /// </summary>
        [Output("mfaRequired")]
        public Output<bool?> MfaRequired { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyId")]
        public Output<string?> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyid")]
        public Output<string?> Policyid { get; private set; } = null!;

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
        /// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
        /// </summary>
        [Output("primaryFactor")]
        public Output<string> PrimaryFactor { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
        /// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
        /// </summary>
        [Output("riscLevel")]
        public Output<string?> RiscLevel { get; private set; } = null!;

        /// <summary>
        /// Max minutes a session can be idle.,
        /// </summary>
        [Output("sessionIdle")]
        public Output<int?> SessionIdle { get; private set; } = null!;

        /// <summary>
        /// Max minutes a session is active: Disable = 0.
        /// </summary>
        [Output("sessionLifetime")]
        public Output<int?> SessionLifetime { get; private set; } = null!;

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
        /// </summary>
        [Output("sessionPersistent")]
        public Output<bool?> SessionPersistent { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;


        /// <summary>
        /// Create a RuleSignon resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleSignon(string name, RuleSignonArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleSignon:RuleSignon", name, args ?? new RuleSignonArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleSignon(string name, Input<string> id, RuleSignonState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleSignon:RuleSignon", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleSignon resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleSignon Get(string name, Input<string> id, RuleSignonState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleSignon(name, id, state, options);
        }
    }

    public sealed class RuleSignonArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
        /// </summary>
        [Input("authtype")]
        public Input<string>? Authtype { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// List of behavior IDs.
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        [Input("factorSequences")]
        private InputList<Inputs.RuleSignonFactorSequenceArgs>? _factorSequences;

        /// <summary>
        /// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
        /// </summary>
        public InputList<Inputs.RuleSignonFactorSequenceArgs> FactorSequences
        {
            get => _factorSequences ?? (_factorSequences = new InputList<Inputs.RuleSignonFactorSequenceArgs>());
            set => _factorSequences = value;
        }

        /// <summary>
        /// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
        /// </summary>
        [Input("identityProvider")]
        public Input<string>? IdentityProvider { get; set; }

        [Input("identityProviderIds")]
        private InputList<string>? _identityProviderIds;

        /// <summary>
        /// When identity_provider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
        /// </summary>
        public InputList<string> IdentityProviderIds
        {
            get => _identityProviderIds ?? (_identityProviderIds = new InputList<string>());
            set => _identityProviderIds = value;
        }

        /// <summary>
        /// Elapsed time before the next MFA challenge.
        /// </summary>
        [Input("mfaLifetime")]
        public Input<int>? MfaLifetime { get; set; }

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
        /// </summary>
        [Input("mfaPrompt")]
        public Input<string>? MfaPrompt { get; set; }

        /// <summary>
        /// Remember MFA device. The default `false`.
        /// </summary>
        [Input("mfaRememberDevice")]
        public Input<bool>? MfaRememberDevice { get; set; }

        /// <summary>
        /// Require MFA. By default is `false`.
        /// </summary>
        [Input("mfaRequired")]
        public Input<bool>? MfaRequired { get; set; }

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<string>? Policyid { get; set; }

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
        /// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
        /// </summary>
        [Input("primaryFactor")]
        public Input<string>? PrimaryFactor { get; set; }

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
        /// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
        /// </summary>
        [Input("riscLevel")]
        public Input<string>? RiscLevel { get; set; }

        /// <summary>
        /// Max minutes a session can be idle.,
        /// </summary>
        [Input("sessionIdle")]
        public Input<int>? SessionIdle { get; set; }

        /// <summary>
        /// Max minutes a session is active: Disable = 0.
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
        /// </summary>
        [Input("sessionPersistent")]
        public Input<bool>? SessionPersistent { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleSignonArgs()
        {
        }
    }

    public sealed class RuleSignonState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `"ALLOW"`, `"DENY"` or `"CHALLENGE"`. The default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Authentication entrypoint: `"ANY"`, `"LDAP_INTERFACE"` or `"RADIUS"`.
        /// </summary>
        [Input("authtype")]
        public Input<string>? Authtype { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// List of behavior IDs.
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        [Input("factorSequences")]
        private InputList<Inputs.RuleSignonFactorSequenceGetArgs>? _factorSequences;

        /// <summary>
        /// Auth factor sequences. Should be set if `access = "CHALLENGE"`.
        /// </summary>
        public InputList<Inputs.RuleSignonFactorSequenceGetArgs> FactorSequences
        {
            get => _factorSequences ?? (_factorSequences = new InputList<Inputs.RuleSignonFactorSequenceGetArgs>());
            set => _factorSequences = value;
        }

        /// <summary>
        /// Defines the identity provider for this rule. Valid values are `"ANY"`, `"OKTA"`, and `"SPECIFIC_IDP"`.
        /// </summary>
        [Input("identityProvider")]
        public Input<string>? IdentityProvider { get; set; }

        [Input("identityProviderIds")]
        private InputList<string>? _identityProviderIds;

        /// <summary>
        /// When identity_provider is `"SPECIFIC_IDP"` then this is the list of IdP IDs to apply the rule on.
        /// </summary>
        public InputList<string> IdentityProviderIds
        {
            get => _identityProviderIds ?? (_identityProviderIds = new InputList<string>());
            set => _identityProviderIds = value;
        }

        /// <summary>
        /// Elapsed time before the next MFA challenge.
        /// </summary>
        [Input("mfaLifetime")]
        public Input<int>? MfaLifetime { get; set; }

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `"DEVICE"`, `"SESSION"` or `"ALWAYS"`.
        /// </summary>
        [Input("mfaPrompt")]
        public Input<string>? MfaPrompt { get; set; }

        /// <summary>
        /// Remember MFA device. The default `false`.
        /// </summary>
        [Input("mfaRememberDevice")]
        public Input<bool>? MfaRememberDevice { get; set; }

        /// <summary>
        /// Require MFA. By default is `false`.
        /// </summary>
        [Input("mfaRequired")]
        public Input<bool>? MfaRequired { get; set; }

        /// <summary>
        /// Policy Rule Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<string>? Policyid { get; set; }

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: 
        /// `"PASSWORD_IDP_ANY_FACTOR"`, `"PASSWORD_IDP"`.
        /// </summary>
        [Input("primaryFactor")]
        public Input<string>? PrimaryFactor { get; set; }

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Risc level: `"ANY"`, `"LOW"`, `"MEDIUM"` or `"HIGH"`. Default is `"ANY"`. It can be also 
        /// set to an empty string in case `RISC_SCORING` org feature flag is disabled.
        /// </summary>
        [Input("riscLevel")]
        public Input<string>? RiscLevel { get; set; }

        /// <summary>
        /// Max minutes a session can be idle.,
        /// </summary>
        [Input("sessionIdle")]
        public Input<int>? SessionIdle { get; set; }

        /// <summary>
        /// Max minutes a session is active: Disable = 0.
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
        /// </summary>
        [Input("sessionPersistent")]
        public Input<bool>? SessionPersistent { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleSignonState()
        {
        }
    }
}
