// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `risc_level` to an empty string, since this feature is not enabled.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.Policy.Signon("test", new()
    ///     {
    ///         Name = "Example Policy",
    ///         Status = "ACTIVE",
    ///         Description = "Example Policy",
    ///     });
    /// 
    ///     var newCity = Okta.GetBehaviour.Invoke(new()
    ///     {
    ///         Name = "New City",
    ///     });
    /// 
    ///     var example = new Okta.Policy.RuleSignon("example", new()
    ///     {
    ///         Access = "CHALLENGE",
    ///         Authtype = "RADIUS",
    ///         Name = "Example Policy Rule",
    ///         NetworkConnection = "ANYWHERE",
    ///         PolicyId = exampleOktaPolicySignon.Id,
    ///         Status = "ACTIVE",
    ///         RiscLevel = "HIGH",
    ///         Behaviors = new[]
    ///         {
    ///             newCity.Apply(getBehaviourResult =&gt; getBehaviourResult.Id),
    ///         },
    ///         FactorSequences = new[]
    ///         {
    ///             new Okta.Policy.Inputs.RuleSignonFactorSequenceArgs
    ///             {
    ///                 PrimaryCriteriaFactorType = "token:hotp",
    ///                 PrimaryCriteriaProvider = "CUSTOM",
    ///                 SecondaryCriterias = new[]
    ///                 {
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "token:software:totp",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "push",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "password",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "question",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "sms",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "token:software:totp",
    ///                         Provider = "GOOGLE",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "email",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "call",
    ///                         Provider = "OKTA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "webauthn",
    ///                         Provider = "FIDO",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "token",
    ///                         Provider = "RSA",
    ///                     },
    ///                     new Okta.Policy.Inputs.RuleSignonFactorSequenceSecondaryCriteriaArgs
    ///                     {
    ///                         FactorType = "token",
    ///                         Provider = "SYMANTEC",
    ///                     },
    ///                 },
    ///             },
    ///             new Okta.Policy.Inputs.RuleSignonFactorSequenceArgs
    ///             {
    ///                 PrimaryCriteriaFactorType = "token:software:totp",
    ///                 PrimaryCriteriaProvider = "OKTA",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/ruleSignon:RuleSignon example &lt;policy_id&gt;/&lt;rule_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/ruleSignon:RuleSignon")]
    public partial class RuleSignon : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
        /// </summary>
        [Output("authtype")]
        public Output<string?> Authtype { get; private set; } = null!;

        /// <summary>
        /// List of behavior IDs
        /// </summary>
        [Output("behaviors")]
        public Output<ImmutableArray<string>> Behaviors { get; private set; } = null!;

        /// <summary>
        /// Auth factor sequences. Should be set if 'access = "CHALLENGE"'. - 'primary_criteria_provider' - (Required) Primary
        /// provider of the auth section. - 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section. -
        /// 'secondary_criteria' - (Optional) Additional authentication steps. - 'provider' - (Required) Provider of the additional
        /// authentication step. - 'factor_type' - (Required) Factor type of the additional authentication step.
        /// </summary>
        [Output("factorSequences")]
        public Output<ImmutableArray<Outputs.RuleSignonFactorSequence>> FactorSequences { get; private set; } = null!;

        /// <summary>
        /// Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. &gt; **WARNING**: Use of
        /// `identity_provider` requires a feature flag to be enabled.
        /// </summary>
        [Output("identityProvider")]
        public Output<string?> IdentityProvider { get; private set; } = null!;

        /// <summary>
        /// When identity_provider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
        /// </summary>
        [Output("identityProviderIds")]
        public Output<ImmutableArray<string>> IdentityProviderIds { get; private set; } = null!;

        /// <summary>
        /// Elapsed time before the next MFA challenge
        /// </summary>
        [Output("mfaLifetime")]
        public Output<int?> MfaLifetime { get; private set; } = null!;

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION`
        /// or`ALWAYS`.
        /// </summary>
        [Output("mfaPrompt")]
        public Output<string?> MfaPrompt { get; private set; } = null!;

        /// <summary>
        /// Remember MFA device. Default: `false`
        /// </summary>
        [Output("mfaRememberDevice")]
        public Output<bool?> MfaRememberDevice { get; private set; } = null!;

        /// <summary>
        /// Require MFA. Default: `false`
        /// </summary>
        [Output("mfaRequired")]
        public Output<bool?> MfaRequired { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Output("policyId")]
        public Output<string?> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`,
        /// `PASSWORD_IDP`.
        /// </summary>
        [Output("primaryFactor")]
        public Output<string> PrimaryFactor { get; private set; } = null!;

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Output("riscLevel")]
        public Output<string?> RiscLevel { get; private set; } = null!;

        /// <summary>
        /// Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Output("riskLevel")]
        public Output<string?> RiskLevel { get; private set; } = null!;

        /// <summary>
        /// Max minutes a session can be idle. Default: `120`
        /// </summary>
        [Output("sessionIdle")]
        public Output<int?> SessionIdle { get; private set; } = null!;

        /// <summary>
        /// Max minutes a session is active: Disable = 0. Default: `120`
        /// </summary>
        [Output("sessionLifetime")]
        public Output<int?> SessionLifetime { get; private set; } = null!;

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
        /// cookies. Default: `false`
        /// </summary>
        [Output("sessionPersistent")]
        public Output<bool?> SessionPersistent { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;


        /// <summary>
        /// Create a RuleSignon resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleSignon(string name, RuleSignonArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleSignon:RuleSignon", name, args ?? new RuleSignonArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleSignon(string name, Input<string> id, RuleSignonState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleSignon:RuleSignon", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleSignon resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleSignon Get(string name, Input<string> id, RuleSignonState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleSignon(name, id, state, options);
        }
    }

    public sealed class RuleSignonArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
        /// </summary>
        [Input("authtype")]
        public Input<string>? Authtype { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// List of behavior IDs
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        [Input("factorSequences")]
        private InputList<Inputs.RuleSignonFactorSequenceArgs>? _factorSequences;

        /// <summary>
        /// Auth factor sequences. Should be set if 'access = "CHALLENGE"'. - 'primary_criteria_provider' - (Required) Primary
        /// provider of the auth section. - 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section. -
        /// 'secondary_criteria' - (Optional) Additional authentication steps. - 'provider' - (Required) Provider of the additional
        /// authentication step. - 'factor_type' - (Required) Factor type of the additional authentication step.
        /// </summary>
        public InputList<Inputs.RuleSignonFactorSequenceArgs> FactorSequences
        {
            get => _factorSequences ?? (_factorSequences = new InputList<Inputs.RuleSignonFactorSequenceArgs>());
            set => _factorSequences = value;
        }

        /// <summary>
        /// Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. &gt; **WARNING**: Use of
        /// `identity_provider` requires a feature flag to be enabled.
        /// </summary>
        [Input("identityProvider")]
        public Input<string>? IdentityProvider { get; set; }

        [Input("identityProviderIds")]
        private InputList<string>? _identityProviderIds;

        /// <summary>
        /// When identity_provider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
        /// </summary>
        public InputList<string> IdentityProviderIds
        {
            get => _identityProviderIds ?? (_identityProviderIds = new InputList<string>());
            set => _identityProviderIds = value;
        }

        /// <summary>
        /// Elapsed time before the next MFA challenge
        /// </summary>
        [Input("mfaLifetime")]
        public Input<int>? MfaLifetime { get; set; }

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION`
        /// or`ALWAYS`.
        /// </summary>
        [Input("mfaPrompt")]
        public Input<string>? MfaPrompt { get; set; }

        /// <summary>
        /// Remember MFA device. Default: `false`
        /// </summary>
        [Input("mfaRememberDevice")]
        public Input<bool>? MfaRememberDevice { get; set; }

        /// <summary>
        /// Require MFA. Default: `false`
        /// </summary>
        [Input("mfaRequired")]
        public Input<bool>? MfaRequired { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`,
        /// `PASSWORD_IDP`.
        /// </summary>
        [Input("primaryFactor")]
        public Input<string>? PrimaryFactor { get; set; }

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Input("riscLevel")]
        public Input<string>? RiscLevel { get; set; }

        /// <summary>
        /// Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Input("riskLevel")]
        public Input<string>? RiskLevel { get; set; }

        /// <summary>
        /// Max minutes a session can be idle. Default: `120`
        /// </summary>
        [Input("sessionIdle")]
        public Input<int>? SessionIdle { get; set; }

        /// <summary>
        /// Max minutes a session is active: Disable = 0. Default: `120`
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
        /// cookies. Default: `false`
        /// </summary>
        [Input("sessionPersistent")]
        public Input<bool>? SessionPersistent { get; set; }

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleSignonArgs()
        {
        }
        public static new RuleSignonArgs Empty => new RuleSignonArgs();
    }

    public sealed class RuleSignonState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
        /// </summary>
        [Input("authtype")]
        public Input<string>? Authtype { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// List of behavior IDs
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        [Input("factorSequences")]
        private InputList<Inputs.RuleSignonFactorSequenceGetArgs>? _factorSequences;

        /// <summary>
        /// Auth factor sequences. Should be set if 'access = "CHALLENGE"'. - 'primary_criteria_provider' - (Required) Primary
        /// provider of the auth section. - 'primary_criteria_factor_type' - (Required) Primary factor type of the auth section. -
        /// 'secondary_criteria' - (Optional) Additional authentication steps. - 'provider' - (Required) Provider of the additional
        /// authentication step. - 'factor_type' - (Required) Factor type of the additional authentication step.
        /// </summary>
        public InputList<Inputs.RuleSignonFactorSequenceGetArgs> FactorSequences
        {
            get => _factorSequences ?? (_factorSequences = new InputList<Inputs.RuleSignonFactorSequenceGetArgs>());
            set => _factorSequences = value;
        }

        /// <summary>
        /// Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. &gt; **WARNING**: Use of
        /// `identity_provider` requires a feature flag to be enabled.
        /// </summary>
        [Input("identityProvider")]
        public Input<string>? IdentityProvider { get; set; }

        [Input("identityProviderIds")]
        private InputList<string>? _identityProviderIds;

        /// <summary>
        /// When identity_provider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
        /// </summary>
        public InputList<string> IdentityProviderIds
        {
            get => _identityProviderIds ?? (_identityProviderIds = new InputList<string>());
            set => _identityProviderIds = value;
        }

        /// <summary>
        /// Elapsed time before the next MFA challenge
        /// </summary>
        [Input("mfaLifetime")]
        public Input<int>? MfaLifetime { get; set; }

        /// <summary>
        /// Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION`
        /// or`ALWAYS`.
        /// </summary>
        [Input("mfaPrompt")]
        public Input<string>? MfaPrompt { get; set; }

        /// <summary>
        /// Remember MFA device. Default: `false`
        /// </summary>
        [Input("mfaRememberDevice")]
        public Input<bool>? MfaRememberDevice { get; set; }

        /// <summary>
        /// Require MFA. Default: `false`
        /// </summary>
        [Input("mfaRequired")]
        public Input<bool>? MfaRequired { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Rule's primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`,
        /// `PASSWORD_IDP`.
        /// </summary>
        [Input("primaryFactor")]
        public Input<string>? PrimaryFactor { get; set; }

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Input("riscLevel")]
        public Input<string>? RiscLevel { get; set; }

        /// <summary>
        /// Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
        /// </summary>
        [Input("riskLevel")]
        public Input<string>? RiskLevel { get; set; }

        /// <summary>
        /// Max minutes a session can be idle. Default: `120`
        /// </summary>
        [Input("sessionIdle")]
        public Input<int>? SessionIdle { get; set; }

        /// <summary>
        /// Max minutes a session is active: Disable = 0. Default: `120`
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session
        /// cookies. Default: `false`
        /// </summary>
        [Input("sessionPersistent")]
        public Input<bool>? SessionPersistent { get; set; }

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleSignonState()
        {
        }
        public static new RuleSignonState Empty => new RuleSignonState();
    }
}
