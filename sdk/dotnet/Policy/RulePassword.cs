// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Creates a Password Policy Rule.
    /// 
    /// This resource allows you to create and configure a Password Policy Rule.
    /// 
    /// ## Import
    /// 
    /// A Policy Rule can be imported via the Policy and Rule ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/rulePassword:RulePassword example &amp;#60;policy id&amp;#62;/&amp;#60;rule id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/rulePassword:RulePassword")]
    public partial class RulePassword : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Policy Rule Name. Type `"string"`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`. Type `"string"`
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`. Type `"list(string)"`
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`. Type `"list(string)"`
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// Allow or deny a user to change their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Output("passwordChange")]
        public Output<string?> PasswordChange { get; private set; } = null!;

        /// <summary>
        /// Allow or deny a user to reset their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Output("passwordReset")]
        public Output<string?> PasswordReset { get; private set; } = null!;

        /// <summary>
        /// Allow or deny a user to unlock: `"ALLOW"` or `"DENY"`. By default, it is `"DENY"`, Type `"string"`
        /// </summary>
        [Output("passwordUnlock")]
        public Output<string?> PasswordUnlock { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyId")]
        public Output<string?> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there. Type `"number"`
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`. Type `"string"`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The users to exclude. Type `"set(string)"`
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;


        /// <summary>
        /// Create a RulePassword resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RulePassword(string name, RulePasswordArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/rulePassword:RulePassword", name, args ?? new RulePasswordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RulePassword(string name, Input<string> id, RulePasswordState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/rulePassword:RulePassword", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RulePassword resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RulePassword Get(string name, Input<string> id, RulePasswordState? state = null, CustomResourceOptions? options = null)
        {
            return new RulePassword(name, id, state, options);
        }
    }

    public sealed class RulePasswordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Rule Name. Type `"string"`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`. Type `"string"`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`. Type `"list(string)"`
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`. Type `"list(string)"`
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Allow or deny a user to change their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Input("passwordChange")]
        public Input<string>? PasswordChange { get; set; }

        /// <summary>
        /// Allow or deny a user to reset their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Input("passwordReset")]
        public Input<string>? PasswordReset { get; set; }

        /// <summary>
        /// Allow or deny a user to unlock: `"ALLOW"` or `"DENY"`. By default, it is `"DENY"`, Type `"string"`
        /// </summary>
        [Input("passwordUnlock")]
        public Input<string>? PasswordUnlock { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there. Type `"number"`
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`. Type `"string"`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The users to exclude. Type `"set(string)"`
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RulePasswordArgs()
        {
        }
        public static new RulePasswordArgs Empty => new RulePasswordArgs();
    }

    public sealed class RulePasswordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Rule Name. Type `"string"`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`. Type `"string"`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The network zones to exclude. Conflicts with `network_includes`. Type `"list(string)"`
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The network zones to include. Conflicts with `network_excludes`. Type `"list(string)"`
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Allow or deny a user to change their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Input("passwordChange")]
        public Input<string>? PasswordChange { get; set; }

        /// <summary>
        /// Allow or deny a user to reset their password: `"ALLOW"` or `"DENY"`. By default, it is `"ALLOW"`. Type `"string"`
        /// </summary>
        [Input("passwordReset")]
        public Input<string>? PasswordReset { get; set; }

        /// <summary>
        /// Allow or deny a user to unlock: `"ALLOW"` or `"DENY"`. By default, it is `"DENY"`, Type `"string"`
        /// </summary>
        [Input("passwordUnlock")]
        public Input<string>? PasswordUnlock { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there. Type `"number"`
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`. Type `"string"`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The users to exclude. Type `"set(string)"`
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RulePasswordState()
        {
        }
        public static new RulePasswordState Empty => new RulePasswordState();
    }
}
