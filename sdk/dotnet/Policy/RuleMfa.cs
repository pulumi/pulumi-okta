// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    /// <summary>
    /// Creates an MFA Policy Rule. This resource allows you to create and configure an MFA Policy Rule.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:policy/ruleMfa:RuleMfa example &lt;policy_id&gt;/&lt;rule_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:policy/ruleMfa:RuleMfa")]
    public partial class RuleMfa : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        [Output("appExcludes")]
        public Output<ImmutableArray<Outputs.RuleMfaAppExclude>> AppExcludes { get; private set; } = null!;

        /// <summary>
        /// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        [Output("appIncludes")]
        public Output<ImmutableArray<Outputs.RuleMfaAppInclude>> AppIncludes { get; private set; } = null!;

        /// <summary>
        /// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
        /// </summary>
        [Output("enroll")]
        public Output<string?> Enroll { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Output("policyId")]
        public Output<string?> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;


        /// <summary>
        /// Create a RuleMfa resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleMfa(string name, RuleMfaArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleMfa:RuleMfa", name, args ?? new RuleMfaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleMfa(string name, Input<string> id, RuleMfaState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/ruleMfa:RuleMfa", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleMfa resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleMfa Get(string name, Input<string> id, RuleMfaState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleMfa(name, id, state, options);
        }
    }

    public sealed class RuleMfaArgs : global::Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleMfaAppExcludeArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        public InputList<Inputs.RuleMfaAppExcludeArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleMfaAppExcludeArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleMfaAppIncludeArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        public InputList<Inputs.RuleMfaAppIncludeArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleMfaAppIncludeArgs>());
            set => _appIncludes = value;
        }

        /// <summary>
        /// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
        /// </summary>
        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleMfaArgs()
        {
        }
        public static new RuleMfaArgs Empty => new RuleMfaArgs();
    }

    public sealed class RuleMfaState : global::Pulumi.ResourceArgs
    {
        [Input("appExcludes")]
        private InputList<Inputs.RuleMfaAppExcludeGetArgs>? _appExcludes;

        /// <summary>
        /// Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        public InputList<Inputs.RuleMfaAppExcludeGetArgs> AppExcludes
        {
            get => _appExcludes ?? (_appExcludes = new InputList<Inputs.RuleMfaAppExcludeGetArgs>());
            set => _appExcludes = value;
        }

        [Input("appIncludes")]
        private InputList<Inputs.RuleMfaAppIncludeGetArgs>? _appIncludes;

        /// <summary>
        /// Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - 'id'
        /// - (Optional) Use if 'type' is 'APP' to indicate the application id to include. - 'name' - (Optional) Use if the 'type'
        /// is 'APP_TYPE' to indicate the type of application(s) to include in instances where an entire group (i.e. 'yahoo_mail')
        /// of applications should be included. - 'type' - (Required) One of: 'APP', 'APP_TYPE'
        /// </summary>
        public InputList<Inputs.RuleMfaAppIncludeGetArgs> AppIncludes
        {
            get => _appIncludes ?? (_appIncludes = new InputList<Inputs.RuleMfaAppIncludeGetArgs>());
            set => _appIncludes = value;
        }

        /// <summary>
        /// When a user should be prompted for MFA. It can be `CHALLENGE`, `LOGIN`, or `NEVER`.
        /// </summary>
        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// Required if `network_connection` = `ZONE`. Indicates the network zones to include.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        /// <summary>
        /// Policy ID of the Rule
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
        /// an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to Exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleMfaState()
        {
        }
        public static new RuleMfaState Empty => new RuleMfaState();
    }
}
