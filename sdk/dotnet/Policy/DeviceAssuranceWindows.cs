// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Policy
{
    [OktaResourceType("okta:policy/deviceAssuranceWindows:DeviceAssuranceWindows")]
    public partial class DeviceAssuranceWindows : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Created date
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// List of disk encryption type, can be ALL_INTERNAL_VOLUMES
        /// </summary>
        [Output("diskEncryptionTypes")]
        public Output<ImmutableArray<string>> DiskEncryptionTypes { get; private set; } = null!;

        /// <summary>
        /// Last update
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// Last updated by
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Output("osVersion")]
        public Output<string?> OsVersion { get; private set; } = null!;

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        [Output("screenlockTypes")]
        public Output<ImmutableArray<string>> ScreenlockTypes { get; private set; } = null!;

        /// <summary>
        /// Indicates if the device constains a secure hardware functionality
        /// </summary>
        [Output("secureHardwarePresent")]
        public Output<bool?> SecureHardwarePresent { get; private set; } = null!;

        /// <summary>
        /// Check to include third party signal provider
        /// </summary>
        [Output("thirdPartySignalProviders")]
        public Output<bool?> ThirdPartySignalProviders { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Output("tpspBrowserVersion")]
        public Output<string?> TpspBrowserVersion { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider builtin dns client enable
        /// </summary>
        [Output("tpspBuiltinDnsClientEnabled")]
        public Output<bool?> TpspBuiltinDnsClientEnabled { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Output("tpspChromeRemoteDesktopAppBlocked")]
        public Output<bool?> TpspChromeRemoteDesktopAppBlocked { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider crowdstrike agent id
        /// </summary>
        [Output("tpspCrowdStrikeAgentId")]
        public Output<string?> TpspCrowdStrikeAgentId { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider crowdstrike user id
        /// </summary>
        [Output("tpspCrowdStrikeCustomerId")]
        public Output<string?> TpspCrowdStrikeCustomerId { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Output("tpspDeviceEnrollmentDomain")]
        public Output<string?> TpspDeviceEnrollmentDomain { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Output("tpspDiskEncrypted")]
        public Output<bool?> TpspDiskEncrypted { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Output("tpspKeyTrustLevel")]
        public Output<string?> TpspKeyTrustLevel { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Output("tpspOsFirewall")]
        public Output<bool?> TpspOsFirewall { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Output("tpspOsVersion")]
        public Output<string?> TpspOsVersion { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Output("tpspPasswordProctectionWarningTrigger")]
        public Output<string?> TpspPasswordProctectionWarningTrigger { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Output("tpspRealtimeUrlCheckMode")]
        public Output<bool?> TpspRealtimeUrlCheckMode { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Output("tpspSafeBrowsingProtectionLevel")]
        public Output<string?> TpspSafeBrowsingProtectionLevel { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Output("tpspScreenLockSecured")]
        public Output<bool?> TpspScreenLockSecured { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider secure boot enabled
        /// </summary>
        [Output("tpspSecureBootEnabled")]
        public Output<bool?> TpspSecureBootEnabled { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Output("tpspSiteIsolationEnabled")]
        public Output<bool?> TpspSiteIsolationEnabled { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider third party blocking enabled
        /// </summary>
        [Output("tpspThirdPartyBlockingEnabled")]
        public Output<bool?> TpspThirdPartyBlockingEnabled { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider windows machine domain
        /// </summary>
        [Output("tpspWindowsMachineDomain")]
        public Output<string?> TpspWindowsMachineDomain { get; private set; } = null!;

        /// <summary>
        /// Third party signal provider windows user domain
        /// </summary>
        [Output("tpspWindowsUserDomain")]
        public Output<string?> TpspWindowsUserDomain { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceAssuranceWindows resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceAssuranceWindows(string name, DeviceAssuranceWindowsArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceWindows:DeviceAssuranceWindows", name, args ?? new DeviceAssuranceWindowsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceAssuranceWindows(string name, Input<string> id, DeviceAssuranceWindowsState? state = null, CustomResourceOptions? options = null)
            : base("okta:policy/deviceAssuranceWindows:DeviceAssuranceWindows", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceAssuranceWindows resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceAssuranceWindows Get(string name, Input<string> id, DeviceAssuranceWindowsState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceAssuranceWindows(name, id, state, options);
        }
    }

    public sealed class DeviceAssuranceWindowsArgs : global::Pulumi.ResourceArgs
    {
        [Input("diskEncryptionTypes")]
        private InputList<string>? _diskEncryptionTypes;

        /// <summary>
        /// List of disk encryption type, can be ALL_INTERNAL_VOLUMES
        /// </summary>
        public InputList<string> DiskEncryptionTypes
        {
            get => _diskEncryptionTypes ?? (_diskEncryptionTypes = new InputList<string>());
            set => _diskEncryptionTypes = value;
        }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        /// <summary>
        /// Indicates if the device constains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public Input<bool>? SecureHardwarePresent { get; set; }

        /// <summary>
        /// Check to include third party signal provider
        /// </summary>
        [Input("thirdPartySignalProviders")]
        public Input<bool>? ThirdPartySignalProviders { get; set; }

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Input("tpspBrowserVersion")]
        public Input<string>? TpspBrowserVersion { get; set; }

        /// <summary>
        /// Third party signal provider builtin dns client enable
        /// </summary>
        [Input("tpspBuiltinDnsClientEnabled")]
        public Input<bool>? TpspBuiltinDnsClientEnabled { get; set; }

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Input("tpspChromeRemoteDesktopAppBlocked")]
        public Input<bool>? TpspChromeRemoteDesktopAppBlocked { get; set; }

        /// <summary>
        /// Third party signal provider crowdstrike agent id
        /// </summary>
        [Input("tpspCrowdStrikeAgentId")]
        public Input<string>? TpspCrowdStrikeAgentId { get; set; }

        /// <summary>
        /// Third party signal provider crowdstrike user id
        /// </summary>
        [Input("tpspCrowdStrikeCustomerId")]
        public Input<string>? TpspCrowdStrikeCustomerId { get; set; }

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Input("tpspDeviceEnrollmentDomain")]
        public Input<string>? TpspDeviceEnrollmentDomain { get; set; }

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Input("tpspDiskEncrypted")]
        public Input<bool>? TpspDiskEncrypted { get; set; }

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Input("tpspKeyTrustLevel")]
        public Input<string>? TpspKeyTrustLevel { get; set; }

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Input("tpspOsFirewall")]
        public Input<bool>? TpspOsFirewall { get; set; }

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Input("tpspOsVersion")]
        public Input<string>? TpspOsVersion { get; set; }

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Input("tpspPasswordProctectionWarningTrigger")]
        public Input<string>? TpspPasswordProctectionWarningTrigger { get; set; }

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Input("tpspRealtimeUrlCheckMode")]
        public Input<bool>? TpspRealtimeUrlCheckMode { get; set; }

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Input("tpspSafeBrowsingProtectionLevel")]
        public Input<string>? TpspSafeBrowsingProtectionLevel { get; set; }

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Input("tpspScreenLockSecured")]
        public Input<bool>? TpspScreenLockSecured { get; set; }

        /// <summary>
        /// Third party signal provider secure boot enabled
        /// </summary>
        [Input("tpspSecureBootEnabled")]
        public Input<bool>? TpspSecureBootEnabled { get; set; }

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Input("tpspSiteIsolationEnabled")]
        public Input<bool>? TpspSiteIsolationEnabled { get; set; }

        /// <summary>
        /// Third party signal provider third party blocking enabled
        /// </summary>
        [Input("tpspThirdPartyBlockingEnabled")]
        public Input<bool>? TpspThirdPartyBlockingEnabled { get; set; }

        /// <summary>
        /// Third party signal provider windows machine domain
        /// </summary>
        [Input("tpspWindowsMachineDomain")]
        public Input<string>? TpspWindowsMachineDomain { get; set; }

        /// <summary>
        /// Third party signal provider windows user domain
        /// </summary>
        [Input("tpspWindowsUserDomain")]
        public Input<string>? TpspWindowsUserDomain { get; set; }

        public DeviceAssuranceWindowsArgs()
        {
        }
        public static new DeviceAssuranceWindowsArgs Empty => new DeviceAssuranceWindowsArgs();
    }

    public sealed class DeviceAssuranceWindowsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created by
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        [Input("diskEncryptionTypes")]
        private InputList<string>? _diskEncryptionTypes;

        /// <summary>
        /// List of disk encryption type, can be ALL_INTERNAL_VOLUMES
        /// </summary>
        public InputList<string> DiskEncryptionTypes
        {
            get => _diskEncryptionTypes ?? (_diskEncryptionTypes = new InputList<string>());
            set => _diskEncryptionTypes = value;
        }

        /// <summary>
        /// Last update
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// Last updated by
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// Policy device assurance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The device os minimum version
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        [Input("screenlockTypes")]
        private InputList<string>? _screenlockTypes;

        /// <summary>
        /// List of screenlock type, can be BIOMETRIC or BIOMETRIC, PASSCODE
        /// </summary>
        public InputList<string> ScreenlockTypes
        {
            get => _screenlockTypes ?? (_screenlockTypes = new InputList<string>());
            set => _screenlockTypes = value;
        }

        /// <summary>
        /// Indicates if the device constains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public Input<bool>? SecureHardwarePresent { get; set; }

        /// <summary>
        /// Check to include third party signal provider
        /// </summary>
        [Input("thirdPartySignalProviders")]
        public Input<bool>? ThirdPartySignalProviders { get; set; }

        /// <summary>
        /// Third party signal provider minimum browser version
        /// </summary>
        [Input("tpspBrowserVersion")]
        public Input<string>? TpspBrowserVersion { get; set; }

        /// <summary>
        /// Third party signal provider builtin dns client enable
        /// </summary>
        [Input("tpspBuiltinDnsClientEnabled")]
        public Input<bool>? TpspBuiltinDnsClientEnabled { get; set; }

        /// <summary>
        /// Third party signal provider chrome remote desktop app blocked
        /// </summary>
        [Input("tpspChromeRemoteDesktopAppBlocked")]
        public Input<bool>? TpspChromeRemoteDesktopAppBlocked { get; set; }

        /// <summary>
        /// Third party signal provider crowdstrike agent id
        /// </summary>
        [Input("tpspCrowdStrikeAgentId")]
        public Input<string>? TpspCrowdStrikeAgentId { get; set; }

        /// <summary>
        /// Third party signal provider crowdstrike user id
        /// </summary>
        [Input("tpspCrowdStrikeCustomerId")]
        public Input<string>? TpspCrowdStrikeCustomerId { get; set; }

        /// <summary>
        /// Third party signal provider device enrollment domain
        /// </summary>
        [Input("tpspDeviceEnrollmentDomain")]
        public Input<string>? TpspDeviceEnrollmentDomain { get; set; }

        /// <summary>
        /// Third party signal provider disk encrypted
        /// </summary>
        [Input("tpspDiskEncrypted")]
        public Input<bool>? TpspDiskEncrypted { get; set; }

        /// <summary>
        /// Third party signal provider key trust level
        /// </summary>
        [Input("tpspKeyTrustLevel")]
        public Input<string>? TpspKeyTrustLevel { get; set; }

        /// <summary>
        /// Third party signal provider os firewall
        /// </summary>
        [Input("tpspOsFirewall")]
        public Input<bool>? TpspOsFirewall { get; set; }

        /// <summary>
        /// Third party signal provider minimum os version
        /// </summary>
        [Input("tpspOsVersion")]
        public Input<string>? TpspOsVersion { get; set; }

        /// <summary>
        /// Third party signal provider password protection warning trigger
        /// </summary>
        [Input("tpspPasswordProctectionWarningTrigger")]
        public Input<string>? TpspPasswordProctectionWarningTrigger { get; set; }

        /// <summary>
        /// Third party signal provider realtime url check mode
        /// </summary>
        [Input("tpspRealtimeUrlCheckMode")]
        public Input<bool>? TpspRealtimeUrlCheckMode { get; set; }

        /// <summary>
        /// Third party signal provider safe browsing protection level
        /// </summary>
        [Input("tpspSafeBrowsingProtectionLevel")]
        public Input<string>? TpspSafeBrowsingProtectionLevel { get; set; }

        /// <summary>
        /// Third party signal provider screen lock secure
        /// </summary>
        [Input("tpspScreenLockSecured")]
        public Input<bool>? TpspScreenLockSecured { get; set; }

        /// <summary>
        /// Third party signal provider secure boot enabled
        /// </summary>
        [Input("tpspSecureBootEnabled")]
        public Input<bool>? TpspSecureBootEnabled { get; set; }

        /// <summary>
        /// Third party signal provider site isolation enabled
        /// </summary>
        [Input("tpspSiteIsolationEnabled")]
        public Input<bool>? TpspSiteIsolationEnabled { get; set; }

        /// <summary>
        /// Third party signal provider third party blocking enabled
        /// </summary>
        [Input("tpspThirdPartyBlockingEnabled")]
        public Input<bool>? TpspThirdPartyBlockingEnabled { get; set; }

        /// <summary>
        /// Third party signal provider windows machine domain
        /// </summary>
        [Input("tpspWindowsMachineDomain")]
        public Input<string>? TpspWindowsMachineDomain { get; set; }

        /// <summary>
        /// Third party signal provider windows user domain
        /// </summary>
        [Input("tpspWindowsUserDomain")]
        public Input<string>? TpspWindowsUserDomain { get; set; }

        public DeviceAssuranceWindowsState()
        {
        }
        public static new DeviceAssuranceWindowsState Empty => new DeviceAssuranceWindowsState();
    }
}
