// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages API scopes for OAuth applications.
    /// This resource allows you to grant or revoke API scopes for OAuth2 applications within your organization.
    /// Note: you have to create an application before using this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.AppOauthApiScope("example", new()
    ///     {
    ///         AppId = "&lt;application_id&gt;",
    ///         Issuer = "&lt;your org domain&gt;",
    ///         Scopes = new[]
    ///         {
    ///             "okta.users.read",
    ///             "okta.users.manage",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/appOauthApiScope:AppOauthApiScope example &amp;#60;app id&amp;#62
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/appOauthApiScope:AppOauthApiScope")]
    public partial class AppOauthApiScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the application.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The issuer of your Org Authorization Server, your Org URL.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// Scopes of the application for which consent is granted.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;


        /// <summary>
        /// Create a AppOauthApiScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppOauthApiScope(string name, AppOauthApiScopeArgs args, CustomResourceOptions? options = null)
            : base("okta:index/appOauthApiScope:AppOauthApiScope", name, args ?? new AppOauthApiScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppOauthApiScope(string name, Input<string> id, AppOauthApiScopeState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/appOauthApiScope:AppOauthApiScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppOauthApiScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppOauthApiScope Get(string name, Input<string> id, AppOauthApiScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new AppOauthApiScope(name, id, state, options);
        }
    }

    public sealed class AppOauthApiScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the application.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The issuer of your Org Authorization Server, your Org URL.
        /// </summary>
        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes of the application for which consent is granted.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public AppOauthApiScopeArgs()
        {
        }
        public static new AppOauthApiScopeArgs Empty => new AppOauthApiScopeArgs();
    }

    public sealed class AppOauthApiScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the application.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The issuer of your Org Authorization Server, your Org URL.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes of the application for which consent is granted.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public AppOauthApiScopeState()
        {
        }
        public static new AppOauthApiScopeState Empty => new AppOauthApiScopeState();
    }
}
