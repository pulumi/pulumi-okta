// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Creates an Okta SMS Template.
    /// 
    /// This resource allows you to create and configure an Okta SMS Template.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.TemplateSms("example", new()
    ///     {
    ///         Type = "SMS_VERIFY_CODE",
    ///         Template = "Your ${org.name} code is: ${code}",
    ///         Translations = new[]
    ///         {
    ///             new Okta.Inputs.TemplateSmsTranslationArgs
    ///             {
    ///                 Language = "en",
    ///                 Template = "Your ${org.name} code is: ${code}",
    ///             },
    ///             new Okta.Inputs.TemplateSmsTranslationArgs
    ///             {
    ///                 Language = "es",
    ///                 Template = "Tu c√≥digo de ${org.name} es: ${code}.",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// An Okta SMS Template can be imported via the template type.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/templateSms:TemplateSms example &amp;#60;template type&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/templateSms:TemplateSms")]
    public partial class TemplateSms : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The SMS message.
        /// </summary>
        [Output("template")]
        public Output<string> Template { get; private set; } = null!;

        /// <summary>
        /// Set of translations for a particular template.
        /// </summary>
        [Output("translations")]
        public Output<ImmutableArray<Outputs.TemplateSmsTranslation>> Translations { get; private set; } = null!;

        /// <summary>
        /// SMS template type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a TemplateSms resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TemplateSms(string name, TemplateSmsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/templateSms:TemplateSms", name, args ?? new TemplateSmsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TemplateSms(string name, Input<string> id, TemplateSmsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/templateSms:TemplateSms", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TemplateSms resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TemplateSms Get(string name, Input<string> id, TemplateSmsState? state = null, CustomResourceOptions? options = null)
        {
            return new TemplateSms(name, id, state, options);
        }
    }

    public sealed class TemplateSmsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The SMS message.
        /// </summary>
        [Input("template", required: true)]
        public Input<string> Template { get; set; } = null!;

        [Input("translations")]
        private InputList<Inputs.TemplateSmsTranslationArgs>? _translations;

        /// <summary>
        /// Set of translations for a particular template.
        /// </summary>
        public InputList<Inputs.TemplateSmsTranslationArgs> Translations
        {
            get => _translations ?? (_translations = new InputList<Inputs.TemplateSmsTranslationArgs>());
            set => _translations = value;
        }

        /// <summary>
        /// SMS template type
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TemplateSmsArgs()
        {
        }
        public static new TemplateSmsArgs Empty => new TemplateSmsArgs();
    }

    public sealed class TemplateSmsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The SMS message.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        [Input("translations")]
        private InputList<Inputs.TemplateSmsTranslationGetArgs>? _translations;

        /// <summary>
        /// Set of translations for a particular template.
        /// </summary>
        public InputList<Inputs.TemplateSmsTranslationGetArgs> Translations
        {
            get => _translations ?? (_translations = new InputList<Inputs.TemplateSmsTranslationGetArgs>());
            set => _translations = value;
        }

        /// <summary>
        /// SMS template type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TemplateSmsState()
        {
        }
        public static new TemplateSmsState Empty => new TemplateSmsState();
    }
}
