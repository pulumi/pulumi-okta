// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages email template settings
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.EmailTemplateSettings("example", new()
    ///     {
    ///         BrandId = "&lt;brand id&gt;",
    ///         TemplateName = "ForgotPassword",
    ///         Recipients = "ADMINS_ONLY",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/emailTemplateSettings:EmailTemplateSettings example &lt;brand_id&gt;/&lt;template_name&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/emailTemplateSettings:EmailTemplateSettings")]
    public partial class EmailTemplateSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the brand.
        /// </summary>
        [Output("brandId")]
        public Output<string> BrandId { get; private set; } = null!;

        /// <summary>
        /// The recipients the emails of this template will be sent to - Valid values: `ALL_USERS`, `ADMINS_ONLY`, `NO_USERS`
        /// </summary>
        [Output("recipients")]
        public Output<string> Recipients { get; private set; } = null!;

        /// <summary>
        /// Email template name - Example values: `AccountLockout`,`ADForgotPassword`,`ADForgotPasswordDenied`,`ADSelfServiceUnlock`,`ADUserActivation`,`AuthenticatorEnrolled`,`AuthenticatorReset`,`ChangeEmailConfirmation`,`EmailChallenge`,`EmailChangeConfirmation`,`EmailFactorVerification`,`ForgotPassword`,`ForgotPasswordDenied`,`IGAReviewerEndNotification`,`IGAReviewerNotification`,`IGAReviewerPendingNotification`,`IGAReviewerReassigned`,`LDAPForgotPassword`,`LDAPForgotPasswordDenied`,`LDAPSelfServiceUnlock`,`LDAPUserActivation`,`MyAccountChangeConfirmation`,`NewSignOnNotification`,`OktaVerifyActivation`,`PasswordChanged`,`PasswordResetByAdmin`,`PendingEmailChange`,`RegistrationActivation`,`RegistrationEmailVerification`,`SelfServiceUnlock`,`SelfServiceUnlockOnUnlockedAccount`,`UserActivation`
        /// </summary>
        [Output("templateName")]
        public Output<string> TemplateName { get; private set; } = null!;


        /// <summary>
        /// Create a EmailTemplateSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailTemplateSettings(string name, EmailTemplateSettingsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/emailTemplateSettings:EmailTemplateSettings", name, args ?? new EmailTemplateSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailTemplateSettings(string name, Input<string> id, EmailTemplateSettingsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/emailTemplateSettings:EmailTemplateSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailTemplateSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailTemplateSettings Get(string name, Input<string> id, EmailTemplateSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailTemplateSettings(name, id, state, options);
        }
    }

    public sealed class EmailTemplateSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the brand.
        /// </summary>
        [Input("brandId", required: true)]
        public Input<string> BrandId { get; set; } = null!;

        /// <summary>
        /// The recipients the emails of this template will be sent to - Valid values: `ALL_USERS`, `ADMINS_ONLY`, `NO_USERS`
        /// </summary>
        [Input("recipients", required: true)]
        public Input<string> Recipients { get; set; } = null!;

        /// <summary>
        /// Email template name - Example values: `AccountLockout`,`ADForgotPassword`,`ADForgotPasswordDenied`,`ADSelfServiceUnlock`,`ADUserActivation`,`AuthenticatorEnrolled`,`AuthenticatorReset`,`ChangeEmailConfirmation`,`EmailChallenge`,`EmailChangeConfirmation`,`EmailFactorVerification`,`ForgotPassword`,`ForgotPasswordDenied`,`IGAReviewerEndNotification`,`IGAReviewerNotification`,`IGAReviewerPendingNotification`,`IGAReviewerReassigned`,`LDAPForgotPassword`,`LDAPForgotPasswordDenied`,`LDAPSelfServiceUnlock`,`LDAPUserActivation`,`MyAccountChangeConfirmation`,`NewSignOnNotification`,`OktaVerifyActivation`,`PasswordChanged`,`PasswordResetByAdmin`,`PendingEmailChange`,`RegistrationActivation`,`RegistrationEmailVerification`,`SelfServiceUnlock`,`SelfServiceUnlockOnUnlockedAccount`,`UserActivation`
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public EmailTemplateSettingsArgs()
        {
        }
        public static new EmailTemplateSettingsArgs Empty => new EmailTemplateSettingsArgs();
    }

    public sealed class EmailTemplateSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the brand.
        /// </summary>
        [Input("brandId")]
        public Input<string>? BrandId { get; set; }

        /// <summary>
        /// The recipients the emails of this template will be sent to - Valid values: `ALL_USERS`, `ADMINS_ONLY`, `NO_USERS`
        /// </summary>
        [Input("recipients")]
        public Input<string>? Recipients { get; set; }

        /// <summary>
        /// Email template name - Example values: `AccountLockout`,`ADForgotPassword`,`ADForgotPasswordDenied`,`ADSelfServiceUnlock`,`ADUserActivation`,`AuthenticatorEnrolled`,`AuthenticatorReset`,`ChangeEmailConfirmation`,`EmailChallenge`,`EmailChangeConfirmation`,`EmailFactorVerification`,`ForgotPassword`,`ForgotPasswordDenied`,`IGAReviewerEndNotification`,`IGAReviewerNotification`,`IGAReviewerPendingNotification`,`IGAReviewerReassigned`,`LDAPForgotPassword`,`LDAPForgotPasswordDenied`,`LDAPSelfServiceUnlock`,`LDAPUserActivation`,`MyAccountChangeConfirmation`,`NewSignOnNotification`,`OktaVerifyActivation`,`PasswordChanged`,`PasswordResetByAdmin`,`PendingEmailChange`,`RegistrationActivation`,`RegistrationEmailVerification`,`SelfServiceUnlock`,`SelfServiceUnlockOnUnlockedAccount`,`UserActivation`
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public EmailTemplateSettingsState()
        {
        }
        public static new EmailTemplateSettingsState Empty => new EmailTemplateSettingsState();
    }
}
