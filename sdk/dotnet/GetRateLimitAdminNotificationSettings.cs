// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetRateLimitAdminNotificationSettings
    {
        /// <summary>
        /// Retrieves the currently configured Rate Limit Admin Notification Settings
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetRateLimitAdminNotificationSettings.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRateLimitAdminNotificationSettingsResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRateLimitAdminNotificationSettingsResult>("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieves the currently configured Rate Limit Admin Notification Settings
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetRateLimitAdminNotificationSettings.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRateLimitAdminNotificationSettingsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRateLimitAdminNotificationSettingsResult>("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieves the currently configured Rate Limit Admin Notification Settings
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetRateLimitAdminNotificationSettings.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRateLimitAdminNotificationSettingsResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRateLimitAdminNotificationSettingsResult>("okta:index/getRateLimitAdminNotificationSettings:getRateLimitAdminNotificationSettings", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetRateLimitAdminNotificationSettingsResult
    {
        /// <summary>
        /// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enables or disables admin notifications for rate limiting events.
        /// </summary>
        public readonly bool NotificationsEnabled;

        [OutputConstructor]
        private GetRateLimitAdminNotificationSettingsResult(
            string id,

            bool notificationsEnabled)
        {
            Id = id;
            NotificationsEnabled = notificationsEnabled;
        }
    }
}
