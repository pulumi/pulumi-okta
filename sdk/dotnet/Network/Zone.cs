// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Network
{
    /// <summary>
    /// Creates an Okta Network Zone.
    /// 
    /// This resource allows you to create and configure an Okta Network Zone.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Network.Zone("example", new()
    ///     {
    ///         Gateways = new[]
    ///         {
    ///             "1.2.3.4/24",
    ///             "2.3.4.5-2.3.4.15",
    ///         },
    ///         Proxies = new[]
    ///         {
    ///             "2.2.3.4/24",
    ///             "3.3.4.5-3.3.4.15",
    ///         },
    ///         Type = "IP",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dynamic Tor Blocker
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Network.Zone("example", new()
    ///     {
    ///         DynamicProxyType = "TorAnonymizer",
    ///         Type = "DYNAMIC",
    ///         Usage = "BLOCKLIST",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Okta Network Zone can be imported via the Okta ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:network/zone:Zone example &amp;#60;zone id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:network/zone:Zone")]
    public partial class Zone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
        /// </summary>
        [Output("asns")]
        public Output<ImmutableArray<string>> Asns { get; private set; } = null!;

        /// <summary>
        /// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        /// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
        /// </summary>
        [Output("dynamicLocations")]
        public Output<ImmutableArray<string>> DynamicLocations { get; private set; } = null!;

        /// <summary>
        /// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
        /// </summary>
        [Output("dynamicProxyType")]
        public Output<string?> DynamicProxyType { get; private set; } = null!;

        /// <summary>
        /// Array of values in CIDR/range form.
        /// </summary>
        [Output("gateways")]
        public Output<ImmutableArray<string>> Gateways { get; private set; } = null!;

        /// <summary>
        /// Name of the Network Zone Resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
        /// </summary>
        [Output("proxies")]
        public Output<ImmutableArray<string>> Proxies { get; private set; } = null!;

        /// <summary>
        /// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
        /// </summary>
        [Output("usage")]
        public Output<string?> Usage { get; private set; } = null!;


        /// <summary>
        /// Create a Zone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zone(string name, ZoneArgs args, CustomResourceOptions? options = null)
            : base("okta:network/zone:Zone", name, args ?? new ZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Zone(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
            : base("okta:network/zone:Zone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zone Get(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new Zone(name, id, state, options);
        }
    }

    public sealed class ZoneArgs : global::Pulumi.ResourceArgs
    {
        [Input("asns")]
        private InputList<string>? _asns;

        /// <summary>
        /// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
        /// </summary>
        public InputList<string> Asns
        {
            get => _asns ?? (_asns = new InputList<string>());
            set => _asns = value;
        }

        [Input("dynamicLocations")]
        private InputList<string>? _dynamicLocations;

        /// <summary>
        /// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        /// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
        /// </summary>
        public InputList<string> DynamicLocations
        {
            get => _dynamicLocations ?? (_dynamicLocations = new InputList<string>());
            set => _dynamicLocations = value;
        }

        /// <summary>
        /// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
        /// </summary>
        [Input("dynamicProxyType")]
        public Input<string>? DynamicProxyType { get; set; }

        [Input("gateways")]
        private InputList<string>? _gateways;

        /// <summary>
        /// Array of values in CIDR/range form.
        /// </summary>
        public InputList<string> Gateways
        {
            get => _gateways ?? (_gateways = new InputList<string>());
            set => _gateways = value;
        }

        /// <summary>
        /// Name of the Network Zone Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proxies")]
        private InputList<string>? _proxies;

        /// <summary>
        /// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
        /// </summary>
        public InputList<string> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<string>());
            set => _proxies = value;
        }

        /// <summary>
        /// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public ZoneArgs()
        {
        }
        public static new ZoneArgs Empty => new ZoneArgs();
    }

    public sealed class ZoneState : global::Pulumi.ResourceArgs
    {
        [Input("asns")]
        private InputList<string>? _asns;

        /// <summary>
        /// Array of Autonomous System Numbers (each element is a string representation of an ASN numeric value).
        /// </summary>
        public InputList<string> Asns
        {
            get => _asns ?? (_asns = new InputList<string>());
            set => _asns = value;
        }

        [Input("dynamicLocations")]
        private InputList<string>? _dynamicLocations;

        /// <summary>
        /// Array of locations [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        /// and [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). Format code: countryCode OR countryCode-regionCode.
        /// </summary>
        public InputList<string> DynamicLocations
        {
            get => _dynamicLocations ?? (_dynamicLocations = new InputList<string>());
            set => _dynamicLocations = value;
        }

        /// <summary>
        /// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`.
        /// </summary>
        [Input("dynamicProxyType")]
        public Input<string>? DynamicProxyType { get; set; }

        [Input("gateways")]
        private InputList<string>? _gateways;

        /// <summary>
        /// Array of values in CIDR/range form.
        /// </summary>
        public InputList<string> Gateways
        {
            get => _gateways ?? (_gateways = new InputList<string>());
            set => _gateways = value;
        }

        /// <summary>
        /// Name of the Network Zone Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proxies")]
        private InputList<string>? _proxies;

        /// <summary>
        /// Array of values in CIDR/range form. Can not be set if `usage` is set to `"BLOCKLIST"`.
        /// </summary>
        public InputList<string> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<string>());
            set => _proxies = value;
        }

        /// <summary>
        /// Type of the Network Zone - can either be `"IP"` or `"DYNAMIC"` only.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Usage of the Network Zone - can be either `"POLICY"` or `"BLOCKLIST"`. By default, it is `"POLICY"`.
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public ZoneState()
        {
        }
        public static new ZoneState Empty => new ZoneState();
    }
}
