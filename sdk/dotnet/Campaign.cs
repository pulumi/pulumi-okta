// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages Campaign. This resource allows you to create and configure an Okta [Campaign](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Campaigns/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Campaign("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/campaign:Campaign example &lt;campaign_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/campaign:Campaign")]
    public partial class Campaign : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
        /// </summary>
        [Output("campaignTier")]
        public Output<string?> CampaignTier { get; private set; } = null!;

        /// <summary>
        /// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
        /// </summary>
        [Output("campaignType")]
        public Output<string> CampaignType { get; private set; } = null!;

        /// <summary>
        /// Human readable description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the campaign
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationSettings")]
        public Output<Outputs.CampaignNotificationSettings?> NotificationSettings { get; private set; } = null!;

        /// <summary>
        /// User scope specific settings
        /// </summary>
        [Output("principalScopeSettings")]
        public Output<Outputs.CampaignPrincipalScopeSettings?> PrincipalScopeSettings { get; private set; } = null!;

        /// <summary>
        /// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
        /// </summary>
        [Output("remediationSettings")]
        public Output<Outputs.CampaignRemediationSettings?> RemediationSettings { get; private set; } = null!;

        /// <summary>
        /// Resource specific properties.
        /// </summary>
        [Output("resourceSettings")]
        public Output<Outputs.CampaignResourceSettings?> ResourceSettings { get; private set; } = null!;

        /// <summary>
        /// Identifies the kind of reviewer for Access Certification.
        /// </summary>
        [Output("reviewerSettings")]
        public Output<Outputs.CampaignReviewerSettings?> ReviewerSettings { get; private set; } = null!;

        /// <summary>
        /// Scheduler specific settings.
        /// </summary>
        [Output("scheduleSettings")]
        public Output<Outputs.CampaignScheduleSettings?> ScheduleSettings { get; private set; } = null!;

        /// <summary>
        /// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
        /// </summary>
        [Output("skipRemediation")]
        public Output<bool?> SkipRemediation { get; private set; } = null!;


        /// <summary>
        /// Create a Campaign resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Campaign(string name, CampaignArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:index/campaign:Campaign", name, args ?? new CampaignArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Campaign(string name, Input<string> id, CampaignState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/campaign:Campaign", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Campaign resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Campaign Get(string name, Input<string> id, CampaignState? state = null, CustomResourceOptions? options = null)
        {
            return new Campaign(name, id, state, options);
        }
    }

    public sealed class CampaignArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
        /// </summary>
        [Input("campaignTier")]
        public Input<string>? CampaignTier { get; set; }

        /// <summary>
        /// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
        /// </summary>
        [Input("campaignType")]
        public Input<string>? CampaignType { get; set; }

        /// <summary>
        /// Human readable description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationSettings")]
        public Input<Inputs.CampaignNotificationSettingsArgs>? NotificationSettings { get; set; }

        /// <summary>
        /// User scope specific settings
        /// </summary>
        [Input("principalScopeSettings")]
        public Input<Inputs.CampaignPrincipalScopeSettingsArgs>? PrincipalScopeSettings { get; set; }

        /// <summary>
        /// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
        /// </summary>
        [Input("remediationSettings")]
        public Input<Inputs.CampaignRemediationSettingsArgs>? RemediationSettings { get; set; }

        /// <summary>
        /// Resource specific properties.
        /// </summary>
        [Input("resourceSettings")]
        public Input<Inputs.CampaignResourceSettingsArgs>? ResourceSettings { get; set; }

        /// <summary>
        /// Identifies the kind of reviewer for Access Certification.
        /// </summary>
        [Input("reviewerSettings")]
        public Input<Inputs.CampaignReviewerSettingsArgs>? ReviewerSettings { get; set; }

        /// <summary>
        /// Scheduler specific settings.
        /// </summary>
        [Input("scheduleSettings")]
        public Input<Inputs.CampaignScheduleSettingsArgs>? ScheduleSettings { get; set; }

        /// <summary>
        /// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
        /// </summary>
        [Input("skipRemediation")]
        public Input<bool>? SkipRemediation { get; set; }

        public CampaignArgs()
        {
        }
        public static new CampaignArgs Empty => new CampaignArgs();
    }

    public sealed class CampaignState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates the minimum required SKU to manage the campaign. Enum: "BASIC", "PREMIUM".
        /// </summary>
        [Input("campaignTier")]
        public Input<string>? CampaignTier { get; set; }

        /// <summary>
        /// Identifies if it is a resource campaign or a user campaign. By default, it is "RESOURCE". Enum: "RESOURCE", "USER".
        /// </summary>
        [Input("campaignType")]
        public Input<string>? CampaignType { get; set; }

        /// <summary>
        /// Human readable description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationSettings")]
        public Input<Inputs.CampaignNotificationSettingsGetArgs>? NotificationSettings { get; set; }

        /// <summary>
        /// User scope specific settings
        /// </summary>
        [Input("principalScopeSettings")]
        public Input<Inputs.CampaignPrincipalScopeSettingsGetArgs>? PrincipalScopeSettings { get; set; }

        /// <summary>
        /// Specify the action to be taken after a reviewer makes a decision to APPROVE or REVOKE the access, or if the campaign was CLOSED and there was no response from the reviewer.
        /// </summary>
        [Input("remediationSettings")]
        public Input<Inputs.CampaignRemediationSettingsGetArgs>? RemediationSettings { get; set; }

        /// <summary>
        /// Resource specific properties.
        /// </summary>
        [Input("resourceSettings")]
        public Input<Inputs.CampaignResourceSettingsGetArgs>? ResourceSettings { get; set; }

        /// <summary>
        /// Identifies the kind of reviewer for Access Certification.
        /// </summary>
        [Input("reviewerSettings")]
        public Input<Inputs.CampaignReviewerSettingsGetArgs>? ReviewerSettings { get; set; }

        /// <summary>
        /// Scheduler specific settings.
        /// </summary>
        [Input("scheduleSettings")]
        public Input<Inputs.CampaignScheduleSettingsGetArgs>? ScheduleSettings { get; set; }

        /// <summary>
        /// If true, skip remediation when ending the campaign (only applicable if remediationSetting.noResponse=DENY).
        /// </summary>
        [Input("skipRemediation")]
        public Input<bool>? SkipRemediation { get; set; }

        public CampaignState()
        {
        }
        public static new CampaignState Empty => new CampaignState();
    }
}
