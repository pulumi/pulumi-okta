// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **DEPRECATED** use `okta.EmailDomain` instead.
    /// 
    /// This resource allows you to create and configure a custom email sender.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.EmailSender("example", new()
    ///     {
    ///         FromName = "Paul Atreides",
    ///         FromAddress = "no-reply@caladan.planet",
    ///         Subdomain = "mail",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Custom email sender can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/emailSender:EmailSender example &amp;#60;sender id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/emailSender:EmailSender")]
    public partial class EmailSender : global::Pulumi.CustomResource
    {
        /// <summary>
        /// TXT and CNAME records to be registered for the domain.
        /// </summary>
        [Output("dnsRecords")]
        public Output<ImmutableArray<Outputs.EmailSenderDnsRecord>> DnsRecords { get; private set; } = null!;

        /// <summary>
        /// Email address to send from.
        /// </summary>
        [Output("fromAddress")]
        public Output<string> FromAddress { get; private set; } = null!;

        /// <summary>
        /// Name of sender.
        /// </summary>
        [Output("fromName")]
        public Output<string> FromName { get; private set; } = null!;

        /// <summary>
        /// Status of the sender (shows whether the sender is verified).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;


        /// <summary>
        /// Create a EmailSender resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailSender(string name, EmailSenderArgs args, CustomResourceOptions? options = null)
            : base("okta:index/emailSender:EmailSender", name, args ?? new EmailSenderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailSender(string name, Input<string> id, EmailSenderState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/emailSender:EmailSender", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailSender resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailSender Get(string name, Input<string> id, EmailSenderState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailSender(name, id, state, options);
        }
    }

    public sealed class EmailSenderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email address to send from.
        /// </summary>
        [Input("fromAddress", required: true)]
        public Input<string> FromAddress { get; set; } = null!;

        /// <summary>
        /// Name of sender.
        /// </summary>
        [Input("fromName", required: true)]
        public Input<string> FromName { get; set; } = null!;

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Input("subdomain", required: true)]
        public Input<string> Subdomain { get; set; } = null!;

        public EmailSenderArgs()
        {
        }
        public static new EmailSenderArgs Empty => new EmailSenderArgs();
    }

    public sealed class EmailSenderState : global::Pulumi.ResourceArgs
    {
        [Input("dnsRecords")]
        private InputList<Inputs.EmailSenderDnsRecordGetArgs>? _dnsRecords;

        /// <summary>
        /// TXT and CNAME records to be registered for the domain.
        /// </summary>
        public InputList<Inputs.EmailSenderDnsRecordGetArgs> DnsRecords
        {
            get => _dnsRecords ?? (_dnsRecords = new InputList<Inputs.EmailSenderDnsRecordGetArgs>());
            set => _dnsRecords = value;
        }

        /// <summary>
        /// Email address to send from.
        /// </summary>
        [Input("fromAddress")]
        public Input<string>? FromAddress { get; set; }

        /// <summary>
        /// Name of sender.
        /// </summary>
        [Input("fromName")]
        public Input<string>? FromName { get; set; }

        /// <summary>
        /// Status of the sender (shows whether the sender is verified).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public EmailSenderState()
        {
        }
        public static new EmailSenderState Empty => new EmailSenderState();
    }
}
