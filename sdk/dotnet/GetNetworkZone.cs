// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetNetworkZone
    {
        /// <summary>
        /// Gets Okta Network Zone.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetNetworkZone.Invoke(new()
        ///     {
        ///         Name = "Block Antarctica",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkZoneResult> InvokeAsync(GetNetworkZoneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkZoneResult>("okta:index/getNetworkZone:getNetworkZone", args ?? new GetNetworkZoneArgs(), options.WithDefaults());

        /// <summary>
        /// Gets Okta Network Zone.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetNetworkZone.Invoke(new()
        ///     {
        ///         Name = "Block Antarctica",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkZoneResult> Invoke(GetNetworkZoneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkZoneResult>("okta:index/getNetworkZone:getNetworkZone", args ?? new GetNetworkZoneInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets Okta Network Zone.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetNetworkZone.Invoke(new()
        ///     {
        ///         Name = "Block Antarctica",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkZoneResult> Invoke(GetNetworkZoneInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkZoneResult>("okta:index/getNetworkZone:getNetworkZone", args ?? new GetNetworkZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkZoneArgs : global::Pulumi.InvokeArgs
    {
        [Input("dynamicLocationsExcludes")]
        private List<string>? _dynamicLocationsExcludes;

        /// <summary>
        /// Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
        /// </summary>
        public List<string> DynamicLocationsExcludes
        {
            get => _dynamicLocationsExcludes ?? (_dynamicLocationsExcludes = new List<string>());
            set => _dynamicLocationsExcludes = value;
        }

        /// <summary>
        /// ID of the network zone to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("ipServiceCategoriesExcludes")]
        private List<string>? _ipServiceCategoriesExcludes;

        /// <summary>
        /// List of ip service excluded. Use with type `DYNAMIC_V2`
        /// </summary>
        public List<string> IpServiceCategoriesExcludes
        {
            get => _ipServiceCategoriesExcludes ?? (_ipServiceCategoriesExcludes = new List<string>());
            set => _ipServiceCategoriesExcludes = value;
        }

        [Input("ipServiceCategoriesIncludes")]
        private List<string>? _ipServiceCategoriesIncludes;

        /// <summary>
        /// List of ip service included. Use with type `DYNAMIC_V2`
        /// </summary>
        public List<string> IpServiceCategoriesIncludes
        {
            get => _ipServiceCategoriesIncludes ?? (_ipServiceCategoriesIncludes = new List<string>());
            set => _ipServiceCategoriesIncludes = value;
        }

        /// <summary>
        /// Name of the network zone to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetNetworkZoneArgs()
        {
        }
        public static new GetNetworkZoneArgs Empty => new GetNetworkZoneArgs();
    }

    public sealed class GetNetworkZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dynamicLocationsExcludes")]
        private InputList<string>? _dynamicLocationsExcludes;

        /// <summary>
        /// Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
        /// </summary>
        public InputList<string> DynamicLocationsExcludes
        {
            get => _dynamicLocationsExcludes ?? (_dynamicLocationsExcludes = new InputList<string>());
            set => _dynamicLocationsExcludes = value;
        }

        /// <summary>
        /// ID of the network zone to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("ipServiceCategoriesExcludes")]
        private InputList<string>? _ipServiceCategoriesExcludes;

        /// <summary>
        /// List of ip service excluded. Use with type `DYNAMIC_V2`
        /// </summary>
        public InputList<string> IpServiceCategoriesExcludes
        {
            get => _ipServiceCategoriesExcludes ?? (_ipServiceCategoriesExcludes = new InputList<string>());
            set => _ipServiceCategoriesExcludes = value;
        }

        [Input("ipServiceCategoriesIncludes")]
        private InputList<string>? _ipServiceCategoriesIncludes;

        /// <summary>
        /// List of ip service included. Use with type `DYNAMIC_V2`
        /// </summary>
        public InputList<string> IpServiceCategoriesIncludes
        {
            get => _ipServiceCategoriesIncludes ?? (_ipServiceCategoriesIncludes = new InputList<string>());
            set => _ipServiceCategoriesIncludes = value;
        }

        /// <summary>
        /// Name of the network zone to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetNetworkZoneInvokeArgs()
        {
        }
        public static new GetNetworkZoneInvokeArgs Empty => new GetNetworkZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkZoneResult
    {
        /// <summary>
        /// List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
        /// </summary>
        public readonly ImmutableArray<string> Asns;
        /// <summary>
        /// Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
        /// </summary>
        public readonly ImmutableArray<string> DynamicLocations;
        /// <summary>
        /// Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
        /// </summary>
        public readonly ImmutableArray<string> DynamicLocationsExcludes;
        /// <summary>
        /// Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
        /// </summary>
        public readonly string DynamicProxyType;
        /// <summary>
        /// Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
        /// </summary>
        public readonly ImmutableArray<string> Gateways;
        /// <summary>
        /// ID of the network zone to retrieve, conflicts with `name`.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// List of ip service excluded. Use with type `DYNAMIC_V2`
        /// </summary>
        public readonly ImmutableArray<string> IpServiceCategoriesExcludes;
        /// <summary>
        /// List of ip service included. Use with type `DYNAMIC_V2`
        /// </summary>
        public readonly ImmutableArray<string> IpServiceCategoriesIncludes;
        /// <summary>
        /// Name of the network zone to retrieve, conflicts with `id`.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Array of values in CIDR/range form depending on the way it's been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
        /// </summary>
        public readonly ImmutableArray<string> Proxies;
        /// <summary>
        /// Network Status - can either be ACTIVE or INACTIVE only
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Zone's purpose: POLICY or BLOCKLIST
        /// </summary>
        public readonly string Usage;

        [OutputConstructor]
        private GetNetworkZoneResult(
            ImmutableArray<string> asns,

            ImmutableArray<string> dynamicLocations,

            ImmutableArray<string> dynamicLocationsExcludes,

            string dynamicProxyType,

            ImmutableArray<string> gateways,

            string? id,

            ImmutableArray<string> ipServiceCategoriesExcludes,

            ImmutableArray<string> ipServiceCategoriesIncludes,

            string? name,

            ImmutableArray<string> proxies,

            string status,

            string type,

            string usage)
        {
            Asns = asns;
            DynamicLocations = dynamicLocations;
            DynamicLocationsExcludes = dynamicLocationsExcludes;
            DynamicProxyType = dynamicProxyType;
            Gateways = gateways;
            Id = id;
            IpServiceCategoriesExcludes = ipServiceCategoriesExcludes;
            IpServiceCategoriesIncludes = ipServiceCategoriesIncludes;
            Name = name;
            Proxies = proxies;
            Status = status;
            Type = type;
            Usage = usage;
        }
    }
}
