// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Idp
{
    public static class GetSocial
    {
        /// <summary>
        /// Use this data source to retrieve a social IdP from Okta, namely `APPLE`, `FACEBOOK`, `LINKEDIN`, `MICROSOFT`, or  `GOOGLE`.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.Idp.GetSocial.InvokeAsync(new Okta.Idp.GetSocialArgs
        ///         {
        ///             Name = "My Facebook IdP",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSocialResult> InvokeAsync(GetSocialArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSocialResult>("okta:idp/getSocial:getSocial", args ?? new GetSocialArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a social IdP from Okta, namely `APPLE`, `FACEBOOK`, `LINKEDIN`, `MICROSOFT`, or  `GOOGLE`.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.Idp.GetSocial.InvokeAsync(new Okta.Idp.GetSocialArgs
        ///         {
        ///             Name = "My Facebook IdP",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSocialResult> Invoke(GetSocialInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSocialResult>("okta:idp/getSocial:getSocial", args ?? new GetSocialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSocialArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the social idp to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the social idp to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSocialArgs()
        {
        }
    }

    public sealed class GetSocialInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the social idp to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the social idp to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSocialInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSocialResult
    {
        /// <summary>
        /// Specifies the account linking action for an IdP user.
        /// </summary>
        public readonly string AccountLinkAction;
        /// <summary>
        /// Group memberships to determine link candidates.
        /// </summary>
        public readonly ImmutableArray<string> AccountLinkGroupIncludes;
        /// <summary>
        /// The method of making an authorization request.
        /// </summary>
        public readonly string AuthorizationBinding;
        /// <summary>
        /// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
        /// </summary>
        public readonly string AuthorizationUrl;
        /// <summary>
        /// Unique identifier issued by AS for the Okta IdP instance.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Client secret issued by AS for the Okta IdP instance.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// Action for a previously deprovisioned IdP user during authentication.
        /// </summary>
        public readonly string DeprovisionedAction;
        /// <summary>
        /// Provisioning action for IdP user's group memberships.
        /// </summary>
        public readonly string GroupsAction;
        /// <summary>
        /// List of Okta Group IDs.
        /// </summary>
        public readonly ImmutableArray<string> GroupsAssignments;
        /// <summary>
        /// IdP user profile attribute name for an array value that contains group memberships.
        /// </summary>
        public readonly string GroupsAttribute;
        /// <summary>
        /// Whitelist of Okta Group identifiers.
        /// </summary>
        public readonly ImmutableArray<string> GroupsFilters;
        public readonly string? Id;
        /// <summary>
        /// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
        /// </summary>
        public readonly string IssuerMode;
        /// <summary>
        /// Maximum allowable clock-skew when processing messages from the IdP.
        /// </summary>
        public readonly int MaxClockSkew;
        public readonly string? Name;
        /// <summary>
        /// Determines if the IdP should act as a source of truth for user profile attributes.
        /// </summary>
        public readonly bool ProfileMaster;
        /// <summary>
        /// The type of protocol to use.
        /// </summary>
        public readonly string ProtocolType;
        /// <summary>
        /// Provisioning action for an IdP user during authentication.
        /// </summary>
        public readonly string ProvisioningAction;
        /// <summary>
        /// The scopes of the IdP.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Status of the IdP.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Okta user profile attribute for matching transformed IdP username.
        /// </summary>
        public readonly string SubjectMatchAttribute;
        /// <summary>
        /// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username.
        /// </summary>
        public readonly string SubjectMatchType;
        /// <summary>
        /// Action for a previously suspended IdP user during authentication.
        /// </summary>
        public readonly string SuspendedAction;
        /// <summary>
        /// The method of making a token request.
        /// </summary>
        public readonly string TokenBinding;
        /// <summary>
        /// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
        /// </summary>
        public readonly string TokenUrl;
        /// <summary>
        /// The type of Social IdP.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Okta EL Expression to generate or transform a unique username for the IdP user.
        /// </summary>
        public readonly string UsernameTemplate;

        [OutputConstructor]
        private GetSocialResult(
            string accountLinkAction,

            ImmutableArray<string> accountLinkGroupIncludes,

            string authorizationBinding,

            string authorizationUrl,

            string clientId,

            string clientSecret,

            string deprovisionedAction,

            string groupsAction,

            ImmutableArray<string> groupsAssignments,

            string groupsAttribute,

            ImmutableArray<string> groupsFilters,

            string? id,

            string issuerMode,

            int maxClockSkew,

            string? name,

            bool profileMaster,

            string protocolType,

            string provisioningAction,

            ImmutableArray<string> scopes,

            string status,

            string subjectMatchAttribute,

            string subjectMatchType,

            string suspendedAction,

            string tokenBinding,

            string tokenUrl,

            string type,

            string usernameTemplate)
        {
            AccountLinkAction = accountLinkAction;
            AccountLinkGroupIncludes = accountLinkGroupIncludes;
            AuthorizationBinding = authorizationBinding;
            AuthorizationUrl = authorizationUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            DeprovisionedAction = deprovisionedAction;
            GroupsAction = groupsAction;
            GroupsAssignments = groupsAssignments;
            GroupsAttribute = groupsAttribute;
            GroupsFilters = groupsFilters;
            Id = id;
            IssuerMode = issuerMode;
            MaxClockSkew = maxClockSkew;
            Name = name;
            ProfileMaster = profileMaster;
            ProtocolType = protocolType;
            ProvisioningAction = provisioningAction;
            Scopes = scopes;
            Status = status;
            SubjectMatchAttribute = subjectMatchAttribute;
            SubjectMatchType = subjectMatchType;
            SuspendedAction = suspendedAction;
            TokenBinding = tokenBinding;
            TokenUrl = tokenUrl;
            Type = type;
            UsernameTemplate = usernameTemplate;
        }
    }
}
