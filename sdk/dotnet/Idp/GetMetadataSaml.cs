// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Idp
{
    public static class GetMetadataSaml
    {
        /// <summary>
        /// Use this data source to retrieve SAML IdP metadata from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.Idp.GetMetadataSaml.InvokeAsync(new Okta.Idp.GetMetadataSamlArgs
        ///         {
        ///             Id = "&lt;idp id&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetadataSamlResult> InvokeAsync(GetMetadataSamlArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMetadataSamlResult>("okta:idp/getMetadataSaml:getMetadataSaml", args ?? new GetMetadataSamlArgs(), options.WithVersion());
    }


    public sealed class GetMetadataSamlArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the IdP to retrieve metadata for.
        /// </summary>
        [Input("idpId")]
        public string? IdpId { get; set; }

        public GetMetadataSamlArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMetadataSamlResult
    {
        /// <summary>
        /// whether assertions are signed.
        /// </summary>
        public readonly bool AssertionsSigned;
        /// <summary>
        /// whether authn requests are signed.
        /// </summary>
        public readonly bool AuthnRequestSigned;
        /// <summary>
        /// SAML request encryption certificate.
        /// </summary>
        public readonly string EncryptionCertificate;
        /// <summary>
        /// Entity URL for instance `https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf`.
        /// </summary>
        public readonly string EntityId;
        /// <summary>
        /// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
        /// </summary>
        public readonly string HttpPostBinding;
        /// <summary>
        /// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
        /// </summary>
        public readonly string HttpRedirectBinding;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? IdpId;
        /// <summary>
        /// raw IdP metadata.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// SAML request signing certificate.
        /// </summary>
        public readonly string SigningCertificate;

        [OutputConstructor]
        private GetMetadataSamlResult(
            bool assertionsSigned,

            bool authnRequestSigned,

            string encryptionCertificate,

            string entityId,

            string httpPostBinding,

            string httpRedirectBinding,

            string id,

            string? idpId,

            string metadata,

            string signingCertificate)
        {
            AssertionsSigned = assertionsSigned;
            AuthnRequestSigned = authnRequestSigned;
            EncryptionCertificate = encryptionCertificate;
            EntityId = entityId;
            HttpPostBinding = httpPostBinding;
            HttpRedirectBinding = httpRedirectBinding;
            Id = id;
            IdpId = idpId;
            Metadata = metadata;
            SigningCertificate = signingCertificate;
        }
    }
}
