// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Idp
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example1 = new Okta.Idp.SamlKey("example_1", new()
    ///     {
    ///         X5cs = new[]
    ///         {
    ///             example.Certificate,
    ///         },
    ///     });
    /// 
    ///     var example2 = new Okta.Idp.SamlKey("example_2", new()
    ///     {
    ///         X5cs = new[]
    ///         {
    ///             @"MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p
    /// YTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxEDAOBgNVBAMM
    /// B2V4YW1wbGUxHDAaBgkqhkiG9w0BCQEWDWluZm9Ab2t0YS5jb20wHhcNMTUxMjE4MjIyMjMyWhcNMjUxMjE4MjIyMzMyWjCB
    /// jzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBE9r
    /// dGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRAwDgYDVQQDDAdleGFtcGxlMRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29t
    /// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtcnyvuVCrsFEKCwHDenS3Ocjed8eWDv3zLtD2K/iZfE8BMj2wpTf
    /// n6Ry8zCYey3mWlKdxIybnV9amrujGRnE0ab6Q16v9D6RlFQLOG6dwqoRKuZy33Uyg8PGdEudZjGbWuKCqqXEp+UKALJHV+k4
    /// wWeVH8g5d1n3KyR2TVajVJpCrPhLFmq1Il4G/IUnPe4MvjXqB6CpKkog1+ThWsItPRJPAM+RweFHXq7KfChXsYE7Mmfuly8s
    /// DQlvBmQyxZnFHVuiPfCvGHJjpvHy11YlHdOjfgqHRvZbmo30+y0X/oY/yV4YEJ00LL6eJWU4wi7ViY3HP6/VCdRjHoRdr5L/
    /// DwIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQCzzhOFkvyYLNFj2WDcq1YqD4sBy1iCia9QpRH3rjQvMKDwQDYWbi6EdOX0TQ/I
    /// YR7UWGj+2pXd6v0t33lYtoKocp/4lUvT3tfBnWZ5KnObi+J2uY2teUqoYkASN7F+GRPVOuMVoVgm05ss8tuMb2dLc9vsx93s
    /// Dt+XlMTv/2qi5VPwaDtqduKkzwW9lUfn4xIMkTiVvCpe0X2HneD2Bpuao3/U8Rk0uiPfq6TooWaoW3kjsmErhEAs9bA7xuqo
    /// 1KKY9CdHcFhkSsMhoeaZylZHtzbnoipUlQKSLMdJQiiYZQ0bYL83/Ta9fulr1EERICMFt3GUmtYaZZKHpWSfdJp9",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:idp/samlKey:SamlKey example &lt;key_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:idp/samlKey:SamlKey")]
    public partial class SamlKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Date the cert expires.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Key ID.
        /// </summary>
        [Output("kid")]
        public Output<string> Kid { get; private set; } = null!;

        /// <summary>
        /// Identifies the cryptographic algorithm family used with the key.
        /// </summary>
        [Output("kty")]
        public Output<string> Kty { get; private set; } = null!;

        /// <summary>
        /// Intended use of the public key.
        /// </summary>
        [Output("use")]
        public Output<string> Use { get; private set; } = null!;

        /// <summary>
        /// base64-encoded X.509 certificate chain with DER encoding
        /// </summary>
        [Output("x5cs")]
        public Output<ImmutableArray<string>> X5cs { get; private set; } = null!;

        /// <summary>
        /// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
        /// </summary>
        [Output("x5tS256")]
        public Output<string> X5tS256 { get; private set; } = null!;


        /// <summary>
        /// Create a SamlKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SamlKey(string name, SamlKeyArgs args, CustomResourceOptions? options = null)
            : base("okta:idp/samlKey:SamlKey", name, args ?? new SamlKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SamlKey(string name, Input<string> id, SamlKeyState? state = null, CustomResourceOptions? options = null)
            : base("okta:idp/samlKey:SamlKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SamlKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SamlKey Get(string name, Input<string> id, SamlKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new SamlKey(name, id, state, options);
        }
    }

    public sealed class SamlKeyArgs : global::Pulumi.ResourceArgs
    {
        [Input("x5cs", required: true)]
        private InputList<string>? _x5cs;

        /// <summary>
        /// base64-encoded X.509 certificate chain with DER encoding
        /// </summary>
        public InputList<string> X5cs
        {
            get => _x5cs ?? (_x5cs = new InputList<string>());
            set => _x5cs = value;
        }

        public SamlKeyArgs()
        {
        }
        public static new SamlKeyArgs Empty => new SamlKeyArgs();
    }

    public sealed class SamlKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Date the cert expires.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Key ID.
        /// </summary>
        [Input("kid")]
        public Input<string>? Kid { get; set; }

        /// <summary>
        /// Identifies the cryptographic algorithm family used with the key.
        /// </summary>
        [Input("kty")]
        public Input<string>? Kty { get; set; }

        /// <summary>
        /// Intended use of the public key.
        /// </summary>
        [Input("use")]
        public Input<string>? Use { get; set; }

        [Input("x5cs")]
        private InputList<string>? _x5cs;

        /// <summary>
        /// base64-encoded X.509 certificate chain with DER encoding
        /// </summary>
        public InputList<string> X5cs
        {
            get => _x5cs ?? (_x5cs = new InputList<string>());
            set => _x5cs = value;
        }

        /// <summary>
        /// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
        /// </summary>
        [Input("x5tS256")]
        public Input<string>? X5tS256 { get; set; }

        public SamlKeyState()
        {
        }
        public static new SamlKeyState Empty => new SamlKeyState();
    }
}
