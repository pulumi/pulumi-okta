// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Idp
{
    public static class GetOidc
    {
        /// <summary>
        /// Use this data source to retrieve a OIDC IdP from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Okta.Idp.GetOidc.InvokeAsync(new Okta.Idp.GetOidcArgs
        ///         {
        ///             Name = "Example Provider",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOidcResult> InvokeAsync(GetOidcArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOidcResult>("okta:idp/getOidc:getOidc", args ?? new GetOidcArgs(), options.WithVersion());
    }


    public sealed class GetOidcArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the idp to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the idp to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetOidcArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOidcResult
    {
        /// <summary>
        /// The method of making an authorization request.
        /// </summary>
        public readonly string AuthorizationBinding;
        /// <summary>
        /// IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
        /// </summary>
        public readonly string AuthorizationUrl;
        /// <summary>
        /// Unique identifier issued by AS for the Okta IdP instance.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Client secret issued by AS for the Okta IdP instance.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// id of idp.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
        /// </summary>
        public readonly string IssuerMode;
        /// <summary>
        /// URI that identifies the issuer.
        /// </summary>
        public readonly string IssuerUrl;
        /// <summary>
        /// The method of making a request for the OIDC JWKS.
        /// </summary>
        public readonly string JwksBinding;
        /// <summary>
        /// Endpoint where the keys signer publishes its keys in a JWK Set.
        /// </summary>
        public readonly string JwksUrl;
        /// <summary>
        /// Maximum allowable clock-skew when processing messages from the IdP.
        /// </summary>
        public readonly int MaxClockSkew;
        /// <summary>
        /// name of the idp.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The type of protocol to use.
        /// </summary>
        public readonly string ProtocolType;
        /// <summary>
        /// The scopes of the IdP.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// The method of making a token request.
        /// </summary>
        public readonly string TokenBinding;
        /// <summary>
        /// IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
        /// </summary>
        public readonly string TokenUrl;
        /// <summary>
        /// type of idp.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The method of making a user info request.
        /// </summary>
        public readonly string UserInfoBinding;
        /// <summary>
        /// Protected resource endpoint that returns claims about the authenticated user.
        /// </summary>
        public readonly string UserInfoUrl;

        [OutputConstructor]
        private GetOidcResult(
            string authorizationBinding,

            string authorizationUrl,

            string clientId,

            string clientSecret,

            string? id,

            string issuerMode,

            string issuerUrl,

            string jwksBinding,

            string jwksUrl,

            int maxClockSkew,

            string? name,

            string protocolType,

            ImmutableArray<string> scopes,

            string tokenBinding,

            string tokenUrl,

            string type,

            string userInfoBinding,

            string userInfoUrl)
        {
            AuthorizationBinding = authorizationBinding;
            AuthorizationUrl = authorizationUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Id = id;
            IssuerMode = issuerMode;
            IssuerUrl = issuerUrl;
            JwksBinding = jwksBinding;
            JwksUrl = jwksUrl;
            MaxClockSkew = maxClockSkew;
            Name = name;
            ProtocolType = protocolType;
            Scopes = scopes;
            TokenBinding = tokenBinding;
            TokenUrl = tokenUrl;
            Type = type;
            UserInfoBinding = userInfoBinding;
            UserInfoUrl = userInfoUrl;
        }
    }
}
