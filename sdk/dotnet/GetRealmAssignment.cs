// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetRealmAssignment
    {
        /// <summary>
        /// Get a realm assignment from Okta.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetRealmAssignmentResult> InvokeAsync(GetRealmAssignmentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRealmAssignmentResult>("okta:index/getRealmAssignment:getRealmAssignment", args ?? new GetRealmAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get a realm assignment from Okta.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetRealmAssignmentResult> Invoke(GetRealmAssignmentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRealmAssignmentResult>("okta:index/getRealmAssignment:getRealmAssignment", args ?? new GetRealmAssignmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a realm assignment from Okta.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetRealmAssignmentResult> Invoke(GetRealmAssignmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRealmAssignmentResult>("okta:index/getRealmAssignment:getRealmAssignment", args ?? new GetRealmAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRealmAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetRealmAssignmentArgs()
        {
        }
        public static new GetRealmAssignmentArgs Empty => new GetRealmAssignmentArgs();
    }

    public sealed class GetRealmAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetRealmAssignmentInvokeArgs()
        {
        }
        public static new GetRealmAssignmentInvokeArgs Empty => new GetRealmAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetRealmAssignmentResult
    {
        /// <summary>
        /// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or `user.profile.state.contains("example")`.
        /// </summary>
        public readonly string ConditionExpression;
        /// <summary>
        /// Realm Assignment ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the realm assignment is the default.
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The Priority of the Realm Assignment. The lower the number, the higher the priority.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The ID of the Profile Source.
        /// </summary>
        public readonly string ProfileSourceId;
        /// <summary>
        /// The ID of the Realm asscociated with the Realm Assignment.
        /// </summary>
        public readonly string RealmId;
        /// <summary>
        /// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetRealmAssignmentResult(
            string conditionExpression,

            string id,

            bool isDefault,

            string? name,

            int priority,

            string profileSourceId,

            string realmId,

            string status)
        {
            ConditionExpression = conditionExpression;
            Id = id;
            IsDefault = isDefault;
            Name = name;
            Priority = priority;
            ProfileSourceId = profileSourceId;
            RealmId = realmId;
            Status = status;
        }
    }
}
