// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages reassignment of review.
    /// 
    /// This resource allows you to reassign an already existing review.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.Review("test", new()
    ///     {
    ///         CampaignId = "icizigd86iM9sOcbN1d6",
    ///         ReviewerId = "00unli90kor62oF5Z1d7",
    ///         ReviewIds = new[]
    ///         {
    ///             "icrztblxbBFiVKepb1d6",
    ///         },
    ///         ReviewerLevel = "FIRST",
    ///         Note = "John Smith is on leave for this month. His manager Tim will be the reviewer instead.",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/review:Review example &lt;review_id?
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/review:Review")]
    public partial class Review : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the campaign.
        /// </summary>
        [Output("campaignId")]
        public Output<string> CampaignId { get; private set; } = null!;

        /// <summary>
        /// The ISO 8601 formatted date and time when the resource was created
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The id of user who created the resource.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The decision of the reviewer.
        /// </summary>
        [Output("decision")]
        public Output<string> Decision { get; private set; } = null!;

        /// <summary>
        /// The ISO 8601 formatted date and time when the object was last updated.
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The id of user who last updated the object.
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// A note to justify the reassignment decision for the specified review.
        /// </summary>
        [Output("note")]
        public Output<string> Note { get; private set; } = null!;

        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// A list of reviews (review id values) that are reassigned to the new reviewer.
        /// </summary>
        [Output("reviewIds")]
        public Output<ImmutableArray<string>> ReviewIds { get; private set; } = null!;

        /// <summary>
        /// The Okta user id of the new reviewer.
        /// </summary>
        [Output("reviewerId")]
        public Output<string> ReviewerId { get; private set; } = null!;

        /// <summary>
        /// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
        /// </summary>
        [Output("reviewerLevel")]
        public Output<string?> ReviewerLevel { get; private set; } = null!;

        /// <summary>
        /// The type of reviewer to which the review is assigned.
        /// </summary>
        [Output("reviewerType")]
        public Output<string> ReviewerType { get; private set; } = null!;


        /// <summary>
        /// Create a Review resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Review(string name, ReviewArgs args, CustomResourceOptions? options = null)
            : base("okta:index/review:Review", name, args ?? new ReviewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Review(string name, Input<string> id, ReviewState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/review:Review", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Review resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Review Get(string name, Input<string> id, ReviewState? state = null, CustomResourceOptions? options = null)
        {
            return new Review(name, id, state, options);
        }
    }

    public sealed class ReviewArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the campaign.
        /// </summary>
        [Input("campaignId", required: true)]
        public Input<string> CampaignId { get; set; } = null!;

        /// <summary>
        /// A note to justify the reassignment decision for the specified review.
        /// </summary>
        [Input("note", required: true)]
        public Input<string> Note { get; set; } = null!;

        [Input("reviewIds", required: true)]
        private InputList<string>? _reviewIds;

        /// <summary>
        /// A list of reviews (review id values) that are reassigned to the new reviewer.
        /// </summary>
        public InputList<string> ReviewIds
        {
            get => _reviewIds ?? (_reviewIds = new InputList<string>());
            set => _reviewIds = value;
        }

        /// <summary>
        /// The Okta user id of the new reviewer.
        /// </summary>
        [Input("reviewerId", required: true)]
        public Input<string> ReviewerId { get; set; } = null!;

        /// <summary>
        /// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
        /// </summary>
        [Input("reviewerLevel")]
        public Input<string>? ReviewerLevel { get; set; }

        public ReviewArgs()
        {
        }
        public static new ReviewArgs Empty => new ReviewArgs();
    }

    public sealed class ReviewState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the campaign.
        /// </summary>
        [Input("campaignId")]
        public Input<string>? CampaignId { get; set; }

        /// <summary>
        /// The ISO 8601 formatted date and time when the resource was created
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The id of user who created the resource.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The decision of the reviewer.
        /// </summary>
        [Input("decision")]
        public Input<string>? Decision { get; set; }

        /// <summary>
        /// The ISO 8601 formatted date and time when the object was last updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The id of user who last updated the object.
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// A note to justify the reassignment decision for the specified review.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("reviewIds")]
        private InputList<string>? _reviewIds;

        /// <summary>
        /// A list of reviews (review id values) that are reassigned to the new reviewer.
        /// </summary>
        public InputList<string> ReviewIds
        {
            get => _reviewIds ?? (_reviewIds = new InputList<string>());
            set => _reviewIds = value;
        }

        /// <summary>
        /// The Okta user id of the new reviewer.
        /// </summary>
        [Input("reviewerId")]
        public Input<string>? ReviewerId { get; set; }

        /// <summary>
        /// Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
        /// </summary>
        [Input("reviewerLevel")]
        public Input<string>? ReviewerLevel { get; set; }

        /// <summary>
        /// The type of reviewer to which the review is assigned.
        /// </summary>
        [Input("reviewerType")]
        public Input<string>? ReviewerType { get; set; }

        public ReviewState()
        {
        }
        public static new ReviewState Empty => new ReviewState();
    }
}
