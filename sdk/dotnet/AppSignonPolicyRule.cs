// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example &amp;#60;policy_id&amp;#62;/&amp;#60;rule_id&amp;#62
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/appSignonPolicyRule:AppSignonPolicyRule")]
    public partial class AppSignonPolicyRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
        /// </summary>
        [Output("constraints")]
        public Output<ImmutableArray<string>> Constraints { get; private set; } = null!;

        /// <summary>
        /// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Output("customExpression")]
        public Output<string?> CustomExpression { get; private set; } = null!;

        /// <summary>
        /// List of device assurance IDs to include
        /// </summary>
        [Output("deviceAssurancesIncludeds")]
        public Output<ImmutableArray<string>> DeviceAssurancesIncludeds { get; private set; } = null!;

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
        /// </summary>
        [Output("deviceIsManaged")]
        public Output<bool?> DeviceIsManaged { get; private set; } = null!;

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
        /// </summary>
        [Output("deviceIsRegistered")]
        public Output<bool?> DeviceIsRegistered { get; private set; } = null!;

        /// <summary>
        /// The number of factors required to satisfy this assurance level
        /// </summary>
        [Output("factorMode")]
        public Output<string?> FactorMode { get; private set; } = null!;

        /// <summary>
        /// List of group IDs to exclude
        /// </summary>
        [Output("groupsExcludeds")]
        public Output<ImmutableArray<string>> GroupsExcludeds { get; private set; } = null!;

        /// <summary>
        /// List of group IDs to include
        /// </summary>
        [Output("groupsIncludeds")]
        public Output<ImmutableArray<string>> GroupsIncludeds { get; private set; } = null!;

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
        /// </summary>
        [Output("inactivityPeriod")]
        public Output<string?> InactivityPeriod { get; private set; } = null!;

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// The zones to exclude
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// The zones to include
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        [Output("platformIncludes")]
        public Output<ImmutableArray<Outputs.AppSignonPolicyRulePlatformInclude>> PlatformIncludes { get; private set; } = null!;

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
        /// </summary>
        [Output("reAuthenticationFrequency")]
        public Output<string?> ReAuthenticationFrequency { get; private set; } = null!;

        /// <summary>
        /// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
        /// </summary>
        [Output("riskScore")]
        public Output<string> RiskScore { get; private set; } = null!;

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
        /// </summary>
        [Output("system")]
        public Output<bool> System { get; private set; } = null!;

        /// <summary>
        /// The Verification Method type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Set of User Type IDs to exclude
        /// </summary>
        [Output("userTypesExcludeds")]
        public Output<ImmutableArray<string>> UserTypesExcludeds { get; private set; } = null!;

        /// <summary>
        /// Set of User Type IDs to include
        /// </summary>
        [Output("userTypesIncludeds")]
        public Output<ImmutableArray<string>> UserTypesIncludeds { get; private set; } = null!;

        /// <summary>
        /// Set of User IDs to exclude
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;

        /// <summary>
        /// Set of User IDs to include
        /// </summary>
        [Output("usersIncludeds")]
        public Output<ImmutableArray<string>> UsersIncludeds { get; private set; } = null!;


        /// <summary>
        /// Create a AppSignonPolicyRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSignonPolicyRule(string name, AppSignonPolicyRuleArgs args, CustomResourceOptions? options = null)
            : base("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, args ?? new AppSignonPolicyRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSignonPolicyRule(string name, Input<string> id, AppSignonPolicyRuleState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSignonPolicyRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSignonPolicyRule Get(string name, Input<string> id, AppSignonPolicyRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSignonPolicyRule(name, id, state, options);
        }
    }

    public sealed class AppSignonPolicyRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        [Input("constraints")]
        private InputList<string>? _constraints;

        /// <summary>
        /// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
        /// </summary>
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        /// <summary>
        /// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Input("customExpression")]
        public Input<string>? CustomExpression { get; set; }

        [Input("deviceAssurancesIncludeds")]
        private InputList<string>? _deviceAssurancesIncludeds;

        /// <summary>
        /// List of device assurance IDs to include
        /// </summary>
        public InputList<string> DeviceAssurancesIncludeds
        {
            get => _deviceAssurancesIncludeds ?? (_deviceAssurancesIncludeds = new InputList<string>());
            set => _deviceAssurancesIncludeds = value;
        }

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
        /// </summary>
        [Input("deviceIsManaged")]
        public Input<bool>? DeviceIsManaged { get; set; }

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
        /// </summary>
        [Input("deviceIsRegistered")]
        public Input<bool>? DeviceIsRegistered { get; set; }

        /// <summary>
        /// The number of factors required to satisfy this assurance level
        /// </summary>
        [Input("factorMode")]
        public Input<string>? FactorMode { get; set; }

        [Input("groupsExcludeds")]
        private InputList<string>? _groupsExcludeds;

        /// <summary>
        /// List of group IDs to exclude
        /// </summary>
        public InputList<string> GroupsExcludeds
        {
            get => _groupsExcludeds ?? (_groupsExcludeds = new InputList<string>());
            set => _groupsExcludeds = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of group IDs to include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
        /// </summary>
        [Input("inactivityPeriod")]
        public Input<string>? InactivityPeriod { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The zones to exclude
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The zones to include
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs>? _platformIncludes;
        public InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
        /// </summary>
        [Input("reAuthenticationFrequency")]
        public Input<string>? ReAuthenticationFrequency { get; set; }

        /// <summary>
        /// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
        /// </summary>
        [Input("riskScore")]
        public Input<string>? RiskScore { get; set; }

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Verification Method type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userTypesExcludeds")]
        private InputList<string>? _userTypesExcludeds;

        /// <summary>
        /// Set of User Type IDs to exclude
        /// </summary>
        public InputList<string> UserTypesExcludeds
        {
            get => _userTypesExcludeds ?? (_userTypesExcludeds = new InputList<string>());
            set => _userTypesExcludeds = value;
        }

        [Input("userTypesIncludeds")]
        private InputList<string>? _userTypesIncludeds;

        /// <summary>
        /// Set of User Type IDs to include
        /// </summary>
        public InputList<string> UserTypesIncludeds
        {
            get => _userTypesIncludeds ?? (_userTypesIncludeds = new InputList<string>());
            set => _userTypesIncludeds = value;
        }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        [Input("usersIncludeds")]
        private InputList<string>? _usersIncludeds;

        /// <summary>
        /// Set of User IDs to include
        /// </summary>
        public InputList<string> UsersIncludeds
        {
            get => _usersIncludeds ?? (_usersIncludeds = new InputList<string>());
            set => _usersIncludeds = value;
        }

        public AppSignonPolicyRuleArgs()
        {
        }
        public static new AppSignonPolicyRuleArgs Empty => new AppSignonPolicyRuleArgs();
    }

    public sealed class AppSignonPolicyRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        [Input("constraints")]
        private InputList<string>? _constraints;

        /// <summary>
        /// An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class
        /// </summary>
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        /// <summary>
        /// This is an optional advanced setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Input("customExpression")]
        public Input<string>? CustomExpression { get; set; }

        [Input("deviceAssurancesIncludeds")]
        private InputList<string>? _deviceAssurancesIncludeds;

        /// <summary>
        /// List of device assurance IDs to include
        /// </summary>
        public InputList<string> DeviceAssurancesIncludeds
        {
            get => _deviceAssurancesIncludeds ?? (_deviceAssurancesIncludeds = new InputList<string>());
            set => _deviceAssurancesIncludeds = value;
        }

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management system. When managed is passed, registered must also be included and must be set to true.
        /// </summary>
        [Input("deviceIsManaged")]
        public Input<bool>? DeviceIsManaged { get; set; }

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta Verify that is installed on the device.
        /// </summary>
        [Input("deviceIsRegistered")]
        public Input<bool>? DeviceIsRegistered { get; set; }

        /// <summary>
        /// The number of factors required to satisfy this assurance level
        /// </summary>
        [Input("factorMode")]
        public Input<string>? FactorMode { get; set; }

        [Input("groupsExcludeds")]
        private InputList<string>? _groupsExcludeds;

        /// <summary>
        /// List of group IDs to exclude
        /// </summary>
        public InputList<string> GroupsExcludeds
        {
            get => _groupsExcludeds ?? (_groupsExcludeds = new InputList<string>());
            set => _groupsExcludeds = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of group IDs to include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals.
        /// </summary>
        [Input("inactivityPeriod")]
        public Input<string>? InactivityPeriod { get; set; }

        /// <summary>
        /// Policy Rule Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: ANYWHERE, ZONE, ON*NETWORK, or OFF*NETWORK.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// The zones to exclude
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// The zones to include
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs>? _platformIncludes;
        public InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. PT0S - Every sign-in attempt, PT43800H - Once per session
        /// </summary>
        [Input("reAuthenticationFrequency")]
        public Input<string>? ReAuthenticationFrequency { get; set; }

        /// <summary>
        /// The risk score specifies a particular level of risk to match on: ANY, LOW, MEDIUM, HIGH
        /// </summary>
        [Input("riskScore")]
        public Input<string>? RiskScore { get; set; }

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Often the `Catch-all Rule` this rule is the system (default) rule for its associated policy
        /// </summary>
        [Input("system")]
        public Input<bool>? System { get; set; }

        /// <summary>
        /// The Verification Method type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userTypesExcludeds")]
        private InputList<string>? _userTypesExcludeds;

        /// <summary>
        /// Set of User Type IDs to exclude
        /// </summary>
        public InputList<string> UserTypesExcludeds
        {
            get => _userTypesExcludeds ?? (_userTypesExcludeds = new InputList<string>());
            set => _userTypesExcludeds = value;
        }

        [Input("userTypesIncludeds")]
        private InputList<string>? _userTypesIncludeds;

        /// <summary>
        /// Set of User Type IDs to include
        /// </summary>
        public InputList<string> UserTypesIncludeds
        {
            get => _userTypesIncludeds ?? (_userTypesIncludeds = new InputList<string>());
            set => _userTypesIncludeds = value;
        }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// Set of User IDs to exclude
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        [Input("usersIncludeds")]
        private InputList<string>? _usersIncludeds;

        /// <summary>
        /// Set of User IDs to include
        /// </summary>
        public InputList<string> UsersIncludeds
        {
            get => _usersIncludeds ?? (_usersIncludeds = new InputList<string>());
            set => _usersIncludeds = value;
        }

        public AppSignonPolicyRuleState()
        {
        }
        public static new AppSignonPolicyRuleState Empty => new AppSignonPolicyRuleState();
    }
}
