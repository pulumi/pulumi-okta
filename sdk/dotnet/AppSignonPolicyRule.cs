// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 
    /// This resource allows you to create and configure a sign-on policy rule for the application.
    /// 
    /// A default or `Catch-all Rule` sign-on policy rule can be imported and managed as a custom rule.
    /// The only difference is that these fields are immutable and can not be managed: `network_connection`, `network_excludes`,
    /// `network_includes`, `platform_include`, `custom_expression`, `device_is_registered`, `device_is_managed`, `users_excluded`,
    /// `users_included`, `groups_excluded`, `groups_included`, `user_types_excluded` and `user_types_included`.
    /// 
    /// ## Example Usage
    /// 
    /// ### Rule with Constraints
    /// ### Example 1:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.AppSignonPolicyRule("test", new()
    ///     {
    ///         PolicyId = data.Okta_app_signon_policy.Test.Id,
    ///         Constraints = new[]
    ///         {
    ///             JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["knowledge"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["types"] = new[]
    ///                     {
    ///                         "password",
    ///                     },
    ///                 },
    ///             }),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// This will create an app sign-on policy rule with the following `THEN` block:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// ### Example 2:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.AppSignonPolicyRule("test", new()
    ///     {
    ///         PolicyId = data.Okta_app_signon_policy.Test.Id,
    ///         Constraints = new[]
    ///         {
    ///             JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["knowledge"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["reauthenticateIn"] = "PT2H",
    ///                     ["types"] = new[]
    ///                     {
    ///                         "password",
    ///                     },
    ///                 },
    ///                 ["possession"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["deviceBound"] = "REQUIRED",
    ///                     ["hardwareProtection"] = "REQUIRED",
    ///                 },
    ///             }),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// This will create an app sign-on policy rule with the following `THEN` block:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// 
    /// More examples can be
    /// found [here](https://developer.okta.com/docs/reference/api/policy/#verification-method-json-examples).
    /// ### Complex example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSaml = new Okta.App.Saml("testSaml", new()
    ///     {
    ///         Label = "testAcc_replace_with_uuid",
    ///         SsoUrl = "https://google.com",
    ///         Recipient = "https://here.com",
    ///         Destination = "https://its-about-the-journey.com",
    ///         Audience = "https://audience.com",
    ///         SubjectNameIdTemplate = user.UserName,
    ///         SubjectNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
    ///         ResponseSigned = true,
    ///         SignatureAlgorithm = "RSA_SHA256",
    ///         DigestAlgorithm = "SHA256",
    ///         HonorForceAuthn = false,
    ///         AuthnContextClassRef = "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
    ///         SingleLogoutIssuer = "https://dunshire.okta.com",
    ///         SingleLogoutUrl = "https://dunshire.okta.com/logout",
    ///         SingleLogoutCertificate = @"MIIFnDCCA4QCCQDBSLbiON2T1zANBgkqhkiG9w0BAQsFADCBjzELMAkGA1UEBhMCVVMxDjAMBgNV
    /// BAgMBU1haW5lMRAwDgYDVQQHDAdDYXJpYm91MRcwFQYDVQQKDA5Tbm93bWFrZXJzIEluYzEUMBIG
    /// A1UECwwLRW5naW5lZXJpbmcxDTALBgNVBAMMBFNub3cxIDAeBgkqhkiG9w0BCQEWEWVtYWlsQGV4
    /// YW1wbGUuY29tMB4XDTIwMTIwMzIyNDY0M1oXDTMwMTIwMTIyNDY0M1owgY8xCzAJBgNVBAYTAlVT
    /// MQ4wDAYDVQQIDAVNYWluZTEQMA4GA1UEBwwHQ2FyaWJvdTEXMBUGA1UECgwOU25vd21ha2VycyBJ
    /// bmMxFDASBgNVBAsMC0VuZ2luZWVyaW5nMQ0wCwYDVQQDDARTbm93MSAwHgYJKoZIhvcNAQkBFhFl
    /// bWFpbEBleGFtcGxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANMmWDjXPdoa
    /// PyzIENqeY9njLan2FqCbQPSestWUUcb6NhDsJVGSQ7XR+ozQA5TaJzbP7cAJUj8vCcbqMZsgOQAu
    /// O/pzYyQEKptLmrGvPn7xkJ1A1xLkp2NY18cpDTeUPueJUoidZ9EJwEuyUZIktzxNNU1pA1lGijiu
    /// 2XNxs9d9JR/hm3tCu9Im8qLVB4JtX80YUa6QtlRjWR/H8a373AYCOASdoB3c57fIPD8ATDNy2w/c
    /// fCVGiyKDMFB+GA/WTsZpOP3iohRp8ltAncSuzypcztb2iE+jijtTsiC9kUA2abAJqqpoCJubNShi
    /// Vff4822czpziS44MV2guC9wANi8u3Uyl5MKsU95j01jzadKRP5S+2f0K+n8n4UoV9fnqZFyuGAKd
    /// CJi9K6NlSAP+TgPe/JP9FOSuxQOHWJfmdLHdJD+evoKi9E55sr5lRFK0xU1Fj5Ld7zjC0pXPhtJf
    /// sgjEZzD433AsHnRzvRT1KSNCPkLYomznZo5n9rWYgCQ8HcytlQDTesmKE+s05E/VSWNtH84XdDrt
    /// ieXwfwhHfaABSu+WjZYxi9CXdFCSvXhsgufUcK4FbYAHl/ga/cJxZc52yFC7Pcq0u9O2BSCjYPdQ
    /// DAHs9dhT1RhwVLM8RmoAzgxyyzau0gxnAlgSBD9FMW6dXqIHIp8yAAg9cRXhYRTNAgMBAAEwDQYJ
    /// KoZIhvcNAQELBQADggIBADofEC1SvG8qa7pmKCjB/E9Sxhk3mvUO9Gq43xzwVb721Ng3VYf4vGU3
    /// wLUwJeLt0wggnj26NJweN5T3q9T8UMxZhHSWvttEU3+S1nArRB0beti716HSlOCDx4wTmBu/D1MG
    /// t/kZYFJw+zuzvAcbYct2pK69AQhD8xAIbQvqADJI7cCK3yRry+aWtppc58P81KYabUlCfFXfhJ9E
    /// P72ffN4jVHpX3lxxYh7FKAdiKbY2FYzjsc7RdgKI1R3iAAZUCGBTvezNzaetGzTUjjl/g1tcVYij
    /// ltH9ZOQBPlUMI88lxUxqgRTerpPmAJH00CACx4JFiZrweLM1trZyy06wNDQgLrqHr3EOagBF/O2h
    /// hfTehNdVr6iq3YhKWBo4/+RL0RCzHMh4u86VbDDnDn4Y6HzLuyIAtBFoikoKM6UHTOa0Pqv2bBr5
    /// wbkRkVUxl9yJJw/HmTCdfnsM9dTOJUKzEglnGF2184Gg+qJDZB6fSf0EAO1F6sTqiSswl+uHQZiy
    /// DaZzyU7Gg5seKOZ20zTRaX3Ihj9Zij/ORnrARE7eM/usKMECp+7syUwAUKxDCZkGiUdskmOhhBGL
    /// JtbyK3F2UvoJoLsm3pIcvMak9KwMjSTGJB47ABUP1+w+zGcNk0D5Co3IJ6QekiLfWJyQ+kKsWLKt
    /// zOYQQatrnBagM7MI2/T4
    /// ",
    ///         AttributeStatements = new[]
    ///         {
    ///             new Okta.App.Inputs.SamlAttributeStatementArgs
    ///             {
    ///                 Type = "GROUP",
    ///                 Name = "groups",
    ///                 FilterType = "REGEX",
    ///                 FilterValue = ".*",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testAppSignonPolicy = Okta.GetAppSignonPolicy.Invoke(new()
    ///     {
    ///         AppId = testSaml.Id,
    ///     });
    /// 
    ///     var testUser = new List&lt;Okta.User.User&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 5; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         testUser.Add(new Okta.User.User($"testUser-{range.Value}", new()
    ///         {
    ///             FirstName = "TestAcc",
    ///             LastName = "Smith",
    ///             Login = $"testAcc_{range.Value}@example.com",
    ///             Email = $"testAcc_{range.Value}@example.com",
    ///         }));
    ///     }
    ///     var @this = new List&lt;Okta.Group.Group&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 5; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         @this.Add(new Okta.Group.Group($"this-{range.Value}", new()
    ///         {
    ///             Description = $"testAcc_{range.Value}",
    ///         }));
    ///     }
    ///     var testUserType = new Okta.User.UserType("testUserType", new()
    ///     {
    ///         DisplayName = "Terraform Acceptance Test User Type Updated",
    ///         Description = "Terraform Acceptance Test User Type Updated",
    ///     });
    /// 
    ///     var testZone = new Okta.Network.Zone("testZone", new()
    ///     {
    ///         Type = "IP",
    ///         Gateways = new[]
    ///         {
    ///             "1.2.3.4/24",
    ///             "2.3.4.5-2.3.4.15",
    ///         },
    ///         Proxies = new[]
    ///         {
    ///             "2.2.3.4/24",
    ///             "3.3.4.5-3.3.4.15",
    ///         },
    ///     });
    /// 
    ///     var @default = Okta.User.GetUserType.Invoke(new()
    ///     {
    ///         Name = "user",
    ///     });
    /// 
    ///     var testAppSignonPolicyRule = new Okta.AppSignonPolicyRule("testAppSignonPolicyRule", new()
    ///     {
    ///         PolicyId = testAppSignonPolicy.Apply(getAppSignonPolicyResult =&gt; getAppSignonPolicyResult.Id),
    ///         Access = "ALLOW",
    ///         CustomExpression = "user.status == \"ACTIVE\"",
    ///         DeviceIsManaged = false,
    ///         DeviceIsRegistered = true,
    ///         FactorMode = "2FA",
    ///         GroupsExcludeds = new[]
    ///         {
    ///             @this[2].Id,
    ///             @this[3].Id,
    ///             @this[4].Id,
    ///         },
    ///         GroupsIncludeds = new[]
    ///         {
    ///             @this[0].Id,
    ///             @this[1].Id,
    ///         },
    ///         NetworkConnection = "ZONE",
    ///         NetworkIncludes = new[]
    ///         {
    ///             testZone.Id,
    ///         },
    ///         PlatformIncludes = new[]
    ///         {
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "ANDROID",
    ///                 Type = "MOBILE",
    ///             },
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "IOS",
    ///                 Type = "MOBILE",
    ///             },
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "MACOS",
    ///                 Type = "DESKTOP",
    ///             },
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "OTHER",
    ///                 Type = "DESKTOP",
    ///             },
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "OTHER",
    ///                 Type = "MOBILE",
    ///             },
    ///             new Okta.Inputs.AppSignonPolicyRulePlatformIncludeArgs
    ///             {
    ///                 OsType = "WINDOWS",
    ///                 Type = "DESKTOP",
    ///             },
    ///         },
    ///         Priority = 98,
    ///         ReAuthenticationFrequency = "PT43800H",
    ///         Type = "ASSURANCE",
    ///         UserTypesExcludeds = new[]
    ///         {
    ///             testUserType.Id,
    ///         },
    ///         UserTypesIncludeds = new[]
    ///         {
    ///             @default.Apply(getUserTypeResult =&gt; getUserTypeResult).Apply(@default =&gt; @default.Apply(getUserTypeResult =&gt; getUserTypeResult.Id)),
    ///         },
    ///         UsersExcludeds = new[]
    ///         {
    ///             testUser[2].Id,
    ///             testUser[3].Id,
    ///             testUser[4].Id,
    ///         },
    ///         UsersIncludeds = new[]
    ///         {
    ///             testUser[0].Id,
    ///             testUser[1].Id,
    ///         },
    ///         Constraints = new[]
    ///         {
    ///             JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["knowledge"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["reauthenticateIn"] = "PT2H",
    ///                     ["types"] = new[]
    ///                     {
    ///                         "password",
    ///                     },
    ///                 },
    ///                 ["possession"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["deviceBound"] = "REQUIRED",
    ///                 },
    ///             }),
    ///             JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["possession"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["deviceBound"] = "REQUIRED",
    ///                     ["hardwareProtection"] = "REQUIRED",
    ///                     ["userPresence"] = "OPTIONAL",
    ///                 },
    ///             }),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Okta app sign-on policy rule can be imported via the Okta ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/appSignonPolicyRule:AppSignonPolicyRule example &amp;#60;policy_id&amp;#62;/&amp;#60;rule_id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/appSignonPolicyRule:AppSignonPolicyRule")]
    public partial class AppSignonPolicyRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// - An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
        /// </summary>
        [Output("constraints")]
        public Output<ImmutableArray<string>> Constraints { get; private set; } = null!;

        /// <summary>
        /// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Output("customExpression")]
        public Output<string?> CustomExpression { get; private set; } = null!;

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management
        /// system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
        /// </summary>
        [Output("deviceIsManaged")]
        public Output<bool?> DeviceIsManaged { get; private set; } = null!;

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta
        /// Verify that is installed on the device. Can only be set to `true`.
        /// </summary>
        [Output("deviceIsRegistered")]
        public Output<bool?> DeviceIsRegistered { get; private set; } = null!;

        /// <summary>
        /// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
        /// </summary>
        [Output("factorMode")]
        public Output<string?> FactorMode { get; private set; } = null!;

        /// <summary>
        /// List of groups IDs to be excluded.
        /// </summary>
        [Output("groupsExcludeds")]
        public Output<ImmutableArray<string>> GroupsExcludeds { get; private set; } = null!;

        /// <summary>
        /// List of groups IDs to be included.
        /// </summary>
        [Output("groupsIncludeds")]
        public Output<ImmutableArray<string>> GroupsIncludeds { get; private set; } = null!;

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
        /// </summary>
        [Output("inactivityPeriod")]
        public Output<string?> InactivityPeriod { get; private set; } = null!;

        /// <summary>
        /// Name of the policy rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Output("networkConnection")]
        public Output<string?> NetworkConnection { get; private set; } = null!;

        /// <summary>
        /// List of network zones IDs to exclude. Conflicts with `network_includes`.
        /// </summary>
        [Output("networkExcludes")]
        public Output<ImmutableArray<string>> NetworkExcludes { get; private set; } = null!;

        /// <summary>
        /// List of network zones IDs to include. Conflicts with `network_excludes`.
        /// </summary>
        [Output("networkIncludes")]
        public Output<ImmutableArray<string>> NetworkIncludes { get; private set; } = null!;

        /// <summary>
        /// List of particular platforms or devices to match on.
        /// </summary>
        [Output("platformIncludes")]
        public Output<ImmutableArray<Outputs.AppSignonPolicyRulePlatformInclude>> PlatformIncludes { get; private set; } = null!;

        /// <summary>
        /// ID of the app sign-on policy.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
        /// </summary>
        [Output("reAuthenticationFrequency")]
        public Output<string?> ReAuthenticationFrequency { get; private set; } = null!;

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// List of user types IDs to be excluded.
        /// </summary>
        [Output("userTypesExcludeds")]
        public Output<ImmutableArray<string>> UserTypesExcludeds { get; private set; } = null!;

        /// <summary>
        /// List of user types IDs to be included.
        /// </summary>
        [Output("userTypesIncludeds")]
        public Output<ImmutableArray<string>> UserTypesIncludeds { get; private set; } = null!;

        /// <summary>
        /// List of users IDs to be excluded.
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;

        /// <summary>
        /// List of users IDs to be included.
        /// </summary>
        [Output("usersIncludeds")]
        public Output<ImmutableArray<string>> UsersIncludeds { get; private set; } = null!;


        /// <summary>
        /// Create a AppSignonPolicyRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSignonPolicyRule(string name, AppSignonPolicyRuleArgs args, CustomResourceOptions? options = null)
            : base("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, args ?? new AppSignonPolicyRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSignonPolicyRule(string name, Input<string> id, AppSignonPolicyRuleState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/appSignonPolicyRule:AppSignonPolicyRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSignonPolicyRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSignonPolicyRule Get(string name, Input<string> id, AppSignonPolicyRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSignonPolicyRule(name, id, state, options);
        }
    }

    public sealed class AppSignonPolicyRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        [Input("constraints")]
        private InputList<string>? _constraints;

        /// <summary>
        /// - An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
        /// </summary>
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        /// <summary>
        /// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Input("customExpression")]
        public Input<string>? CustomExpression { get; set; }

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management
        /// system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
        /// </summary>
        [Input("deviceIsManaged")]
        public Input<bool>? DeviceIsManaged { get; set; }

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta
        /// Verify that is installed on the device. Can only be set to `true`.
        /// </summary>
        [Input("deviceIsRegistered")]
        public Input<bool>? DeviceIsRegistered { get; set; }

        /// <summary>
        /// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
        /// </summary>
        [Input("factorMode")]
        public Input<string>? FactorMode { get; set; }

        [Input("groupsExcludeds")]
        private InputList<string>? _groupsExcludeds;

        /// <summary>
        /// List of groups IDs to be excluded.
        /// </summary>
        public InputList<string> GroupsExcludeds
        {
            get => _groupsExcludeds ?? (_groupsExcludeds = new InputList<string>());
            set => _groupsExcludeds = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of groups IDs to be included.
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
        /// </summary>
        [Input("inactivityPeriod")]
        public Input<string>? InactivityPeriod { get; set; }

        /// <summary>
        /// Name of the policy rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// List of network zones IDs to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// List of network zones IDs to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs>? _platformIncludes;

        /// <summary>
        /// List of particular platforms or devices to match on.
        /// </summary>
        public InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.AppSignonPolicyRulePlatformIncludeArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// ID of the app sign-on policy.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
        /// </summary>
        [Input("reAuthenticationFrequency")]
        public Input<string>? ReAuthenticationFrequency { get; set; }

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userTypesExcludeds")]
        private InputList<string>? _userTypesExcludeds;

        /// <summary>
        /// List of user types IDs to be excluded.
        /// </summary>
        public InputList<string> UserTypesExcludeds
        {
            get => _userTypesExcludeds ?? (_userTypesExcludeds = new InputList<string>());
            set => _userTypesExcludeds = value;
        }

        [Input("userTypesIncludeds")]
        private InputList<string>? _userTypesIncludeds;

        /// <summary>
        /// List of user types IDs to be included.
        /// </summary>
        public InputList<string> UserTypesIncludeds
        {
            get => _userTypesIncludeds ?? (_userTypesIncludeds = new InputList<string>());
            set => _userTypesIncludeds = value;
        }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// List of users IDs to be excluded.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        [Input("usersIncludeds")]
        private InputList<string>? _usersIncludeds;

        /// <summary>
        /// List of users IDs to be included.
        /// </summary>
        public InputList<string> UsersIncludeds
        {
            get => _usersIncludeds ?? (_usersIncludeds = new InputList<string>());
            set => _usersIncludeds = value;
        }

        public AppSignonPolicyRuleArgs()
        {
        }
        public static new AppSignonPolicyRuleArgs Empty => new AppSignonPolicyRuleArgs();
    }

    public sealed class AppSignonPolicyRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. It can be set to `"ALLOW"` or `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        [Input("constraints")]
        private InputList<string>? _constraints;

        /// <summary>
        /// - An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
        /// </summary>
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        /// <summary>
        /// This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
        /// </summary>
        [Input("customExpression")]
        public Input<string>? CustomExpression { get; set; }

        /// <summary>
        /// If the device is managed. A device is managed if it's managed by a device management
        /// system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
        /// </summary>
        [Input("deviceIsManaged")]
        public Input<bool>? DeviceIsManaged { get; set; }

        /// <summary>
        /// If the device is registered. A device is registered if the User enrolls with Okta
        /// Verify that is installed on the device. Can only be set to `true`.
        /// </summary>
        [Input("deviceIsRegistered")]
        public Input<bool>? DeviceIsRegistered { get; set; }

        /// <summary>
        /// The number of factors required to satisfy this assurance level. It can be set to `"1FA"` or `"2FA"`. Default is `"2FA"`.
        /// </summary>
        [Input("factorMode")]
        public Input<string>? FactorMode { get; set; }

        [Input("groupsExcludeds")]
        private InputList<string>? _groupsExcludeds;

        /// <summary>
        /// List of groups IDs to be excluded.
        /// </summary>
        public InputList<string> GroupsExcludeds
        {
            get => _groupsExcludeds ?? (_groupsExcludeds = new InputList<string>());
            set => _groupsExcludeds = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of groups IDs to be included.
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `"PT1H"`.
        /// </summary>
        [Input("inactivityPeriod")]
        public Input<string>? InactivityPeriod { get; set; }

        /// <summary>
        /// Name of the policy rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
        /// </summary>
        [Input("networkConnection")]
        public Input<string>? NetworkConnection { get; set; }

        [Input("networkExcludes")]
        private InputList<string>? _networkExcludes;

        /// <summary>
        /// List of network zones IDs to exclude. Conflicts with `network_includes`.
        /// </summary>
        public InputList<string> NetworkExcludes
        {
            get => _networkExcludes ?? (_networkExcludes = new InputList<string>());
            set => _networkExcludes = value;
        }

        [Input("networkIncludes")]
        private InputList<string>? _networkIncludes;

        /// <summary>
        /// List of network zones IDs to include. Conflicts with `network_excludes`.
        /// </summary>
        public InputList<string> NetworkIncludes
        {
            get => _networkIncludes ?? (_networkIncludes = new InputList<string>());
            set => _networkIncludes = value;
        }

        [Input("platformIncludes")]
        private InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs>? _platformIncludes;

        /// <summary>
        /// List of particular platforms or devices to match on.
        /// </summary>
        public InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs> PlatformIncludes
        {
            get => _platformIncludes ?? (_platformIncludes = new InputList<Inputs.AppSignonPolicyRulePlatformIncludeGetArgs>());
            set => _platformIncludes = value;
        }

        /// <summary>
        /// ID of the app sign-on policy.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `"PT0S"` - every sign-in attempt, `"PT43800H"` - once per session. Default is `"PT2H"`.
        /// </summary>
        [Input("reAuthenticationFrequency")]
        public Input<string>? ReAuthenticationFrequency { get; set; }

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Verification Method type. It can be set to `"ASSURANCE"`. Default is `"ASSURANCE"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userTypesExcludeds")]
        private InputList<string>? _userTypesExcludeds;

        /// <summary>
        /// List of user types IDs to be excluded.
        /// </summary>
        public InputList<string> UserTypesExcludeds
        {
            get => _userTypesExcludeds ?? (_userTypesExcludeds = new InputList<string>());
            set => _userTypesExcludeds = value;
        }

        [Input("userTypesIncludeds")]
        private InputList<string>? _userTypesIncludeds;

        /// <summary>
        /// List of user types IDs to be included.
        /// </summary>
        public InputList<string> UserTypesIncludeds
        {
            get => _userTypesIncludeds ?? (_userTypesIncludeds = new InputList<string>());
            set => _userTypesIncludeds = value;
        }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// List of users IDs to be excluded.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        [Input("usersIncludeds")]
        private InputList<string>? _usersIncludeds;

        /// <summary>
        /// List of users IDs to be included.
        /// </summary>
        public InputList<string> UsersIncludeds
        {
            get => _usersIncludeds ?? (_usersIncludeds = new InputList<string>());
            set => _usersIncludeds = value;
        }

        public AppSignonPolicyRuleState()
        {
        }
        public static new AppSignonPolicyRuleState Empty => new AppSignonPolicyRuleState();
    }
}
