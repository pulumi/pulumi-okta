// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages Entitlement Bundles. This resource allows you to create and configure an Okta [Entitlement Bundle](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlement-Bundles/#tag/Entitlement-Bundles).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.EntitlementBundle("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/entitlementBundle:EntitlementBundle example &lt;entitlement_bundle_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/entitlementBundle:EntitlementBundle")]
    public partial class EntitlementBundle : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        [Output("entitlements")]
        public Output<ImmutableArray<Outputs.EntitlementBundleEntitlement>> Entitlements { get; private set; } = null!;

        /// <summary>
        /// The display name for an entitlement bundle.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the entitlement bundle.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Output("target")]
        public Output<Outputs.EntitlementBundleTarget?> Target { get; private set; } = null!;

        /// <summary>
        /// The ORN of the target resource. Required when updating the entitlement bundle.
        /// </summary>
        [Output("targetResourceOrn")]
        public Output<string> TargetResourceOrn { get; private set; } = null!;


        /// <summary>
        /// Create a EntitlementBundle resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EntitlementBundle(string name, EntitlementBundleArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:index/entitlementBundle:EntitlementBundle", name, args ?? new EntitlementBundleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EntitlementBundle(string name, Input<string> id, EntitlementBundleState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/entitlementBundle:EntitlementBundle", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EntitlementBundle resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EntitlementBundle Get(string name, Input<string> id, EntitlementBundleState? state = null, CustomResourceOptions? options = null)
        {
            return new EntitlementBundle(name, id, state, options);
        }
    }

    public sealed class EntitlementBundleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entitlements")]
        private InputList<Inputs.EntitlementBundleEntitlementArgs>? _entitlements;

        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        public InputList<Inputs.EntitlementBundleEntitlementArgs> Entitlements
        {
            get => _entitlements ?? (_entitlements = new InputList<Inputs.EntitlementBundleEntitlementArgs>());
            set => _entitlements = value;
        }

        /// <summary>
        /// The display name for an entitlement bundle.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the entitlement bundle.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("target")]
        public Input<Inputs.EntitlementBundleTargetArgs>? Target { get; set; }

        /// <summary>
        /// The ORN of the target resource. Required when updating the entitlement bundle.
        /// </summary>
        [Input("targetResourceOrn")]
        public Input<string>? TargetResourceOrn { get; set; }

        public EntitlementBundleArgs()
        {
        }
        public static new EntitlementBundleArgs Empty => new EntitlementBundleArgs();
    }

    public sealed class EntitlementBundleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entitlements")]
        private InputList<Inputs.EntitlementBundleEntitlementGetArgs>? _entitlements;

        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        public InputList<Inputs.EntitlementBundleEntitlementGetArgs> Entitlements
        {
            get => _entitlements ?? (_entitlements = new InputList<Inputs.EntitlementBundleEntitlementGetArgs>());
            set => _entitlements = value;
        }

        /// <summary>
        /// The display name for an entitlement bundle.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the entitlement bundle.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("target")]
        public Input<Inputs.EntitlementBundleTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// The ORN of the target resource. Required when updating the entitlement bundle.
        /// </summary>
        [Input("targetResourceOrn")]
        public Input<string>? TargetResourceOrn { get; set; }

        public EntitlementBundleState()
        {
        }
        public static new EntitlementBundleState Empty => new EntitlementBundleState();
    }
}
