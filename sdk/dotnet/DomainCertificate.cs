// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages certificate for the domain.
    /// This resource's 'certificate', 'private_key', and 'certificate_chain' attributes
    /// hold actual PEM values and can be referred to by other configs requiring
    /// certificate and private key inputs. This is inline with TF's best
    /// practices
    /// of not encrypting state.
    /// See Let's Encrypt Certbot notes at the end of this
    /// documentation for notes on how to generate a domain certificate with Let's Encrypt Certbot
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Domain("example", new()
    ///     {
    ///         Name = "www.example.com",
    ///     });
    /// 
    ///     var test = new Okta.DomainCertificate("test", new()
    ///     {
    ///         DomainId = testOktaDomain.Id,
    ///         Type = "PEM",
    ///         Certificate = @"-----BEGIN CERTIFICATE-----
    /// MIIFNzCCBB+gAwIBAgISBAXomJWRama3ypu8TIxdA9wzMA0GCSqGSIb3DQEBCwUA
    /// ...
    /// NSgRtSXq11j8O4JONi8EXe7cEtvzUiLR5PL3itsK2svtrZ9jIwQ95wOPaA==
    /// -----END CERTIFICATE-----
    /// ",
    ///         CertificateChain = @"-----BEGIN CERTIFICATE-----
    /// MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw
    /// ...
    /// Dfvp7OOGAN6dEOM4+qR9sdjoSYKEBpsr6GtPAQw4dy753ec5
    /// -----END CERTIFICATE-----
    /// ",
    ///         PrivateKey = @"-----BEGIN PRIVATE KEY-----
    /// MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5cyk6x63iBJSW
    /// ...
    /// nUFLNE8pXSnsqb0eOL74f3uQ
    /// -----END PRIVATE KEY-----
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Let's Encrypt Certbot
    /// 
    /// This example demonstrates generatoring a domain certificate with letsencrypt
    /// certbot &lt;https://letsencrypt.org/getting-started/&gt;
    /// 
    /// Use letsencrypt's certbot to generate domain certificates in RSA output mode.
    /// The generator's output corresponds to `okta.DomainCertificate` fields in the
    /// following manner.
    /// 
    /// |        Okta         |    Certbot    |
    /// |---------------------|---------------|
    /// | `certificate`       | `cert.pem`    |
    /// | `certificate_chain` | `chain.pem`   |
    /// | `private_key`       | `privkey.pem` |
    /// </summary>
    [OktaResourceType("okta:index/domainCertificate:DomainCertificate")]
    public partial class DomainCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate content
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Output("certificateChain")]
        public Output<string> CertificateChain { get; private set; } = null!;

        /// <summary>
        /// Domain's ID
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Certificate type. Valid value is `PEM`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DomainCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainCertificate(string name, DomainCertificateArgs args, CustomResourceOptions? options = null)
            : base("okta:index/domainCertificate:DomainCertificate", name, args ?? new DomainCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainCertificate(string name, Input<string> id, DomainCertificateState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/domainCertificate:DomainCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainCertificate Get(string name, Input<string> id, DomainCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainCertificate(name, id, state, options);
        }
    }

    public sealed class DomainCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate content
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Input("certificateChain", required: true)]
        public Input<string> CertificateChain { get; set; } = null!;

        /// <summary>
        /// Domain's ID
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// Certificate type. Valid value is `PEM`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DomainCertificateArgs()
        {
        }
        public static new DomainCertificateArgs Empty => new DomainCertificateArgs();
    }

    public sealed class DomainCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate content
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// Domain's ID
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Certificate private key
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Certificate type. Valid value is `PEM`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DomainCertificateState()
        {
        }
        public static new DomainCertificateState Empty => new DomainCertificateState();
    }
}
