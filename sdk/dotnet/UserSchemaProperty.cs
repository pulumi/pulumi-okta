// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.UserSchemaProperty("example", new()
    ///     {
    ///         Index = "customPropertyName",
    ///         Title = "customPropertyName",
    ///         Type = "string",
    ///         Description = "My custom property name",
    ///         Master = "OKTA",
    ///         Scope = "SELF",
    ///         UserType = exampleOktaUserType.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// User schema property of default user type can be imported via the property variableName.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/userSchemaProperty:UserSchemaProperty example &amp;#60;variableName&amp;#62;
    /// ```
    /// 
    /// User schema property of custom user type can be imported via user type id and property index
    /// 
    /// ```sh
    /// $ pulumi import okta:index/userSchemaProperty:UserSchemaProperty example &amp;#60;user type id&amp;#62;.&amp;#60;index&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/userSchemaProperty:UserSchemaProperty")]
    public partial class UserSchemaProperty : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Array of values that an array property's items can be set to.
        /// </summary>
        [Output("arrayEnums")]
        public Output<ImmutableArray<string>> ArrayEnums { get; private set; } = null!;

        /// <summary>
        /// Display name and value an enum array can be set to.
        /// </summary>
        [Output("arrayOneOfs")]
        public Output<ImmutableArray<Outputs.UserSchemaPropertyArrayOneOf>> ArrayOneOfs { get; private set; } = null!;

        /// <summary>
        /// The type of the array elements if `type` is set to `"array"`.
        /// </summary>
        [Output("arrayType")]
        public Output<string?> ArrayType { get; private set; } = null!;

        /// <summary>
        /// The description of the user schema property.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Array of values a primitive property can be set to. See `array_enum` for arrays.
        /// </summary>
        [Output("enums")]
        public Output<ImmutableArray<string>> Enums { get; private set; } = null!;

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Output("externalName")]
        public Output<string?> ExternalName { get; private set; } = null!;

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Output("externalNamespace")]
        public Output<string?> ExternalNamespace { get; private set; } = null!;

        /// <summary>
        /// The property name.
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
        /// </summary>
        [Output("master")]
        public Output<string?> Master { get; private set; } = null!;

        /// <summary>
        /// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
        /// </summary>
        [Output("masterOverridePriorities")]
        public Output<ImmutableArray<Outputs.UserSchemaPropertyMasterOverridePriority>> MasterOverridePriorities { get; private set; } = null!;

        /// <summary>
        /// The maximum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Output("maxLength")]
        public Output<int?> MaxLength { get; private set; } = null!;

        /// <summary>
        /// The minimum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Output("minLength")]
        public Output<int?> MinLength { get; private set; } = null!;

        /// <summary>
        /// Array of maps containing a mapping for display name to enum value.
        /// </summary>
        [Output("oneOfs")]
        public Output<ImmutableArray<Outputs.UserSchemaPropertyOneOf>> OneOfs { get; private set; } = null!;

        /// <summary>
        /// The validation pattern to use for the subschema. Must be in form of '.+', or '[&lt;pattern&gt;]+' if present.'
        /// </summary>
        [Output("pattern")]
        public Output<string?> Pattern { get; private set; } = null!;

        /// <summary>
        /// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
        /// </summary>
        [Output("permissions")]
        public Output<string?> Permissions { get; private set; } = null!;

        /// <summary>
        /// Whether the property is required for these users.
        /// </summary>
        [Output("required")]
        public Output<bool?> Required { get; private set; } = null!;

        /// <summary>
        /// determines whether an app user attribute can be set at the Individual or Group Level.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// display name for the enum value.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Type of profile source.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
        /// </summary>
        [Output("unique")]
        public Output<string?> Unique { get; private set; } = null!;

        /// <summary>
        /// User type ID
        /// </summary>
        [Output("userType")]
        public Output<string?> UserType { get; private set; } = null!;


        /// <summary>
        /// Create a UserSchemaProperty resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserSchemaProperty(string name, UserSchemaPropertyArgs args, CustomResourceOptions? options = null)
            : base("okta:index/userSchemaProperty:UserSchemaProperty", name, args ?? new UserSchemaPropertyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserSchemaProperty(string name, Input<string> id, UserSchemaPropertyState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/userSchemaProperty:UserSchemaProperty", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserSchemaProperty resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserSchemaProperty Get(string name, Input<string> id, UserSchemaPropertyState? state = null, CustomResourceOptions? options = null)
        {
            return new UserSchemaProperty(name, id, state, options);
        }
    }

    public sealed class UserSchemaPropertyArgs : global::Pulumi.ResourceArgs
    {
        [Input("arrayEnums")]
        private InputList<string>? _arrayEnums;

        /// <summary>
        /// Array of values that an array property's items can be set to.
        /// </summary>
        public InputList<string> ArrayEnums
        {
            get => _arrayEnums ?? (_arrayEnums = new InputList<string>());
            set => _arrayEnums = value;
        }

        [Input("arrayOneOfs")]
        private InputList<Inputs.UserSchemaPropertyArrayOneOfArgs>? _arrayOneOfs;

        /// <summary>
        /// Display name and value an enum array can be set to.
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyArrayOneOfArgs> ArrayOneOfs
        {
            get => _arrayOneOfs ?? (_arrayOneOfs = new InputList<Inputs.UserSchemaPropertyArrayOneOfArgs>());
            set => _arrayOneOfs = value;
        }

        /// <summary>
        /// The type of the array elements if `type` is set to `"array"`.
        /// </summary>
        [Input("arrayType")]
        public Input<string>? ArrayType { get; set; }

        /// <summary>
        /// The description of the user schema property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enums")]
        private InputList<string>? _enums;

        /// <summary>
        /// Array of values a primitive property can be set to. See `array_enum` for arrays.
        /// </summary>
        public InputList<string> Enums
        {
            get => _enums ?? (_enums = new InputList<string>());
            set => _enums = value;
        }

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Input("externalName")]
        public Input<string>? ExternalName { get; set; }

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Input("externalNamespace")]
        public Input<string>? ExternalNamespace { get; set; }

        /// <summary>
        /// The property name.
        /// </summary>
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        /// <summary>
        /// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
        /// </summary>
        [Input("master")]
        public Input<string>? Master { get; set; }

        [Input("masterOverridePriorities")]
        private InputList<Inputs.UserSchemaPropertyMasterOverridePriorityArgs>? _masterOverridePriorities;

        /// <summary>
        /// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyMasterOverridePriorityArgs> MasterOverridePriorities
        {
            get => _masterOverridePriorities ?? (_masterOverridePriorities = new InputList<Inputs.UserSchemaPropertyMasterOverridePriorityArgs>());
            set => _masterOverridePriorities = value;
        }

        /// <summary>
        /// The maximum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// The minimum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        [Input("oneOfs")]
        private InputList<Inputs.UserSchemaPropertyOneOfArgs>? _oneOfs;

        /// <summary>
        /// Array of maps containing a mapping for display name to enum value.
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyOneOfArgs> OneOfs
        {
            get => _oneOfs ?? (_oneOfs = new InputList<Inputs.UserSchemaPropertyOneOfArgs>());
            set => _oneOfs = value;
        }

        /// <summary>
        /// The validation pattern to use for the subschema. Must be in form of '.+', or '[&lt;pattern&gt;]+' if present.'
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        /// <summary>
        /// Whether the property is required for these users.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// determines whether an app user attribute can be set at the Individual or Group Level.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// display name for the enum value.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Type of profile source.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
        /// </summary>
        [Input("unique")]
        public Input<string>? Unique { get; set; }

        /// <summary>
        /// User type ID
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        public UserSchemaPropertyArgs()
        {
        }
        public static new UserSchemaPropertyArgs Empty => new UserSchemaPropertyArgs();
    }

    public sealed class UserSchemaPropertyState : global::Pulumi.ResourceArgs
    {
        [Input("arrayEnums")]
        private InputList<string>? _arrayEnums;

        /// <summary>
        /// Array of values that an array property's items can be set to.
        /// </summary>
        public InputList<string> ArrayEnums
        {
            get => _arrayEnums ?? (_arrayEnums = new InputList<string>());
            set => _arrayEnums = value;
        }

        [Input("arrayOneOfs")]
        private InputList<Inputs.UserSchemaPropertyArrayOneOfGetArgs>? _arrayOneOfs;

        /// <summary>
        /// Display name and value an enum array can be set to.
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyArrayOneOfGetArgs> ArrayOneOfs
        {
            get => _arrayOneOfs ?? (_arrayOneOfs = new InputList<Inputs.UserSchemaPropertyArrayOneOfGetArgs>());
            set => _arrayOneOfs = value;
        }

        /// <summary>
        /// The type of the array elements if `type` is set to `"array"`.
        /// </summary>
        [Input("arrayType")]
        public Input<string>? ArrayType { get; set; }

        /// <summary>
        /// The description of the user schema property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enums")]
        private InputList<string>? _enums;

        /// <summary>
        /// Array of values a primitive property can be set to. See `array_enum` for arrays.
        /// </summary>
        public InputList<string> Enums
        {
            get => _enums ?? (_enums = new InputList<string>());
            set => _enums = value;
        }

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Input("externalName")]
        public Input<string>? ExternalName { get; set; }

        /// <summary>
        /// External name of the user schema property.
        /// </summary>
        [Input("externalNamespace")]
        public Input<string>? ExternalNamespace { get; set; }

        /// <summary>
        /// The property name.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"`, `"OVERRIDE"` or `"OKTA"`.
        /// </summary>
        [Input("master")]
        public Input<string>? Master { get; set; }

        [Input("masterOverridePriorities")]
        private InputList<Inputs.UserSchemaPropertyMasterOverridePriorityGetArgs>? _masterOverridePriorities;

        /// <summary>
        /// Prioritized list of profile sources (required when `master` is `"OVERRIDE"`).
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyMasterOverridePriorityGetArgs> MasterOverridePriorities
        {
            get => _masterOverridePriorities ?? (_masterOverridePriorities = new InputList<Inputs.UserSchemaPropertyMasterOverridePriorityGetArgs>());
            set => _masterOverridePriorities = value;
        }

        /// <summary>
        /// The maximum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// The minimum length of the user property value. Only applies to type `"string"`.
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        [Input("oneOfs")]
        private InputList<Inputs.UserSchemaPropertyOneOfGetArgs>? _oneOfs;

        /// <summary>
        /// Array of maps containing a mapping for display name to enum value.
        /// </summary>
        public InputList<Inputs.UserSchemaPropertyOneOfGetArgs> OneOfs
        {
            get => _oneOfs ?? (_oneOfs = new InputList<Inputs.UserSchemaPropertyOneOfGetArgs>());
            set => _oneOfs = value;
        }

        /// <summary>
        /// The validation pattern to use for the subschema. Must be in form of '.+', or '[&lt;pattern&gt;]+' if present.'
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        /// <summary>
        /// Whether the property is required for these users.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// determines whether an app user attribute can be set at the Individual or Group Level.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// display name for the enum value.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Type of profile source.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Whether the property should be unique. It can be set to `"UNIQUE_VALIDATED"` or `"NOT_UNIQUE"`.
        /// </summary>
        [Input("unique")]
        public Input<string>? Unique { get; set; }

        /// <summary>
        /// User type ID
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        public UserSchemaPropertyState()
        {
        }
        public static new UserSchemaPropertyState Empty => new UserSchemaPropertyState();
    }
}
