// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Group
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Group.Rule("example", new()
    ///     {
    ///         ExpressionType = "urn:okta:expression:1.0",
    ///         ExpressionValue = "String.startsWith(user.firstName,\"andy\")",
    ///         GroupAssignments = new[]
    ///         {
    ///             "&lt;group id&gt;",
    ///         },
    ///         Status = "ACTIVE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An Okta Group Rule can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:group/rule:Rule example &amp;#60;group rule id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:group/rule:Rule")]
    public partial class Rule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The expression type to use to invoke the rule. The default
        /// is `"urn:okta:expression:1.0"`.
        /// </summary>
        [Output("expressionType")]
        public Output<string?> ExpressionType { get; private set; } = null!;

        /// <summary>
        /// The expression value.
        /// </summary>
        [Output("expressionValue")]
        public Output<string> ExpressionValue { get; private set; } = null!;

        /// <summary>
        /// The list of group ids to assign the users to.
        /// </summary>
        [Output("groupAssignments")]
        public Output<ImmutableArray<string>> GroupAssignments { get; private set; } = null!;

        /// <summary>
        /// The name of the Group Rule (min character 1; max characters 50).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This tells the provider to remove users added by this rule from the assigned
        /// group after destroying this resource. Default is `false`.
        /// </summary>
        [Output("removeAssignedUsers")]
        public Output<bool?> RemoveAssignedUsers { get; private set; } = null!;

        /// <summary>
        /// The status of the group rule.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        [Output("usersExcludeds")]
        public Output<ImmutableArray<string>> UsersExcludeds { get; private set; } = null!;


        /// <summary>
        /// Create a Rule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rule(string name, RuleArgs args, CustomResourceOptions? options = null)
            : base("okta:group/rule:Rule", name, args ?? new RuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rule(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
            : base("okta:group/rule:Rule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rule Get(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Rule(name, id, state, options);
        }
    }

    public sealed class RuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The expression type to use to invoke the rule. The default
        /// is `"urn:okta:expression:1.0"`.
        /// </summary>
        [Input("expressionType")]
        public Input<string>? ExpressionType { get; set; }

        /// <summary>
        /// The expression value.
        /// </summary>
        [Input("expressionValue", required: true)]
        public Input<string> ExpressionValue { get; set; } = null!;

        [Input("groupAssignments", required: true)]
        private InputList<string>? _groupAssignments;

        /// <summary>
        /// The list of group ids to assign the users to.
        /// </summary>
        public InputList<string> GroupAssignments
        {
            get => _groupAssignments ?? (_groupAssignments = new InputList<string>());
            set => _groupAssignments = value;
        }

        /// <summary>
        /// The name of the Group Rule (min character 1; max characters 50).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// This tells the provider to remove users added by this rule from the assigned
        /// group after destroying this resource. Default is `false`.
        /// </summary>
        [Input("removeAssignedUsers")]
        public Input<bool>? RemoveAssignedUsers { get; set; }

        /// <summary>
        /// The status of the group rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleArgs()
        {
        }
        public static new RuleArgs Empty => new RuleArgs();
    }

    public sealed class RuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The expression type to use to invoke the rule. The default
        /// is `"urn:okta:expression:1.0"`.
        /// </summary>
        [Input("expressionType")]
        public Input<string>? ExpressionType { get; set; }

        /// <summary>
        /// The expression value.
        /// </summary>
        [Input("expressionValue")]
        public Input<string>? ExpressionValue { get; set; }

        [Input("groupAssignments")]
        private InputList<string>? _groupAssignments;

        /// <summary>
        /// The list of group ids to assign the users to.
        /// </summary>
        public InputList<string> GroupAssignments
        {
            get => _groupAssignments ?? (_groupAssignments = new InputList<string>());
            set => _groupAssignments = value;
        }

        /// <summary>
        /// The name of the Group Rule (min character 1; max characters 50).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// This tells the provider to remove users added by this rule from the assigned
        /// group after destroying this resource. Default is `false`.
        /// </summary>
        [Input("removeAssignedUsers")]
        public Input<bool>? RemoveAssignedUsers { get; set; }

        /// <summary>
        /// The status of the group rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("usersExcludeds")]
        private InputList<string>? _usersExcludeds;

        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        public InputList<string> UsersExcludeds
        {
            get => _usersExcludeds ?? (_usersExcludeds = new InputList<string>());
            set => _usersExcludeds = value;
        }

        public RuleState()
        {
        }
        public static new RuleState Empty => new RuleState();
    }
}
