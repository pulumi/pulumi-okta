// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Group
{
    /// <summary>
    /// Creates Group level Admin Role Assignments.
    /// 
    /// This resource allows you to create and configure Group level Admin Role Assignments.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Okta.Group.Roles("example", new Okta.Group.RolesArgs
    ///         {
    ///             AdminRoles = 
    ///             {
    ///                 "SUPER_ADMIN",
    ///             },
    ///             GroupId = "&lt;group id&gt;",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Roles : Pulumi.CustomResource
    {
        /// <summary>
        /// Admin roles associated with the group. It can be any of the following values `"SUPER_ADMIN"`, `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`, `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`.
        /// </summary>
        [Output("adminRoles")]
        public Output<ImmutableArray<string>> AdminRoles { get; private set; } = null!;

        /// <summary>
        /// The ID of group to attach admin roles to.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;


        /// <summary>
        /// Create a Roles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Roles(string name, RolesArgs args, CustomResourceOptions? options = null)
            : base("okta:group/roles:Roles", name, args ?? new RolesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Roles(string name, Input<string> id, RolesState? state = null, CustomResourceOptions? options = null)
            : base("okta:group/roles:Roles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Roles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Roles Get(string name, Input<string> id, RolesState? state = null, CustomResourceOptions? options = null)
        {
            return new Roles(name, id, state, options);
        }
    }

    public sealed class RolesArgs : Pulumi.ResourceArgs
    {
        [Input("adminRoles")]
        private InputList<string>? _adminRoles;

        /// <summary>
        /// Admin roles associated with the group. It can be any of the following values `"SUPER_ADMIN"`, `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`, `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`.
        /// </summary>
        public InputList<string> AdminRoles
        {
            get => _adminRoles ?? (_adminRoles = new InputList<string>());
            set => _adminRoles = value;
        }

        /// <summary>
        /// The ID of group to attach admin roles to.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        public RolesArgs()
        {
        }
    }

    public sealed class RolesState : Pulumi.ResourceArgs
    {
        [Input("adminRoles")]
        private InputList<string>? _adminRoles;

        /// <summary>
        /// Admin roles associated with the group. It can be any of the following values `"SUPER_ADMIN"`, `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`, `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`.
        /// </summary>
        public InputList<string> AdminRoles
        {
            get => _adminRoles ?? (_adminRoles = new InputList<string>());
            set => _adminRoles = value;
        }

        /// <summary>
        /// The ID of group to attach admin roles to.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        public RolesState()
        {
        }
    }
}
