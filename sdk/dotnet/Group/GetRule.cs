// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Group
{
    public static class GetRule
    {
        /// <summary>
        /// Use this data source to retrieve a group rule from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.Group.GetRule.Invoke(new()
        ///     {
        ///         Id = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRuleResult> InvokeAsync(GetRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRuleResult>("okta:group/getRule:getRule", args ?? new GetRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a group rule from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.Group.GetRule.Invoke(new()
        ///     {
        ///         Id = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRuleResult> Invoke(GetRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRuleResult>("okta:group/getRule:getRule", args ?? new GetRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the group rule to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the Group Rule to retrieve.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The status of the group rule.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetRuleArgs()
        {
        }
        public static new GetRuleArgs Empty => new GetRuleArgs();
    }

    public sealed class GetRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the group rule to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the Group Rule to retrieve.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the group rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetRuleInvokeArgs()
        {
        }
        public static new GetRuleInvokeArgs Empty => new GetRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRuleResult
    {
        /// <summary>
        /// The expression type to use to invoke the rule.
        /// </summary>
        public readonly string ExpressionType;
        /// <summary>
        /// The expression value.
        /// </summary>
        public readonly string ExpressionValue;
        /// <summary>
        /// The list of group ids to assign the users to.
        /// </summary>
        public readonly ImmutableArray<string> GroupAssignments;
        /// <summary>
        /// The ID of the Group Rule.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the Group Rule.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The status of the group rule.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The list of user IDs that would be excluded when rules are processed.
        /// </summary>
        public readonly ImmutableArray<string> UsersExcludeds;

        [OutputConstructor]
        private GetRuleResult(
            string expressionType,

            string expressionValue,

            ImmutableArray<string> groupAssignments,

            string? id,

            string? name,

            string? status,

            ImmutableArray<string> usersExcludeds)
        {
            ExpressionType = expressionType;
            ExpressionValue = expressionValue;
            GroupAssignments = groupAssignments;
            Id = id;
            Name = name;
            Status = status;
            UsersExcludeds = usersExcludeds;
        }
    }
}
