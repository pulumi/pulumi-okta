// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Group
{
    /// <summary>
    /// Manages group owner resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.User.User("test", new()
    ///     {
    ///         FirstName = "TestAcc",
    ///         LastName = "Smith",
    ///         Login = "testAcc-replace_with_uuid@example.com",
    ///         Email = "testAcc-replace_with_uuid@example.com",
    ///     });
    /// 
    ///     var testGroup = new Okta.Group.Group("test", new()
    ///     {
    ///         Name = "testAcc_replace_with_uuid",
    ///     });
    /// 
    ///     var testOwner = new Okta.Group.Owner("test", new()
    ///     {
    ///         GroupId = testGroup.Id,
    ///         IdOfGroupOwner = test.Id,
    ///         Type = "USER",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OktaResourceType("okta:group/owner:Owner")]
    public partial class Owner : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The display name of the group owner
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The id of the group
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The user id of the group owner
        /// </summary>
        [Output("idOfGroupOwner")]
        public Output<string> IdOfGroupOwner { get; private set; } = null!;

        /// <summary>
        /// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
        /// </summary>
        [Output("originId")]
        public Output<string> OriginId { get; private set; } = null!;

        /// <summary>
        /// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
        /// </summary>
        [Output("originType")]
        public Output<string> OriginType { get; private set; } = null!;

        /// <summary>
        /// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
        /// </summary>
        [Output("resolved")]
        public Output<bool> Resolved { get; private set; } = null!;

        /// <summary>
        /// The entity type of the owner. Enum: "GROUP" "USER"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Owner resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Owner(string name, OwnerArgs args, CustomResourceOptions? options = null)
            : base("okta:group/owner:Owner", name, args ?? new OwnerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Owner(string name, Input<string> id, OwnerState? state = null, CustomResourceOptions? options = null)
            : base("okta:group/owner:Owner", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Owner resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Owner Get(string name, Input<string> id, OwnerState? state = null, CustomResourceOptions? options = null)
        {
            return new Owner(name, id, state, options);
        }
    }

    public sealed class OwnerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the group
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The user id of the group owner
        /// </summary>
        [Input("idOfGroupOwner", required: true)]
        public Input<string> IdOfGroupOwner { get; set; } = null!;

        /// <summary>
        /// The entity type of the owner. Enum: "GROUP" "USER"
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public OwnerArgs()
        {
        }
        public static new OwnerArgs Empty => new OwnerArgs();
    }

    public sealed class OwnerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name of the group owner
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The id of the group
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The user id of the group owner
        /// </summary>
        [Input("idOfGroupOwner")]
        public Input<string>? IdOfGroupOwner { get; set; }

        /// <summary>
        /// The ID of the app instance if the originType is APPLICATION. This value is NULL if originType is OKTA_DIRECTORY.
        /// </summary>
        [Input("originId")]
        public Input<string>? OriginId { get; set; }

        /// <summary>
        /// The source where group ownership is managed. Enum: "APPLICATION" "OKTA_DIRECTORY"
        /// </summary>
        [Input("originType")]
        public Input<string>? OriginType { get; set; }

        /// <summary>
        /// If originType is APPLICATION, this parameter is set to FALSE until the owner's originId is reconciled with an associated Okta ID.
        /// </summary>
        [Input("resolved")]
        public Input<bool>? Resolved { get; set; }

        /// <summary>
        /// The entity type of the owner. Enum: "GROUP" "USER"
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public OwnerState()
        {
        }
        public static new OwnerState Empty => new OwnerState();
    }
}
