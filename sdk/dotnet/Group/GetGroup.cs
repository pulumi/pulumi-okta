// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Group
{
    public static class GetGroup
    {
        /// <summary>
        /// Get a group from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.Group.GetGroup.Invoke(new()
        ///     {
        ///         Name = "Example App",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("okta:group/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Get a group from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.Group.GetGroup.Invoke(new()
        ///     {
        ///         Name = "Example App",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("okta:group/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a group from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.Group.GetGroup.Invoke(new()
        ///     {
        ///         Name = "Example App",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("okta:group/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
        /// </summary>
        [Input("delayReadSeconds")]
        public string? DelayReadSeconds { get; set; }

        /// <summary>
        /// ID of group.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Fetch group users, having default off cuts down on API calls.
        /// </summary>
        [Input("includeUsers")]
        public bool? IncludeUsers { get; set; }

        /// <summary>
        /// Name of group.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
        /// </summary>
        [Input("delayReadSeconds")]
        public Input<string>? DelayReadSeconds { get; set; }

        /// <summary>
        /// ID of group.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Fetch group users, having default off cuts down on API calls.
        /// </summary>
        [Input("includeUsers")]
        public Input<bool>? IncludeUsers { get; set; }

        /// <summary>
        /// Name of group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        /// <summary>
        /// Force delay of the group read by N seconds. Useful when eventual consistency of group information needs to be allowed for; for instance, when group rules are known to have been applied.
        /// </summary>
        public readonly string? DelayReadSeconds;
        /// <summary>
        /// Description of group.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of group.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Fetch group users, having default off cuts down on API calls.
        /// </summary>
        public readonly bool? IncludeUsers;
        /// <summary>
        /// Name of group.
        /// </summary>
        public readonly string Name;
        public readonly string? Type;
        /// <summary>
        /// Users associated with the group. This can also be done per user.
        /// </summary>
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private GetGroupResult(
            string? delayReadSeconds,

            string description,

            string id,

            bool? includeUsers,

            string name,

            string? type,

            ImmutableArray<string> users)
        {
            DelayReadSeconds = delayReadSeconds;
            Description = description;
            Id = id;
            IncludeUsers = includeUsers;
            Name = name;
            Type = type;
            Users = users;
        }
    }
}
