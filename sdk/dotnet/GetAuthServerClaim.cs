// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Okta
{
    public static class GetAuthServerClaim
    {
        /// <summary>
        /// Use this data source to retrieve authorization server claim from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Okta.GetAuthServerClaim.InvokeAsync(new Okta.GetAuthServerClaimArgs
        ///         {
        ///             AuthServerId = "default",
        ///             Name = "birthdate",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthServerClaimResult> InvokeAsync(GetAuthServerClaimArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAuthServerClaimResult>("okta:index/getAuthServerClaim:getAuthServerClaim", args ?? new GetAuthServerClaimArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to retrieve authorization server claim from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Okta.GetAuthServerClaim.InvokeAsync(new Okta.GetAuthServerClaimArgs
        ///         {
        ///             AuthServerId = "default",
        ///             Name = "birthdate",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthServerClaimResult> Invoke(GetAuthServerClaimInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAuthServerClaimResult>("okta:index/getAuthServerClaim:getAuthServerClaim", args ?? new GetAuthServerClaimInvokeArgs(), options.WithVersion());
    }


    public sealed class GetAuthServerClaimArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Auth server ID.
        /// </summary>
        [Input("authServerId", required: true)]
        public string AuthServerId { get; set; } = null!;

        /// <summary>
        /// ID of the claim. Conflicts with `name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the claim. Conflicts with `id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAuthServerClaimArgs()
        {
        }
    }

    public sealed class GetAuthServerClaimInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Auth server ID.
        /// </summary>
        [Input("authServerId", required: true)]
        public Input<string> AuthServerId { get; set; } = null!;

        /// <summary>
        /// ID of the claim. Conflicts with `name`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the claim. Conflicts with `id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAuthServerClaimInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAuthServerClaimResult
    {
        /// <summary>
        /// Specifies whether to include Claims in the token.
        /// </summary>
        public readonly bool AlwaysIncludeInToken;
        public readonly string AuthServerId;
        /// <summary>
        /// Specifies whether the Claim is for an access token (`"RESOURCE"`) or ID token (`"IDENTITY"`).
        /// </summary>
        public readonly string ClaimType;
        /// <summary>
        /// ID of the claim.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the claim.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Specifies the scopes for this Claim.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Status of the claim.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Value of the claim
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// Specifies whether the Claim is an Okta EL expression (`"EXPRESSION"`), a set of groups (`"GROUPS"`), or a system claim (`"SYSTEM"`)
        /// </summary>
        public readonly string ValueType;

        [OutputConstructor]
        private GetAuthServerClaimResult(
            bool alwaysIncludeInToken,

            string authServerId,

            string claimType,

            string? id,

            string? name,

            ImmutableArray<string> scopes,

            string status,

            string value,

            string valueType)
        {
            AlwaysIncludeInToken = alwaysIncludeInToken;
            AuthServerId = authServerId;
            ClaimType = claimType;
            Id = id;
            Name = name;
            Scopes = scopes;
            Status = status;
            Value = value;
            ValueType = valueType;
        }
    }
}
