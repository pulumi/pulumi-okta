// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/realmAssignment:RealmAssignment")]
    public partial class RealmAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
        /// `user.profile.state.contains("example")`.
        /// </summary>
        [Output("conditionExpression")]
        public Output<string?> ConditionExpression { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the realm assignment is the default.
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Priority of the Realm Assignment. The lower the number, the higher the priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The ID of the Profile Source.
        /// </summary>
        [Output("profileSourceId")]
        public Output<string> ProfileSourceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Realm asscociated with the Realm Assignment.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        /// <summary>
        /// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a RealmAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RealmAssignment(string name, RealmAssignmentArgs args, CustomResourceOptions? options = null)
            : base("okta:index/realmAssignment:RealmAssignment", name, args ?? new RealmAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RealmAssignment(string name, Input<string> id, RealmAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/realmAssignment:RealmAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RealmAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RealmAssignment Get(string name, Input<string> id, RealmAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RealmAssignment(name, id, state, options);
        }
    }

    public sealed class RealmAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
        /// `user.profile.state.contains("example")`.
        /// </summary>
        [Input("conditionExpression")]
        public Input<string>? ConditionExpression { get; set; }

        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Priority of the Realm Assignment. The lower the number, the higher the priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the Profile Source.
        /// </summary>
        [Input("profileSourceId", required: true)]
        public Input<string> ProfileSourceId { get; set; } = null!;

        /// <summary>
        /// The ID of the Realm asscociated with the Realm Assignment.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public RealmAssignmentArgs()
        {
        }
        public static new RealmAssignmentArgs Empty => new RealmAssignmentArgs();
    }

    public sealed class RealmAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role =="Manager"` or
        /// `user.profile.state.contains("example")`.
        /// </summary>
        [Input("conditionExpression")]
        public Input<string>? ConditionExpression { get; set; }

        /// <summary>
        /// Indicates whether the realm assignment is the default.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// The name of the Okta Realm Assignment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Priority of the Realm Assignment. The lower the number, the higher the priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the Profile Source.
        /// </summary>
        [Input("profileSourceId")]
        public Input<string>? ProfileSourceId { get; set; }

        /// <summary>
        /// The ID of the Realm asscociated with the Realm Assignment.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        /// <summary>
        /// Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public RealmAssignmentState()
        {
        }
        public static new RealmAssignmentState Empty => new RealmAssignmentState();
    }
}
