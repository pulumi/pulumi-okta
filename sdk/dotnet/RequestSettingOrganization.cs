// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages request settings. This resource allows you to read and configure an Okta [request-setting](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Request-Settings/#tag/Request-Settings/operation/updateOrgRequestSettingsV2).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.RequestCondition("example", new()
    ///     {
    ///         ResourceId = "&lt;resource_id&gt;",
    ///         ApprovalSequenceId = "&lt;approval_sequence_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         AccessScopeSettings = new Okta.Inputs.RequestConditionAccessScopeSettingsArgs
    ///         {
    ///             Type = "RESOURCE_DEFAULT",
    ///         },
    ///         RequesterSettings = new Okta.Inputs.RequestConditionRequesterSettingsArgs
    ///         {
    ///             Type = "EVERYONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/requestSettingOrganization:RequestSettingOrganization example "default"
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/requestSettingOrganization:RequestSettingOrganization")]
    public partial class RequestSettingOrganization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Request condition id.
        /// </summary>
        [Output("idProperty")]
        public Output<string> IdProperty { get; private set; } = null!;

        /// <summary>
        /// Whether a customer has acknowledged Access Requests subprocessors.
        /// </summary>
        [Output("subprocessorsAcknowledged")]
        public Output<bool> SubprocessorsAcknowledged { get; private set; } = null!;


        /// <summary>
        /// Create a RequestSettingOrganization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RequestSettingOrganization(string name, RequestSettingOrganizationArgs args, CustomResourceOptions? options = null)
            : base("okta:index/requestSettingOrganization:RequestSettingOrganization", name, args ?? new RequestSettingOrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RequestSettingOrganization(string name, Input<string> id, RequestSettingOrganizationState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/requestSettingOrganization:RequestSettingOrganization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RequestSettingOrganization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RequestSettingOrganization Get(string name, Input<string> id, RequestSettingOrganizationState? state = null, CustomResourceOptions? options = null)
        {
            return new RequestSettingOrganization(name, id, state, options);
        }
    }

    public sealed class RequestSettingOrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Request condition id.
        /// </summary>
        [Input("idProperty", required: true)]
        public Input<string> IdProperty { get; set; } = null!;

        /// <summary>
        /// Whether a customer has acknowledged Access Requests subprocessors.
        /// </summary>
        [Input("subprocessorsAcknowledged")]
        public Input<bool>? SubprocessorsAcknowledged { get; set; }

        public RequestSettingOrganizationArgs()
        {
        }
        public static new RequestSettingOrganizationArgs Empty => new RequestSettingOrganizationArgs();
    }

    public sealed class RequestSettingOrganizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Request condition id.
        /// </summary>
        [Input("idProperty")]
        public Input<string>? IdProperty { get; set; }

        /// <summary>
        /// Whether a customer has acknowledged Access Requests subprocessors.
        /// </summary>
        [Input("subprocessorsAcknowledged")]
        public Input<bool>? SubprocessorsAcknowledged { get; set; }

        public RequestSettingOrganizationState()
        {
        }
        public static new RequestSettingOrganizationState Empty => new RequestSettingOrganizationState();
    }
}
