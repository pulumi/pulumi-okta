// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Creates different types of captcha.
    /// 		&gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 		This resource allows you to create and configure a CAPTCHA.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Captcha("example", new()
    ///     {
    ///         Name = "My CAPTCHA",
    ///         Type = "HCAPTCHA",
    ///         SiteKey = "some_key",
    ///         SecretKey = "some_secret_key",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/captcha:Captcha example &lt;captcha_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/captcha:Captcha")]
    public partial class Captcha : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the CAPTCHA
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;

        /// <summary>
        /// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
        /// </summary>
        [Output("siteKey")]
        public Output<string> SiteKey { get; private set; } = null!;

        /// <summary>
        /// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Captcha resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Captcha(string name, CaptchaArgs args, CustomResourceOptions? options = null)
            : base("okta:index/captcha:Captcha", name, args ?? new CaptchaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Captcha(string name, Input<string> id, CaptchaState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/captcha:Captcha", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Captcha resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Captcha Get(string name, Input<string> id, CaptchaState? state = null, CustomResourceOptions? options = null)
        {
            return new Captcha(name, id, state, options);
        }
    }

    public sealed class CaptchaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the CAPTCHA
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secretKey", required: true)]
        private Input<string>? _secretKey;

        /// <summary>
        /// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
        /// </summary>
        [Input("siteKey", required: true)]
        public Input<string> SiteKey { get; set; } = null!;

        /// <summary>
        /// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public CaptchaArgs()
        {
        }
        public static new CaptchaArgs Empty => new CaptchaArgs();
    }

    public sealed class CaptchaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the CAPTCHA
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
        /// </summary>
        [Input("siteKey")]
        public Input<string>? SiteKey { get; set; }

        /// <summary>
        /// Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CaptchaState()
        {
        }
        public static new CaptchaState Empty => new CaptchaState();
    }
}
