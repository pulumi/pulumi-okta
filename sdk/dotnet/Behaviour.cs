// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/behaviour:Behaviour")]
    public partial class Behaviour : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines the method and level of detail used to evaluate the behavior.
        /// </summary>
        [Output("locationGranularityType")]
        public Output<string?> LocationGranularityType { get; private set; } = null!;

        /// <summary>
        /// Name of the behavior
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of recent authentications used to evaluate the behavior.
        /// </summary>
        [Output("numberOfAuthentications")]
        public Output<int?> NumberOfAuthentications { get; private set; } = null!;

        /// <summary>
        /// Radius from location (in kilometers)
        /// </summary>
        [Output("radiusFromLocation")]
        public Output<int?> RadiusFromLocation { get; private set; } = null!;

        /// <summary>
        /// Behavior status: ACTIVE or INACTIVE.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Behavior type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Velocity (in kilometers per hour).
        /// </summary>
        [Output("velocity")]
        public Output<int?> Velocity { get; private set; } = null!;


        /// <summary>
        /// Create a Behaviour resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Behaviour(string name, BehaviourArgs args, CustomResourceOptions? options = null)
            : base("okta:index/behaviour:Behaviour", name, args ?? new BehaviourArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Behaviour(string name, Input<string> id, BehaviourState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/behaviour:Behaviour", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Behaviour resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Behaviour Get(string name, Input<string> id, BehaviourState? state = null, CustomResourceOptions? options = null)
        {
            return new Behaviour(name, id, state, options);
        }
    }

    public sealed class BehaviourArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the method and level of detail used to evaluate the behavior.
        /// </summary>
        [Input("locationGranularityType")]
        public Input<string>? LocationGranularityType { get; set; }

        /// <summary>
        /// Name of the behavior
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of recent authentications used to evaluate the behavior.
        /// </summary>
        [Input("numberOfAuthentications")]
        public Input<int>? NumberOfAuthentications { get; set; }

        /// <summary>
        /// Radius from location (in kilometers)
        /// </summary>
        [Input("radiusFromLocation")]
        public Input<int>? RadiusFromLocation { get; set; }

        /// <summary>
        /// Behavior status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Behavior type
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Velocity (in kilometers per hour).
        /// </summary>
        [Input("velocity")]
        public Input<int>? Velocity { get; set; }

        public BehaviourArgs()
        {
        }
        public static new BehaviourArgs Empty => new BehaviourArgs();
    }

    public sealed class BehaviourState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the method and level of detail used to evaluate the behavior.
        /// </summary>
        [Input("locationGranularityType")]
        public Input<string>? LocationGranularityType { get; set; }

        /// <summary>
        /// Name of the behavior
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of recent authentications used to evaluate the behavior.
        /// </summary>
        [Input("numberOfAuthentications")]
        public Input<int>? NumberOfAuthentications { get; set; }

        /// <summary>
        /// Radius from location (in kilometers)
        /// </summary>
        [Input("radiusFromLocation")]
        public Input<int>? RadiusFromLocation { get; set; }

        /// <summary>
        /// Behavior status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Behavior type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Velocity (in kilometers per hour).
        /// </summary>
        [Input("velocity")]
        public Input<int>? Velocity { get; set; }

        public BehaviourState()
        {
        }
        public static new BehaviourState Empty => new BehaviourState();
    }
}
