// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Outputs
{

    [OutputType]
    public sealed class GetPrincipalEntitlementsDataResult
    {
        /// <summary>
        /// The data type of the entitlement property.
        /// </summary>
        public readonly string DataType;
        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The value of an entitlement property.
        /// </summary>
        public readonly string ExternalValue;
        /// <summary>
        /// The id property of an entitlement.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The property that determines if the entitlement property can hold multiple values.
        /// </summary>
        public readonly bool MultiValue;
        /// <summary>
        /// The display name for an entitlement property.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Representation of a resource.
        /// </summary>
        public readonly Outputs.GetPrincipalEntitlementsDataParentResult? Parent;
        /// <summary>
        /// The Okta app instance, in ORN format.
        /// </summary>
        public readonly string ParentResourceOrn;
        /// <summary>
        /// The property that determines if the entitlement property is a required attribute
        /// </summary>
        public readonly bool Required;
        /// <summary>
        /// Representation of a principal.
        /// </summary>
        public readonly Outputs.GetPrincipalEntitlementsDataTargetPrincipalResult? TargetPrincipal;
        /// <summary>
        /// The Okta user id in ORN format.
        /// </summary>
        public readonly string TargetPrincipalOrn;
        /// <summary>
        /// Collection of entitlement values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrincipalEntitlementsDataValueResult> Values;

        [OutputConstructor]
        private GetPrincipalEntitlementsDataResult(
            string dataType,

            string description,

            string externalValue,

            string id,

            bool multiValue,

            string name,

            Outputs.GetPrincipalEntitlementsDataParentResult? parent,

            string parentResourceOrn,

            bool required,

            Outputs.GetPrincipalEntitlementsDataTargetPrincipalResult? targetPrincipal,

            string targetPrincipalOrn,

            ImmutableArray<Outputs.GetPrincipalEntitlementsDataValueResult> values)
        {
            DataType = dataType;
            Description = description;
            ExternalValue = externalValue;
            Id = id;
            MultiValue = multiValue;
            Name = name;
            Parent = parent;
            ParentResourceOrn = parentResourceOrn;
            Required = required;
            TargetPrincipal = targetPrincipal;
            TargetPrincipalOrn = targetPrincipalOrn;
            Values = values;
        }
    }
}
