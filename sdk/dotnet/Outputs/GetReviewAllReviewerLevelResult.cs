// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Outputs
{

    [OutputType]
    public sealed class GetReviewAllReviewerLevelResult
    {
        /// <summary>
        /// The ISO 8601 formatted date and time when the resource was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The id of user who created the resource.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
        /// </summary>
        public readonly string Decision;
        /// <summary>
        /// The ID of  review.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ISO 8601 formatted date and time when the object was last updated.
        /// </summary>
        public readonly string LastUpdated;
        /// <summary>
        /// The id of user who last updated the object.
        /// </summary>
        public readonly string LastUpdatedBy;
        public readonly Outputs.GetReviewAllReviewerLevelReviewerGroupProfileResult? ReviewerGroupProfile;
        public readonly string ReviewerLevel;
        public readonly Outputs.GetReviewAllReviewerLevelReviewerProfileResult? ReviewerProfile;
        /// <summary>
        /// The type of reviewer to which the review is assigned.
        /// </summary>
        public readonly string ReviewerType;

        [OutputConstructor]
        private GetReviewAllReviewerLevelResult(
            string created,

            string createdBy,

            string decision,

            string id,

            string lastUpdated,

            string lastUpdatedBy,

            Outputs.GetReviewAllReviewerLevelReviewerGroupProfileResult? reviewerGroupProfile,

            string reviewerLevel,

            Outputs.GetReviewAllReviewerLevelReviewerProfileResult? reviewerProfile,

            string reviewerType)
        {
            Created = created;
            CreatedBy = createdBy;
            Decision = decision;
            Id = id;
            LastUpdated = lastUpdated;
            LastUpdatedBy = lastUpdatedBy;
            ReviewerGroupProfile = reviewerGroupProfile;
            ReviewerLevel = reviewerLevel;
            ReviewerProfile = reviewerProfile;
            ReviewerType = reviewerType;
        }
    }
}
