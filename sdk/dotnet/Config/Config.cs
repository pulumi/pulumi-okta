// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Okta
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly Pulumi.Config __config = new Pulumi.Config("okta");

        private static readonly __Value<string?> _accessToken = new __Value<string?>(() => __config.Get("accessToken"));
        /// <summary>
        /// Bearer token granting privileges to Okta API.
        /// </summary>
        public static string? AccessToken
        {
            get => _accessToken.Get();
            set => _accessToken.Set(value);
        }

        private static readonly __Value<string?> _apiToken = new __Value<string?>(() => __config.Get("apiToken"));
        /// <summary>
        /// API Token granting privileges to Okta API.
        /// </summary>
        public static string? ApiToken
        {
            get => _apiToken.Get();
            set => _apiToken.Set(value);
        }

        private static readonly __Value<bool?> _backoff = new __Value<bool?>(() => __config.GetBoolean("backoff"));
        /// <summary>
        /// Use exponential back off strategy for rate limits.
        /// </summary>
        public static bool? Backoff
        {
            get => _backoff.Get();
            set => _backoff.Set(value);
        }

        private static readonly __Value<string?> _baseUrl = new __Value<string?>(() => __config.Get("baseUrl"));
        /// <summary>
        /// The Okta url. (Use 'oktapreview.com' for Okta testing)
        /// </summary>
        public static string? BaseUrl
        {
            get => _baseUrl.Get();
            set => _baseUrl.Set(value);
        }

        private static readonly __Value<string?> _clientId = new __Value<string?>(() => __config.Get("clientId"));
        /// <summary>
        /// API Token granting privileges to Okta API.
        /// </summary>
        public static string? ClientId
        {
            get => _clientId.Get();
            set => _clientId.Set(value);
        }

        private static readonly __Value<string?> _httpProxy = new __Value<string?>(() => __config.Get("httpProxy"));
        /// <summary>
        /// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        /// </summary>
        public static string? HttpProxy
        {
            get => _httpProxy.Get();
            set => _httpProxy.Set(value);
        }

        private static readonly __Value<int?> _logLevel = new __Value<int?>(() => __config.GetInt32("logLevel"));
        /// <summary>
        /// providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
        /// </summary>
        public static int? LogLevel
        {
            get => _logLevel.Get();
            set => _logLevel.Set(value);
        }

        private static readonly __Value<int?> _maxApiCapacity = new __Value<int?>(() => __config.GetInt32("maxApiCapacity"));
        /// <summary>
        /// (Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls
        /// to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:
        /// https://developer.okta.com/docs/reference/rl-global-mgmt/
        /// </summary>
        public static int? MaxApiCapacity
        {
            get => _maxApiCapacity.Get();
            set => _maxApiCapacity.Set(value);
        }

        private static readonly __Value<int?> _maxRetries = new __Value<int?>(() => __config.GetInt32("maxRetries"));
        /// <summary>
        /// maximum number of retries to attempt before erroring out.
        /// </summary>
        public static int? MaxRetries
        {
            get => _maxRetries.Get();
            set => _maxRetries.Set(value);
        }

        private static readonly __Value<int?> _maxWaitSeconds = new __Value<int?>(() => __config.GetInt32("maxWaitSeconds"));
        /// <summary>
        /// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        public static int? MaxWaitSeconds
        {
            get => _maxWaitSeconds.Get();
            set => _maxWaitSeconds.Set(value);
        }

        private static readonly __Value<int?> _minWaitSeconds = new __Value<int?>(() => __config.GetInt32("minWaitSeconds"));
        /// <summary>
        /// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        public static int? MinWaitSeconds
        {
            get => _minWaitSeconds.Get();
            set => _minWaitSeconds.Set(value);
        }

        private static readonly __Value<string?> _orgName = new __Value<string?>(() => __config.Get("orgName"));
        /// <summary>
        /// The organization to manage in Okta.
        /// </summary>
        public static string? OrgName
        {
            get => _orgName.Get();
            set => _orgName.Set(value);
        }

        private static readonly __Value<int?> _parallelism = new __Value<int?>(() => __config.GetInt32("parallelism"));
        /// <summary>
        /// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
        /// https://developer.okta.com/docs/api/getting_started/rate-limits.
        /// </summary>
        public static int? Parallelism
        {
            get => _parallelism.Get();
            set => _parallelism.Set(value);
        }

        private static readonly __Value<string?> _privateKey = new __Value<string?>(() => __config.Get("privateKey"));
        /// <summary>
        /// API Token granting privileges to Okta API.
        /// </summary>
        public static string? PrivateKey
        {
            get => _privateKey.Get();
            set => _privateKey.Set(value);
        }

        private static readonly __Value<string?> _privateKeyId = new __Value<string?>(() => __config.Get("privateKeyId"));
        /// <summary>
        /// API Token Id granting privileges to Okta API.
        /// </summary>
        public static string? PrivateKeyId
        {
            get => _privateKeyId.Get();
            set => _privateKeyId.Set(value);
        }

        private static readonly __Value<int?> _requestTimeout = new __Value<int?>(() => __config.GetInt32("requestTimeout"));
        /// <summary>
        /// Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
        /// value can be `300`.
        /// </summary>
        public static int? RequestTimeout
        {
            get => _requestTimeout.Get();
            set => _requestTimeout.Set(value);
        }

        private static readonly __Value<ImmutableArray<string>> _scopes = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("scopes"));
        /// <summary>
        /// API Token granting privileges to Okta API.
        /// </summary>
        public static ImmutableArray<string> Scopes
        {
            get => _scopes.Get();
            set => _scopes.Set(value);
        }

    }
}
