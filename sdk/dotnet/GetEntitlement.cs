// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetEntitlement
    {
        /// <summary>
        /// Get the entitlement belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlement.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEntitlementResult> InvokeAsync(GetEntitlementArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntitlementResult>("okta:index/getEntitlement:getEntitlement", args ?? new GetEntitlementArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlement belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlement.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntitlementResult> Invoke(GetEntitlementInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntitlementResult>("okta:index/getEntitlement:getEntitlement", args ?? new GetEntitlementInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlement belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlement.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntitlementResult> Invoke(GetEntitlementInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntitlementResult>("okta:index/getEntitlement:getEntitlement", args ?? new GetEntitlementInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntitlementArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("parent")]
        public Inputs.GetEntitlementParentArgs? Parent { get; set; }

        [Input("values")]
        private List<Inputs.GetEntitlementValueArgs>? _values;
        public List<Inputs.GetEntitlementValueArgs> Values
        {
            get => _values ?? (_values = new List<Inputs.GetEntitlementValueArgs>());
            set => _values = value;
        }

        public GetEntitlementArgs()
        {
        }
        public static new GetEntitlementArgs Empty => new GetEntitlementArgs();
    }

    public sealed class GetEntitlementInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("parent")]
        public Input<Inputs.GetEntitlementParentInputArgs>? Parent { get; set; }

        [Input("values")]
        private InputList<Inputs.GetEntitlementValueInputArgs>? _values;
        public InputList<Inputs.GetEntitlementValueInputArgs> Values
        {
            get => _values ?? (_values = new InputList<Inputs.GetEntitlementValueInputArgs>());
            set => _values = value;
        }

        public GetEntitlementInvokeArgs()
        {
        }
        public static new GetEntitlementInvokeArgs Empty => new GetEntitlementInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntitlementResult
    {
        public readonly string DataType;
        public readonly string ExternalValue;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly bool MultiValue;
        public readonly string Name;
        public readonly Outputs.GetEntitlementParentResult? Parent;
        public readonly string ParentResourceOrn;
        public readonly ImmutableArray<Outputs.GetEntitlementValueResult> Values;

        [OutputConstructor]
        private GetEntitlementResult(
            string dataType,

            string externalValue,

            string id,

            bool multiValue,

            string name,

            Outputs.GetEntitlementParentResult? parent,

            string parentResourceOrn,

            ImmutableArray<Outputs.GetEntitlementValueResult> values)
        {
            DataType = dataType;
            ExternalValue = externalValue;
            Id = id;
            MultiValue = multiValue;
            Name = name;
            Parent = parent;
            ParentResourceOrn = parentResourceOrn;
            Values = values;
        }
    }
}
