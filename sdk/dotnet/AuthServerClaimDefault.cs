// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Configures Default Authorization Server Claim.
    /// 
    /// This resource allows you to configure Default Authorization Server Claims.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.AuthServerClaimDefault("example", new()
    ///     {
    ///         AuthServerId = "&lt;auth server id&gt;",
    ///         Value = "(appuser != null) ? appuser.userName : app.clientId",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Authorization Server Claim can be imported via the Auth Server ID and Claim ID or Claim Name.
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/authServerClaimDefault:AuthServerClaimDefault example &amp;#60;auth server id&amp;#62;/&amp;#60;claim id&amp;#62;
    /// ```
    /// 
    ///  or
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/authServerClaimDefault:AuthServerClaimDefault example &amp;#60;auth server id&amp;#62;/&amp;#60;claim name&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/authServerClaimDefault:AuthServerClaimDefault")]
    public partial class AuthServerClaimDefault : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to include claims in token.
        /// </summary>
        [Output("alwaysIncludeInToken")]
        public Output<bool> AlwaysIncludeInToken { get; private set; } = null!;

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Output("authServerId")]
        public Output<string> AuthServerId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
        /// </summary>
        [Output("claimType")]
        public Output<string> ClaimType { get; private set; } = null!;

        /// <summary>
        /// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
        /// `"email_verified"`, `"family_name"`, `"gender"`, `"given_name"`, `"locale"`, `"middle_name"`, `"name"`, `"nickname"`,
        /// `"phone_number"`, `"picture"`, `"preferred_username"`, `"profile"`, `"updated_at"`, `"website"`, `"zoneinfo"`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of scopes the auth server claim is tied to.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The status of the application.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The value of the claim. Only required for `"sub"` claim.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;

        /// <summary>
        /// The type of value of the claim.
        /// </summary>
        [Output("valueType")]
        public Output<string> ValueType { get; private set; } = null!;


        /// <summary>
        /// Create a AuthServerClaimDefault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthServerClaimDefault(string name, AuthServerClaimDefaultArgs args, CustomResourceOptions? options = null)
            : base("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, args ?? new AuthServerClaimDefaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthServerClaimDefault(string name, Input<string> id, AuthServerClaimDefaultState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/authServerClaimDefault:AuthServerClaimDefault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthServerClaimDefault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthServerClaimDefault Get(string name, Input<string> id, AuthServerClaimDefaultState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthServerClaimDefault(name, id, state, options);
        }
    }

    public sealed class AuthServerClaimDefaultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to include claims in token.
        /// </summary>
        [Input("alwaysIncludeInToken")]
        public Input<bool>? AlwaysIncludeInToken { get; set; }

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Input("authServerId", required: true)]
        public Input<string> AuthServerId { get; set; } = null!;

        /// <summary>
        /// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
        /// `"email_verified"`, `"family_name"`, `"gender"`, `"given_name"`, `"locale"`, `"middle_name"`, `"name"`, `"nickname"`,
        /// `"phone_number"`, `"picture"`, `"preferred_username"`, `"profile"`, `"updated_at"`, `"website"`, `"zoneinfo"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The value of the claim. Only required for `"sub"` claim.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public AuthServerClaimDefaultArgs()
        {
        }
        public static new AuthServerClaimDefaultArgs Empty => new AuthServerClaimDefaultArgs();
    }

    public sealed class AuthServerClaimDefaultState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to include claims in token.
        /// </summary>
        [Input("alwaysIncludeInToken")]
        public Input<bool>? AlwaysIncludeInToken { get; set; }

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Input("authServerId")]
        public Input<string>? AuthServerId { get; set; }

        /// <summary>
        /// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
        /// </summary>
        [Input("claimType")]
        public Input<string>? ClaimType { get; set; }

        /// <summary>
        /// The name of the claim. Can be set to `"sub"`, `"address"`, `"birthdate"`, `"email"`,
        /// `"email_verified"`, `"family_name"`, `"gender"`, `"given_name"`, `"locale"`, `"middle_name"`, `"name"`, `"nickname"`,
        /// `"phone_number"`, `"picture"`, `"preferred_username"`, `"profile"`, `"updated_at"`, `"website"`, `"zoneinfo"`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of scopes the auth server claim is tied to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The status of the application.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The value of the claim. Only required for `"sub"` claim.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The type of value of the claim.
        /// </summary>
        [Input("valueType")]
        public Input<string>? ValueType { get; set; }

        public AuthServerClaimDefaultState()
        {
        }
        public static new AuthServerClaimDefaultState Empty => new AuthServerClaimDefaultState();
    }
}
