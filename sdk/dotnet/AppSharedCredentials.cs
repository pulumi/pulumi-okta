// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// This resource allows you to create and configure SWA shared credentials app.
    /// 
    /// &gt; During an apply if there is change in `status` the app will first be
    /// activated or deactivated in accordance with the `status` change. Then, all
    /// other arguments that changed will be applied.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.AppSharedCredentials("example", new()
    ///     {
    ///         AccessibilityErrorRedirectUrl = "https://example.com/redirect_url_1",
    ///         AccessibilityLoginRedirectUrl = "https://example.com/redirect_url_2",
    ///         AccessibilitySelfService = true,
    ///         AutoSubmitToolbar = true,
    ///         ButtonField = "btn-login",
    ///         Checkbox = "checkbox_red",
    ///         HideIos = true,
    ///         Label = "Example App",
    ///         PasswordField = "txtbox-password",
    ///         RedirectUrl = "https://example.com/redirect_url",
    ///         SharedPassword = "sharedpass",
    ///         SharedUsername = "sharedusername",
    ///         Status = "ACTIVE",
    ///         Url = "https://example.com/login.html",
    ///         UserNameTemplate = "user.firstName",
    ///         UserNameTemplateSuffix = "hello",
    ///         UserNameTemplateType = "CUSTOM",
    ///         UsernameField = "txtbox-username",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Okta SWA Shared Credentials App can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/appSharedCredentials:AppSharedCredentials example &amp;#60;app id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/appSharedCredentials:AppSharedCredentials")]
    public partial class AppSharedCredentials : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Output("accessibilityErrorRedirectUrl")]
        public Output<string?> AccessibilityErrorRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Output("accessibilityLoginRedirectUrl")]
        public Output<string?> AccessibilityLoginRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Enable self-service. By default, it is `false`.
        /// </summary>
        [Output("accessibilitySelfService")]
        public Output<bool?> AccessibilitySelfService { get; private set; } = null!;

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Output("adminNote")]
        public Output<string?> AdminNote { get; private set; } = null!;

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Output("appLinksJson")]
        public Output<string?> AppLinksJson { get; private set; } = null!;

        /// <summary>
        /// Display auto submit toolbar.
        /// </summary>
        [Output("autoSubmitToolbar")]
        public Output<bool?> AutoSubmitToolbar { get; private set; } = null!;

        /// <summary>
        /// CSS selector for the Sign-In button in the sign-in form.
        /// </summary>
        [Output("buttonField")]
        public Output<string?> ButtonField { get; private set; } = null!;

        /// <summary>
        /// CSS selector for the checkbox.
        /// </summary>
        [Output("checkbox")]
        public Output<string?> Checkbox { get; private set; } = null!;

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Output("enduserNote")]
        public Output<string?> EnduserNote { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon on mobile app.
        /// </summary>
        [Output("hideIos")]
        public Output<bool?> HideIos { get; private set; } = null!;

        /// <summary>
        /// Do not display application icon to users.
        /// </summary>
        [Output("hideWeb")]
        public Output<bool?> HideWeb { get; private set; } = null!;

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Output("logo")]
        public Output<string?> Logo { get; private set; } = null!;

        /// <summary>
        /// Direct link of application logo.
        /// </summary>
        [Output("logoUrl")]
        public Output<string> LogoUrl { get; private set; } = null!;

        /// <summary>
        /// Name assigned to the application by Okta.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// CSS selector for the Password field in the sign-in form.
        /// </summary>
        [Output("passwordField")]
        public Output<string?> PasswordField { get; private set; } = null!;

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.
        /// </summary>
        [Output("preconfiguredApp")]
        public Output<string?> PreconfiguredApp { get; private set; } = null!;

        /// <summary>
        /// Redirect URL. If going to the login page URL redirects to another page, then enter that URL here.
        /// </summary>
        [Output("redirectUrl")]
        public Output<string?> RedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Output("sharedPassword")]
        public Output<string?> SharedPassword { get; private set; } = null!;

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Output("sharedUsername")]
        public Output<string?> SharedUsername { get; private set; } = null!;

        /// <summary>
        /// Authentication mode of app.
        /// </summary>
        [Output("signOnMode")]
        public Output<string> SignOnMode { get; private set; } = null!;

        /// <summary>
        /// The status of the application, by default, it is `"ACTIVE"`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The URL of the sign-in page for this app.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// A regular expression that further restricts url to the specified regular expression.
        /// </summary>
        [Output("urlRegex")]
        public Output<string?> UrlRegex { get; private set; } = null!;

        /// <summary>
        /// Username template. Default: `"${source.login}"`
        /// </summary>
        [Output("userNameTemplate")]
        public Output<string?> UserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Output("userNameTemplatePushStatus")]
        public Output<string?> UserNameTemplatePushStatus { get; private set; } = null!;

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Output("userNameTemplateSuffix")]
        public Output<string?> UserNameTemplateSuffix { get; private set; } = null!;

        /// <summary>
        /// Username template type. Default: `"BUILT_IN"`.
        /// </summary>
        [Output("userNameTemplateType")]
        public Output<string?> UserNameTemplateType { get; private set; } = null!;

        /// <summary>
        /// CSS selector for the username field.
        /// </summary>
        [Output("usernameField")]
        public Output<string?> UsernameField { get; private set; } = null!;


        /// <summary>
        /// Create a AppSharedCredentials resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSharedCredentials(string name, AppSharedCredentialsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/appSharedCredentials:AppSharedCredentials", name, args ?? new AppSharedCredentialsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSharedCredentials(string name, Input<string> id, AppSharedCredentialsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/appSharedCredentials:AppSharedCredentials", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSharedCredentials resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSharedCredentials Get(string name, Input<string> id, AppSharedCredentialsState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSharedCredentials(name, id, state, options);
        }
    }

    public sealed class AppSharedCredentialsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self-service. By default, it is `false`.
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Display auto submit toolbar.
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// CSS selector for the Sign-In button in the sign-in form.
        /// </summary>
        [Input("buttonField")]
        public Input<string>? ButtonField { get; set; }

        /// <summary>
        /// CSS selector for the checkbox.
        /// </summary>
        [Input("checkbox")]
        public Input<string>? Checkbox { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        /// <summary>
        /// Do not display application icon on mobile app.
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users.
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// CSS selector for the Password field in the sign-in form.
        /// </summary>
        [Input("passwordField")]
        public Input<string>? PasswordField { get; set; }

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.
        /// </summary>
        [Input("preconfiguredApp")]
        public Input<string>? PreconfiguredApp { get; set; }

        /// <summary>
        /// Redirect URL. If going to the login page URL redirects to another page, then enter that URL here.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Input("sharedPassword")]
        public Input<string>? SharedPassword { get; set; }

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Input("sharedUsername")]
        public Input<string>? SharedUsername { get; set; }

        /// <summary>
        /// The status of the application, by default, it is `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The URL of the sign-in page for this app.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// A regular expression that further restricts url to the specified regular expression.
        /// </summary>
        [Input("urlRegex")]
        public Input<string>? UrlRegex { get; set; }

        /// <summary>
        /// Username template. Default: `"${source.login}"`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default: `"BUILT_IN"`.
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        /// <summary>
        /// CSS selector for the username field.
        /// </summary>
        [Input("usernameField")]
        public Input<string>? UsernameField { get; set; }

        public AppSharedCredentialsArgs()
        {
        }
        public static new AppSharedCredentialsArgs Empty => new AppSharedCredentialsArgs();
    }

    public sealed class AppSharedCredentialsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom error page URL.
        /// </summary>
        [Input("accessibilityErrorRedirectUrl")]
        public Input<string>? AccessibilityErrorRedirectUrl { get; set; }

        /// <summary>
        /// Custom login page for this application.
        /// </summary>
        [Input("accessibilityLoginRedirectUrl")]
        public Input<string>? AccessibilityLoginRedirectUrl { get; set; }

        /// <summary>
        /// Enable self-service. By default, it is `false`.
        /// </summary>
        [Input("accessibilitySelfService")]
        public Input<bool>? AccessibilitySelfService { get; set; }

        /// <summary>
        /// Application notes for admins.
        /// </summary>
        [Input("adminNote")]
        public Input<string>? AdminNote { get; set; }

        /// <summary>
        /// Displays specific appLinks for the app. The value for each application link should be boolean.
        /// </summary>
        [Input("appLinksJson")]
        public Input<string>? AppLinksJson { get; set; }

        /// <summary>
        /// Display auto submit toolbar.
        /// </summary>
        [Input("autoSubmitToolbar")]
        public Input<bool>? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// CSS selector for the Sign-In button in the sign-in form.
        /// </summary>
        [Input("buttonField")]
        public Input<string>? ButtonField { get; set; }

        /// <summary>
        /// CSS selector for the checkbox.
        /// </summary>
        [Input("checkbox")]
        public Input<string>? Checkbox { get; set; }

        /// <summary>
        /// Application notes for end users.
        /// </summary>
        [Input("enduserNote")]
        public Input<string>? EnduserNote { get; set; }

        /// <summary>
        /// Do not display application icon on mobile app.
        /// </summary>
        [Input("hideIos")]
        public Input<bool>? HideIos { get; set; }

        /// <summary>
        /// Do not display application icon to users.
        /// </summary>
        [Input("hideWeb")]
        public Input<bool>? HideWeb { get; set; }

        /// <summary>
        /// The Application's display name.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// Direct link of application logo.
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// Name assigned to the application by Okta.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// CSS selector for the Password field in the sign-in form.
        /// </summary>
        [Input("passwordField")]
        public Input<string>? PasswordField { get; set; }

        /// <summary>
        /// name of application from the Okta Integration Network, if not included a custom app will be created.
        /// </summary>
        [Input("preconfiguredApp")]
        public Input<string>? PreconfiguredApp { get; set; }

        /// <summary>
        /// Redirect URL. If going to the login page URL redirects to another page, then enter that URL here.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Shared password, required for certain schemes.
        /// </summary>
        [Input("sharedPassword")]
        public Input<string>? SharedPassword { get; set; }

        /// <summary>
        /// Shared username, required for certain schemes.
        /// </summary>
        [Input("sharedUsername")]
        public Input<string>? SharedUsername { get; set; }

        /// <summary>
        /// Authentication mode of app.
        /// </summary>
        [Input("signOnMode")]
        public Input<string>? SignOnMode { get; set; }

        /// <summary>
        /// The status of the application, by default, it is `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The URL of the sign-in page for this app.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// A regular expression that further restricts url to the specified regular expression.
        /// </summary>
        [Input("urlRegex")]
        public Input<string>? UrlRegex { get; set; }

        /// <summary>
        /// Username template. Default: `"${source.login}"`
        /// </summary>
        [Input("userNameTemplate")]
        public Input<string>? UserNameTemplate { get; set; }

        /// <summary>
        /// Push username on update. Valid values: `"PUSH"` and `"DONT_PUSH"`.
        /// </summary>
        [Input("userNameTemplatePushStatus")]
        public Input<string>? UserNameTemplatePushStatus { get; set; }

        /// <summary>
        /// Username template suffix.
        /// </summary>
        [Input("userNameTemplateSuffix")]
        public Input<string>? UserNameTemplateSuffix { get; set; }

        /// <summary>
        /// Username template type. Default: `"BUILT_IN"`.
        /// </summary>
        [Input("userNameTemplateType")]
        public Input<string>? UserNameTemplateType { get; set; }

        /// <summary>
        /// CSS selector for the username field.
        /// </summary>
        [Input("usernameField")]
        public Input<string>? UsernameField { get; set; }

        public AppSharedCredentialsState()
        {
        }
        public static new AppSharedCredentialsState Empty => new AppSharedCredentialsState();
    }
}
