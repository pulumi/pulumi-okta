// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetPrincipalRateLimits
    {
        /// <summary>
        /// Get the entitlements for a user and resource after evaluating all grants.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetPrincipalRateLimits.Invoke(new()
        ///     {
        ///         Id = "&lt;principal_rate_limit_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPrincipalRateLimitsResult> InvokeAsync(GetPrincipalRateLimitsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrincipalRateLimitsResult>("okta:index/getPrincipalRateLimits:getPrincipalRateLimits", args ?? new GetPrincipalRateLimitsArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlements for a user and resource after evaluating all grants.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetPrincipalRateLimits.Invoke(new()
        ///     {
        ///         Id = "&lt;principal_rate_limit_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPrincipalRateLimitsResult> Invoke(GetPrincipalRateLimitsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrincipalRateLimitsResult>("okta:index/getPrincipalRateLimits:getPrincipalRateLimits", args ?? new GetPrincipalRateLimitsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlements for a user and resource after evaluating all grants.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetPrincipalRateLimits.Invoke(new()
        ///     {
        ///         Id = "&lt;principal_rate_limit_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPrincipalRateLimitsResult> Invoke(GetPrincipalRateLimitsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrincipalRateLimitsResult>("okta:index/getPrincipalRateLimits:getPrincipalRateLimits", args ?? new GetPrincipalRateLimitsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrincipalRateLimitsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the principle rate limit entity.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetPrincipalRateLimitsArgs()
        {
        }
        public static new GetPrincipalRateLimitsArgs Empty => new GetPrincipalRateLimitsArgs();
    }

    public sealed class GetPrincipalRateLimitsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the principle rate limit entity.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetPrincipalRateLimitsInvokeArgs()
        {
        }
        public static new GetPrincipalRateLimitsInvokeArgs Empty => new GetPrincipalRateLimitsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrincipalRateLimitsResult
    {
        /// <summary>
        /// The ID of the user who created the principal rate limit.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The date and time when the principal rate limit was created.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The default concurrency percentage for the principal rate limit.
        /// </summary>
        public readonly int DefaultConcurrencyPercentage;
        /// <summary>
        /// The default percentage for the principal rate limit.
        /// </summary>
        public readonly int DefaultPercentage;
        /// <summary>
        /// The unique identifier of the principle rate limit entity.
        /// </summary>
        public readonly string Id;
        public readonly string LastUpdate;
        /// <summary>
        /// The ID of the user who last updated the principal rate limit.
        /// </summary>
        public readonly string LastUpdatedBy;
        /// <summary>
        /// The unique identifier of the Okta organization.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The type of principal, either an API token or an OAuth 2.0 app.
        /// </summary>
        public readonly string PrincipalType;

        [OutputConstructor]
        private GetPrincipalRateLimitsResult(
            string createdBy,

            string createdDate,

            int defaultConcurrencyPercentage,

            int defaultPercentage,

            string id,

            string lastUpdate,

            string lastUpdatedBy,

            string orgId,

            string principalId,

            string principalType)
        {
            CreatedBy = createdBy;
            CreatedDate = createdDate;
            DefaultConcurrencyPercentage = defaultConcurrencyPercentage;
            DefaultPercentage = defaultPercentage;
            Id = id;
            LastUpdate = lastUpdate;
            LastUpdatedBy = lastUpdatedBy;
            OrgId = orgId;
            PrincipalId = principalId;
            PrincipalType = principalType;
        }
    }
}
