// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/principalRateLimits:PrincipalRateLimits")]
    public partial class PrincipalRateLimits : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Okta user ID of the user who created the principle rate limit entity.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The date and time the principle rate limit entity was created.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The default percentage of a given concurrency limit threshold that the owning principal can consume.
        /// </summary>
        [Output("defaultConcurrencyPercentage")]
        public Output<int> DefaultConcurrencyPercentage { get; private set; } = null!;

        /// <summary>
        /// The default percentage of a given rate limit threshold that the owning principal can consume.
        /// </summary>
        [Output("defaultPercentage")]
        public Output<int> DefaultPercentage { get; private set; } = null!;

        /// <summary>
        /// The date and time the principle rate limit entity was last updated.
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// The Okta user ID of the user who last updated the principle rate limit entity.
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Okta org.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The type of principal, either an API token or an OAuth 2.0 app.
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;


        /// <summary>
        /// Create a PrincipalRateLimits resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrincipalRateLimits(string name, PrincipalRateLimitsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/principalRateLimits:PrincipalRateLimits", name, args ?? new PrincipalRateLimitsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrincipalRateLimits(string name, Input<string> id, PrincipalRateLimitsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/principalRateLimits:PrincipalRateLimits", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrincipalRateLimits resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrincipalRateLimits Get(string name, Input<string> id, PrincipalRateLimitsState? state = null, CustomResourceOptions? options = null)
        {
            return new PrincipalRateLimits(name, id, state, options);
        }
    }

    public sealed class PrincipalRateLimitsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default percentage of a given concurrency limit threshold that the owning principal can consume.
        /// </summary>
        [Input("defaultConcurrencyPercentage")]
        public Input<int>? DefaultConcurrencyPercentage { get; set; }

        /// <summary>
        /// The default percentage of a given rate limit threshold that the owning principal can consume.
        /// </summary>
        [Input("defaultPercentage")]
        public Input<int>? DefaultPercentage { get; set; }

        /// <summary>
        /// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The type of principal, either an API token or an OAuth 2.0 app.
        /// </summary>
        [Input("principalType", required: true)]
        public Input<string> PrincipalType { get; set; } = null!;

        public PrincipalRateLimitsArgs()
        {
        }
        public static new PrincipalRateLimitsArgs Empty => new PrincipalRateLimitsArgs();
    }

    public sealed class PrincipalRateLimitsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Okta user ID of the user who created the principle rate limit entity.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The date and time the principle rate limit entity was created.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The default percentage of a given concurrency limit threshold that the owning principal can consume.
        /// </summary>
        [Input("defaultConcurrencyPercentage")]
        public Input<int>? DefaultConcurrencyPercentage { get; set; }

        /// <summary>
        /// The default percentage of a given rate limit threshold that the owning principal can consume.
        /// </summary>
        [Input("defaultPercentage")]
        public Input<int>? DefaultPercentage { get; set; }

        /// <summary>
        /// The date and time the principle rate limit entity was last updated.
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// The Okta user ID of the user who last updated the principle rate limit entity.
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// The unique identifier of the Okta org.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The type of principal, either an API token or an OAuth 2.0 app.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        public PrincipalRateLimitsState()
        {
        }
        public static new PrincipalRateLimitsState Empty => new PrincipalRateLimitsState();
    }
}
