// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 
    /// A [profile enrollment
    /// policy](https://developer.okta.com/docs/reference/api/policy/#profile-enrollment-policy)
    /// is limited to one default rule. This resource does not create a rule for an
    /// enrollment policy, it allows the default policy rule to be updated.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.PolicyProfileEnrollment("example", new()
    ///     {
    ///         Name = "My Enrollment Policy",
    ///     });
    /// 
    ///     var exampleHook = new Okta.Inline.Hook("example", new()
    ///     {
    ///         Name = "My Inline Hook",
    ///         Status = "ACTIVE",
    ///         Type = "com.okta.user.pre-registration",
    ///         Version = "1.0.3",
    ///         Channel = 
    ///         {
    ///             { "type", "HTTP" },
    ///             { "version", "1.0.0" },
    ///             { "uri", "https://example.com/test2" },
    ///             { "method", "POST" },
    ///         },
    ///     });
    /// 
    ///     var exampleGroup = new Okta.Group.Group("example", new()
    ///     {
    ///         Name = "My Group",
    ///         Description = "Group of some users",
    ///     });
    /// 
    ///     var examplePolicyRuleProfileEnrollment = new Okta.PolicyRuleProfileEnrollment("example", new()
    ///     {
    ///         PolicyId = example.Id,
    ///         InlineHookId = exampleHook.Id,
    ///         TargetGroupId = exampleGroup.Id,
    ///         UnknownUserAction = "REGISTER",
    ///         EmailVerification = true,
    ///         Access = "ALLOW",
    ///         ProfileAttributes = new[]
    ///         {
    ///             new Okta.Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs
    ///             {
    ///                 Name = "email",
    ///                 Label = "Email",
    ///                 Required = true,
    ///             },
    ///             new Okta.Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs
    ///             {
    ///                 Name = "name",
    ///                 Label = "Name",
    ///                 Required = true,
    ///             },
    ///             new Okta.Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs
    ///             {
    ///                 Name = "t-shirt",
    ///                 Label = "T-Shirt Size",
    ///                 Required = false,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Policy Rule can be imported via the Policy and Rule ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment example &amp;#60;policy id&amp;#62;/&amp;#60;rule id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment")]
    public partial class PolicyRuleProfileEnrollment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// Indicates whether email verification should occur before access is granted. Default is `true`.
        /// </summary>
        [Output("emailVerification")]
        public Output<bool?> EmailVerification { get; private set; } = null!;

        /// <summary>
        /// ID of a Registration Inline Hook.
        /// </summary>
        [Output("inlineHookId")]
        public Output<string?> InlineHookId { get; private set; } = null!;

        /// <summary>
        /// Name of the Rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
        /// </summary>
        [Output("profileAttributes")]
        public Output<ImmutableArray<Outputs.PolicyRuleProfileEnrollmentProfileAttribute>> ProfileAttributes { get; private set; } = null!;

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions. Valid values are: `"ENABLED"`, `"DISABLED"`. Default is `"DISABLED"`.
        /// </summary>
        [Output("progressiveProfilingAction")]
        public Output<string?> ProgressiveProfilingAction { get; private set; } = null!;

        /// <summary>
        /// Status of the Rule.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of a Group that this User should be added to.
        /// </summary>
        [Output("targetGroupId")]
        public Output<string?> TargetGroupId { get; private set; } = null!;

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Output("uiSchemaId")]
        public Output<string?> UiSchemaId { get; private set; } = null!;

        /// <summary>
        /// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
        /// </summary>
        [Output("unknownUserAction")]
        public Output<string> UnknownUserAction { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyRuleProfileEnrollment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyRuleProfileEnrollment(string name, PolicyRuleProfileEnrollmentArgs args, CustomResourceOptions? options = null)
            : base("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, args ?? new PolicyRuleProfileEnrollmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyRuleProfileEnrollment(string name, Input<string> id, PolicyRuleProfileEnrollmentState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyRuleProfileEnrollment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyRuleProfileEnrollment Get(string name, Input<string> id, PolicyRuleProfileEnrollmentState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyRuleProfileEnrollment(name, id, state, options);
        }
    }

    public sealed class PolicyRuleProfileEnrollmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Indicates whether email verification should occur before access is granted. Default is `true`.
        /// </summary>
        [Input("emailVerification")]
        public Input<bool>? EmailVerification { get; set; }

        /// <summary>
        /// ID of a Registration Inline Hook.
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        [Input("profileAttributes")]
        private InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs>? _profileAttributes;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
        /// </summary>
        public InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs> ProfileAttributes
        {
            get => _profileAttributes ?? (_profileAttributes = new InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs>());
            set => _profileAttributes = value;
        }

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions. Valid values are: `"ENABLED"`, `"DISABLED"`. Default is `"DISABLED"`.
        /// </summary>
        [Input("progressiveProfilingAction")]
        public Input<string>? ProgressiveProfilingAction { get; set; }

        /// <summary>
        /// The ID of a Group that this User should be added to.
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Input("uiSchemaId")]
        public Input<string>? UiSchemaId { get; set; }

        /// <summary>
        /// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
        /// </summary>
        [Input("unknownUserAction", required: true)]
        public Input<string> UnknownUserAction { get; set; } = null!;

        public PolicyRuleProfileEnrollmentArgs()
        {
        }
        public static new PolicyRuleProfileEnrollmentArgs Empty => new PolicyRuleProfileEnrollmentArgs();
    }

    public sealed class PolicyRuleProfileEnrollmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions. Valid values are: `"ALLOW"`, `"DENY"`. Default is `"ALLOW"`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Indicates whether email verification should occur before access is granted. Default is `true`.
        /// </summary>
        [Input("emailVerification")]
        public Input<bool>? EmailVerification { get; set; }

        /// <summary>
        /// ID of a Registration Inline Hook.
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// Name of the Rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        [Input("profileAttributes")]
        private InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs>? _profileAttributes;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling. Where defined on the User schema, these attributes are persisted in the User profile. Non-schema attributes may also be added, which aren't persisted to the User's profile, but are included in requests to the registration inline hook. A maximum of 10 Profile properties is supported.
        /// </summary>
        public InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs> ProfileAttributes
        {
            get => _profileAttributes ?? (_profileAttributes = new InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs>());
            set => _profileAttributes = value;
        }

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions. Valid values are: `"ENABLED"`, `"DISABLED"`. Default is `"DISABLED"`.
        /// </summary>
        [Input("progressiveProfilingAction")]
        public Input<string>? ProgressiveProfilingAction { get; set; }

        /// <summary>
        /// Status of the Rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of a Group that this User should be added to.
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Input("uiSchemaId")]
        public Input<string>? UiSchemaId { get; set; }

        /// <summary>
        /// Which action should be taken if this User is new. Valid values are: `"DENY"`, `"REGISTER"`.
        /// </summary>
        [Input("unknownUserAction")]
        public Input<string>? UnknownUserAction { get; set; }

        public PolicyRuleProfileEnrollmentState()
        {
        }
        public static new PolicyRuleProfileEnrollmentState Empty => new PolicyRuleProfileEnrollmentState();
    }
}
