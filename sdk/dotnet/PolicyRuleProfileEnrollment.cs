// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment")]
    public partial class PolicyRuleProfileEnrollment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// Indicates whether email verification should occur before access is granted
        /// </summary>
        [Output("emailVerification")]
        public Output<bool?> EmailVerification { get; private set; } = null!;

        /// <summary>
        /// ID of a Registration Inline Hook
        /// </summary>
        [Output("inlineHookId")]
        public Output<string?> InlineHookId { get; private set; } = null!;

        /// <summary>
        /// The name of a User Profile property
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling
        /// </summary>
        [Output("profileAttributes")]
        public Output<ImmutableArray<Outputs.PolicyRuleProfileEnrollmentProfileAttribute>> ProfileAttributes { get; private set; } = null!;

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED
        /// </summary>
        [Output("progressiveProfilingAction")]
        public Output<string?> ProgressiveProfilingAction { get; private set; } = null!;

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of a Group that this User should be added to
        /// </summary>
        [Output("targetGroupId")]
        public Output<string?> TargetGroupId { get; private set; } = null!;

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Output("uiSchemaId")]
        public Output<string?> UiSchemaId { get; private set; } = null!;

        /// <summary>
        /// Which action should be taken if this User is new
        /// </summary>
        [Output("unknownUserAction")]
        public Output<string> UnknownUserAction { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyRuleProfileEnrollment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyRuleProfileEnrollment(string name, PolicyRuleProfileEnrollmentArgs args, CustomResourceOptions? options = null)
            : base("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, args ?? new PolicyRuleProfileEnrollmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyRuleProfileEnrollment(string name, Input<string> id, PolicyRuleProfileEnrollmentState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyRuleProfileEnrollment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyRuleProfileEnrollment Get(string name, Input<string> id, PolicyRuleProfileEnrollmentState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyRuleProfileEnrollment(name, id, state, options);
        }
    }

    public sealed class PolicyRuleProfileEnrollmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Indicates whether email verification should occur before access is granted
        /// </summary>
        [Input("emailVerification")]
        public Input<bool>? EmailVerification { get; set; }

        /// <summary>
        /// ID of a Registration Inline Hook
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        [Input("profileAttributes")]
        private InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs>? _profileAttributes;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling
        /// </summary>
        public InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs> ProfileAttributes
        {
            get => _profileAttributes ?? (_profileAttributes = new InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs>());
            set => _profileAttributes = value;
        }

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED
        /// </summary>
        [Input("progressiveProfilingAction")]
        public Input<string>? ProgressiveProfilingAction { get; set; }

        /// <summary>
        /// The ID of a Group that this User should be added to
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Input("uiSchemaId")]
        public Input<string>? UiSchemaId { get; set; }

        /// <summary>
        /// Which action should be taken if this User is new
        /// </summary>
        [Input("unknownUserAction", required: true)]
        public Input<string> UnknownUserAction { get; set; } = null!;

        public PolicyRuleProfileEnrollmentArgs()
        {
        }
        public static new PolicyRuleProfileEnrollmentArgs Empty => new PolicyRuleProfileEnrollmentArgs();
    }

    public sealed class PolicyRuleProfileEnrollmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or deny access based on the rule conditions: ALLOW or DENY
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Indicates whether email verification should occur before access is granted
        /// </summary>
        [Input("emailVerification")]
        public Input<bool>? EmailVerification { get; set; }

        /// <summary>
        /// ID of a Registration Inline Hook
        /// </summary>
        [Input("inlineHookId")]
        public Input<string>? InlineHookId { get; set; }

        /// <summary>
        /// The name of a User Profile property
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the policy
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        [Input("profileAttributes")]
        private InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs>? _profileAttributes;

        /// <summary>
        /// A list of attributes to prompt the user during registration or progressive profiling
        /// </summary>
        public InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs> ProfileAttributes
        {
            get => _profileAttributes ?? (_profileAttributes = new InputList<Inputs.PolicyRuleProfileEnrollmentProfileAttributeGetArgs>());
            set => _profileAttributes = value;
        }

        /// <summary>
        /// Enabled or disabled progressive profiling action rule conditions: ENABLED or DISABLED
        /// </summary>
        [Input("progressiveProfilingAction")]
        public Input<string>? ProgressiveProfilingAction { get; set; }

        /// <summary>
        /// Status of the rule
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of a Group that this User should be added to
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        /// <summary>
        /// Value created by the backend. If present all policy updates must include this attribute/value.
        /// </summary>
        [Input("uiSchemaId")]
        public Input<string>? UiSchemaId { get; set; }

        /// <summary>
        /// Which action should be taken if this User is new
        /// </summary>
        [Input("unknownUserAction")]
        public Input<string>? UnknownUserAction { get; set; }

        public PolicyRuleProfileEnrollmentState()
        {
        }
        public static new PolicyRuleProfileEnrollmentState Empty => new PolicyRuleProfileEnrollmentState();
    }
}
