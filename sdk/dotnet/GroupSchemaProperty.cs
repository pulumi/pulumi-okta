// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/groupSchemaProperty:GroupSchemaProperty")]
    public partial class GroupSchemaProperty : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom Subschema enumerated value of a property of type array.
        /// </summary>
        [Output("arrayEnums")]
        public Output<ImmutableArray<string>> ArrayEnums { get; private set; } = null!;

        /// <summary>
        /// array of valid JSON schemas for property type array.
        /// </summary>
        [Output("arrayOneOfs")]
        public Output<ImmutableArray<Outputs.GroupSchemaPropertyArrayOneOf>> ArrayOneOfs { get; private set; } = null!;

        /// <summary>
        /// Subschema array type: string, number, integer, reference. Type field must be an array.
        /// </summary>
        [Output("arrayType")]
        public Output<string?> ArrayType { get; private set; } = null!;

        /// <summary>
        /// Custom Subschema description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        [Output("enums")]
        public Output<ImmutableArray<string>> Enums { get; private set; } = null!;

        /// <summary>
        /// Subschema external name
        /// </summary>
        [Output("externalName")]
        public Output<string?> ExternalName { get; private set; } = null!;

        /// <summary>
        /// Subschema external namespace
        /// </summary>
        [Output("externalNamespace")]
        public Output<string?> ExternalNamespace { get; private set; } = null!;

        /// <summary>
        /// Subschema unique string identifier
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// SubSchema profile manager, if not set it will inherit its setting.
        /// </summary>
        [Output("master")]
        public Output<string?> Master { get; private set; } = null!;

        [Output("masterOverridePriorities")]
        public Output<ImmutableArray<Outputs.GroupSchemaPropertyMasterOverridePriority>> MasterOverridePriorities { get; private set; } = null!;

        /// <summary>
        /// Subschema of type string maximum length
        /// </summary>
        [Output("maxLength")]
        public Output<int?> MaxLength { get; private set; } = null!;

        /// <summary>
        /// Subschema of type string minimum length
        /// </summary>
        [Output("minLength")]
        public Output<int?> MinLength { get; private set; } = null!;

        /// <summary>
        /// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        [Output("oneOfs")]
        public Output<ImmutableArray<Outputs.GroupSchemaPropertyOneOf>> OneOfs { get; private set; } = null!;

        /// <summary>
        /// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        /// </summary>
        [Output("permissions")]
        public Output<string?> Permissions { get; private set; } = null!;

        /// <summary>
        /// Whether the subschema is required
        /// </summary>
        [Output("required")]
        public Output<bool?> Required { get; private set; } = null!;

        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Enum title
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Subschema type: string, boolean, number, integer, array, or object
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Subschema unique restriction
        /// </summary>
        [Output("unique")]
        public Output<string?> Unique { get; private set; } = null!;


        /// <summary>
        /// Create a GroupSchemaProperty resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupSchemaProperty(string name, GroupSchemaPropertyArgs args, CustomResourceOptions? options = null)
            : base("okta:index/groupSchemaProperty:GroupSchemaProperty", name, args ?? new GroupSchemaPropertyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupSchemaProperty(string name, Input<string> id, GroupSchemaPropertyState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/groupSchemaProperty:GroupSchemaProperty", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupSchemaProperty resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupSchemaProperty Get(string name, Input<string> id, GroupSchemaPropertyState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupSchemaProperty(name, id, state, options);
        }
    }

    public sealed class GroupSchemaPropertyArgs : global::Pulumi.ResourceArgs
    {
        [Input("arrayEnums")]
        private InputList<string>? _arrayEnums;

        /// <summary>
        /// Custom Subschema enumerated value of a property of type array.
        /// </summary>
        public InputList<string> ArrayEnums
        {
            get => _arrayEnums ?? (_arrayEnums = new InputList<string>());
            set => _arrayEnums = value;
        }

        [Input("arrayOneOfs")]
        private InputList<Inputs.GroupSchemaPropertyArrayOneOfArgs>? _arrayOneOfs;

        /// <summary>
        /// array of valid JSON schemas for property type array.
        /// </summary>
        public InputList<Inputs.GroupSchemaPropertyArrayOneOfArgs> ArrayOneOfs
        {
            get => _arrayOneOfs ?? (_arrayOneOfs = new InputList<Inputs.GroupSchemaPropertyArrayOneOfArgs>());
            set => _arrayOneOfs = value;
        }

        /// <summary>
        /// Subschema array type: string, number, integer, reference. Type field must be an array.
        /// </summary>
        [Input("arrayType")]
        public Input<string>? ArrayType { get; set; }

        /// <summary>
        /// Custom Subschema description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enums")]
        private InputList<string>? _enums;

        /// <summary>
        /// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        public InputList<string> Enums
        {
            get => _enums ?? (_enums = new InputList<string>());
            set => _enums = value;
        }

        /// <summary>
        /// Subschema external name
        /// </summary>
        [Input("externalName")]
        public Input<string>? ExternalName { get; set; }

        /// <summary>
        /// Subschema external namespace
        /// </summary>
        [Input("externalNamespace")]
        public Input<string>? ExternalNamespace { get; set; }

        /// <summary>
        /// Subschema unique string identifier
        /// </summary>
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        /// <summary>
        /// SubSchema profile manager, if not set it will inherit its setting.
        /// </summary>
        [Input("master")]
        public Input<string>? Master { get; set; }

        [Input("masterOverridePriorities")]
        private InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityArgs>? _masterOverridePriorities;
        public InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityArgs> MasterOverridePriorities
        {
            get => _masterOverridePriorities ?? (_masterOverridePriorities = new InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityArgs>());
            set => _masterOverridePriorities = value;
        }

        /// <summary>
        /// Subschema of type string maximum length
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Subschema of type string minimum length
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        [Input("oneOfs")]
        private InputList<Inputs.GroupSchemaPropertyOneOfArgs>? _oneOfs;

        /// <summary>
        /// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        public InputList<Inputs.GroupSchemaPropertyOneOfArgs> OneOfs
        {
            get => _oneOfs ?? (_oneOfs = new InputList<Inputs.GroupSchemaPropertyOneOfArgs>());
            set => _oneOfs = value;
        }

        /// <summary>
        /// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        /// <summary>
        /// Whether the subschema is required
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Enum title
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Subschema type: string, boolean, number, integer, array, or object
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Subschema unique restriction
        /// </summary>
        [Input("unique")]
        public Input<string>? Unique { get; set; }

        public GroupSchemaPropertyArgs()
        {
        }
        public static new GroupSchemaPropertyArgs Empty => new GroupSchemaPropertyArgs();
    }

    public sealed class GroupSchemaPropertyState : global::Pulumi.ResourceArgs
    {
        [Input("arrayEnums")]
        private InputList<string>? _arrayEnums;

        /// <summary>
        /// Custom Subschema enumerated value of a property of type array.
        /// </summary>
        public InputList<string> ArrayEnums
        {
            get => _arrayEnums ?? (_arrayEnums = new InputList<string>());
            set => _arrayEnums = value;
        }

        [Input("arrayOneOfs")]
        private InputList<Inputs.GroupSchemaPropertyArrayOneOfGetArgs>? _arrayOneOfs;

        /// <summary>
        /// array of valid JSON schemas for property type array.
        /// </summary>
        public InputList<Inputs.GroupSchemaPropertyArrayOneOfGetArgs> ArrayOneOfs
        {
            get => _arrayOneOfs ?? (_arrayOneOfs = new InputList<Inputs.GroupSchemaPropertyArrayOneOfGetArgs>());
            set => _arrayOneOfs = value;
        }

        /// <summary>
        /// Subschema array type: string, number, integer, reference. Type field must be an array.
        /// </summary>
        [Input("arrayType")]
        public Input<string>? ArrayType { get; set; }

        /// <summary>
        /// Custom Subschema description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enums")]
        private InputList<string>? _enums;

        /// <summary>
        /// Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        public InputList<string> Enums
        {
            get => _enums ?? (_enums = new InputList<string>());
            set => _enums = value;
        }

        /// <summary>
        /// Subschema external name
        /// </summary>
        [Input("externalName")]
        public Input<string>? ExternalName { get; set; }

        /// <summary>
        /// Subschema external namespace
        /// </summary>
        [Input("externalNamespace")]
        public Input<string>? ExternalNamespace { get; set; }

        /// <summary>
        /// Subschema unique string identifier
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// SubSchema profile manager, if not set it will inherit its setting.
        /// </summary>
        [Input("master")]
        public Input<string>? Master { get; set; }

        [Input("masterOverridePriorities")]
        private InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityGetArgs>? _masterOverridePriorities;
        public InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityGetArgs> MasterOverridePriorities
        {
            get => _masterOverridePriorities ?? (_masterOverridePriorities = new InputList<Inputs.GroupSchemaPropertyMasterOverridePriorityGetArgs>());
            set => _masterOverridePriorities = value;
        }

        /// <summary>
        /// Subschema of type string maximum length
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Subschema of type string minimum length
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        [Input("oneOfs")]
        private InputList<Inputs.GroupSchemaPropertyOneOfGetArgs>? _oneOfs;

        /// <summary>
        /// Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
        /// </summary>
        public InputList<Inputs.GroupSchemaPropertyOneOfGetArgs> OneOfs
        {
            get => _oneOfs ?? (_oneOfs = new InputList<Inputs.GroupSchemaPropertyOneOfGetArgs>());
            set => _oneOfs = value;
        }

        /// <summary>
        /// SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        /// <summary>
        /// Whether the subschema is required
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Enum title
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Subschema type: string, boolean, number, integer, array, or object
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Subschema unique restriction
        /// </summary>
        [Input("unique")]
        public Input<string>? Unique { get; set; }

        public GroupSchemaPropertyState()
        {
        }
        public static new GroupSchemaPropertyState Empty => new GroupSchemaPropertyState();
    }
}
