// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Profile
{
    public partial class Mapping : Pulumi.CustomResource
    {
        /// <summary>
        /// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
        /// default, we do not delete missing properties.
        /// </summary>
        [Output("deleteWhenAbsent")]
        public Output<bool?> DeleteWhenAbsent { get; private set; } = null!;

        [Output("mappings")]
        public Output<ImmutableArray<Outputs.MappingMapping>> Mappings { get; private set; } = null!;

        /// <summary>
        /// The source id of the mapping to manage.
        /// </summary>
        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        [Output("sourceName")]
        public Output<string> SourceName { get; private set; } = null!;

        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// The target id of the mapping to manage.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;

        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        [Output("targetType")]
        public Output<string> TargetType { get; private set; } = null!;


        /// <summary>
        /// Create a Mapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mapping(string name, MappingArgs args, CustomResourceOptions? options = null)
            : base("okta:profile/mapping:Mapping", name, args ?? new MappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mapping(string name, Input<string> id, MappingState? state = null, CustomResourceOptions? options = null)
            : base("okta:profile/mapping:Mapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mapping Get(string name, Input<string> id, MappingState? state = null, CustomResourceOptions? options = null)
        {
            return new Mapping(name, id, state, options);
        }
    }

    public sealed class MappingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
        /// default, we do not delete missing properties.
        /// </summary>
        [Input("deleteWhenAbsent")]
        public Input<bool>? DeleteWhenAbsent { get; set; }

        [Input("mappings")]
        private InputList<Inputs.MappingMappingArgs>? _mappings;
        public InputList<Inputs.MappingMappingArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.MappingMappingArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// The source id of the mapping to manage.
        /// </summary>
        [Input("sourceId", required: true)]
        public Input<string> SourceId { get; set; } = null!;

        /// <summary>
        /// The target id of the mapping to manage.
        /// </summary>
        [Input("targetId", required: true)]
        public Input<string> TargetId { get; set; } = null!;

        public MappingArgs()
        {
        }
    }

    public sealed class MappingState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
        /// default, we do not delete missing properties.
        /// </summary>
        [Input("deleteWhenAbsent")]
        public Input<bool>? DeleteWhenAbsent { get; set; }

        [Input("mappings")]
        private InputList<Inputs.MappingMappingGetArgs>? _mappings;
        public InputList<Inputs.MappingMappingGetArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.MappingMappingGetArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// The source id of the mapping to manage.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        [Input("sourceName")]
        public Input<string>? SourceName { get; set; }

        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// The target id of the mapping to manage.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        public MappingState()
        {
        }
    }
}
