// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Profile
{
    /// <summary>
    /// This resource allows you to manage a profile mapping by source and target IDs.
    /// 
    /// &gt; **NOTE:** If using this resource with OAuth2 scopes, this resource requires `okta.profileMappings.manage` scope.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var user = Okta.User.GetUserProfileMappingSource.Invoke();
    /// 
    ///     var example = new Okta.Profile.Mapping("example", new()
    ///     {
    ///         DeleteWhenAbsent = true,
    ///         Mappings = new[]
    ///         {
    ///             new Okta.Profile.Inputs.MappingMappingArgs
    ///             {
    ///                 Expression = "appuser.firstName",
    ///                 Id = "firstName",
    ///             },
    ///             new Okta.Profile.Inputs.MappingMappingArgs
    ///             {
    ///                 Expression = "appuser.lastName",
    ///                 Id = "lastName",
    ///             },
    ///             new Okta.Profile.Inputs.MappingMappingArgs
    ///             {
    ///                 Expression = "appuser.email",
    ///                 Id = "email",
    ///             },
    ///             new Okta.Profile.Inputs.MappingMappingArgs
    ///             {
    ///                 Expression = "appuser.email",
    ///                 Id = "login",
    ///             },
    ///         },
    ///         SourceId = "&lt;source id&gt;",
    ///         TargetId = user.Apply(getUserProfileMappingSourceResult =&gt; getUserProfileMappingSourceResult.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// There is no reason to import this resource. You can simply create the resource config and point it to a source ID. Mind here, once the source is deleted this resources will no longer exist.
    /// </summary>
    [OktaResourceType("okta:profile/mapping:Mapping")]
    public partial class Mapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether apply the changes to all users with this profile after updating or creating the these mappings.
        /// </summary>
        [Output("alwaysApply")]
        public Output<bool?> AlwaysApply { get; private set; } = null!;

        /// <summary>
        /// Tells the provider whether to attempt to delete missing mappings under profile mapping.
        /// </summary>
        [Output("deleteWhenAbsent")]
        public Output<bool?> DeleteWhenAbsent { get; private set; } = null!;

        /// <summary>
        /// Priority of the policy.
        /// </summary>
        [Output("mappings")]
        public Output<ImmutableArray<Outputs.MappingMapping>> Mappings { get; private set; } = null!;

        /// <summary>
        /// Source id of the profile mapping.
        /// </summary>
        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        /// <summary>
        /// Name of the mapping source.
        /// </summary>
        [Output("sourceName")]
        public Output<string> SourceName { get; private set; } = null!;

        /// <summary>
        /// ID of the mapping source.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// ID of the mapping target.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;

        /// <summary>
        /// Name of the mapping target.
        /// </summary>
        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        /// <summary>
        /// ID of the mapping target.
        /// </summary>
        [Output("targetType")]
        public Output<string> TargetType { get; private set; } = null!;


        /// <summary>
        /// Create a Mapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mapping(string name, MappingArgs args, CustomResourceOptions? options = null)
            : base("okta:profile/mapping:Mapping", name, args ?? new MappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mapping(string name, Input<string> id, MappingState? state = null, CustomResourceOptions? options = null)
            : base("okta:profile/mapping:Mapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mapping Get(string name, Input<string> id, MappingState? state = null, CustomResourceOptions? options = null)
        {
            return new Mapping(name, id, state, options);
        }
    }

    public sealed class MappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether apply the changes to all users with this profile after updating or creating the these mappings.
        /// </summary>
        [Input("alwaysApply")]
        public Input<bool>? AlwaysApply { get; set; }

        /// <summary>
        /// Tells the provider whether to attempt to delete missing mappings under profile mapping.
        /// </summary>
        [Input("deleteWhenAbsent")]
        public Input<bool>? DeleteWhenAbsent { get; set; }

        [Input("mappings")]
        private InputList<Inputs.MappingMappingArgs>? _mappings;

        /// <summary>
        /// Priority of the policy.
        /// </summary>
        public InputList<Inputs.MappingMappingArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.MappingMappingArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// Source id of the profile mapping.
        /// </summary>
        [Input("sourceId", required: true)]
        public Input<string> SourceId { get; set; } = null!;

        /// <summary>
        /// ID of the mapping target.
        /// </summary>
        [Input("targetId", required: true)]
        public Input<string> TargetId { get; set; } = null!;

        public MappingArgs()
        {
        }
        public static new MappingArgs Empty => new MappingArgs();
    }

    public sealed class MappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether apply the changes to all users with this profile after updating or creating the these mappings.
        /// </summary>
        [Input("alwaysApply")]
        public Input<bool>? AlwaysApply { get; set; }

        /// <summary>
        /// Tells the provider whether to attempt to delete missing mappings under profile mapping.
        /// </summary>
        [Input("deleteWhenAbsent")]
        public Input<bool>? DeleteWhenAbsent { get; set; }

        [Input("mappings")]
        private InputList<Inputs.MappingMappingGetArgs>? _mappings;

        /// <summary>
        /// Priority of the policy.
        /// </summary>
        public InputList<Inputs.MappingMappingGetArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.MappingMappingGetArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// Source id of the profile mapping.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        /// <summary>
        /// Name of the mapping source.
        /// </summary>
        [Input("sourceName")]
        public Input<string>? SourceName { get; set; }

        /// <summary>
        /// ID of the mapping source.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// ID of the mapping target.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// Name of the mapping target.
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// ID of the mapping target.
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        public MappingState()
        {
        }
        public static new MappingState Empty => new MappingState();
    }
}
