// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetEntitlementBundle
    {
        /// <summary>
        /// Get the entitlement bundle for the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlementBundle.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement_bundle id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEntitlementBundleResult> InvokeAsync(GetEntitlementBundleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntitlementBundleResult>("okta:index/getEntitlementBundle:getEntitlementBundle", args ?? new GetEntitlementBundleArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlement bundle for the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlementBundle.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement_bundle id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntitlementBundleResult> Invoke(GetEntitlementBundleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntitlementBundleResult>("okta:index/getEntitlementBundle:getEntitlementBundle", args ?? new GetEntitlementBundleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the entitlement bundle for the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetEntitlementBundle.Invoke(new()
        ///     {
        ///         Id = "&lt;entitlement_bundle id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntitlementBundleResult> Invoke(GetEntitlementBundleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntitlementBundleResult>("okta:index/getEntitlementBundle:getEntitlementBundle", args ?? new GetEntitlementBundleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntitlementBundleArgs : global::Pulumi.InvokeArgs
    {
        [Input("entitlements")]
        private List<Inputs.GetEntitlementBundleEntitlementArgs>? _entitlements;

        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        public List<Inputs.GetEntitlementBundleEntitlementArgs> Entitlements
        {
            get => _entitlements ?? (_entitlements = new List<Inputs.GetEntitlementBundleEntitlementArgs>());
            set => _entitlements = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("target")]
        public Inputs.GetEntitlementBundleTargetArgs? Target { get; set; }

        public GetEntitlementBundleArgs()
        {
        }
        public static new GetEntitlementBundleArgs Empty => new GetEntitlementBundleArgs();
    }

    public sealed class GetEntitlementBundleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("entitlements")]
        private InputList<Inputs.GetEntitlementBundleEntitlementInputArgs>? _entitlements;

        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        public InputList<Inputs.GetEntitlementBundleEntitlementInputArgs> Entitlements
        {
            get => _entitlements ?? (_entitlements = new InputList<Inputs.GetEntitlementBundleEntitlementInputArgs>());
            set => _entitlements = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("target")]
        public Input<Inputs.GetEntitlementBundleTargetInputArgs>? Target { get; set; }

        public GetEntitlementBundleInvokeArgs()
        {
        }
        public static new GetEntitlementBundleInvokeArgs Empty => new GetEntitlementBundleInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntitlementBundleResult
    {
        /// <summary>
        /// The created timestamp of this resource.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The ID of the user that created this resource.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of entitlements in the bundle
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEntitlementBundleEntitlementResult> Entitlements;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The last updated timestamp of this resource.
        /// </summary>
        public readonly string LastUpdated;
        /// <summary>
        /// The ID of the user that last updated this resource.
        /// </summary>
        public readonly string LastUpdatedBy;
        /// <summary>
        /// The display name for an entitlement bundle.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the entitlement bundle.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Representation of a resource
        /// </summary>
        public readonly Outputs.GetEntitlementBundleTargetResult? Target;
        /// <summary>
        /// The ORN of the target resource. Required when updating the entitlement bundle.
        /// </summary>
        public readonly string TargetResourceOrn;

        [OutputConstructor]
        private GetEntitlementBundleResult(
            string created,

            string createdBy,

            string description,

            ImmutableArray<Outputs.GetEntitlementBundleEntitlementResult> entitlements,

            string id,

            string lastUpdated,

            string lastUpdatedBy,

            string name,

            string status,

            Outputs.GetEntitlementBundleTargetResult? target,

            string targetResourceOrn)
        {
            Created = created;
            CreatedBy = createdBy;
            Description = description;
            Entitlements = entitlements;
            Id = id;
            LastUpdated = lastUpdated;
            LastUpdatedBy = lastUpdatedBy;
            Name = name;
            Status = status;
            Target = target;
            TargetResourceOrn = targetResourceOrn;
        }
    }
}
