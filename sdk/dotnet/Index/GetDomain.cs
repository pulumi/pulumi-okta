// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Index
{
    public static class GetDomain
    {
        /// <summary>
        /// Use this data source to retrieve a domain from Okta.
        /// 
        /// - https://developer.okta.com/docs/reference/api/domains/#get-domain
        /// - https://developer.okta.com/docs/reference/api/domains/#domainresponse-object
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Okta.Domain("example", new()
        ///     {
        ///         Name = "www.example.com",
        ///     });
        /// 
        ///     var by_name = Okta.Index.GetDomain.Invoke(new()
        ///     {
        ///         DomainIdOrName = "www.example.com",
        ///     });
        /// 
        ///     var by_id = Okta.Index.GetDomain.Invoke(new()
        ///     {
        ///         DomainIdOrName = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("okta:Index/getDomain:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a domain from Okta.
        /// 
        /// - https://developer.okta.com/docs/reference/api/domains/#get-domain
        /// - https://developer.okta.com/docs/reference/api/domains/#domainresponse-object
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Okta.Domain("example", new()
        ///     {
        ///         Name = "www.example.com",
        ///     });
        /// 
        ///     var by_name = Okta.Index.GetDomain.Invoke(new()
        ///     {
        ///         DomainIdOrName = "www.example.com",
        ///     });
        /// 
        ///     var by_id = Okta.Index.GetDomain.Invoke(new()
        ///     {
        ///         DomainIdOrName = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("okta:Index/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Okta ID of the domain or the domain name itself.
        /// </summary>
        [Input("domainIdOrName", required: true)]
        public string DomainIdOrName { get; set; } = null!;

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Okta ID of the domain or the domain name itself.
        /// </summary>
        [Input("domainIdOrName", required: true)]
        public Input<string> DomainIdOrName { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED"
        /// </summary>
        public readonly string CertificateSourceType;
        /// <summary>
        /// TXT and CNAME records to be registered for the Domain.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainDnsRecordResult> DnsRecords;
        /// <summary>
        /// Domain name
        /// </summary>
        public readonly string Domain;
        public readonly string DomainIdOrName;
        /// <summary>
        /// Domain ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Certificate metadata for the Domain
        /// </summary>
        public readonly ImmutableDictionary<string, string> PublicCertificate;
        /// <summary>
        /// Status of the domain. Values: `NOT_STARTED`, `IN_PROGRESS`, `VERIFIED`, `COMPLETED`
        /// </summary>
        public readonly string ValidationStatus;

        [OutputConstructor]
        private GetDomainResult(
            string certificateSourceType,

            ImmutableArray<Outputs.GetDomainDnsRecordResult> dnsRecords,

            string domain,

            string domainIdOrName,

            string id,

            ImmutableDictionary<string, string> publicCertificate,

            string validationStatus)
        {
            CertificateSourceType = certificateSourceType;
            DnsRecords = dnsRecords;
            Domain = domain;
            DomainIdOrName = domainIdOrName;
            Id = id;
            PublicCertificate = publicCertificate;
            ValidationStatus = validationStatus;
        }
    }
}
