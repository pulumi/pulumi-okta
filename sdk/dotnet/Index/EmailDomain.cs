// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Index
{
    /// <summary>
    /// This resource allows you to create and configure an email domain.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Index.EmailDomain("example", new()
    ///     {
    ///         BrandId = "abc123",
    ///         Domain = "example.com",
    ///         DisplayName = "test",
    ///         UserName = "paul_atreides",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Custom email domain can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:Index/emailDomain:EmailDomain example &amp;#60;domain id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:Index/emailDomain:EmailDomain")]
    public partial class EmailDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Brand id of the email domain.
        /// </summary>
        [Output("brandId")]
        public Output<string> BrandId { get; private set; } = null!;

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// TXT and CNAME records to be registered for the domain.
        /// </summary>
        [Output("dnsValidationRecords")]
        public Output<ImmutableArray<Outputs.EmailDomainDnsValidationRecord>> DnsValidationRecords { get; private set; } = null!;

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// Status of the email domain (shows whether the domain is verified).
        /// </summary>
        [Output("validationStatus")]
        public Output<string> ValidationStatus { get; private set; } = null!;


        /// <summary>
        /// Create a EmailDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailDomain(string name, EmailDomainArgs args, CustomResourceOptions? options = null)
            : base("okta:Index/emailDomain:EmailDomain", name, args ?? new EmailDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailDomain(string name, Input<string> id, EmailDomainState? state = null, CustomResourceOptions? options = null)
            : base("okta:Index/emailDomain:EmailDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailDomain Get(string name, Input<string> id, EmailDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailDomain(name, id, state, options);
        }
    }

    public sealed class EmailDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Brand id of the email domain.
        /// </summary>
        [Input("brandId", required: true)]
        public Input<string> BrandId { get; set; } = null!;

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public EmailDomainArgs()
        {
        }
        public static new EmailDomainArgs Empty => new EmailDomainArgs();
    }

    public sealed class EmailDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Brand id of the email domain.
        /// </summary>
        [Input("brandId")]
        public Input<string>? BrandId { get; set; }

        /// <summary>
        /// Display name of the email domain.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("dnsValidationRecords")]
        private InputList<Inputs.EmailDomainDnsValidationRecordGetArgs>? _dnsValidationRecords;

        /// <summary>
        /// TXT and CNAME records to be registered for the domain.
        /// </summary>
        public InputList<Inputs.EmailDomainDnsValidationRecordGetArgs> DnsValidationRecords
        {
            get => _dnsValidationRecords ?? (_dnsValidationRecords = new InputList<Inputs.EmailDomainDnsValidationRecordGetArgs>());
            set => _dnsValidationRecords = value;
        }

        /// <summary>
        /// Mail domain to send from.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// User name of the email domain.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// Status of the email domain (shows whether the domain is verified).
        /// </summary>
        [Input("validationStatus")]
        public Input<string>? ValidationStatus { get; set; }

        public EmailDomainState()
        {
        }
        public static new EmailDomainState Empty => new EmailDomainState();
    }
}
