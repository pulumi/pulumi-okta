// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetCampaign
    {
        /// <summary>
        /// Get the campaign belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetCampaign.Invoke(new()
        ///     {
        ///         Id = "&lt;campaign id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCampaignResult> InvokeAsync(GetCampaignArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCampaignResult>("okta:index/getCampaign:getCampaign", args ?? new GetCampaignArgs(), options.WithDefaults());

        /// <summary>
        /// Get the campaign belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetCampaign.Invoke(new()
        ///     {
        ///         Id = "&lt;campaign id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCampaignResult> Invoke(GetCampaignInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCampaignResult>("okta:index/getCampaign:getCampaign", args ?? new GetCampaignInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the campaign belonging to an Okta organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Okta.GetCampaign.Invoke(new()
        ///     {
        ///         Id = "&lt;campaign id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCampaignResult> Invoke(GetCampaignInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCampaignResult>("okta:index/getCampaign:getCampaign", args ?? new GetCampaignInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCampaignArgs : global::Pulumi.InvokeArgs
    {
        [Input("campaignType")]
        public string? CampaignType { get; set; }

        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("notificationSettings")]
        public Inputs.GetCampaignNotificationSettingsArgs? NotificationSettings { get; set; }

        [Input("principalScopeSettings")]
        public Inputs.GetCampaignPrincipalScopeSettingsArgs? PrincipalScopeSettings { get; set; }

        [Input("remediationSettings")]
        public Inputs.GetCampaignRemediationSettingsArgs? RemediationSettings { get; set; }

        [Input("resourceSettings")]
        public Inputs.GetCampaignResourceSettingsArgs? ResourceSettings { get; set; }

        [Input("reviewerSettings")]
        public Inputs.GetCampaignReviewerSettingsArgs? ReviewerSettings { get; set; }

        [Input("scheduleSettings")]
        public Inputs.GetCampaignScheduleSettingsArgs? ScheduleSettings { get; set; }

        public GetCampaignArgs()
        {
        }
        public static new GetCampaignArgs Empty => new GetCampaignArgs();
    }

    public sealed class GetCampaignInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("campaignType")]
        public Input<string>? CampaignType { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("notificationSettings")]
        public Input<Inputs.GetCampaignNotificationSettingsInputArgs>? NotificationSettings { get; set; }

        [Input("principalScopeSettings")]
        public Input<Inputs.GetCampaignPrincipalScopeSettingsInputArgs>? PrincipalScopeSettings { get; set; }

        [Input("remediationSettings")]
        public Input<Inputs.GetCampaignRemediationSettingsInputArgs>? RemediationSettings { get; set; }

        [Input("resourceSettings")]
        public Input<Inputs.GetCampaignResourceSettingsInputArgs>? ResourceSettings { get; set; }

        [Input("reviewerSettings")]
        public Input<Inputs.GetCampaignReviewerSettingsInputArgs>? ReviewerSettings { get; set; }

        [Input("scheduleSettings")]
        public Input<Inputs.GetCampaignScheduleSettingsInputArgs>? ScheduleSettings { get; set; }

        public GetCampaignInvokeArgs()
        {
        }
        public static new GetCampaignInvokeArgs Empty => new GetCampaignInvokeArgs();
    }


    [OutputType]
    public sealed class GetCampaignResult
    {
        public readonly string CampaignType;
        public readonly string Created;
        public readonly string CreatedBy;
        public readonly string Description;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string LastUpdated;
        public readonly string LastUpdatedBy;
        public readonly string Name;
        public readonly Outputs.GetCampaignNotificationSettingsResult? NotificationSettings;
        public readonly Outputs.GetCampaignPrincipalScopeSettingsResult? PrincipalScopeSettings;
        public readonly string RecurringCampaignId;
        public readonly Outputs.GetCampaignRemediationSettingsResult? RemediationSettings;
        public readonly Outputs.GetCampaignResourceSettingsResult? ResourceSettings;
        public readonly Outputs.GetCampaignReviewerSettingsResult? ReviewerSettings;
        public readonly Outputs.GetCampaignScheduleSettingsResult? ScheduleSettings;
        public readonly string Status;

        [OutputConstructor]
        private GetCampaignResult(
            string campaignType,

            string created,

            string createdBy,

            string description,

            string id,

            string lastUpdated,

            string lastUpdatedBy,

            string name,

            Outputs.GetCampaignNotificationSettingsResult? notificationSettings,

            Outputs.GetCampaignPrincipalScopeSettingsResult? principalScopeSettings,

            string recurringCampaignId,

            Outputs.GetCampaignRemediationSettingsResult? remediationSettings,

            Outputs.GetCampaignResourceSettingsResult? resourceSettings,

            Outputs.GetCampaignReviewerSettingsResult? reviewerSettings,

            Outputs.GetCampaignScheduleSettingsResult? scheduleSettings,

            string status)
        {
            CampaignType = campaignType;
            Created = created;
            CreatedBy = createdBy;
            Description = description;
            Id = id;
            LastUpdated = lastUpdated;
            LastUpdatedBy = lastUpdatedBy;
            Name = name;
            NotificationSettings = notificationSettings;
            PrincipalScopeSettings = principalScopeSettings;
            RecurringCampaignId = recurringCampaignId;
            RemediationSettings = remediationSettings;
            ResourceSettings = resourceSettings;
            ReviewerSettings = reviewerSettings;
            ScheduleSettings = scheduleSettings;
            Status = status;
        }
    }
}
