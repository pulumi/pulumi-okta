// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages Entitlement. This resource allows you to create and configure an Okta [Entitlement](https://developer.okta.com/docs/api/iga/openapi/governance.api/tag/Entitlements/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Entitlement("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/entitlement:Entitlement example &lt;entitlement_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/entitlement:Entitlement")]
    public partial class Entitlement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
        /// </summary>
        [Output("dataType")]
        public Output<string> DataType { get; private set; } = null!;

        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The value of an entitlement property.
        /// </summary>
        [Output("externalValue")]
        public Output<string> ExternalValue { get; private set; } = null!;

        /// <summary>
        /// The property that determines if the entitlement property can hold multiple values.
        /// </summary>
        [Output("multiValue")]
        public Output<bool> MultiValue { get; private set; } = null!;

        /// <summary>
        /// The display name for an entitlement property.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Output("parent")]
        public Output<Outputs.EntitlementParent?> Parent { get; private set; } = null!;

        /// <summary>
        /// The Okta app instance, in ORN format.
        /// </summary>
        [Output("parentResourceOrn")]
        public Output<string> ParentResourceOrn { get; private set; } = null!;

        /// <summary>
        /// The value of the entitlement property.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;

        [Output("values")]
        public Output<ImmutableArray<Outputs.EntitlementValue>> Values { get; private set; } = null!;


        /// <summary>
        /// Create a Entitlement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Entitlement(string name, EntitlementArgs args, CustomResourceOptions? options = null)
            : base("okta:index/entitlement:Entitlement", name, args ?? new EntitlementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Entitlement(string name, Input<string> id, EntitlementState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/entitlement:Entitlement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Entitlement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Entitlement Get(string name, Input<string> id, EntitlementState? state = null, CustomResourceOptions? options = null)
        {
            return new Entitlement(name, id, state, options);
        }
    }

    public sealed class EntitlementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
        /// </summary>
        [Input("dataType", required: true)]
        public Input<string> DataType { get; set; } = null!;

        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The value of an entitlement property.
        /// </summary>
        [Input("externalValue", required: true)]
        public Input<string> ExternalValue { get; set; } = null!;

        /// <summary>
        /// The property that determines if the entitlement property can hold multiple values.
        /// </summary>
        [Input("multiValue", required: true)]
        public Input<bool> MultiValue { get; set; } = null!;

        /// <summary>
        /// The display name for an entitlement property.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("parent")]
        public Input<Inputs.EntitlementParentArgs>? Parent { get; set; }

        /// <summary>
        /// The Okta app instance, in ORN format.
        /// </summary>
        [Input("parentResourceOrn")]
        public Input<string>? ParentResourceOrn { get; set; }

        /// <summary>
        /// The value of the entitlement property.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("values")]
        private InputList<Inputs.EntitlementValueArgs>? _values;
        public InputList<Inputs.EntitlementValueArgs> Values
        {
            get => _values ?? (_values = new InputList<Inputs.EntitlementValueArgs>());
            set => _values = value;
        }

        public EntitlementArgs()
        {
        }
        public static new EntitlementArgs Empty => new EntitlementArgs();
    }

    public sealed class EntitlementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: "array", "string".
        /// </summary>
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        /// <summary>
        /// The description of an entitlement property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The value of an entitlement property.
        /// </summary>
        [Input("externalValue")]
        public Input<string>? ExternalValue { get; set; }

        /// <summary>
        /// The property that determines if the entitlement property can hold multiple values.
        /// </summary>
        [Input("multiValue")]
        public Input<bool>? MultiValue { get; set; }

        /// <summary>
        /// The display name for an entitlement property.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Representation of a resource
        /// </summary>
        [Input("parent")]
        public Input<Inputs.EntitlementParentGetArgs>? Parent { get; set; }

        /// <summary>
        /// The Okta app instance, in ORN format.
        /// </summary>
        [Input("parentResourceOrn")]
        public Input<string>? ParentResourceOrn { get; set; }

        /// <summary>
        /// The value of the entitlement property.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("values")]
        private InputList<Inputs.EntitlementValueGetArgs>? _values;
        public InputList<Inputs.EntitlementValueGetArgs> Values
        {
            get => _values ?? (_values = new InputList<Inputs.EntitlementValueGetArgs>());
            set => _values = value;
        }

        public EntitlementState()
        {
        }
        public static new EntitlementState Empty => new EntitlementState();
    }
}
