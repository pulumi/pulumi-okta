// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetDeviceAssurancePolicy
    {
        /// <summary>
        /// Get a policy assurance from Okta.
        /// </summary>
        public static Task<GetDeviceAssurancePolicyResult> InvokeAsync(GetDeviceAssurancePolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceAssurancePolicyResult>("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", args ?? new GetDeviceAssurancePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get a policy assurance from Okta.
        /// </summary>
        public static Output<GetDeviceAssurancePolicyResult> Invoke(GetDeviceAssurancePolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceAssurancePolicyResult>("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", args ?? new GetDeviceAssurancePolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a policy assurance from Okta.
        /// </summary>
        public static Output<GetDeviceAssurancePolicyResult> Invoke(GetDeviceAssurancePolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceAssurancePolicyResult>("okta:index/getDeviceAssurancePolicy:getDeviceAssurancePolicy", args ?? new GetDeviceAssurancePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceAssurancePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `Name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of user type to retrieve, conflicts with `Id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public bool? SecureHardwarePresent { get; set; }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("thirdPartySignalProvider")]
        public Inputs.GetDeviceAssurancePolicyThirdPartySignalProviderArgs? ThirdPartySignalProvider { get; set; }

        public GetDeviceAssurancePolicyArgs()
        {
        }
        public static new GetDeviceAssurancePolicyArgs Empty => new GetDeviceAssurancePolicyArgs();
    }

    public sealed class GetDeviceAssurancePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `Name`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of user type to retrieve, conflicts with `Id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("secureHardwarePresent")]
        public Input<bool>? SecureHardwarePresent { get; set; }

        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        [Input("thirdPartySignalProvider")]
        public Input<Inputs.GetDeviceAssurancePolicyThirdPartySignalProviderInputArgs>? ThirdPartySignalProvider { get; set; }

        public GetDeviceAssurancePolicyInvokeArgs()
        {
        }
        public static new GetDeviceAssurancePolicyInvokeArgs Empty => new GetDeviceAssurancePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceAssurancePolicyResult
    {
        /// <summary>
        /// List of disk encryption type, can be `FULL`, `USER`
        /// </summary>
        public readonly Outputs.GetDeviceAssurancePolicyDiskEncryptionTypeResult DiskEncryptionType;
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `Name`.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Is the device jailbroken in the device assurance policy.
        /// </summary>
        public readonly bool Jailbreak;
        /// <summary>
        /// Name of user type to retrieve, conflicts with `Id`.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Minimum os version of the device in the device assurance policy.
        /// </summary>
        public readonly Outputs.GetDeviceAssurancePolicyOsVersionResult OsVersion;
        /// <summary>
        /// The list of os version constraints.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeviceAssurancePolicyOsVersionConstraintResult> OsVersionConstraints;
        /// <summary>
        /// Policy device assurance platform
        /// </summary>
        public readonly string Platform;
        /// <summary>
        /// List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
        /// </summary>
        public readonly Outputs.GetDeviceAssurancePolicyScreenlockTypeResult ScreenlockType;
        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        public readonly bool? SecureHardwarePresent;
        /// <summary>
        /// Indicates if the device contains a secure hardware functionality
        /// </summary>
        public readonly Outputs.GetDeviceAssurancePolicyThirdPartySignalProviderResult? ThirdPartySignalProvider;

        [OutputConstructor]
        private GetDeviceAssurancePolicyResult(
            Outputs.GetDeviceAssurancePolicyDiskEncryptionTypeResult diskEncryptionType,

            string? id,

            bool jailbreak,

            string? name,

            Outputs.GetDeviceAssurancePolicyOsVersionResult osVersion,

            ImmutableArray<Outputs.GetDeviceAssurancePolicyOsVersionConstraintResult> osVersionConstraints,

            string platform,

            Outputs.GetDeviceAssurancePolicyScreenlockTypeResult screenlockType,

            bool? secureHardwarePresent,

            Outputs.GetDeviceAssurancePolicyThirdPartySignalProviderResult? thirdPartySignalProvider)
        {
            DiskEncryptionType = diskEncryptionType;
            Id = id;
            Jailbreak = jailbreak;
            Name = name;
            OsVersion = osVersion;
            OsVersionConstraints = osVersionConstraints;
            Platform = platform;
            ScreenlockType = screenlockType;
            SecureHardwarePresent = secureHardwarePresent;
            ThirdPartySignalProvider = thirdPartySignalProvider;
        }
    }
}
