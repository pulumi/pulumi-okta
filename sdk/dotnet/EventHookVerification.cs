// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Verifies the Event Hook. The resource won't be created unless the URI provided in the event hook returns a valid JSON object with verification. See [Event Hooks](https://developer.okta.com/docs/concepts/event-hooks/#one-time-verification-request) documentation for details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.EventHook("example", new()
    ///     {
    ///         Name = "example",
    ///         Events = new[]
    ///         {
    ///             "user.lifecycle.create",
    ///             "user.lifecycle.delete.initiated",
    ///         },
    ///         Channel = 
    ///         {
    ///             { "type", "HTTP" },
    ///             { "version", "1.0.0" },
    ///             { "uri", "https://example.com/test" },
    ///         },
    ///         Auth = 
    ///         {
    ///             { "type", "HEADER" },
    ///             { "key", "Authorization" },
    ///             { "value", "123" },
    ///         },
    ///     });
    /// 
    ///     var exampleEventHookVerification = new Okta.EventHookVerification("example", new()
    ///     {
    ///         EventHookId = example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/eventHookVerification:EventHookVerification")]
    public partial class EventHookVerification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Event hook ID
        /// </summary>
        [Output("eventHookId")]
        public Output<string> EventHookId { get; private set; } = null!;


        /// <summary>
        /// Create a EventHookVerification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventHookVerification(string name, EventHookVerificationArgs args, CustomResourceOptions? options = null)
            : base("okta:index/eventHookVerification:EventHookVerification", name, args ?? new EventHookVerificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventHookVerification(string name, Input<string> id, EventHookVerificationState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/eventHookVerification:EventHookVerification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventHookVerification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventHookVerification Get(string name, Input<string> id, EventHookVerificationState? state = null, CustomResourceOptions? options = null)
        {
            return new EventHookVerification(name, id, state, options);
        }
    }

    public sealed class EventHookVerificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event hook ID
        /// </summary>
        [Input("eventHookId", required: true)]
        public Input<string> EventHookId { get; set; } = null!;

        public EventHookVerificationArgs()
        {
        }
        public static new EventHookVerificationArgs Empty => new EventHookVerificationArgs();
    }

    public sealed class EventHookVerificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event hook ID
        /// </summary>
        [Input("eventHookId")]
        public Input<string>? EventHookId { get; set; }

        public EventHookVerificationState()
        {
        }
        public static new EventHookVerificationState Empty => new EventHookVerificationState();
    }
}
