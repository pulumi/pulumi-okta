// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    [OktaResourceType("okta:index/authenticator:Authenticator")]
    public partial class Authenticator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable string that identifies the Authenticator
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        /// </summary>
        [Output("providerAuthPort")]
        public Output<int?> ProviderAuthPort { get; private set; } = null!;

        /// <summary>
        /// The Duo Security API hostname
        /// </summary>
        [Output("providerHost")]
        public Output<string?> ProviderHost { get; private set; } = null!;

        /// <summary>
        /// Server host name or IP address
        /// </summary>
        [Output("providerHostname")]
        public Output<string?> ProviderHostname { get; private set; } = null!;

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Output("providerInstanceId")]
        public Output<string> ProviderInstanceId { get; private set; } = null!;

        /// <summary>
        /// The Duo Security integration key
        /// </summary>
        [Output("providerIntegrationKey")]
        public Output<string?> ProviderIntegrationKey { get; private set; } = null!;

        /// <summary>
        /// Provider in JSON format
        /// </summary>
        [Output("providerJson")]
        public Output<string?> ProviderJson { get; private set; } = null!;

        /// <summary>
        /// The Duo Security secret key
        /// </summary>
        [Output("providerSecretKey")]
        public Output<string?> ProviderSecretKey { get; private set; } = null!;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        /// </summary>
        [Output("providerSharedSecret")]
        public Output<string?> ProviderSharedSecret { get; private set; } = null!;

        /// <summary>
        /// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// Format expected by the provider
        /// </summary>
        [Output("providerUserNameTemplate")]
        public Output<string?> ProviderUserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Authenticator settings in JSON format
        /// </summary>
        [Output("settings")]
        public Output<string?> Settings { get; private set; } = null!;

        /// <summary>
        /// Authenticator status: ACTIVE or INACTIVE
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The type of Authenticator
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Authenticator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authenticator(string name, AuthenticatorArgs args, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, args ?? new AuthenticatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authenticator(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "providerSharedSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authenticator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authenticator Get(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
        {
            return new Authenticator(name, id, state, options);
        }
    }

    public sealed class AuthenticatorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the Authenticator
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// The Duo Security API hostname
        /// </summary>
        [Input("providerHost")]
        public Input<string>? ProviderHost { get; set; }

        /// <summary>
        /// Server host name or IP address
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// The Duo Security integration key
        /// </summary>
        [Input("providerIntegrationKey")]
        public Input<string>? ProviderIntegrationKey { get; set; }

        /// <summary>
        /// Provider in JSON format
        /// </summary>
        [Input("providerJson")]
        public Input<string>? ProviderJson { get; set; }

        /// <summary>
        /// The Duo Security secret key
        /// </summary>
        [Input("providerSecretKey")]
        public Input<string>? ProviderSecretKey { get; set; }

        [Input("providerSharedSecret")]
        private Input<string>? _providerSharedSecret;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        /// </summary>
        public Input<string>? ProviderSharedSecret
        {
            get => _providerSharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _providerSharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Format expected by the provider
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Authenticator settings in JSON format
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Authenticator status: ACTIVE or INACTIVE
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AuthenticatorArgs()
        {
        }
        public static new AuthenticatorArgs Empty => new AuthenticatorArgs();
    }

    public sealed class AuthenticatorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the Authenticator
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// The Duo Security API hostname
        /// </summary>
        [Input("providerHost")]
        public Input<string>? ProviderHost { get; set; }

        /// <summary>
        /// Server host name or IP address
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Input("providerInstanceId")]
        public Input<string>? ProviderInstanceId { get; set; }

        /// <summary>
        /// The Duo Security integration key
        /// </summary>
        [Input("providerIntegrationKey")]
        public Input<string>? ProviderIntegrationKey { get; set; }

        /// <summary>
        /// Provider in JSON format
        /// </summary>
        [Input("providerJson")]
        public Input<string>? ProviderJson { get; set; }

        /// <summary>
        /// The Duo Security secret key
        /// </summary>
        [Input("providerSecretKey")]
        public Input<string>? ProviderSecretKey { get; set; }

        [Input("providerSharedSecret")]
        private Input<string>? _providerSharedSecret;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        /// </summary>
        public Input<string>? ProviderSharedSecret
        {
            get => _providerSharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _providerSharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// Format expected by the provider
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Authenticator settings in JSON format
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Authenticator status: ACTIVE or INACTIVE
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of Authenticator
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AuthenticatorState()
        {
        }
        public static new AuthenticatorState Empty => new AuthenticatorState();
    }
}
