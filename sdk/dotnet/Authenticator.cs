// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 
    /// This resource allows you to configure different authenticators.
    /// 
    /// &gt; **NOTE:** An authenticator can only be deleted if it's not in use by any policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Okta.Authenticator("test", new Okta.AuthenticatorArgs
    ///         {
    ///             Key = "security_question",
    ///             Settings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "allowedFor", "recovery" },
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Okta authenticator can be imported via the Okta ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/authenticator:Authenticator example &lt;authenticator_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/authenticator:Authenticator")]
    public partial class Authenticator : Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Possible values inclue: `"duo"`, `"external_idp"`, `"google_otp"`, `"okta_email"`, `"okta_password"`, `"okta_verify"`, `"onprem_mfa"`, `"phone_number"`, `"rsa_token"`, `"security_question"`, `"webauthn"`, and `"yubikey_token"`.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Output("providerAuthPort")]
        public Output<int?> ProviderAuthPort { get; private set; } = null!;

        /// <summary>
        /// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Output("providerHostname")]
        public Output<string?> ProviderHostname { get; private set; } = null!;

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Output("providerInstanceId")]
        public Output<string> ProviderInstanceId { get; private set; } = null!;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Output("providerSharedSecret")]
        public Output<string?> ProviderSharedSecret { get; private set; } = null!;

        /// <summary>
        /// The type of Authenticator. Values include: `"password"`, `"security_question"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"security_key"`.
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Output("providerUserNameTemplate")]
        public Output<string?> ProviderUserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `"security_key"`.
        /// </summary>
        [Output("settings")]
        public Output<string?> Settings { get; private set; } = null!;

        /// <summary>
        /// Status of the authenticator. Default is `ACTIVE`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Type of the Authenticator.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Authenticator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authenticator(string name, AuthenticatorArgs args, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, args ?? new AuthenticatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authenticator(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authenticator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authenticator Get(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
        {
            return new Authenticator(name, id, state, options);
        }
    }

    public sealed class AuthenticatorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Possible values inclue: `"duo"`, `"external_idp"`, `"google_otp"`, `"okta_email"`, `"okta_password"`, `"okta_verify"`, `"onprem_mfa"`, `"phone_number"`, `"rsa_token"`, `"security_question"`, `"webauthn"`, and `"yubikey_token"`.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerSharedSecret")]
        public Input<string>? ProviderSharedSecret { get; set; }

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `"security_key"`.
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Status of the authenticator. Default is `ACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AuthenticatorArgs()
        {
        }
    }

    public sealed class AuthenticatorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Possible values inclue: `"duo"`, `"external_idp"`, `"google_otp"`, `"okta_email"`, `"okta_password"`, `"okta_verify"`, `"onprem_mfa"`, `"phone_number"`, `"rsa_token"`, `"security_question"`, `"webauthn"`, and `"yubikey_token"`.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Name of the authenticator.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// Server host name or IP address. Default is `"localhost"`. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Input("providerInstanceId")]
        public Input<string>? ProviderInstanceId { get; set; }

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerSharedSecret")]
        public Input<string>? ProviderSharedSecret { get; set; }

        /// <summary>
        /// The type of Authenticator. Values include: `"password"`, `"security_question"`, `"phone"`, `"email"`, `"app"`, `"federated"`, and `"security_key"`.
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `"security_key"`.
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `"security_key"`.
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Status of the authenticator. Default is `ACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Type of the Authenticator.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AuthenticatorState()
        {
        }
    }
}
