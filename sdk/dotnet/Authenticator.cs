// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
    /// 
    /// This resource allows you to configure different authenticators.
    /// 
    /// &gt; **Create:** The Okta API has an odd notion of create for authenticators. If
    /// the authenticator doesn't exist then a one time 'POST /api/v1/authenticators' to
    /// create the authenticator (hard create) will be performed. Thereafter, that
    /// authenticator is never deleted, it is only deactivated (soft delete). Therefore,
    /// if the authenticator already exists create is just a soft import of an existing
    /// authenticator. This does not apply to custom_otp authenticator. There can be
    /// multiple custom_otp authenticator. To create new custom_otp authenticator, a new
    /// name and key = custom_otp is required. If an old name is used, it will simply
    /// reactivate the old custom_otp authenticator
    /// 
    /// &gt; **Update:** custom_otp authenticator cannot be updated
    /// 
    /// &gt; **Delete:** Authenticators can not be truly deleted therefore delete is soft.
    /// Delete will attempt to deativate the authenticator. An authenticator can only be
    /// deactivated if it's not in use by any other policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.Authenticator("test", new()
    ///     {
    ///         Name = "Security Question",
    ///         Key = "security_question",
    ///         Settings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["allowedFor"] = "recovery",
    ///         }),
    ///     });
    /// 
    ///     var otp = new Okta.Authenticator("otp", new()
    ///     {
    ///         Name = "Custom OTP",
    ///         Key = "custom_otp",
    ///         Status = "ACTIVE",
    ///         Settings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["protocol"] = "TOTP",
    ///             ["acceptableAdjacentIntervals"] = 3,
    ///             ["timeIntervalInSeconds"] = 30,
    ///             ["encoding"] = "base32",
    ///             ["algorithm"] = "HMacSHA256",
    ///             ["passCodeLength"] = 6,
    ///         }),
    ///         LegacyIgnoreName = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/authenticator:Authenticator example &lt;authenticator_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/authenticator:Authenticator")]
    public partial class Authenticator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Name does not trigger change detection (legacy behavior)
        /// </summary>
        [Output("legacyIgnoreName")]
        public Output<bool?> LegacyIgnoreName { get; private set; } = null!;

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerAuthPort")]
        public Output<int?> ProviderAuthPort { get; private set; } = null!;

        /// <summary>
        /// (DUO specific) - The Duo Security API hostname. Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerHost")]
        public Output<string?> ProviderHost { get; private set; } = null!;

        /// <summary>
        /// Server host name or IP address. Default is `localhost`. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerHostname")]
        public Output<string?> ProviderHostname { get; private set; } = null!;

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Output("providerInstanceId")]
        public Output<string> ProviderInstanceId { get; private set; } = null!;

        /// <summary>
        /// (DUO specific) - The Duo Security integration key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerIntegrationKey")]
        public Output<string?> ProviderIntegrationKey { get; private set; } = null!;

        /// <summary>
        /// Provider JSON allows for expressive providervalues. This argument conflicts with the other 'provider_xxx' arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
        /// </summary>
        [Output("providerJson")]
        public Output<string?> ProviderJson { get; private set; } = null!;

        /// <summary>
        /// (DUO specific) - The Duo Security secret key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerSecretKey")]
        public Output<string?> ProviderSecretKey { get; private set; } = null!;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerSharedSecret")]
        public Output<string?> ProviderSharedSecret { get; private set; } = null!;

        /// <summary>
        /// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Output("providerUserNameTemplate")]
        public Output<string?> ProviderUserNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `security_key`
        /// </summary>
        [Output("settings")]
        public Output<string?> Settings { get; private set; } = null!;

        /// <summary>
        /// Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// he type of Authenticator. Values include: `password`, `security_question`, `phone`, `email`, `app`, `federated`, and `security_key`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Authenticator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authenticator(string name, AuthenticatorArgs args, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, args ?? new AuthenticatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authenticator(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/authenticator:Authenticator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "providerSharedSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authenticator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authenticator Get(string name, Input<string> id, AuthenticatorState? state = null, CustomResourceOptions? options = null)
        {
            return new Authenticator(name, id, state, options);
        }
    }

    public sealed class AuthenticatorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Name does not trigger change detection (legacy behavior)
        /// </summary>
        [Input("legacyIgnoreName")]
        public Input<bool>? LegacyIgnoreName { get; set; }

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security API hostname. Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerHost")]
        public Input<string>? ProviderHost { get; set; }

        /// <summary>
        /// Server host name or IP address. Default is `localhost`. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security integration key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerIntegrationKey")]
        public Input<string>? ProviderIntegrationKey { get; set; }

        /// <summary>
        /// Provider JSON allows for expressive providervalues. This argument conflicts with the other 'provider_xxx' arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
        /// </summary>
        [Input("providerJson")]
        public Input<string>? ProviderJson { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security secret key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerSecretKey")]
        public Input<string>? ProviderSecretKey { get; set; }

        [Input("providerSharedSecret")]
        private Input<string>? _providerSharedSecret;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        public Input<string>? ProviderSharedSecret
        {
            get => _providerSharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _providerSharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `security_key`
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AuthenticatorArgs()
        {
        }
        public static new AuthenticatorArgs Empty => new AuthenticatorArgs();
    }

    public sealed class AuthenticatorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Name does not trigger change detection (legacy behavior)
        /// </summary>
        [Input("legacyIgnoreName")]
        public Input<bool>? LegacyIgnoreName { get; set; }

        /// <summary>
        /// Display name of the Authenticator
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerAuthPort")]
        public Input<int>? ProviderAuthPort { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security API hostname. Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerHost")]
        public Input<string>? ProviderHost { get; set; }

        /// <summary>
        /// Server host name or IP address. Default is `localhost`. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerHostname")]
        public Input<string>? ProviderHostname { get; set; }

        /// <summary>
        /// App Instance ID.
        /// </summary>
        [Input("providerInstanceId")]
        public Input<string>? ProviderInstanceId { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security integration key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerIntegrationKey")]
        public Input<string>? ProviderIntegrationKey { get; set; }

        /// <summary>
        /// Provider JSON allows for expressive providervalues. This argument conflicts with the other 'provider_xxx' arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
        /// </summary>
        [Input("providerJson")]
        public Input<string>? ProviderJson { get; set; }

        /// <summary>
        /// (DUO specific) - The Duo Security secret key.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerSecretKey")]
        public Input<string>? ProviderSecretKey { get; set; }

        [Input("providerSharedSecret")]
        private Input<string>? _providerSharedSecret;

        /// <summary>
        /// An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `security_key`. Conflicts with `provider_json` argument.
        /// </summary>
        public Input<string>? ProviderSharedSecret
        {
            get => _providerSharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _providerSharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// Username template expected by the provider. Used only for authenticators with type `security_key`.  Conflicts with `provider_json` argument.
        /// </summary>
        [Input("providerUserNameTemplate")]
        public Input<string>? ProviderUserNameTemplate { get; set; }

        /// <summary>
        /// Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `security_key`
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// he type of Authenticator. Values include: `password`, `security_question`, `phone`, `email`, `app`, `federated`, and `security_key`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AuthenticatorState()
        {
        }
        public static new AuthenticatorState Empty => new AuthenticatorState();
    }
}
