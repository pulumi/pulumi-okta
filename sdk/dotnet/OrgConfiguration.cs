// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages org settings, logo, support and communication.
    /// 
    /// &gt; **IMPORTANT:** You must specify all Org Setting properties when you update an org's profile. Any property not specified in the script will be deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.OrgConfiguration("example", new()
    ///     {
    ///         CompanyName = "Umbrella Corporation",
    ///         Website = "https://terraform.io",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/orgConfiguration:OrgConfiguration example _
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/orgConfiguration:OrgConfiguration")]
    public partial class OrgConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Primary address of org
        /// </summary>
        [Output("address1")]
        public Output<string?> Address1 { get; private set; } = null!;

        /// <summary>
        /// Secondary address of org
        /// </summary>
        [Output("address2")]
        public Output<string?> Address2 { get; private set; } = null!;

        /// <summary>
        /// User ID representing the billing contact
        /// </summary>
        [Output("billingContactUser")]
        public Output<string?> BillingContactUser { get; private set; } = null!;

        /// <summary>
        /// City of org
        /// </summary>
        [Output("city")]
        public Output<string?> City { get; private set; } = null!;

        /// <summary>
        /// Name of org
        /// </summary>
        [Output("companyName")]
        public Output<string> CompanyName { get; private set; } = null!;

        /// <summary>
        /// Country of org
        /// </summary>
        [Output("country")]
        public Output<string?> Country { get; private set; } = null!;

        /// <summary>
        /// Support link of org
        /// </summary>
        [Output("endUserSupportHelpUrl")]
        public Output<string?> EndUserSupportHelpUrl { get; private set; } = null!;

        /// <summary>
        /// Expiration of org
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
        /// </summary>
        [Output("logo")]
        public Output<string?> Logo { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the org's users receive Okta Communication emails
        /// </summary>
        [Output("optOutCommunicationEmails")]
        public Output<bool?> OptOutCommunicationEmails { get; private set; } = null!;

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Output("phoneNumber")]
        public Output<string?> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// Postal code of org
        /// </summary>
        [Output("postalCode")]
        public Output<string?> PostalCode { get; private set; } = null!;

        /// <summary>
        /// State of org
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// Subdomain of org
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Output("supportPhoneNumber")]
        public Output<string?> SupportPhoneNumber { get; private set; } = null!;

        /// <summary>
        /// User ID representing the technical contact
        /// </summary>
        [Output("technicalContactUser")]
        public Output<string?> TechnicalContactUser { get; private set; } = null!;

        /// <summary>
        /// The org's website
        /// </summary>
        [Output("website")]
        public Output<string?> Website { get; private set; } = null!;


        /// <summary>
        /// Create a OrgConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgConfiguration(string name, OrgConfigurationArgs args, CustomResourceOptions? options = null)
            : base("okta:index/orgConfiguration:OrgConfiguration", name, args ?? new OrgConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgConfiguration(string name, Input<string> id, OrgConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/orgConfiguration:OrgConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgConfiguration Get(string name, Input<string> id, OrgConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgConfiguration(name, id, state, options);
        }
    }

    public sealed class OrgConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Primary address of org
        /// </summary>
        [Input("address1")]
        public Input<string>? Address1 { get; set; }

        /// <summary>
        /// Secondary address of org
        /// </summary>
        [Input("address2")]
        public Input<string>? Address2 { get; set; }

        /// <summary>
        /// User ID representing the billing contact
        /// </summary>
        [Input("billingContactUser")]
        public Input<string>? BillingContactUser { get; set; }

        /// <summary>
        /// City of org
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// Name of org
        /// </summary>
        [Input("companyName", required: true)]
        public Input<string> CompanyName { get; set; } = null!;

        /// <summary>
        /// Country of org
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Support link of org
        /// </summary>
        [Input("endUserSupportHelpUrl")]
        public Input<string>? EndUserSupportHelpUrl { get; set; }

        /// <summary>
        /// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// Indicates whether the org's users receive Okta Communication emails
        /// </summary>
        [Input("optOutCommunicationEmails")]
        public Input<bool>? OptOutCommunicationEmails { get; set; }

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Postal code of org
        /// </summary>
        [Input("postalCode")]
        public Input<string>? PostalCode { get; set; }

        /// <summary>
        /// State of org
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Input("supportPhoneNumber")]
        public Input<string>? SupportPhoneNumber { get; set; }

        /// <summary>
        /// User ID representing the technical contact
        /// </summary>
        [Input("technicalContactUser")]
        public Input<string>? TechnicalContactUser { get; set; }

        /// <summary>
        /// The org's website
        /// </summary>
        [Input("website")]
        public Input<string>? Website { get; set; }

        public OrgConfigurationArgs()
        {
        }
        public static new OrgConfigurationArgs Empty => new OrgConfigurationArgs();
    }

    public sealed class OrgConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Primary address of org
        /// </summary>
        [Input("address1")]
        public Input<string>? Address1 { get; set; }

        /// <summary>
        /// Secondary address of org
        /// </summary>
        [Input("address2")]
        public Input<string>? Address2 { get; set; }

        /// <summary>
        /// User ID representing the billing contact
        /// </summary>
        [Input("billingContactUser")]
        public Input<string>? BillingContactUser { get; set; }

        /// <summary>
        /// City of org
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// Name of org
        /// </summary>
        [Input("companyName")]
        public Input<string>? CompanyName { get; set; }

        /// <summary>
        /// Country of org
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Support link of org
        /// </summary>
        [Input("endUserSupportHelpUrl")]
        public Input<string>? EndUserSupportHelpUrl { get; set; }

        /// <summary>
        /// Expiration of org
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Logo of org. The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// Indicates whether the org's users receive Okta Communication emails
        /// </summary>
        [Input("optOutCommunicationEmails")]
        public Input<bool>? OptOutCommunicationEmails { get; set; }

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Postal code of org
        /// </summary>
        [Input("postalCode")]
        public Input<string>? PostalCode { get; set; }

        /// <summary>
        /// State of org
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Subdomain of org
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// Support help phone of org
        /// </summary>
        [Input("supportPhoneNumber")]
        public Input<string>? SupportPhoneNumber { get; set; }

        /// <summary>
        /// User ID representing the technical contact
        /// </summary>
        [Input("technicalContactUser")]
        public Input<string>? TechnicalContactUser { get; set; }

        /// <summary>
        /// The org's website
        /// </summary>
        [Input("website")]
        public Input<string>? Website { get; set; }

        public OrgConfigurationState()
        {
        }
        public static new OrgConfigurationState Empty => new OrgConfigurationState();
    }
}
