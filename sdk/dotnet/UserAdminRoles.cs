// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Resource to manage a set of admin roles for a specific user.
    /// 
    /// This resource allows you to manage admin roles for a single user, independent of the user schema itself.
    /// 
    /// When using this with a `okta.user.User` resource, you should add a lifecycle ignore for admin roles to avoid conflicts
    /// in desired state.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testUser = new Okta.User.User("testUser", new Okta.User.UserArgs
    ///         {
    ///             FirstName = "TestAcc",
    ///             LastName = "Smith",
    ///             Login = "testAcc-replace_with_uuid@example.com",
    ///             Email = "testAcc-replace_with_uuid@example.com",
    ///         });
    ///         var testUserAdminRoles = new Okta.UserAdminRoles("testUserAdminRoles", new Okta.UserAdminRolesArgs
    ///         {
    ///             UserId = testUser.Id,
    ///             AdminRoles = 
    ///             {
    ///                 "APP_ADMIN",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Existing user admin roles can be imported via the Okta User ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:index/userAdminRoles:UserAdminRoles example &lt;user id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/userAdminRoles:UserAdminRoles")]
    public partial class UserAdminRoles : Pulumi.CustomResource
    {
        /// <summary>
        /// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
        /// </summary>
        [Output("adminRoles")]
        public Output<ImmutableArray<string>> AdminRoles { get; private set; } = null!;

        /// <summary>
        /// When this setting is enabled, the admins won't receive any of the default Okta 
        /// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
        /// </summary>
        [Output("disableNotifications")]
        public Output<bool?> DisableNotifications { get; private set; } = null!;

        /// <summary>
        /// Okta user ID.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserAdminRoles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserAdminRoles(string name, UserAdminRolesArgs args, CustomResourceOptions? options = null)
            : base("okta:index/userAdminRoles:UserAdminRoles", name, args ?? new UserAdminRolesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserAdminRoles(string name, Input<string> id, UserAdminRolesState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/userAdminRoles:UserAdminRoles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserAdminRoles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserAdminRoles Get(string name, Input<string> id, UserAdminRolesState? state = null, CustomResourceOptions? options = null)
        {
            return new UserAdminRoles(name, id, state, options);
        }
    }

    public sealed class UserAdminRolesArgs : Pulumi.ResourceArgs
    {
        [Input("adminRoles", required: true)]
        private InputList<string>? _adminRoles;

        /// <summary>
        /// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
        /// </summary>
        public InputList<string> AdminRoles
        {
            get => _adminRoles ?? (_adminRoles = new InputList<string>());
            set => _adminRoles = value;
        }

        /// <summary>
        /// When this setting is enabled, the admins won't receive any of the default Okta 
        /// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
        /// </summary>
        [Input("disableNotifications")]
        public Input<bool>? DisableNotifications { get; set; }

        /// <summary>
        /// Okta user ID.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public UserAdminRolesArgs()
        {
        }
    }

    public sealed class UserAdminRolesState : Pulumi.ResourceArgs
    {
        [Input("adminRoles")]
        private InputList<string>? _adminRoles;

        /// <summary>
        /// The list of Okta user admin roles, e.g. `["APP_ADMIN", "USER_ADMIN"]`
        /// </summary>
        public InputList<string> AdminRoles
        {
            get => _adminRoles ?? (_adminRoles = new InputList<string>());
            set => _adminRoles = value;
        }

        /// <summary>
        /// When this setting is enabled, the admins won't receive any of the default Okta 
        /// administrator emails. These admins also won't have access to contact Okta Support and open support cases on behalf of your org.
        /// </summary>
        [Input("disableNotifications")]
        public Input<bool>? DisableNotifications { get; set; }

        /// <summary>
        /// Okta user ID.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserAdminRolesState()
        {
        }
    }
}
