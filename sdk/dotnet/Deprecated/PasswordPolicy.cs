// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Deprecated
{
    public partial class PasswordPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication Provider: OKTA or ACTIVE_DIRECTORY.
        /// </summary>
        [Output("authProvider")]
        public Output<string?> AuthProvider { get; private set; } = null!;

        /// <summary>
        /// Policy Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable or disable email password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Output("emailRecovery")]
        public Output<string?> EmailRecovery { get; private set; } = null!;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        [Output("groupsIncludeds")]
        public Output<ImmutableArray<string>> GroupsIncludeds { get; private set; } = null!;

        /// <summary>
        /// Policy Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of minutes before a locked account is unlocked: 0 = no limit.
        /// </summary>
        [Output("passwordAutoUnlockMinutes")]
        public Output<int?> PasswordAutoUnlockMinutes { get; private set; } = null!;

        /// <summary>
        /// Check Passwords Against Common Password Dictionary.
        /// </summary>
        [Output("passwordDictionaryLookup")]
        public Output<bool?> PasswordDictionaryLookup { get; private set; } = null!;

        /// <summary>
        /// User firstName attribute must be excluded from the password
        /// </summary>
        [Output("passwordExcludeFirstName")]
        public Output<bool?> PasswordExcludeFirstName { get; private set; } = null!;

        /// <summary>
        /// User lastName attribute must be excluded from the password
        /// </summary>
        [Output("passwordExcludeLastName")]
        public Output<bool?> PasswordExcludeLastName { get; private set; } = null!;

        /// <summary>
        /// If the user name must be excluded from the password.
        /// </summary>
        [Output("passwordExcludeUsername")]
        public Output<bool?> PasswordExcludeUsername { get; private set; } = null!;

        /// <summary>
        /// Length in days a user will be warned before password expiry: 0 = no warning.
        /// </summary>
        [Output("passwordExpireWarnDays")]
        public Output<int?> PasswordExpireWarnDays { get; private set; } = null!;

        /// <summary>
        /// Number of distinct passwords that must be created before they can be reused: 0 = none.
        /// </summary>
        [Output("passwordHistoryCount")]
        public Output<int?> PasswordHistoryCount { get; private set; } = null!;

        /// <summary>
        /// Length in days a password is valid before expiry: 0 = no limit.
        /// </summary>
        [Output("passwordMaxAgeDays")]
        public Output<int?> PasswordMaxAgeDays { get; private set; } = null!;

        /// <summary>
        /// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
        /// </summary>
        [Output("passwordMaxLockoutAttempts")]
        public Output<int?> PasswordMaxLockoutAttempts { get; private set; } = null!;

        /// <summary>
        /// Minimum time interval in minutes between password changes: 0 = no limit.
        /// </summary>
        [Output("passwordMinAgeMinutes")]
        public Output<int?> PasswordMinAgeMinutes { get; private set; } = null!;

        /// <summary>
        /// Minimum password length.
        /// </summary>
        [Output("passwordMinLength")]
        public Output<int?> PasswordMinLength { get; private set; } = null!;

        /// <summary>
        /// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Output("passwordMinLowercase")]
        public Output<int?> PasswordMinLowercase { get; private set; } = null!;

        /// <summary>
        /// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Output("passwordMinNumber")]
        public Output<int?> PasswordMinNumber { get; private set; } = null!;

        /// <summary>
        /// If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Output("passwordMinSymbol")]
        public Output<int?> PasswordMinSymbol { get; private set; } = null!;

        /// <summary>
        /// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Output("passwordMinUppercase")]
        public Output<int?> PasswordMinUppercase { get; private set; } = null!;

        /// <summary>
        /// If a user should be informed when their account is locked.
        /// </summary>
        [Output("passwordShowLockoutFailures")]
        public Output<bool?> PasswordShowLockoutFailures { get; private set; } = null!;

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Min length of the password recovery question answer.
        /// </summary>
        [Output("questionMinLength")]
        public Output<int?> QuestionMinLength { get; private set; } = null!;

        /// <summary>
        /// Enable or disable security question password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Output("questionRecovery")]
        public Output<string?> QuestionRecovery { get; private set; } = null!;

        /// <summary>
        /// Lifetime in minutes of the recovery email token.
        /// </summary>
        [Output("recoveryEmailToken")]
        public Output<int?> RecoveryEmailToken { get; private set; } = null!;

        /// <summary>
        /// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's
        /// Windows account.
        /// </summary>
        [Output("skipUnlock")]
        public Output<bool?> SkipUnlock { get; private set; } = null!;

        /// <summary>
        /// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Output("smsRecovery")]
        public Output<string?> SmsRecovery { get; private set; } = null!;

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordPolicy(string name, PasswordPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/passwordPolicy:PasswordPolicy", name, args ?? new PasswordPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordPolicy(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/passwordPolicy:PasswordPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordPolicy Get(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordPolicy(name, id, state, options);
        }
    }

    public sealed class PasswordPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication Provider: OKTA or ACTIVE_DIRECTORY.
        /// </summary>
        [Input("authProvider")]
        public Input<string>? AuthProvider { get; set; }

        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable email password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("emailRecovery")]
        public Input<string>? EmailRecovery { get; set; }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of minutes before a locked account is unlocked: 0 = no limit.
        /// </summary>
        [Input("passwordAutoUnlockMinutes")]
        public Input<int>? PasswordAutoUnlockMinutes { get; set; }

        /// <summary>
        /// Check Passwords Against Common Password Dictionary.
        /// </summary>
        [Input("passwordDictionaryLookup")]
        public Input<bool>? PasswordDictionaryLookup { get; set; }

        /// <summary>
        /// User firstName attribute must be excluded from the password
        /// </summary>
        [Input("passwordExcludeFirstName")]
        public Input<bool>? PasswordExcludeFirstName { get; set; }

        /// <summary>
        /// User lastName attribute must be excluded from the password
        /// </summary>
        [Input("passwordExcludeLastName")]
        public Input<bool>? PasswordExcludeLastName { get; set; }

        /// <summary>
        /// If the user name must be excluded from the password.
        /// </summary>
        [Input("passwordExcludeUsername")]
        public Input<bool>? PasswordExcludeUsername { get; set; }

        /// <summary>
        /// Length in days a user will be warned before password expiry: 0 = no warning.
        /// </summary>
        [Input("passwordExpireWarnDays")]
        public Input<int>? PasswordExpireWarnDays { get; set; }

        /// <summary>
        /// Number of distinct passwords that must be created before they can be reused: 0 = none.
        /// </summary>
        [Input("passwordHistoryCount")]
        public Input<int>? PasswordHistoryCount { get; set; }

        /// <summary>
        /// Length in days a password is valid before expiry: 0 = no limit.
        /// </summary>
        [Input("passwordMaxAgeDays")]
        public Input<int>? PasswordMaxAgeDays { get; set; }

        /// <summary>
        /// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
        /// </summary>
        [Input("passwordMaxLockoutAttempts")]
        public Input<int>? PasswordMaxLockoutAttempts { get; set; }

        /// <summary>
        /// Minimum time interval in minutes between password changes: 0 = no limit.
        /// </summary>
        [Input("passwordMinAgeMinutes")]
        public Input<int>? PasswordMinAgeMinutes { get; set; }

        /// <summary>
        /// Minimum password length.
        /// </summary>
        [Input("passwordMinLength")]
        public Input<int>? PasswordMinLength { get; set; }

        /// <summary>
        /// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinLowercase")]
        public Input<int>? PasswordMinLowercase { get; set; }

        /// <summary>
        /// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinNumber")]
        public Input<int>? PasswordMinNumber { get; set; }

        /// <summary>
        /// If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinSymbol")]
        public Input<int>? PasswordMinSymbol { get; set; }

        /// <summary>
        /// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinUppercase")]
        public Input<int>? PasswordMinUppercase { get; set; }

        /// <summary>
        /// If a user should be informed when their account is locked.
        /// </summary>
        [Input("passwordShowLockoutFailures")]
        public Input<bool>? PasswordShowLockoutFailures { get; set; }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Min length of the password recovery question answer.
        /// </summary>
        [Input("questionMinLength")]
        public Input<int>? QuestionMinLength { get; set; }

        /// <summary>
        /// Enable or disable security question password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("questionRecovery")]
        public Input<string>? QuestionRecovery { get; set; }

        /// <summary>
        /// Lifetime in minutes of the recovery email token.
        /// </summary>
        [Input("recoveryEmailToken")]
        public Input<int>? RecoveryEmailToken { get; set; }

        /// <summary>
        /// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's
        /// Windows account.
        /// </summary>
        [Input("skipUnlock")]
        public Input<bool>? SkipUnlock { get; set; }

        /// <summary>
        /// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("smsRecovery")]
        public Input<string>? SmsRecovery { get; set; }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PasswordPolicyArgs()
        {
        }
    }

    public sealed class PasswordPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication Provider: OKTA or ACTIVE_DIRECTORY.
        /// </summary>
        [Input("authProvider")]
        public Input<string>? AuthProvider { get; set; }

        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable email password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("emailRecovery")]
        public Input<string>? EmailRecovery { get; set; }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of minutes before a locked account is unlocked: 0 = no limit.
        /// </summary>
        [Input("passwordAutoUnlockMinutes")]
        public Input<int>? PasswordAutoUnlockMinutes { get; set; }

        /// <summary>
        /// Check Passwords Against Common Password Dictionary.
        /// </summary>
        [Input("passwordDictionaryLookup")]
        public Input<bool>? PasswordDictionaryLookup { get; set; }

        /// <summary>
        /// User firstName attribute must be excluded from the password
        /// </summary>
        [Input("passwordExcludeFirstName")]
        public Input<bool>? PasswordExcludeFirstName { get; set; }

        /// <summary>
        /// User lastName attribute must be excluded from the password
        /// </summary>
        [Input("passwordExcludeLastName")]
        public Input<bool>? PasswordExcludeLastName { get; set; }

        /// <summary>
        /// If the user name must be excluded from the password.
        /// </summary>
        [Input("passwordExcludeUsername")]
        public Input<bool>? PasswordExcludeUsername { get; set; }

        /// <summary>
        /// Length in days a user will be warned before password expiry: 0 = no warning.
        /// </summary>
        [Input("passwordExpireWarnDays")]
        public Input<int>? PasswordExpireWarnDays { get; set; }

        /// <summary>
        /// Number of distinct passwords that must be created before they can be reused: 0 = none.
        /// </summary>
        [Input("passwordHistoryCount")]
        public Input<int>? PasswordHistoryCount { get; set; }

        /// <summary>
        /// Length in days a password is valid before expiry: 0 = no limit.
        /// </summary>
        [Input("passwordMaxAgeDays")]
        public Input<int>? PasswordMaxAgeDays { get; set; }

        /// <summary>
        /// Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
        /// </summary>
        [Input("passwordMaxLockoutAttempts")]
        public Input<int>? PasswordMaxLockoutAttempts { get; set; }

        /// <summary>
        /// Minimum time interval in minutes between password changes: 0 = no limit.
        /// </summary>
        [Input("passwordMinAgeMinutes")]
        public Input<int>? PasswordMinAgeMinutes { get; set; }

        /// <summary>
        /// Minimum password length.
        /// </summary>
        [Input("passwordMinLength")]
        public Input<int>? PasswordMinLength { get; set; }

        /// <summary>
        /// If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinLowercase")]
        public Input<int>? PasswordMinLowercase { get; set; }

        /// <summary>
        /// If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinNumber")]
        public Input<int>? PasswordMinNumber { get; set; }

        /// <summary>
        /// If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinSymbol")]
        public Input<int>? PasswordMinSymbol { get; set; }

        /// <summary>
        /// If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
        /// </summary>
        [Input("passwordMinUppercase")]
        public Input<int>? PasswordMinUppercase { get; set; }

        /// <summary>
        /// If a user should be informed when their account is locked.
        /// </summary>
        [Input("passwordShowLockoutFailures")]
        public Input<bool>? PasswordShowLockoutFailures { get; set; }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Min length of the password recovery question answer.
        /// </summary>
        [Input("questionMinLength")]
        public Input<int>? QuestionMinLength { get; set; }

        /// <summary>
        /// Enable or disable security question password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("questionRecovery")]
        public Input<string>? QuestionRecovery { get; set; }

        /// <summary>
        /// Lifetime in minutes of the recovery email token.
        /// </summary>
        [Input("recoveryEmailToken")]
        public Input<int>? RecoveryEmailToken { get; set; }

        /// <summary>
        /// When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's
        /// Windows account.
        /// </summary>
        [Input("skipUnlock")]
        public Input<bool>? SkipUnlock { get; set; }

        /// <summary>
        /// Enable or disable SMS password recovery: ACTIVE or INACTIVE.
        /// </summary>
        [Input("smsRecovery")]
        public Input<string>? SmsRecovery { get; set; }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PasswordPolicyState()
        {
        }
    }
}
