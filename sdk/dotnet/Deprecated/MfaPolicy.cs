// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Deprecated
{
    [Obsolete(@"Deprecated. Use policy.Mfa instead. This resource will be removed in version 4.0 of this provider.")]
    [OktaResourceType("okta:deprecated/mfaPolicy:MfaPolicy")]
    public partial class MfaPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("duo")]
        public Output<ImmutableDictionary<string, string>?> Duo { get; private set; } = null!;

        [Output("externalIdp")]
        public Output<ImmutableDictionary<string, string>?> ExternalIdp { get; private set; } = null!;

        [Output("fidoU2f")]
        public Output<ImmutableDictionary<string, string>?> FidoU2f { get; private set; } = null!;

        [Output("fidoWebauthn")]
        public Output<ImmutableDictionary<string, string>?> FidoWebauthn { get; private set; } = null!;

        [Output("googleOtp")]
        public Output<ImmutableDictionary<string, string>?> GoogleOtp { get; private set; } = null!;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        [Output("groupsIncludeds")]
        public Output<ImmutableArray<string>> GroupsIncludeds { get; private set; } = null!;

        [Output("hotp")]
        public Output<ImmutableDictionary<string, string>?> Hotp { get; private set; } = null!;

        /// <summary>
        /// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
        /// </summary>
        [Output("isOie")]
        public Output<bool?> IsOie { get; private set; } = null!;

        /// <summary>
        /// Policy Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("oktaCall")]
        public Output<ImmutableDictionary<string, string>?> OktaCall { get; private set; } = null!;

        [Output("oktaEmail")]
        public Output<ImmutableDictionary<string, string>?> OktaEmail { get; private set; } = null!;

        [Output("oktaOtp")]
        public Output<ImmutableDictionary<string, string>?> OktaOtp { get; private set; } = null!;

        [Output("oktaPassword")]
        public Output<ImmutableDictionary<string, string>?> OktaPassword { get; private set; } = null!;

        [Output("oktaPush")]
        public Output<ImmutableDictionary<string, string>?> OktaPush { get; private set; } = null!;

        [Output("oktaQuestion")]
        public Output<ImmutableDictionary<string, string>?> OktaQuestion { get; private set; } = null!;

        [Output("oktaSms")]
        public Output<ImmutableDictionary<string, string>?> OktaSms { get; private set; } = null!;

        [Output("oktaVerify")]
        public Output<ImmutableDictionary<string, string>?> OktaVerify { get; private set; } = null!;

        [Output("onpremMfa")]
        public Output<ImmutableDictionary<string, string>?> OnpremMfa { get; private set; } = null!;

        [Output("phoneNumber")]
        public Output<ImmutableDictionary<string, string>?> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        [Output("rsaToken")]
        public Output<ImmutableDictionary<string, string>?> RsaToken { get; private set; } = null!;

        [Output("securityQuestion")]
        public Output<ImmutableDictionary<string, string>?> SecurityQuestion { get; private set; } = null!;

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("symantecVip")]
        public Output<ImmutableDictionary<string, string>?> SymantecVip { get; private set; } = null!;

        [Output("webauthn")]
        public Output<ImmutableDictionary<string, string>?> Webauthn { get; private set; } = null!;

        [Output("yubikeyToken")]
        public Output<ImmutableDictionary<string, string>?> YubikeyToken { get; private set; } = null!;


        /// <summary>
        /// Create a MfaPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MfaPolicy(string name, MfaPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/mfaPolicy:MfaPolicy", name, args ?? new MfaPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MfaPolicy(string name, Input<string> id, MfaPolicyState? state = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/mfaPolicy:MfaPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MfaPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MfaPolicy Get(string name, Input<string> id, MfaPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MfaPolicy(name, id, state, options);
        }
    }

    public sealed class MfaPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("duo")]
        private InputMap<string>? _duo;
        public InputMap<string> Duo
        {
            get => _duo ?? (_duo = new InputMap<string>());
            set => _duo = value;
        }

        [Input("externalIdp")]
        private InputMap<string>? _externalIdp;
        public InputMap<string> ExternalIdp
        {
            get => _externalIdp ?? (_externalIdp = new InputMap<string>());
            set => _externalIdp = value;
        }

        [Input("fidoU2f")]
        private InputMap<string>? _fidoU2f;
        public InputMap<string> FidoU2f
        {
            get => _fidoU2f ?? (_fidoU2f = new InputMap<string>());
            set => _fidoU2f = value;
        }

        [Input("fidoWebauthn")]
        private InputMap<string>? _fidoWebauthn;
        public InputMap<string> FidoWebauthn
        {
            get => _fidoWebauthn ?? (_fidoWebauthn = new InputMap<string>());
            set => _fidoWebauthn = value;
        }

        [Input("googleOtp")]
        private InputMap<string>? _googleOtp;
        public InputMap<string> GoogleOtp
        {
            get => _googleOtp ?? (_googleOtp = new InputMap<string>());
            set => _googleOtp = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        [Input("hotp")]
        private InputMap<string>? _hotp;
        public InputMap<string> Hotp
        {
            get => _hotp ?? (_hotp = new InputMap<string>());
            set => _hotp = value;
        }

        /// <summary>
        /// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
        /// </summary>
        [Input("isOie")]
        public Input<bool>? IsOie { get; set; }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oktaCall")]
        private InputMap<string>? _oktaCall;
        public InputMap<string> OktaCall
        {
            get => _oktaCall ?? (_oktaCall = new InputMap<string>());
            set => _oktaCall = value;
        }

        [Input("oktaEmail")]
        private InputMap<string>? _oktaEmail;
        public InputMap<string> OktaEmail
        {
            get => _oktaEmail ?? (_oktaEmail = new InputMap<string>());
            set => _oktaEmail = value;
        }

        [Input("oktaOtp")]
        private InputMap<string>? _oktaOtp;
        public InputMap<string> OktaOtp
        {
            get => _oktaOtp ?? (_oktaOtp = new InputMap<string>());
            set => _oktaOtp = value;
        }

        [Input("oktaPassword")]
        private InputMap<string>? _oktaPassword;
        public InputMap<string> OktaPassword
        {
            get => _oktaPassword ?? (_oktaPassword = new InputMap<string>());
            set => _oktaPassword = value;
        }

        [Input("oktaPush")]
        private InputMap<string>? _oktaPush;
        public InputMap<string> OktaPush
        {
            get => _oktaPush ?? (_oktaPush = new InputMap<string>());
            set => _oktaPush = value;
        }

        [Input("oktaQuestion")]
        private InputMap<string>? _oktaQuestion;
        public InputMap<string> OktaQuestion
        {
            get => _oktaQuestion ?? (_oktaQuestion = new InputMap<string>());
            set => _oktaQuestion = value;
        }

        [Input("oktaSms")]
        private InputMap<string>? _oktaSms;
        public InputMap<string> OktaSms
        {
            get => _oktaSms ?? (_oktaSms = new InputMap<string>());
            set => _oktaSms = value;
        }

        [Input("oktaVerify")]
        private InputMap<string>? _oktaVerify;
        public InputMap<string> OktaVerify
        {
            get => _oktaVerify ?? (_oktaVerify = new InputMap<string>());
            set => _oktaVerify = value;
        }

        [Input("onpremMfa")]
        private InputMap<string>? _onpremMfa;
        public InputMap<string> OnpremMfa
        {
            get => _onpremMfa ?? (_onpremMfa = new InputMap<string>());
            set => _onpremMfa = value;
        }

        [Input("phoneNumber")]
        private InputMap<string>? _phoneNumber;
        public InputMap<string> PhoneNumber
        {
            get => _phoneNumber ?? (_phoneNumber = new InputMap<string>());
            set => _phoneNumber = value;
        }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("rsaToken")]
        private InputMap<string>? _rsaToken;
        public InputMap<string> RsaToken
        {
            get => _rsaToken ?? (_rsaToken = new InputMap<string>());
            set => _rsaToken = value;
        }

        [Input("securityQuestion")]
        private InputMap<string>? _securityQuestion;
        public InputMap<string> SecurityQuestion
        {
            get => _securityQuestion ?? (_securityQuestion = new InputMap<string>());
            set => _securityQuestion = value;
        }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("symantecVip")]
        private InputMap<string>? _symantecVip;
        public InputMap<string> SymantecVip
        {
            get => _symantecVip ?? (_symantecVip = new InputMap<string>());
            set => _symantecVip = value;
        }

        [Input("webauthn")]
        private InputMap<string>? _webauthn;
        public InputMap<string> Webauthn
        {
            get => _webauthn ?? (_webauthn = new InputMap<string>());
            set => _webauthn = value;
        }

        [Input("yubikeyToken")]
        private InputMap<string>? _yubikeyToken;
        public InputMap<string> YubikeyToken
        {
            get => _yubikeyToken ?? (_yubikeyToken = new InputMap<string>());
            set => _yubikeyToken = value;
        }

        public MfaPolicyArgs()
        {
        }
        public static new MfaPolicyArgs Empty => new MfaPolicyArgs();
    }

    public sealed class MfaPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("duo")]
        private InputMap<string>? _duo;
        public InputMap<string> Duo
        {
            get => _duo ?? (_duo = new InputMap<string>());
            set => _duo = value;
        }

        [Input("externalIdp")]
        private InputMap<string>? _externalIdp;
        public InputMap<string> ExternalIdp
        {
            get => _externalIdp ?? (_externalIdp = new InputMap<string>());
            set => _externalIdp = value;
        }

        [Input("fidoU2f")]
        private InputMap<string>? _fidoU2f;
        public InputMap<string> FidoU2f
        {
            get => _fidoU2f ?? (_fidoU2f = new InputMap<string>());
            set => _fidoU2f = value;
        }

        [Input("fidoWebauthn")]
        private InputMap<string>? _fidoWebauthn;
        public InputMap<string> FidoWebauthn
        {
            get => _fidoWebauthn ?? (_fidoWebauthn = new InputMap<string>());
            set => _fidoWebauthn = value;
        }

        [Input("googleOtp")]
        private InputMap<string>? _googleOtp;
        public InputMap<string> GoogleOtp
        {
            get => _googleOtp ?? (_googleOtp = new InputMap<string>());
            set => _googleOtp = value;
        }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        [Input("hotp")]
        private InputMap<string>? _hotp;
        public InputMap<string> Hotp
        {
            get => _hotp ?? (_hotp = new InputMap<string>());
            set => _hotp = value;
        }

        /// <summary>
        /// Is the policy using Okta Identity Engine (OIE) with authenticators instead of factors?
        /// </summary>
        [Input("isOie")]
        public Input<bool>? IsOie { get; set; }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oktaCall")]
        private InputMap<string>? _oktaCall;
        public InputMap<string> OktaCall
        {
            get => _oktaCall ?? (_oktaCall = new InputMap<string>());
            set => _oktaCall = value;
        }

        [Input("oktaEmail")]
        private InputMap<string>? _oktaEmail;
        public InputMap<string> OktaEmail
        {
            get => _oktaEmail ?? (_oktaEmail = new InputMap<string>());
            set => _oktaEmail = value;
        }

        [Input("oktaOtp")]
        private InputMap<string>? _oktaOtp;
        public InputMap<string> OktaOtp
        {
            get => _oktaOtp ?? (_oktaOtp = new InputMap<string>());
            set => _oktaOtp = value;
        }

        [Input("oktaPassword")]
        private InputMap<string>? _oktaPassword;
        public InputMap<string> OktaPassword
        {
            get => _oktaPassword ?? (_oktaPassword = new InputMap<string>());
            set => _oktaPassword = value;
        }

        [Input("oktaPush")]
        private InputMap<string>? _oktaPush;
        public InputMap<string> OktaPush
        {
            get => _oktaPush ?? (_oktaPush = new InputMap<string>());
            set => _oktaPush = value;
        }

        [Input("oktaQuestion")]
        private InputMap<string>? _oktaQuestion;
        public InputMap<string> OktaQuestion
        {
            get => _oktaQuestion ?? (_oktaQuestion = new InputMap<string>());
            set => _oktaQuestion = value;
        }

        [Input("oktaSms")]
        private InputMap<string>? _oktaSms;
        public InputMap<string> OktaSms
        {
            get => _oktaSms ?? (_oktaSms = new InputMap<string>());
            set => _oktaSms = value;
        }

        [Input("oktaVerify")]
        private InputMap<string>? _oktaVerify;
        public InputMap<string> OktaVerify
        {
            get => _oktaVerify ?? (_oktaVerify = new InputMap<string>());
            set => _oktaVerify = value;
        }

        [Input("onpremMfa")]
        private InputMap<string>? _onpremMfa;
        public InputMap<string> OnpremMfa
        {
            get => _onpremMfa ?? (_onpremMfa = new InputMap<string>());
            set => _onpremMfa = value;
        }

        [Input("phoneNumber")]
        private InputMap<string>? _phoneNumber;
        public InputMap<string> PhoneNumber
        {
            get => _phoneNumber ?? (_phoneNumber = new InputMap<string>());
            set => _phoneNumber = value;
        }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
        /// priority is provided. API defaults it to the last (lowest) if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("rsaToken")]
        private InputMap<string>? _rsaToken;
        public InputMap<string> RsaToken
        {
            get => _rsaToken ?? (_rsaToken = new InputMap<string>());
            set => _rsaToken = value;
        }

        [Input("securityQuestion")]
        private InputMap<string>? _securityQuestion;
        public InputMap<string> SecurityQuestion
        {
            get => _securityQuestion ?? (_securityQuestion = new InputMap<string>());
            set => _securityQuestion = value;
        }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("symantecVip")]
        private InputMap<string>? _symantecVip;
        public InputMap<string> SymantecVip
        {
            get => _symantecVip ?? (_symantecVip = new InputMap<string>());
            set => _symantecVip = value;
        }

        [Input("webauthn")]
        private InputMap<string>? _webauthn;
        public InputMap<string> Webauthn
        {
            get => _webauthn ?? (_webauthn = new InputMap<string>());
            set => _webauthn = value;
        }

        [Input("yubikeyToken")]
        private InputMap<string>? _yubikeyToken;
        public InputMap<string> YubikeyToken
        {
            get => _yubikeyToken ?? (_yubikeyToken = new InputMap<string>());
            set => _yubikeyToken = value;
        }

        public MfaPolicyState()
        {
        }
        public static new MfaPolicyState Empty => new MfaPolicyState();
    }
}
