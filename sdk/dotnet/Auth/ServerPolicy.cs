// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Auth
{
    /// <summary>
    /// Creates an Authorization Server Policy.
    /// 
    /// This resource allows you to create and configure an Authorization Server Policy.
    /// </summary>
    public partial class ServerPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Auth Server.
        /// </summary>
        [Output("authServerId")]
        public Output<string> AuthServerId { get; private set; } = null!;

        /// <summary>
        /// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist for all clients. Otherwise it is a list of client ids.
        /// </summary>
        [Output("clientWhitelists")]
        public Output<ImmutableArray<string>> ClientWhitelists { get; private set; } = null!;

        /// <summary>
        /// The description of the Auth Server Policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Auth Server Policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The priority of the Auth Server Policy.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The status of the Auth Server Policy.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The type of the Auth Server Policy.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ServerPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerPolicy(string name, ServerPolicyArgs args, CustomResourceOptions? options = null)
            : base("okta:auth/serverPolicy:ServerPolicy", name, args ?? new ServerPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerPolicy(string name, Input<string> id, ServerPolicyState? state = null, CustomResourceOptions? options = null)
            : base("okta:auth/serverPolicy:ServerPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerPolicy Get(string name, Input<string> id, ServerPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerPolicy(name, id, state, options);
        }
    }

    public sealed class ServerPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Auth Server.
        /// </summary>
        [Input("authServerId", required: true)]
        public Input<string> AuthServerId { get; set; } = null!;

        [Input("clientWhitelists", required: true)]
        private InputList<string>? _clientWhitelists;

        /// <summary>
        /// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist for all clients. Otherwise it is a list of client ids.
        /// </summary>
        public InputList<string> ClientWhitelists
        {
            get => _clientWhitelists ?? (_clientWhitelists = new InputList<string>());
            set => _clientWhitelists = value;
        }

        /// <summary>
        /// The description of the Auth Server Policy.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The name of the Auth Server Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the Auth Server Policy.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// The status of the Auth Server Policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the Auth Server Policy.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServerPolicyArgs()
        {
        }
    }

    public sealed class ServerPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Auth Server.
        /// </summary>
        [Input("authServerId")]
        public Input<string>? AuthServerId { get; set; }

        [Input("clientWhitelists")]
        private InputList<string>? _clientWhitelists;

        /// <summary>
        /// The clients to whitelist the policy for. `["ALL_CLIENTS"]` is a special value that can be used to whitelist for all clients. Otherwise it is a list of client ids.
        /// </summary>
        public InputList<string> ClientWhitelists
        {
            get => _clientWhitelists ?? (_clientWhitelists = new InputList<string>());
            set => _clientWhitelists = value;
        }

        /// <summary>
        /// The description of the Auth Server Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Auth Server Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the Auth Server Policy.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The status of the Auth Server Policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the Auth Server Policy.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServerPolicyState()
        {
        }
    }
}
