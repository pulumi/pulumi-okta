// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Auth
{
    [OktaResourceType("okta:auth/serverScope:ServerScope")]
    public partial class ServerScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auth server ID
        /// </summary>
        [Output("authServerId")]
        public Output<string> AuthServerId { get; private set; } = null!;

        /// <summary>
        /// EA Feature and thus it is simply ignored if the feature is off
        /// </summary>
        [Output("consent")]
        public Output<string?> Consent { get; private set; } = null!;

        /// <summary>
        /// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
        /// </summary>
        [Output("default")]
        public Output<bool?> Default { get; private set; } = null!;

        /// <summary>
        /// Description of the Auth Server Scope.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the end user displayed in a consent dialog box
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
        /// </summary>
        [Output("metadataPublish")]
        public Output<string?> MetadataPublish { get; private set; } = null!;

        /// <summary>
        /// Auth server scope name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the scope optional
        /// </summary>
        [Output("optional")]
        public Output<bool?> Optional { get; private set; } = null!;

        /// <summary>
        /// Whether Okta created the Scope
        /// </summary>
        [Output("system")]
        public Output<bool> System { get; private set; } = null!;


        /// <summary>
        /// Create a ServerScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerScope(string name, ServerScopeArgs args, CustomResourceOptions? options = null)
            : base("okta:auth/serverScope:ServerScope", name, args ?? new ServerScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerScope(string name, Input<string> id, ServerScopeState? state = null, CustomResourceOptions? options = null)
            : base("okta:auth/serverScope:ServerScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerScope Get(string name, Input<string> id, ServerScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerScope(name, id, state, options);
        }
    }

    public sealed class ServerScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auth server ID
        /// </summary>
        [Input("authServerId", required: true)]
        public Input<string> AuthServerId { get; set; } = null!;

        /// <summary>
        /// EA Feature and thus it is simply ignored if the feature is off
        /// </summary>
        [Input("consent")]
        public Input<string>? Consent { get; set; }

        /// <summary>
        /// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// Description of the Auth Server Scope.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the end user displayed in a consent dialog box
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
        /// </summary>
        [Input("metadataPublish")]
        public Input<string>? MetadataPublish { get; set; }

        /// <summary>
        /// Auth server scope name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the scope optional
        /// </summary>
        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        public ServerScopeArgs()
        {
        }
        public static new ServerScopeArgs Empty => new ServerScopeArgs();
    }

    public sealed class ServerScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auth server ID
        /// </summary>
        [Input("authServerId")]
        public Input<string>? AuthServerId { get; set; }

        /// <summary>
        /// EA Feature and thus it is simply ignored if the feature is off
        /// </summary>
        [Input("consent")]
        public Input<string>? Consent { get; set; }

        /// <summary>
        /// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// Description of the Auth Server Scope.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the end user displayed in a consent dialog box
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
        /// </summary>
        [Input("metadataPublish")]
        public Input<string>? MetadataPublish { get; set; }

        /// <summary>
        /// Auth server scope name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the scope optional
        /// </summary>
        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        /// <summary>
        /// Whether Okta created the Scope
        /// </summary>
        [Input("system")]
        public Input<bool>? System { get; set; }

        public ServerScopeState()
        {
        }
        public static new ServerScopeState Empty => new ServerScopeState();
    }
}
