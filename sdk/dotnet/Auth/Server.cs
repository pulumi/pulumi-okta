// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Auth
{
    /// <summary>
    /// Creates an Authorization Server. This resource allows you to create and configure an Authorization Server.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Auth.Server("example", new()
    ///     {
    ///         Audiences = new[]
    ///         {
    ///             "api://example",
    ///         },
    ///         Description = "My Example Auth Server",
    ///         Name = "example",
    ///         IssuerMode = "CUSTOM_URL",
    ///         Status = "ACTIVE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:auth/server:Server example &lt;auth_server_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:auth/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
        /// </summary>
        [Output("audiences")]
        public Output<ImmutableArray<string>> Audiences { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the authorization server started to use the `kid` for signing tokens.
        /// </summary>
        [Output("credentialsLastRotated")]
        public Output<string> CredentialsLastRotated { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.
        /// </summary>
        [Output("credentialsNextRotation")]
        public Output<string> CredentialsNextRotation { get; private set; } = null!;

        /// <summary>
        /// The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
        /// </summary>
        [Output("credentialsRotationMode")]
        public Output<string?> CredentialsRotationMode { get; private set; } = null!;

        /// <summary>
        /// The description of the authorization server.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
        /// </summary>
        [Output("issuerMode")]
        public Output<string?> IssuerMode { get; private set; } = null!;

        /// <summary>
        /// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
        /// </summary>
        [Output("kid")]
        public Output<string> Kid { get; private set; } = null!;

        /// <summary>
        /// The name of the authorization server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("okta:auth/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("okta:auth/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("audiences", required: true)]
        private InputList<string>? _audiences;

        /// <summary>
        /// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
        /// </summary>
        public InputList<string> Audiences
        {
            get => _audiences ?? (_audiences = new InputList<string>());
            set => _audiences = value;
        }

        /// <summary>
        /// The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
        /// </summary>
        [Input("credentialsRotationMode")]
        public Input<string>? CredentialsRotationMode { get; set; }

        /// <summary>
        /// The description of the authorization server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
        /// </summary>
        [Input("issuerMode")]
        public Input<string>? IssuerMode { get; set; }

        /// <summary>
        /// The name of the authorization server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        [Input("audiences")]
        private InputList<string>? _audiences;

        /// <summary>
        /// The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only supports a single value here.
        /// </summary>
        public InputList<string> Audiences
        {
            get => _audiences ?? (_audiences = new InputList<string>());
            set => _audiences = value;
        }

        /// <summary>
        /// The timestamp when the authorization server started to use the `kid` for signing tokens.
        /// </summary>
        [Input("credentialsLastRotated")]
        public Input<string>? CredentialsLastRotated { get; set; }

        /// <summary>
        /// The timestamp when the authorization server changes the key for signing tokens. Only returned when `credentials_rotation_mode` is `AUTO`.
        /// </summary>
        [Input("credentialsNextRotation")]
        public Input<string>? CredentialsNextRotation { get; set; }

        /// <summary>
        /// The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
        /// </summary>
        [Input("credentialsRotationMode")]
        public Input<string>? CredentialsRotationMode { get; set; }

        /// <summary>
        /// The description of the authorization server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`. Default: `ORG_URL`
        /// </summary>
        [Input("issuerMode")]
        public Input<string>? IssuerMode { get; set; }

        /// <summary>
        /// The ID of the JSON Web Key used for signing tokens issued by the authorization server.
        /// </summary>
        [Input("kid")]
        public Input<string>? Kid { get; set; }

        /// <summary>
        /// The name of the authorization server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
