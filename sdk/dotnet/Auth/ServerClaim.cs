// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Auth
{
    /// <summary>
    /// Creates an Authorization Server Claim.
    /// 
    /// This resource allows you to create and configure an Authorization Server Claim.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.Auth.ServerClaim("example", new()
    ///     {
    ///         AuthServerId = "&lt;auth server id&gt;",
    ///         ClaimType = "IDENTITY",
    ///         Scopes = new[]
    ///         {
    ///             okta_auth_server_scope.Example.Name,
    ///         },
    ///         Value = "String.substringAfter(user.email, \"@\") == \"example.com\"",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Authorization Server Claim can be imported via the Auth Server ID and Claim ID.
    /// 
    /// ```sh
    ///  $ pulumi import okta:auth/serverClaim:ServerClaim example &amp;#60;auth server id&amp;#62;/&amp;#60;claim id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:auth/serverClaim:ServerClaim")]
    public partial class ServerClaim : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to include claims in token, by default it is set to `true`.
        /// </summary>
        [Output("alwaysIncludeInToken")]
        public Output<bool?> AlwaysIncludeInToken { get; private set; } = null!;

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Output("authServerId")]
        public Output<string> AuthServerId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
        /// </summary>
        [Output("claimType")]
        public Output<string> ClaimType { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of group filter if `value_type` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
        /// </summary>
        [Output("groupFilterType")]
        public Output<string?> GroupFilterType { get; private set; } = null!;

        /// <summary>
        /// The name of the claim.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of scopes the auth server claim is tied to.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The status of the application. It defaults to `"ACTIVE"`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The value of the claim.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
        /// </summary>
        [Output("valueType")]
        public Output<string?> ValueType { get; private set; } = null!;


        /// <summary>
        /// Create a ServerClaim resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerClaim(string name, ServerClaimArgs args, CustomResourceOptions? options = null)
            : base("okta:auth/serverClaim:ServerClaim", name, args ?? new ServerClaimArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerClaim(string name, Input<string> id, ServerClaimState? state = null, CustomResourceOptions? options = null)
            : base("okta:auth/serverClaim:ServerClaim", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerClaim resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerClaim Get(string name, Input<string> id, ServerClaimState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerClaim(name, id, state, options);
        }
    }

    public sealed class ServerClaimArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to include claims in token, by default it is set to `true`.
        /// </summary>
        [Input("alwaysIncludeInToken")]
        public Input<bool>? AlwaysIncludeInToken { get; set; }

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Input("authServerId", required: true)]
        public Input<string> AuthServerId { get; set; } = null!;

        /// <summary>
        /// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
        /// </summary>
        [Input("claimType", required: true)]
        public Input<string> ClaimType { get; set; } = null!;

        /// <summary>
        /// Specifies the type of group filter if `value_type` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
        /// </summary>
        [Input("groupFilterType")]
        public Input<string>? GroupFilterType { get; set; }

        /// <summary>
        /// The name of the claim.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of scopes the auth server claim is tied to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The status of the application. It defaults to `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The value of the claim.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
        /// </summary>
        [Input("valueType")]
        public Input<string>? ValueType { get; set; }

        public ServerClaimArgs()
        {
        }
        public static new ServerClaimArgs Empty => new ServerClaimArgs();
    }

    public sealed class ServerClaimState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to include claims in token, by default it is set to `true`.
        /// </summary>
        [Input("alwaysIncludeInToken")]
        public Input<bool>? AlwaysIncludeInToken { get; set; }

        /// <summary>
        /// ID of the authorization server.
        /// </summary>
        [Input("authServerId")]
        public Input<string>? AuthServerId { get; set; }

        /// <summary>
        /// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
        /// </summary>
        [Input("claimType")]
        public Input<string>? ClaimType { get; set; }

        /// <summary>
        /// Specifies the type of group filter if `value_type` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
        /// </summary>
        [Input("groupFilterType")]
        public Input<string>? GroupFilterType { get; set; }

        /// <summary>
        /// The name of the claim.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of scopes the auth server claim is tied to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The status of the application. It defaults to `"ACTIVE"`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The value of the claim.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
        /// </summary>
        [Input("valueType")]
        public Input<string>? ValueType { get; set; }

        public ServerClaimState()
        {
        }
        public static new ServerClaimState Empty => new ServerClaimState();
    }
}
