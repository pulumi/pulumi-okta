// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    public static class GetRoleSubscription
    {
        /// <summary>
        /// Use this data source to retrieve role subscription with a specific type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetRoleSubscription.Invoke(new()
        ///     {
        ///         NotificationType = "APP_IMPORT",
        ///         RoleType = "SUPER_ADMIN",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRoleSubscriptionResult> InvokeAsync(GetRoleSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleSubscriptionResult>("okta:index/getRoleSubscription:getRoleSubscription", args ?? new GetRoleSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve role subscription with a specific type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.GetRoleSubscription.Invoke(new()
        ///     {
        ///         NotificationType = "APP_IMPORT",
        ///         RoleType = "SUPER_ADMIN",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRoleSubscriptionResult> Invoke(GetRoleSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleSubscriptionResult>("okta:index/getRoleSubscription:getRoleSubscription", args ?? new GetRoleSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of the notification. Valid values: `"CONNECTOR_AGENT"`, `"USER_LOCKED_OUT"`, 
        /// `"APP_IMPORT"`, `"LDAP_AGENT"`, `"AD_AGENT"`, `"OKTA_ANNOUNCEMENT"`, `"OKTA_ISSUE"`, `"OKTA_UPDATE"`, `"IWA_AGENT"`,
        /// `"USER_DEPROVISION"`, `"REPORT_SUSPICIOUS_ACTIVITY"`, `"RATELIMIT_NOTIFICATION"`.
        /// </summary>
        [Input("notificationType", required: true)]
        public string NotificationType { get; set; } = null!;

        /// <summary>
        /// Type of the role. Valid values: `"SUPER_ADMIN"`, `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, 
        /// `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`, `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`,
        /// `"GROUP_MEMBERSHIP_ADMIN"`.
        /// </summary>
        [Input("roleType", required: true)]
        public string RoleType { get; set; } = null!;

        public GetRoleSubscriptionArgs()
        {
        }
        public static new GetRoleSubscriptionArgs Empty => new GetRoleSubscriptionArgs();
    }

    public sealed class GetRoleSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of the notification. Valid values: `"CONNECTOR_AGENT"`, `"USER_LOCKED_OUT"`, 
        /// `"APP_IMPORT"`, `"LDAP_AGENT"`, `"AD_AGENT"`, `"OKTA_ANNOUNCEMENT"`, `"OKTA_ISSUE"`, `"OKTA_UPDATE"`, `"IWA_AGENT"`,
        /// `"USER_DEPROVISION"`, `"REPORT_SUSPICIOUS_ACTIVITY"`, `"RATELIMIT_NOTIFICATION"`.
        /// </summary>
        [Input("notificationType", required: true)]
        public Input<string> NotificationType { get; set; } = null!;

        /// <summary>
        /// Type of the role. Valid values: `"SUPER_ADMIN"`, `"ORG_ADMIN"`, `"APP_ADMIN"`, `"USER_ADMIN"`, 
        /// `"HELP_DESK_ADMIN"`, `"READ_ONLY_ADMIN"`, `"MOBILE_ADMIN"`, `"API_ACCESS_MANAGEMENT_ADMIN"`, `"REPORT_ADMIN"`,
        /// `"GROUP_MEMBERSHIP_ADMIN"`.
        /// </summary>
        [Input("roleType", required: true)]
        public Input<string> RoleType { get; set; } = null!;

        public GetRoleSubscriptionInvokeArgs()
        {
        }
        public static new GetRoleSubscriptionInvokeArgs Empty => new GetRoleSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleSubscriptionResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NotificationType;
        public readonly string RoleType;
        /// <summary>
        /// Subscription status.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetRoleSubscriptionResult(
            string id,

            string notificationType,

            string roleType,

            string status)
        {
            Id = id;
            NotificationType = notificationType;
            RoleType = roleType;
            Status = status;
        }
    }
}
