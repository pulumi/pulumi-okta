// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manage the access request process. This resource allows you to create and read an Okta [request](https://developer.okta.com/docs/api/iga/openapi/governance.requests.admin.v2/tag/Requests/#tag/Requests).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Okta.RequestV2("test", new()
    ///     {
    ///         Requested = new Okta.Inputs.RequestV2RequestedArgs
    ///         {
    ///             Type = "CATALOG_ENTRY",
    ///             EntryId = "&lt;entry_id&gt;",
    ///         },
    ///         RequestedFor = new Okta.Inputs.RequestV2RequestedForArgs
    ///         {
    ///             Type = "OKTA_USER",
    ///             ExternalId = "&lt;user_id&gt;",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/requestV2:RequestV2 example &lt;request_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/requestV2:RequestV2")]
    public partial class RequestV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// How long the requester retains access after their request is approved and fulfilled.
        /// </summary>
        [Output("accessDuration")]
        public Output<string> AccessDuration { get; private set; } = null!;

        /// <summary>
        /// The date and time when the request condition was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The id of the user who created the request condition.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The status of the granted access request.
        /// </summary>
        [Output("grantStatus")]
        public Output<string> GrantStatus { get; private set; } = null!;

        /// <summary>
        /// The date the approved access was granted. Only set if request . Status is APPROVED.
        /// </summary>
        [Output("granted")]
        public Output<string> Granted { get; private set; } = null!;

        /// <summary>
        /// The date and time when the request condition was last updated.
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The id of the user who last updated the request condition.
        /// </summary>
        [Output("lastUpdatedBy")]
        public Output<string> LastUpdatedBy { get; private set; } = null!;

        /// <summary>
        /// A representation of a resource that can be requested for access.
        /// </summary>
        [Output("requested")]
        public Output<Outputs.RequestV2Requested?> Requested { get; private set; } = null!;

        /// <summary>
        /// A representation of a principal.
        /// </summary>
        [Output("requestedFor")]
        public Output<Outputs.RequestV2RequestedFor?> RequestedFor { get; private set; } = null!;

        /// <summary>
        /// The requester input fields required by the approval system.
        /// </summary>
        [Output("requesterFieldValues")]
        public Output<ImmutableArray<Outputs.RequestV2RequesterFieldValue>> RequesterFieldValues { get; private set; } = null!;

        /// <summary>
        /// The date the request was resolved.
        /// </summary>
        [Output("resolved")]
        public Output<string> Resolved { get; private set; } = null!;

        /// <summary>
        /// The date the request was scheduled for revocation.
        /// </summary>
        [Output("revocationScheduled")]
        public Output<string> RevocationScheduled { get; private set; } = null!;

        /// <summary>
        /// The revocation status of the request.
        /// </summary>
        [Output("revocationStatus")]
        public Output<string> RevocationStatus { get; private set; } = null!;

        /// <summary>
        /// The date the granted access was revoked.
        /// </summary>
        [Output("revoked")]
        public Output<string> Revoked { get; private set; } = null!;

        /// <summary>
        /// The status of the request.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a RequestV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RequestV2(string name, RequestV2Args? args = null, CustomResourceOptions? options = null)
            : base("okta:index/requestV2:RequestV2", name, args ?? new RequestV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private RequestV2(string name, Input<string> id, RequestV2State? state = null, CustomResourceOptions? options = null)
            : base("okta:index/requestV2:RequestV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RequestV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RequestV2 Get(string name, Input<string> id, RequestV2State? state = null, CustomResourceOptions? options = null)
        {
            return new RequestV2(name, id, state, options);
        }
    }

    public sealed class RequestV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A representation of a resource that can be requested for access.
        /// </summary>
        [Input("requested")]
        public Input<Inputs.RequestV2RequestedArgs>? Requested { get; set; }

        /// <summary>
        /// A representation of a principal.
        /// </summary>
        [Input("requestedFor")]
        public Input<Inputs.RequestV2RequestedForArgs>? RequestedFor { get; set; }

        [Input("requesterFieldValues")]
        private InputList<Inputs.RequestV2RequesterFieldValueArgs>? _requesterFieldValues;

        /// <summary>
        /// The requester input fields required by the approval system.
        /// </summary>
        public InputList<Inputs.RequestV2RequesterFieldValueArgs> RequesterFieldValues
        {
            get => _requesterFieldValues ?? (_requesterFieldValues = new InputList<Inputs.RequestV2RequesterFieldValueArgs>());
            set => _requesterFieldValues = value;
        }

        public RequestV2Args()
        {
        }
        public static new RequestV2Args Empty => new RequestV2Args();
    }

    public sealed class RequestV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How long the requester retains access after their request is approved and fulfilled.
        /// </summary>
        [Input("accessDuration")]
        public Input<string>? AccessDuration { get; set; }

        /// <summary>
        /// The date and time when the request condition was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The id of the user who created the request condition.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The status of the granted access request.
        /// </summary>
        [Input("grantStatus")]
        public Input<string>? GrantStatus { get; set; }

        /// <summary>
        /// The date the approved access was granted. Only set if request . Status is APPROVED.
        /// </summary>
        [Input("granted")]
        public Input<string>? Granted { get; set; }

        /// <summary>
        /// The date and time when the request condition was last updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The id of the user who last updated the request condition.
        /// </summary>
        [Input("lastUpdatedBy")]
        public Input<string>? LastUpdatedBy { get; set; }

        /// <summary>
        /// A representation of a resource that can be requested for access.
        /// </summary>
        [Input("requested")]
        public Input<Inputs.RequestV2RequestedGetArgs>? Requested { get; set; }

        /// <summary>
        /// A representation of a principal.
        /// </summary>
        [Input("requestedFor")]
        public Input<Inputs.RequestV2RequestedForGetArgs>? RequestedFor { get; set; }

        [Input("requesterFieldValues")]
        private InputList<Inputs.RequestV2RequesterFieldValueGetArgs>? _requesterFieldValues;

        /// <summary>
        /// The requester input fields required by the approval system.
        /// </summary>
        public InputList<Inputs.RequestV2RequesterFieldValueGetArgs> RequesterFieldValues
        {
            get => _requesterFieldValues ?? (_requesterFieldValues = new InputList<Inputs.RequestV2RequesterFieldValueGetArgs>());
            set => _requesterFieldValues = value;
        }

        /// <summary>
        /// The date the request was resolved.
        /// </summary>
        [Input("resolved")]
        public Input<string>? Resolved { get; set; }

        /// <summary>
        /// The date the request was scheduled for revocation.
        /// </summary>
        [Input("revocationScheduled")]
        public Input<string>? RevocationScheduled { get; set; }

        /// <summary>
        /// The revocation status of the request.
        /// </summary>
        [Input("revocationStatus")]
        public Input<string>? RevocationStatus { get; set; }

        /// <summary>
        /// The date the granted access was revoked.
        /// </summary>
        [Input("revoked")]
        public Input<string>? Revoked { get; set; }

        /// <summary>
        /// The status of the request.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public RequestV2State()
        {
        }
        public static new RequestV2State Empty => new RequestV2State();
    }
}
