// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Creates an event hook.
    /// 
    /// This resource allows you to create and configure an event hook.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.EventHook("example", new()
    ///     {
    ///         Name = "example",
    ///         Events = new[]
    ///         {
    ///             "user.lifecycle.create",
    ///             "user.lifecycle.delete.initiated",
    ///         },
    ///         Channel = 
    ///         {
    ///             { "type", "HTTP" },
    ///             { "version", "1.0.0" },
    ///             { "uri", "https://example.com/test" },
    ///         },
    ///         Auth = 
    ///         {
    ///             { "type", "HEADER" },
    ///             { "key", "Authorization" },
    ///             { "value", "123" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An event hook can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/eventHook:EventHook example &amp;#60;hook id&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/eventHook:EventHook")]
    public partial class EventHook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication required for event hook request.
        /// </summary>
        [Output("auth")]
        public Output<ImmutableDictionary<string, string>?> Auth { get; private set; } = null!;

        /// <summary>
        /// Details of the endpoint the event hook will hit.
        /// </summary>
        [Output("channel")]
        public Output<ImmutableDictionary<string, string>> Channel { get; private set; } = null!;

        /// <summary>
        /// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
        /// </summary>
        [Output("events")]
        public Output<ImmutableArray<string>> Events { get; private set; } = null!;

        /// <summary>
        /// Map of headers to send along in event hook request.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.EventHookHeader>> Headers { get; private set; } = null!;

        /// <summary>
        /// The event hook display name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a EventHook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventHook(string name, EventHookArgs args, CustomResourceOptions? options = null)
            : base("okta:index/eventHook:EventHook", name, args ?? new EventHookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventHook(string name, Input<string> id, EventHookState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/eventHook:EventHook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventHook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventHook Get(string name, Input<string> id, EventHookState? state = null, CustomResourceOptions? options = null)
        {
            return new EventHook(name, id, state, options);
        }
    }

    public sealed class EventHookArgs : global::Pulumi.ResourceArgs
    {
        [Input("auth")]
        private InputMap<string>? _auth;

        /// <summary>
        /// Authentication required for event hook request.
        /// </summary>
        public InputMap<string> Auth
        {
            get => _auth ?? (_auth = new InputMap<string>());
            set => _auth = value;
        }

        [Input("channel", required: true)]
        private InputMap<string>? _channel;

        /// <summary>
        /// Details of the endpoint the event hook will hit.
        /// </summary>
        public InputMap<string> Channel
        {
            get => _channel ?? (_channel = new InputMap<string>());
            set => _channel = value;
        }

        [Input("events", required: true)]
        private InputList<string>? _events;

        /// <summary>
        /// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        [Input("headers")]
        private InputList<Inputs.EventHookHeaderArgs>? _headers;

        /// <summary>
        /// Map of headers to send along in event hook request.
        /// </summary>
        public InputList<Inputs.EventHookHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.EventHookHeaderArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The event hook display name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public EventHookArgs()
        {
        }
        public static new EventHookArgs Empty => new EventHookArgs();
    }

    public sealed class EventHookState : global::Pulumi.ResourceArgs
    {
        [Input("auth")]
        private InputMap<string>? _auth;

        /// <summary>
        /// Authentication required for event hook request.
        /// </summary>
        public InputMap<string> Auth
        {
            get => _auth ?? (_auth = new InputMap<string>());
            set => _auth = value;
        }

        [Input("channel")]
        private InputMap<string>? _channel;

        /// <summary>
        /// Details of the endpoint the event hook will hit.
        /// </summary>
        public InputMap<string> Channel
        {
            get => _channel ?? (_channel = new InputMap<string>());
            set => _channel = value;
        }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// The events that will be delivered to this hook. [See here for a list of supported events](https://developer.okta.com/docs/reference/api/event-types/?q=event-hook-eligible).
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        [Input("headers")]
        private InputList<Inputs.EventHookHeaderGetArgs>? _headers;

        /// <summary>
        /// Map of headers to send along in event hook request.
        /// </summary>
        public InputList<Inputs.EventHookHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.EventHookHeaderGetArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The event hook display name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default to `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public EventHookState()
        {
        }
        public static new EventHookState Empty => new EventHookState();
    }
}
