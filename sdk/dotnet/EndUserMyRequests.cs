// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:index/endUserMyRequests:EndUserMyRequests example &lt;request_id/entry_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/endUserMyRequests:EndUserMyRequests")]
    public partial class EndUserMyRequests : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the catalog entry for which the request is being made.
        /// </summary>
        [Output("entryId")]
        public Output<string> EntryId { get; private set; } = null!;

        /// <summary>
        /// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
        /// </summary>
        [Output("requesterFieldValues")]
        public Output<ImmutableArray<Outputs.EndUserMyRequestsRequesterFieldValue>> RequesterFieldValues { get; private set; } = null!;

        /// <summary>
        /// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a EndUserMyRequests resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EndUserMyRequests(string name, EndUserMyRequestsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/endUserMyRequests:EndUserMyRequests", name, args ?? new EndUserMyRequestsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EndUserMyRequests(string name, Input<string> id, EndUserMyRequestsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/endUserMyRequests:EndUserMyRequests", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EndUserMyRequests resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EndUserMyRequests Get(string name, Input<string> id, EndUserMyRequestsState? state = null, CustomResourceOptions? options = null)
        {
            return new EndUserMyRequests(name, id, state, options);
        }
    }

    public sealed class EndUserMyRequestsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the catalog entry for which the request is being made.
        /// </summary>
        [Input("entryId", required: true)]
        public Input<string> EntryId { get; set; } = null!;

        [Input("requesterFieldValues")]
        private InputList<Inputs.EndUserMyRequestsRequesterFieldValueArgs>? _requesterFieldValues;

        /// <summary>
        /// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
        /// </summary>
        public InputList<Inputs.EndUserMyRequestsRequesterFieldValueArgs> RequesterFieldValues
        {
            get => _requesterFieldValues ?? (_requesterFieldValues = new InputList<Inputs.EndUserMyRequestsRequesterFieldValueArgs>());
            set => _requesterFieldValues = value;
        }

        public EndUserMyRequestsArgs()
        {
        }
        public static new EndUserMyRequestsArgs Empty => new EndUserMyRequestsArgs();
    }

    public sealed class EndUserMyRequestsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the catalog entry for which the request is being made.
        /// </summary>
        [Input("entryId")]
        public Input<string>? EntryId { get; set; }

        [Input("requesterFieldValues")]
        private InputList<Inputs.EndUserMyRequestsRequesterFieldValueGetArgs>? _requesterFieldValues;

        /// <summary>
        /// The requester input fields required by the approval system. Note: The fields required are determined by the approval system.
        /// </summary>
        public InputList<Inputs.EndUserMyRequestsRequesterFieldValueGetArgs> RequesterFieldValues
        {
            get => _requesterFieldValues ?? (_requesterFieldValues = new InputList<Inputs.EndUserMyRequestsRequesterFieldValueGetArgs>());
            set => _requesterFieldValues = value;
        }

        /// <summary>
        /// The status of the request. Possible values include: `APPROVED`, `CANCELED`, `DENIED`, `EXPIRED`, `PENDING`, `REJECTED`, `SUBMITTED`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public EndUserMyRequestsState()
        {
        }
        public static new EndUserMyRequestsState Empty => new EndUserMyRequestsState();
    }
}
