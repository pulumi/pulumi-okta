// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// Manages targets for administrator roles.
    /// 
    /// This resource allows you to define permissions for admin roles into a smaller subset of Groups or Apps within your org.
    /// You can define admin roles to target Groups, Applications, and Application Instances.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Okta.AdminRoleTargets("example", new()
    ///     {
    ///         Apps = new[]
    ///         {
    ///             "oidc_client.&lt;app_id&gt;",
    ///             "facebook",
    ///         },
    ///         RoleType = "APP_ADMIN",
    ///         UserId = "&lt;user_id&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Okta Admin Role Targets can be imported via the Okta ID.
    /// 
    /// ```sh
    /// $ pulumi import okta:index/adminRoleTargets:AdminRoleTargets example &amp;#60;user id&amp;#62;/&amp;#60;role type&amp;#62;
    /// ```
    /// </summary>
    [OktaResourceType("okta:index/adminRoleTargets:AdminRoleTargets")]
    public partial class AdminRoleTargets : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3').
        /// </summary>
        [Output("apps")]
        public Output<ImmutableArray<string>> Apps { get; private set; } = null!;

        /// <summary>
        /// List of group IDs. Conflicts with `apps`.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<string>> Groups { get; private set; } = null!;

        /// <summary>
        /// Role ID.
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// Name of the role associated with the user. See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
        /// </summary>
        [Output("roleType")]
        public Output<string> RoleType { get; private set; } = null!;

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a AdminRoleTargets resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdminRoleTargets(string name, AdminRoleTargetsArgs args, CustomResourceOptions? options = null)
            : base("okta:index/adminRoleTargets:AdminRoleTargets", name, args ?? new AdminRoleTargetsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdminRoleTargets(string name, Input<string> id, AdminRoleTargetsState? state = null, CustomResourceOptions? options = null)
            : base("okta:index/adminRoleTargets:AdminRoleTargets", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdminRoleTargets resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdminRoleTargets Get(string name, Input<string> id, AdminRoleTargetsState? state = null, CustomResourceOptions? options = null)
        {
            return new AdminRoleTargets(name, id, state, options);
        }
    }

    public sealed class AdminRoleTargetsArgs : global::Pulumi.ResourceArgs
    {
        [Input("apps")]
        private InputList<string>? _apps;

        /// <summary>
        /// List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3').
        /// </summary>
        public InputList<string> Apps
        {
            get => _apps ?? (_apps = new InputList<string>());
            set => _apps = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// List of group IDs. Conflicts with `apps`.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// Name of the role associated with the user. See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
        /// </summary>
        [Input("roleType", required: true)]
        public Input<string> RoleType { get; set; } = null!;

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public AdminRoleTargetsArgs()
        {
        }
        public static new AdminRoleTargetsArgs Empty => new AdminRoleTargetsArgs();
    }

    public sealed class AdminRoleTargetsState : global::Pulumi.ResourceArgs
    {
        [Input("apps")]
        private InputList<string>? _apps;

        /// <summary>
        /// List of app names (name represents set of app instances) or a combination of app name and app instance ID (like 'salesforce' or 'facebook.0oapsqQ6dv19pqyEo0g3').
        /// </summary>
        public InputList<string> Apps
        {
            get => _apps ?? (_apps = new InputList<string>());
            set => _apps = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// List of group IDs. Conflicts with `apps`.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// Role ID.
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        /// <summary>
        /// Name of the role associated with the user. See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
        /// </summary>
        [Input("roleType")]
        public Input<string>? RoleType { get; set; }

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public AdminRoleTargetsState()
        {
        }
        public static new AdminRoleTargetsState Empty => new AdminRoleTargetsState();
    }
}
