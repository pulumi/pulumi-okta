// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.User
{
    public static class GetUser
    {
        /// <summary>
        /// Use this data source to retrieve a users from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.User.GetUser.Invoke(new()
        ///     {
        ///         Searches = new[]
        ///         {
        ///             new Okta.User.Inputs.GetUserSearchInputArgs
        ///             {
        ///                 Expression = "profile.firstName eq \"John\"",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("okta:user/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a users from Okta.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.User.GetUser.Invoke(new()
        ///     {
        ///         Searches = new[]
        ///         {
        ///             new Okta.User.Inputs.GetUserSearchInputArgs
        ///             {
        ///                 Expression = "profile.firstName eq \"John\"",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("okta:user/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
        /// </summary>
        [Input("compoundSearchOperator")]
        public string? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
        /// </summary>
        [Input("delayReadSeconds")]
        public string? DelayReadSeconds { get; set; }

        [Input("searches")]
        private List<Inputs.GetUserSearchArgs>? _searches;

        /// <summary>
        /// Map of search criteria. It supports the following properties.
        /// </summary>
        public List<Inputs.GetUserSearchArgs> Searches
        {
            get => _searches ?? (_searches = new List<Inputs.GetUserSearchArgs>());
            set => _searches = value;
        }

        /// <summary>
        /// Additional API call to collect user's groups will not be made.
        /// </summary>
        [Input("skipGroups")]
        public bool? SkipGroups { get; set; }

        /// <summary>
        /// Additional API call to collect user's roles will not be made.
        /// </summary>
        [Input("skipRoles")]
        public bool? SkipRoles { get; set; }

        /// <summary>
        /// String representing a specific user's id value
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
        /// </summary>
        [Input("compoundSearchOperator")]
        public Input<string>? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
        /// </summary>
        [Input("delayReadSeconds")]
        public Input<string>? DelayReadSeconds { get; set; }

        [Input("searches")]
        private InputList<Inputs.GetUserSearchInputArgs>? _searches;

        /// <summary>
        /// Map of search criteria. It supports the following properties.
        /// </summary>
        public InputList<Inputs.GetUserSearchInputArgs> Searches
        {
            get => _searches ?? (_searches = new InputList<Inputs.GetUserSearchInputArgs>());
            set => _searches = value;
        }

        /// <summary>
        /// Additional API call to collect user's groups will not be made.
        /// </summary>
        [Input("skipGroups")]
        public Input<bool>? SkipGroups { get; set; }

        /// <summary>
        /// Additional API call to collect user's roles will not be made.
        /// </summary>
        [Input("skipRoles")]
        public Input<bool>? SkipRoles { get; set; }

        /// <summary>
        /// String representing a specific user's id value
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// Administrator roles assigned to user.
        /// </summary>
        public readonly ImmutableArray<string> AdminRoles;
        /// <summary>
        /// City or locality component of user's address.
        /// </summary>
        public readonly string City;
        public readonly string? CompoundSearchOperator;
        /// <summary>
        /// Name of a cost center assigned to user.
        /// </summary>
        public readonly string CostCenter;
        /// <summary>
        /// Country name component of user's address.
        /// </summary>
        public readonly string CountryCode;
        /// <summary>
        /// Raw JSON containing all custom profile attributes.
        /// </summary>
        public readonly string CustomProfileAttributes;
        public readonly string? DelayReadSeconds;
        /// <summary>
        /// Name of user's department.
        /// </summary>
        public readonly string Department;
        /// <summary>
        /// Name of the user, suitable for display to end users.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Name of user's division.
        /// </summary>
        public readonly string Division;
        /// <summary>
        /// Primary email address of user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Organization or company assigned unique identifier for the user.
        /// </summary>
        public readonly string EmployeeNumber;
        /// <summary>
        /// Given name of the user.
        /// </summary>
        public readonly string FirstName;
        /// <summary>
        /// Groups user belongs to.
        /// </summary>
        public readonly ImmutableArray<string> GroupMemberships;
        /// <summary>
        /// Honorific prefix(es) of the user, or title in most Western languages.
        /// </summary>
        public readonly string HonorificPrefix;
        /// <summary>
        /// Honorific suffix(es) of the user.
        /// </summary>
        public readonly string HonorificSuffix;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Family name of the user.
        /// </summary>
        public readonly string LastName;
        /// <summary>
        /// User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
        /// </summary>
        public readonly string Locale;
        /// <summary>
        /// Unique identifier for the user.
        /// </summary>
        public readonly string Login;
        /// <summary>
        /// Display name of the user's manager.
        /// </summary>
        public readonly string Manager;
        /// <summary>
        /// `id` of a user's manager.
        /// </summary>
        public readonly string ManagerId;
        /// <summary>
        /// Middle name(s) of the user.
        /// </summary>
        public readonly string MiddleName;
        /// <summary>
        /// Mobile phone number of user.
        /// </summary>
        public readonly string MobilePhone;
        /// <summary>
        /// Casual way to address the user in real life.
        /// </summary>
        public readonly string NickName;
        /// <summary>
        /// Name of user's organization.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// Mailing address component of user's address.
        /// </summary>
        public readonly string PostalAddress;
        /// <summary>
        /// User's preferred written or spoken languages.
        /// </summary>
        public readonly string PreferredLanguage;
        /// <summary>
        /// Primary phone number of user such as home number.
        /// </summary>
        public readonly string PrimaryPhone;
        /// <summary>
        /// URL of user's online profile (e.g. a web page).
        /// </summary>
        public readonly string ProfileUrl;
        public readonly ImmutableArray<Outputs.GetUserSearchResult> Searches;
        /// <summary>
        /// Secondary email address of user typically used for account recovery.
        /// </summary>
        public readonly string SecondEmail;
        public readonly bool? SkipGroups;
        public readonly bool? SkipRoles;
        /// <summary>
        /// State or region component of user's address (region).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Current status of user.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Full street address component of user's address.
        /// </summary>
        public readonly string StreetAddress;
        /// <summary>
        /// User's time zone.
        /// </summary>
        public readonly string Timezone;
        /// <summary>
        /// User's title, such as "Vice President".
        /// </summary>
        public readonly string Title;
        public readonly string? UserId;
        /// <summary>
        /// Used to describe the organization to user relationship such as "Employee" or "Contractor".
        /// </summary>
        public readonly string UserType;
        /// <summary>
        /// Zipcode or postal code component of user's address (postalCode)
        /// </summary>
        public readonly string ZipCode;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<string> adminRoles,

            string city,

            string? compoundSearchOperator,

            string costCenter,

            string countryCode,

            string customProfileAttributes,

            string? delayReadSeconds,

            string department,

            string displayName,

            string division,

            string email,

            string employeeNumber,

            string firstName,

            ImmutableArray<string> groupMemberships,

            string honorificPrefix,

            string honorificSuffix,

            string id,

            string lastName,

            string locale,

            string login,

            string manager,

            string managerId,

            string middleName,

            string mobilePhone,

            string nickName,

            string organization,

            string postalAddress,

            string preferredLanguage,

            string primaryPhone,

            string profileUrl,

            ImmutableArray<Outputs.GetUserSearchResult> searches,

            string secondEmail,

            bool? skipGroups,

            bool? skipRoles,

            string state,

            string status,

            string streetAddress,

            string timezone,

            string title,

            string? userId,

            string userType,

            string zipCode)
        {
            AdminRoles = adminRoles;
            City = city;
            CompoundSearchOperator = compoundSearchOperator;
            CostCenter = costCenter;
            CountryCode = countryCode;
            CustomProfileAttributes = customProfileAttributes;
            DelayReadSeconds = delayReadSeconds;
            Department = department;
            DisplayName = displayName;
            Division = division;
            Email = email;
            EmployeeNumber = employeeNumber;
            FirstName = firstName;
            GroupMemberships = groupMemberships;
            HonorificPrefix = honorificPrefix;
            HonorificSuffix = honorificSuffix;
            Id = id;
            LastName = lastName;
            Locale = locale;
            Login = login;
            Manager = manager;
            ManagerId = managerId;
            MiddleName = middleName;
            MobilePhone = mobilePhone;
            NickName = nickName;
            Organization = organization;
            PostalAddress = postalAddress;
            PreferredLanguage = preferredLanguage;
            PrimaryPhone = primaryPhone;
            ProfileUrl = profileUrl;
            Searches = searches;
            SecondEmail = secondEmail;
            SkipGroups = skipGroups;
            SkipRoles = skipRoles;
            State = state;
            Status = status;
            StreetAddress = streetAddress;
            Timezone = timezone;
            Title = title;
            UserId = userId;
            UserType = userType;
            ZipCode = zipCode;
        }
    }
}
