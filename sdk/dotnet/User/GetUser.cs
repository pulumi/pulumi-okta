// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.User
{
    public static class GetUser
    {
        /// <summary>
        /// Get a single users from Okta.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("okta:user/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single users from Okta.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("okta:user/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single users from Okta.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("okta:user/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Search operator used when joining multiple search clauses
        /// </summary>
        [Input("compoundSearchOperator")]
        public string? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
        /// </summary>
        [Input("delayReadSeconds")]
        public string? DelayReadSeconds { get; set; }

        [Input("searches")]
        private List<Inputs.GetUserSearchArgs>? _searches;

        /// <summary>
        /// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
        /// </summary>
        public List<Inputs.GetUserSearchArgs> Searches
        {
            get => _searches ?? (_searches = new List<Inputs.GetUserSearchArgs>());
            set => _searches = value;
        }

        /// <summary>
        /// Do not populate user groups information (prevents additional API call)
        /// </summary>
        [Input("skipGroups")]
        public bool? SkipGroups { get; set; }

        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        [Input("skipRoles")]
        public bool? SkipRoles { get; set; }

        /// <summary>
        /// Retrieve a single user based on their id
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Search operator used when joining multiple search clauses
        /// </summary>
        [Input("compoundSearchOperator")]
        public Input<string>? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
        /// </summary>
        [Input("delayReadSeconds")]
        public Input<string>? DelayReadSeconds { get; set; }

        [Input("searches")]
        private InputList<Inputs.GetUserSearchInputArgs>? _searches;

        /// <summary>
        /// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
        /// </summary>
        public InputList<Inputs.GetUserSearchInputArgs> Searches
        {
            get => _searches ?? (_searches = new InputList<Inputs.GetUserSearchInputArgs>());
            set => _searches = value;
        }

        /// <summary>
        /// Do not populate user groups information (prevents additional API call)
        /// </summary>
        [Input("skipGroups")]
        public Input<bool>? SkipGroups { get; set; }

        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        [Input("skipRoles")]
        public Input<bool>? SkipRoles { get; set; }

        /// <summary>
        /// Retrieve a single user based on their id
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly ImmutableArray<string> AdminRoles;
        public readonly string City;
        /// <summary>
        /// Search operator used when joining multiple search clauses
        /// </summary>
        public readonly string? CompoundSearchOperator;
        public readonly string CostCenter;
        public readonly string CountryCode;
        public readonly string CustomProfileAttributes;
        /// <summary>
        /// Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
        /// </summary>
        public readonly string? DelayReadSeconds;
        public readonly string Department;
        public readonly string DisplayName;
        public readonly string Division;
        public readonly string Email;
        public readonly string EmployeeNumber;
        public readonly string FirstName;
        public readonly ImmutableArray<string> GroupMemberships;
        public readonly string HonorificPrefix;
        public readonly string HonorificSuffix;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LastName;
        public readonly string Locale;
        public readonly string Login;
        public readonly string Manager;
        public readonly string ManagerId;
        public readonly string MiddleName;
        public readonly string MobilePhone;
        public readonly string NickName;
        public readonly string Organization;
        public readonly string PostalAddress;
        public readonly string PreferredLanguage;
        public readonly string PrimaryPhone;
        public readonly string ProfileUrl;
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// Filter to find user/users. Each filter will be concatenated with the compound search operator. Please be aware profile properties must match what is in Okta, which is likely camel case. Expression is a free form expression filter https://developer.okta.com/docs/reference/core-okta-api/#filter . The set name/value/comparison properties will be ignored if expression is present
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserSearchResult> Searches;
        public readonly string SecondEmail;
        /// <summary>
        /// Do not populate user groups information (prevents additional API call)
        /// </summary>
        public readonly bool? SkipGroups;
        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        public readonly bool? SkipRoles;
        public readonly string State;
        public readonly string Status;
        public readonly string StreetAddress;
        public readonly string Timezone;
        public readonly string Title;
        /// <summary>
        /// Retrieve a single user based on their id
        /// </summary>
        public readonly string? UserId;
        public readonly string UserType;
        public readonly string ZipCode;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<string> adminRoles,

            string city,

            string? compoundSearchOperator,

            string costCenter,

            string countryCode,

            string customProfileAttributes,

            string? delayReadSeconds,

            string department,

            string displayName,

            string division,

            string email,

            string employeeNumber,

            string firstName,

            ImmutableArray<string> groupMemberships,

            string honorificPrefix,

            string honorificSuffix,

            string id,

            string lastName,

            string locale,

            string login,

            string manager,

            string managerId,

            string middleName,

            string mobilePhone,

            string nickName,

            string organization,

            string postalAddress,

            string preferredLanguage,

            string primaryPhone,

            string profileUrl,

            ImmutableArray<string> roles,

            ImmutableArray<Outputs.GetUserSearchResult> searches,

            string secondEmail,

            bool? skipGroups,

            bool? skipRoles,

            string state,

            string status,

            string streetAddress,

            string timezone,

            string title,

            string? userId,

            string userType,

            string zipCode)
        {
            AdminRoles = adminRoles;
            City = city;
            CompoundSearchOperator = compoundSearchOperator;
            CostCenter = costCenter;
            CountryCode = countryCode;
            CustomProfileAttributes = customProfileAttributes;
            DelayReadSeconds = delayReadSeconds;
            Department = department;
            DisplayName = displayName;
            Division = division;
            Email = email;
            EmployeeNumber = employeeNumber;
            FirstName = firstName;
            GroupMemberships = groupMemberships;
            HonorificPrefix = honorificPrefix;
            HonorificSuffix = honorificSuffix;
            Id = id;
            LastName = lastName;
            Locale = locale;
            Login = login;
            Manager = manager;
            ManagerId = managerId;
            MiddleName = middleName;
            MobilePhone = mobilePhone;
            NickName = nickName;
            Organization = organization;
            PostalAddress = postalAddress;
            PreferredLanguage = preferredLanguage;
            PrimaryPhone = primaryPhone;
            ProfileUrl = profileUrl;
            Roles = roles;
            Searches = searches;
            SecondEmail = secondEmail;
            SkipGroups = skipGroups;
            SkipRoles = skipRoles;
            State = state;
            Status = status;
            StreetAddress = streetAddress;
            Timezone = timezone;
            Title = title;
            UserId = userId;
            UserType = userType;
            ZipCode = zipCode;
        }
    }
}
