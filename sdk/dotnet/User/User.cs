// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.User
{
    /// <summary>
    /// Creates an Okta User. This resource allows you to create and configure an Okta User.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Okta = Pulumi.Okta;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Full profile:
    ///     var example = new Okta.User.User("example", new()
    ///     {
    ///         FirstName = "John",
    ///         LastName = "Smith",
    ///         Login = "john.smith@example.com",
    ///         Email = "john.smith@example.com",
    ///         City = "New York",
    ///         CostCenter = "10",
    ///         CountryCode = "US",
    ///         Department = "IT",
    ///         DisplayName = "Dr. John Smith",
    ///         Division = "Acquisitions",
    ///         EmployeeNumber = "111111",
    ///         HonorificPrefix = "Dr.",
    ///         HonorificSuffix = "Jr.",
    ///         Locale = "en_US",
    ///         Manager = "Jimbo",
    ///         ManagerId = "222222",
    ///         MiddleName = "John",
    ///         MobilePhone = "1112223333",
    ///         NickName = "Johnny",
    ///         Organization = "Testing Inc.",
    ///         PostalAddress = "1234 Testing St.",
    ///         PreferredLanguage = "en-us",
    ///         PrimaryPhone = "4445556666",
    ///         ProfileUrl = "https://www.example.com/profile",
    ///         SecondEmail = "john.smith.fun@example.com",
    ///         State = "NY",
    ///         StreetAddress = "5678 Testing Ave.",
    ///         Timezone = "America/New_York",
    ///         Title = "Director",
    ///         UserType = "Employee",
    ///         ZipCode = "11111",
    ///     });
    /// 
    ///     //## With Password Inline Hook:
    ///     var test2 = new Okta.User.User("test2", new()
    ///     {
    ///         FirstName = "John",
    ///         LastName = "Smith",
    ///         Login = "example@example.com",
    ///         Email = "example@example.com",
    ///         PasswordInlineHook = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import okta:user/user:User example &lt;user_id&gt;
    /// ```
    /// </summary>
    [OktaResourceType("okta:user/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User city
        /// </summary>
        [Output("city")]
        public Output<string?> City { get; private set; } = null!;

        /// <summary>
        /// User cost center
        /// </summary>
        [Output("costCenter")]
        public Output<string?> CostCenter { get; private set; } = null!;

        /// <summary>
        /// User country code
        /// </summary>
        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        /// <summary>
        /// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
        /// </summary>
        [Output("customProfileAttributes")]
        public Output<string> CustomProfileAttributes { get; private set; } = null!;

        [Output("customProfileAttributesToIgnores")]
        public Output<ImmutableArray<string>> CustomProfileAttributesToIgnores { get; private set; } = null!;

        /// <summary>
        /// User department
        /// </summary>
        [Output("department")]
        public Output<string?> Department { get; private set; } = null!;

        /// <summary>
        /// User display name, suitable to show end users
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// User division
        /// </summary>
        [Output("division")]
        public Output<string?> Division { get; private set; } = null!;

        /// <summary>
        /// User primary email address
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// User employee number
        /// </summary>
        [Output("employeeNumber")]
        public Output<string?> EmployeeNumber { get; private set; } = null!;

        /// <summary>
        /// If set to `True`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `Password` field is set. Default: `False`
        /// </summary>
        [Output("expirePasswordOnCreate")]
        public Output<bool?> ExpirePasswordOnCreate { get; private set; } = null!;

        /// <summary>
        /// User first name
        /// </summary>
        [Output("firstName")]
        public Output<string> FirstName { get; private set; } = null!;

        /// <summary>
        /// User honorific prefix
        /// </summary>
        [Output("honorificPrefix")]
        public Output<string?> HonorificPrefix { get; private set; } = null!;

        /// <summary>
        /// User honorific suffix
        /// </summary>
        [Output("honorificSuffix")]
        public Output<string?> HonorificSuffix { get; private set; } = null!;

        /// <summary>
        /// User last name
        /// </summary>
        [Output("lastName")]
        public Output<string> LastName { get; private set; } = null!;

        /// <summary>
        /// User default location
        /// </summary>
        [Output("locale")]
        public Output<string?> Locale { get; private set; } = null!;

        /// <summary>
        /// User Okta login
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// Manager of User
        /// </summary>
        [Output("manager")]
        public Output<string?> Manager { get; private set; } = null!;

        /// <summary>
        /// Manager ID of User
        /// </summary>
        [Output("managerId")]
        public Output<string?> ManagerId { get; private set; } = null!;

        /// <summary>
        /// User middle name
        /// </summary>
        [Output("middleName")]
        public Output<string?> MiddleName { get; private set; } = null!;

        /// <summary>
        /// User mobile phone number
        /// </summary>
        [Output("mobilePhone")]
        public Output<string?> MobilePhone { get; private set; } = null!;

        /// <summary>
        /// User nickname
        /// </summary>
        [Output("nickName")]
        public Output<string?> NickName { get; private set; } = null!;

        /// <summary>
        /// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `Password` field should be used for further changes.
        /// </summary>
        [Output("oldPassword")]
        public Output<string?> OldPassword { get; private set; } = null!;

        /// <summary>
        /// User organization
        /// </summary>
        [Output("organization")]
        public Output<string?> Organization { get; private set; } = null!;

        /// <summary>
        /// User Password
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Specifies a hashed password to import into Okta.
        /// </summary>
        [Output("passwordHash")]
        public Output<Outputs.UserPasswordHash?> PasswordHash { get; private set; } = null!;

        /// <summary>
        /// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `Password` field should not be specified when using Password Import Inline Hook.
        /// </summary>
        [Output("passwordInlineHook")]
        public Output<string?> PasswordInlineHook { get; private set; } = null!;

        /// <summary>
        /// User mailing address
        /// </summary>
        [Output("postalAddress")]
        public Output<string?> PostalAddress { get; private set; } = null!;

        /// <summary>
        /// User preferred language
        /// </summary>
        [Output("preferredLanguage")]
        public Output<string?> PreferredLanguage { get; private set; } = null!;

        /// <summary>
        /// User primary phone number
        /// </summary>
        [Output("primaryPhone")]
        public Output<string?> PrimaryPhone { get; private set; } = null!;

        /// <summary>
        /// User online profile (web page)
        /// </summary>
        [Output("profileUrl")]
        public Output<string?> ProfileUrl { get; private set; } = null!;

        /// <summary>
        /// The raw status of the User in Okta - (status is mapped)
        /// </summary>
        [Output("rawStatus")]
        public Output<string> RawStatus { get; private set; } = null!;

        /// <summary>
        /// User Password Recovery Answer
        /// </summary>
        [Output("recoveryAnswer")]
        public Output<string?> RecoveryAnswer { get; private set; } = null!;

        /// <summary>
        /// User Password Recovery Question
        /// </summary>
        [Output("recoveryQuestion")]
        public Output<string?> RecoveryQuestion { get; private set; } = null!;

        /// <summary>
        /// User secondary email address, used for account recovery
        /// </summary>
        [Output("secondEmail")]
        public Output<string?> SecondEmail { get; private set; } = null!;

        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        [Output("skipRoles")]
        public Output<bool?> SkipRoles { get; private set; } = null!;

        /// <summary>
        /// User state or region
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// User street address
        /// </summary>
        [Output("streetAddress")]
        public Output<string?> StreetAddress { get; private set; } = null!;

        /// <summary>
        /// User default timezone
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// User title
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// User employee type
        /// </summary>
        [Output("userType")]
        public Output<string?> UserType { get; private set; } = null!;

        /// <summary>
        /// User zipcode or postal code
        /// </summary>
        [Output("zipCode")]
        public Output<string?> ZipCode { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("okta:user/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("okta:user/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "oldPassword",
                    "password",
                    "recoveryAnswer",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User city
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// User cost center
        /// </summary>
        [Input("costCenter")]
        public Input<string>? CostCenter { get; set; }

        /// <summary>
        /// User country code
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
        /// </summary>
        [Input("customProfileAttributes")]
        public Input<string>? CustomProfileAttributes { get; set; }

        [Input("customProfileAttributesToIgnores")]
        private InputList<string>? _customProfileAttributesToIgnores;
        public InputList<string> CustomProfileAttributesToIgnores
        {
            get => _customProfileAttributesToIgnores ?? (_customProfileAttributesToIgnores = new InputList<string>());
            set => _customProfileAttributesToIgnores = value;
        }

        /// <summary>
        /// User department
        /// </summary>
        [Input("department")]
        public Input<string>? Department { get; set; }

        /// <summary>
        /// User display name, suitable to show end users
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// User division
        /// </summary>
        [Input("division")]
        public Input<string>? Division { get; set; }

        /// <summary>
        /// User primary email address
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// User employee number
        /// </summary>
        [Input("employeeNumber")]
        public Input<string>? EmployeeNumber { get; set; }

        /// <summary>
        /// If set to `True`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `Password` field is set. Default: `False`
        /// </summary>
        [Input("expirePasswordOnCreate")]
        public Input<bool>? ExpirePasswordOnCreate { get; set; }

        /// <summary>
        /// User first name
        /// </summary>
        [Input("firstName", required: true)]
        public Input<string> FirstName { get; set; } = null!;

        /// <summary>
        /// User honorific prefix
        /// </summary>
        [Input("honorificPrefix")]
        public Input<string>? HonorificPrefix { get; set; }

        /// <summary>
        /// User honorific suffix
        /// </summary>
        [Input("honorificSuffix")]
        public Input<string>? HonorificSuffix { get; set; }

        /// <summary>
        /// User last name
        /// </summary>
        [Input("lastName", required: true)]
        public Input<string> LastName { get; set; } = null!;

        /// <summary>
        /// User default location
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        /// <summary>
        /// User Okta login
        /// </summary>
        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        /// <summary>
        /// Manager of User
        /// </summary>
        [Input("manager")]
        public Input<string>? Manager { get; set; }

        /// <summary>
        /// Manager ID of User
        /// </summary>
        [Input("managerId")]
        public Input<string>? ManagerId { get; set; }

        /// <summary>
        /// User middle name
        /// </summary>
        [Input("middleName")]
        public Input<string>? MiddleName { get; set; }

        /// <summary>
        /// User mobile phone number
        /// </summary>
        [Input("mobilePhone")]
        public Input<string>? MobilePhone { get; set; }

        /// <summary>
        /// User nickname
        /// </summary>
        [Input("nickName")]
        public Input<string>? NickName { get; set; }

        [Input("oldPassword")]
        private Input<string>? _oldPassword;

        /// <summary>
        /// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `Password` field should be used for further changes.
        /// </summary>
        public Input<string>? OldPassword
        {
            get => _oldPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oldPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User organization
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// User Password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies a hashed password to import into Okta.
        /// </summary>
        [Input("passwordHash")]
        public Input<Inputs.UserPasswordHashArgs>? PasswordHash { get; set; }

        /// <summary>
        /// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `Password` field should not be specified when using Password Import Inline Hook.
        /// </summary>
        [Input("passwordInlineHook")]
        public Input<string>? PasswordInlineHook { get; set; }

        /// <summary>
        /// User mailing address
        /// </summary>
        [Input("postalAddress")]
        public Input<string>? PostalAddress { get; set; }

        /// <summary>
        /// User preferred language
        /// </summary>
        [Input("preferredLanguage")]
        public Input<string>? PreferredLanguage { get; set; }

        /// <summary>
        /// User primary phone number
        /// </summary>
        [Input("primaryPhone")]
        public Input<string>? PrimaryPhone { get; set; }

        /// <summary>
        /// User online profile (web page)
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        [Input("recoveryAnswer")]
        private Input<string>? _recoveryAnswer;

        /// <summary>
        /// User Password Recovery Answer
        /// </summary>
        public Input<string>? RecoveryAnswer
        {
            get => _recoveryAnswer;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recoveryAnswer = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User Password Recovery Question
        /// </summary>
        [Input("recoveryQuestion")]
        public Input<string>? RecoveryQuestion { get; set; }

        /// <summary>
        /// User secondary email address, used for account recovery
        /// </summary>
        [Input("secondEmail")]
        public Input<string>? SecondEmail { get; set; }

        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        [Input("skipRoles")]
        public Input<bool>? SkipRoles { get; set; }

        /// <summary>
        /// User state or region
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// User street address
        /// </summary>
        [Input("streetAddress")]
        public Input<string>? StreetAddress { get; set; }

        /// <summary>
        /// User default timezone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// User title
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// User employee type
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        /// <summary>
        /// User zipcode or postal code
        /// </summary>
        [Input("zipCode")]
        public Input<string>? ZipCode { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User city
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// User cost center
        /// </summary>
        [Input("costCenter")]
        public Input<string>? CostCenter { get; set; }

        /// <summary>
        /// User country code
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) API to manage schema extensions.
        /// </summary>
        [Input("customProfileAttributes")]
        public Input<string>? CustomProfileAttributes { get; set; }

        [Input("customProfileAttributesToIgnores")]
        private InputList<string>? _customProfileAttributesToIgnores;
        public InputList<string> CustomProfileAttributesToIgnores
        {
            get => _customProfileAttributesToIgnores ?? (_customProfileAttributesToIgnores = new InputList<string>());
            set => _customProfileAttributesToIgnores = value;
        }

        /// <summary>
        /// User department
        /// </summary>
        [Input("department")]
        public Input<string>? Department { get; set; }

        /// <summary>
        /// User display name, suitable to show end users
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// User division
        /// </summary>
        [Input("division")]
        public Input<string>? Division { get; set; }

        /// <summary>
        /// User primary email address
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// User employee number
        /// </summary>
        [Input("employeeNumber")]
        public Input<string>? EmployeeNumber { get; set; }

        /// <summary>
        /// If set to `True`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `Password` field is set. Default: `False`
        /// </summary>
        [Input("expirePasswordOnCreate")]
        public Input<bool>? ExpirePasswordOnCreate { get; set; }

        /// <summary>
        /// User first name
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// User honorific prefix
        /// </summary>
        [Input("honorificPrefix")]
        public Input<string>? HonorificPrefix { get; set; }

        /// <summary>
        /// User honorific suffix
        /// </summary>
        [Input("honorificSuffix")]
        public Input<string>? HonorificSuffix { get; set; }

        /// <summary>
        /// User last name
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        /// <summary>
        /// User default location
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        /// <summary>
        /// User Okta login
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        /// <summary>
        /// Manager of User
        /// </summary>
        [Input("manager")]
        public Input<string>? Manager { get; set; }

        /// <summary>
        /// Manager ID of User
        /// </summary>
        [Input("managerId")]
        public Input<string>? ManagerId { get; set; }

        /// <summary>
        /// User middle name
        /// </summary>
        [Input("middleName")]
        public Input<string>? MiddleName { get; set; }

        /// <summary>
        /// User mobile phone number
        /// </summary>
        [Input("mobilePhone")]
        public Input<string>? MobilePhone { get; set; }

        /// <summary>
        /// User nickname
        /// </summary>
        [Input("nickName")]
        public Input<string>? NickName { get; set; }

        [Input("oldPassword")]
        private Input<string>? _oldPassword;

        /// <summary>
        /// Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `Password` field should be used for further changes.
        /// </summary>
        public Input<string>? OldPassword
        {
            get => _oldPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oldPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User organization
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// User Password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies a hashed password to import into Okta.
        /// </summary>
        [Input("passwordHash")]
        public Input<Inputs.UserPasswordHashGetArgs>? PasswordHash { get; set; }

        /// <summary>
        /// Specifies that a Password Import Inline Hook should be triggered to handle verification of the user's password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `Password` field should not be specified when using Password Import Inline Hook.
        /// </summary>
        [Input("passwordInlineHook")]
        public Input<string>? PasswordInlineHook { get; set; }

        /// <summary>
        /// User mailing address
        /// </summary>
        [Input("postalAddress")]
        public Input<string>? PostalAddress { get; set; }

        /// <summary>
        /// User preferred language
        /// </summary>
        [Input("preferredLanguage")]
        public Input<string>? PreferredLanguage { get; set; }

        /// <summary>
        /// User primary phone number
        /// </summary>
        [Input("primaryPhone")]
        public Input<string>? PrimaryPhone { get; set; }

        /// <summary>
        /// User online profile (web page)
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        /// <summary>
        /// The raw status of the User in Okta - (status is mapped)
        /// </summary>
        [Input("rawStatus")]
        public Input<string>? RawStatus { get; set; }

        [Input("recoveryAnswer")]
        private Input<string>? _recoveryAnswer;

        /// <summary>
        /// User Password Recovery Answer
        /// </summary>
        public Input<string>? RecoveryAnswer
        {
            get => _recoveryAnswer;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recoveryAnswer = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User Password Recovery Question
        /// </summary>
        [Input("recoveryQuestion")]
        public Input<string>? RecoveryQuestion { get; set; }

        /// <summary>
        /// User secondary email address, used for account recovery
        /// </summary>
        [Input("secondEmail")]
        public Input<string>? SecondEmail { get; set; }

        /// <summary>
        /// Do not populate user roles information (prevents additional API call)
        /// </summary>
        [Input("skipRoles")]
        public Input<bool>? SkipRoles { get; set; }

        /// <summary>
        /// User state or region
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// User street address
        /// </summary>
        [Input("streetAddress")]
        public Input<string>? StreetAddress { get; set; }

        /// <summary>
        /// User default timezone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// User title
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// User employee type
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        /// <summary>
        /// User zipcode or postal code
        /// </summary>
        [Input("zipCode")]
        public Input<string>? ZipCode { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
