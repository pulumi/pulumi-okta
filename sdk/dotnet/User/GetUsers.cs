// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.User
{
    public static class GetUsers
    {
        /// <summary>
        /// Use this data source to retrieve a list of users from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ### Lookup Users by Group Membership
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleGroup = new Okta.Group.Group("example", new()
        ///     {
        ///         Name = "example-group",
        ///     });
        /// 
        ///     var example = Okta.User.GetUsers.Invoke(new()
        ///     {
        ///         GroupId = exampleGroup.Id,
        ///         IncludeGroups = true,
        ///         IncludeRoles = true,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("okta:user/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a list of users from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ### Lookup Users by Group Membership
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleGroup = new Okta.Group.Group("example", new()
        ///     {
        ///         Name = "example-group",
        ///     });
        /// 
        ///     var example = Okta.User.GetUsers.Invoke(new()
        ///     {
        ///         GroupId = exampleGroup.Id,
        ///         IncludeGroups = true,
        ///         IncludeRoles = true,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("okta:user/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
        /// </summary>
        [Input("compoundSearchOperator")]
        public string? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
        /// </summary>
        [Input("delayReadSeconds")]
        public string? DelayReadSeconds { get; set; }

        /// <summary>
        /// Id of group used to find users based on membership.
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// Fetch each user's group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
        /// </summary>
        [Input("includeGroups")]
        public bool? IncludeGroups { get; set; }

        /// <summary>
        /// Fetch each user's administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
        /// </summary>
        [Input("includeRoles")]
        public bool? IncludeRoles { get; set; }

        [Input("searches")]
        private List<Inputs.GetUsersSearchArgs>? _searches;

        /// <summary>
        /// Map of search criteria. It supports the following properties.
        /// </summary>
        public List<Inputs.GetUsersSearchArgs> Searches
        {
            get => _searches ?? (_searches = new List<Inputs.GetUsersSearchArgs>());
            set => _searches = value;
        }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
        /// </summary>
        [Input("compoundSearchOperator")]
        public Input<string>? CompoundSearchOperator { get; set; }

        /// <summary>
        /// Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
        /// </summary>
        [Input("delayReadSeconds")]
        public Input<string>? DelayReadSeconds { get; set; }

        /// <summary>
        /// Id of group used to find users based on membership.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Fetch each user's group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
        /// </summary>
        [Input("includeGroups")]
        public Input<bool>? IncludeGroups { get; set; }

        /// <summary>
        /// Fetch each user's administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
        /// </summary>
        [Input("includeRoles")]
        public Input<bool>? IncludeRoles { get; set; }

        [Input("searches")]
        private InputList<Inputs.GetUsersSearchInputArgs>? _searches;

        /// <summary>
        /// Map of search criteria. It supports the following properties.
        /// </summary>
        public InputList<Inputs.GetUsersSearchInputArgs> Searches
        {
            get => _searches ?? (_searches = new InputList<Inputs.GetUsersSearchInputArgs>());
            set => _searches = value;
        }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        public readonly string? CompoundSearchOperator;
        public readonly string? DelayReadSeconds;
        public readonly string? GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeGroups;
        public readonly bool? IncludeRoles;
        public readonly ImmutableArray<Outputs.GetUsersSearchResult> Searches;
        /// <summary>
        /// collection of users retrieved from Okta with the following properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string? compoundSearchOperator,

            string? delayReadSeconds,

            string? groupId,

            string id,

            bool? includeGroups,

            bool? includeRoles,

            ImmutableArray<Outputs.GetUsersSearchResult> searches,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            CompoundSearchOperator = compoundSearchOperator;
            DelayReadSeconds = delayReadSeconds;
            GroupId = groupId;
            Id = id;
            IncludeGroups = includeGroups;
            IncludeRoles = includeRoles;
            Searches = searches;
            Users = users;
        }
    }
}
