// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.User
{
    public static class GetUserType
    {
        /// <summary>
        /// Get a user type from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.User.GetUserType.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserTypeResult> InvokeAsync(GetUserTypeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserTypeResult>("okta:user/getUserType:getUserType", args ?? new GetUserTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a user type from Okta.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Okta = Pulumi.Okta;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Okta.User.GetUserType.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserTypeResult> Invoke(GetUserTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserTypeResult>("okta:user/getUserType:getUserType", args ?? new GetUserTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of user type to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetUserTypeArgs()
        {
        }
        public static new GetUserTypeArgs Empty => new GetUserTypeArgs();
    }

    public sealed class GetUserTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `name`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of user type to retrieve, conflicts with `id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetUserTypeInvokeArgs()
        {
        }
        public static new GetUserTypeInvokeArgs Empty => new GetUserTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserTypeResult
    {
        /// <summary>
        /// Description of user type.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name of user type.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// ID of the user type to retrieve, conflicts with `name`.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of user type to retrieve, conflicts with `id`.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetUserTypeResult(
            string description,

            string displayName,

            string? id,

            string? name)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            Name = name;
        }
    }
}
