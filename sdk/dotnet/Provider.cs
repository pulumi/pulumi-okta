// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta
{
    /// <summary>
    /// The provider type for the okta package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("okta", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// API Token granting privileges to Okta API.
        /// </summary>
        [Input("apiToken")]
        public Input<string>? ApiToken { get; set; }

        /// <summary>
        /// Use exponential back off strategy for rate limits.
        /// </summary>
        [Input("backoff", json: true)]
        public Input<bool>? Backoff { get; set; }

        /// <summary>
        /// The Okta url. (Use 'oktapreview.com' for Okta testing)
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// maximum number of retries to attempt before erroring out.
        /// </summary>
        [Input("maxRetries", json: true)]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        [Input("maxWaitSeconds", json: true)]
        public Input<int>? MaxWaitSeconds { get; set; }

        /// <summary>
        /// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        [Input("minWaitSeconds", json: true)]
        public Input<int>? MinWaitSeconds { get; set; }

        /// <summary>
        /// The organization to manage in Okta.
        /// </summary>
        [Input("orgName")]
        public Input<string>? OrgName { get; set; }

        /// <summary>
        /// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
        /// https://developer.okta.com/docs/api/getting_started/rate-limits.
        /// </summary>
        [Input("parallelism", json: true)]
        public Input<int>? Parallelism { get; set; }

        public ProviderArgs()
        {
            ApiToken = Utilities.GetEnv("OKTA_API_TOKEN");
            BaseUrl = Utilities.GetEnv("OKTA_BASE_URL");
            OrgName = Utilities.GetEnv("OKTA_ORG_NAME");
        }
    }
}
