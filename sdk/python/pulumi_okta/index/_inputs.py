# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EmailDomainDnsValidationRecordArgs',
    'GetOrgMetadataDomainsArgs',
    'GetOrgMetadataSettingsArgs',
]

@pulumi.input_type
class EmailDomainDnsValidationRecordArgs:
    def __init__(__self__, *,
                 expiration: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        EmailDomainDnsValidationRecordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expiration=expiration,
            fqdn=fqdn,
            record_type=record_type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expiration: Optional[pulumi.Input[str]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             record_type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_type is None and 'recordType' in kwargs:
            record_type = kwargs['recordType']

        if expiration is not None:
            warnings.warn("""This field has been removed in the newest go sdk version and has become noop""", DeprecationWarning)
            pulumi.log.warn("""expiration is deprecated: This field has been removed in the newest go sdk version and has become noop""")
        if expiration is not None:
            _setter("expiration", expiration)
        if fqdn is not None:
            _setter("fqdn", fqdn)
        if record_type is not None:
            _setter("record_type", record_type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""This field has been removed in the newest go sdk version and has become noop""", DeprecationWarning)
        pulumi.log.warn("""expiration is deprecated: This field has been removed in the newest go sdk version and has become noop""")

        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetOrgMetadataDomainsArgs:
    def __init__(__self__, *,
                 alternate: str,
                 organization: str):
        """
        :param str alternate: Custom Domain Org URI
        :param str organization: Standard Org URI
        """
        GetOrgMetadataDomainsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate=alternate,
            organization=organization,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate: Optional[str] = None,
             organization: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if alternate is None:
            raise TypeError("Missing 'alternate' argument")
        if organization is None:
            raise TypeError("Missing 'organization' argument")

        _setter("alternate", alternate)
        _setter("organization", organization)

    @property
    @pulumi.getter
    def alternate(self) -> str:
        """
        Custom Domain Org URI
        """
        return pulumi.get(self, "alternate")

    @alternate.setter
    def alternate(self, value: str):
        pulumi.set(self, "alternate", value)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Standard Org URI
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: str):
        pulumi.set(self, "organization", value)


@pulumi.input_type
class GetOrgMetadataSettingsArgs:
    def __init__(__self__, *,
                 analytics_collection_enabled: bool,
                 bug_reporting_enabled: bool,
                 om_enabled: bool):
        """
        :param bool om_enabled: Whether the legacy Okta Mobile application is enabled for the org
        """
        GetOrgMetadataSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            analytics_collection_enabled=analytics_collection_enabled,
            bug_reporting_enabled=bug_reporting_enabled,
            om_enabled=om_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             analytics_collection_enabled: Optional[bool] = None,
             bug_reporting_enabled: Optional[bool] = None,
             om_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if analytics_collection_enabled is None and 'analyticsCollectionEnabled' in kwargs:
            analytics_collection_enabled = kwargs['analyticsCollectionEnabled']
        if analytics_collection_enabled is None:
            raise TypeError("Missing 'analytics_collection_enabled' argument")
        if bug_reporting_enabled is None and 'bugReportingEnabled' in kwargs:
            bug_reporting_enabled = kwargs['bugReportingEnabled']
        if bug_reporting_enabled is None:
            raise TypeError("Missing 'bug_reporting_enabled' argument")
        if om_enabled is None and 'omEnabled' in kwargs:
            om_enabled = kwargs['omEnabled']
        if om_enabled is None:
            raise TypeError("Missing 'om_enabled' argument")

        _setter("analytics_collection_enabled", analytics_collection_enabled)
        _setter("bug_reporting_enabled", bug_reporting_enabled)
        _setter("om_enabled", om_enabled)

    @property
    @pulumi.getter(name="analyticsCollectionEnabled")
    def analytics_collection_enabled(self) -> bool:
        return pulumi.get(self, "analytics_collection_enabled")

    @analytics_collection_enabled.setter
    def analytics_collection_enabled(self, value: bool):
        pulumi.set(self, "analytics_collection_enabled", value)

    @property
    @pulumi.getter(name="bugReportingEnabled")
    def bug_reporting_enabled(self) -> bool:
        return pulumi.get(self, "bug_reporting_enabled")

    @bug_reporting_enabled.setter
    def bug_reporting_enabled(self, value: bool):
        pulumi.set(self, "bug_reporting_enabled", value)

    @property
    @pulumi.getter(name="omEnabled")
    def om_enabled(self) -> bool:
        """
        Whether the legacy Okta Mobile application is enabled for the org
        """
        return pulumi.get(self, "om_enabled")

    @om_enabled.setter
    def om_enabled(self, value: bool):
        pulumi.set(self, "om_enabled", value)


