# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EmailDomainDnsValidationRecord',
    'GetDomainDnsRecordResult',
    'GetOrgMetadataDomainsResult',
    'GetOrgMetadataSettingsResult',
]

@pulumi.output_type
class EmailDomainDnsValidationRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailDomainDnsValidationRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailDomainDnsValidationRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailDomainDnsValidationRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 record_type: Optional[str] = None,
                 value: Optional[str] = None):
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        warnings.warn("""This field has been removed in the newest go sdk version and has become noop""", DeprecationWarning)
        pulumi.log.warn("""expiration is deprecated: This field has been removed in the newest go sdk version and has become noop""")

        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDomainDnsRecordResult(dict):
    def __init__(__self__, *,
                 expiration: str,
                 fqdn: str,
                 record_type: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expiration(self) -> str:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> str:
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetOrgMetadataDomainsResult(dict):
    def __init__(__self__, *,
                 alternate: str,
                 organization: str):
        """
        :param str alternate: Custom Domain Org URI
        :param str organization: Standard Org URI
        """
        pulumi.set(__self__, "alternate", alternate)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def alternate(self) -> str:
        """
        Custom Domain Org URI
        """
        return pulumi.get(self, "alternate")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Standard Org URI
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetOrgMetadataSettingsResult(dict):
    def __init__(__self__, *,
                 analytics_collection_enabled: bool,
                 bug_reporting_enabled: bool,
                 om_enabled: bool):
        """
        :param bool om_enabled: Whether the legacy Okta Mobile application is enabled for the org
        """
        pulumi.set(__self__, "analytics_collection_enabled", analytics_collection_enabled)
        pulumi.set(__self__, "bug_reporting_enabled", bug_reporting_enabled)
        pulumi.set(__self__, "om_enabled", om_enabled)

    @property
    @pulumi.getter(name="analyticsCollectionEnabled")
    def analytics_collection_enabled(self) -> bool:
        return pulumi.get(self, "analytics_collection_enabled")

    @property
    @pulumi.getter(name="bugReportingEnabled")
    def bug_reporting_enabled(self) -> bool:
        return pulumi.get(self, "bug_reporting_enabled")

    @property
    @pulumi.getter(name="omEnabled")
    def om_enabled(self) -> bool:
        """
        Whether the legacy Okta Mobile application is enabled for the org
        """
        return pulumi.get(self, "om_enabled")


