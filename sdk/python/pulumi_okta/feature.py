# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FeatureArgs', 'Feature']

@pulumi.input_type
class FeatureArgs:
    def __init__(__self__, *,
                 feature_id: pulumi.Input[_builtins.str],
                 life_cycle: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Feature resource.
        :param pulumi.Input[_builtins.str] feature_id: Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        :param pulumi.Input[_builtins.str] life_cycle: Whether to `ENABLE` or `DISABLE` the feature
        :param pulumi.Input[_builtins.bool] mode: Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        """
        pulumi.set(__self__, "feature_id", feature_id)
        if life_cycle is not None:
            pulumi.set(__self__, "life_cycle", life_cycle)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> pulumi.Input[_builtins.str]:
        """
        Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        """
        return pulumi.get(self, "feature_id")

    @feature_id.setter
    def feature_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_id", value)

    @_builtins.property
    @pulumi.getter(name="lifeCycle")
    def life_cycle(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to `ENABLE` or `DISABLE` the feature
        """
        return pulumi.get(self, "life_cycle")

    @life_cycle.setter
    def life_cycle(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "life_cycle", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class _FeatureState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 life_cycle: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input['FeatureStageArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Feature resources.
        :param pulumi.Input[_builtins.str] description: Name of the feature.
        :param pulumi.Input[_builtins.str] feature_id: Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        :param pulumi.Input[_builtins.str] life_cycle: Whether to `ENABLE` or `DISABLE` the feature
        :param pulumi.Input[_builtins.bool] mode: Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        :param pulumi.Input[_builtins.str] name: Name of the feature.
        :param pulumi.Input['FeatureStageArgs'] stage: Current release cycle stage of a feature.
        :param pulumi.Input[_builtins.str] status: The feature status.
        :param pulumi.Input[_builtins.str] type: Type of feature.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if feature_id is not None:
            pulumi.set(__self__, "feature_id", feature_id)
        if life_cycle is not None:
            pulumi.set(__self__, "life_cycle", life_cycle)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the feature.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        """
        return pulumi.get(self, "feature_id")

    @feature_id.setter
    def feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_id", value)

    @_builtins.property
    @pulumi.getter(name="lifeCycle")
    def life_cycle(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to `ENABLE` or `DISABLE` the feature
        """
        return pulumi.get(self, "life_cycle")

    @life_cycle.setter
    def life_cycle(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "life_cycle", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the feature.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input['FeatureStageArgs']]:
        """
        Current release cycle stage of a feature.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input['FeatureStageArgs']]):
        pulumi.set(self, "stage", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The feature status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of feature.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("okta:index/feature:Feature")
class Feature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 life_cycle: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages brand. This resource allows you to toggle an Okta Feature.

        ## Import

        ```sh
        $ pulumi import okta:index/feature:Feature example <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] feature_id: Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        :param pulumi.Input[_builtins.str] life_cycle: Whether to `ENABLE` or `DISABLE` the feature
        :param pulumi.Input[_builtins.bool] mode: Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages brand. This resource allows you to toggle an Okta Feature.

        ## Import

        ```sh
        $ pulumi import okta:index/feature:Feature example <id>
        ```

        :param str resource_name: The name of the resource.
        :param FeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 life_cycle: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FeatureArgs.__new__(FeatureArgs)

            if feature_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_id'")
            __props__.__dict__["feature_id"] = feature_id
            __props__.__dict__["life_cycle"] = life_cycle
            __props__.__dict__["mode"] = mode
            __props__.__dict__["description"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["stage"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(Feature, __self__).__init__(
            'okta:index/feature:Feature',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            feature_id: Optional[pulumi.Input[_builtins.str]] = None,
            life_cycle: Optional[pulumi.Input[_builtins.str]] = None,
            mode: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            stage: Optional[pulumi.Input[Union['FeatureStageArgs', 'FeatureStageArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Feature':
        """
        Get an existing Feature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Name of the feature.
        :param pulumi.Input[_builtins.str] feature_id: Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        :param pulumi.Input[_builtins.str] life_cycle: Whether to `ENABLE` or `DISABLE` the feature
        :param pulumi.Input[_builtins.bool] mode: Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        :param pulumi.Input[_builtins.str] name: Name of the feature.
        :param pulumi.Input[Union['FeatureStageArgs', 'FeatureStageArgsDict']] stage: Current release cycle stage of a feature.
        :param pulumi.Input[_builtins.str] status: The feature status.
        :param pulumi.Input[_builtins.str] type: Type of feature.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FeatureState.__new__(_FeatureState)

        __props__.__dict__["description"] = description
        __props__.__dict__["feature_id"] = feature_id
        __props__.__dict__["life_cycle"] = life_cycle
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["stage"] = stage
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return Feature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the feature.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> pulumi.Output[_builtins.str]:
        """
        Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
        """
        return pulumi.get(self, "feature_id")

    @_builtins.property
    @pulumi.getter(name="lifeCycle")
    def life_cycle(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Whether to `ENABLE` or `DISABLE` the feature
        """
        return pulumi.get(self, "life_cycle")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if you want to force enable or disable a feature. Value is `true` meaning force
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> pulumi.Output['outputs.FeatureStage']:
        """
        Current release cycle stage of a feature.
        """
        return pulumi.get(self, "stage")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The feature status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of feature.
        """
        return pulumi.get(self, "type")

