# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCatalogEntryUserAccessRequestFieldsResult',
    'AwaitableGetCatalogEntryUserAccessRequestFieldsResult',
    'get_catalog_entry_user_access_request_fields',
    'get_catalog_entry_user_access_request_fields_output',
]

@pulumi.output_type
class GetCatalogEntryUserAccessRequestFieldsResult:
    """
    A collection of values returned by getCatalogEntryUserAccessRequestFields.
    """
    def __init__(__self__, datas=None, entry_id=None, id=None, user_id=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if entry_id and not isinstance(entry_id, str):
            raise TypeError("Expected argument 'entry_id' to be a str")
        pulumi.set(__self__, "entry_id", entry_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[Sequence['outputs.GetCatalogEntryUserAccessRequestFieldsDataResult']]:
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> _builtins.str:
        return pulumi.get(self, "entry_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        return pulumi.get(self, "user_id")


class AwaitableGetCatalogEntryUserAccessRequestFieldsResult(GetCatalogEntryUserAccessRequestFieldsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogEntryUserAccessRequestFieldsResult(
            datas=self.datas,
            entry_id=self.entry_id,
            id=self.id,
            user_id=self.user_id)


def get_catalog_entry_user_access_request_fields(datas: Optional[Sequence[Union['GetCatalogEntryUserAccessRequestFieldsDataArgs', 'GetCatalogEntryUserAccessRequestFieldsDataArgsDict']]] = None,
                                                 entry_id: Optional[_builtins.str] = None,
                                                 user_id: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCatalogEntryUserAccessRequestFieldsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datas'] = datas
    __args__['entryId'] = entry_id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('okta:index/getCatalogEntryUserAccessRequestFields:getCatalogEntryUserAccessRequestFields', __args__, opts=opts, typ=GetCatalogEntryUserAccessRequestFieldsResult).value

    return AwaitableGetCatalogEntryUserAccessRequestFieldsResult(
        datas=pulumi.get(__ret__, 'datas'),
        entry_id=pulumi.get(__ret__, 'entry_id'),
        id=pulumi.get(__ret__, 'id'),
        user_id=pulumi.get(__ret__, 'user_id'))
def get_catalog_entry_user_access_request_fields_output(datas: Optional[pulumi.Input[Optional[Sequence[Union['GetCatalogEntryUserAccessRequestFieldsDataArgs', 'GetCatalogEntryUserAccessRequestFieldsDataArgsDict']]]]] = None,
                                                        entry_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        user_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCatalogEntryUserAccessRequestFieldsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datas'] = datas
    __args__['entryId'] = entry_id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('okta:index/getCatalogEntryUserAccessRequestFields:getCatalogEntryUserAccessRequestFields', __args__, opts=opts, typ=GetCatalogEntryUserAccessRequestFieldsResult)
    return __ret__.apply(lambda __response__: GetCatalogEntryUserAccessRequestFieldsResult(
        datas=pulumi.get(__response__, 'datas'),
        entry_id=pulumi.get(__response__, 'entry_id'),
        id=pulumi.get(__response__, 'id'),
        user_id=pulumi.get(__response__, 'user_id')))
