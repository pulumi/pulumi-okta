# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MappingMappingArgs',
    'MappingMappingArgsDict',
]

MYPY = False

if not MYPY:
    class MappingMappingArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        id: pulumi.Input[_builtins.str]
        """
        The mapping property key.
        """
        push_status: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    MappingMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MappingMappingArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 push_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The mapping property key.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "id", id)
        if push_status is not None:
            pulumi.set(__self__, "push_status", push_status)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        The mapping property key.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="pushStatus")
    def push_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "push_status")

    @push_status.setter
    def push_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "push_status", value)


