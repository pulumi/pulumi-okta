# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MappingMapping',
]

@pulumi.output_type
class MappingMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pushStatus":
            suggest = "push_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MappingMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MappingMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MappingMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 id: str,
                 push_status: Optional[str] = None):
        """
        :param str expression: Combination or single source properties that will be mapped to the target property.
        :param str id: Key of mapping.
        :param str push_status: Whether to update target properties on user create & update or just on create.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "id", id)
        if push_status is not None:
            pulumi.set(__self__, "push_status", push_status)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Combination or single source properties that will be mapped to the target property.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Key of mapping.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pushStatus")
    def push_status(self) -> Optional[str]:
        """
        Whether to update target properties on user create & update or just on create.
        """
        return pulumi.get(self, "push_status")


