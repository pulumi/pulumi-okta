# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class Mapping(pulumi.CustomResource):
    delete_when_absent: pulumi.Output[bool]
    """
    When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
    default, we do not delete missing properties.
    """
    mappings: pulumi.Output[list]
    source_id: pulumi.Output[str]
    """
    The source id of the mapping to manage.
    """
    source_name: pulumi.Output[str]
    source_type: pulumi.Output[str]
    target_id: pulumi.Output[str]
    """
    The target id of the mapping to manage.
    """
    target_name: pulumi.Output[str]
    target_type: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, delete_when_absent=None, mappings=None, source_id=None, target_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Mapping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_when_absent: When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
               default, we do not delete missing properties.
        :param pulumi.Input[str] source_id: The source id of the mapping to manage.
        :param pulumi.Input[str] target_id: The target id of the mapping to manage.

        The **mappings** object supports the following:

          * `expression` (`pulumi.Input[str]`)
          * `id` (`pulumi.Input[str]`)
          * `pushStatus` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['delete_when_absent'] = delete_when_absent
            __props__['mappings'] = mappings
            if source_id is None:
                raise TypeError("Missing required property 'source_id'")
            __props__['source_id'] = source_id
            if target_id is None:
                raise TypeError("Missing required property 'target_id'")
            __props__['target_id'] = target_id
            __props__['source_name'] = None
            __props__['source_type'] = None
            __props__['target_name'] = None
            __props__['target_type'] = None
        super(Mapping, __self__).__init__(
            'okta:profile/mapping:Mapping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, delete_when_absent=None, mappings=None, source_id=None, source_name=None, source_type=None, target_id=None, target_name=None, target_type=None):
        """
        Get an existing Mapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_when_absent: When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
               default, we do not delete missing properties.
        :param pulumi.Input[str] source_id: The source id of the mapping to manage.
        :param pulumi.Input[str] target_id: The target id of the mapping to manage.

        The **mappings** object supports the following:

          * `expression` (`pulumi.Input[str]`)
          * `id` (`pulumi.Input[str]`)
          * `pushStatus` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["delete_when_absent"] = delete_when_absent
        __props__["mappings"] = mappings
        __props__["source_id"] = source_id
        __props__["source_name"] = source_name
        __props__["source_type"] = source_type
        __props__["target_id"] = target_id
        __props__["target_name"] = target_name
        __props__["target_type"] = target_type
        return Mapping(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
