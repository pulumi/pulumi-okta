# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AppGroupAssignmentsGroupArgs',
    'AppGroupAssignmentsGroupArgsDict',
    'AppSignonPolicyRulePlatformIncludeArgs',
    'AppSignonPolicyRulePlatformIncludeArgsDict',
    'AppUserSchemaPropertyArrayOneOfArgs',
    'AppUserSchemaPropertyArrayOneOfArgsDict',
    'AppUserSchemaPropertyOneOfArgs',
    'AppUserSchemaPropertyOneOfArgsDict',
    'CustomizedSigninPageContentSecurityPolicySettingArgs',
    'CustomizedSigninPageContentSecurityPolicySettingArgsDict',
    'CustomizedSigninPageWidgetCustomizationsArgs',
    'CustomizedSigninPageWidgetCustomizationsArgsDict',
    'DomainDnsRecordArgs',
    'DomainDnsRecordArgsDict',
    'EmailDomainDnsValidationRecordArgs',
    'EmailDomainDnsValidationRecordArgsDict',
    'EmailSenderDnsRecordArgs',
    'EmailSenderDnsRecordArgsDict',
    'EventHookHeaderArgs',
    'EventHookHeaderArgsDict',
    'GroupSchemaPropertyArrayOneOfArgs',
    'GroupSchemaPropertyArrayOneOfArgsDict',
    'GroupSchemaPropertyMasterOverridePriorityArgs',
    'GroupSchemaPropertyMasterOverridePriorityArgsDict',
    'GroupSchemaPropertyOneOfArgs',
    'GroupSchemaPropertyOneOfArgsDict',
    'LogStreamSettingsArgs',
    'LogStreamSettingsArgsDict',
    'PolicyRuleProfileEnrollmentProfileAttributeArgs',
    'PolicyRuleProfileEnrollmentProfileAttributeArgsDict',
    'PreviewSigninPageContentSecurityPolicySettingArgs',
    'PreviewSigninPageContentSecurityPolicySettingArgsDict',
    'PreviewSigninPageWidgetCustomizationsArgs',
    'PreviewSigninPageWidgetCustomizationsArgsDict',
    'TemplateSmsTranslationArgs',
    'TemplateSmsTranslationArgsDict',
    'UserSchemaPropertyArrayOneOfArgs',
    'UserSchemaPropertyArrayOneOfArgsDict',
    'UserSchemaPropertyMasterOverridePriorityArgs',
    'UserSchemaPropertyMasterOverridePriorityArgsDict',
    'UserSchemaPropertyOneOfArgs',
    'UserSchemaPropertyOneOfArgsDict',
    'GetDefaultSigninPageContentSecurityPolicySettingArgs',
    'GetDefaultSigninPageContentSecurityPolicySettingArgsDict',
    'GetDefaultSigninPageWidgetCustomizationsArgs',
    'GetDefaultSigninPageWidgetCustomizationsArgsDict',
    'GetDeviceAssurancePolicyThirdPartySignalProviderArgs',
    'GetDeviceAssurancePolicyThirdPartySignalProviderArgsDict',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgsDict',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgsDict',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgsDict',
    'GetLogStreamSettingsArgs',
    'GetLogStreamSettingsArgsDict',
    'GetOrgMetadataDomainsArgs',
    'GetOrgMetadataDomainsArgsDict',
    'GetOrgMetadataSettingsArgs',
    'GetOrgMetadataSettingsArgsDict',
]

MYPY = False

if not MYPY:
    class AppGroupAssignmentsGroupArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        """
        A group to associate with the application
        """
        profile: pulumi.Input[builtins.str]
        """
        JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
        """
        priority: NotRequired[pulumi.Input[builtins.int]]
        """
        Priority of group assignment
        """
elif False:
    AppGroupAssignmentsGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppGroupAssignmentsGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str],
                 profile: pulumi.Input[builtins.str],
                 priority: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] id: A group to associate with the application
        :param pulumi.Input[builtins.str] profile: JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
        :param pulumi.Input[builtins.int] priority: Priority of group assignment
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "profile", profile)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        """
        A group to associate with the application
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Input[builtins.str]:
        """
        JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Priority of group assignment
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class AppSignonPolicyRulePlatformIncludeArgsDict(TypedDict):
        os_expression: NotRequired[pulumi.Input[builtins.str]]
        """
        Only available with OTHER OS type
        """
        os_type: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    AppSignonPolicyRulePlatformIncludeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppSignonPolicyRulePlatformIncludeArgs:
    def __init__(__self__, *,
                 os_expression: Optional[pulumi.Input[builtins.str]] = None,
                 os_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] os_expression: Only available with OTHER OS type
        """
        if os_expression is not None:
            pulumi.set(__self__, "os_expression", os_expression)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="osExpression")
    def os_expression(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Only available with OTHER OS type
        """
        return pulumi.get(self, "os_expression")

    @os_expression.setter
    def os_expression(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_expression", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AppUserSchemaPropertyArrayOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Value mapping to member of `array_enum`
        """
        title: pulumi.Input[builtins.str]
        """
        Display name for the enum value.
        """
elif False:
    AppUserSchemaPropertyArrayOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppUserSchemaPropertyArrayOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Value mapping to member of `array_enum`
        :param pulumi.Input[builtins.str] title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class AppUserSchemaPropertyOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Enum value
        """
        title: pulumi.Input[builtins.str]
        """
        Enum title
        """
elif False:
    AppUserSchemaPropertyOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppUserSchemaPropertyOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Enum value
        :param pulumi.Input[builtins.str] title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Enum title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CustomizedSigninPageContentSecurityPolicySettingArgsDict(TypedDict):
        mode: NotRequired[pulumi.Input[builtins.str]]
        """
        enforced or report_only
        """
        report_uri: NotRequired[pulumi.Input[builtins.str]]
        src_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    CustomizedSigninPageContentSecurityPolicySettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomizedSigninPageContentSecurityPolicySettingArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 report_uri: Optional[pulumi.Input[builtins.str]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] mode: enforced or report_only
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if report_uri is not None:
            pulumi.set(__self__, "report_uri", report_uri)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "report_uri")

    @report_uri.setter
    def report_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "report_uri", value)

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "src_lists")

    @src_lists.setter
    def src_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_lists", value)


if not MYPY:
    class CustomizedSigninPageWidgetCustomizationsArgsDict(TypedDict):
        widget_generation: pulumi.Input[builtins.str]
        authenticator_page_custom_link_label: NotRequired[pulumi.Input[builtins.str]]
        authenticator_page_custom_link_url: NotRequired[pulumi.Input[builtins.str]]
        classic_recovery_flow_email_or_username_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link1_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link1_url: NotRequired[pulumi.Input[builtins.str]]
        custom_link2_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link2_url: NotRequired[pulumi.Input[builtins.str]]
        forgot_password_label: NotRequired[pulumi.Input[builtins.str]]
        forgot_password_url: NotRequired[pulumi.Input[builtins.str]]
        help_label: NotRequired[pulumi.Input[builtins.str]]
        help_url: NotRequired[pulumi.Input[builtins.str]]
        password_info_tip: NotRequired[pulumi.Input[builtins.str]]
        password_label: NotRequired[pulumi.Input[builtins.str]]
        show_password_visibility_toggle: NotRequired[pulumi.Input[builtins.bool]]
        show_user_identifier: NotRequired[pulumi.Input[builtins.bool]]
        sign_in_label: NotRequired[pulumi.Input[builtins.str]]
        unlock_account_label: NotRequired[pulumi.Input[builtins.str]]
        unlock_account_url: NotRequired[pulumi.Input[builtins.str]]
        username_info_tip: NotRequired[pulumi.Input[builtins.str]]
        username_label: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CustomizedSigninPageWidgetCustomizationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomizedSigninPageWidgetCustomizationsArgs:
    def __init__(__self__, *,
                 widget_generation: pulumi.Input[builtins.str],
                 authenticator_page_custom_link_label: Optional[pulumi.Input[builtins.str]] = None,
                 authenticator_page_custom_link_url: Optional[pulumi.Input[builtins.str]] = None,
                 classic_recovery_flow_email_or_username_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link1_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link1_url: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link2_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link2_url: Optional[pulumi.Input[builtins.str]] = None,
                 forgot_password_label: Optional[pulumi.Input[builtins.str]] = None,
                 forgot_password_url: Optional[pulumi.Input[builtins.str]] = None,
                 help_label: Optional[pulumi.Input[builtins.str]] = None,
                 help_url: Optional[pulumi.Input[builtins.str]] = None,
                 password_info_tip: Optional[pulumi.Input[builtins.str]] = None,
                 password_label: Optional[pulumi.Input[builtins.str]] = None,
                 show_password_visibility_toggle: Optional[pulumi.Input[builtins.bool]] = None,
                 show_user_identifier: Optional[pulumi.Input[builtins.bool]] = None,
                 sign_in_label: Optional[pulumi.Input[builtins.str]] = None,
                 unlock_account_label: Optional[pulumi.Input[builtins.str]] = None,
                 unlock_account_url: Optional[pulumi.Input[builtins.str]] = None,
                 username_info_tip: Optional[pulumi.Input[builtins.str]] = None,
                 username_label: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "widget_generation", widget_generation)
        if authenticator_page_custom_link_label is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        if authenticator_page_custom_link_url is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        if classic_recovery_flow_email_or_username_label is not None:
            pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        if custom_link1_label is not None:
            pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        if custom_link1_url is not None:
            pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        if custom_link2_label is not None:
            pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        if custom_link2_url is not None:
            pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        if forgot_password_label is not None:
            pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        if forgot_password_url is not None:
            pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        if help_label is not None:
            pulumi.set(__self__, "help_label", help_label)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if password_info_tip is not None:
            pulumi.set(__self__, "password_info_tip", password_info_tip)
        if password_label is not None:
            pulumi.set(__self__, "password_label", password_label)
        if show_password_visibility_toggle is not None:
            pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        if show_user_identifier is not None:
            pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if unlock_account_label is not None:
            pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        if unlock_account_url is not None:
            pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        if username_info_tip is not None:
            pulumi.set(__self__, "username_info_tip", username_info_tip)
        if username_label is not None:
            pulumi.set(__self__, "username_label", username_label)

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "widget_generation")

    @widget_generation.setter
    def widget_generation(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "widget_generation", value)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @authenticator_page_custom_link_label.setter
    def authenticator_page_custom_link_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticator_page_custom_link_label", value)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @authenticator_page_custom_link_url.setter
    def authenticator_page_custom_link_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticator_page_custom_link_url", value)

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @classic_recovery_flow_email_or_username_label.setter
    def classic_recovery_flow_email_or_username_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "classic_recovery_flow_email_or_username_label", value)

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link1_label")

    @custom_link1_label.setter
    def custom_link1_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link1_label", value)

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link1_url")

    @custom_link1_url.setter
    def custom_link1_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link1_url", value)

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link2_label")

    @custom_link2_label.setter
    def custom_link2_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link2_label", value)

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link2_url")

    @custom_link2_url.setter
    def custom_link2_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link2_url", value)

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forgot_password_label")

    @forgot_password_label.setter
    def forgot_password_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forgot_password_label", value)

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forgot_password_url")

    @forgot_password_url.setter
    def forgot_password_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forgot_password_url", value)

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "help_label")

    @help_label.setter
    def help_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "help_label", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "password_info_tip")

    @password_info_tip.setter
    def password_info_tip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_info_tip", value)

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "password_label")

    @password_label.setter
    def password_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_label", value)

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_password_visibility_toggle")

    @show_password_visibility_toggle.setter
    def show_password_visibility_toggle(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_password_visibility_toggle", value)

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_user_identifier")

    @show_user_identifier.setter
    def show_user_identifier(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_user_identifier", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unlock_account_label")

    @unlock_account_label.setter
    def unlock_account_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unlock_account_label", value)

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unlock_account_url")

    @unlock_account_url.setter
    def unlock_account_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unlock_account_url", value)

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "username_info_tip")

    @username_info_tip.setter
    def username_info_tip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_info_tip", value)

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "username_label")

    @username_label.setter
    def username_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_label", value)


if not MYPY:
    class DomainDnsRecordArgsDict(TypedDict):
        expiration: NotRequired[pulumi.Input[builtins.str]]
        """
        TXT record expiration
        """
        fqdn: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS record name
        """
        record_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Record type can be TXT or CNAME
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        DNS verification value
        """
elif False:
    DomainDnsRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainDnsRecordArgs:
    def __init__(__self__, *,
                 expiration: Optional[pulumi.Input[builtins.str]] = None,
                 fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] expiration: TXT record expiration
        :param pulumi.Input[builtins.str] fqdn: DNS record name
        :param pulumi.Input[builtins.str] record_type: Record type can be TXT or CNAME
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: DNS verification value
        """
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        TXT record expiration
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Record type can be TXT or CNAME
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        DNS verification value
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class EmailDomainDnsValidationRecordArgsDict(TypedDict):
        expiration: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS TXT record expiration
        """
        fqdn: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS record name
        """
        record_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Record type can be TXT or cname
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS record value
        """
elif False:
    EmailDomainDnsValidationRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EmailDomainDnsValidationRecordArgs:
    def __init__(__self__, *,
                 expiration: Optional[pulumi.Input[builtins.str]] = None,
                 fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] expiration: DNS TXT record expiration
        :param pulumi.Input[builtins.str] fqdn: DNS record name
        :param pulumi.Input[builtins.str] record_type: Record type can be TXT or cname
        :param pulumi.Input[builtins.str] value: DNS record value
        """
        if expiration is not None:
            warnings.warn("""This field has been removed in the newest go sdk version and has become noop""", DeprecationWarning)
            pulumi.log.warn("""expiration is deprecated: This field has been removed in the newest go sdk version and has become noop""")
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field has been removed in the newest go sdk version and has become noop""")
    def expiration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS TXT record expiration
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Record type can be TXT or cname
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS record value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EmailSenderDnsRecordArgsDict(TypedDict):
        fqdn: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS record name
        """
        record_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Record type can be TXT or CNAME
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        DNS verification value
        """
elif False:
    EmailSenderDnsRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EmailSenderDnsRecordArgs:
    def __init__(__self__, *,
                 fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 record_type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] fqdn: DNS record name
        :param pulumi.Input[builtins.str] record_type: Record type can be TXT or CNAME
        :param pulumi.Input[builtins.str] value: DNS verification value
        """
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Record type can be TXT or CNAME
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS verification value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EventHookHeaderArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EventHookHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventHookHeaderArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GroupSchemaPropertyArrayOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Value mapping to member of `array_enum`
        """
        title: pulumi.Input[builtins.str]
        """
        Display name for the enum value.
        """
elif False:
    GroupSchemaPropertyArrayOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupSchemaPropertyArrayOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Value mapping to member of `array_enum`
        :param pulumi.Input[builtins.str] title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class GroupSchemaPropertyMasterOverridePriorityArgsDict(TypedDict):
        value: pulumi.Input[builtins.str]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GroupSchemaPropertyMasterOverridePriorityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupSchemaPropertyMasterOverridePriorityArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[builtins.str],
                 type: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GroupSchemaPropertyOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Enum value
        """
        title: pulumi.Input[builtins.str]
        """
        Enum title
        """
elif False:
    GroupSchemaPropertyOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupSchemaPropertyOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Enum value
        :param pulumi.Input[builtins.str] title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Enum title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class LogStreamSettingsArgsDict(TypedDict):
        account_id: NotRequired[pulumi.Input[builtins.str]]
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        edition: NotRequired[pulumi.Input[builtins.str]]
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        event_source_name: NotRequired[pulumi.Input[builtins.str]]
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        token: NotRequired[pulumi.Input[builtins.str]]
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
elif False:
    LogStreamSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogStreamSettingsArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 edition: Optional[pulumi.Input[builtins.str]] = None,
                 event_source_name: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 token: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] account_id: AWS account ID. Required only for 'aws_eventbridge' type
        :param pulumi.Input[builtins.str] edition: Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        :param pulumi.Input[builtins.str] event_source_name: An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        :param pulumi.Input[builtins.str] host: The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        :param pulumi.Input[builtins.str] region: The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        :param pulumi.Input[builtins.str] token: The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if event_source_name is not None:
            pulumi.set(__self__, "event_source_name", event_source_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "event_source_name")

    @event_source_name.setter
    def event_source_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "event_source_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "token", value)


if not MYPY:
    class PolicyRuleProfileEnrollmentProfileAttributeArgsDict(TypedDict):
        label: pulumi.Input[builtins.str]
        """
        A display-friendly label for this property
        """
        name: pulumi.Input[builtins.str]
        """
        The name of a User Profile property
        """
        required: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates if this property is required for enrollment
        """
elif False:
    PolicyRuleProfileEnrollmentProfileAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyRuleProfileEnrollmentProfileAttributeArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 required: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] label: A display-friendly label for this property
        :param pulumi.Input[builtins.str] name: The name of a User Profile property
        :param pulumi.Input[builtins.bool] required: Indicates if this property is required for enrollment
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[builtins.str]:
        """
        A display-friendly label for this property
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of a User Profile property
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates if this property is required for enrollment
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "required", value)


if not MYPY:
    class PreviewSigninPageContentSecurityPolicySettingArgsDict(TypedDict):
        mode: NotRequired[pulumi.Input[builtins.str]]
        """
        enforced or report_only
        """
        report_uri: NotRequired[pulumi.Input[builtins.str]]
        src_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    PreviewSigninPageContentSecurityPolicySettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreviewSigninPageContentSecurityPolicySettingArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 report_uri: Optional[pulumi.Input[builtins.str]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] mode: enforced or report_only
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if report_uri is not None:
            pulumi.set(__self__, "report_uri", report_uri)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "report_uri")

    @report_uri.setter
    def report_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "report_uri", value)

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "src_lists")

    @src_lists.setter
    def src_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_lists", value)


if not MYPY:
    class PreviewSigninPageWidgetCustomizationsArgsDict(TypedDict):
        widget_generation: pulumi.Input[builtins.str]
        authenticator_page_custom_link_label: NotRequired[pulumi.Input[builtins.str]]
        authenticator_page_custom_link_url: NotRequired[pulumi.Input[builtins.str]]
        classic_recovery_flow_email_or_username_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link1_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link1_url: NotRequired[pulumi.Input[builtins.str]]
        custom_link2_label: NotRequired[pulumi.Input[builtins.str]]
        custom_link2_url: NotRequired[pulumi.Input[builtins.str]]
        forgot_password_label: NotRequired[pulumi.Input[builtins.str]]
        forgot_password_url: NotRequired[pulumi.Input[builtins.str]]
        help_label: NotRequired[pulumi.Input[builtins.str]]
        help_url: NotRequired[pulumi.Input[builtins.str]]
        password_info_tip: NotRequired[pulumi.Input[builtins.str]]
        password_label: NotRequired[pulumi.Input[builtins.str]]
        show_password_visibility_toggle: NotRequired[pulumi.Input[builtins.bool]]
        show_user_identifier: NotRequired[pulumi.Input[builtins.bool]]
        sign_in_label: NotRequired[pulumi.Input[builtins.str]]
        unlock_account_label: NotRequired[pulumi.Input[builtins.str]]
        unlock_account_url: NotRequired[pulumi.Input[builtins.str]]
        username_info_tip: NotRequired[pulumi.Input[builtins.str]]
        username_label: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PreviewSigninPageWidgetCustomizationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreviewSigninPageWidgetCustomizationsArgs:
    def __init__(__self__, *,
                 widget_generation: pulumi.Input[builtins.str],
                 authenticator_page_custom_link_label: Optional[pulumi.Input[builtins.str]] = None,
                 authenticator_page_custom_link_url: Optional[pulumi.Input[builtins.str]] = None,
                 classic_recovery_flow_email_or_username_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link1_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link1_url: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link2_label: Optional[pulumi.Input[builtins.str]] = None,
                 custom_link2_url: Optional[pulumi.Input[builtins.str]] = None,
                 forgot_password_label: Optional[pulumi.Input[builtins.str]] = None,
                 forgot_password_url: Optional[pulumi.Input[builtins.str]] = None,
                 help_label: Optional[pulumi.Input[builtins.str]] = None,
                 help_url: Optional[pulumi.Input[builtins.str]] = None,
                 password_info_tip: Optional[pulumi.Input[builtins.str]] = None,
                 password_label: Optional[pulumi.Input[builtins.str]] = None,
                 show_password_visibility_toggle: Optional[pulumi.Input[builtins.bool]] = None,
                 show_user_identifier: Optional[pulumi.Input[builtins.bool]] = None,
                 sign_in_label: Optional[pulumi.Input[builtins.str]] = None,
                 unlock_account_label: Optional[pulumi.Input[builtins.str]] = None,
                 unlock_account_url: Optional[pulumi.Input[builtins.str]] = None,
                 username_info_tip: Optional[pulumi.Input[builtins.str]] = None,
                 username_label: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "widget_generation", widget_generation)
        if authenticator_page_custom_link_label is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        if authenticator_page_custom_link_url is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        if classic_recovery_flow_email_or_username_label is not None:
            pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        if custom_link1_label is not None:
            pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        if custom_link1_url is not None:
            pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        if custom_link2_label is not None:
            pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        if custom_link2_url is not None:
            pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        if forgot_password_label is not None:
            pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        if forgot_password_url is not None:
            pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        if help_label is not None:
            pulumi.set(__self__, "help_label", help_label)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if password_info_tip is not None:
            pulumi.set(__self__, "password_info_tip", password_info_tip)
        if password_label is not None:
            pulumi.set(__self__, "password_label", password_label)
        if show_password_visibility_toggle is not None:
            pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        if show_user_identifier is not None:
            pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if unlock_account_label is not None:
            pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        if unlock_account_url is not None:
            pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        if username_info_tip is not None:
            pulumi.set(__self__, "username_info_tip", username_info_tip)
        if username_label is not None:
            pulumi.set(__self__, "username_label", username_label)

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "widget_generation")

    @widget_generation.setter
    def widget_generation(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "widget_generation", value)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @authenticator_page_custom_link_label.setter
    def authenticator_page_custom_link_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticator_page_custom_link_label", value)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @authenticator_page_custom_link_url.setter
    def authenticator_page_custom_link_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authenticator_page_custom_link_url", value)

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @classic_recovery_flow_email_or_username_label.setter
    def classic_recovery_flow_email_or_username_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "classic_recovery_flow_email_or_username_label", value)

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link1_label")

    @custom_link1_label.setter
    def custom_link1_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link1_label", value)

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link1_url")

    @custom_link1_url.setter
    def custom_link1_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link1_url", value)

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link2_label")

    @custom_link2_label.setter
    def custom_link2_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link2_label", value)

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_link2_url")

    @custom_link2_url.setter
    def custom_link2_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_link2_url", value)

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forgot_password_label")

    @forgot_password_label.setter
    def forgot_password_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forgot_password_label", value)

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forgot_password_url")

    @forgot_password_url.setter
    def forgot_password_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forgot_password_url", value)

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "help_label")

    @help_label.setter
    def help_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "help_label", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "password_info_tip")

    @password_info_tip.setter
    def password_info_tip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_info_tip", value)

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "password_label")

    @password_label.setter
    def password_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_label", value)

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_password_visibility_toggle")

    @show_password_visibility_toggle.setter
    def show_password_visibility_toggle(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_password_visibility_toggle", value)

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_user_identifier")

    @show_user_identifier.setter
    def show_user_identifier(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_user_identifier", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unlock_account_label")

    @unlock_account_label.setter
    def unlock_account_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unlock_account_label", value)

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unlock_account_url")

    @unlock_account_url.setter
    def unlock_account_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unlock_account_url", value)

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "username_info_tip")

    @username_info_tip.setter
    def username_info_tip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_info_tip", value)

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "username_label")

    @username_label.setter
    def username_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_label", value)


if not MYPY:
    class TemplateSmsTranslationArgsDict(TypedDict):
        language: pulumi.Input[builtins.str]
        """
        The language to map the template to.
        """
        template: pulumi.Input[builtins.str]
        """
        The SMS message.
        """
elif False:
    TemplateSmsTranslationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateSmsTranslationArgs:
    def __init__(__self__, *,
                 language: pulumi.Input[builtins.str],
                 template: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] language: The language to map the template to.
        :param pulumi.Input[builtins.str] template: The SMS message.
        """
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def language(self) -> pulumi.Input[builtins.str]:
        """
        The language to map the template to.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[builtins.str]:
        """
        The SMS message.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "template", value)


if not MYPY:
    class UserSchemaPropertyArrayOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Value mapping to member of `array_enum`
        """
        title: pulumi.Input[builtins.str]
        """
        Display name for the enum value.
        """
elif False:
    UserSchemaPropertyArrayOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSchemaPropertyArrayOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Value mapping to member of `array_enum`
        :param pulumi.Input[builtins.str] title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class UserSchemaPropertyMasterOverridePriorityArgsDict(TypedDict):
        value: pulumi.Input[builtins.str]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    UserSchemaPropertyMasterOverridePriorityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSchemaPropertyMasterOverridePriorityArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[builtins.str],
                 type: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class UserSchemaPropertyOneOfArgsDict(TypedDict):
        const: pulumi.Input[builtins.str]
        """
        Enum value
        """
        title: pulumi.Input[builtins.str]
        """
        Enum title
        """
elif False:
    UserSchemaPropertyOneOfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSchemaPropertyOneOfArgs:
    def __init__(__self__, *,
                 const: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] const: Enum value
        :param pulumi.Input[builtins.str] title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> pulumi.Input[builtins.str]:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @const.setter
    def const(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "const", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        Enum title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class GetDefaultSigninPageContentSecurityPolicySettingArgsDict(TypedDict):
        mode: builtins.str
        """
        enforced or report_only
        """
        report_uri: builtins.str
        src_lists: Sequence[builtins.str]
elif False:
    GetDefaultSigninPageContentSecurityPolicySettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDefaultSigninPageContentSecurityPolicySettingArgs:
    def __init__(__self__, *,
                 mode: builtins.str,
                 report_uri: builtins.str,
                 src_lists: Sequence[builtins.str]):
        """
        :param builtins.str mode: enforced or report_only
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "report_uri", report_uri)
        pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> builtins.str:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: builtins.str):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> builtins.str:
        return pulumi.get(self, "report_uri")

    @report_uri.setter
    def report_uri(self, value: builtins.str):
        pulumi.set(self, "report_uri", value)

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "src_lists")

    @src_lists.setter
    def src_lists(self, value: Sequence[builtins.str]):
        pulumi.set(self, "src_lists", value)


if not MYPY:
    class GetDefaultSigninPageWidgetCustomizationsArgsDict(TypedDict):
        authenticator_page_custom_link_label: builtins.str
        authenticator_page_custom_link_url: builtins.str
        classic_recovery_flow_email_or_username_label: builtins.str
        custom_link1_label: builtins.str
        custom_link1_url: builtins.str
        custom_link2_label: builtins.str
        custom_link2_url: builtins.str
        forgot_password_label: builtins.str
        forgot_password_url: builtins.str
        help_label: builtins.str
        help_url: builtins.str
        password_info_tip: builtins.str
        password_label: builtins.str
        show_password_visibility_toggle: builtins.bool
        show_user_identifier: builtins.bool
        sign_in_label: builtins.str
        unlock_account_label: builtins.str
        unlock_account_url: builtins.str
        username_info_tip: builtins.str
        username_label: builtins.str
        widget_generation: builtins.str
elif False:
    GetDefaultSigninPageWidgetCustomizationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDefaultSigninPageWidgetCustomizationsArgs:
    def __init__(__self__, *,
                 authenticator_page_custom_link_label: builtins.str,
                 authenticator_page_custom_link_url: builtins.str,
                 classic_recovery_flow_email_or_username_label: builtins.str,
                 custom_link1_label: builtins.str,
                 custom_link1_url: builtins.str,
                 custom_link2_label: builtins.str,
                 custom_link2_url: builtins.str,
                 forgot_password_label: builtins.str,
                 forgot_password_url: builtins.str,
                 help_label: builtins.str,
                 help_url: builtins.str,
                 password_info_tip: builtins.str,
                 password_label: builtins.str,
                 show_password_visibility_toggle: builtins.bool,
                 show_user_identifier: builtins.bool,
                 sign_in_label: builtins.str,
                 unlock_account_label: builtins.str,
                 unlock_account_url: builtins.str,
                 username_info_tip: builtins.str,
                 username_label: builtins.str,
                 widget_generation: builtins.str):
        pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        pulumi.set(__self__, "help_label", help_label)
        pulumi.set(__self__, "help_url", help_url)
        pulumi.set(__self__, "password_info_tip", password_info_tip)
        pulumi.set(__self__, "password_label", password_label)
        pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        pulumi.set(__self__, "sign_in_label", sign_in_label)
        pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        pulumi.set(__self__, "username_info_tip", username_info_tip)
        pulumi.set(__self__, "username_label", username_label)
        pulumi.set(__self__, "widget_generation", widget_generation)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> builtins.str:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @authenticator_page_custom_link_label.setter
    def authenticator_page_custom_link_label(self, value: builtins.str):
        pulumi.set(self, "authenticator_page_custom_link_label", value)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> builtins.str:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @authenticator_page_custom_link_url.setter
    def authenticator_page_custom_link_url(self, value: builtins.str):
        pulumi.set(self, "authenticator_page_custom_link_url", value)

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> builtins.str:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @classic_recovery_flow_email_or_username_label.setter
    def classic_recovery_flow_email_or_username_label(self, value: builtins.str):
        pulumi.set(self, "classic_recovery_flow_email_or_username_label", value)

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> builtins.str:
        return pulumi.get(self, "custom_link1_label")

    @custom_link1_label.setter
    def custom_link1_label(self, value: builtins.str):
        pulumi.set(self, "custom_link1_label", value)

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> builtins.str:
        return pulumi.get(self, "custom_link1_url")

    @custom_link1_url.setter
    def custom_link1_url(self, value: builtins.str):
        pulumi.set(self, "custom_link1_url", value)

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> builtins.str:
        return pulumi.get(self, "custom_link2_label")

    @custom_link2_label.setter
    def custom_link2_label(self, value: builtins.str):
        pulumi.set(self, "custom_link2_label", value)

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> builtins.str:
        return pulumi.get(self, "custom_link2_url")

    @custom_link2_url.setter
    def custom_link2_url(self, value: builtins.str):
        pulumi.set(self, "custom_link2_url", value)

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> builtins.str:
        return pulumi.get(self, "forgot_password_label")

    @forgot_password_label.setter
    def forgot_password_label(self, value: builtins.str):
        pulumi.set(self, "forgot_password_label", value)

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> builtins.str:
        return pulumi.get(self, "forgot_password_url")

    @forgot_password_url.setter
    def forgot_password_url(self, value: builtins.str):
        pulumi.set(self, "forgot_password_url", value)

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> builtins.str:
        return pulumi.get(self, "help_label")

    @help_label.setter
    def help_label(self, value: builtins.str):
        pulumi.set(self, "help_label", value)

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> builtins.str:
        return pulumi.get(self, "help_url")

    @help_url.setter
    def help_url(self, value: builtins.str):
        pulumi.set(self, "help_url", value)

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> builtins.str:
        return pulumi.get(self, "password_info_tip")

    @password_info_tip.setter
    def password_info_tip(self, value: builtins.str):
        pulumi.set(self, "password_info_tip", value)

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> builtins.str:
        return pulumi.get(self, "password_label")

    @password_label.setter
    def password_label(self, value: builtins.str):
        pulumi.set(self, "password_label", value)

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> builtins.bool:
        return pulumi.get(self, "show_password_visibility_toggle")

    @show_password_visibility_toggle.setter
    def show_password_visibility_toggle(self, value: builtins.bool):
        pulumi.set(self, "show_password_visibility_toggle", value)

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> builtins.bool:
        return pulumi.get(self, "show_user_identifier")

    @show_user_identifier.setter
    def show_user_identifier(self, value: builtins.bool):
        pulumi.set(self, "show_user_identifier", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> builtins.str:
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: builtins.str):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> builtins.str:
        return pulumi.get(self, "unlock_account_label")

    @unlock_account_label.setter
    def unlock_account_label(self, value: builtins.str):
        pulumi.set(self, "unlock_account_label", value)

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> builtins.str:
        return pulumi.get(self, "unlock_account_url")

    @unlock_account_url.setter
    def unlock_account_url(self, value: builtins.str):
        pulumi.set(self, "unlock_account_url", value)

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> builtins.str:
        return pulumi.get(self, "username_info_tip")

    @username_info_tip.setter
    def username_info_tip(self, value: builtins.str):
        pulumi.set(self, "username_info_tip", value)

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> builtins.str:
        return pulumi.get(self, "username_label")

    @username_label.setter
    def username_label(self, value: builtins.str):
        pulumi.set(self, "username_label", value)

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> builtins.str:
        return pulumi.get(self, "widget_generation")

    @widget_generation.setter
    def widget_generation(self, value: builtins.str):
        pulumi.set(self, "widget_generation", value)


if not MYPY:
    class GetDeviceAssurancePolicyThirdPartySignalProviderArgsDict(TypedDict):
        dtc: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgsDict'
elif False:
    GetDeviceAssurancePolicyThirdPartySignalProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeviceAssurancePolicyThirdPartySignalProviderArgs:
    def __init__(__self__, *,
                 dtc: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs'):
        pulumi.set(__self__, "dtc", dtc)

    @property
    @pulumi.getter
    def dtc(self) -> 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs':
        return pulumi.get(self, "dtc")

    @dtc.setter
    def dtc(self, value: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs'):
        pulumi.set(self, "dtc", value)


if not MYPY:
    class GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgsDict(TypedDict):
        allow_screen_lock: builtins.bool
        browser_version: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgsDict'
        built_in_dns_client_enabled: builtins.bool
        chrome_remote_desktop_app_blocked: builtins.bool
        crowd_strike_agent_id: builtins.str
        crowd_strike_customer_id: builtins.str
        device_enrollment_domain: builtins.str
        disk_encrypted: builtins.bool
        key_trust_level: builtins.str
        managed_device: builtins.bool
        os_firewall: builtins.bool
        os_version: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgsDict'
        password_protection_warning_trigger: builtins.str
        realtime_url_check_mode: builtins.bool
        safe_browsing_protection_level: builtins.str
        screen_lock_secured: builtins.bool
        site_isolation_enabled: builtins.bool
        third_party_blocking_enabled: builtins.bool
        windows_machine_domain: builtins.str
        windows_user_domain: builtins.str
elif False:
    GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs:
    def __init__(__self__, *,
                 allow_screen_lock: builtins.bool,
                 browser_version: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs',
                 built_in_dns_client_enabled: builtins.bool,
                 chrome_remote_desktop_app_blocked: builtins.bool,
                 crowd_strike_agent_id: builtins.str,
                 crowd_strike_customer_id: builtins.str,
                 device_enrollment_domain: builtins.str,
                 disk_encrypted: builtins.bool,
                 key_trust_level: builtins.str,
                 managed_device: builtins.bool,
                 os_firewall: builtins.bool,
                 os_version: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs',
                 password_protection_warning_trigger: builtins.str,
                 realtime_url_check_mode: builtins.bool,
                 safe_browsing_protection_level: builtins.str,
                 screen_lock_secured: builtins.bool,
                 site_isolation_enabled: builtins.bool,
                 third_party_blocking_enabled: builtins.bool,
                 windows_machine_domain: builtins.str,
                 windows_user_domain: builtins.str):
        pulumi.set(__self__, "allow_screen_lock", allow_screen_lock)
        pulumi.set(__self__, "browser_version", browser_version)
        pulumi.set(__self__, "built_in_dns_client_enabled", built_in_dns_client_enabled)
        pulumi.set(__self__, "chrome_remote_desktop_app_blocked", chrome_remote_desktop_app_blocked)
        pulumi.set(__self__, "crowd_strike_agent_id", crowd_strike_agent_id)
        pulumi.set(__self__, "crowd_strike_customer_id", crowd_strike_customer_id)
        pulumi.set(__self__, "device_enrollment_domain", device_enrollment_domain)
        pulumi.set(__self__, "disk_encrypted", disk_encrypted)
        pulumi.set(__self__, "key_trust_level", key_trust_level)
        pulumi.set(__self__, "managed_device", managed_device)
        pulumi.set(__self__, "os_firewall", os_firewall)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "password_protection_warning_trigger", password_protection_warning_trigger)
        pulumi.set(__self__, "realtime_url_check_mode", realtime_url_check_mode)
        pulumi.set(__self__, "safe_browsing_protection_level", safe_browsing_protection_level)
        pulumi.set(__self__, "screen_lock_secured", screen_lock_secured)
        pulumi.set(__self__, "site_isolation_enabled", site_isolation_enabled)
        pulumi.set(__self__, "third_party_blocking_enabled", third_party_blocking_enabled)
        pulumi.set(__self__, "windows_machine_domain", windows_machine_domain)
        pulumi.set(__self__, "windows_user_domain", windows_user_domain)

    @property
    @pulumi.getter(name="allowScreenLock")
    def allow_screen_lock(self) -> builtins.bool:
        return pulumi.get(self, "allow_screen_lock")

    @allow_screen_lock.setter
    def allow_screen_lock(self, value: builtins.bool):
        pulumi.set(self, "allow_screen_lock", value)

    @property
    @pulumi.getter(name="browserVersion")
    def browser_version(self) -> 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs':
        return pulumi.get(self, "browser_version")

    @browser_version.setter
    def browser_version(self, value: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs'):
        pulumi.set(self, "browser_version", value)

    @property
    @pulumi.getter(name="builtInDnsClientEnabled")
    def built_in_dns_client_enabled(self) -> builtins.bool:
        return pulumi.get(self, "built_in_dns_client_enabled")

    @built_in_dns_client_enabled.setter
    def built_in_dns_client_enabled(self, value: builtins.bool):
        pulumi.set(self, "built_in_dns_client_enabled", value)

    @property
    @pulumi.getter(name="chromeRemoteDesktopAppBlocked")
    def chrome_remote_desktop_app_blocked(self) -> builtins.bool:
        return pulumi.get(self, "chrome_remote_desktop_app_blocked")

    @chrome_remote_desktop_app_blocked.setter
    def chrome_remote_desktop_app_blocked(self, value: builtins.bool):
        pulumi.set(self, "chrome_remote_desktop_app_blocked", value)

    @property
    @pulumi.getter(name="crowdStrikeAgentId")
    def crowd_strike_agent_id(self) -> builtins.str:
        return pulumi.get(self, "crowd_strike_agent_id")

    @crowd_strike_agent_id.setter
    def crowd_strike_agent_id(self, value: builtins.str):
        pulumi.set(self, "crowd_strike_agent_id", value)

    @property
    @pulumi.getter(name="crowdStrikeCustomerId")
    def crowd_strike_customer_id(self) -> builtins.str:
        return pulumi.get(self, "crowd_strike_customer_id")

    @crowd_strike_customer_id.setter
    def crowd_strike_customer_id(self, value: builtins.str):
        pulumi.set(self, "crowd_strike_customer_id", value)

    @property
    @pulumi.getter(name="deviceEnrollmentDomain")
    def device_enrollment_domain(self) -> builtins.str:
        return pulumi.get(self, "device_enrollment_domain")

    @device_enrollment_domain.setter
    def device_enrollment_domain(self, value: builtins.str):
        pulumi.set(self, "device_enrollment_domain", value)

    @property
    @pulumi.getter(name="diskEncrypted")
    def disk_encrypted(self) -> builtins.bool:
        return pulumi.get(self, "disk_encrypted")

    @disk_encrypted.setter
    def disk_encrypted(self, value: builtins.bool):
        pulumi.set(self, "disk_encrypted", value)

    @property
    @pulumi.getter(name="keyTrustLevel")
    def key_trust_level(self) -> builtins.str:
        return pulumi.get(self, "key_trust_level")

    @key_trust_level.setter
    def key_trust_level(self, value: builtins.str):
        pulumi.set(self, "key_trust_level", value)

    @property
    @pulumi.getter(name="managedDevice")
    def managed_device(self) -> builtins.bool:
        return pulumi.get(self, "managed_device")

    @managed_device.setter
    def managed_device(self, value: builtins.bool):
        pulumi.set(self, "managed_device", value)

    @property
    @pulumi.getter(name="osFirewall")
    def os_firewall(self) -> builtins.bool:
        return pulumi.get(self, "os_firewall")

    @os_firewall.setter
    def os_firewall(self, value: builtins.bool):
        pulumi.set(self, "os_firewall", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs':
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: 'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs'):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter(name="passwordProtectionWarningTrigger")
    def password_protection_warning_trigger(self) -> builtins.str:
        return pulumi.get(self, "password_protection_warning_trigger")

    @password_protection_warning_trigger.setter
    def password_protection_warning_trigger(self, value: builtins.str):
        pulumi.set(self, "password_protection_warning_trigger", value)

    @property
    @pulumi.getter(name="realtimeUrlCheckMode")
    def realtime_url_check_mode(self) -> builtins.bool:
        return pulumi.get(self, "realtime_url_check_mode")

    @realtime_url_check_mode.setter
    def realtime_url_check_mode(self, value: builtins.bool):
        pulumi.set(self, "realtime_url_check_mode", value)

    @property
    @pulumi.getter(name="safeBrowsingProtectionLevel")
    def safe_browsing_protection_level(self) -> builtins.str:
        return pulumi.get(self, "safe_browsing_protection_level")

    @safe_browsing_protection_level.setter
    def safe_browsing_protection_level(self, value: builtins.str):
        pulumi.set(self, "safe_browsing_protection_level", value)

    @property
    @pulumi.getter(name="screenLockSecured")
    def screen_lock_secured(self) -> builtins.bool:
        return pulumi.get(self, "screen_lock_secured")

    @screen_lock_secured.setter
    def screen_lock_secured(self, value: builtins.bool):
        pulumi.set(self, "screen_lock_secured", value)

    @property
    @pulumi.getter(name="siteIsolationEnabled")
    def site_isolation_enabled(self) -> builtins.bool:
        return pulumi.get(self, "site_isolation_enabled")

    @site_isolation_enabled.setter
    def site_isolation_enabled(self, value: builtins.bool):
        pulumi.set(self, "site_isolation_enabled", value)

    @property
    @pulumi.getter(name="thirdPartyBlockingEnabled")
    def third_party_blocking_enabled(self) -> builtins.bool:
        return pulumi.get(self, "third_party_blocking_enabled")

    @third_party_blocking_enabled.setter
    def third_party_blocking_enabled(self, value: builtins.bool):
        pulumi.set(self, "third_party_blocking_enabled", value)

    @property
    @pulumi.getter(name="windowsMachineDomain")
    def windows_machine_domain(self) -> builtins.str:
        return pulumi.get(self, "windows_machine_domain")

    @windows_machine_domain.setter
    def windows_machine_domain(self, value: builtins.str):
        pulumi.set(self, "windows_machine_domain", value)

    @property
    @pulumi.getter(name="windowsUserDomain")
    def windows_user_domain(self) -> builtins.str:
        return pulumi.get(self, "windows_user_domain")

    @windows_user_domain.setter
    def windows_user_domain(self, value: builtins.str):
        pulumi.set(self, "windows_user_domain", value)


if not MYPY:
    class GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgsDict(TypedDict):
        minimum: builtins.str
elif False:
    GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs:
    def __init__(__self__, *,
                 minimum: builtins.str):
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> builtins.str:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: builtins.str):
        pulumi.set(self, "minimum", value)


if not MYPY:
    class GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgsDict(TypedDict):
        minimum: builtins.str
elif False:
    GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs:
    def __init__(__self__, *,
                 minimum: builtins.str):
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> builtins.str:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: builtins.str):
        pulumi.set(self, "minimum", value)


if not MYPY:
    class GetLogStreamSettingsArgsDict(TypedDict):
        account_id: builtins.str
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        edition: builtins.str
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        event_source_name: builtins.str
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        host: builtins.str
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        region: builtins.str
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        token: builtins.str
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
elif False:
    GetLogStreamSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetLogStreamSettingsArgs:
    def __init__(__self__, *,
                 account_id: builtins.str,
                 edition: builtins.str,
                 event_source_name: builtins.str,
                 host: builtins.str,
                 region: builtins.str,
                 token: builtins.str):
        """
        :param builtins.str account_id: AWS account ID. Required only for 'aws_eventbridge' type
        :param builtins.str edition: Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        :param builtins.str event_source_name: An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        :param builtins.str host: The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        :param builtins.str region: The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        :param builtins.str token: The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "event_source_name", event_source_name)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: builtins.str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def edition(self) -> builtins.str:
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: builtins.str):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> builtins.str:
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "event_source_name")

    @event_source_name.setter
    def event_source_name(self, value: builtins.str):
        pulumi.set(self, "event_source_name", value)

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: builtins.str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: builtins.str):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def token(self) -> builtins.str:
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: builtins.str):
        pulumi.set(self, "token", value)


if not MYPY:
    class GetOrgMetadataDomainsArgsDict(TypedDict):
        alternate: builtins.str
        """
        Custom Domain Org URI
        """
        organization: builtins.str
        """
        Standard Org URI
        """
elif False:
    GetOrgMetadataDomainsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgMetadataDomainsArgs:
    def __init__(__self__, *,
                 alternate: builtins.str,
                 organization: builtins.str):
        """
        :param builtins.str alternate: Custom Domain Org URI
        :param builtins.str organization: Standard Org URI
        """
        pulumi.set(__self__, "alternate", alternate)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def alternate(self) -> builtins.str:
        """
        Custom Domain Org URI
        """
        return pulumi.get(self, "alternate")

    @alternate.setter
    def alternate(self, value: builtins.str):
        pulumi.set(self, "alternate", value)

    @property
    @pulumi.getter
    def organization(self) -> builtins.str:
        """
        Standard Org URI
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: builtins.str):
        pulumi.set(self, "organization", value)


if not MYPY:
    class GetOrgMetadataSettingsArgsDict(TypedDict):
        analytics_collection_enabled: builtins.bool
        bug_reporting_enabled: builtins.bool
        om_enabled: builtins.bool
        """
        Whether the legacy Okta Mobile application is enabled for the org
        """
elif False:
    GetOrgMetadataSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOrgMetadataSettingsArgs:
    def __init__(__self__, *,
                 analytics_collection_enabled: builtins.bool,
                 bug_reporting_enabled: builtins.bool,
                 om_enabled: builtins.bool):
        """
        :param builtins.bool om_enabled: Whether the legacy Okta Mobile application is enabled for the org
        """
        pulumi.set(__self__, "analytics_collection_enabled", analytics_collection_enabled)
        pulumi.set(__self__, "bug_reporting_enabled", bug_reporting_enabled)
        pulumi.set(__self__, "om_enabled", om_enabled)

    @property
    @pulumi.getter(name="analyticsCollectionEnabled")
    def analytics_collection_enabled(self) -> builtins.bool:
        return pulumi.get(self, "analytics_collection_enabled")

    @analytics_collection_enabled.setter
    def analytics_collection_enabled(self, value: builtins.bool):
        pulumi.set(self, "analytics_collection_enabled", value)

    @property
    @pulumi.getter(name="bugReportingEnabled")
    def bug_reporting_enabled(self) -> builtins.bool:
        return pulumi.get(self, "bug_reporting_enabled")

    @bug_reporting_enabled.setter
    def bug_reporting_enabled(self, value: builtins.bool):
        pulumi.set(self, "bug_reporting_enabled", value)

    @property
    @pulumi.getter(name="omEnabled")
    def om_enabled(self) -> builtins.bool:
        """
        Whether the legacy Okta Mobile application is enabled for the org
        """
        return pulumi.get(self, "om_enabled")

    @om_enabled.setter
    def om_enabled(self, value: builtins.bool):
        pulumi.set(self, "om_enabled", value)


