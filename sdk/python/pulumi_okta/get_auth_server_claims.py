# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthServerClaimsResult',
    'AwaitableGetAuthServerClaimsResult',
    'get_auth_server_claims',
    'get_auth_server_claims_output',
]

@pulumi.output_type
class GetAuthServerClaimsResult:
    """
    A collection of values returned by getAuthServerClaims.
    """
    def __init__(__self__, auth_server_id=None, claims=None, id=None):
        if auth_server_id and not isinstance(auth_server_id, str):
            raise TypeError("Expected argument 'auth_server_id' to be a str")
        pulumi.set(__self__, "auth_server_id", auth_server_id)
        if claims and not isinstance(claims, list):
            raise TypeError("Expected argument 'claims' to be a list")
        pulumi.set(__self__, "claims", claims)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="authServerId")
    def auth_server_id(self) -> str:
        return pulumi.get(self, "auth_server_id")

    @property
    @pulumi.getter
    def claims(self) -> Sequence['outputs.GetAuthServerClaimsClaimResult']:
        """
        collection of authorization server claims retrieved from Okta with the following properties.
        """
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAuthServerClaimsResult(GetAuthServerClaimsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthServerClaimsResult(
            auth_server_id=self.auth_server_id,
            claims=self.claims,
            id=self.id)


def get_auth_server_claims(auth_server_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthServerClaimsResult:
    """
    Use this data source to retrieve a list of authorization server claims from Okta.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_okta as okta

    test = okta.get_auth_server_claims(auth_server_id="default")
    ```


    :param str auth_server_id: Auth server ID.
    """
    __args__ = dict()
    __args__['authServerId'] = auth_server_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('okta:index/getAuthServerClaims:getAuthServerClaims', __args__, opts=opts, typ=GetAuthServerClaimsResult).value

    return AwaitableGetAuthServerClaimsResult(
        auth_server_id=pulumi.get(__ret__, 'auth_server_id'),
        claims=pulumi.get(__ret__, 'claims'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_auth_server_claims)
def get_auth_server_claims_output(auth_server_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthServerClaimsResult]:
    """
    Use this data source to retrieve a list of authorization server claims from Okta.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_okta as okta

    test = okta.get_auth_server_claims(auth_server_id="default")
    ```


    :param str auth_server_id: Auth server ID.
    """
    ...
