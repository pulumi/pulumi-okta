# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEntitlementResult',
    'AwaitableGetEntitlementResult',
    'get_entitlement',
    'get_entitlement_output',
]

@pulumi.output_type
class GetEntitlementResult:
    """
    A collection of values returned by getEntitlement.
    """
    def __init__(__self__, data_type=None, external_value=None, id=None, multi_value=None, name=None, parent=None, parent_resource_orn=None, values=None):
        if data_type and not isinstance(data_type, str):
            raise TypeError("Expected argument 'data_type' to be a str")
        pulumi.set(__self__, "data_type", data_type)
        if external_value and not isinstance(external_value, str):
            raise TypeError("Expected argument 'external_value' to be a str")
        pulumi.set(__self__, "external_value", external_value)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if multi_value and not isinstance(multi_value, bool):
            raise TypeError("Expected argument 'multi_value' to be a bool")
        pulumi.set(__self__, "multi_value", multi_value)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent and not isinstance(parent, dict):
            raise TypeError("Expected argument 'parent' to be a dict")
        pulumi.set(__self__, "parent", parent)
        if parent_resource_orn and not isinstance(parent_resource_orn, str):
            raise TypeError("Expected argument 'parent_resource_orn' to be a str")
        pulumi.set(__self__, "parent_resource_orn", parent_resource_orn)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="externalValue")
    def external_value(self) -> _builtins.str:
        return pulumi.get(self, "external_value")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="multiValue")
    def multi_value(self) -> _builtins.bool:
        return pulumi.get(self, "multi_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> Optional['outputs.GetEntitlementParentResult']:
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter(name="parentResourceOrn")
    def parent_resource_orn(self) -> _builtins.str:
        return pulumi.get(self, "parent_resource_orn")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetEntitlementValueResult']]:
        return pulumi.get(self, "values")


class AwaitableGetEntitlementResult(GetEntitlementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntitlementResult(
            data_type=self.data_type,
            external_value=self.external_value,
            id=self.id,
            multi_value=self.multi_value,
            name=self.name,
            parent=self.parent,
            parent_resource_orn=self.parent_resource_orn,
            values=self.values)


def get_entitlement(id: Optional[_builtins.str] = None,
                    parent: Optional[Union['GetEntitlementParentArgs', 'GetEntitlementParentArgsDict']] = None,
                    values: Optional[Sequence[Union['GetEntitlementValueArgs', 'GetEntitlementValueArgsDict']]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntitlementResult:
    """
    Get the entitlement belonging to an Okta organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_okta as okta

    test = okta.get_entitlement(id="<entitlement id>")
    ```


    :param _builtins.str id: The ID of this resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['parent'] = parent
    __args__['values'] = values
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('okta:index/getEntitlement:getEntitlement', __args__, opts=opts, typ=GetEntitlementResult).value

    return AwaitableGetEntitlementResult(
        data_type=pulumi.get(__ret__, 'data_type'),
        external_value=pulumi.get(__ret__, 'external_value'),
        id=pulumi.get(__ret__, 'id'),
        multi_value=pulumi.get(__ret__, 'multi_value'),
        name=pulumi.get(__ret__, 'name'),
        parent=pulumi.get(__ret__, 'parent'),
        parent_resource_orn=pulumi.get(__ret__, 'parent_resource_orn'),
        values=pulumi.get(__ret__, 'values'))
def get_entitlement_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                           parent: Optional[pulumi.Input[Optional[Union['GetEntitlementParentArgs', 'GetEntitlementParentArgsDict']]]] = None,
                           values: Optional[pulumi.Input[Optional[Sequence[Union['GetEntitlementValueArgs', 'GetEntitlementValueArgsDict']]]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEntitlementResult]:
    """
    Get the entitlement belonging to an Okta organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_okta as okta

    test = okta.get_entitlement(id="<entitlement id>")
    ```


    :param _builtins.str id: The ID of this resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['parent'] = parent
    __args__['values'] = values
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('okta:index/getEntitlement:getEntitlement', __args__, opts=opts, typ=GetEntitlementResult)
    return __ret__.apply(lambda __response__: GetEntitlementResult(
        data_type=pulumi.get(__response__, 'data_type'),
        external_value=pulumi.get(__response__, 'external_value'),
        id=pulumi.get(__response__, 'id'),
        multi_value=pulumi.get(__response__, 'multi_value'),
        name=pulumi.get(__response__, 'name'),
        parent=pulumi.get(__response__, 'parent'),
        parent_resource_orn=pulumi.get(__response__, 'parent_resource_orn'),
        values=pulumi.get(__response__, 'values')))
