# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RateLimitAdminNotificationSettingsArgs', 'RateLimitAdminNotificationSettings']

@pulumi.input_type
class RateLimitAdminNotificationSettingsArgs:
    def __init__(__self__, *,
                 notifications_enabled: pulumi.Input[_builtins.bool]):
        """
        The set of arguments for constructing a RateLimitAdminNotificationSettings resource.
        :param pulumi.Input[_builtins.bool] notifications_enabled: Enables or disables admin notifications for rate limiting events.
        """
        pulumi.set(__self__, "notifications_enabled", notifications_enabled)

    @_builtins.property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Enables or disables admin notifications for rate limiting events.
        """
        return pulumi.get(self, "notifications_enabled")

    @notifications_enabled.setter
    def notifications_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "notifications_enabled", value)


@pulumi.input_type
class _RateLimitAdminNotificationSettingsState:
    def __init__(__self__, *,
                 notifications_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering RateLimitAdminNotificationSettings resources.
        :param pulumi.Input[_builtins.bool] notifications_enabled: Enables or disables admin notifications for rate limiting events.
        """
        if notifications_enabled is not None:
            pulumi.set(__self__, "notifications_enabled", notifications_enabled)

    @_builtins.property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables or disables admin notifications for rate limiting events.
        """
        return pulumi.get(self, "notifications_enabled")

    @notifications_enabled.setter
    def notifications_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "notifications_enabled", value)


@pulumi.type_token("okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings")
class RateLimitAdminNotificationSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 notifications_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Manages principal rate limits.
        Principal Rate Limits provides operations to manage Principal Rate Limits for your organization.
        ## Example Usage

        ```python
        import pulumi
        import pulumi_okta as okta

        example = okta.RateLimitAdminNotificationSettings("example", notifications_enabled=True)
        ```

        ## Import

        ```sh
        $ pulumi import okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings example .
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] notifications_enabled: Enables or disables admin notifications for rate limiting events.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RateLimitAdminNotificationSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages principal rate limits.
        Principal Rate Limits provides operations to manage Principal Rate Limits for your organization.
        ## Example Usage

        ```python
        import pulumi
        import pulumi_okta as okta

        example = okta.RateLimitAdminNotificationSettings("example", notifications_enabled=True)
        ```

        ## Import

        ```sh
        $ pulumi import okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings example .
        ```

        :param str resource_name: The name of the resource.
        :param RateLimitAdminNotificationSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RateLimitAdminNotificationSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 notifications_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RateLimitAdminNotificationSettingsArgs.__new__(RateLimitAdminNotificationSettingsArgs)

            if notifications_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'notifications_enabled'")
            __props__.__dict__["notifications_enabled"] = notifications_enabled
        super(RateLimitAdminNotificationSettings, __self__).__init__(
            'okta:index/rateLimitAdminNotificationSettings:RateLimitAdminNotificationSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            notifications_enabled: Optional[pulumi.Input[_builtins.bool]] = None) -> 'RateLimitAdminNotificationSettings':
        """
        Get an existing RateLimitAdminNotificationSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] notifications_enabled: Enables or disables admin notifications for rate limiting events.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RateLimitAdminNotificationSettingsState.__new__(_RateLimitAdminNotificationSettingsState)

        __props__.__dict__["notifications_enabled"] = notifications_enabled
        return RateLimitAdminNotificationSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enables or disables admin notifications for rate limiting events.
        """
        return pulumi.get(self, "notifications_enabled")

