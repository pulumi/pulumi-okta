# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AppGroupAssignmentsGroup',
    'AppSignonPolicyRulePlatformInclude',
    'AppUserSchemaPropertyArrayOneOf',
    'AppUserSchemaPropertyOneOf',
    'CustomizedSigninPageContentSecurityPolicySetting',
    'CustomizedSigninPageWidgetCustomizations',
    'DomainDnsRecord',
    'EmailDomainDnsValidationRecord',
    'EmailSenderDnsRecord',
    'EventHookHeader',
    'GroupSchemaPropertyArrayOneOf',
    'GroupSchemaPropertyMasterOverridePriority',
    'GroupSchemaPropertyOneOf',
    'LogStreamSettings',
    'PolicyRuleProfileEnrollmentProfileAttribute',
    'PreviewSigninPageContentSecurityPolicySetting',
    'PreviewSigninPageWidgetCustomizations',
    'TemplateSmsTranslation',
    'UserSchemaPropertyArrayOneOf',
    'UserSchemaPropertyMasterOverridePriority',
    'UserSchemaPropertyOneOf',
    'GetAppsAppResult',
    'GetAppsAppVisibilityResult',
    'GetAppsAppVisibilityHideResult',
    'GetAuthServerClaimsClaimResult',
    'GetBehavioursBehaviorResult',
    'GetBrandsBrandResult',
    'GetDefaultSigninPageContentSecurityPolicySettingResult',
    'GetDefaultSigninPageWidgetCustomizationsResult',
    'GetDeviceAssurancePolicyDiskEncryptionTypeResult',
    'GetDeviceAssurancePolicyOsVersionResult',
    'GetDeviceAssurancePolicyOsVersionConstraintResult',
    'GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirementResult',
    'GetDeviceAssurancePolicyOsVersionDynamicVersionRequirementResult',
    'GetDeviceAssurancePolicyScreenlockTypeResult',
    'GetDeviceAssurancePolicyThirdPartySignalProviderResult',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcResult',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionResult',
    'GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionResult',
    'GetDomainDnsRecordResult',
    'GetEmailCustomizationsEmailCustomizationResult',
    'GetGroupsGroupResult',
    'GetLogStreamSettingsResult',
    'GetOrgMetadataDomainsResult',
    'GetOrgMetadataSettingsResult',
    'GetTemplatesEmailTemplateResult',
    'GetThemesThemeResult',
    'GetTrustedOriginsTrustedOriginResult',
    'GetUserSecurityQuestionsQuestionResult',
]

@pulumi.output_type
class AppGroupAssignmentsGroup(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 profile: builtins.str,
                 priority: Optional[builtins.int] = None):
        """
        :param builtins.str id: A group to associate with the application
        :param builtins.str profile: JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
        :param builtins.int priority: Priority of group assignment
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "profile", profile)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A group to associate with the application
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def profile(self) -> builtins.str:
        """
        JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        """
        Priority of group assignment
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class AppSignonPolicyRulePlatformInclude(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osExpression":
            suggest = "os_expression"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppSignonPolicyRulePlatformInclude. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppSignonPolicyRulePlatformInclude.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppSignonPolicyRulePlatformInclude.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_expression: Optional[builtins.str] = None,
                 os_type: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str os_expression: Only available with OTHER OS type
        """
        if os_expression is not None:
            pulumi.set(__self__, "os_expression", os_expression)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="osExpression")
    def os_expression(self) -> Optional[builtins.str]:
        """
        Only available with OTHER OS type
        """
        return pulumi.get(self, "os_expression")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AppUserSchemaPropertyArrayOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Value mapping to member of `array_enum`
        :param builtins.str title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class AppUserSchemaPropertyOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Enum value
        :param builtins.str title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Enum title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class CustomizedSigninPageContentSecurityPolicySetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportUri":
            suggest = "report_uri"
        elif key == "srcLists":
            suggest = "src_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomizedSigninPageContentSecurityPolicySetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomizedSigninPageContentSecurityPolicySetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomizedSigninPageContentSecurityPolicySetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[builtins.str] = None,
                 report_uri: Optional[builtins.str] = None,
                 src_lists: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str mode: enforced or report_only
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if report_uri is not None:
            pulumi.set(__self__, "report_uri", report_uri)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> Optional[builtins.str]:
        return pulumi.get(self, "report_uri")

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "src_lists")


@pulumi.output_type
class CustomizedSigninPageWidgetCustomizations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "widgetGeneration":
            suggest = "widget_generation"
        elif key == "authenticatorPageCustomLinkLabel":
            suggest = "authenticator_page_custom_link_label"
        elif key == "authenticatorPageCustomLinkUrl":
            suggest = "authenticator_page_custom_link_url"
        elif key == "classicRecoveryFlowEmailOrUsernameLabel":
            suggest = "classic_recovery_flow_email_or_username_label"
        elif key == "customLink1Label":
            suggest = "custom_link1_label"
        elif key == "customLink1Url":
            suggest = "custom_link1_url"
        elif key == "customLink2Label":
            suggest = "custom_link2_label"
        elif key == "customLink2Url":
            suggest = "custom_link2_url"
        elif key == "forgotPasswordLabel":
            suggest = "forgot_password_label"
        elif key == "forgotPasswordUrl":
            suggest = "forgot_password_url"
        elif key == "helpLabel":
            suggest = "help_label"
        elif key == "helpUrl":
            suggest = "help_url"
        elif key == "passwordInfoTip":
            suggest = "password_info_tip"
        elif key == "passwordLabel":
            suggest = "password_label"
        elif key == "showPasswordVisibilityToggle":
            suggest = "show_password_visibility_toggle"
        elif key == "showUserIdentifier":
            suggest = "show_user_identifier"
        elif key == "signInLabel":
            suggest = "sign_in_label"
        elif key == "unlockAccountLabel":
            suggest = "unlock_account_label"
        elif key == "unlockAccountUrl":
            suggest = "unlock_account_url"
        elif key == "usernameInfoTip":
            suggest = "username_info_tip"
        elif key == "usernameLabel":
            suggest = "username_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomizedSigninPageWidgetCustomizations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomizedSigninPageWidgetCustomizations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomizedSigninPageWidgetCustomizations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 widget_generation: builtins.str,
                 authenticator_page_custom_link_label: Optional[builtins.str] = None,
                 authenticator_page_custom_link_url: Optional[builtins.str] = None,
                 classic_recovery_flow_email_or_username_label: Optional[builtins.str] = None,
                 custom_link1_label: Optional[builtins.str] = None,
                 custom_link1_url: Optional[builtins.str] = None,
                 custom_link2_label: Optional[builtins.str] = None,
                 custom_link2_url: Optional[builtins.str] = None,
                 forgot_password_label: Optional[builtins.str] = None,
                 forgot_password_url: Optional[builtins.str] = None,
                 help_label: Optional[builtins.str] = None,
                 help_url: Optional[builtins.str] = None,
                 password_info_tip: Optional[builtins.str] = None,
                 password_label: Optional[builtins.str] = None,
                 show_password_visibility_toggle: Optional[builtins.bool] = None,
                 show_user_identifier: Optional[builtins.bool] = None,
                 sign_in_label: Optional[builtins.str] = None,
                 unlock_account_label: Optional[builtins.str] = None,
                 unlock_account_url: Optional[builtins.str] = None,
                 username_info_tip: Optional[builtins.str] = None,
                 username_label: Optional[builtins.str] = None):
        pulumi.set(__self__, "widget_generation", widget_generation)
        if authenticator_page_custom_link_label is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        if authenticator_page_custom_link_url is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        if classic_recovery_flow_email_or_username_label is not None:
            pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        if custom_link1_label is not None:
            pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        if custom_link1_url is not None:
            pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        if custom_link2_label is not None:
            pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        if custom_link2_url is not None:
            pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        if forgot_password_label is not None:
            pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        if forgot_password_url is not None:
            pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        if help_label is not None:
            pulumi.set(__self__, "help_label", help_label)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if password_info_tip is not None:
            pulumi.set(__self__, "password_info_tip", password_info_tip)
        if password_label is not None:
            pulumi.set(__self__, "password_label", password_label)
        if show_password_visibility_toggle is not None:
            pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        if show_user_identifier is not None:
            pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if unlock_account_label is not None:
            pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        if unlock_account_url is not None:
            pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        if username_info_tip is not None:
            pulumi.set(__self__, "username_info_tip", username_info_tip)
        if username_label is not None:
            pulumi.set(__self__, "username_label", username_label)

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> builtins.str:
        return pulumi.get(self, "widget_generation")

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link1_label")

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link1_url")

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link2_label")

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link2_url")

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forgot_password_label")

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forgot_password_url")

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "help_label")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password_info_tip")

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password_label")

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "show_password_visibility_toggle")

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "show_user_identifier")

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sign_in_label")

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unlock_account_label")

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unlock_account_url")

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username_info_tip")

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username_label")


@pulumi.output_type
class DomainDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional[builtins.str] = None,
                 fqdn: Optional[builtins.str] = None,
                 record_type: Optional[builtins.str] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str expiration: TXT record expiration
        :param builtins.str fqdn: DNS record name
        :param builtins.str record_type: Record type can be TXT or CNAME
        :param Sequence[builtins.str] values: DNS verification value
        """
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[builtins.str]:
        """
        TXT record expiration
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[builtins.str]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[builtins.str]:
        """
        Record type can be TXT or CNAME
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        DNS verification value
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class EmailDomainDnsValidationRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailDomainDnsValidationRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailDomainDnsValidationRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailDomainDnsValidationRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional[builtins.str] = None,
                 fqdn: Optional[builtins.str] = None,
                 record_type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str expiration: DNS TXT record expiration
        :param builtins.str fqdn: DNS record name
        :param builtins.str record_type: Record type can be TXT or cname
        :param builtins.str value: DNS record value
        """
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""This field has been removed in the newest go sdk version and has become noop""")
    def expiration(self) -> Optional[builtins.str]:
        """
        DNS TXT record expiration
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[builtins.str]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[builtins.str]:
        """
        Record type can be TXT or cname
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        DNS record value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EmailSenderDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailSenderDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailSenderDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailSenderDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: Optional[builtins.str] = None,
                 record_type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str fqdn: DNS record name
        :param builtins.str record_type: Record type can be TXT or CNAME
        :param builtins.str value: DNS verification value
        """
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[builtins.str]:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[builtins.str]:
        """
        Record type can be TXT or CNAME
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        DNS verification value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventHookHeader(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GroupSchemaPropertyArrayOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Value mapping to member of `array_enum`
        :param builtins.str title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GroupSchemaPropertyMasterOverridePriority(dict):
    def __init__(__self__, *,
                 value: builtins.str,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GroupSchemaPropertyOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Enum value
        :param builtins.str title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Enum title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class LogStreamSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "eventSourceName":
            suggest = "event_source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogStreamSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogStreamSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogStreamSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[builtins.str] = None,
                 edition: Optional[builtins.str] = None,
                 event_source_name: Optional[builtins.str] = None,
                 host: Optional[builtins.str] = None,
                 region: Optional[builtins.str] = None,
                 token: Optional[builtins.str] = None):
        """
        :param builtins.str account_id: AWS account ID. Required only for 'aws_eventbridge' type
        :param builtins.str edition: Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        :param builtins.str event_source_name: An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        :param builtins.str host: The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        :param builtins.str region: The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        :param builtins.str token: The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if event_source_name is not None:
            pulumi.set(__self__, "event_source_name", event_source_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[builtins.str]:
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def edition(self) -> Optional[builtins.str]:
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> Optional[builtins.str]:
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "event_source_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def token(self) -> Optional[builtins.str]:
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class PolicyRuleProfileEnrollmentProfileAttribute(dict):
    def __init__(__self__, *,
                 label: builtins.str,
                 name: builtins.str,
                 required: Optional[builtins.bool] = None):
        """
        :param builtins.str label: A display-friendly label for this property
        :param builtins.str name: The name of a User Profile property
        :param builtins.bool required: Indicates if this property is required for enrollment
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A display-friendly label for this property
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of a User Profile property
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[builtins.bool]:
        """
        Indicates if this property is required for enrollment
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class PreviewSigninPageContentSecurityPolicySetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportUri":
            suggest = "report_uri"
        elif key == "srcLists":
            suggest = "src_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreviewSigninPageContentSecurityPolicySetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreviewSigninPageContentSecurityPolicySetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreviewSigninPageContentSecurityPolicySetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[builtins.str] = None,
                 report_uri: Optional[builtins.str] = None,
                 src_lists: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str mode: enforced or report_only
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if report_uri is not None:
            pulumi.set(__self__, "report_uri", report_uri)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> Optional[builtins.str]:
        return pulumi.get(self, "report_uri")

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "src_lists")


@pulumi.output_type
class PreviewSigninPageWidgetCustomizations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "widgetGeneration":
            suggest = "widget_generation"
        elif key == "authenticatorPageCustomLinkLabel":
            suggest = "authenticator_page_custom_link_label"
        elif key == "authenticatorPageCustomLinkUrl":
            suggest = "authenticator_page_custom_link_url"
        elif key == "classicRecoveryFlowEmailOrUsernameLabel":
            suggest = "classic_recovery_flow_email_or_username_label"
        elif key == "customLink1Label":
            suggest = "custom_link1_label"
        elif key == "customLink1Url":
            suggest = "custom_link1_url"
        elif key == "customLink2Label":
            suggest = "custom_link2_label"
        elif key == "customLink2Url":
            suggest = "custom_link2_url"
        elif key == "forgotPasswordLabel":
            suggest = "forgot_password_label"
        elif key == "forgotPasswordUrl":
            suggest = "forgot_password_url"
        elif key == "helpLabel":
            suggest = "help_label"
        elif key == "helpUrl":
            suggest = "help_url"
        elif key == "passwordInfoTip":
            suggest = "password_info_tip"
        elif key == "passwordLabel":
            suggest = "password_label"
        elif key == "showPasswordVisibilityToggle":
            suggest = "show_password_visibility_toggle"
        elif key == "showUserIdentifier":
            suggest = "show_user_identifier"
        elif key == "signInLabel":
            suggest = "sign_in_label"
        elif key == "unlockAccountLabel":
            suggest = "unlock_account_label"
        elif key == "unlockAccountUrl":
            suggest = "unlock_account_url"
        elif key == "usernameInfoTip":
            suggest = "username_info_tip"
        elif key == "usernameLabel":
            suggest = "username_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreviewSigninPageWidgetCustomizations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreviewSigninPageWidgetCustomizations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreviewSigninPageWidgetCustomizations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 widget_generation: builtins.str,
                 authenticator_page_custom_link_label: Optional[builtins.str] = None,
                 authenticator_page_custom_link_url: Optional[builtins.str] = None,
                 classic_recovery_flow_email_or_username_label: Optional[builtins.str] = None,
                 custom_link1_label: Optional[builtins.str] = None,
                 custom_link1_url: Optional[builtins.str] = None,
                 custom_link2_label: Optional[builtins.str] = None,
                 custom_link2_url: Optional[builtins.str] = None,
                 forgot_password_label: Optional[builtins.str] = None,
                 forgot_password_url: Optional[builtins.str] = None,
                 help_label: Optional[builtins.str] = None,
                 help_url: Optional[builtins.str] = None,
                 password_info_tip: Optional[builtins.str] = None,
                 password_label: Optional[builtins.str] = None,
                 show_password_visibility_toggle: Optional[builtins.bool] = None,
                 show_user_identifier: Optional[builtins.bool] = None,
                 sign_in_label: Optional[builtins.str] = None,
                 unlock_account_label: Optional[builtins.str] = None,
                 unlock_account_url: Optional[builtins.str] = None,
                 username_info_tip: Optional[builtins.str] = None,
                 username_label: Optional[builtins.str] = None):
        pulumi.set(__self__, "widget_generation", widget_generation)
        if authenticator_page_custom_link_label is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        if authenticator_page_custom_link_url is not None:
            pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        if classic_recovery_flow_email_or_username_label is not None:
            pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        if custom_link1_label is not None:
            pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        if custom_link1_url is not None:
            pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        if custom_link2_label is not None:
            pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        if custom_link2_url is not None:
            pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        if forgot_password_label is not None:
            pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        if forgot_password_url is not None:
            pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        if help_label is not None:
            pulumi.set(__self__, "help_label", help_label)
        if help_url is not None:
            pulumi.set(__self__, "help_url", help_url)
        if password_info_tip is not None:
            pulumi.set(__self__, "password_info_tip", password_info_tip)
        if password_label is not None:
            pulumi.set(__self__, "password_label", password_label)
        if show_password_visibility_toggle is not None:
            pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        if show_user_identifier is not None:
            pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if unlock_account_label is not None:
            pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        if unlock_account_url is not None:
            pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        if username_info_tip is not None:
            pulumi.set(__self__, "username_info_tip", username_info_tip)
        if username_label is not None:
            pulumi.set(__self__, "username_label", username_label)

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> builtins.str:
        return pulumi.get(self, "widget_generation")

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link1_label")

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link1_url")

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link2_label")

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "custom_link2_url")

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forgot_password_label")

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forgot_password_url")

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "help_label")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password_info_tip")

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password_label")

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "show_password_visibility_toggle")

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "show_user_identifier")

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sign_in_label")

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unlock_account_label")

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unlock_account_url")

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username_info_tip")

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "username_label")


@pulumi.output_type
class TemplateSmsTranslation(dict):
    def __init__(__self__, *,
                 language: builtins.str,
                 template: builtins.str):
        """
        :param builtins.str language: The language to map the template to.
        :param builtins.str template: The SMS message.
        """
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def language(self) -> builtins.str:
        """
        The language to map the template to.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def template(self) -> builtins.str:
        """
        The SMS message.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class UserSchemaPropertyArrayOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Value mapping to member of `array_enum`
        :param builtins.str title: Display name for the enum value.
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Value mapping to member of `array_enum`
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Display name for the enum value.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class UserSchemaPropertyMasterOverridePriority(dict):
    def __init__(__self__, *,
                 value: builtins.str,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class UserSchemaPropertyOneOf(dict):
    def __init__(__self__, *,
                 const: builtins.str,
                 title: builtins.str):
        """
        :param builtins.str const: Enum value
        :param builtins.str title: Enum title
        """
        pulumi.set(__self__, "const", const)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def const(self) -> builtins.str:
        """
        Enum value
        """
        return pulumi.get(self, "const")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        Enum title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetAppsAppResult(dict):
    def __init__(__self__, *,
                 admin_note: builtins.str,
                 created: builtins.str,
                 enduser_note: builtins.str,
                 features: Sequence[builtins.str],
                 id: builtins.str,
                 label: builtins.str,
                 last_updated: builtins.str,
                 name: builtins.str,
                 sign_on_mode: builtins.str,
                 status: builtins.str,
                 visibility: 'outputs.GetAppsAppVisibilityResult'):
        pulumi.set(__self__, "admin_note", admin_note)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "enduser_note", enduser_note)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sign_on_mode", sign_on_mode)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="adminNote")
    def admin_note(self) -> builtins.str:
        return pulumi.get(self, "admin_note")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="enduserNote")
    def enduser_note(self) -> builtins.str:
        return pulumi.get(self, "enduser_note")

    @property
    @pulumi.getter
    def features(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> builtins.str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signOnMode")
    def sign_on_mode(self) -> builtins.str:
        return pulumi.get(self, "sign_on_mode")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def visibility(self) -> 'outputs.GetAppsAppVisibilityResult':
        return pulumi.get(self, "visibility")


@pulumi.output_type
class GetAppsAppVisibilityResult(dict):
    def __init__(__self__, *,
                 auto_launch: builtins.bool,
                 auto_submit_toolbar: builtins.bool,
                 hide: 'outputs.GetAppsAppVisibilityHideResult'):
        pulumi.set(__self__, "auto_launch", auto_launch)
        pulumi.set(__self__, "auto_submit_toolbar", auto_submit_toolbar)
        pulumi.set(__self__, "hide", hide)

    @property
    @pulumi.getter(name="autoLaunch")
    def auto_launch(self) -> builtins.bool:
        return pulumi.get(self, "auto_launch")

    @property
    @pulumi.getter(name="autoSubmitToolbar")
    def auto_submit_toolbar(self) -> builtins.bool:
        return pulumi.get(self, "auto_submit_toolbar")

    @property
    @pulumi.getter
    def hide(self) -> 'outputs.GetAppsAppVisibilityHideResult':
        return pulumi.get(self, "hide")


@pulumi.output_type
class GetAppsAppVisibilityHideResult(dict):
    def __init__(__self__, *,
                 ios: builtins.bool,
                 web: builtins.bool):
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "web", web)

    @property
    @pulumi.getter
    def ios(self) -> builtins.bool:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def web(self) -> builtins.bool:
        return pulumi.get(self, "web")


@pulumi.output_type
class GetAuthServerClaimsClaimResult(dict):
    def __init__(__self__, *,
                 always_include_in_token: builtins.bool,
                 claim_type: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 scopes: Sequence[builtins.str],
                 status: builtins.str,
                 value: builtins.str,
                 value_type: builtins.str):
        """
        :param builtins.bool always_include_in_token: Specifies whether to include Claims in the token.
        :param builtins.str claim_type: Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
        :param builtins.str id: ID of the claim.
        :param builtins.str name: Name of the claim.
        :param Sequence[builtins.str] scopes: Specifies the scopes for this Claim.
        :param builtins.str status: Status of the claim.
        :param builtins.str value: Value of the claim.
        :param builtins.str value_type: Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
        """
        pulumi.set(__self__, "always_include_in_token", always_include_in_token)
        pulumi.set(__self__, "claim_type", claim_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="alwaysIncludeInToken")
    def always_include_in_token(self) -> builtins.bool:
        """
        Specifies whether to include Claims in the token.
        """
        return pulumi.get(self, "always_include_in_token")

    @property
    @pulumi.getter(name="claimType")
    def claim_type(self) -> builtins.str:
        """
        Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
        """
        return pulumi.get(self, "claim_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        ID of the claim.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[builtins.str]:
        """
        Specifies the scopes for this Claim.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the claim.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the claim.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetBehavioursBehaviorResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 settings: Mapping[str, builtins.str],
                 status: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str id: Behavior ID.
        :param builtins.str name: Behavior name.
        :param Mapping[str, builtins.str] settings: Map of behavior settings.
        :param builtins.str status: Behavior status.
        :param builtins.str type: Behavior type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Behavior ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Behavior name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Mapping[str, builtins.str]:
        """
        Map of behavior settings.
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Behavior status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Behavior type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBrandsBrandResult(dict):
    def __init__(__self__, *,
                 custom_privacy_policy_url: builtins.str,
                 id: builtins.str,
                 links: builtins.str,
                 name: builtins.str,
                 remove_powered_by_okta: builtins.bool):
        """
        :param builtins.str custom_privacy_policy_url: Custom privacy policy URL
        :param builtins.str id: The ID of the Brand
        :param builtins.str links: Link relations for this object - JSON HAL - Discoverable resources related to the brand
        :param builtins.str name: Brand name
        :param builtins.bool remove_powered_by_okta: Removes "Powered by Okta" from the Okta-hosted sign-in page and "© 2021 Okta, Inc." from the Okta End-User Dashboard
        """
        pulumi.set(__self__, "custom_privacy_policy_url", custom_privacy_policy_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remove_powered_by_okta", remove_powered_by_okta)

    @property
    @pulumi.getter(name="customPrivacyPolicyUrl")
    def custom_privacy_policy_url(self) -> builtins.str:
        """
        Custom privacy policy URL
        """
        return pulumi.get(self, "custom_privacy_policy_url")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Brand
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> builtins.str:
        """
        Link relations for this object - JSON HAL - Discoverable resources related to the brand
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Brand name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="removePoweredByOkta")
    def remove_powered_by_okta(self) -> builtins.bool:
        """
        Removes "Powered by Okta" from the Okta-hosted sign-in page and "© 2021 Okta, Inc." from the Okta End-User Dashboard
        """
        return pulumi.get(self, "remove_powered_by_okta")


@pulumi.output_type
class GetDefaultSigninPageContentSecurityPolicySettingResult(dict):
    def __init__(__self__, *,
                 mode: builtins.str,
                 report_uri: builtins.str,
                 src_lists: Sequence[builtins.str]):
        """
        :param builtins.str mode: enforced or report_only
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "report_uri", report_uri)
        pulumi.set(__self__, "src_lists", src_lists)

    @property
    @pulumi.getter
    def mode(self) -> builtins.str:
        """
        enforced or report_only
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> builtins.str:
        return pulumi.get(self, "report_uri")

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "src_lists")


@pulumi.output_type
class GetDefaultSigninPageWidgetCustomizationsResult(dict):
    def __init__(__self__, *,
                 authenticator_page_custom_link_label: builtins.str,
                 authenticator_page_custom_link_url: builtins.str,
                 classic_recovery_flow_email_or_username_label: builtins.str,
                 custom_link1_label: builtins.str,
                 custom_link1_url: builtins.str,
                 custom_link2_label: builtins.str,
                 custom_link2_url: builtins.str,
                 forgot_password_label: builtins.str,
                 forgot_password_url: builtins.str,
                 help_label: builtins.str,
                 help_url: builtins.str,
                 password_info_tip: builtins.str,
                 password_label: builtins.str,
                 show_password_visibility_toggle: builtins.bool,
                 show_user_identifier: builtins.bool,
                 sign_in_label: builtins.str,
                 unlock_account_label: builtins.str,
                 unlock_account_url: builtins.str,
                 username_info_tip: builtins.str,
                 username_label: builtins.str,
                 widget_generation: builtins.str):
        pulumi.set(__self__, "authenticator_page_custom_link_label", authenticator_page_custom_link_label)
        pulumi.set(__self__, "authenticator_page_custom_link_url", authenticator_page_custom_link_url)
        pulumi.set(__self__, "classic_recovery_flow_email_or_username_label", classic_recovery_flow_email_or_username_label)
        pulumi.set(__self__, "custom_link1_label", custom_link1_label)
        pulumi.set(__self__, "custom_link1_url", custom_link1_url)
        pulumi.set(__self__, "custom_link2_label", custom_link2_label)
        pulumi.set(__self__, "custom_link2_url", custom_link2_url)
        pulumi.set(__self__, "forgot_password_label", forgot_password_label)
        pulumi.set(__self__, "forgot_password_url", forgot_password_url)
        pulumi.set(__self__, "help_label", help_label)
        pulumi.set(__self__, "help_url", help_url)
        pulumi.set(__self__, "password_info_tip", password_info_tip)
        pulumi.set(__self__, "password_label", password_label)
        pulumi.set(__self__, "show_password_visibility_toggle", show_password_visibility_toggle)
        pulumi.set(__self__, "show_user_identifier", show_user_identifier)
        pulumi.set(__self__, "sign_in_label", sign_in_label)
        pulumi.set(__self__, "unlock_account_label", unlock_account_label)
        pulumi.set(__self__, "unlock_account_url", unlock_account_url)
        pulumi.set(__self__, "username_info_tip", username_info_tip)
        pulumi.set(__self__, "username_label", username_label)
        pulumi.set(__self__, "widget_generation", widget_generation)

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkLabel")
    def authenticator_page_custom_link_label(self) -> builtins.str:
        return pulumi.get(self, "authenticator_page_custom_link_label")

    @property
    @pulumi.getter(name="authenticatorPageCustomLinkUrl")
    def authenticator_page_custom_link_url(self) -> builtins.str:
        return pulumi.get(self, "authenticator_page_custom_link_url")

    @property
    @pulumi.getter(name="classicRecoveryFlowEmailOrUsernameLabel")
    def classic_recovery_flow_email_or_username_label(self) -> builtins.str:
        return pulumi.get(self, "classic_recovery_flow_email_or_username_label")

    @property
    @pulumi.getter(name="customLink1Label")
    def custom_link1_label(self) -> builtins.str:
        return pulumi.get(self, "custom_link1_label")

    @property
    @pulumi.getter(name="customLink1Url")
    def custom_link1_url(self) -> builtins.str:
        return pulumi.get(self, "custom_link1_url")

    @property
    @pulumi.getter(name="customLink2Label")
    def custom_link2_label(self) -> builtins.str:
        return pulumi.get(self, "custom_link2_label")

    @property
    @pulumi.getter(name="customLink2Url")
    def custom_link2_url(self) -> builtins.str:
        return pulumi.get(self, "custom_link2_url")

    @property
    @pulumi.getter(name="forgotPasswordLabel")
    def forgot_password_label(self) -> builtins.str:
        return pulumi.get(self, "forgot_password_label")

    @property
    @pulumi.getter(name="forgotPasswordUrl")
    def forgot_password_url(self) -> builtins.str:
        return pulumi.get(self, "forgot_password_url")

    @property
    @pulumi.getter(name="helpLabel")
    def help_label(self) -> builtins.str:
        return pulumi.get(self, "help_label")

    @property
    @pulumi.getter(name="helpUrl")
    def help_url(self) -> builtins.str:
        return pulumi.get(self, "help_url")

    @property
    @pulumi.getter(name="passwordInfoTip")
    def password_info_tip(self) -> builtins.str:
        return pulumi.get(self, "password_info_tip")

    @property
    @pulumi.getter(name="passwordLabel")
    def password_label(self) -> builtins.str:
        return pulumi.get(self, "password_label")

    @property
    @pulumi.getter(name="showPasswordVisibilityToggle")
    def show_password_visibility_toggle(self) -> builtins.bool:
        return pulumi.get(self, "show_password_visibility_toggle")

    @property
    @pulumi.getter(name="showUserIdentifier")
    def show_user_identifier(self) -> builtins.bool:
        return pulumi.get(self, "show_user_identifier")

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> builtins.str:
        return pulumi.get(self, "sign_in_label")

    @property
    @pulumi.getter(name="unlockAccountLabel")
    def unlock_account_label(self) -> builtins.str:
        return pulumi.get(self, "unlock_account_label")

    @property
    @pulumi.getter(name="unlockAccountUrl")
    def unlock_account_url(self) -> builtins.str:
        return pulumi.get(self, "unlock_account_url")

    @property
    @pulumi.getter(name="usernameInfoTip")
    def username_info_tip(self) -> builtins.str:
        return pulumi.get(self, "username_info_tip")

    @property
    @pulumi.getter(name="usernameLabel")
    def username_label(self) -> builtins.str:
        return pulumi.get(self, "username_label")

    @property
    @pulumi.getter(name="widgetGeneration")
    def widget_generation(self) -> builtins.str:
        return pulumi.get(self, "widget_generation")


@pulumi.output_type
class GetDeviceAssurancePolicyDiskEncryptionTypeResult(dict):
    def __init__(__self__, *,
                 includes: Sequence[builtins.str]):
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def includes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetDeviceAssurancePolicyOsVersionResult(dict):
    def __init__(__self__, *,
                 dynamic_version_requirement: 'outputs.GetDeviceAssurancePolicyOsVersionDynamicVersionRequirementResult',
                 minimum: builtins.str):
        pulumi.set(__self__, "dynamic_version_requirement", dynamic_version_requirement)
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter(name="dynamicVersionRequirement")
    def dynamic_version_requirement(self) -> 'outputs.GetDeviceAssurancePolicyOsVersionDynamicVersionRequirementResult':
        return pulumi.get(self, "dynamic_version_requirement")

    @property
    @pulumi.getter
    def minimum(self) -> builtins.str:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetDeviceAssurancePolicyOsVersionConstraintResult(dict):
    def __init__(__self__, *,
                 dynamic_version_requirement: 'outputs.GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirementResult',
                 major_version_constraint: builtins.str):
        pulumi.set(__self__, "dynamic_version_requirement", dynamic_version_requirement)
        pulumi.set(__self__, "major_version_constraint", major_version_constraint)

    @property
    @pulumi.getter(name="dynamicVersionRequirement")
    def dynamic_version_requirement(self) -> 'outputs.GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirementResult':
        return pulumi.get(self, "dynamic_version_requirement")

    @property
    @pulumi.getter(name="majorVersionConstraint")
    def major_version_constraint(self) -> builtins.str:
        return pulumi.get(self, "major_version_constraint")


@pulumi.output_type
class GetDeviceAssurancePolicyOsVersionConstraintDynamicVersionRequirementResult(dict):
    def __init__(__self__, *,
                 distance_from_latest_major: builtins.int,
                 latest_security_patch: builtins.bool,
                 type: builtins.str):
        pulumi.set(__self__, "distance_from_latest_major", distance_from_latest_major)
        pulumi.set(__self__, "latest_security_patch", latest_security_patch)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="distanceFromLatestMajor")
    def distance_from_latest_major(self) -> builtins.int:
        return pulumi.get(self, "distance_from_latest_major")

    @property
    @pulumi.getter(name="latestSecurityPatch")
    def latest_security_patch(self) -> builtins.bool:
        return pulumi.get(self, "latest_security_patch")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceAssurancePolicyOsVersionDynamicVersionRequirementResult(dict):
    def __init__(__self__, *,
                 distance_from_latest_major: builtins.int,
                 latest_security_patch: builtins.bool,
                 type: builtins.str):
        pulumi.set(__self__, "distance_from_latest_major", distance_from_latest_major)
        pulumi.set(__self__, "latest_security_patch", latest_security_patch)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="distanceFromLatestMajor")
    def distance_from_latest_major(self) -> builtins.int:
        return pulumi.get(self, "distance_from_latest_major")

    @property
    @pulumi.getter(name="latestSecurityPatch")
    def latest_security_patch(self) -> builtins.bool:
        return pulumi.get(self, "latest_security_patch")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceAssurancePolicyScreenlockTypeResult(dict):
    def __init__(__self__, *,
                 includes: Sequence[builtins.str]):
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def includes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetDeviceAssurancePolicyThirdPartySignalProviderResult(dict):
    def __init__(__self__, *,
                 dtc: 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcResult'):
        pulumi.set(__self__, "dtc", dtc)

    @property
    @pulumi.getter
    def dtc(self) -> 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcResult':
        return pulumi.get(self, "dtc")


@pulumi.output_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcResult(dict):
    def __init__(__self__, *,
                 allow_screen_lock: builtins.bool,
                 browser_version: 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionResult',
                 built_in_dns_client_enabled: builtins.bool,
                 chrome_remote_desktop_app_blocked: builtins.bool,
                 crowd_strike_agent_id: builtins.str,
                 crowd_strike_customer_id: builtins.str,
                 device_enrollment_domain: builtins.str,
                 disk_encrypted: builtins.bool,
                 key_trust_level: builtins.str,
                 managed_device: builtins.bool,
                 os_firewall: builtins.bool,
                 os_version: 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionResult',
                 password_protection_warning_trigger: builtins.str,
                 realtime_url_check_mode: builtins.bool,
                 safe_browsing_protection_level: builtins.str,
                 screen_lock_secured: builtins.bool,
                 site_isolation_enabled: builtins.bool,
                 third_party_blocking_enabled: builtins.bool,
                 windows_machine_domain: builtins.str,
                 windows_user_domain: builtins.str):
        pulumi.set(__self__, "allow_screen_lock", allow_screen_lock)
        pulumi.set(__self__, "browser_version", browser_version)
        pulumi.set(__self__, "built_in_dns_client_enabled", built_in_dns_client_enabled)
        pulumi.set(__self__, "chrome_remote_desktop_app_blocked", chrome_remote_desktop_app_blocked)
        pulumi.set(__self__, "crowd_strike_agent_id", crowd_strike_agent_id)
        pulumi.set(__self__, "crowd_strike_customer_id", crowd_strike_customer_id)
        pulumi.set(__self__, "device_enrollment_domain", device_enrollment_domain)
        pulumi.set(__self__, "disk_encrypted", disk_encrypted)
        pulumi.set(__self__, "key_trust_level", key_trust_level)
        pulumi.set(__self__, "managed_device", managed_device)
        pulumi.set(__self__, "os_firewall", os_firewall)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "password_protection_warning_trigger", password_protection_warning_trigger)
        pulumi.set(__self__, "realtime_url_check_mode", realtime_url_check_mode)
        pulumi.set(__self__, "safe_browsing_protection_level", safe_browsing_protection_level)
        pulumi.set(__self__, "screen_lock_secured", screen_lock_secured)
        pulumi.set(__self__, "site_isolation_enabled", site_isolation_enabled)
        pulumi.set(__self__, "third_party_blocking_enabled", third_party_blocking_enabled)
        pulumi.set(__self__, "windows_machine_domain", windows_machine_domain)
        pulumi.set(__self__, "windows_user_domain", windows_user_domain)

    @property
    @pulumi.getter(name="allowScreenLock")
    def allow_screen_lock(self) -> builtins.bool:
        return pulumi.get(self, "allow_screen_lock")

    @property
    @pulumi.getter(name="browserVersion")
    def browser_version(self) -> 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionResult':
        return pulumi.get(self, "browser_version")

    @property
    @pulumi.getter(name="builtInDnsClientEnabled")
    def built_in_dns_client_enabled(self) -> builtins.bool:
        return pulumi.get(self, "built_in_dns_client_enabled")

    @property
    @pulumi.getter(name="chromeRemoteDesktopAppBlocked")
    def chrome_remote_desktop_app_blocked(self) -> builtins.bool:
        return pulumi.get(self, "chrome_remote_desktop_app_blocked")

    @property
    @pulumi.getter(name="crowdStrikeAgentId")
    def crowd_strike_agent_id(self) -> builtins.str:
        return pulumi.get(self, "crowd_strike_agent_id")

    @property
    @pulumi.getter(name="crowdStrikeCustomerId")
    def crowd_strike_customer_id(self) -> builtins.str:
        return pulumi.get(self, "crowd_strike_customer_id")

    @property
    @pulumi.getter(name="deviceEnrollmentDomain")
    def device_enrollment_domain(self) -> builtins.str:
        return pulumi.get(self, "device_enrollment_domain")

    @property
    @pulumi.getter(name="diskEncrypted")
    def disk_encrypted(self) -> builtins.bool:
        return pulumi.get(self, "disk_encrypted")

    @property
    @pulumi.getter(name="keyTrustLevel")
    def key_trust_level(self) -> builtins.str:
        return pulumi.get(self, "key_trust_level")

    @property
    @pulumi.getter(name="managedDevice")
    def managed_device(self) -> builtins.bool:
        return pulumi.get(self, "managed_device")

    @property
    @pulumi.getter(name="osFirewall")
    def os_firewall(self) -> builtins.bool:
        return pulumi.get(self, "os_firewall")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> 'outputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionResult':
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="passwordProtectionWarningTrigger")
    def password_protection_warning_trigger(self) -> builtins.str:
        return pulumi.get(self, "password_protection_warning_trigger")

    @property
    @pulumi.getter(name="realtimeUrlCheckMode")
    def realtime_url_check_mode(self) -> builtins.bool:
        return pulumi.get(self, "realtime_url_check_mode")

    @property
    @pulumi.getter(name="safeBrowsingProtectionLevel")
    def safe_browsing_protection_level(self) -> builtins.str:
        return pulumi.get(self, "safe_browsing_protection_level")

    @property
    @pulumi.getter(name="screenLockSecured")
    def screen_lock_secured(self) -> builtins.bool:
        return pulumi.get(self, "screen_lock_secured")

    @property
    @pulumi.getter(name="siteIsolationEnabled")
    def site_isolation_enabled(self) -> builtins.bool:
        return pulumi.get(self, "site_isolation_enabled")

    @property
    @pulumi.getter(name="thirdPartyBlockingEnabled")
    def third_party_blocking_enabled(self) -> builtins.bool:
        return pulumi.get(self, "third_party_blocking_enabled")

    @property
    @pulumi.getter(name="windowsMachineDomain")
    def windows_machine_domain(self) -> builtins.str:
        return pulumi.get(self, "windows_machine_domain")

    @property
    @pulumi.getter(name="windowsUserDomain")
    def windows_user_domain(self) -> builtins.str:
        return pulumi.get(self, "windows_user_domain")


@pulumi.output_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionResult(dict):
    def __init__(__self__, *,
                 minimum: builtins.str):
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> builtins.str:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionResult(dict):
    def __init__(__self__, *,
                 minimum: builtins.str):
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> builtins.str:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetDomainDnsRecordResult(dict):
    def __init__(__self__, *,
                 expiration: builtins.str,
                 fqdn: builtins.str,
                 record_type: builtins.str,
                 values: Sequence[builtins.str]):
        """
        :param builtins.str expiration: TXT record expiration
        :param builtins.str fqdn: DNS record name
        :param builtins.str record_type: Record type can be TXT or CNAME
        :param Sequence[builtins.str] values: DNS verification value
        """
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expiration(self) -> builtins.str:
        """
        TXT record expiration
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def fqdn(self) -> builtins.str:
        """
        DNS record name
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> builtins.str:
        """
        Record type can be TXT or CNAME
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        DNS verification value
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEmailCustomizationsEmailCustomizationResult(dict):
    def __init__(__self__, *,
                 body: builtins.str,
                 id: builtins.str,
                 is_default: builtins.bool,
                 language: builtins.str,
                 links: builtins.str,
                 subject: builtins.str):
        """
        :param builtins.str body: The body of the customization
        :param builtins.str id: The ID of the customization
        :param builtins.bool is_default: Whether the customization is the default
        :param builtins.str language: The language supported by the customization
        :param builtins.str links: Link relations for this object - JSON HAL - Discoverable resources related to the email template
        :param builtins.str subject: The subject of the customization
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def body(self) -> builtins.str:
        """
        The body of the customization
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the customization
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> builtins.bool:
        """
        Whether the customization is the default
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def language(self) -> builtins.str:
        """
        The language supported by the customization
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def links(self) -> builtins.str:
        """
        Link relations for this object - JSON HAL - Discoverable resources related to the email template
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def subject(self) -> builtins.str:
        """
        The subject of the customization
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 custom_profile_attributes: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str custom_profile_attributes: Raw JSON containing all custom profile attributes. Likely only useful on groups of type
        :param builtins.str description: Group description.
        :param builtins.str id: Group ID.
        :param builtins.str name: Group name.
        :param builtins.str type: Group type.
        """
        pulumi.set(__self__, "custom_profile_attributes", custom_profile_attributes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customProfileAttributes")
    def custom_profile_attributes(self) -> builtins.str:
        """
        Raw JSON containing all custom profile attributes. Likely only useful on groups of type
        """
        return pulumi.get(self, "custom_profile_attributes")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Group ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Group type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLogStreamSettingsResult(dict):
    def __init__(__self__, *,
                 account_id: builtins.str,
                 edition: builtins.str,
                 event_source_name: builtins.str,
                 host: builtins.str,
                 region: builtins.str,
                 token: builtins.str):
        """
        :param builtins.str account_id: AWS account ID. Required only for 'aws_eventbridge' type
        :param builtins.str edition: Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        :param builtins.str event_source_name: An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        :param builtins.str host: The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        :param builtins.str region: The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        :param builtins.str token: The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "event_source_name", event_source_name)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        AWS account ID. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def edition(self) -> builtins.str:
        """
        Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws*govcloud', 'gcp'. Required only for 'splunk*cloud_logstreaming' type
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> builtins.str:
        """
        An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "event_source_name")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def token(self) -> builtins.str:
        """
        The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk*cloud*logstreaming' type
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class GetOrgMetadataDomainsResult(dict):
    def __init__(__self__, *,
                 alternate: builtins.str,
                 organization: builtins.str):
        """
        :param builtins.str alternate: Custom Domain Org URI
        :param builtins.str organization: Standard Org URI
        """
        pulumi.set(__self__, "alternate", alternate)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def alternate(self) -> builtins.str:
        """
        Custom Domain Org URI
        """
        return pulumi.get(self, "alternate")

    @property
    @pulumi.getter
    def organization(self) -> builtins.str:
        """
        Standard Org URI
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetOrgMetadataSettingsResult(dict):
    def __init__(__self__, *,
                 analytics_collection_enabled: builtins.bool,
                 bug_reporting_enabled: builtins.bool,
                 om_enabled: builtins.bool):
        """
        :param builtins.bool om_enabled: Whether the legacy Okta Mobile application is enabled for the org
        """
        pulumi.set(__self__, "analytics_collection_enabled", analytics_collection_enabled)
        pulumi.set(__self__, "bug_reporting_enabled", bug_reporting_enabled)
        pulumi.set(__self__, "om_enabled", om_enabled)

    @property
    @pulumi.getter(name="analyticsCollectionEnabled")
    def analytics_collection_enabled(self) -> builtins.bool:
        return pulumi.get(self, "analytics_collection_enabled")

    @property
    @pulumi.getter(name="bugReportingEnabled")
    def bug_reporting_enabled(self) -> builtins.bool:
        return pulumi.get(self, "bug_reporting_enabled")

    @property
    @pulumi.getter(name="omEnabled")
    def om_enabled(self) -> builtins.bool:
        """
        Whether the legacy Okta Mobile application is enabled for the org
        """
        return pulumi.get(self, "om_enabled")


@pulumi.output_type
class GetTemplatesEmailTemplateResult(dict):
    def __init__(__self__, *,
                 links: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str links: Link relations for this object - JSON HAL - Discoverable resources related to the email template
        :param builtins.str name: The name of the email template
        """
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def links(self) -> builtins.str:
        """
        Link relations for this object - JSON HAL - Discoverable resources related to the email template
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the email template
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetThemesThemeResult(dict):
    def __init__(__self__, *,
                 background_image_url: builtins.str,
                 email_template_touch_point_variant: builtins.str,
                 end_user_dashboard_touch_point_variant: builtins.str,
                 error_page_touch_point_variant: builtins.str,
                 favicon_url: builtins.str,
                 id: builtins.str,
                 links: builtins.str,
                 logo_url: builtins.str,
                 primary_color_contrast_hex: builtins.str,
                 primary_color_hex: builtins.str,
                 secondary_color_contrast_hex: builtins.str,
                 secondary_color_hex: builtins.str,
                 sign_in_page_touch_point_variant: builtins.str):
        """
        :param builtins.str background_image_url: Background image URL
        :param builtins.str email_template_touch_point_variant: Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
        :param builtins.str end_user_dashboard_touch_point_variant: Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        :param builtins.str error_page_touch_point_variant: Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param builtins.str favicon_url: Favicon URL
        :param builtins.str id: The ID of the theme
        :param builtins.str links: Link relations for this object - JSON HAL - Discoverable resources related to the email template
        :param builtins.str logo_url: Logo URL
        :param builtins.str primary_color_contrast_hex: Primary color contrast hex code
        :param builtins.str primary_color_hex: Primary color hex code
        :param builtins.str secondary_color_contrast_hex: Secondary color contrast hex code
        :param builtins.str secondary_color_hex: Secondary color hex code
        :param builtins.str sign_in_page_touch_point_variant: Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        pulumi.set(__self__, "background_image_url", background_image_url)
        pulumi.set(__self__, "email_template_touch_point_variant", email_template_touch_point_variant)
        pulumi.set(__self__, "end_user_dashboard_touch_point_variant", end_user_dashboard_touch_point_variant)
        pulumi.set(__self__, "error_page_touch_point_variant", error_page_touch_point_variant)
        pulumi.set(__self__, "favicon_url", favicon_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "logo_url", logo_url)
        pulumi.set(__self__, "primary_color_contrast_hex", primary_color_contrast_hex)
        pulumi.set(__self__, "primary_color_hex", primary_color_hex)
        pulumi.set(__self__, "secondary_color_contrast_hex", secondary_color_contrast_hex)
        pulumi.set(__self__, "secondary_color_hex", secondary_color_hex)
        pulumi.set(__self__, "sign_in_page_touch_point_variant", sign_in_page_touch_point_variant)

    @property
    @pulumi.getter(name="backgroundImageUrl")
    def background_image_url(self) -> builtins.str:
        """
        Background image URL
        """
        return pulumi.get(self, "background_image_url")

    @property
    @pulumi.getter(name="emailTemplateTouchPointVariant")
    def email_template_touch_point_variant(self) -> builtins.str:
        """
        Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
        """
        return pulumi.get(self, "email_template_touch_point_variant")

    @property
    @pulumi.getter(name="endUserDashboardTouchPointVariant")
    def end_user_dashboard_touch_point_variant(self) -> builtins.str:
        """
        Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        """
        return pulumi.get(self, "end_user_dashboard_touch_point_variant")

    @property
    @pulumi.getter(name="errorPageTouchPointVariant")
    def error_page_touch_point_variant(self) -> builtins.str:
        """
        Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "error_page_touch_point_variant")

    @property
    @pulumi.getter(name="faviconUrl")
    def favicon_url(self) -> builtins.str:
        """
        Favicon URL
        """
        return pulumi.get(self, "favicon_url")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the theme
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> builtins.str:
        """
        Link relations for this object - JSON HAL - Discoverable resources related to the email template
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> builtins.str:
        """
        Logo URL
        """
        return pulumi.get(self, "logo_url")

    @property
    @pulumi.getter(name="primaryColorContrastHex")
    def primary_color_contrast_hex(self) -> builtins.str:
        """
        Primary color contrast hex code
        """
        return pulumi.get(self, "primary_color_contrast_hex")

    @property
    @pulumi.getter(name="primaryColorHex")
    def primary_color_hex(self) -> builtins.str:
        """
        Primary color hex code
        """
        return pulumi.get(self, "primary_color_hex")

    @property
    @pulumi.getter(name="secondaryColorContrastHex")
    def secondary_color_contrast_hex(self) -> builtins.str:
        """
        Secondary color contrast hex code
        """
        return pulumi.get(self, "secondary_color_contrast_hex")

    @property
    @pulumi.getter(name="secondaryColorHex")
    def secondary_color_hex(self) -> builtins.str:
        """
        Secondary color hex code
        """
        return pulumi.get(self, "secondary_color_hex")

    @property
    @pulumi.getter(name="signInPageTouchPointVariant")
    def sign_in_page_touch_point_variant(self) -> builtins.str:
        """
        Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "sign_in_page_touch_point_variant")


@pulumi.output_type
class GetTrustedOriginsTrustedOriginResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 origin: builtins.str,
                 scopes: Sequence[builtins.str]):
        """
        :param builtins.bool active: Whether the Trusted Origin is active or not - can only be issued post-creation
        :param builtins.str id: Unique identifier
        :param builtins.str name: Unique name for this trusted origin
        :param builtins.str origin: Unique origin URL for this trusted origin
        :param Sequence[builtins.str] scopes: Scopes of the Trusted Origin - can either be CORS or REDIRECT only
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        """
        Whether the Trusted Origin is active or not - can only be issued post-creation
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Unique name for this trusted origin
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> builtins.str:
        """
        Unique origin URL for this trusted origin
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[builtins.str]:
        """
        Scopes of the Trusted Origin - can either be CORS or REDIRECT only
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetUserSecurityQuestionsQuestionResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 text: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def text(self) -> builtins.str:
        return pulumi.get(self, "text")


