# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SamlArgs', 'Saml']

@pulumi.input_type
class SamlArgs:
    def __init__(__self__, *,
                 issuer: pulumi.Input[str],
                 kid: pulumi.Input[str],
                 sso_url: pulumi.Input[str],
                 account_link_action: Optional[pulumi.Input[str]] = None,
                 account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 acs_type: Optional[pulumi.Input[str]] = None,
                 deprovisioned_action: Optional[pulumi.Input[str]] = None,
                 groups_action: Optional[pulumi.Input[str]] = None,
                 groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer_mode: Optional[pulumi.Input[str]] = None,
                 max_clock_skew: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 profile_master: Optional[pulumi.Input[bool]] = None,
                 provisioning_action: Optional[pulumi.Input[str]] = None,
                 request_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signature_scope: Optional[pulumi.Input[str]] = None,
                 response_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 response_signature_scope: Optional[pulumi.Input[str]] = None,
                 sso_binding: Optional[pulumi.Input[str]] = None,
                 sso_destination: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subject_filter: Optional[pulumi.Input[str]] = None,
                 subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_match_attribute: Optional[pulumi.Input[str]] = None,
                 subject_match_type: Optional[pulumi.Input[str]] = None,
                 suspended_action: Optional[pulumi.Input[str]] = None,
                 username_template: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Saml resource.
        :param pulumi.Input[str] issuer_mode: Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        :param pulumi.Input[str] name: Name of the IdP
        :param pulumi.Input[str] request_signature_algorithm: The XML digital Signature Algorithm used when signing an \\n\\n message
        :param pulumi.Input[str] request_signature_scope: Specifies whether to digitally sign \\n\\n messages to the IdP
        :param pulumi.Input[str] response_signature_algorithm: The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        :param pulumi.Input[str] response_signature_scope: Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        SamlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            issuer=issuer,
            kid=kid,
            sso_url=sso_url,
            account_link_action=account_link_action,
            account_link_group_includes=account_link_group_includes,
            acs_type=acs_type,
            deprovisioned_action=deprovisioned_action,
            groups_action=groups_action,
            groups_assignments=groups_assignments,
            groups_attribute=groups_attribute,
            groups_filters=groups_filters,
            issuer_mode=issuer_mode,
            max_clock_skew=max_clock_skew,
            name=name,
            name_format=name_format,
            profile_master=profile_master,
            provisioning_action=provisioning_action,
            request_signature_algorithm=request_signature_algorithm,
            request_signature_scope=request_signature_scope,
            response_signature_algorithm=response_signature_algorithm,
            response_signature_scope=response_signature_scope,
            sso_binding=sso_binding,
            sso_destination=sso_destination,
            status=status,
            subject_filter=subject_filter,
            subject_formats=subject_formats,
            subject_match_attribute=subject_match_attribute,
            subject_match_type=subject_match_type,
            suspended_action=suspended_action,
            username_template=username_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             issuer: pulumi.Input[str],
             kid: pulumi.Input[str],
             sso_url: pulumi.Input[str],
             account_link_action: Optional[pulumi.Input[str]] = None,
             account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             acs_type: Optional[pulumi.Input[str]] = None,
             deprovisioned_action: Optional[pulumi.Input[str]] = None,
             groups_action: Optional[pulumi.Input[str]] = None,
             groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             groups_attribute: Optional[pulumi.Input[str]] = None,
             groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             issuer_mode: Optional[pulumi.Input[str]] = None,
             max_clock_skew: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             name_format: Optional[pulumi.Input[str]] = None,
             profile_master: Optional[pulumi.Input[bool]] = None,
             provisioning_action: Optional[pulumi.Input[str]] = None,
             request_signature_algorithm: Optional[pulumi.Input[str]] = None,
             request_signature_scope: Optional[pulumi.Input[str]] = None,
             response_signature_algorithm: Optional[pulumi.Input[str]] = None,
             response_signature_scope: Optional[pulumi.Input[str]] = None,
             sso_binding: Optional[pulumi.Input[str]] = None,
             sso_destination: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             subject_filter: Optional[pulumi.Input[str]] = None,
             subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subject_match_attribute: Optional[pulumi.Input[str]] = None,
             subject_match_type: Optional[pulumi.Input[str]] = None,
             suspended_action: Optional[pulumi.Input[str]] = None,
             username_template: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("issuer", issuer)
        _setter("kid", kid)
        _setter("sso_url", sso_url)
        if account_link_action is not None:
            _setter("account_link_action", account_link_action)
        if account_link_group_includes is not None:
            _setter("account_link_group_includes", account_link_group_includes)
        if acs_type is not None:
            _setter("acs_type", acs_type)
        if deprovisioned_action is not None:
            _setter("deprovisioned_action", deprovisioned_action)
        if groups_action is not None:
            _setter("groups_action", groups_action)
        if groups_assignments is not None:
            _setter("groups_assignments", groups_assignments)
        if groups_attribute is not None:
            _setter("groups_attribute", groups_attribute)
        if groups_filters is not None:
            _setter("groups_filters", groups_filters)
        if issuer_mode is not None:
            _setter("issuer_mode", issuer_mode)
        if max_clock_skew is not None:
            _setter("max_clock_skew", max_clock_skew)
        if name is not None:
            _setter("name", name)
        if name_format is not None:
            _setter("name_format", name_format)
        if profile_master is not None:
            _setter("profile_master", profile_master)
        if provisioning_action is not None:
            _setter("provisioning_action", provisioning_action)
        if request_signature_algorithm is not None:
            _setter("request_signature_algorithm", request_signature_algorithm)
        if request_signature_scope is not None:
            _setter("request_signature_scope", request_signature_scope)
        if response_signature_algorithm is not None:
            _setter("response_signature_algorithm", response_signature_algorithm)
        if response_signature_scope is not None:
            _setter("response_signature_scope", response_signature_scope)
        if sso_binding is not None:
            _setter("sso_binding", sso_binding)
        if sso_destination is not None:
            _setter("sso_destination", sso_destination)
        if status is not None:
            _setter("status", status)
        if subject_filter is not None:
            _setter("subject_filter", subject_filter)
        if subject_formats is not None:
            _setter("subject_formats", subject_formats)
        if subject_match_attribute is not None:
            _setter("subject_match_attribute", subject_match_attribute)
        if subject_match_type is not None:
            _setter("subject_match_type", subject_match_type)
        if suspended_action is not None:
            _setter("suspended_action", suspended_action)
        if username_template is not None:
            _setter("username_template", username_template)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def kid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: pulumi.Input[str]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter(name="ssoUrl")
    def sso_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sso_url")

    @sso_url.setter
    def sso_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "sso_url", value)

    @property
    @pulumi.getter(name="accountLinkAction")
    def account_link_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_link_action")

    @account_link_action.setter
    def account_link_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_link_action", value)

    @property
    @pulumi.getter(name="accountLinkGroupIncludes")
    def account_link_group_includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_link_group_includes")

    @account_link_group_includes.setter
    def account_link_group_includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_link_group_includes", value)

    @property
    @pulumi.getter(name="acsType")
    def acs_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acs_type")

    @acs_type.setter
    def acs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acs_type", value)

    @property
    @pulumi.getter(name="deprovisionedAction")
    def deprovisioned_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deprovisioned_action")

    @deprovisioned_action.setter
    def deprovisioned_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deprovisioned_action", value)

    @property
    @pulumi.getter(name="groupsAction")
    def groups_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups_action")

    @groups_action.setter
    def groups_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_action", value)

    @property
    @pulumi.getter(name="groupsAssignments")
    def groups_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups_assignments")

    @groups_assignments.setter
    def groups_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_assignments", value)

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_attribute", value)

    @property
    @pulumi.getter(name="groupsFilters")
    def groups_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups_filters")

    @groups_filters.setter
    def groups_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_filters", value)

    @property
    @pulumi.getter(name="issuerMode")
    def issuer_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        """
        return pulumi.get(self, "issuer_mode")

    @issuer_mode.setter
    def issuer_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_mode", value)

    @property
    @pulumi.getter(name="maxClockSkew")
    def max_clock_skew(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clock_skew")

    @max_clock_skew.setter
    def max_clock_skew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clock_skew", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IdP
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_format")

    @name_format.setter
    def name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_format", value)

    @property
    @pulumi.getter(name="profileMaster")
    def profile_master(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "profile_master")

    @profile_master.setter
    def profile_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "profile_master", value)

    @property
    @pulumi.getter(name="provisioningAction")
    def provisioning_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioning_action")

    @provisioning_action.setter
    def provisioning_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_action", value)

    @property
    @pulumi.getter(name="requestSignatureAlgorithm")
    def request_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The XML digital Signature Algorithm used when signing an \\n\\n message
        """
        return pulumi.get(self, "request_signature_algorithm")

    @request_signature_algorithm.setter
    def request_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signature_algorithm", value)

    @property
    @pulumi.getter(name="requestSignatureScope")
    def request_signature_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to digitally sign \\n\\n messages to the IdP
        """
        return pulumi.get(self, "request_signature_scope")

    @request_signature_scope.setter
    def request_signature_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signature_scope", value)

    @property
    @pulumi.getter(name="responseSignatureAlgorithm")
    def response_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        """
        return pulumi.get(self, "response_signature_algorithm")

    @response_signature_algorithm.setter
    def response_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_signature_algorithm", value)

    @property
    @pulumi.getter(name="responseSignatureScope")
    def response_signature_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        return pulumi.get(self, "response_signature_scope")

    @response_signature_scope.setter
    def response_signature_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_signature_scope", value)

    @property
    @pulumi.getter(name="ssoBinding")
    def sso_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_binding")

    @sso_binding.setter
    def sso_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_binding", value)

    @property
    @pulumi.getter(name="ssoDestination")
    def sso_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_destination")

    @sso_destination.setter
    def sso_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_destination", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subjectFilter")
    def subject_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_filter")

    @subject_filter.setter
    def subject_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_filter", value)

    @property
    @pulumi.getter(name="subjectFormats")
    def subject_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_formats")

    @subject_formats.setter
    def subject_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_formats", value)

    @property
    @pulumi.getter(name="subjectMatchAttribute")
    def subject_match_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_match_attribute")

    @subject_match_attribute.setter
    def subject_match_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match_attribute", value)

    @property
    @pulumi.getter(name="subjectMatchType")
    def subject_match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_match_type")

    @subject_match_type.setter
    def subject_match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match_type", value)

    @property
    @pulumi.getter(name="suspendedAction")
    def suspended_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suspended_action")

    @suspended_action.setter
    def suspended_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_action", value)

    @property
    @pulumi.getter(name="usernameTemplate")
    def username_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_template")

    @username_template.setter
    def username_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_template", value)


@pulumi.input_type
class _SamlState:
    def __init__(__self__, *,
                 account_link_action: Optional[pulumi.Input[str]] = None,
                 account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 acs_binding: Optional[pulumi.Input[str]] = None,
                 acs_type: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 deprovisioned_action: Optional[pulumi.Input[str]] = None,
                 groups_action: Optional[pulumi.Input[str]] = None,
                 groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 issuer_mode: Optional[pulumi.Input[str]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 max_clock_skew: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 profile_master: Optional[pulumi.Input[bool]] = None,
                 provisioning_action: Optional[pulumi.Input[str]] = None,
                 request_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signature_scope: Optional[pulumi.Input[str]] = None,
                 response_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 response_signature_scope: Optional[pulumi.Input[str]] = None,
                 sso_binding: Optional[pulumi.Input[str]] = None,
                 sso_destination: Optional[pulumi.Input[str]] = None,
                 sso_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subject_filter: Optional[pulumi.Input[str]] = None,
                 subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_match_attribute: Optional[pulumi.Input[str]] = None,
                 subject_match_type: Optional[pulumi.Input[str]] = None,
                 suspended_action: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_type_id: Optional[pulumi.Input[str]] = None,
                 username_template: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Saml resources.
        :param pulumi.Input[str] issuer_mode: Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        :param pulumi.Input[str] name: Name of the IdP
        :param pulumi.Input[str] request_signature_algorithm: The XML digital Signature Algorithm used when signing an \\n\\n message
        :param pulumi.Input[str] request_signature_scope: Specifies whether to digitally sign \\n\\n messages to the IdP
        :param pulumi.Input[str] response_signature_algorithm: The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        :param pulumi.Input[str] response_signature_scope: Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        _SamlState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_link_action=account_link_action,
            account_link_group_includes=account_link_group_includes,
            acs_binding=acs_binding,
            acs_type=acs_type,
            audience=audience,
            deprovisioned_action=deprovisioned_action,
            groups_action=groups_action,
            groups_assignments=groups_assignments,
            groups_attribute=groups_attribute,
            groups_filters=groups_filters,
            issuer=issuer,
            issuer_mode=issuer_mode,
            kid=kid,
            max_clock_skew=max_clock_skew,
            name=name,
            name_format=name_format,
            profile_master=profile_master,
            provisioning_action=provisioning_action,
            request_signature_algorithm=request_signature_algorithm,
            request_signature_scope=request_signature_scope,
            response_signature_algorithm=response_signature_algorithm,
            response_signature_scope=response_signature_scope,
            sso_binding=sso_binding,
            sso_destination=sso_destination,
            sso_url=sso_url,
            status=status,
            subject_filter=subject_filter,
            subject_formats=subject_formats,
            subject_match_attribute=subject_match_attribute,
            subject_match_type=subject_match_type,
            suspended_action=suspended_action,
            type=type,
            user_type_id=user_type_id,
            username_template=username_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_link_action: Optional[pulumi.Input[str]] = None,
             account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             acs_binding: Optional[pulumi.Input[str]] = None,
             acs_type: Optional[pulumi.Input[str]] = None,
             audience: Optional[pulumi.Input[str]] = None,
             deprovisioned_action: Optional[pulumi.Input[str]] = None,
             groups_action: Optional[pulumi.Input[str]] = None,
             groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             groups_attribute: Optional[pulumi.Input[str]] = None,
             groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             issuer: Optional[pulumi.Input[str]] = None,
             issuer_mode: Optional[pulumi.Input[str]] = None,
             kid: Optional[pulumi.Input[str]] = None,
             max_clock_skew: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             name_format: Optional[pulumi.Input[str]] = None,
             profile_master: Optional[pulumi.Input[bool]] = None,
             provisioning_action: Optional[pulumi.Input[str]] = None,
             request_signature_algorithm: Optional[pulumi.Input[str]] = None,
             request_signature_scope: Optional[pulumi.Input[str]] = None,
             response_signature_algorithm: Optional[pulumi.Input[str]] = None,
             response_signature_scope: Optional[pulumi.Input[str]] = None,
             sso_binding: Optional[pulumi.Input[str]] = None,
             sso_destination: Optional[pulumi.Input[str]] = None,
             sso_url: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             subject_filter: Optional[pulumi.Input[str]] = None,
             subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subject_match_attribute: Optional[pulumi.Input[str]] = None,
             subject_match_type: Optional[pulumi.Input[str]] = None,
             suspended_action: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             user_type_id: Optional[pulumi.Input[str]] = None,
             username_template: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if account_link_action is not None:
            _setter("account_link_action", account_link_action)
        if account_link_group_includes is not None:
            _setter("account_link_group_includes", account_link_group_includes)
        if acs_binding is not None:
            _setter("acs_binding", acs_binding)
        if acs_type is not None:
            _setter("acs_type", acs_type)
        if audience is not None:
            _setter("audience", audience)
        if deprovisioned_action is not None:
            _setter("deprovisioned_action", deprovisioned_action)
        if groups_action is not None:
            _setter("groups_action", groups_action)
        if groups_assignments is not None:
            _setter("groups_assignments", groups_assignments)
        if groups_attribute is not None:
            _setter("groups_attribute", groups_attribute)
        if groups_filters is not None:
            _setter("groups_filters", groups_filters)
        if issuer is not None:
            _setter("issuer", issuer)
        if issuer_mode is not None:
            _setter("issuer_mode", issuer_mode)
        if kid is not None:
            _setter("kid", kid)
        if max_clock_skew is not None:
            _setter("max_clock_skew", max_clock_skew)
        if name is not None:
            _setter("name", name)
        if name_format is not None:
            _setter("name_format", name_format)
        if profile_master is not None:
            _setter("profile_master", profile_master)
        if provisioning_action is not None:
            _setter("provisioning_action", provisioning_action)
        if request_signature_algorithm is not None:
            _setter("request_signature_algorithm", request_signature_algorithm)
        if request_signature_scope is not None:
            _setter("request_signature_scope", request_signature_scope)
        if response_signature_algorithm is not None:
            _setter("response_signature_algorithm", response_signature_algorithm)
        if response_signature_scope is not None:
            _setter("response_signature_scope", response_signature_scope)
        if sso_binding is not None:
            _setter("sso_binding", sso_binding)
        if sso_destination is not None:
            _setter("sso_destination", sso_destination)
        if sso_url is not None:
            _setter("sso_url", sso_url)
        if status is not None:
            _setter("status", status)
        if subject_filter is not None:
            _setter("subject_filter", subject_filter)
        if subject_formats is not None:
            _setter("subject_formats", subject_formats)
        if subject_match_attribute is not None:
            _setter("subject_match_attribute", subject_match_attribute)
        if subject_match_type is not None:
            _setter("subject_match_type", subject_match_type)
        if suspended_action is not None:
            _setter("suspended_action", suspended_action)
        if type is not None:
            _setter("type", type)
        if user_type_id is not None:
            _setter("user_type_id", user_type_id)
        if username_template is not None:
            _setter("username_template", username_template)

    @property
    @pulumi.getter(name="accountLinkAction")
    def account_link_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_link_action")

    @account_link_action.setter
    def account_link_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_link_action", value)

    @property
    @pulumi.getter(name="accountLinkGroupIncludes")
    def account_link_group_includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_link_group_includes")

    @account_link_group_includes.setter
    def account_link_group_includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_link_group_includes", value)

    @property
    @pulumi.getter(name="acsBinding")
    def acs_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acs_binding")

    @acs_binding.setter
    def acs_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acs_binding", value)

    @property
    @pulumi.getter(name="acsType")
    def acs_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acs_type")

    @acs_type.setter
    def acs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acs_type", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="deprovisionedAction")
    def deprovisioned_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deprovisioned_action")

    @deprovisioned_action.setter
    def deprovisioned_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deprovisioned_action", value)

    @property
    @pulumi.getter(name="groupsAction")
    def groups_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups_action")

    @groups_action.setter
    def groups_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_action", value)

    @property
    @pulumi.getter(name="groupsAssignments")
    def groups_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups_assignments")

    @groups_assignments.setter
    def groups_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_assignments", value)

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_attribute", value)

    @property
    @pulumi.getter(name="groupsFilters")
    def groups_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups_filters")

    @groups_filters.setter
    def groups_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_filters", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="issuerMode")
    def issuer_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        """
        return pulumi.get(self, "issuer_mode")

    @issuer_mode.setter
    def issuer_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_mode", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter(name="maxClockSkew")
    def max_clock_skew(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clock_skew")

    @max_clock_skew.setter
    def max_clock_skew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clock_skew", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IdP
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_format")

    @name_format.setter
    def name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_format", value)

    @property
    @pulumi.getter(name="profileMaster")
    def profile_master(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "profile_master")

    @profile_master.setter
    def profile_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "profile_master", value)

    @property
    @pulumi.getter(name="provisioningAction")
    def provisioning_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioning_action")

    @provisioning_action.setter
    def provisioning_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_action", value)

    @property
    @pulumi.getter(name="requestSignatureAlgorithm")
    def request_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The XML digital Signature Algorithm used when signing an \\n\\n message
        """
        return pulumi.get(self, "request_signature_algorithm")

    @request_signature_algorithm.setter
    def request_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signature_algorithm", value)

    @property
    @pulumi.getter(name="requestSignatureScope")
    def request_signature_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to digitally sign \\n\\n messages to the IdP
        """
        return pulumi.get(self, "request_signature_scope")

    @request_signature_scope.setter
    def request_signature_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signature_scope", value)

    @property
    @pulumi.getter(name="responseSignatureAlgorithm")
    def response_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        """
        return pulumi.get(self, "response_signature_algorithm")

    @response_signature_algorithm.setter
    def response_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_signature_algorithm", value)

    @property
    @pulumi.getter(name="responseSignatureScope")
    def response_signature_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        return pulumi.get(self, "response_signature_scope")

    @response_signature_scope.setter
    def response_signature_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_signature_scope", value)

    @property
    @pulumi.getter(name="ssoBinding")
    def sso_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_binding")

    @sso_binding.setter
    def sso_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_binding", value)

    @property
    @pulumi.getter(name="ssoDestination")
    def sso_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_destination")

    @sso_destination.setter
    def sso_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_destination", value)

    @property
    @pulumi.getter(name="ssoUrl")
    def sso_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_url")

    @sso_url.setter
    def sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subjectFilter")
    def subject_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_filter")

    @subject_filter.setter
    def subject_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_filter", value)

    @property
    @pulumi.getter(name="subjectFormats")
    def subject_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_formats")

    @subject_formats.setter
    def subject_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_formats", value)

    @property
    @pulumi.getter(name="subjectMatchAttribute")
    def subject_match_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_match_attribute")

    @subject_match_attribute.setter
    def subject_match_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match_attribute", value)

    @property
    @pulumi.getter(name="subjectMatchType")
    def subject_match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_match_type")

    @subject_match_type.setter
    def subject_match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match_type", value)

    @property
    @pulumi.getter(name="suspendedAction")
    def suspended_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suspended_action")

    @suspended_action.setter
    def suspended_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_action", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userTypeId")
    def user_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_type_id")

    @user_type_id.setter
    def user_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type_id", value)

    @property
    @pulumi.getter(name="usernameTemplate")
    def username_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_template")

    @username_template.setter
    def username_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_template", value)


class Saml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_link_action: Optional[pulumi.Input[str]] = None,
                 account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 acs_type: Optional[pulumi.Input[str]] = None,
                 deprovisioned_action: Optional[pulumi.Input[str]] = None,
                 groups_action: Optional[pulumi.Input[str]] = None,
                 groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 issuer_mode: Optional[pulumi.Input[str]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 max_clock_skew: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 profile_master: Optional[pulumi.Input[bool]] = None,
                 provisioning_action: Optional[pulumi.Input[str]] = None,
                 request_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signature_scope: Optional[pulumi.Input[str]] = None,
                 response_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 response_signature_scope: Optional[pulumi.Input[str]] = None,
                 sso_binding: Optional[pulumi.Input[str]] = None,
                 sso_destination: Optional[pulumi.Input[str]] = None,
                 sso_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subject_filter: Optional[pulumi.Input[str]] = None,
                 subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_match_attribute: Optional[pulumi.Input[str]] = None,
                 subject_match_type: Optional[pulumi.Input[str]] = None,
                 suspended_action: Optional[pulumi.Input[str]] = None,
                 username_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Saml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] issuer_mode: Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        :param pulumi.Input[str] name: Name of the IdP
        :param pulumi.Input[str] request_signature_algorithm: The XML digital Signature Algorithm used when signing an \\n\\n message
        :param pulumi.Input[str] request_signature_scope: Specifies whether to digitally sign \\n\\n messages to the IdP
        :param pulumi.Input[str] response_signature_algorithm: The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        :param pulumi.Input[str] response_signature_scope: Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SamlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Saml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SamlArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_link_action: Optional[pulumi.Input[str]] = None,
                 account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 acs_type: Optional[pulumi.Input[str]] = None,
                 deprovisioned_action: Optional[pulumi.Input[str]] = None,
                 groups_action: Optional[pulumi.Input[str]] = None,
                 groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 issuer_mode: Optional[pulumi.Input[str]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 max_clock_skew: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 profile_master: Optional[pulumi.Input[bool]] = None,
                 provisioning_action: Optional[pulumi.Input[str]] = None,
                 request_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signature_scope: Optional[pulumi.Input[str]] = None,
                 response_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 response_signature_scope: Optional[pulumi.Input[str]] = None,
                 sso_binding: Optional[pulumi.Input[str]] = None,
                 sso_destination: Optional[pulumi.Input[str]] = None,
                 sso_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subject_filter: Optional[pulumi.Input[str]] = None,
                 subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_match_attribute: Optional[pulumi.Input[str]] = None,
                 subject_match_type: Optional[pulumi.Input[str]] = None,
                 suspended_action: Optional[pulumi.Input[str]] = None,
                 username_template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SamlArgs.__new__(SamlArgs)

            __props__.__dict__["account_link_action"] = account_link_action
            __props__.__dict__["account_link_group_includes"] = account_link_group_includes
            __props__.__dict__["acs_type"] = acs_type
            __props__.__dict__["deprovisioned_action"] = deprovisioned_action
            __props__.__dict__["groups_action"] = groups_action
            __props__.__dict__["groups_assignments"] = groups_assignments
            __props__.__dict__["groups_attribute"] = groups_attribute
            __props__.__dict__["groups_filters"] = groups_filters
            if issuer is None and not opts.urn:
                raise TypeError("Missing required property 'issuer'")
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["issuer_mode"] = issuer_mode
            if kid is None and not opts.urn:
                raise TypeError("Missing required property 'kid'")
            __props__.__dict__["kid"] = kid
            __props__.__dict__["max_clock_skew"] = max_clock_skew
            __props__.__dict__["name"] = name
            __props__.__dict__["name_format"] = name_format
            __props__.__dict__["profile_master"] = profile_master
            __props__.__dict__["provisioning_action"] = provisioning_action
            __props__.__dict__["request_signature_algorithm"] = request_signature_algorithm
            __props__.__dict__["request_signature_scope"] = request_signature_scope
            __props__.__dict__["response_signature_algorithm"] = response_signature_algorithm
            __props__.__dict__["response_signature_scope"] = response_signature_scope
            __props__.__dict__["sso_binding"] = sso_binding
            __props__.__dict__["sso_destination"] = sso_destination
            if sso_url is None and not opts.urn:
                raise TypeError("Missing required property 'sso_url'")
            __props__.__dict__["sso_url"] = sso_url
            __props__.__dict__["status"] = status
            __props__.__dict__["subject_filter"] = subject_filter
            __props__.__dict__["subject_formats"] = subject_formats
            __props__.__dict__["subject_match_attribute"] = subject_match_attribute
            __props__.__dict__["subject_match_type"] = subject_match_type
            __props__.__dict__["suspended_action"] = suspended_action
            __props__.__dict__["username_template"] = username_template
            __props__.__dict__["acs_binding"] = None
            __props__.__dict__["audience"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["user_type_id"] = None
        super(Saml, __self__).__init__(
            'okta:idp/saml:Saml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_link_action: Optional[pulumi.Input[str]] = None,
            account_link_group_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            acs_binding: Optional[pulumi.Input[str]] = None,
            acs_type: Optional[pulumi.Input[str]] = None,
            audience: Optional[pulumi.Input[str]] = None,
            deprovisioned_action: Optional[pulumi.Input[str]] = None,
            groups_action: Optional[pulumi.Input[str]] = None,
            groups_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            groups_attribute: Optional[pulumi.Input[str]] = None,
            groups_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            issuer_mode: Optional[pulumi.Input[str]] = None,
            kid: Optional[pulumi.Input[str]] = None,
            max_clock_skew: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_format: Optional[pulumi.Input[str]] = None,
            profile_master: Optional[pulumi.Input[bool]] = None,
            provisioning_action: Optional[pulumi.Input[str]] = None,
            request_signature_algorithm: Optional[pulumi.Input[str]] = None,
            request_signature_scope: Optional[pulumi.Input[str]] = None,
            response_signature_algorithm: Optional[pulumi.Input[str]] = None,
            response_signature_scope: Optional[pulumi.Input[str]] = None,
            sso_binding: Optional[pulumi.Input[str]] = None,
            sso_destination: Optional[pulumi.Input[str]] = None,
            sso_url: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subject_filter: Optional[pulumi.Input[str]] = None,
            subject_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            subject_match_attribute: Optional[pulumi.Input[str]] = None,
            subject_match_type: Optional[pulumi.Input[str]] = None,
            suspended_action: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_type_id: Optional[pulumi.Input[str]] = None,
            username_template: Optional[pulumi.Input[str]] = None) -> 'Saml':
        """
        Get an existing Saml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] issuer_mode: Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        :param pulumi.Input[str] name: Name of the IdP
        :param pulumi.Input[str] request_signature_algorithm: The XML digital Signature Algorithm used when signing an \\n\\n message
        :param pulumi.Input[str] request_signature_scope: Specifies whether to digitally sign \\n\\n messages to the IdP
        :param pulumi.Input[str] response_signature_algorithm: The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        :param pulumi.Input[str] response_signature_scope: Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SamlState.__new__(_SamlState)

        __props__.__dict__["account_link_action"] = account_link_action
        __props__.__dict__["account_link_group_includes"] = account_link_group_includes
        __props__.__dict__["acs_binding"] = acs_binding
        __props__.__dict__["acs_type"] = acs_type
        __props__.__dict__["audience"] = audience
        __props__.__dict__["deprovisioned_action"] = deprovisioned_action
        __props__.__dict__["groups_action"] = groups_action
        __props__.__dict__["groups_assignments"] = groups_assignments
        __props__.__dict__["groups_attribute"] = groups_attribute
        __props__.__dict__["groups_filters"] = groups_filters
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["issuer_mode"] = issuer_mode
        __props__.__dict__["kid"] = kid
        __props__.__dict__["max_clock_skew"] = max_clock_skew
        __props__.__dict__["name"] = name
        __props__.__dict__["name_format"] = name_format
        __props__.__dict__["profile_master"] = profile_master
        __props__.__dict__["provisioning_action"] = provisioning_action
        __props__.__dict__["request_signature_algorithm"] = request_signature_algorithm
        __props__.__dict__["request_signature_scope"] = request_signature_scope
        __props__.__dict__["response_signature_algorithm"] = response_signature_algorithm
        __props__.__dict__["response_signature_scope"] = response_signature_scope
        __props__.__dict__["sso_binding"] = sso_binding
        __props__.__dict__["sso_destination"] = sso_destination
        __props__.__dict__["sso_url"] = sso_url
        __props__.__dict__["status"] = status
        __props__.__dict__["subject_filter"] = subject_filter
        __props__.__dict__["subject_formats"] = subject_formats
        __props__.__dict__["subject_match_attribute"] = subject_match_attribute
        __props__.__dict__["subject_match_type"] = subject_match_type
        __props__.__dict__["suspended_action"] = suspended_action
        __props__.__dict__["type"] = type
        __props__.__dict__["user_type_id"] = user_type_id
        __props__.__dict__["username_template"] = username_template
        return Saml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountLinkAction")
    def account_link_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "account_link_action")

    @property
    @pulumi.getter(name="accountLinkGroupIncludes")
    def account_link_group_includes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "account_link_group_includes")

    @property
    @pulumi.getter(name="acsBinding")
    def acs_binding(self) -> pulumi.Output[str]:
        return pulumi.get(self, "acs_binding")

    @property
    @pulumi.getter(name="acsType")
    def acs_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "acs_type")

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Output[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="deprovisionedAction")
    def deprovisioned_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "deprovisioned_action")

    @property
    @pulumi.getter(name="groupsAction")
    def groups_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "groups_action")

    @property
    @pulumi.getter(name="groupsAssignments")
    def groups_assignments(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "groups_assignments")

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "groups_attribute")

    @property
    @pulumi.getter(name="groupsFilters")
    def groups_filters(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "groups_filters")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="issuerMode")
    def issuer_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
        """
        return pulumi.get(self, "issuer_mode")

    @property
    @pulumi.getter
    def kid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter(name="maxClockSkew")
    def max_clock_skew(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_clock_skew")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the IdP
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name_format")

    @property
    @pulumi.getter(name="profileMaster")
    def profile_master(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "profile_master")

    @property
    @pulumi.getter(name="provisioningAction")
    def provisioning_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provisioning_action")

    @property
    @pulumi.getter(name="requestSignatureAlgorithm")
    def request_signature_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        The XML digital Signature Algorithm used when signing an \\n\\n message
        """
        return pulumi.get(self, "request_signature_algorithm")

    @property
    @pulumi.getter(name="requestSignatureScope")
    def request_signature_scope(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether to digitally sign \\n\\n messages to the IdP
        """
        return pulumi.get(self, "request_signature_scope")

    @property
    @pulumi.getter(name="responseSignatureAlgorithm")
    def response_signature_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        The minimum XML digital Signature Algorithm allowed when verifying a \\n\\n message or \\n\\n element
        """
        return pulumi.get(self, "response_signature_algorithm")

    @property
    @pulumi.getter(name="responseSignatureScope")
    def response_signature_scope(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether to verify a \\n\\n message or \\n\\n element XML digital signature
        """
        return pulumi.get(self, "response_signature_scope")

    @property
    @pulumi.getter(name="ssoBinding")
    def sso_binding(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sso_binding")

    @property
    @pulumi.getter(name="ssoDestination")
    def sso_destination(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sso_destination")

    @property
    @pulumi.getter(name="ssoUrl")
    def sso_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_url")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subjectFilter")
    def subject_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "subject_filter")

    @property
    @pulumi.getter(name="subjectFormats")
    def subject_formats(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "subject_formats")

    @property
    @pulumi.getter(name="subjectMatchAttribute")
    def subject_match_attribute(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "subject_match_attribute")

    @property
    @pulumi.getter(name="subjectMatchType")
    def subject_match_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "subject_match_type")

    @property
    @pulumi.getter(name="suspendedAction")
    def suspended_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "suspended_action")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userTypeId")
    def user_type_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_type_id")

    @property
    @pulumi.getter(name="usernameTemplate")
    def username_template(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "username_template")

