# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserBaseSchemaPropertyArgs', 'UserBaseSchemaProperty']

@pulumi.input_type
class UserBaseSchemaPropertyArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 title: pulumi.Input[str],
                 type: pulumi.Input[str],
                 master: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserBaseSchemaProperty resource.
        :param pulumi.Input[str] index: Subschema unique string identifier
        :param pulumi.Input[str] title: Subschema title (display name)
        :param pulumi.Input[str] type: Subschema type: string, boolean, number, integer, array, or object
        :param pulumi.Input[str] master: SubSchema profile manager, if not set it will inherit its setting.
        :param pulumi.Input[str] pattern: The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        :param pulumi.Input[str] permissions: SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        :param pulumi.Input[bool] required: Whether the subschema is required
        :param pulumi.Input[str] user_type: Custom subschema user type
        """
        UserBaseSchemaPropertyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index=index,
            title=title,
            type=type,
            master=master,
            pattern=pattern,
            permissions=permissions,
            required=required,
            user_type=user_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index: pulumi.Input[str],
             title: pulumi.Input[str],
             type: pulumi.Input[str],
             master: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input[str]] = None,
             permissions: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             user_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index", index)
        _setter("title", title)
        _setter("type", type)
        if master is not None:
            _setter("master", master)
        if pattern is not None:
            _setter("pattern", pattern)
        if permissions is not None:
            _setter("permissions", permissions)
        if required is not None:
            _setter("required", required)
        if user_type is not None:
            _setter("user_type", user_type)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        Subschema unique string identifier
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Subschema title (display name)
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Subschema type: string, boolean, number, integer, array, or object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        """
        SubSchema profile manager, if not set it will inherit its setting.
        """
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        """
        SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the subschema is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        Custom subschema user type
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


@pulumi.input_type
class _UserBaseSchemaPropertyState:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[str]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserBaseSchemaProperty resources.
        :param pulumi.Input[str] index: Subschema unique string identifier
        :param pulumi.Input[str] master: SubSchema profile manager, if not set it will inherit its setting.
        :param pulumi.Input[str] pattern: The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        :param pulumi.Input[str] permissions: SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        :param pulumi.Input[bool] required: Whether the subschema is required
        :param pulumi.Input[str] title: Subschema title (display name)
        :param pulumi.Input[str] type: Subschema type: string, boolean, number, integer, array, or object
        :param pulumi.Input[str] user_type: Custom subschema user type
        """
        _UserBaseSchemaPropertyState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index=index,
            master=master,
            pattern=pattern,
            permissions=permissions,
            required=required,
            title=title,
            type=type,
            user_type=user_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index: Optional[pulumi.Input[str]] = None,
             master: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input[str]] = None,
             permissions: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             user_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if index is not None:
            _setter("index", index)
        if master is not None:
            _setter("master", master)
        if pattern is not None:
            _setter("pattern", pattern)
        if permissions is not None:
            _setter("permissions", permissions)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)
        if user_type is not None:
            _setter("user_type", user_type)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[str]]:
        """
        Subschema unique string identifier
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[str]]:
        """
        SubSchema profile manager, if not set it will inherit its setting.
        """
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        """
        SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the subschema is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Subschema title (display name)
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Subschema type: string, boolean, number, integer, array, or object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        Custom subschema user type
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


class UserBaseSchemaProperty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserBaseSchemaProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] index: Subschema unique string identifier
        :param pulumi.Input[str] master: SubSchema profile manager, if not set it will inherit its setting.
        :param pulumi.Input[str] pattern: The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        :param pulumi.Input[str] permissions: SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        :param pulumi.Input[bool] required: Whether the subschema is required
        :param pulumi.Input[str] title: Subschema title (display name)
        :param pulumi.Input[str] type: Subschema type: string, boolean, number, integer, array, or object
        :param pulumi.Input[str] user_type: Custom subschema user type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserBaseSchemaPropertyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserBaseSchemaProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserBaseSchemaPropertyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserBaseSchemaPropertyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            UserBaseSchemaPropertyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 master: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserBaseSchemaPropertyArgs.__new__(UserBaseSchemaPropertyArgs)

            if index is None and not opts.urn:
                raise TypeError("Missing required property 'index'")
            __props__.__dict__["index"] = index
            __props__.__dict__["master"] = master
            __props__.__dict__["pattern"] = pattern
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["required"] = required
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["user_type"] = user_type
        super(UserBaseSchemaProperty, __self__).__init__(
            'okta:index/userBaseSchemaProperty:UserBaseSchemaProperty',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            index: Optional[pulumi.Input[str]] = None,
            master: Optional[pulumi.Input[str]] = None,
            pattern: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[str]] = None,
            required: Optional[pulumi.Input[bool]] = None,
            title: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None) -> 'UserBaseSchemaProperty':
        """
        Get an existing UserBaseSchemaProperty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] index: Subschema unique string identifier
        :param pulumi.Input[str] master: SubSchema profile manager, if not set it will inherit its setting.
        :param pulumi.Input[str] pattern: The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        :param pulumi.Input[str] permissions: SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        :param pulumi.Input[bool] required: Whether the subschema is required
        :param pulumi.Input[str] title: Subschema title (display name)
        :param pulumi.Input[str] type: Subschema type: string, boolean, number, integer, array, or object
        :param pulumi.Input[str] user_type: Custom subschema user type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserBaseSchemaPropertyState.__new__(_UserBaseSchemaPropertyState)

        __props__.__dict__["index"] = index
        __props__.__dict__["master"] = master
        __props__.__dict__["pattern"] = pattern
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["required"] = required
        __props__.__dict__["title"] = title
        __props__.__dict__["type"] = type
        __props__.__dict__["user_type"] = user_type
        return UserBaseSchemaProperty(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[str]:
        """
        Subschema unique string identifier
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def master(self) -> pulumi.Output[Optional[str]]:
        """
        SubSchema profile manager, if not set it will inherit its setting.
        """
        return pulumi.get(self, "master")

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Output[Optional[str]]:
        """
        The validation pattern to use for the subschema. Must be in form of '.+', or '[\\n\\n]+' if present.'
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[str]]:
        """
        SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def required(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the subschema is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Subschema title (display name)
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Subschema type: string, boolean, number, integer, array, or object
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[Optional[str]]:
        """
        Custom subschema user type
        """
        return pulumi.get(self, "user_type")

