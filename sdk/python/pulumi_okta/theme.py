# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ThemeArgs', 'Theme']

@pulumi.input_type
class ThemeArgs:
    def __init__(__self__, *,
                 brand_id: pulumi.Input[str],
                 background_image: Optional[pulumi.Input[str]] = None,
                 email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 primary_color_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_hex: Optional[pulumi.Input[str]] = None,
                 sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 theme_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Theme resource.
        :param pulumi.Input[str] brand_id: Brand ID
        :param pulumi.Input[str] background_image: (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] email_template_touch_point_variant: (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        :param pulumi.Input[str] end_user_dashboard_touch_point_variant: (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        :param pulumi.Input[str] error_page_touch_point_variant: (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] favicon: (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] logo: (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] primary_color_contrast_hex: (Optional) Primary color contrast hex code
        :param pulumi.Input[str] primary_color_hex: (Required) Primary color hex code
        :param pulumi.Input[str] secondary_color_contrast_hex: (Optional) Secondary color contrast hex code
        :param pulumi.Input[str] secondary_color_hex: (Required) Secondary color hex code
        :param pulumi.Input[str] sign_in_page_touch_point_variant: (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] theme_id: Theme ID, used for read (faux-create)
        """
        ThemeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            brand_id=brand_id,
            background_image=background_image,
            email_template_touch_point_variant=email_template_touch_point_variant,
            end_user_dashboard_touch_point_variant=end_user_dashboard_touch_point_variant,
            error_page_touch_point_variant=error_page_touch_point_variant,
            favicon=favicon,
            logo=logo,
            primary_color_contrast_hex=primary_color_contrast_hex,
            primary_color_hex=primary_color_hex,
            secondary_color_contrast_hex=secondary_color_contrast_hex,
            secondary_color_hex=secondary_color_hex,
            sign_in_page_touch_point_variant=sign_in_page_touch_point_variant,
            theme_id=theme_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             brand_id: pulumi.Input[str],
             background_image: Optional[pulumi.Input[str]] = None,
             email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
             end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
             error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
             favicon: Optional[pulumi.Input[str]] = None,
             logo: Optional[pulumi.Input[str]] = None,
             primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
             primary_color_hex: Optional[pulumi.Input[str]] = None,
             secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
             secondary_color_hex: Optional[pulumi.Input[str]] = None,
             sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
             theme_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("brand_id", brand_id)
        if background_image is not None:
            _setter("background_image", background_image)
        if email_template_touch_point_variant is not None:
            _setter("email_template_touch_point_variant", email_template_touch_point_variant)
        if end_user_dashboard_touch_point_variant is not None:
            _setter("end_user_dashboard_touch_point_variant", end_user_dashboard_touch_point_variant)
        if error_page_touch_point_variant is not None:
            _setter("error_page_touch_point_variant", error_page_touch_point_variant)
        if favicon is not None:
            _setter("favicon", favicon)
        if logo is not None:
            _setter("logo", logo)
        if primary_color_contrast_hex is not None:
            _setter("primary_color_contrast_hex", primary_color_contrast_hex)
        if primary_color_hex is not None:
            _setter("primary_color_hex", primary_color_hex)
        if secondary_color_contrast_hex is not None:
            _setter("secondary_color_contrast_hex", secondary_color_contrast_hex)
        if secondary_color_hex is not None:
            _setter("secondary_color_hex", secondary_color_hex)
        if sign_in_page_touch_point_variant is not None:
            _setter("sign_in_page_touch_point_variant", sign_in_page_touch_point_variant)
        if theme_id is not None:
            _setter("theme_id", theme_id)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> pulumi.Input[str]:
        """
        Brand ID
        """
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter(name="backgroundImage")
    def background_image(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "background_image")

    @background_image.setter
    def background_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_image", value)

    @property
    @pulumi.getter(name="emailTemplateTouchPointVariant")
    def email_template_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        """
        return pulumi.get(self, "email_template_touch_point_variant")

    @email_template_touch_point_variant.setter
    def email_template_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_template_touch_point_variant", value)

    @property
    @pulumi.getter(name="endUserDashboardTouchPointVariant")
    def end_user_dashboard_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        """
        return pulumi.get(self, "end_user_dashboard_touch_point_variant")

    @end_user_dashboard_touch_point_variant.setter
    def end_user_dashboard_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_user_dashboard_touch_point_variant", value)

    @property
    @pulumi.getter(name="errorPageTouchPointVariant")
    def error_page_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "error_page_touch_point_variant")

    @error_page_touch_point_variant.setter
    def error_page_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_page_touch_point_variant", value)

    @property
    @pulumi.getter
    def favicon(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "favicon")

    @favicon.setter
    def favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favicon", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter(name="primaryColorContrastHex")
    def primary_color_contrast_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Primary color contrast hex code
        """
        return pulumi.get(self, "primary_color_contrast_hex")

    @primary_color_contrast_hex.setter
    def primary_color_contrast_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color_contrast_hex", value)

    @property
    @pulumi.getter(name="primaryColorHex")
    def primary_color_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Primary color hex code
        """
        return pulumi.get(self, "primary_color_hex")

    @primary_color_hex.setter
    def primary_color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color_hex", value)

    @property
    @pulumi.getter(name="secondaryColorContrastHex")
    def secondary_color_contrast_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Secondary color contrast hex code
        """
        return pulumi.get(self, "secondary_color_contrast_hex")

    @secondary_color_contrast_hex.setter
    def secondary_color_contrast_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_color_contrast_hex", value)

    @property
    @pulumi.getter(name="secondaryColorHex")
    def secondary_color_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Secondary color hex code
        """
        return pulumi.get(self, "secondary_color_hex")

    @secondary_color_hex.setter
    def secondary_color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_color_hex", value)

    @property
    @pulumi.getter(name="signInPageTouchPointVariant")
    def sign_in_page_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "sign_in_page_touch_point_variant")

    @sign_in_page_touch_point_variant.setter
    def sign_in_page_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_page_touch_point_variant", value)

    @property
    @pulumi.getter(name="themeId")
    def theme_id(self) -> Optional[pulumi.Input[str]]:
        """
        Theme ID, used for read (faux-create)
        """
        return pulumi.get(self, "theme_id")

    @theme_id.setter
    def theme_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme_id", value)


@pulumi.input_type
class _ThemeState:
    def __init__(__self__, *,
                 background_image: Optional[pulumi.Input[str]] = None,
                 background_image_url: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 favicon_url: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 logo_url: Optional[pulumi.Input[str]] = None,
                 primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 primary_color_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_hex: Optional[pulumi.Input[str]] = None,
                 sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 theme_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Theme resources.
        :param pulumi.Input[str] background_image: (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] background_image_url: (Read-Only) Background image URL
        :param pulumi.Input[str] brand_id: Brand ID
        :param pulumi.Input[str] email_template_touch_point_variant: (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        :param pulumi.Input[str] end_user_dashboard_touch_point_variant: (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        :param pulumi.Input[str] error_page_touch_point_variant: (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] favicon: (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] favicon_url: (Read-Only) Favicon URL
        :param pulumi.Input[str] links: Link relations for this object - JSON HAL - (Read-Only) Discoverable resources related to the brand
        :param pulumi.Input[str] logo: (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] logo_url: (Read-Only) Logo URL
        :param pulumi.Input[str] primary_color_contrast_hex: (Optional) Primary color contrast hex code
        :param pulumi.Input[str] primary_color_hex: (Required) Primary color hex code
        :param pulumi.Input[str] secondary_color_contrast_hex: (Optional) Secondary color contrast hex code
        :param pulumi.Input[str] secondary_color_hex: (Required) Secondary color hex code
        :param pulumi.Input[str] sign_in_page_touch_point_variant: (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] theme_id: Theme ID, used for read (faux-create)
        """
        _ThemeState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_image=background_image,
            background_image_url=background_image_url,
            brand_id=brand_id,
            email_template_touch_point_variant=email_template_touch_point_variant,
            end_user_dashboard_touch_point_variant=end_user_dashboard_touch_point_variant,
            error_page_touch_point_variant=error_page_touch_point_variant,
            favicon=favicon,
            favicon_url=favicon_url,
            links=links,
            logo=logo,
            logo_url=logo_url,
            primary_color_contrast_hex=primary_color_contrast_hex,
            primary_color_hex=primary_color_hex,
            secondary_color_contrast_hex=secondary_color_contrast_hex,
            secondary_color_hex=secondary_color_hex,
            sign_in_page_touch_point_variant=sign_in_page_touch_point_variant,
            theme_id=theme_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_image: Optional[pulumi.Input[str]] = None,
             background_image_url: Optional[pulumi.Input[str]] = None,
             brand_id: Optional[pulumi.Input[str]] = None,
             email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
             end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
             error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
             favicon: Optional[pulumi.Input[str]] = None,
             favicon_url: Optional[pulumi.Input[str]] = None,
             links: Optional[pulumi.Input[str]] = None,
             logo: Optional[pulumi.Input[str]] = None,
             logo_url: Optional[pulumi.Input[str]] = None,
             primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
             primary_color_hex: Optional[pulumi.Input[str]] = None,
             secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
             secondary_color_hex: Optional[pulumi.Input[str]] = None,
             sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
             theme_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_image is not None:
            _setter("background_image", background_image)
        if background_image_url is not None:
            _setter("background_image_url", background_image_url)
        if brand_id is not None:
            _setter("brand_id", brand_id)
        if email_template_touch_point_variant is not None:
            _setter("email_template_touch_point_variant", email_template_touch_point_variant)
        if end_user_dashboard_touch_point_variant is not None:
            _setter("end_user_dashboard_touch_point_variant", end_user_dashboard_touch_point_variant)
        if error_page_touch_point_variant is not None:
            _setter("error_page_touch_point_variant", error_page_touch_point_variant)
        if favicon is not None:
            _setter("favicon", favicon)
        if favicon_url is not None:
            _setter("favicon_url", favicon_url)
        if links is not None:
            _setter("links", links)
        if logo is not None:
            _setter("logo", logo)
        if logo_url is not None:
            _setter("logo_url", logo_url)
        if primary_color_contrast_hex is not None:
            _setter("primary_color_contrast_hex", primary_color_contrast_hex)
        if primary_color_hex is not None:
            _setter("primary_color_hex", primary_color_hex)
        if secondary_color_contrast_hex is not None:
            _setter("secondary_color_contrast_hex", secondary_color_contrast_hex)
        if secondary_color_hex is not None:
            _setter("secondary_color_hex", secondary_color_hex)
        if sign_in_page_touch_point_variant is not None:
            _setter("sign_in_page_touch_point_variant", sign_in_page_touch_point_variant)
        if theme_id is not None:
            _setter("theme_id", theme_id)

    @property
    @pulumi.getter(name="backgroundImage")
    def background_image(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "background_image")

    @background_image.setter
    def background_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_image", value)

    @property
    @pulumi.getter(name="backgroundImageUrl")
    def background_image_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Read-Only) Background image URL
        """
        return pulumi.get(self, "background_image_url")

    @background_image_url.setter
    def background_image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_image_url", value)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> Optional[pulumi.Input[str]]:
        """
        Brand ID
        """
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter(name="emailTemplateTouchPointVariant")
    def email_template_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        """
        return pulumi.get(self, "email_template_touch_point_variant")

    @email_template_touch_point_variant.setter
    def email_template_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_template_touch_point_variant", value)

    @property
    @pulumi.getter(name="endUserDashboardTouchPointVariant")
    def end_user_dashboard_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        """
        return pulumi.get(self, "end_user_dashboard_touch_point_variant")

    @end_user_dashboard_touch_point_variant.setter
    def end_user_dashboard_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_user_dashboard_touch_point_variant", value)

    @property
    @pulumi.getter(name="errorPageTouchPointVariant")
    def error_page_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "error_page_touch_point_variant")

    @error_page_touch_point_variant.setter
    def error_page_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_page_touch_point_variant", value)

    @property
    @pulumi.getter
    def favicon(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "favicon")

    @favicon.setter
    def favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favicon", value)

    @property
    @pulumi.getter(name="faviconUrl")
    def favicon_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Read-Only) Favicon URL
        """
        return pulumi.get(self, "favicon_url")

    @favicon_url.setter
    def favicon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favicon_url", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[str]]:
        """
        Link relations for this object - JSON HAL - (Read-Only) Discoverable resources related to the brand
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Read-Only) Logo URL
        """
        return pulumi.get(self, "logo_url")

    @logo_url.setter
    def logo_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo_url", value)

    @property
    @pulumi.getter(name="primaryColorContrastHex")
    def primary_color_contrast_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Primary color contrast hex code
        """
        return pulumi.get(self, "primary_color_contrast_hex")

    @primary_color_contrast_hex.setter
    def primary_color_contrast_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color_contrast_hex", value)

    @property
    @pulumi.getter(name="primaryColorHex")
    def primary_color_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Primary color hex code
        """
        return pulumi.get(self, "primary_color_hex")

    @primary_color_hex.setter
    def primary_color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color_hex", value)

    @property
    @pulumi.getter(name="secondaryColorContrastHex")
    def secondary_color_contrast_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Secondary color contrast hex code
        """
        return pulumi.get(self, "secondary_color_contrast_hex")

    @secondary_color_contrast_hex.setter
    def secondary_color_contrast_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_color_contrast_hex", value)

    @property
    @pulumi.getter(name="secondaryColorHex")
    def secondary_color_hex(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Secondary color hex code
        """
        return pulumi.get(self, "secondary_color_hex")

    @secondary_color_hex.setter
    def secondary_color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_color_hex", value)

    @property
    @pulumi.getter(name="signInPageTouchPointVariant")
    def sign_in_page_touch_point_variant(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "sign_in_page_touch_point_variant")

    @sign_in_page_touch_point_variant.setter
    def sign_in_page_touch_point_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_page_touch_point_variant", value)

    @property
    @pulumi.getter(name="themeId")
    def theme_id(self) -> Optional[pulumi.Input[str]]:
        """
        Theme ID, used for read (faux-create)
        """
        return pulumi.get(self, "theme_id")

    @theme_id.setter
    def theme_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme_id", value)


class Theme(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 background_image: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 primary_color_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_hex: Optional[pulumi.Input[str]] = None,
                 sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 theme_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        An Okta Brand can be imported via the ID.

        ```sh
         $ pulumi import okta:index/theme:Theme example &#60;brand id&#62;/&#60;theme id&#62;
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] background_image: (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] brand_id: Brand ID
        :param pulumi.Input[str] email_template_touch_point_variant: (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        :param pulumi.Input[str] end_user_dashboard_touch_point_variant: (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        :param pulumi.Input[str] error_page_touch_point_variant: (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] favicon: (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] logo: (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] primary_color_contrast_hex: (Optional) Primary color contrast hex code
        :param pulumi.Input[str] primary_color_hex: (Required) Primary color hex code
        :param pulumi.Input[str] secondary_color_contrast_hex: (Optional) Secondary color contrast hex code
        :param pulumi.Input[str] secondary_color_hex: (Required) Secondary color hex code
        :param pulumi.Input[str] sign_in_page_touch_point_variant: (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] theme_id: Theme ID, used for read (faux-create)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ThemeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        An Okta Brand can be imported via the ID.

        ```sh
         $ pulumi import okta:index/theme:Theme example &#60;brand id&#62;/&#60;theme id&#62;
        ```

        :param str resource_name: The name of the resource.
        :param ThemeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ThemeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ThemeArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 background_image: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 primary_color_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
                 secondary_color_hex: Optional[pulumi.Input[str]] = None,
                 sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
                 theme_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ThemeArgs.__new__(ThemeArgs)

            __props__.__dict__["background_image"] = background_image
            if brand_id is None and not opts.urn:
                raise TypeError("Missing required property 'brand_id'")
            __props__.__dict__["brand_id"] = brand_id
            __props__.__dict__["email_template_touch_point_variant"] = email_template_touch_point_variant
            __props__.__dict__["end_user_dashboard_touch_point_variant"] = end_user_dashboard_touch_point_variant
            __props__.__dict__["error_page_touch_point_variant"] = error_page_touch_point_variant
            __props__.__dict__["favicon"] = favicon
            __props__.__dict__["logo"] = logo
            __props__.__dict__["primary_color_contrast_hex"] = primary_color_contrast_hex
            __props__.__dict__["primary_color_hex"] = primary_color_hex
            __props__.__dict__["secondary_color_contrast_hex"] = secondary_color_contrast_hex
            __props__.__dict__["secondary_color_hex"] = secondary_color_hex
            __props__.__dict__["sign_in_page_touch_point_variant"] = sign_in_page_touch_point_variant
            __props__.__dict__["theme_id"] = theme_id
            __props__.__dict__["background_image_url"] = None
            __props__.__dict__["favicon_url"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["logo_url"] = None
        super(Theme, __self__).__init__(
            'okta:index/theme:Theme',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            background_image: Optional[pulumi.Input[str]] = None,
            background_image_url: Optional[pulumi.Input[str]] = None,
            brand_id: Optional[pulumi.Input[str]] = None,
            email_template_touch_point_variant: Optional[pulumi.Input[str]] = None,
            end_user_dashboard_touch_point_variant: Optional[pulumi.Input[str]] = None,
            error_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
            favicon: Optional[pulumi.Input[str]] = None,
            favicon_url: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[str]] = None,
            logo: Optional[pulumi.Input[str]] = None,
            logo_url: Optional[pulumi.Input[str]] = None,
            primary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
            primary_color_hex: Optional[pulumi.Input[str]] = None,
            secondary_color_contrast_hex: Optional[pulumi.Input[str]] = None,
            secondary_color_hex: Optional[pulumi.Input[str]] = None,
            sign_in_page_touch_point_variant: Optional[pulumi.Input[str]] = None,
            theme_id: Optional[pulumi.Input[str]] = None) -> 'Theme':
        """
        Get an existing Theme resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] background_image: (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] background_image_url: (Read-Only) Background image URL
        :param pulumi.Input[str] brand_id: Brand ID
        :param pulumi.Input[str] email_template_touch_point_variant: (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        :param pulumi.Input[str] end_user_dashboard_touch_point_variant: (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        :param pulumi.Input[str] error_page_touch_point_variant: (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] favicon: (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] favicon_url: (Read-Only) Favicon URL
        :param pulumi.Input[str] links: Link relations for this object - JSON HAL - (Read-Only) Discoverable resources related to the brand
        :param pulumi.Input[str] logo: (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        :param pulumi.Input[str] logo_url: (Read-Only) Logo URL
        :param pulumi.Input[str] primary_color_contrast_hex: (Optional) Primary color contrast hex code
        :param pulumi.Input[str] primary_color_hex: (Required) Primary color hex code
        :param pulumi.Input[str] secondary_color_contrast_hex: (Optional) Secondary color contrast hex code
        :param pulumi.Input[str] secondary_color_hex: (Required) Secondary color hex code
        :param pulumi.Input[str] sign_in_page_touch_point_variant: (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        :param pulumi.Input[str] theme_id: Theme ID, used for read (faux-create)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ThemeState.__new__(_ThemeState)

        __props__.__dict__["background_image"] = background_image
        __props__.__dict__["background_image_url"] = background_image_url
        __props__.__dict__["brand_id"] = brand_id
        __props__.__dict__["email_template_touch_point_variant"] = email_template_touch_point_variant
        __props__.__dict__["end_user_dashboard_touch_point_variant"] = end_user_dashboard_touch_point_variant
        __props__.__dict__["error_page_touch_point_variant"] = error_page_touch_point_variant
        __props__.__dict__["favicon"] = favicon
        __props__.__dict__["favicon_url"] = favicon_url
        __props__.__dict__["links"] = links
        __props__.__dict__["logo"] = logo
        __props__.__dict__["logo_url"] = logo_url
        __props__.__dict__["primary_color_contrast_hex"] = primary_color_contrast_hex
        __props__.__dict__["primary_color_hex"] = primary_color_hex
        __props__.__dict__["secondary_color_contrast_hex"] = secondary_color_contrast_hex
        __props__.__dict__["secondary_color_hex"] = secondary_color_hex
        __props__.__dict__["sign_in_page_touch_point_variant"] = sign_in_page_touch_point_variant
        __props__.__dict__["theme_id"] = theme_id
        return Theme(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backgroundImage")
    def background_image(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Local path to background image file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "background_image")

    @property
    @pulumi.getter(name="backgroundImageUrl")
    def background_image_url(self) -> pulumi.Output[str]:
        """
        (Read-Only) Background image URL
        """
        return pulumi.get(self, "background_image_url")

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> pulumi.Output[str]:
        """
        Brand ID
        """
        return pulumi.get(self, "brand_id")

    @property
    @pulumi.getter(name="emailTemplateTouchPointVariant")
    def email_template_touch_point_variant(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Variant for email templates. Valid values: (`OKTA_DEFAULT`, `FULL_THEME`)
        """
        return pulumi.get(self, "email_template_touch_point_variant")

    @property
    @pulumi.getter(name="endUserDashboardTouchPointVariant")
    def end_user_dashboard_touch_point_variant(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Variant for the Okta End-User Dashboard. Valid values: (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
        """
        return pulumi.get(self, "end_user_dashboard_touch_point_variant")

    @property
    @pulumi.getter(name="errorPageTouchPointVariant")
    def error_page_touch_point_variant(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Variant for the error page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "error_page_touch_point_variant")

    @property
    @pulumi.getter
    def favicon(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Local path to favicon file. Setting the value to the blank string `""` will delete the favicon on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "favicon")

    @property
    @pulumi.getter(name="faviconUrl")
    def favicon_url(self) -> pulumi.Output[str]:
        """
        (Read-Only) Favicon URL
        """
        return pulumi.get(self, "favicon_url")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[str]:
        """
        Link relations for this object - JSON HAL - (Read-Only) Discoverable resources related to the brand
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def logo(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Local path to logo file. Setting the value to the blank string `""` will delete the logo on the theme at Okta but will not delete the local file.
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> pulumi.Output[str]:
        """
        (Read-Only) Logo URL
        """
        return pulumi.get(self, "logo_url")

    @property
    @pulumi.getter(name="primaryColorContrastHex")
    def primary_color_contrast_hex(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Primary color contrast hex code
        """
        return pulumi.get(self, "primary_color_contrast_hex")

    @property
    @pulumi.getter(name="primaryColorHex")
    def primary_color_hex(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Primary color hex code
        """
        return pulumi.get(self, "primary_color_hex")

    @property
    @pulumi.getter(name="secondaryColorContrastHex")
    def secondary_color_contrast_hex(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Secondary color contrast hex code
        """
        return pulumi.get(self, "secondary_color_contrast_hex")

    @property
    @pulumi.getter(name="secondaryColorHex")
    def secondary_color_hex(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Secondary color hex code
        """
        return pulumi.get(self, "secondary_color_hex")

    @property
    @pulumi.getter(name="signInPageTouchPointVariant")
    def sign_in_page_touch_point_variant(self) -> pulumi.Output[Optional[str]]:
        """
        (Required) Variant for the Okta Sign-In Page. Valid values: (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
        """
        return pulumi.get(self, "sign_in_page_touch_point_variant")

    @property
    @pulumi.getter(name="themeId")
    def theme_id(self) -> pulumi.Output[Optional[str]]:
        """
        Theme ID, used for read (faux-create)
        """
        return pulumi.get(self, "theme_id")

