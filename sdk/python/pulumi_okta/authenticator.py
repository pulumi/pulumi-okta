# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AuthenticatorArgs', 'Authenticator']

@pulumi.input_type
class AuthenticatorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 provider_auth_port: Optional[pulumi.Input[int]] = None,
                 provider_host: Optional[pulumi.Input[str]] = None,
                 provider_hostname: Optional[pulumi.Input[str]] = None,
                 provider_integration_key: Optional[pulumi.Input[str]] = None,
                 provider_json: Optional[pulumi.Input[str]] = None,
                 provider_secret_key: Optional[pulumi.Input[str]] = None,
                 provider_shared_secret: Optional[pulumi.Input[str]] = None,
                 provider_user_name_template: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Authenticator resource.
        :param pulumi.Input[str] key: A human-readable string that identifies the Authenticator
        :param pulumi.Input[str] name: Display name of the Authenticator
        :param pulumi.Input[int] provider_auth_port: The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        :param pulumi.Input[str] provider_host: The Duo Security API hostname
        :param pulumi.Input[str] provider_hostname: Server host name or IP address
        :param pulumi.Input[str] provider_integration_key: The Duo Security integration key
        :param pulumi.Input[str] provider_json: Provider in JSON format
        :param pulumi.Input[str] provider_secret_key: The Duo Security secret key
        :param pulumi.Input[str] provider_shared_secret: An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        :param pulumi.Input[str] provider_user_name_template: Format expected by the provider
        :param pulumi.Input[str] settings: Authenticator settings in JSON format
        :param pulumi.Input[str] status: Authenticator status: ACTIVE or INACTIVE
        """
        AuthenticatorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            name=name,
            provider_auth_port=provider_auth_port,
            provider_host=provider_host,
            provider_hostname=provider_hostname,
            provider_integration_key=provider_integration_key,
            provider_json=provider_json,
            provider_secret_key=provider_secret_key,
            provider_shared_secret=provider_shared_secret,
            provider_user_name_template=provider_user_name_template,
            settings=settings,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             provider_auth_port: Optional[pulumi.Input[int]] = None,
             provider_host: Optional[pulumi.Input[str]] = None,
             provider_hostname: Optional[pulumi.Input[str]] = None,
             provider_integration_key: Optional[pulumi.Input[str]] = None,
             provider_json: Optional[pulumi.Input[str]] = None,
             provider_secret_key: Optional[pulumi.Input[str]] = None,
             provider_shared_secret: Optional[pulumi.Input[str]] = None,
             provider_user_name_template: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        if name is not None:
            _setter("name", name)
        if provider_auth_port is not None:
            _setter("provider_auth_port", provider_auth_port)
        if provider_host is not None:
            _setter("provider_host", provider_host)
        if provider_hostname is not None:
            _setter("provider_hostname", provider_hostname)
        if provider_integration_key is not None:
            _setter("provider_integration_key", provider_integration_key)
        if provider_json is not None:
            _setter("provider_json", provider_json)
        if provider_secret_key is not None:
            _setter("provider_secret_key", provider_secret_key)
        if provider_shared_secret is not None:
            _setter("provider_shared_secret", provider_shared_secret)
        if provider_user_name_template is not None:
            _setter("provider_user_name_template", provider_user_name_template)
        if settings is not None:
            _setter("settings", settings)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A human-readable string that identifies the Authenticator
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the Authenticator
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerAuthPort")
    def provider_auth_port(self) -> Optional[pulumi.Input[int]]:
        """
        The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        """
        return pulumi.get(self, "provider_auth_port")

    @provider_auth_port.setter
    def provider_auth_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provider_auth_port", value)

    @property
    @pulumi.getter(name="providerHost")
    def provider_host(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security API hostname
        """
        return pulumi.get(self, "provider_host")

    @provider_host.setter
    def provider_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_host", value)

    @property
    @pulumi.getter(name="providerHostname")
    def provider_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Server host name or IP address
        """
        return pulumi.get(self, "provider_hostname")

    @provider_hostname.setter
    def provider_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_hostname", value)

    @property
    @pulumi.getter(name="providerIntegrationKey")
    def provider_integration_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security integration key
        """
        return pulumi.get(self, "provider_integration_key")

    @provider_integration_key.setter
    def provider_integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_integration_key", value)

    @property
    @pulumi.getter(name="providerJson")
    def provider_json(self) -> Optional[pulumi.Input[str]]:
        """
        Provider in JSON format
        """
        return pulumi.get(self, "provider_json")

    @provider_json.setter
    def provider_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_json", value)

    @property
    @pulumi.getter(name="providerSecretKey")
    def provider_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security secret key
        """
        return pulumi.get(self, "provider_secret_key")

    @provider_secret_key.setter
    def provider_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_secret_key", value)

    @property
    @pulumi.getter(name="providerSharedSecret")
    def provider_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        """
        return pulumi.get(self, "provider_shared_secret")

    @provider_shared_secret.setter
    def provider_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_shared_secret", value)

    @property
    @pulumi.getter(name="providerUserNameTemplate")
    def provider_user_name_template(self) -> Optional[pulumi.Input[str]]:
        """
        Format expected by the provider
        """
        return pulumi.get(self, "provider_user_name_template")

    @provider_user_name_template.setter
    def provider_user_name_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_user_name_template", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticator settings in JSON format
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticator status: ACTIVE or INACTIVE
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _AuthenticatorState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_auth_port: Optional[pulumi.Input[int]] = None,
                 provider_host: Optional[pulumi.Input[str]] = None,
                 provider_hostname: Optional[pulumi.Input[str]] = None,
                 provider_instance_id: Optional[pulumi.Input[str]] = None,
                 provider_integration_key: Optional[pulumi.Input[str]] = None,
                 provider_json: Optional[pulumi.Input[str]] = None,
                 provider_secret_key: Optional[pulumi.Input[str]] = None,
                 provider_shared_secret: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 provider_user_name_template: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Authenticator resources.
        :param pulumi.Input[str] key: A human-readable string that identifies the Authenticator
        :param pulumi.Input[str] name: Display name of the Authenticator
        :param pulumi.Input[int] provider_auth_port: The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        :param pulumi.Input[str] provider_host: The Duo Security API hostname
        :param pulumi.Input[str] provider_hostname: Server host name or IP address
        :param pulumi.Input[str] provider_instance_id: App Instance ID.
        :param pulumi.Input[str] provider_integration_key: The Duo Security integration key
        :param pulumi.Input[str] provider_json: Provider in JSON format
        :param pulumi.Input[str] provider_secret_key: The Duo Security secret key
        :param pulumi.Input[str] provider_shared_secret: An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        :param pulumi.Input[str] provider_type: Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        :param pulumi.Input[str] provider_user_name_template: Format expected by the provider
        :param pulumi.Input[str] settings: Authenticator settings in JSON format
        :param pulumi.Input[str] status: Authenticator status: ACTIVE or INACTIVE
        :param pulumi.Input[str] type: The type of Authenticator
        """
        _AuthenticatorState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            name=name,
            provider_auth_port=provider_auth_port,
            provider_host=provider_host,
            provider_hostname=provider_hostname,
            provider_instance_id=provider_instance_id,
            provider_integration_key=provider_integration_key,
            provider_json=provider_json,
            provider_secret_key=provider_secret_key,
            provider_shared_secret=provider_shared_secret,
            provider_type=provider_type,
            provider_user_name_template=provider_user_name_template,
            settings=settings,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             provider_auth_port: Optional[pulumi.Input[int]] = None,
             provider_host: Optional[pulumi.Input[str]] = None,
             provider_hostname: Optional[pulumi.Input[str]] = None,
             provider_instance_id: Optional[pulumi.Input[str]] = None,
             provider_integration_key: Optional[pulumi.Input[str]] = None,
             provider_json: Optional[pulumi.Input[str]] = None,
             provider_secret_key: Optional[pulumi.Input[str]] = None,
             provider_shared_secret: Optional[pulumi.Input[str]] = None,
             provider_type: Optional[pulumi.Input[str]] = None,
             provider_user_name_template: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if provider_auth_port is not None:
            _setter("provider_auth_port", provider_auth_port)
        if provider_host is not None:
            _setter("provider_host", provider_host)
        if provider_hostname is not None:
            _setter("provider_hostname", provider_hostname)
        if provider_instance_id is not None:
            _setter("provider_instance_id", provider_instance_id)
        if provider_integration_key is not None:
            _setter("provider_integration_key", provider_integration_key)
        if provider_json is not None:
            _setter("provider_json", provider_json)
        if provider_secret_key is not None:
            _setter("provider_secret_key", provider_secret_key)
        if provider_shared_secret is not None:
            _setter("provider_shared_secret", provider_shared_secret)
        if provider_type is not None:
            _setter("provider_type", provider_type)
        if provider_user_name_template is not None:
            _setter("provider_user_name_template", provider_user_name_template)
        if settings is not None:
            _setter("settings", settings)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable string that identifies the Authenticator
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the Authenticator
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerAuthPort")
    def provider_auth_port(self) -> Optional[pulumi.Input[int]]:
        """
        The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        """
        return pulumi.get(self, "provider_auth_port")

    @provider_auth_port.setter
    def provider_auth_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provider_auth_port", value)

    @property
    @pulumi.getter(name="providerHost")
    def provider_host(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security API hostname
        """
        return pulumi.get(self, "provider_host")

    @provider_host.setter
    def provider_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_host", value)

    @property
    @pulumi.getter(name="providerHostname")
    def provider_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Server host name or IP address
        """
        return pulumi.get(self, "provider_hostname")

    @provider_hostname.setter
    def provider_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_hostname", value)

    @property
    @pulumi.getter(name="providerInstanceId")
    def provider_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        App Instance ID.
        """
        return pulumi.get(self, "provider_instance_id")

    @provider_instance_id.setter
    def provider_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_instance_id", value)

    @property
    @pulumi.getter(name="providerIntegrationKey")
    def provider_integration_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security integration key
        """
        return pulumi.get(self, "provider_integration_key")

    @provider_integration_key.setter
    def provider_integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_integration_key", value)

    @property
    @pulumi.getter(name="providerJson")
    def provider_json(self) -> Optional[pulumi.Input[str]]:
        """
        Provider in JSON format
        """
        return pulumi.get(self, "provider_json")

    @provider_json.setter
    def provider_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_json", value)

    @property
    @pulumi.getter(name="providerSecretKey")
    def provider_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Duo Security secret key
        """
        return pulumi.get(self, "provider_secret_key")

    @provider_secret_key.setter
    def provider_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_secret_key", value)

    @property
    @pulumi.getter(name="providerSharedSecret")
    def provider_shared_secret(self) -> Optional[pulumi.Input[str]]:
        """
        An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        """
        return pulumi.get(self, "provider_shared_secret")

    @provider_shared_secret.setter
    def provider_shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_shared_secret", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="providerUserNameTemplate")
    def provider_user_name_template(self) -> Optional[pulumi.Input[str]]:
        """
        Format expected by the provider
        """
        return pulumi.get(self, "provider_user_name_template")

    @provider_user_name_template.setter
    def provider_user_name_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_user_name_template", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticator settings in JSON format
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticator status: ACTIVE or INACTIVE
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of Authenticator
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Authenticator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_auth_port: Optional[pulumi.Input[int]] = None,
                 provider_host: Optional[pulumi.Input[str]] = None,
                 provider_hostname: Optional[pulumi.Input[str]] = None,
                 provider_integration_key: Optional[pulumi.Input[str]] = None,
                 provider_json: Optional[pulumi.Input[str]] = None,
                 provider_secret_key: Optional[pulumi.Input[str]] = None,
                 provider_shared_secret: Optional[pulumi.Input[str]] = None,
                 provider_user_name_template: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Authenticator resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: A human-readable string that identifies the Authenticator
        :param pulumi.Input[str] name: Display name of the Authenticator
        :param pulumi.Input[int] provider_auth_port: The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        :param pulumi.Input[str] provider_host: The Duo Security API hostname
        :param pulumi.Input[str] provider_hostname: Server host name or IP address
        :param pulumi.Input[str] provider_integration_key: The Duo Security integration key
        :param pulumi.Input[str] provider_json: Provider in JSON format
        :param pulumi.Input[str] provider_secret_key: The Duo Security secret key
        :param pulumi.Input[str] provider_shared_secret: An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        :param pulumi.Input[str] provider_user_name_template: Format expected by the provider
        :param pulumi.Input[str] settings: Authenticator settings in JSON format
        :param pulumi.Input[str] status: Authenticator status: ACTIVE or INACTIVE
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthenticatorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Authenticator resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AuthenticatorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticatorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AuthenticatorArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_auth_port: Optional[pulumi.Input[int]] = None,
                 provider_host: Optional[pulumi.Input[str]] = None,
                 provider_hostname: Optional[pulumi.Input[str]] = None,
                 provider_integration_key: Optional[pulumi.Input[str]] = None,
                 provider_json: Optional[pulumi.Input[str]] = None,
                 provider_secret_key: Optional[pulumi.Input[str]] = None,
                 provider_shared_secret: Optional[pulumi.Input[str]] = None,
                 provider_user_name_template: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticatorArgs.__new__(AuthenticatorArgs)

            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["name"] = name
            __props__.__dict__["provider_auth_port"] = provider_auth_port
            __props__.__dict__["provider_host"] = provider_host
            __props__.__dict__["provider_hostname"] = provider_hostname
            __props__.__dict__["provider_integration_key"] = provider_integration_key
            __props__.__dict__["provider_json"] = provider_json
            __props__.__dict__["provider_secret_key"] = provider_secret_key
            __props__.__dict__["provider_shared_secret"] = None if provider_shared_secret is None else pulumi.Output.secret(provider_shared_secret)
            __props__.__dict__["provider_user_name_template"] = provider_user_name_template
            __props__.__dict__["settings"] = settings
            __props__.__dict__["status"] = status
            __props__.__dict__["provider_instance_id"] = None
            __props__.__dict__["provider_type"] = None
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["providerSharedSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Authenticator, __self__).__init__(
            'okta:index/authenticator:Authenticator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            provider_auth_port: Optional[pulumi.Input[int]] = None,
            provider_host: Optional[pulumi.Input[str]] = None,
            provider_hostname: Optional[pulumi.Input[str]] = None,
            provider_instance_id: Optional[pulumi.Input[str]] = None,
            provider_integration_key: Optional[pulumi.Input[str]] = None,
            provider_json: Optional[pulumi.Input[str]] = None,
            provider_secret_key: Optional[pulumi.Input[str]] = None,
            provider_shared_secret: Optional[pulumi.Input[str]] = None,
            provider_type: Optional[pulumi.Input[str]] = None,
            provider_user_name_template: Optional[pulumi.Input[str]] = None,
            settings: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Authenticator':
        """
        Get an existing Authenticator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: A human-readable string that identifies the Authenticator
        :param pulumi.Input[str] name: Display name of the Authenticator
        :param pulumi.Input[int] provider_auth_port: The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        :param pulumi.Input[str] provider_host: The Duo Security API hostname
        :param pulumi.Input[str] provider_hostname: Server host name or IP address
        :param pulumi.Input[str] provider_instance_id: App Instance ID.
        :param pulumi.Input[str] provider_integration_key: The Duo Security integration key
        :param pulumi.Input[str] provider_json: Provider in JSON format
        :param pulumi.Input[str] provider_secret_key: The Duo Security secret key
        :param pulumi.Input[str] provider_shared_secret: An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        :param pulumi.Input[str] provider_type: Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        :param pulumi.Input[str] provider_user_name_template: Format expected by the provider
        :param pulumi.Input[str] settings: Authenticator settings in JSON format
        :param pulumi.Input[str] status: Authenticator status: ACTIVE or INACTIVE
        :param pulumi.Input[str] type: The type of Authenticator
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthenticatorState.__new__(_AuthenticatorState)

        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_auth_port"] = provider_auth_port
        __props__.__dict__["provider_host"] = provider_host
        __props__.__dict__["provider_hostname"] = provider_hostname
        __props__.__dict__["provider_instance_id"] = provider_instance_id
        __props__.__dict__["provider_integration_key"] = provider_integration_key
        __props__.__dict__["provider_json"] = provider_json
        __props__.__dict__["provider_secret_key"] = provider_secret_key
        __props__.__dict__["provider_shared_secret"] = provider_shared_secret
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["provider_user_name_template"] = provider_user_name_template
        __props__.__dict__["settings"] = settings
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return Authenticator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        A human-readable string that identifies the Authenticator
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Display name of the Authenticator
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerAuthPort")
    def provider_auth_port(self) -> pulumi.Output[Optional[int]]:
        """
        The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
        """
        return pulumi.get(self, "provider_auth_port")

    @property
    @pulumi.getter(name="providerHost")
    def provider_host(self) -> pulumi.Output[Optional[str]]:
        """
        The Duo Security API hostname
        """
        return pulumi.get(self, "provider_host")

    @property
    @pulumi.getter(name="providerHostname")
    def provider_hostname(self) -> pulumi.Output[Optional[str]]:
        """
        Server host name or IP address
        """
        return pulumi.get(self, "provider_hostname")

    @property
    @pulumi.getter(name="providerInstanceId")
    def provider_instance_id(self) -> pulumi.Output[str]:
        """
        App Instance ID.
        """
        return pulumi.get(self, "provider_instance_id")

    @property
    @pulumi.getter(name="providerIntegrationKey")
    def provider_integration_key(self) -> pulumi.Output[Optional[str]]:
        """
        The Duo Security integration key
        """
        return pulumi.get(self, "provider_integration_key")

    @property
    @pulumi.getter(name="providerJson")
    def provider_json(self) -> pulumi.Output[Optional[str]]:
        """
        Provider in JSON format
        """
        return pulumi.get(self, "provider_json")

    @property
    @pulumi.getter(name="providerSecretKey")
    def provider_secret_key(self) -> pulumi.Output[Optional[str]]:
        """
        The Duo Security secret key
        """
        return pulumi.get(self, "provider_secret_key")

    @property
    @pulumi.getter(name="providerSharedSecret")
    def provider_shared_secret(self) -> pulumi.Output[Optional[str]]:
        """
        An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server.
        """
        return pulumi.get(self, "provider_shared_secret")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[str]:
        """
        Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="providerUserNameTemplate")
    def provider_user_name_template(self) -> pulumi.Output[Optional[str]]:
        """
        Format expected by the provider
        """
        return pulumi.get(self, "provider_user_name_template")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output[Optional[str]]:
        """
        Authenticator settings in JSON format
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Authenticator status: ACTIVE or INACTIVE
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of Authenticator
        """
        return pulumi.get(self, "type")

