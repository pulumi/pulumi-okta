# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OauthAppRedirectUriArgs', 'OauthAppRedirectUri']

@pulumi.input_type
class OauthAppRedirectUriArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 uri: pulumi.Input[str]):
        """
        The set of arguments for constructing a OauthAppRedirectUri resource.
        :param pulumi.Input[str] uri: Redirect URI to append to Okta OIDC application.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        Redirect URI to append to Okta OIDC application.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class _OauthAppRedirectUriState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OauthAppRedirectUri resources.
        :param pulumi.Input[str] uri: Redirect URI to append to Okta OIDC application.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect URI to append to Okta OIDC application.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


warnings.warn("""Deprecated. Use app.OAuthRedirectUri instead. This resource will be removed in version 4.0 of this provider.""", DeprecationWarning)


class OauthAppRedirectUri(pulumi.CustomResource):
    warnings.warn("""Deprecated. Use app.OAuthRedirectUri instead. This resource will be removed in version 4.0 of this provider.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OauthAppRedirectUri resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] uri: Redirect URI to append to Okta OIDC application.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OauthAppRedirectUriArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OauthAppRedirectUri resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OauthAppRedirectUriArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OauthAppRedirectUriArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""OauthAppRedirectUri is deprecated: Deprecated. Use app.OAuthRedirectUri instead. This resource will be removed in version 4.0 of this provider.""")
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OauthAppRedirectUriArgs.__new__(OauthAppRedirectUriArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if uri is None and not opts.urn:
                raise TypeError("Missing required property 'uri'")
            __props__.__dict__["uri"] = uri
        super(OauthAppRedirectUri, __self__).__init__(
            'okta:deprecated/oauthAppRedirectUri:OauthAppRedirectUri',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            uri: Optional[pulumi.Input[str]] = None) -> 'OauthAppRedirectUri':
        """
        Get an existing OauthAppRedirectUri resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] uri: Redirect URI to append to Okta OIDC application.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OauthAppRedirectUriState.__new__(_OauthAppRedirectUriState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["uri"] = uri
        return OauthAppRedirectUri(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[str]:
        """
        Redirect URI to append to Okta OIDC application.
        """
        return pulumi.get(self, "uri")

