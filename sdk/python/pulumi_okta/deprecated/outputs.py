# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuthLoginAppUser',
    'BookmarkAppUser',
    'MfaPolicyRuleAppExclude',
    'MfaPolicyRuleAppInclude',
    'OauthAppGroupsClaim',
    'OauthAppJwk',
    'OauthAppUser',
    'SamlAppAttributeStatement',
    'SamlAppUser',
    'SecurePasswordStoreAppUser',
    'SignonPolicyRuleFactorSequence',
    'SignonPolicyRuleFactorSequenceSecondaryCriteria',
    'SwaAppUser',
    'ThreeFieldAppUser',
]

@pulumi.output_type
class AuthLoginAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class BookmarkAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class MfaPolicyRuleAppExclude(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class MfaPolicyRuleAppInclude(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class OauthAppGroupsClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OauthAppGroupsClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OauthAppGroupsClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OauthAppGroupsClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 value: str,
                 filter_type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")


@pulumi.output_type
class OauthAppJwk(dict):
    def __init__(__self__, *,
                 kid: str,
                 kty: str,
                 e: Optional[str] = None,
                 n: Optional[str] = None):
        pulumi.set(__self__, "kid", kid)
        pulumi.set(__self__, "kty", kty)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if n is not None:
            pulumi.set(__self__, "n", n)

    @property
    @pulumi.getter
    def kid(self) -> str:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> str:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")


@pulumi.output_type
class OauthAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SamlAppAttributeStatement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "filterValue":
            suggest = "filter_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamlAppAttributeStatement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamlAppAttributeStatement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamlAppAttributeStatement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 filter_type: Optional[str] = None,
                 filter_value: Optional[str] = None,
                 namespace: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if filter_value is not None:
            pulumi.set(__self__, "filter_value", filter_value)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="filterValue")
    def filter_value(self) -> Optional[str]:
        return pulumi.get(self, "filter_value")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class SamlAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecurePasswordStoreAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SignonPolicyRuleFactorSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryCriteriaFactorType":
            suggest = "primary_criteria_factor_type"
        elif key == "primaryCriteriaProvider":
            suggest = "primary_criteria_provider"
        elif key == "secondaryCriterias":
            suggest = "secondary_criterias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SignonPolicyRuleFactorSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SignonPolicyRuleFactorSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SignonPolicyRuleFactorSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_criteria_factor_type: str,
                 primary_criteria_provider: str,
                 secondary_criterias: Optional[Sequence['outputs.SignonPolicyRuleFactorSequenceSecondaryCriteria']] = None):
        pulumi.set(__self__, "primary_criteria_factor_type", primary_criteria_factor_type)
        pulumi.set(__self__, "primary_criteria_provider", primary_criteria_provider)
        if secondary_criterias is not None:
            pulumi.set(__self__, "secondary_criterias", secondary_criterias)

    @property
    @pulumi.getter(name="primaryCriteriaFactorType")
    def primary_criteria_factor_type(self) -> str:
        return pulumi.get(self, "primary_criteria_factor_type")

    @property
    @pulumi.getter(name="primaryCriteriaProvider")
    def primary_criteria_provider(self) -> str:
        return pulumi.get(self, "primary_criteria_provider")

    @property
    @pulumi.getter(name="secondaryCriterias")
    def secondary_criterias(self) -> Optional[Sequence['outputs.SignonPolicyRuleFactorSequenceSecondaryCriteria']]:
        return pulumi.get(self, "secondary_criterias")


@pulumi.output_type
class SignonPolicyRuleFactorSequenceSecondaryCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "factorType":
            suggest = "factor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SignonPolicyRuleFactorSequenceSecondaryCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SignonPolicyRuleFactorSequenceSecondaryCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SignonPolicyRuleFactorSequenceSecondaryCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 factor_type: str,
                 provider: str):
        pulumi.set(__self__, "factor_type", factor_type)
        pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter(name="factorType")
    def factor_type(self) -> str:
        return pulumi.get(self, "factor_type")

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")


@pulumi.output_type
class SwaAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ThreeFieldAppUser(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 password: Optional[str] = None,
                 scope: Optional[str] = None,
                 username: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


