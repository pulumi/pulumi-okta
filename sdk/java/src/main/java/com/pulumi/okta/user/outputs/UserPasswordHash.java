// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UserPasswordHash {
    /**
     * @return The algorithm used to generate the hash using the password
     * 
     */
    private String algorithm;
    /**
     * @return Only required for salted hashes
     * 
     */
    private @Nullable String salt;
    /**
     * @return Specifies whether salt was pre- or postfixed to the password before hashing
     * 
     */
    private @Nullable String saltOrder;
    /**
     * @return For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
     * 
     */
    private String value;
    /**
     * @return Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
     * 
     */
    private @Nullable Integer workFactor;

    private UserPasswordHash() {}
    /**
     * @return The algorithm used to generate the hash using the password
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return Only required for salted hashes
     * 
     */
    public Optional<String> salt() {
        return Optional.ofNullable(this.salt);
    }
    /**
     * @return Specifies whether salt was pre- or postfixed to the password before hashing
     * 
     */
    public Optional<String> saltOrder() {
        return Optional.ofNullable(this.saltOrder);
    }
    /**
     * @return For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
     * 
     */
    public Optional<Integer> workFactor() {
        return Optional.ofNullable(this.workFactor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserPasswordHash defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private @Nullable String salt;
        private @Nullable String saltOrder;
        private String value;
        private @Nullable Integer workFactor;
        public Builder() {}
        public Builder(UserPasswordHash defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.salt = defaults.salt;
    	      this.saltOrder = defaults.saltOrder;
    	      this.value = defaults.value;
    	      this.workFactor = defaults.workFactor;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("UserPasswordHash", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder salt(@Nullable String salt) {

            this.salt = salt;
            return this;
        }
        @CustomType.Setter
        public Builder saltOrder(@Nullable String saltOrder) {

            this.saltOrder = saltOrder;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("UserPasswordHash", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder workFactor(@Nullable Integer workFactor) {

            this.workFactor = workFactor;
            return this;
        }
        public UserPasswordHash build() {
            final var _resultValue = new UserPasswordHash();
            _resultValue.algorithm = algorithm;
            _resultValue.salt = salt;
            _resultValue.saltOrder = saltOrder;
            _resultValue.value = value;
            _resultValue.workFactor = workFactor;
            return _resultValue;
        }
    }
}
