// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetEntitlementBundleEntitlementArgs;
import com.pulumi.okta.inputs.GetEntitlementBundleTargetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEntitlementBundleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEntitlementBundleArgs Empty = new GetEntitlementBundleArgs();

    /**
     * List of entitlements in the bundle
     * 
     */
    @Import(name="entitlements")
    private @Nullable Output<List<GetEntitlementBundleEntitlementArgs>> entitlements;

    /**
     * @return List of entitlements in the bundle
     * 
     */
    public Optional<Output<List<GetEntitlementBundleEntitlementArgs>>> entitlements() {
        return Optional.ofNullable(this.entitlements);
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of this resource.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Representation of a resource
     * 
     */
    @Import(name="target")
    private @Nullable Output<GetEntitlementBundleTargetArgs> target;

    /**
     * @return Representation of a resource
     * 
     */
    public Optional<Output<GetEntitlementBundleTargetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    private GetEntitlementBundleArgs() {}

    private GetEntitlementBundleArgs(GetEntitlementBundleArgs $) {
        this.entitlements = $.entitlements;
        this.id = $.id;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEntitlementBundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEntitlementBundleArgs $;

        public Builder() {
            $ = new GetEntitlementBundleArgs();
        }

        public Builder(GetEntitlementBundleArgs defaults) {
            $ = new GetEntitlementBundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entitlements List of entitlements in the bundle
         * 
         * @return builder
         * 
         */
        public Builder entitlements(@Nullable Output<List<GetEntitlementBundleEntitlementArgs>> entitlements) {
            $.entitlements = entitlements;
            return this;
        }

        /**
         * @param entitlements List of entitlements in the bundle
         * 
         * @return builder
         * 
         */
        public Builder entitlements(List<GetEntitlementBundleEntitlementArgs> entitlements) {
            return entitlements(Output.of(entitlements));
        }

        /**
         * @param entitlements List of entitlements in the bundle
         * 
         * @return builder
         * 
         */
        public Builder entitlements(GetEntitlementBundleEntitlementArgs... entitlements) {
            return entitlements(List.of(entitlements));
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param target Representation of a resource
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<GetEntitlementBundleTargetArgs> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Representation of a resource
         * 
         * @return builder
         * 
         */
        public Builder target(GetEntitlementBundleTargetArgs target) {
            return target(Output.of(target));
        }

        public GetEntitlementBundleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetEntitlementBundleArgs", "id");
            }
            return $;
        }
    }

}
