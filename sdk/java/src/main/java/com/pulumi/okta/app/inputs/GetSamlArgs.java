// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSamlArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSamlArgs Empty = new GetSamlArgs();

    /**
     * tells the provider to query for only `ACTIVE` applications.
     * 
     */
    @Import(name="activeOnly")
    private @Nullable Output<Boolean> activeOnly;

    /**
     * @return tells the provider to query for only `ACTIVE` applications.
     * 
     */
    public Optional<Output<Boolean>> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }

    /**
     * `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
     * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
     * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time this searches both `name`
     * and `label`. This is used to avoid paginating through all applications.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    @Import(name="labelPrefix")
    private @Nullable Output<String> labelPrefix;

    /**
     * @return Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    public Optional<Output<String>> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }

    /**
     * Denotes whether the request is compressed or not.
     * 
     */
    @Import(name="requestCompressed")
    private @Nullable Output<Boolean> requestCompressed;

    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Optional<Output<Boolean>> requestCompressed() {
        return Optional.ofNullable(this.requestCompressed);
    }

    private GetSamlArgs() {}

    private GetSamlArgs(GetSamlArgs $) {
        this.activeOnly = $.activeOnly;
        this.id = $.id;
        this.label = $.label;
        this.labelPrefix = $.labelPrefix;
        this.requestCompressed = $.requestCompressed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSamlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSamlArgs $;

        public Builder() {
            $ = new GetSamlArgs();
        }

        public Builder(GetSamlArgs defaults) {
            $ = new GetSamlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(@Nullable Output<Boolean> activeOnly) {
            $.activeOnly = activeOnly;
            return this;
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(Boolean activeOnly) {
            return activeOnly(Output.of(activeOnly));
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
         * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time this searches both `name`
         * and `label`. This is used to avoid paginating through all applications.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
         * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time this searches both `name`
         * and `label`. This is used to avoid paginating through all applications.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(@Nullable Output<String> labelPrefix) {
            $.labelPrefix = labelPrefix;
            return this;
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(String labelPrefix) {
            return labelPrefix(Output.of(labelPrefix));
        }

        /**
         * @param requestCompressed Denotes whether the request is compressed or not.
         * 
         * @return builder
         * 
         */
        public Builder requestCompressed(@Nullable Output<Boolean> requestCompressed) {
            $.requestCompressed = requestCompressed;
            return this;
        }

        /**
         * @param requestCompressed Denotes whether the request is compressed or not.
         * 
         * @return builder
         * 
         */
        public Builder requestCompressed(Boolean requestCompressed) {
            return requestCompressed(Output.of(requestCompressed));
        }

        public GetSamlArgs build() {
            return $;
        }
    }

}
