// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerPolicyArgs Empty = new ServerPolicyArgs();

    /**
     * The ID of the Auth Server.
     * 
     */
    @Import(name="authServerId", required=true)
    private Output<String> authServerId;

    /**
     * @return The ID of the Auth Server.
     * 
     */
    public Output<String> authServerId() {
        return this.authServerId;
    }

    /**
     * The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
     * 
     */
    @Import(name="clientWhitelists", required=true)
    private Output<List<String>> clientWhitelists;

    /**
     * @return The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
     * 
     */
    public Output<List<String>> clientWhitelists() {
        return this.clientWhitelists;
    }

    /**
     * The description of the Auth Server Policy.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the Auth Server Policy.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The name of the Auth Server Policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Auth Server Policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of the Auth Server Policy.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return The priority of the Auth Server Policy.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * The status of the Auth Server Policy.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Auth Server Policy.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of the Auth Server Policy.
     * 
     * @deprecated
     * Policy type can only be of value &#39;OAUTH_AUTHORIZATION_POLICY&#39;, so this will be removed in the future, or set as &#39;Computed&#39; value
     * 
     */
    @Deprecated /* Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the Auth Server Policy.
     * 
     * @deprecated
     * Policy type can only be of value &#39;OAUTH_AUTHORIZATION_POLICY&#39;, so this will be removed in the future, or set as &#39;Computed&#39; value
     * 
     */
    @Deprecated /* Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServerPolicyArgs() {}

    private ServerPolicyArgs(ServerPolicyArgs $) {
        this.authServerId = $.authServerId;
        this.clientWhitelists = $.clientWhitelists;
        this.description = $.description;
        this.name = $.name;
        this.priority = $.priority;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerPolicyArgs $;

        public Builder() {
            $ = new ServerPolicyArgs();
        }

        public Builder(ServerPolicyArgs defaults) {
            $ = new ServerPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authServerId The ID of the Auth Server.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId The ID of the Auth Server.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(Output<List<String>> clientWhitelists) {
            $.clientWhitelists = clientWhitelists;
            return this;
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(List<String> clientWhitelists) {
            return clientWhitelists(Output.of(clientWhitelists));
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(String... clientWhitelists) {
            return clientWhitelists(List.of(clientWhitelists));
        }

        /**
         * @param description The description of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status The status of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The type of the Auth Server Policy.
         * 
         * @return builder
         * 
         * @deprecated
         * Policy type can only be of value &#39;OAUTH_AUTHORIZATION_POLICY&#39;, so this will be removed in the future, or set as &#39;Computed&#39; value
         * 
         */
        @Deprecated /* Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Auth Server Policy.
         * 
         * @return builder
         * 
         * @deprecated
         * Policy type can only be of value &#39;OAUTH_AUTHORIZATION_POLICY&#39;, so this will be removed in the future, or set as &#39;Computed&#39; value
         * 
         */
        @Deprecated /* Policy type can only be of value 'OAUTH_AUTHORIZATION_POLICY', so this will be removed in the future, or set as 'Computed' value */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerPolicyArgs build() {
            $.authServerId = Objects.requireNonNull($.authServerId, "expected parameter 'authServerId' to be non-null");
            $.clientWhitelists = Objects.requireNonNull($.clientWhitelists, "expected parameter 'clientWhitelists' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            return $;
        }
    }

}
