// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.AppGroupAssignmentsGroupArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AppGroupAssignmentsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppGroupAssignmentsArgs Empty = new AppGroupAssignmentsArgs();

    /**
     * The ID of the application to assign a group to.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of the application to assign a group to.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * A group to assign to this application
     * 
     */
    @Import(name="groups", required=true)
    private Output<List<AppGroupAssignmentsGroupArgs>> groups;

    /**
     * @return A group to assign to this application
     * 
     */
    public Output<List<AppGroupAssignmentsGroupArgs>> groups() {
        return this.groups;
    }

    private AppGroupAssignmentsArgs() {}

    private AppGroupAssignmentsArgs(AppGroupAssignmentsArgs $) {
        this.appId = $.appId;
        this.groups = $.groups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppGroupAssignmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppGroupAssignmentsArgs $;

        public Builder() {
            $ = new AppGroupAssignmentsArgs();
        }

        public Builder(AppGroupAssignmentsArgs defaults) {
            $ = new AppGroupAssignmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of the application to assign a group to.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the application to assign a group to.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param groups A group to assign to this application
         * 
         * @return builder
         * 
         */
        public Builder groups(Output<List<AppGroupAssignmentsGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups A group to assign to this application
         * 
         * @return builder
         * 
         */
        public Builder groups(List<AppGroupAssignmentsGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups A group to assign to this application
         * 
         * @return builder
         * 
         */
        public Builder groups(AppGroupAssignmentsGroupArgs... groups) {
            return groups(List.of(groups));
        }

        public AppGroupAssignmentsArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.groups = Objects.requireNonNull($.groups, "expected parameter 'groups' to be non-null");
            return $;
        }
    }

}
