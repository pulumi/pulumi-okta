// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.app.OauthRoleAssignmentArgs;
import com.pulumi.okta.app.inputs.OauthRoleAssignmentState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages assignment of an admin role to an OAuth application
 * This resource allows you to assign an Okta admin role to a OAuth
 * service application. This requires the Okta tenant feature flag for this function to be enabled.
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:app/oauthRoleAssignment:OauthRoleAssignment test &lt;clientID&gt;/&lt;roleAssignmentID&gt;
 * ```
 * 
 */
@ResourceType(type="okta:app/oauthRoleAssignment:OauthRoleAssignment")
public class OauthRoleAssignment extends com.pulumi.resources.CustomResource {
    /**
     * Client ID for the role to be assigned to
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output<String> clientId;

    /**
     * @return Client ID for the role to be assigned to
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }
    /**
     * Label of the role assignment
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return Label of the role assignment
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * Resource set for the custom role to assign, must be the ID of the created resource set.
     * 
     */
    @Export(name="resourceSet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceSet;

    /**
     * @return Resource set for the custom role to assign, must be the ID of the created resource set.
     * 
     */
    public Output<Optional<String>> resourceSet() {
        return Codegen.optional(this.resourceSet);
    }
    /**
     * Custom Role ID
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return Custom Role ID
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * Status of the role assignment
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the role assignment
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OauthRoleAssignment(java.lang.String name) {
        this(name, OauthRoleAssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OauthRoleAssignment(java.lang.String name, OauthRoleAssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OauthRoleAssignment(java.lang.String name, OauthRoleAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:app/oauthRoleAssignment:OauthRoleAssignment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private OauthRoleAssignment(java.lang.String name, Output<java.lang.String> id, @Nullable OauthRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:app/oauthRoleAssignment:OauthRoleAssignment", name, state, makeResourceOptions(options, id), false);
    }

    private static OauthRoleAssignmentArgs makeArgs(OauthRoleAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OauthRoleAssignmentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OauthRoleAssignment get(java.lang.String name, Output<java.lang.String> id, @Nullable OauthRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OauthRoleAssignment(name, id, state, options);
    }
}
