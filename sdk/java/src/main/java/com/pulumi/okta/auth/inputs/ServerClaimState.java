// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerClaimState extends com.pulumi.resources.ResourceArgs {

    public static final ServerClaimState Empty = new ServerClaimState();

    /**
     * Specifies whether to include claims in token, by default it is set to `true`.
     * 
     */
    @Import(name="alwaysIncludeInToken")
    private @Nullable Output<Boolean> alwaysIncludeInToken;

    /**
     * @return Specifies whether to include claims in token, by default it is set to `true`.
     * 
     */
    public Optional<Output<Boolean>> alwaysIncludeInToken() {
        return Optional.ofNullable(this.alwaysIncludeInToken);
    }

    /**
     * Auth server ID
     * 
     */
    @Import(name="authServerId")
    private @Nullable Output<String> authServerId;

    /**
     * @return Auth server ID
     * 
     */
    public Optional<Output<String>> authServerId() {
        return Optional.ofNullable(this.authServerId);
    }

    /**
     * Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     * 
     */
    @Import(name="claimType")
    private @Nullable Output<String> claimType;

    /**
     * @return Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
     * 
     */
    public Optional<Output<String>> claimType() {
        return Optional.ofNullable(this.claimType);
    }

    /**
     * Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
     * 
     */
    @Import(name="groupFilterType")
    private @Nullable Output<String> groupFilterType;

    /**
     * @return Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
     * 
     */
    public Optional<Output<String>> groupFilterType() {
        return Optional.ofNullable(this.groupFilterType);
    }

    /**
     * Auth server claim name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Auth server claim name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Auth server claim list of scopes
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Auth server claim list of scopes
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The value of the claim.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value of the claim.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
     * 
     */
    @Import(name="valueType")
    private @Nullable Output<String> valueType;

    /**
     * @return The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
     * 
     */
    public Optional<Output<String>> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    private ServerClaimState() {}

    private ServerClaimState(ServerClaimState $) {
        this.alwaysIncludeInToken = $.alwaysIncludeInToken;
        this.authServerId = $.authServerId;
        this.claimType = $.claimType;
        this.groupFilterType = $.groupFilterType;
        this.name = $.name;
        this.scopes = $.scopes;
        this.status = $.status;
        this.value = $.value;
        this.valueType = $.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerClaimState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerClaimState $;

        public Builder() {
            $ = new ServerClaimState();
        }

        public Builder(ServerClaimState defaults) {
            $ = new ServerClaimState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysIncludeInToken Specifies whether to include claims in token, by default it is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder alwaysIncludeInToken(@Nullable Output<Boolean> alwaysIncludeInToken) {
            $.alwaysIncludeInToken = alwaysIncludeInToken;
            return this;
        }

        /**
         * @param alwaysIncludeInToken Specifies whether to include claims in token, by default it is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder alwaysIncludeInToken(Boolean alwaysIncludeInToken) {
            return alwaysIncludeInToken(Output.of(alwaysIncludeInToken));
        }

        /**
         * @param authServerId Auth server ID
         * 
         * @return builder
         * 
         */
        public Builder authServerId(@Nullable Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId Auth server ID
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param claimType Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
         * 
         * @return builder
         * 
         */
        public Builder claimType(@Nullable Output<String> claimType) {
            $.claimType = claimType;
            return this;
        }

        /**
         * @param claimType Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
         * 
         * @return builder
         * 
         */
        public Builder claimType(String claimType) {
            return claimType(Output.of(claimType));
        }

        /**
         * @param groupFilterType Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
         * 
         * @return builder
         * 
         */
        public Builder groupFilterType(@Nullable Output<String> groupFilterType) {
            $.groupFilterType = groupFilterType;
            return this;
        }

        /**
         * @param groupFilterType Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
         * 
         * @return builder
         * 
         */
        public Builder groupFilterType(String groupFilterType) {
            return groupFilterType(Output.of(groupFilterType));
        }

        /**
         * @param name Auth server claim name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Auth server claim name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scopes Auth server claim list of scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Auth server claim list of scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Auth server claim list of scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param value The value of the claim.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the claim.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param valueType The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
         * 
         * @return builder
         * 
         */
        public Builder valueType(@Nullable Output<String> valueType) {
            $.valueType = valueType;
            return this;
        }

        /**
         * @param valueType The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
         * 
         * @return builder
         * 
         */
        public Builder valueType(String valueType) {
            return valueType(Output.of(valueType));
        }

        public ServerClaimState build() {
            return $;
        }
    }

}
