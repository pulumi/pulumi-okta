// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class UserGroupMembershipsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupMembershipsArgs Empty = new UserGroupMembershipsArgs();

    /**
     * The list of Okta group IDs which the user should have membership managed for.
     * 
     */
    @Import(name="groups", required=true)
    private Output<List<String>> groups;

    /**
     * @return The list of Okta group IDs which the user should have membership managed for.
     * 
     */
    public Output<List<String>> groups() {
        return this.groups;
    }

    /**
     * ID of a Okta User
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return ID of a Okta User
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserGroupMembershipsArgs() {}

    private UserGroupMembershipsArgs(UserGroupMembershipsArgs $) {
        this.groups = $.groups;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupMembershipsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupMembershipsArgs $;

        public Builder() {
            $ = new UserGroupMembershipsArgs();
        }

        public Builder(UserGroupMembershipsArgs defaults) {
            $ = new UserGroupMembershipsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param userId ID of a Okta User
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of a Okta User
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserGroupMembershipsArgs build() {
            $.groups = Objects.requireNonNull($.groups, "expected parameter 'groups' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
