// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.app.SamlArgs;
import com.pulumi.okta.app.inputs.SamlState;
import com.pulumi.okta.app.outputs.SamlAcsEndpointsIndex;
import com.pulumi.okta.app.outputs.SamlAttributeStatement;
import com.pulumi.okta.app.outputs.SamlKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and configure a SAML Application.
 * &gt; During an apply if there is change in &#39;status&#39; the app will first be
 * activated or deactivated in accordance with the &#39;status&#39; change. Then, all
 * other arguments that changed will be applied.
 * 
 * &gt; If you receive the error &#39;You do not have permission to access the feature
 * you are requesting&#39; contact support and
 * request feature flag &#39;ADVANCED_SSO&#39; be applied to your org.
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:app/saml:Saml example &lt;app_id&gt;
 * ```
 * 
 */
@ResourceType(type="okta:app/saml:Saml")
public class Saml extends com.pulumi.resources.CustomResource {
    /**
     * Custom error page URL
     * 
     */
    @Export(name="accessibilityErrorRedirectUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessibilityErrorRedirectUrl;

    /**
     * @return Custom error page URL
     * 
     */
    public Output<Optional<String>> accessibilityErrorRedirectUrl() {
        return Codegen.optional(this.accessibilityErrorRedirectUrl);
    }
    /**
     * Custom login page URL
     * 
     */
    @Export(name="accessibilityLoginRedirectUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessibilityLoginRedirectUrl;

    /**
     * @return Custom login page URL
     * 
     */
    public Output<Optional<String>> accessibilityLoginRedirectUrl() {
        return Codegen.optional(this.accessibilityLoginRedirectUrl);
    }
    /**
     * Enable self service. Default is `false`
     * 
     */
    @Export(name="accessibilitySelfService", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> accessibilitySelfService;

    /**
     * @return Enable self service. Default is `false`
     * 
     */
    public Output<Optional<Boolean>> accessibilitySelfService() {
        return Codegen.optional(this.accessibilitySelfService);
    }
    /**
     * An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    @Export(name="acsEndpoints", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> acsEndpoints;

    /**
     * @return An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    public Output<Optional<List<String>>> acsEndpoints() {
        return Codegen.optional(this.acsEndpoints);
    }
    /**
     * ACS endpoints along with custom index as a set of maps called `acs_endpoints_indices` in JSON format
     * 
     */
    @Export(name="acsEndpointsIndices", refs={List.class,SamlAcsEndpointsIndex.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SamlAcsEndpointsIndex>> acsEndpointsIndices;

    /**
     * @return ACS endpoints along with custom index as a set of maps called `acs_endpoints_indices` in JSON format
     * 
     */
    public Output<Optional<List<SamlAcsEndpointsIndex>>> acsEndpointsIndices() {
        return Codegen.optional(this.acsEndpointsIndices);
    }
    /**
     * Application notes for admins.
     * 
     */
    @Export(name="adminNote", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminNote;

    /**
     * @return Application notes for admins.
     * 
     */
    public Output<Optional<String>> adminNote() {
        return Codegen.optional(this.adminNote);
    }
    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    @Export(name="appLinksJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> appLinksJson;

    /**
     * @return Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    public Output<Optional<String>> appLinksJson() {
        return Codegen.optional(this.appLinksJson);
    }
    /**
     * Application settings in JSON format
     * 
     */
    @Export(name="appSettingsJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> appSettingsJson;

    /**
     * @return Application settings in JSON format
     * 
     */
    public Output<Optional<String>> appSettingsJson() {
        return Codegen.optional(this.appSettingsJson);
    }
    /**
     * Determines whether the SAML assertion is digitally signed
     * 
     */
    @Export(name="assertionSigned", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> assertionSigned;

    /**
     * @return Determines whether the SAML assertion is digitally signed
     * 
     */
    public Output<Optional<Boolean>> assertionSigned() {
        return Codegen.optional(this.assertionSigned);
    }
    @Export(name="attributeStatements", refs={List.class,SamlAttributeStatement.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SamlAttributeStatement>> attributeStatements;

    public Output<Optional<List<SamlAttributeStatement>>> attributeStatements() {
        return Codegen.optional(this.attributeStatements);
    }
    /**
     * Audience Restriction
     * 
     */
    @Export(name="audience", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> audience;

    /**
     * @return Audience Restriction
     * 
     */
    public Output<Optional<String>> audience() {
        return Codegen.optional(this.audience);
    }
    /**
     * The ID of the associated `app_signon_policy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     * 
     */
    @Export(name="authenticationPolicy", refs={String.class}, tree="[0]")
    private Output<String> authenticationPolicy;

    /**
     * @return The ID of the associated `app_signon_policy`. If this property is removed from the application the `default` sign-on-policy will be associated with this application.y
     * 
     */
    public Output<String> authenticationPolicy() {
        return this.authenticationPolicy;
    }
    /**
     * Identifies the SAML authentication context class for the assertion’s authentication statement
     * 
     */
    @Export(name="authnContextClassRef", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authnContextClassRef;

    /**
     * @return Identifies the SAML authentication context class for the assertion’s authentication statement
     * 
     */
    public Output<Optional<String>> authnContextClassRef() {
        return Codegen.optional(this.authnContextClassRef);
    }
    /**
     * Display auto submit toolbar. Default is: `false`
     * 
     */
    @Export(name="autoSubmitToolbar", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoSubmitToolbar;

    /**
     * @return Display auto submit toolbar. Default is: `false`
     * 
     */
    public Output<Optional<Boolean>> autoSubmitToolbar() {
        return Codegen.optional(this.autoSubmitToolbar);
    }
    /**
     * cert from SAML XML metadata payload
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return cert from SAML XML metadata payload
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    @Export(name="defaultRelayState", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultRelayState;

    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    public Output<Optional<String>> defaultRelayState() {
        return Codegen.optional(this.defaultRelayState);
    }
    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     * 
     */
    @Export(name="destination", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> destination;

    /**
     * @return Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     * 
     */
    public Output<Optional<String>> destination() {
        return Codegen.optional(this.destination);
    }
    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     * 
     */
    @Export(name="digestAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> digestAlgorithm;

    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response
     * 
     */
    public Output<Optional<String>> digestAlgorithm() {
        return Codegen.optional(this.digestAlgorithm);
    }
    /**
     * The url that can be used to embed this application in other portals.
     * 
     */
    @Export(name="embedUrl", refs={String.class}, tree="[0]")
    private Output<String> embedUrl;

    /**
     * @return The url that can be used to embed this application in other portals.
     * 
     */
    public Output<String> embedUrl() {
        return this.embedUrl;
    }
    /**
     * Application notes for end users.
     * 
     */
    @Export(name="enduserNote", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enduserNote;

    /**
     * @return Application notes for end users.
     * 
     */
    public Output<Optional<String>> enduserNote() {
        return Codegen.optional(this.enduserNote);
    }
    /**
     * Entity ID, the ID portion of the entity_url
     * 
     */
    @Export(name="entityKey", refs={String.class}, tree="[0]")
    private Output<String> entityKey;

    /**
     * @return Entity ID, the ID portion of the entity_url
     * 
     */
    public Output<String> entityKey() {
        return this.entityKey;
    }
    /**
     * Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     * 
     */
    @Export(name="entityUrl", refs={String.class}, tree="[0]")
    private Output<String> entityUrl;

    /**
     * @return Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
     * 
     */
    public Output<String> entityUrl() {
        return this.entityUrl;
    }
    /**
     * features to enable
     * 
     */
    @Export(name="features", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> features;

    /**
     * @return features to enable
     * 
     */
    public Output<List<String>> features() {
        return this.features;
    }
    /**
     * Do not display application icon on mobile app
     * 
     */
    @Export(name="hideIos", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hideIos;

    /**
     * @return Do not display application icon on mobile app
     * 
     */
    public Output<Optional<Boolean>> hideIos() {
        return Codegen.optional(this.hideIos);
    }
    /**
     * Do not display application icon to users
     * 
     */
    @Export(name="hideWeb", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hideWeb;

    /**
     * @return Do not display application icon to users
     * 
     */
    public Output<Optional<Boolean>> hideWeb() {
        return Codegen.optional(this.hideWeb);
    }
    /**
     * Prompt user to re-authenticate if SP asks for it. Default is: `false`
     * 
     */
    @Export(name="honorForceAuthn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> honorForceAuthn;

    /**
     * @return Prompt user to re-authenticate if SP asks for it. Default is: `false`
     * 
     */
    public Output<Optional<Boolean>> honorForceAuthn() {
        return Codegen.optional(this.honorForceAuthn);
    }
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    @Export(name="httpPostBinding", refs={String.class}, tree="[0]")
    private Output<String> httpPostBinding;

    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    public Output<String> httpPostBinding() {
        return this.httpPostBinding;
    }
    /**
     * urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    @Export(name="httpRedirectBinding", refs={String.class}, tree="[0]")
    private Output<String> httpRedirectBinding;

    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    public Output<String> httpRedirectBinding() {
        return this.httpRedirectBinding;
    }
    /**
     * SAML issuer ID
     * 
     */
    @Export(name="idpIssuer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idpIssuer;

    /**
     * @return SAML issuer ID
     * 
     */
    public Output<Optional<String>> idpIssuer() {
        return Codegen.optional(this.idpIssuer);
    }
    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     * 
     */
    @Export(name="implicitAssignment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> implicitAssignment;

    /**
     * @return *Early Access Property*. Enable Federation Broker Mode.
     * 
     */
    public Output<Optional<Boolean>> implicitAssignment() {
        return Codegen.optional(this.implicitAssignment);
    }
    /**
     * Saml Inline Hook setting
     * 
     */
    @Export(name="inlineHookId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> inlineHookId;

    /**
     * @return Saml Inline Hook setting
     * 
     */
    public Output<Optional<String>> inlineHookId() {
        return Codegen.optional(this.inlineHookId);
    }
    /**
     * Certificate ID
     * 
     */
    @Export(name="keyId", refs={String.class}, tree="[0]")
    private Output<String> keyId;

    /**
     * @return Certificate ID
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }
    /**
     * Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `key_years_valid`
     * 
     */
    @Export(name="keyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyName;

    /**
     * @return Certificate name. This modulates the rotation of keys. New name == new key. Required to be set with `key_years_valid`
     * 
     */
    public Output<Optional<String>> keyName() {
        return Codegen.optional(this.keyName);
    }
    /**
     * Number of years the certificate is valid (2 - 10 years).
     * 
     */
    @Export(name="keyYearsValid", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> keyYearsValid;

    /**
     * @return Number of years the certificate is valid (2 - 10 years).
     * 
     */
    public Output<Optional<Integer>> keyYearsValid() {
        return Codegen.optional(this.keyYearsValid);
    }
    /**
     * Application keys
     * 
     */
    @Export(name="keys", refs={List.class,SamlKey.class}, tree="[0,1]")
    private Output<List<SamlKey>> keys;

    /**
     * @return Application keys
     * 
     */
    public Output<List<SamlKey>> keys() {
        return this.keys;
    }
    /**
     * The Application&#39;s display name.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return The Application&#39;s display name.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    @Export(name="logo", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> logo;

    /**
     * @return Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    public Output<Optional<String>> logo() {
        return Codegen.optional(this.logo);
    }
    /**
     * URL of the application&#39;s logo
     * 
     */
    @Export(name="logoUrl", refs={String.class}, tree="[0]")
    private Output<String> logoUrl;

    /**
     * @return URL of the application&#39;s logo
     * 
     */
    public Output<String> logoUrl() {
        return this.logoUrl;
    }
    /**
     * SAML xml metadata payload
     * 
     */
    @Export(name="metadata", refs={String.class}, tree="[0]")
    private Output<String> metadata;

    /**
     * @return SAML xml metadata payload
     * 
     */
    public Output<String> metadata() {
        return this.metadata;
    }
    /**
     * SAML xml metadata URL
     * 
     */
    @Export(name="metadataUrl", refs={String.class}, tree="[0]")
    private Output<String> metadataUrl;

    /**
     * @return SAML xml metadata URL
     * 
     */
    public Output<String> metadataUrl() {
        return this.metadataUrl;
    }
    /**
     * Name of the app.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the app.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Name of application from the Okta Integration Network. For instance &#39;slack&#39;. If not included a custom app will be created.  If not provided the following arguments are required:
     * &#39;sso*url&#39;
     * &#39;recipient&#39;
     * &#39;destination&#39;
     * &#39;audience&#39;
     * &#39;subject*name*id*template&#39;
     * &#39;subject*name*id*format&#39;
     * &#39;signature*algorithm&#39;
     * &#39;digest*algorithm&#39;
     * &#39;authn*context*class*ref&#39;
     * 
     */
    @Export(name="preconfiguredApp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> preconfiguredApp;

    /**
     * @return Name of application from the Okta Integration Network. For instance &#39;slack&#39;. If not included a custom app will be created.  If not provided the following arguments are required:
     * &#39;sso*url&#39;
     * &#39;recipient&#39;
     * &#39;destination&#39;
     * &#39;audience&#39;
     * &#39;subject*name*id*template&#39;
     * &#39;subject*name*id*format&#39;
     * &#39;signature*algorithm&#39;
     * &#39;digest*algorithm&#39;
     * &#39;authn*context*class*ref&#39;
     * 
     */
    public Output<Optional<String>> preconfiguredApp() {
        return Codegen.optional(this.preconfiguredApp);
    }
    /**
     * The location where the app may present the SAML assertion
     * 
     */
    @Export(name="recipient", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> recipient;

    /**
     * @return The location where the app may present the SAML assertion
     * 
     */
    public Output<Optional<String>> recipient() {
        return Codegen.optional(this.recipient);
    }
    /**
     * Denotes whether the request is compressed or not.
     * 
     */
    @Export(name="requestCompressed", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requestCompressed;

    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Output<Optional<Boolean>> requestCompressed() {
        return Codegen.optional(this.requestCompressed);
    }
    /**
     * Determines whether the SAML auth response message is digitally signed
     * 
     */
    @Export(name="responseSigned", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> responseSigned;

    /**
     * @return Determines whether the SAML auth response message is digitally signed
     * 
     */
    public Output<Optional<Boolean>> responseSigned() {
        return Codegen.optional(this.responseSigned);
    }
    /**
     * SAML Signed Request enabled
     * 
     */
    @Export(name="samlSignedRequestEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> samlSignedRequestEnabled;

    /**
     * @return SAML Signed Request enabled
     * 
     */
    public Output<Optional<Boolean>> samlSignedRequestEnabled() {
        return Codegen.optional(this.samlSignedRequestEnabled);
    }
    /**
     * SAML version for the app&#39;s sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     * 
     */
    @Export(name="samlVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> samlVersion;

    /**
     * @return SAML version for the app&#39;s sign-on mode. Valid values are: `2.0` or `1.1`. Default is `2.0`
     * 
     */
    public Output<Optional<String>> samlVersion() {
        return Codegen.optional(this.samlVersion);
    }
    /**
     * Sign on mode of application.
     * 
     */
    @Export(name="signOnMode", refs={String.class}, tree="[0]")
    private Output<String> signOnMode;

    /**
     * @return Sign on mode of application.
     * 
     */
    public Output<String> signOnMode() {
        return this.signOnMode;
    }
    /**
     * Signature algorithm used to digitally sign the assertion and response
     * 
     */
    @Export(name="signatureAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> signatureAlgorithm;

    /**
     * @return Signature algorithm used to digitally sign the assertion and response
     * 
     */
    public Output<Optional<String>> signatureAlgorithm() {
        return Codegen.optional(this.signatureAlgorithm);
    }
    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     * 
     */
    @Export(name="singleLogoutCertificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> singleLogoutCertificate;

    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests. Note: should be provided without `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`, see [official documentation](https://developer.okta.com/docs/reference/api/apps/#service-provider-certificate).
     * 
     */
    public Output<Optional<String>> singleLogoutCertificate() {
        return Codegen.optional(this.singleLogoutCertificate);
    }
    /**
     * The issuer of the Service Provider that generates the Single Logout request
     * 
     */
    @Export(name="singleLogoutIssuer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> singleLogoutIssuer;

    /**
     * @return The issuer of the Service Provider that generates the Single Logout request
     * 
     */
    public Output<Optional<String>> singleLogoutIssuer() {
        return Codegen.optional(this.singleLogoutIssuer);
    }
    /**
     * The location where the logout response is sent
     * 
     */
    @Export(name="singleLogoutUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> singleLogoutUrl;

    /**
     * @return The location where the logout response is sent
     * 
     */
    public Output<Optional<String>> singleLogoutUrl() {
        return Codegen.optional(this.singleLogoutUrl);
    }
    /**
     * SAML SP issuer ID
     * 
     */
    @Export(name="spIssuer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> spIssuer;

    /**
     * @return SAML SP issuer ID
     * 
     */
    public Output<Optional<String>> spIssuer() {
        return Codegen.optional(this.spIssuer);
    }
    /**
     * Single Sign On URL
     * 
     */
    @Export(name="ssoUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ssoUrl;

    /**
     * @return Single Sign On URL
     * 
     */
    public Output<Optional<String>> ssoUrl() {
        return Codegen.optional(this.ssoUrl);
    }
    /**
     * Status of application. By default, it is `ACTIVE`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Status of application. By default, it is `ACTIVE`
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Identifies the SAML processing rules.
     * 
     */
    @Export(name="subjectNameIdFormat", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subjectNameIdFormat;

    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    public Output<Optional<String>> subjectNameIdFormat() {
        return Codegen.optional(this.subjectNameIdFormat);
    }
    /**
     * Template for app user&#39;s username when a user is assigned to the app
     * 
     */
    @Export(name="subjectNameIdTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subjectNameIdTemplate;

    /**
     * @return Template for app user&#39;s username when a user is assigned to the app
     * 
     */
    public Output<Optional<String>> subjectNameIdTemplate() {
        return Codegen.optional(this.subjectNameIdTemplate);
    }
    /**
     * Username template. Default: `${source.login}`
     * 
     */
    @Export(name="userNameTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userNameTemplate;

    /**
     * @return Username template. Default: `${source.login}`
     * 
     */
    public Output<Optional<String>> userNameTemplate() {
        return Codegen.optional(this.userNameTemplate);
    }
    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    @Export(name="userNameTemplatePushStatus", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userNameTemplatePushStatus;

    /**
     * @return Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    public Output<Optional<String>> userNameTemplatePushStatus() {
        return Codegen.optional(this.userNameTemplatePushStatus);
    }
    /**
     * Username template suffix
     * 
     */
    @Export(name="userNameTemplateSuffix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userNameTemplateSuffix;

    /**
     * @return Username template suffix
     * 
     */
    public Output<Optional<String>> userNameTemplateSuffix() {
        return Codegen.optional(this.userNameTemplateSuffix);
    }
    /**
     * Username template type. Default: `BUILT_IN`
     * 
     */
    @Export(name="userNameTemplateType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userNameTemplateType;

    /**
     * @return Username template type. Default: `BUILT_IN`
     * 
     */
    public Output<Optional<String>> userNameTemplateType() {
        return Codegen.optional(this.userNameTemplateType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Saml(java.lang.String name) {
        this(name, SamlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Saml(java.lang.String name, SamlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Saml(java.lang.String name, SamlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:app/saml:Saml", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Saml(java.lang.String name, Output<java.lang.String> id, @Nullable SamlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:app/saml:Saml", name, state, makeResourceOptions(options, id), false);
    }

    private static SamlArgs makeArgs(SamlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SamlArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Saml get(java.lang.String name, Output<java.lang.String> id, @Nullable SamlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Saml(name, id, state, options);
    }
}
