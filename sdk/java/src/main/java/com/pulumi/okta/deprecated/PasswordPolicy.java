// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.deprecated;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.deprecated.PasswordPolicyArgs;
import com.pulumi.okta.deprecated.inputs.PasswordPolicyState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * @deprecated
 * Deprecated. Use policy.Password instead. This resource will be removed in version 4.0 of this provider.
 * 
 */
@Deprecated /* Deprecated. Use policy.Password instead. This resource will be removed in version 4.0 of this provider. */
@ResourceType(type="okta:deprecated/passwordPolicy:PasswordPolicy")
public class PasswordPolicy extends com.pulumi.resources.CustomResource {
    /**
     * Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
     * 
     */
    @Export(name="authProvider", type=String.class, parameters={})
    private Output</* @Nullable */ String> authProvider;

    /**
     * @return Authentication Provider: OKTA, ACTIVE_DIRECTORY or LDAP
     * 
     */
    public Output<Optional<String>> authProvider() {
        return Codegen.optional(this.authProvider);
    }
    /**
     * Enable or disable voice call recovery: ACTIVE or INACTIVE.
     * 
     */
    @Export(name="callRecovery", type=String.class, parameters={})
    private Output</* @Nullable */ String> callRecovery;

    /**
     * @return Enable or disable voice call recovery: ACTIVE or INACTIVE.
     * 
     */
    public Output<Optional<String>> callRecovery() {
        return Codegen.optional(this.callRecovery);
    }
    /**
     * Policy Description
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Policy Description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Enable or disable email password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Export(name="emailRecovery", type=String.class, parameters={})
    private Output</* @Nullable */ String> emailRecovery;

    /**
     * @return Enable or disable email password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Output<Optional<String>> emailRecovery() {
        return Codegen.optional(this.emailRecovery);
    }
    /**
     * List of Group IDs to Include
     * 
     */
    @Export(name="groupsIncludeds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> groupsIncludeds;

    /**
     * @return List of Group IDs to Include
     * 
     */
    public Output<Optional<List<String>>> groupsIncludeds() {
        return Codegen.optional(this.groupsIncludeds);
    }
    /**
     * Policy Name
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Policy Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit.
     * 
     */
    @Export(name="passwordAutoUnlockMinutes", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordAutoUnlockMinutes;

    /**
     * @return Number of minutes before a locked account is unlocked: 0 = no limit.
     * 
     */
    public Output<Optional<Integer>> passwordAutoUnlockMinutes() {
        return Codegen.optional(this.passwordAutoUnlockMinutes);
    }
    /**
     * Check Passwords Against Common Password Dictionary.
     * 
     */
    @Export(name="passwordDictionaryLookup", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> passwordDictionaryLookup;

    /**
     * @return Check Passwords Against Common Password Dictionary.
     * 
     */
    public Output<Optional<Boolean>> passwordDictionaryLookup() {
        return Codegen.optional(this.passwordDictionaryLookup);
    }
    /**
     * User firstName attribute must be excluded from the password
     * 
     */
    @Export(name="passwordExcludeFirstName", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> passwordExcludeFirstName;

    /**
     * @return User firstName attribute must be excluded from the password
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeFirstName() {
        return Codegen.optional(this.passwordExcludeFirstName);
    }
    /**
     * User lastName attribute must be excluded from the password
     * 
     */
    @Export(name="passwordExcludeLastName", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> passwordExcludeLastName;

    /**
     * @return User lastName attribute must be excluded from the password
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeLastName() {
        return Codegen.optional(this.passwordExcludeLastName);
    }
    /**
     * If the user name must be excluded from the password.
     * 
     */
    @Export(name="passwordExcludeUsername", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> passwordExcludeUsername;

    /**
     * @return If the user name must be excluded from the password.
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeUsername() {
        return Codegen.optional(this.passwordExcludeUsername);
    }
    /**
     * Length in days a user will be warned before password expiry: 0 = no warning.
     * 
     */
    @Export(name="passwordExpireWarnDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordExpireWarnDays;

    /**
     * @return Length in days a user will be warned before password expiry: 0 = no warning.
     * 
     */
    public Output<Optional<Integer>> passwordExpireWarnDays() {
        return Codegen.optional(this.passwordExpireWarnDays);
    }
    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none.
     * 
     */
    @Export(name="passwordHistoryCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordHistoryCount;

    /**
     * @return Number of distinct passwords that must be created before they can be reused: 0 = none.
     * 
     */
    public Output<Optional<Integer>> passwordHistoryCount() {
        return Codegen.optional(this.passwordHistoryCount);
    }
    /**
     * Notification channels to use to notify a user when their account has been locked.
     * 
     */
    @Export(name="passwordLockoutNotificationChannels", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> passwordLockoutNotificationChannels;

    /**
     * @return Notification channels to use to notify a user when their account has been locked.
     * 
     */
    public Output<Optional<List<String>>> passwordLockoutNotificationChannels() {
        return Codegen.optional(this.passwordLockoutNotificationChannels);
    }
    /**
     * Length in days a password is valid before expiry: 0 = no limit.
     * 
     */
    @Export(name="passwordMaxAgeDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMaxAgeDays;

    /**
     * @return Length in days a password is valid before expiry: 0 = no limit.
     * 
     */
    public Output<Optional<Integer>> passwordMaxAgeDays() {
        return Codegen.optional(this.passwordMaxAgeDays);
    }
    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
     * 
     */
    @Export(name="passwordMaxLockoutAttempts", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMaxLockoutAttempts;

    /**
     * @return Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
     * 
     */
    public Output<Optional<Integer>> passwordMaxLockoutAttempts() {
        return Codegen.optional(this.passwordMaxLockoutAttempts);
    }
    /**
     * Minimum time interval in minutes between password changes: 0 = no limit.
     * 
     */
    @Export(name="passwordMinAgeMinutes", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinAgeMinutes;

    /**
     * @return Minimum time interval in minutes between password changes: 0 = no limit.
     * 
     */
    public Output<Optional<Integer>> passwordMinAgeMinutes() {
        return Codegen.optional(this.passwordMinAgeMinutes);
    }
    /**
     * Minimum password length.
     * 
     */
    @Export(name="passwordMinLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinLength;

    /**
     * @return Minimum password length.
     * 
     */
    public Output<Optional<Integer>> passwordMinLength() {
        return Codegen.optional(this.passwordMinLength);
    }
    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinLowercase", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinLowercase;

    /**
     * @return If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinLowercase() {
        return Codegen.optional(this.passwordMinLowercase);
    }
    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinNumber", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinNumber;

    /**
     * @return If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinNumber() {
        return Codegen.optional(this.passwordMinNumber);
    }
    /**
     * If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinSymbol", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinSymbol;

    /**
     * @return If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinSymbol() {
        return Codegen.optional(this.passwordMinSymbol);
    }
    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinUppercase", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> passwordMinUppercase;

    /**
     * @return If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinUppercase() {
        return Codegen.optional(this.passwordMinUppercase);
    }
    /**
     * If a user should be informed when their account is locked.
     * 
     */
    @Export(name="passwordShowLockoutFailures", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> passwordShowLockoutFailures;

    /**
     * @return If a user should be informed when their account is locked.
     * 
     */
    public Output<Optional<Boolean>> passwordShowLockoutFailures() {
        return Codegen.optional(this.passwordShowLockoutFailures);
    }
    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
     * priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    @Export(name="priority", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
     * priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    /**
     * Min length of the password recovery question answer.
     * 
     */
    @Export(name="questionMinLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> questionMinLength;

    /**
     * @return Min length of the password recovery question answer.
     * 
     */
    public Output<Optional<Integer>> questionMinLength() {
        return Codegen.optional(this.questionMinLength);
    }
    /**
     * Enable or disable security question password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Export(name="questionRecovery", type=String.class, parameters={})
    private Output</* @Nullable */ String> questionRecovery;

    /**
     * @return Enable or disable security question password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Output<Optional<String>> questionRecovery() {
        return Codegen.optional(this.questionRecovery);
    }
    /**
     * Lifetime in minutes of the recovery email token.
     * 
     */
    @Export(name="recoveryEmailToken", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> recoveryEmailToken;

    /**
     * @return Lifetime in minutes of the recovery email token.
     * 
     */
    public Output<Optional<Integer>> recoveryEmailToken() {
        return Codegen.optional(this.recoveryEmailToken);
    }
    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s
     * Windows account.
     * 
     */
    @Export(name="skipUnlock", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> skipUnlock;

    /**
     * @return When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s
     * Windows account.
     * 
     */
    public Output<Optional<Boolean>> skipUnlock() {
        return Codegen.optional(this.skipUnlock);
    }
    /**
     * Enable or disable SMS password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Export(name="smsRecovery", type=String.class, parameters={})
    private Output</* @Nullable */ String> smsRecovery;

    /**
     * @return Enable or disable SMS password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Output<Optional<String>> smsRecovery() {
        return Codegen.optional(this.smsRecovery);
    }
    /**
     * Policy Status: ACTIVE or INACTIVE.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return Policy Status: ACTIVE or INACTIVE.
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PasswordPolicy(String name) {
        this(name, PasswordPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PasswordPolicy(String name, @Nullable PasswordPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PasswordPolicy(String name, @Nullable PasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:deprecated/passwordPolicy:PasswordPolicy", name, args == null ? PasswordPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PasswordPolicy(String name, Output<String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:deprecated/passwordPolicy:PasswordPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PasswordPolicy get(String name, Output<String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PasswordPolicy(name, id, state, options);
    }
}
