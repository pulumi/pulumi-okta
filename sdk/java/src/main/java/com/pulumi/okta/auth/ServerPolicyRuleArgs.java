// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerPolicyRuleArgs Empty = new ServerPolicyRuleArgs();

    /**
     * Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
     * 
     */
    @Import(name="accessTokenLifetimeMinutes")
    private @Nullable Output<Integer> accessTokenLifetimeMinutes;

    /**
     * @return Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
     * 
     */
    public Optional<Output<Integer>> accessTokenLifetimeMinutes() {
        return Optional.ofNullable(this.accessTokenLifetimeMinutes);
    }

    /**
     * Auth Server ID.
     * 
     */
    @Import(name="authServerId", required=true)
    private Output<String> authServerId;

    /**
     * @return Auth Server ID.
     * 
     */
    public Output<String> authServerId() {
        return this.authServerId;
    }

    /**
     * Accepted grant type values, `&#34;authorization_code&#34;`, `&#34;implicit&#34;`, `&#34;password&#34;`, `&#34;client_credentials&#34;`,
     * `&#34;urn:ietf:params:oauth:grant-type:saml2-bearer&#34;` (*Early Access Property*), `&#34;urn:ietf:params:oauth:grant-type:token-exchange&#34;` (*Early Access Property*),
     * `&#34;urn:ietf:params:oauth:grant-type:device_code&#34;` (*Early Access Property*), `&#34;interaction_code&#34;` (*OIE only*). For `&#34;implicit&#34;` value either `user_whitelist` or `group_whitelist` should be set.
     * 
     */
    @Import(name="grantTypeWhitelists", required=true)
    private Output<List<String>> grantTypeWhitelists;

    /**
     * @return Accepted grant type values, `&#34;authorization_code&#34;`, `&#34;implicit&#34;`, `&#34;password&#34;`, `&#34;client_credentials&#34;`,
     * `&#34;urn:ietf:params:oauth:grant-type:saml2-bearer&#34;` (*Early Access Property*), `&#34;urn:ietf:params:oauth:grant-type:token-exchange&#34;` (*Early Access Property*),
     * `&#34;urn:ietf:params:oauth:grant-type:device_code&#34;` (*Early Access Property*), `&#34;interaction_code&#34;` (*OIE only*). For `&#34;implicit&#34;` value either `user_whitelist` or `group_whitelist` should be set.
     * 
     */
    public Output<List<String>> grantTypeWhitelists() {
        return this.grantTypeWhitelists;
    }

    /**
     * Specifies a set of Groups whose Users are to be excluded.
     * 
     */
    @Import(name="groupBlacklists")
    private @Nullable Output<List<String>> groupBlacklists;

    /**
     * @return Specifies a set of Groups whose Users are to be excluded.
     * 
     */
    public Optional<Output<List<String>>> groupBlacklists() {
        return Optional.ofNullable(this.groupBlacklists);
    }

    /**
     * Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `&#34;EVERYONE&#34;`.
     * 
     */
    @Import(name="groupWhitelists")
    private @Nullable Output<List<String>> groupWhitelists;

    /**
     * @return Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `&#34;EVERYONE&#34;`.
     * 
     */
    public Optional<Output<List<String>>> groupWhitelists() {
        return Optional.ofNullable(this.groupWhitelists);
    }

    /**
     * The ID of the inline token to trigger.
     * 
     */
    @Import(name="inlineHookId")
    private @Nullable Output<String> inlineHookId;

    /**
     * @return The ID of the inline token to trigger.
     * 
     */
    public Optional<Output<String>> inlineHookId() {
        return Optional.ofNullable(this.inlineHookId);
    }

    /**
     * Auth Server Policy Rule name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Auth Server Policy Rule name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Auth Server Policy ID.
     * 
     */
    @Import(name="policyId", required=true)
    private Output<String> policyId;

    /**
     * @return Auth Server Policy ID.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }

    /**
     * Priority of the auth server policy rule.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return Priority of the auth server policy rule.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * Lifetime of refresh token.
     * 
     */
    @Import(name="refreshTokenLifetimeMinutes")
    private @Nullable Output<Integer> refreshTokenLifetimeMinutes;

    /**
     * @return Lifetime of refresh token.
     * 
     */
    public Optional<Output<Integer>> refreshTokenLifetimeMinutes() {
        return Optional.ofNullable(this.refreshTokenLifetimeMinutes);
    }

    /**
     * Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
     * `&#34;refresh_token_window_minutes&#34;` must be between `&#34;access_token_lifetime_minutes&#34;` and `&#34;refresh_token_lifetime_minutes&#34;`.
     * 
     */
    @Import(name="refreshTokenWindowMinutes")
    private @Nullable Output<Integer> refreshTokenWindowMinutes;

    /**
     * @return Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
     * `&#34;refresh_token_window_minutes&#34;` must be between `&#34;access_token_lifetime_minutes&#34;` and `&#34;refresh_token_lifetime_minutes&#34;`.
     * 
     */
    public Optional<Output<Integer>> refreshTokenWindowMinutes() {
        return Optional.ofNullable(this.refreshTokenWindowMinutes);
    }

    /**
     * Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `&#34;*&#34;`.
     * 
     */
    @Import(name="scopeWhitelists")
    private @Nullable Output<List<String>> scopeWhitelists;

    /**
     * @return Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `&#34;*&#34;`.
     * 
     */
    public Optional<Output<List<String>>> scopeWhitelists() {
        return Optional.ofNullable(this.scopeWhitelists);
    }

    /**
     * The status of the Auth Server Policy Rule.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Auth Server Policy Rule.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of the Auth Server Policy Rule.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the Auth Server Policy Rule.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Specifies a set of Users to be excluded.
     * 
     */
    @Import(name="userBlacklists")
    private @Nullable Output<List<String>> userBlacklists;

    /**
     * @return Specifies a set of Users to be excluded.
     * 
     */
    public Optional<Output<List<String>>> userBlacklists() {
        return Optional.ofNullable(this.userBlacklists);
    }

    /**
     * Specifies a set of Users to be included.
     * 
     */
    @Import(name="userWhitelists")
    private @Nullable Output<List<String>> userWhitelists;

    /**
     * @return Specifies a set of Users to be included.
     * 
     */
    public Optional<Output<List<String>>> userWhitelists() {
        return Optional.ofNullable(this.userWhitelists);
    }

    private ServerPolicyRuleArgs() {}

    private ServerPolicyRuleArgs(ServerPolicyRuleArgs $) {
        this.accessTokenLifetimeMinutes = $.accessTokenLifetimeMinutes;
        this.authServerId = $.authServerId;
        this.grantTypeWhitelists = $.grantTypeWhitelists;
        this.groupBlacklists = $.groupBlacklists;
        this.groupWhitelists = $.groupWhitelists;
        this.inlineHookId = $.inlineHookId;
        this.name = $.name;
        this.policyId = $.policyId;
        this.priority = $.priority;
        this.refreshTokenLifetimeMinutes = $.refreshTokenLifetimeMinutes;
        this.refreshTokenWindowMinutes = $.refreshTokenWindowMinutes;
        this.scopeWhitelists = $.scopeWhitelists;
        this.status = $.status;
        this.type = $.type;
        this.userBlacklists = $.userBlacklists;
        this.userWhitelists = $.userWhitelists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerPolicyRuleArgs $;

        public Builder() {
            $ = new ServerPolicyRuleArgs();
        }

        public Builder(ServerPolicyRuleArgs defaults) {
            $ = new ServerPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessTokenLifetimeMinutes Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenLifetimeMinutes(@Nullable Output<Integer> accessTokenLifetimeMinutes) {
            $.accessTokenLifetimeMinutes = accessTokenLifetimeMinutes;
            return this;
        }

        /**
         * @param accessTokenLifetimeMinutes Lifetime of access token. Can be set to a value between 5 and 1440 minutes. Default is `60`.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenLifetimeMinutes(Integer accessTokenLifetimeMinutes) {
            return accessTokenLifetimeMinutes(Output.of(accessTokenLifetimeMinutes));
        }

        /**
         * @param authServerId Auth Server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId Auth Server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param grantTypeWhitelists Accepted grant type values, `&#34;authorization_code&#34;`, `&#34;implicit&#34;`, `&#34;password&#34;`, `&#34;client_credentials&#34;`,
         * `&#34;urn:ietf:params:oauth:grant-type:saml2-bearer&#34;` (*Early Access Property*), `&#34;urn:ietf:params:oauth:grant-type:token-exchange&#34;` (*Early Access Property*),
         * `&#34;urn:ietf:params:oauth:grant-type:device_code&#34;` (*Early Access Property*), `&#34;interaction_code&#34;` (*OIE only*). For `&#34;implicit&#34;` value either `user_whitelist` or `group_whitelist` should be set.
         * 
         * @return builder
         * 
         */
        public Builder grantTypeWhitelists(Output<List<String>> grantTypeWhitelists) {
            $.grantTypeWhitelists = grantTypeWhitelists;
            return this;
        }

        /**
         * @param grantTypeWhitelists Accepted grant type values, `&#34;authorization_code&#34;`, `&#34;implicit&#34;`, `&#34;password&#34;`, `&#34;client_credentials&#34;`,
         * `&#34;urn:ietf:params:oauth:grant-type:saml2-bearer&#34;` (*Early Access Property*), `&#34;urn:ietf:params:oauth:grant-type:token-exchange&#34;` (*Early Access Property*),
         * `&#34;urn:ietf:params:oauth:grant-type:device_code&#34;` (*Early Access Property*), `&#34;interaction_code&#34;` (*OIE only*). For `&#34;implicit&#34;` value either `user_whitelist` or `group_whitelist` should be set.
         * 
         * @return builder
         * 
         */
        public Builder grantTypeWhitelists(List<String> grantTypeWhitelists) {
            return grantTypeWhitelists(Output.of(grantTypeWhitelists));
        }

        /**
         * @param grantTypeWhitelists Accepted grant type values, `&#34;authorization_code&#34;`, `&#34;implicit&#34;`, `&#34;password&#34;`, `&#34;client_credentials&#34;`,
         * `&#34;urn:ietf:params:oauth:grant-type:saml2-bearer&#34;` (*Early Access Property*), `&#34;urn:ietf:params:oauth:grant-type:token-exchange&#34;` (*Early Access Property*),
         * `&#34;urn:ietf:params:oauth:grant-type:device_code&#34;` (*Early Access Property*), `&#34;interaction_code&#34;` (*OIE only*). For `&#34;implicit&#34;` value either `user_whitelist` or `group_whitelist` should be set.
         * 
         * @return builder
         * 
         */
        public Builder grantTypeWhitelists(String... grantTypeWhitelists) {
            return grantTypeWhitelists(List.of(grantTypeWhitelists));
        }

        /**
         * @param groupBlacklists Specifies a set of Groups whose Users are to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupBlacklists(@Nullable Output<List<String>> groupBlacklists) {
            $.groupBlacklists = groupBlacklists;
            return this;
        }

        /**
         * @param groupBlacklists Specifies a set of Groups whose Users are to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupBlacklists(List<String> groupBlacklists) {
            return groupBlacklists(Output.of(groupBlacklists));
        }

        /**
         * @param groupBlacklists Specifies a set of Groups whose Users are to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupBlacklists(String... groupBlacklists) {
            return groupBlacklists(List.of(groupBlacklists));
        }

        /**
         * @param groupWhitelists Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `&#34;EVERYONE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder groupWhitelists(@Nullable Output<List<String>> groupWhitelists) {
            $.groupWhitelists = groupWhitelists;
            return this;
        }

        /**
         * @param groupWhitelists Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `&#34;EVERYONE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder groupWhitelists(List<String> groupWhitelists) {
            return groupWhitelists(Output.of(groupWhitelists));
        }

        /**
         * @param groupWhitelists Specifies a set of Groups whose Users are to be included. Can be set to Group ID or to the following: `&#34;EVERYONE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder groupWhitelists(String... groupWhitelists) {
            return groupWhitelists(List.of(groupWhitelists));
        }

        /**
         * @param inlineHookId The ID of the inline token to trigger.
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(@Nullable Output<String> inlineHookId) {
            $.inlineHookId = inlineHookId;
            return this;
        }

        /**
         * @param inlineHookId The ID of the inline token to trigger.
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(String inlineHookId) {
            return inlineHookId(Output.of(inlineHookId));
        }

        /**
         * @param name Auth Server Policy Rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Auth Server Policy Rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyId Auth Server Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId Auth Server Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param priority Priority of the auth server policy rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the auth server policy rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param refreshTokenLifetimeMinutes Lifetime of refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenLifetimeMinutes(@Nullable Output<Integer> refreshTokenLifetimeMinutes) {
            $.refreshTokenLifetimeMinutes = refreshTokenLifetimeMinutes;
            return this;
        }

        /**
         * @param refreshTokenLifetimeMinutes Lifetime of refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenLifetimeMinutes(Integer refreshTokenLifetimeMinutes) {
            return refreshTokenLifetimeMinutes(Output.of(refreshTokenLifetimeMinutes));
        }

        /**
         * @param refreshTokenWindowMinutes Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
         * `&#34;refresh_token_window_minutes&#34;` must be between `&#34;access_token_lifetime_minutes&#34;` and `&#34;refresh_token_lifetime_minutes&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenWindowMinutes(@Nullable Output<Integer> refreshTokenWindowMinutes) {
            $.refreshTokenWindowMinutes = refreshTokenWindowMinutes;
            return this;
        }

        /**
         * @param refreshTokenWindowMinutes Window in which a refresh token can be used. It can be a value between 5 and 2628000 (5 years) minutes. Default is `10080` (7 days).
         * `&#34;refresh_token_window_minutes&#34;` must be between `&#34;access_token_lifetime_minutes&#34;` and `&#34;refresh_token_lifetime_minutes&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenWindowMinutes(Integer refreshTokenWindowMinutes) {
            return refreshTokenWindowMinutes(Output.of(refreshTokenWindowMinutes));
        }

        /**
         * @param scopeWhitelists Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `&#34;*&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder scopeWhitelists(@Nullable Output<List<String>> scopeWhitelists) {
            $.scopeWhitelists = scopeWhitelists;
            return this;
        }

        /**
         * @param scopeWhitelists Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `&#34;*&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder scopeWhitelists(List<String> scopeWhitelists) {
            return scopeWhitelists(Output.of(scopeWhitelists));
        }

        /**
         * @param scopeWhitelists Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `&#34;*&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder scopeWhitelists(String... scopeWhitelists) {
            return scopeWhitelists(List.of(scopeWhitelists));
        }

        /**
         * @param status The status of the Auth Server Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Auth Server Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The type of the Auth Server Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Auth Server Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userBlacklists Specifies a set of Users to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userBlacklists(@Nullable Output<List<String>> userBlacklists) {
            $.userBlacklists = userBlacklists;
            return this;
        }

        /**
         * @param userBlacklists Specifies a set of Users to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userBlacklists(List<String> userBlacklists) {
            return userBlacklists(Output.of(userBlacklists));
        }

        /**
         * @param userBlacklists Specifies a set of Users to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userBlacklists(String... userBlacklists) {
            return userBlacklists(List.of(userBlacklists));
        }

        /**
         * @param userWhitelists Specifies a set of Users to be included.
         * 
         * @return builder
         * 
         */
        public Builder userWhitelists(@Nullable Output<List<String>> userWhitelists) {
            $.userWhitelists = userWhitelists;
            return this;
        }

        /**
         * @param userWhitelists Specifies a set of Users to be included.
         * 
         * @return builder
         * 
         */
        public Builder userWhitelists(List<String> userWhitelists) {
            return userWhitelists(Output.of(userWhitelists));
        }

        /**
         * @param userWhitelists Specifies a set of Users to be included.
         * 
         * @return builder
         * 
         */
        public Builder userWhitelists(String... userWhitelists) {
            return userWhitelists(List.of(userWhitelists));
        }

        public ServerPolicyRuleArgs build() {
            $.authServerId = Objects.requireNonNull($.authServerId, "expected parameter 'authServerId' to be non-null");
            $.grantTypeWhitelists = Objects.requireNonNull($.grantTypeWhitelists, "expected parameter 'grantTypeWhitelists' to be non-null");
            $.policyId = Objects.requireNonNull($.policyId, "expected parameter 'policyId' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            return $;
        }
    }

}
