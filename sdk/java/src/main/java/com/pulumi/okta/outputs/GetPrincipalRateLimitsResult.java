// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPrincipalRateLimitsResult {
    /**
     * @return The ID of the user who created the principal rate limit.
     * 
     */
    private String createdBy;
    /**
     * @return The date and time when the principal rate limit was created.
     * 
     */
    private String createdDate;
    /**
     * @return The default concurrency percentage for the principal rate limit.
     * 
     */
    private Integer defaultConcurrencyPercentage;
    /**
     * @return The default percentage for the principal rate limit.
     * 
     */
    private Integer defaultPercentage;
    /**
     * @return The unique identifier of the principle rate limit entity.
     * 
     */
    private String id;
    private String lastUpdate;
    /**
     * @return The ID of the user who last updated the principal rate limit.
     * 
     */
    private String lastUpdatedBy;
    /**
     * @return The unique identifier of the Okta organization.
     * 
     */
    private String orgId;
    /**
     * @return The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    private String principalId;
    /**
     * @return The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    private String principalType;

    private GetPrincipalRateLimitsResult() {}
    /**
     * @return The ID of the user who created the principal rate limit.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return The date and time when the principal rate limit was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return The default concurrency percentage for the principal rate limit.
     * 
     */
    public Integer defaultConcurrencyPercentage() {
        return this.defaultConcurrencyPercentage;
    }
    /**
     * @return The default percentage for the principal rate limit.
     * 
     */
    public Integer defaultPercentage() {
        return this.defaultPercentage;
    }
    /**
     * @return The unique identifier of the principle rate limit entity.
     * 
     */
    public String id() {
        return this.id;
    }
    public String lastUpdate() {
        return this.lastUpdate;
    }
    /**
     * @return The ID of the user who last updated the principal rate limit.
     * 
     */
    public String lastUpdatedBy() {
        return this.lastUpdatedBy;
    }
    /**
     * @return The unique identifier of the Okta organization.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    public String principalType() {
        return this.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrincipalRateLimitsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdBy;
        private String createdDate;
        private Integer defaultConcurrencyPercentage;
        private Integer defaultPercentage;
        private String id;
        private String lastUpdate;
        private String lastUpdatedBy;
        private String orgId;
        private String principalId;
        private String principalType;
        public Builder() {}
        public Builder(GetPrincipalRateLimitsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.defaultConcurrencyPercentage = defaults.defaultConcurrencyPercentage;
    	      this.defaultPercentage = defaults.defaultPercentage;
    	      this.id = defaults.id;
    	      this.lastUpdate = defaults.lastUpdate;
    	      this.lastUpdatedBy = defaults.lastUpdatedBy;
    	      this.orgId = defaults.orgId;
    	      this.principalId = defaults.principalId;
    	      this.principalType = defaults.principalType;
        }

        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder defaultConcurrencyPercentage(Integer defaultConcurrencyPercentage) {
            if (defaultConcurrencyPercentage == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "defaultConcurrencyPercentage");
            }
            this.defaultConcurrencyPercentage = defaultConcurrencyPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPercentage(Integer defaultPercentage) {
            if (defaultPercentage == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "defaultPercentage");
            }
            this.defaultPercentage = defaultPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdate(String lastUpdate) {
            if (lastUpdate == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "lastUpdate");
            }
            this.lastUpdate = lastUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            if (lastUpdatedBy == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "lastUpdatedBy");
            }
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder principalId(String principalId) {
            if (principalId == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "principalId");
            }
            this.principalId = principalId;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            if (principalType == null) {
              throw new MissingRequiredPropertyException("GetPrincipalRateLimitsResult", "principalType");
            }
            this.principalType = principalType;
            return this;
        }
        public GetPrincipalRateLimitsResult build() {
            final var _resultValue = new GetPrincipalRateLimitsResult();
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.defaultConcurrencyPercentage = defaultConcurrencyPercentage;
            _resultValue.defaultPercentage = defaultPercentage;
            _resultValue.id = id;
            _resultValue.lastUpdate = lastUpdate;
            _resultValue.lastUpdatedBy = lastUpdatedBy;
            _resultValue.orgId = orgId;
            _resultValue.principalId = principalId;
            _resultValue.principalType = principalType;
            return _resultValue;
        }
    }
}
