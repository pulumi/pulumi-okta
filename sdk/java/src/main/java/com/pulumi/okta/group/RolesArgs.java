// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolesArgs Empty = new RolesArgs();

    /**
     * Admin roles associated with the group. It can be any of the following values `&#34;SUPER_ADMIN&#34;`, `&#34;ORG_ADMIN&#34;`, `&#34;APP_ADMIN&#34;`, `&#34;USER_ADMIN&#34;`, `&#34;HELP_DESK_ADMIN&#34;`, `&#34;READ_ONLY_ADMIN&#34;`, `&#34;MOBILE_ADMIN&#34;`, `&#34;API_ACCESS_MANAGEMENT_ADMIN&#34;`, `&#34;REPORT_ADMIN&#34;`, `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`.
     * 
     */
    @Import(name="adminRoles")
    private @Nullable Output<List<String>> adminRoles;

    /**
     * @return Admin roles associated with the group. It can be any of the following values `&#34;SUPER_ADMIN&#34;`, `&#34;ORG_ADMIN&#34;`, `&#34;APP_ADMIN&#34;`, `&#34;USER_ADMIN&#34;`, `&#34;HELP_DESK_ADMIN&#34;`, `&#34;READ_ONLY_ADMIN&#34;`, `&#34;MOBILE_ADMIN&#34;`, `&#34;API_ACCESS_MANAGEMENT_ADMIN&#34;`, `&#34;REPORT_ADMIN&#34;`, `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`.
     * 
     */
    public Optional<Output<List<String>>> adminRoles() {
        return Optional.ofNullable(this.adminRoles);
    }

    /**
     * The ID of group to attach admin roles to.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The ID of group to attach admin roles to.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    private RolesArgs() {}

    private RolesArgs(RolesArgs $) {
        this.adminRoles = $.adminRoles;
        this.groupId = $.groupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolesArgs $;

        public Builder() {
            $ = new RolesArgs();
        }

        public Builder(RolesArgs defaults) {
            $ = new RolesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRoles Admin roles associated with the group. It can be any of the following values `&#34;SUPER_ADMIN&#34;`, `&#34;ORG_ADMIN&#34;`, `&#34;APP_ADMIN&#34;`, `&#34;USER_ADMIN&#34;`, `&#34;HELP_DESK_ADMIN&#34;`, `&#34;READ_ONLY_ADMIN&#34;`, `&#34;MOBILE_ADMIN&#34;`, `&#34;API_ACCESS_MANAGEMENT_ADMIN&#34;`, `&#34;REPORT_ADMIN&#34;`, `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(@Nullable Output<List<String>> adminRoles) {
            $.adminRoles = adminRoles;
            return this;
        }

        /**
         * @param adminRoles Admin roles associated with the group. It can be any of the following values `&#34;SUPER_ADMIN&#34;`, `&#34;ORG_ADMIN&#34;`, `&#34;APP_ADMIN&#34;`, `&#34;USER_ADMIN&#34;`, `&#34;HELP_DESK_ADMIN&#34;`, `&#34;READ_ONLY_ADMIN&#34;`, `&#34;MOBILE_ADMIN&#34;`, `&#34;API_ACCESS_MANAGEMENT_ADMIN&#34;`, `&#34;REPORT_ADMIN&#34;`, `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(List<String> adminRoles) {
            return adminRoles(Output.of(adminRoles));
        }

        /**
         * @param adminRoles Admin roles associated with the group. It can be any of the following values `&#34;SUPER_ADMIN&#34;`, `&#34;ORG_ADMIN&#34;`, `&#34;APP_ADMIN&#34;`, `&#34;USER_ADMIN&#34;`, `&#34;HELP_DESK_ADMIN&#34;`, `&#34;READ_ONLY_ADMIN&#34;`, `&#34;MOBILE_ADMIN&#34;`, `&#34;API_ACCESS_MANAGEMENT_ADMIN&#34;`, `&#34;REPORT_ADMIN&#34;`, `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }

        /**
         * @param groupId The ID of group to attach admin roles to.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of group to attach admin roles to.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        public RolesArgs build() {
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            return $;
        }
    }

}
