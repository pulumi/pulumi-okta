// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.policy.inputs.RuleMfaAppExcludeArgs;
import com.pulumi.okta.policy.inputs.RuleMfaAppIncludeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleMfaState extends com.pulumi.resources.ResourceArgs {

    public static final RuleMfaState Empty = new RuleMfaState();

    /**
     * Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - &#39;id&#39;
     * - (Optional) Use if &#39;type&#39; is &#39;APP&#39; to indicate the application id to include. - &#39;name&#39; - (Optional) Use if the &#39;type&#39;
     *   is &#39;APP_TYPE&#39; to indicate the type of application(s) to include in instances where an entire group (i.e. &#39;yahoo_mail&#39;)
     *   of applications should be included. - &#39;type&#39; - (Required) One of: &#39;APP&#39;, &#39;APP_TYPE&#39;
     * 
     */
    @Import(name="appExcludes")
    private @Nullable Output<List<RuleMfaAppExcludeArgs>> appExcludes;

    /**
     * @return Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - &#39;id&#39;
     * - (Optional) Use if &#39;type&#39; is &#39;APP&#39; to indicate the application id to include. - &#39;name&#39; - (Optional) Use if the &#39;type&#39;
     *   is &#39;APP_TYPE&#39; to indicate the type of application(s) to include in instances where an entire group (i.e. &#39;yahoo_mail&#39;)
     *   of applications should be included. - &#39;type&#39; - (Required) One of: &#39;APP&#39;, &#39;APP_TYPE&#39;
     * 
     */
    public Optional<Output<List<RuleMfaAppExcludeArgs>>> appExcludes() {
        return Optional.ofNullable(this.appExcludes);
    }

    /**
     * Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations.
     * 
     */
    @Import(name="appIncludes")
    private @Nullable Output<List<RuleMfaAppIncludeArgs>> appIncludes;

    /**
     * @return Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations.
     * 
     */
    public Optional<Output<List<RuleMfaAppIncludeArgs>>> appIncludes() {
        return Optional.ofNullable(this.appIncludes);
    }

    /**
     * When a user should be prompted for MFA. It can be `&#34;CHALLENGE&#34;`, `&#34;LOGIN&#34;`, or `&#34;NEVER&#34;`.
     * 
     */
    @Import(name="enroll")
    private @Nullable Output<String> enroll;

    /**
     * @return When a user should be prompted for MFA. It can be `&#34;CHALLENGE&#34;`, `&#34;LOGIN&#34;`, or `&#34;NEVER&#34;`.
     * 
     */
    public Optional<Output<String>> enroll() {
        return Optional.ofNullable(this.enroll);
    }

    /**
     * Policy Rule Name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy Rule Name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    @Import(name="networkConnection")
    private @Nullable Output<String> networkConnection;

    /**
     * @return Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    public Optional<Output<String>> networkConnection() {
        return Optional.ofNullable(this.networkConnection);
    }

    /**
     * The network zones to exclude. Conflicts with `network_includes`.
     * 
     */
    @Import(name="networkExcludes")
    private @Nullable Output<List<String>> networkExcludes;

    /**
     * @return The network zones to exclude. Conflicts with `network_includes`.
     * 
     */
    public Optional<Output<List<String>>> networkExcludes() {
        return Optional.ofNullable(this.networkExcludes);
    }

    /**
     * The network zones to include. Conflicts with `network_excludes`.
     * 
     */
    @Import(name="networkIncludes")
    private @Nullable Output<List<String>> networkIncludes;

    /**
     * @return The network zones to include. Conflicts with `network_excludes`.
     * 
     */
    public Optional<Output<List<String>>> networkIncludes() {
        return Optional.ofNullable(this.networkIncludes);
    }

    /**
     * Policy ID.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return Policy ID.
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Set of User IDs to Exclude
     * 
     */
    @Import(name="usersExcludeds")
    private @Nullable Output<List<String>> usersExcludeds;

    /**
     * @return Set of User IDs to Exclude
     * 
     */
    public Optional<Output<List<String>>> usersExcludeds() {
        return Optional.ofNullable(this.usersExcludeds);
    }

    private RuleMfaState() {}

    private RuleMfaState(RuleMfaState $) {
        this.appExcludes = $.appExcludes;
        this.appIncludes = $.appIncludes;
        this.enroll = $.enroll;
        this.name = $.name;
        this.networkConnection = $.networkConnection;
        this.networkExcludes = $.networkExcludes;
        this.networkIncludes = $.networkIncludes;
        this.policyId = $.policyId;
        this.priority = $.priority;
        this.status = $.status;
        this.usersExcludeds = $.usersExcludeds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleMfaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleMfaState $;

        public Builder() {
            $ = new RuleMfaState();
        }

        public Builder(RuleMfaState defaults) {
            $ = new RuleMfaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appExcludes Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - &#39;id&#39;
         * - (Optional) Use if &#39;type&#39; is &#39;APP&#39; to indicate the application id to include. - &#39;name&#39; - (Optional) Use if the &#39;type&#39;
         *   is &#39;APP_TYPE&#39; to indicate the type of application(s) to include in instances where an entire group (i.e. &#39;yahoo_mail&#39;)
         *   of applications should be included. - &#39;type&#39; - (Required) One of: &#39;APP&#39;, &#39;APP_TYPE&#39;
         * 
         * @return builder
         * 
         */
        public Builder appExcludes(@Nullable Output<List<RuleMfaAppExcludeArgs>> appExcludes) {
            $.appExcludes = appExcludes;
            return this;
        }

        /**
         * @param appExcludes Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - &#39;id&#39;
         * - (Optional) Use if &#39;type&#39; is &#39;APP&#39; to indicate the application id to include. - &#39;name&#39; - (Optional) Use if the &#39;type&#39;
         *   is &#39;APP_TYPE&#39; to indicate the type of application(s) to include in instances where an entire group (i.e. &#39;yahoo_mail&#39;)
         *   of applications should be included. - &#39;type&#39; - (Required) One of: &#39;APP&#39;, &#39;APP_TYPE&#39;
         * 
         * @return builder
         * 
         */
        public Builder appExcludes(List<RuleMfaAppExcludeArgs> appExcludes) {
            return appExcludes(Output.of(appExcludes));
        }

        /**
         * @param appExcludes Applications to exclude in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations. - &#39;id&#39;
         * - (Optional) Use if &#39;type&#39; is &#39;APP&#39; to indicate the application id to include. - &#39;name&#39; - (Optional) Use if the &#39;type&#39;
         *   is &#39;APP_TYPE&#39; to indicate the type of application(s) to include in instances where an entire group (i.e. &#39;yahoo_mail&#39;)
         *   of applications should be included. - &#39;type&#39; - (Required) One of: &#39;APP&#39;, &#39;APP_TYPE&#39;
         * 
         * @return builder
         * 
         */
        public Builder appExcludes(RuleMfaAppExcludeArgs... appExcludes) {
            return appExcludes(List.of(appExcludes));
        }

        /**
         * @param appIncludes Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations.
         * 
         * @return builder
         * 
         */
        public Builder appIncludes(@Nullable Output<List<RuleMfaAppIncludeArgs>> appIncludes) {
            $.appIncludes = appIncludes;
            return this;
        }

        /**
         * @param appIncludes Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations.
         * 
         * @return builder
         * 
         */
        public Builder appIncludes(List<RuleMfaAppIncludeArgs> appIncludes) {
            return appIncludes(Output.of(appIncludes));
        }

        /**
         * @param appIncludes Applications to include in discovery rule. **IMPORTANT**: this field is only available in Classic Organizations.
         * 
         * @return builder
         * 
         */
        public Builder appIncludes(RuleMfaAppIncludeArgs... appIncludes) {
            return appIncludes(List.of(appIncludes));
        }

        /**
         * @param enroll When a user should be prompted for MFA. It can be `&#34;CHALLENGE&#34;`, `&#34;LOGIN&#34;`, or `&#34;NEVER&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder enroll(@Nullable Output<String> enroll) {
            $.enroll = enroll;
            return this;
        }

        /**
         * @param enroll When a user should be prompted for MFA. It can be `&#34;CHALLENGE&#34;`, `&#34;LOGIN&#34;`, or `&#34;NEVER&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder enroll(String enroll) {
            return enroll(Output.of(enroll));
        }

        /**
         * @param name Policy Rule Name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy Rule Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(@Nullable Output<String> networkConnection) {
            $.networkConnection = networkConnection;
            return this;
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(String networkConnection) {
            return networkConnection(Output.of(networkConnection));
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(@Nullable Output<List<String>> networkExcludes) {
            $.networkExcludes = networkExcludes;
            return this;
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(List<String> networkExcludes) {
            return networkExcludes(Output.of(networkExcludes));
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(String... networkExcludes) {
            return networkExcludes(List.of(networkExcludes));
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(@Nullable Output<List<String>> networkIncludes) {
            $.networkIncludes = networkIncludes;
            return this;
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(List<String> networkIncludes) {
            return networkIncludes(Output.of(networkIncludes));
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(String... networkIncludes) {
            return networkIncludes(List.of(networkIncludes));
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param priority Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(@Nullable Output<List<String>> usersExcludeds) {
            $.usersExcludeds = usersExcludeds;
            return this;
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(List<String> usersExcludeds) {
            return usersExcludeds(Output.of(usersExcludeds));
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(String... usersExcludeds) {
            return usersExcludeds(List.of(usersExcludeds));
        }

        public RuleMfaState build() {
            return $;
        }
    }

}
