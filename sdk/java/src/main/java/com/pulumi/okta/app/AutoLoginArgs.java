// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoLoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoLoginArgs Empty = new AutoLoginArgs();

    /**
     * Custom error page URL
     * 
     */
    @Import(name="accessibilityErrorRedirectUrl")
    private @Nullable Output<String> accessibilityErrorRedirectUrl;

    /**
     * @return Custom error page URL
     * 
     */
    public Optional<Output<String>> accessibilityErrorRedirectUrl() {
        return Optional.ofNullable(this.accessibilityErrorRedirectUrl);
    }

    /**
     * Custom login page URL
     * 
     */
    @Import(name="accessibilityLoginRedirectUrl")
    private @Nullable Output<String> accessibilityLoginRedirectUrl;

    /**
     * @return Custom login page URL
     * 
     */
    public Optional<Output<String>> accessibilityLoginRedirectUrl() {
        return Optional.ofNullable(this.accessibilityLoginRedirectUrl);
    }

    /**
     * Enable self service. Default is `false`
     * 
     */
    @Import(name="accessibilitySelfService")
    private @Nullable Output<Boolean> accessibilitySelfService;

    /**
     * @return Enable self service. Default is `false`
     * 
     */
    public Optional<Output<Boolean>> accessibilitySelfService() {
        return Optional.ofNullable(this.accessibilitySelfService);
    }

    /**
     * Application notes for admins.
     * 
     */
    @Import(name="adminNote")
    private @Nullable Output<String> adminNote;

    /**
     * @return Application notes for admins.
     * 
     */
    public Optional<Output<String>> adminNote() {
        return Optional.ofNullable(this.adminNote);
    }

    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    @Import(name="appLinksJson")
    private @Nullable Output<String> appLinksJson;

    /**
     * @return Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    public Optional<Output<String>> appLinksJson() {
        return Optional.ofNullable(this.appLinksJson);
    }

    /**
     * Application settings in JSON format
     * 
     */
    @Import(name="appSettingsJson")
    private @Nullable Output<String> appSettingsJson;

    /**
     * @return Application settings in JSON format
     * 
     */
    public Optional<Output<String>> appSettingsJson() {
        return Optional.ofNullable(this.appSettingsJson);
    }

    /**
     * Display auto submit toolbar
     * 
     */
    @Import(name="autoSubmitToolbar")
    private @Nullable Output<Boolean> autoSubmitToolbar;

    /**
     * @return Display auto submit toolbar
     * 
     */
    public Optional<Output<Boolean>> autoSubmitToolbar() {
        return Optional.ofNullable(this.autoSubmitToolbar);
    }

    /**
     * Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
     * 
     */
    @Import(name="credentialsScheme")
    private @Nullable Output<String> credentialsScheme;

    /**
     * @return Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
     * 
     */
    public Optional<Output<String>> credentialsScheme() {
        return Optional.ofNullable(this.credentialsScheme);
    }

    /**
     * Application notes for end users.
     * 
     */
    @Import(name="enduserNote")
    private @Nullable Output<String> enduserNote;

    /**
     * @return Application notes for end users.
     * 
     */
    public Optional<Output<String>> enduserNote() {
        return Optional.ofNullable(this.enduserNote);
    }

    /**
     * Do not display application icon on mobile app
     * 
     */
    @Import(name="hideIos")
    private @Nullable Output<Boolean> hideIos;

    /**
     * @return Do not display application icon on mobile app
     * 
     */
    public Optional<Output<Boolean>> hideIos() {
        return Optional.ofNullable(this.hideIos);
    }

    /**
     * Do not display application icon to users
     * 
     */
    @Import(name="hideWeb")
    private @Nullable Output<Boolean> hideWeb;

    /**
     * @return Do not display application icon to users
     * 
     */
    public Optional<Output<Boolean>> hideWeb() {
        return Optional.ofNullable(this.hideWeb);
    }

    /**
     * The Application&#39;s display name.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The Application&#39;s display name.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Tells Okta to use an existing application in their application catalog, as opposed to a custom application.
     * 
     */
    @Import(name="preconfiguredApp")
    private @Nullable Output<String> preconfiguredApp;

    /**
     * @return Tells Okta to use an existing application in their application catalog, as opposed to a custom application.
     * 
     */
    public Optional<Output<String>> preconfiguredApp() {
        return Optional.ofNullable(this.preconfiguredApp);
    }

    /**
     * Allow user to reveal password. Default is false. It can not be set to true if credentials*scheme is &#34;ADMIN*SETS*CREDENTIALS&#34;, &#34;SHARED*USERNAME*AND*PASSWORD&#34; or &#34;EXTERNAL*PASSWORD*SYNC&#34;.
     * 
     */
    @Import(name="revealPassword")
    private @Nullable Output<Boolean> revealPassword;

    /**
     * @return Allow user to reveal password. Default is false. It can not be set to true if credentials*scheme is &#34;ADMIN*SETS*CREDENTIALS&#34;, &#34;SHARED*USERNAME*AND*PASSWORD&#34; or &#34;EXTERNAL*PASSWORD*SYNC&#34;.
     * 
     */
    public Optional<Output<Boolean>> revealPassword() {
        return Optional.ofNullable(this.revealPassword);
    }

    /**
     * Shared password, required for certain schemes.
     * 
     */
    @Import(name="sharedPassword")
    private @Nullable Output<String> sharedPassword;

    /**
     * @return Shared password, required for certain schemes.
     * 
     */
    public Optional<Output<String>> sharedPassword() {
        return Optional.ofNullable(this.sharedPassword);
    }

    /**
     * Shared username, required for certain schemes.
     * 
     */
    @Import(name="sharedUsername")
    private @Nullable Output<String> sharedUsername;

    /**
     * @return Shared username, required for certain schemes.
     * 
     */
    public Optional<Output<String>> sharedUsername() {
        return Optional.ofNullable(this.sharedUsername);
    }

    /**
     * Post login redirect URL
     * 
     */
    @Import(name="signOnRedirectUrl")
    private @Nullable Output<String> signOnRedirectUrl;

    /**
     * @return Post login redirect URL
     * 
     */
    public Optional<Output<String>> signOnRedirectUrl() {
        return Optional.ofNullable(this.signOnRedirectUrl);
    }

    /**
     * Login URL
     * 
     */
    @Import(name="signOnUrl")
    private @Nullable Output<String> signOnUrl;

    /**
     * @return Login URL
     * 
     */
    public Optional<Output<String>> signOnUrl() {
        return Optional.ofNullable(this.signOnUrl);
    }

    /**
     * Status of application. By default, it is `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of application. By default, it is `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Username template. Default: `${source.login}`
     * 
     */
    @Import(name="userNameTemplate")
    private @Nullable Output<String> userNameTemplate;

    /**
     * @return Username template. Default: `${source.login}`
     * 
     */
    public Optional<Output<String>> userNameTemplate() {
        return Optional.ofNullable(this.userNameTemplate);
    }

    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    @Import(name="userNameTemplatePushStatus")
    private @Nullable Output<String> userNameTemplatePushStatus;

    /**
     * @return Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    public Optional<Output<String>> userNameTemplatePushStatus() {
        return Optional.ofNullable(this.userNameTemplatePushStatus);
    }

    /**
     * Username template suffix
     * 
     */
    @Import(name="userNameTemplateSuffix")
    private @Nullable Output<String> userNameTemplateSuffix;

    /**
     * @return Username template suffix
     * 
     */
    public Optional<Output<String>> userNameTemplateSuffix() {
        return Optional.ofNullable(this.userNameTemplateSuffix);
    }

    /**
     * Username template type. Default: `BUILT_IN`
     * 
     */
    @Import(name="userNameTemplateType")
    private @Nullable Output<String> userNameTemplateType;

    /**
     * @return Username template type. Default: `BUILT_IN`
     * 
     */
    public Optional<Output<String>> userNameTemplateType() {
        return Optional.ofNullable(this.userNameTemplateType);
    }

    private AutoLoginArgs() {}

    private AutoLoginArgs(AutoLoginArgs $) {
        this.accessibilityErrorRedirectUrl = $.accessibilityErrorRedirectUrl;
        this.accessibilityLoginRedirectUrl = $.accessibilityLoginRedirectUrl;
        this.accessibilitySelfService = $.accessibilitySelfService;
        this.adminNote = $.adminNote;
        this.appLinksJson = $.appLinksJson;
        this.appSettingsJson = $.appSettingsJson;
        this.autoSubmitToolbar = $.autoSubmitToolbar;
        this.credentialsScheme = $.credentialsScheme;
        this.enduserNote = $.enduserNote;
        this.hideIos = $.hideIos;
        this.hideWeb = $.hideWeb;
        this.label = $.label;
        this.logo = $.logo;
        this.preconfiguredApp = $.preconfiguredApp;
        this.revealPassword = $.revealPassword;
        this.sharedPassword = $.sharedPassword;
        this.sharedUsername = $.sharedUsername;
        this.signOnRedirectUrl = $.signOnRedirectUrl;
        this.signOnUrl = $.signOnUrl;
        this.status = $.status;
        this.userNameTemplate = $.userNameTemplate;
        this.userNameTemplatePushStatus = $.userNameTemplatePushStatus;
        this.userNameTemplateSuffix = $.userNameTemplateSuffix;
        this.userNameTemplateType = $.userNameTemplateType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoLoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoLoginArgs $;

        public Builder() {
            $ = new AutoLoginArgs();
        }

        public Builder(AutoLoginArgs defaults) {
            $ = new AutoLoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(@Nullable Output<String> accessibilityErrorRedirectUrl) {
            $.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            return accessibilityErrorRedirectUrl(Output.of(accessibilityErrorRedirectUrl));
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(@Nullable Output<String> accessibilityLoginRedirectUrl) {
            $.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            return accessibilityLoginRedirectUrl(Output.of(accessibilityLoginRedirectUrl));
        }

        /**
         * @param accessibilitySelfService Enable self service. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(@Nullable Output<Boolean> accessibilitySelfService) {
            $.accessibilitySelfService = accessibilitySelfService;
            return this;
        }

        /**
         * @param accessibilitySelfService Enable self service. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            return accessibilitySelfService(Output.of(accessibilitySelfService));
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(@Nullable Output<String> adminNote) {
            $.adminNote = adminNote;
            return this;
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(String adminNote) {
            return adminNote(Output.of(adminNote));
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(@Nullable Output<String> appLinksJson) {
            $.appLinksJson = appLinksJson;
            return this;
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(String appLinksJson) {
            return appLinksJson(Output.of(appLinksJson));
        }

        /**
         * @param appSettingsJson Application settings in JSON format
         * 
         * @return builder
         * 
         */
        public Builder appSettingsJson(@Nullable Output<String> appSettingsJson) {
            $.appSettingsJson = appSettingsJson;
            return this;
        }

        /**
         * @param appSettingsJson Application settings in JSON format
         * 
         * @return builder
         * 
         */
        public Builder appSettingsJson(String appSettingsJson) {
            return appSettingsJson(Output.of(appSettingsJson));
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(@Nullable Output<Boolean> autoSubmitToolbar) {
            $.autoSubmitToolbar = autoSubmitToolbar;
            return this;
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            return autoSubmitToolbar(Output.of(autoSubmitToolbar));
        }

        /**
         * @param credentialsScheme Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
         * 
         * @return builder
         * 
         */
        public Builder credentialsScheme(@Nullable Output<String> credentialsScheme) {
            $.credentialsScheme = credentialsScheme;
            return this;
        }

        /**
         * @param credentialsScheme Application credentials scheme. One of: `EDIT_USERNAME_AND_PASSWORD`, `ADMIN_SETS_CREDENTIALS`, `EDIT_PASSWORD_ONLY`, `EXTERNAL_PASSWORD_SYNC`, or `SHARED_USERNAME_AND_PASSWORD`
         * 
         * @return builder
         * 
         */
        public Builder credentialsScheme(String credentialsScheme) {
            return credentialsScheme(Output.of(credentialsScheme));
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(@Nullable Output<String> enduserNote) {
            $.enduserNote = enduserNote;
            return this;
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(String enduserNote) {
            return enduserNote(Output.of(enduserNote));
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(@Nullable Output<Boolean> hideIos) {
            $.hideIos = hideIos;
            return this;
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(Boolean hideIos) {
            return hideIos(Output.of(hideIos));
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(@Nullable Output<Boolean> hideWeb) {
            $.hideWeb = hideWeb;
            return this;
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(Boolean hideWeb) {
            return hideWeb(Output.of(hideWeb));
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param logo Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param preconfiguredApp Tells Okta to use an existing application in their application catalog, as opposed to a custom application.
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(@Nullable Output<String> preconfiguredApp) {
            $.preconfiguredApp = preconfiguredApp;
            return this;
        }

        /**
         * @param preconfiguredApp Tells Okta to use an existing application in their application catalog, as opposed to a custom application.
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(String preconfiguredApp) {
            return preconfiguredApp(Output.of(preconfiguredApp));
        }

        /**
         * @param revealPassword Allow user to reveal password. Default is false. It can not be set to true if credentials*scheme is &#34;ADMIN*SETS*CREDENTIALS&#34;, &#34;SHARED*USERNAME*AND*PASSWORD&#34; or &#34;EXTERNAL*PASSWORD*SYNC&#34;.
         * 
         * @return builder
         * 
         */
        public Builder revealPassword(@Nullable Output<Boolean> revealPassword) {
            $.revealPassword = revealPassword;
            return this;
        }

        /**
         * @param revealPassword Allow user to reveal password. Default is false. It can not be set to true if credentials*scheme is &#34;ADMIN*SETS*CREDENTIALS&#34;, &#34;SHARED*USERNAME*AND*PASSWORD&#34; or &#34;EXTERNAL*PASSWORD*SYNC&#34;.
         * 
         * @return builder
         * 
         */
        public Builder revealPassword(Boolean revealPassword) {
            return revealPassword(Output.of(revealPassword));
        }

        /**
         * @param sharedPassword Shared password, required for certain schemes.
         * 
         * @return builder
         * 
         */
        public Builder sharedPassword(@Nullable Output<String> sharedPassword) {
            $.sharedPassword = sharedPassword;
            return this;
        }

        /**
         * @param sharedPassword Shared password, required for certain schemes.
         * 
         * @return builder
         * 
         */
        public Builder sharedPassword(String sharedPassword) {
            return sharedPassword(Output.of(sharedPassword));
        }

        /**
         * @param sharedUsername Shared username, required for certain schemes.
         * 
         * @return builder
         * 
         */
        public Builder sharedUsername(@Nullable Output<String> sharedUsername) {
            $.sharedUsername = sharedUsername;
            return this;
        }

        /**
         * @param sharedUsername Shared username, required for certain schemes.
         * 
         * @return builder
         * 
         */
        public Builder sharedUsername(String sharedUsername) {
            return sharedUsername(Output.of(sharedUsername));
        }

        /**
         * @param signOnRedirectUrl Post login redirect URL
         * 
         * @return builder
         * 
         */
        public Builder signOnRedirectUrl(@Nullable Output<String> signOnRedirectUrl) {
            $.signOnRedirectUrl = signOnRedirectUrl;
            return this;
        }

        /**
         * @param signOnRedirectUrl Post login redirect URL
         * 
         * @return builder
         * 
         */
        public Builder signOnRedirectUrl(String signOnRedirectUrl) {
            return signOnRedirectUrl(Output.of(signOnRedirectUrl));
        }

        /**
         * @param signOnUrl Login URL
         * 
         * @return builder
         * 
         */
        public Builder signOnUrl(@Nullable Output<String> signOnUrl) {
            $.signOnUrl = signOnUrl;
            return this;
        }

        /**
         * @param signOnUrl Login URL
         * 
         * @return builder
         * 
         */
        public Builder signOnUrl(String signOnUrl) {
            return signOnUrl(Output.of(signOnUrl));
        }

        /**
         * @param status Status of application. By default, it is `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of application. By default, it is `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userNameTemplate Username template. Default: `${source.login}`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(@Nullable Output<String> userNameTemplate) {
            $.userNameTemplate = userNameTemplate;
            return this;
        }

        /**
         * @param userNameTemplate Username template. Default: `${source.login}`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(String userNameTemplate) {
            return userNameTemplate(Output.of(userNameTemplate));
        }

        /**
         * @param userNameTemplatePushStatus Push username on update. Valid values: `PUSH` and `DONT_PUSH`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(@Nullable Output<String> userNameTemplatePushStatus) {
            $.userNameTemplatePushStatus = userNameTemplatePushStatus;
            return this;
        }

        /**
         * @param userNameTemplatePushStatus Push username on update. Valid values: `PUSH` and `DONT_PUSH`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(String userNameTemplatePushStatus) {
            return userNameTemplatePushStatus(Output.of(userNameTemplatePushStatus));
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(@Nullable Output<String> userNameTemplateSuffix) {
            $.userNameTemplateSuffix = userNameTemplateSuffix;
            return this;
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(String userNameTemplateSuffix) {
            return userNameTemplateSuffix(Output.of(userNameTemplateSuffix));
        }

        /**
         * @param userNameTemplateType Username template type. Default: `BUILT_IN`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(@Nullable Output<String> userNameTemplateType) {
            $.userNameTemplateType = userNameTemplateType;
            return this;
        }

        /**
         * @param userNameTemplateType Username template type. Default: `BUILT_IN`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(String userNameTemplateType) {
            return userNameTemplateType(Output.of(userNameTemplateType));
        }

        public AutoLoginArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("AutoLoginArgs", "label");
            }
            return $;
        }
    }

}
