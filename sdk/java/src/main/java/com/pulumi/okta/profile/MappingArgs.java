// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.profile;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.profile.inputs.MappingMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final MappingArgs Empty = new MappingArgs();

    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * 
     * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    @Import(name="alwaysApply")
    private @Nullable Output<Boolean> alwaysApply;

    /**
     * @return Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * 
     * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    public Optional<Output<Boolean>> alwaysApply() {
        return Optional.ofNullable(this.alwaysApply);
    }

    /**
     * Tells the provider whether to attempt to delete missing mappings under profile mapping.
     * 
     */
    @Import(name="deleteWhenAbsent")
    private @Nullable Output<Boolean> deleteWhenAbsent;

    /**
     * @return Tells the provider whether to attempt to delete missing mappings under profile mapping.
     * 
     */
    public Optional<Output<Boolean>> deleteWhenAbsent() {
        return Optional.ofNullable(this.deleteWhenAbsent);
    }

    /**
     * Priority of the policy.
     * 
     */
    @Import(name="mappings")
    private @Nullable Output<List<MappingMappingArgs>> mappings;

    /**
     * @return Priority of the policy.
     * 
     */
    public Optional<Output<List<MappingMappingArgs>>> mappings() {
        return Optional.ofNullable(this.mappings);
    }

    /**
     * Source id of the profile mapping.
     * 
     */
    @Import(name="sourceId", required=true)
    private Output<String> sourceId;

    /**
     * @return Source id of the profile mapping.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }

    /**
     * ID of the mapping target.
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return ID of the mapping target.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    private MappingArgs() {}

    private MappingArgs(MappingArgs $) {
        this.alwaysApply = $.alwaysApply;
        this.deleteWhenAbsent = $.deleteWhenAbsent;
        this.mappings = $.mappings;
        this.sourceId = $.sourceId;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MappingArgs $;

        public Builder() {
            $ = new MappingArgs();
        }

        public Builder(MappingArgs defaults) {
            $ = new MappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysApply Whether apply the changes to all users with this profile after updating or creating the these mappings.
         * 
         * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
         * 
         * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApply(@Nullable Output<Boolean> alwaysApply) {
            $.alwaysApply = alwaysApply;
            return this;
        }

        /**
         * @param alwaysApply Whether apply the changes to all users with this profile after updating or creating the these mappings.
         * 
         * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
         * 
         * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApply(Boolean alwaysApply) {
            return alwaysApply(Output.of(alwaysApply));
        }

        /**
         * @param deleteWhenAbsent Tells the provider whether to attempt to delete missing mappings under profile mapping.
         * 
         * @return builder
         * 
         */
        public Builder deleteWhenAbsent(@Nullable Output<Boolean> deleteWhenAbsent) {
            $.deleteWhenAbsent = deleteWhenAbsent;
            return this;
        }

        /**
         * @param deleteWhenAbsent Tells the provider whether to attempt to delete missing mappings under profile mapping.
         * 
         * @return builder
         * 
         */
        public Builder deleteWhenAbsent(Boolean deleteWhenAbsent) {
            return deleteWhenAbsent(Output.of(deleteWhenAbsent));
        }

        /**
         * @param mappings Priority of the policy.
         * 
         * @return builder
         * 
         */
        public Builder mappings(@Nullable Output<List<MappingMappingArgs>> mappings) {
            $.mappings = mappings;
            return this;
        }

        /**
         * @param mappings Priority of the policy.
         * 
         * @return builder
         * 
         */
        public Builder mappings(List<MappingMappingArgs> mappings) {
            return mappings(Output.of(mappings));
        }

        /**
         * @param mappings Priority of the policy.
         * 
         * @return builder
         * 
         */
        public Builder mappings(MappingMappingArgs... mappings) {
            return mappings(List.of(mappings));
        }

        /**
         * @param sourceId Source id of the profile mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId Source id of the profile mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param targetId ID of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId ID of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        public MappingArgs build() {
            $.sourceId = Objects.requireNonNull($.sourceId, "expected parameter 'sourceId' to be non-null");
            $.targetId = Objects.requireNonNull($.targetId, "expected parameter 'targetId' to be non-null");
            return $;
        }
    }

}
