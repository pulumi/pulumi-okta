// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetEntitlementBundleEntitlementValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetEntitlementBundleEntitlement {
    /**
     * @return The data type of the entitlement property.
     * 
     */
    private String dataType;
    /**
     * @return The description of an entitlement property.
     * 
     */
    private String description;
    /**
     * @return The value of an entitlement property.
     * 
     */
    private String externalValue;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    private Boolean multiValue;
    /**
     * @return The display name for an entitlement bundle.
     * 
     */
    private String name;
    /**
     * @return The property that determines if the entitlement property is a required attribute.
     * 
     */
    private Boolean required;
    private @Nullable List<GetEntitlementBundleEntitlementValue> values;

    private GetEntitlementBundleEntitlement() {}
    /**
     * @return The data type of the entitlement property.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return The description of an entitlement property.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The value of an entitlement property.
     * 
     */
    public String externalValue() {
        return this.externalValue;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    public Boolean multiValue() {
        return this.multiValue;
    }
    /**
     * @return The display name for an entitlement bundle.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The property that determines if the entitlement property is a required attribute.
     * 
     */
    public Boolean required() {
        return this.required;
    }
    public List<GetEntitlementBundleEntitlementValue> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEntitlementBundleEntitlement defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataType;
        private String description;
        private String externalValue;
        private String id;
        private Boolean multiValue;
        private String name;
        private Boolean required;
        private @Nullable List<GetEntitlementBundleEntitlementValue> values;
        public Builder() {}
        public Builder(GetEntitlementBundleEntitlement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataType = defaults.dataType;
    	      this.description = defaults.description;
    	      this.externalValue = defaults.externalValue;
    	      this.id = defaults.id;
    	      this.multiValue = defaults.multiValue;
    	      this.name = defaults.name;
    	      this.required = defaults.required;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalValue(String externalValue) {
            if (externalValue == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "externalValue");
            }
            this.externalValue = externalValue;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multiValue(Boolean multiValue) {
            if (multiValue == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "multiValue");
            }
            this.multiValue = multiValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder required(Boolean required) {
            if (required == null) {
              throw new MissingRequiredPropertyException("GetEntitlementBundleEntitlement", "required");
            }
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<GetEntitlementBundleEntitlementValue> values) {

            this.values = values;
            return this;
        }
        public Builder values(GetEntitlementBundleEntitlementValue... values) {
            return values(List.of(values));
        }
        public GetEntitlementBundleEntitlement build() {
            final var _resultValue = new GetEntitlementBundleEntitlement();
            _resultValue.dataType = dataType;
            _resultValue.description = description;
            _resultValue.externalValue = externalValue;
            _resultValue.id = id;
            _resultValue.multiValue = multiValue;
            _resultValue.name = name;
            _resultValue.required = required;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
