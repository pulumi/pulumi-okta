// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetCatalogEntryDefaultCountsArgs;
import com.pulumi.okta.inputs.GetCatalogEntryDefaultLinksArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogEntryDefaultArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCatalogEntryDefaultArgs Empty = new GetCatalogEntryDefaultArgs();

    @Import(name="counts")
    private @Nullable Output<GetCatalogEntryDefaultCountsArgs> counts;

    public Optional<Output<GetCatalogEntryDefaultCountsArgs>> counts() {
        return Optional.ofNullable(this.counts);
    }

    /**
     * TThe ID of the catalog entry.
     * 
     */
    @Import(name="entryId", required=true)
    private Output<String> entryId;

    /**
     * @return TThe ID of the catalog entry.
     * 
     */
    public Output<String> entryId() {
        return this.entryId;
    }

    @Import(name="links")
    private @Nullable Output<GetCatalogEntryDefaultLinksArgs> links;

    public Optional<Output<GetCatalogEntryDefaultLinksArgs>> links() {
        return Optional.ofNullable(this.links);
    }

    private GetCatalogEntryDefaultArgs() {}

    private GetCatalogEntryDefaultArgs(GetCatalogEntryDefaultArgs $) {
        this.counts = $.counts;
        this.entryId = $.entryId;
        this.links = $.links;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogEntryDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogEntryDefaultArgs $;

        public Builder() {
            $ = new GetCatalogEntryDefaultArgs();
        }

        public Builder(GetCatalogEntryDefaultArgs defaults) {
            $ = new GetCatalogEntryDefaultArgs(Objects.requireNonNull(defaults));
        }

        public Builder counts(@Nullable Output<GetCatalogEntryDefaultCountsArgs> counts) {
            $.counts = counts;
            return this;
        }

        public Builder counts(GetCatalogEntryDefaultCountsArgs counts) {
            return counts(Output.of(counts));
        }

        /**
         * @param entryId TThe ID of the catalog entry.
         * 
         * @return builder
         * 
         */
        public Builder entryId(Output<String> entryId) {
            $.entryId = entryId;
            return this;
        }

        /**
         * @param entryId TThe ID of the catalog entry.
         * 
         * @return builder
         * 
         */
        public Builder entryId(String entryId) {
            return entryId(Output.of(entryId));
        }

        public Builder links(@Nullable Output<GetCatalogEntryDefaultLinksArgs> links) {
            $.links = links;
            return this;
        }

        public Builder links(GetCatalogEntryDefaultLinksArgs links) {
            return links(Output.of(links));
        }

        public GetCatalogEntryDefaultArgs build() {
            if ($.entryId == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryDefaultArgs", "entryId");
            }
            return $;
        }
    }

}
