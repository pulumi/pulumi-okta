// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.profile;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.profile.MappingArgs;
import com.pulumi.okta.profile.inputs.MappingState;
import com.pulumi.okta.profile.outputs.MappingMapping;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="okta:profile/mapping:Mapping")
public class Mapping extends com.pulumi.resources.CustomResource {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     */
    @Export(name="alwaysApply", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> alwaysApply;

    /**
     * @return Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     */
    public Output<Optional<Boolean>> alwaysApply() {
        return Codegen.optional(this.alwaysApply);
    }
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     * 
     */
    @Export(name="deleteWhenAbsent", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteWhenAbsent;

    /**
     * @return When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     * 
     */
    public Output<Optional<Boolean>> deleteWhenAbsent() {
        return Codegen.optional(this.deleteWhenAbsent);
    }
    @Export(name="mappings", refs={List.class,MappingMapping.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MappingMapping>> mappings;

    public Output<Optional<List<MappingMapping>>> mappings() {
        return Codegen.optional(this.mappings);
    }
    /**
     * The source id of the mapping to manage.
     * 
     */
    @Export(name="sourceId", refs={String.class}, tree="[0]")
    private Output<String> sourceId;

    /**
     * @return The source id of the mapping to manage.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }
    @Export(name="sourceName", refs={String.class}, tree="[0]")
    private Output<String> sourceName;

    public Output<String> sourceName() {
        return this.sourceName;
    }
    @Export(name="sourceType", refs={String.class}, tree="[0]")
    private Output<String> sourceType;

    public Output<String> sourceType() {
        return this.sourceType;
    }
    /**
     * The target id of the mapping to manage.
     * 
     */
    @Export(name="targetId", refs={String.class}, tree="[0]")
    private Output<String> targetId;

    /**
     * @return The target id of the mapping to manage.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output<String> targetName;

    public Output<String> targetName() {
        return this.targetName;
    }
    @Export(name="targetType", refs={String.class}, tree="[0]")
    private Output<String> targetType;

    public Output<String> targetType() {
        return this.targetType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Mapping(String name) {
        this(name, MappingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Mapping(String name, MappingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Mapping(String name, MappingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:profile/mapping:Mapping", name, args == null ? MappingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Mapping(String name, Output<String> id, @Nullable MappingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:profile/mapping:Mapping", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Mapping get(String name, Output<String> id, @Nullable MappingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Mapping(name, id, state, options);
    }
}
