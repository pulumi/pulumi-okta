// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.profile;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.profile.MappingArgs;
import com.pulumi.okta.profile.inputs.MappingState;
import com.pulumi.okta.profile.outputs.MappingMapping;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to manage a profile mapping by source and target IDs.
 * 
 * &gt; **NOTE:** If using this resource with OAuth2 scopes, this resource requires `okta.profileMappings.manage` scope.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.user.UserFunctions;
 * import com.pulumi.okta.profile.Mapping;
 * import com.pulumi.okta.profile.MappingArgs;
 * import com.pulumi.okta.profile.inputs.MappingMappingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var user = UserFunctions.getUserProfileMappingSource();
 * 
 *         var example = new Mapping(&#34;example&#34;, MappingArgs.builder()        
 *             .deleteWhenAbsent(true)
 *             .mappings(            
 *                 MappingMappingArgs.builder()
 *                     .expression(&#34;appuser.firstName&#34;)
 *                     .id(&#34;firstName&#34;)
 *                     .build(),
 *                 MappingMappingArgs.builder()
 *                     .expression(&#34;appuser.lastName&#34;)
 *                     .id(&#34;lastName&#34;)
 *                     .build(),
 *                 MappingMappingArgs.builder()
 *                     .expression(&#34;appuser.email&#34;)
 *                     .id(&#34;email&#34;)
 *                     .build(),
 *                 MappingMappingArgs.builder()
 *                     .expression(&#34;appuser.email&#34;)
 *                     .id(&#34;login&#34;)
 *                     .build())
 *             .sourceId(&#34;&lt;source id&gt;&#34;)
 *             .targetId(user.applyValue(getUserProfileMappingSourceResult -&gt; getUserProfileMappingSourceResult.id()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * There is no reason to import this resource. You can simply create the resource config and point it to a source ID. Mind here, once the source is deleted this resources will no longer exist.
 * 
 */
@ResourceType(type="okta:profile/mapping:Mapping")
public class Mapping extends com.pulumi.resources.CustomResource {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * 
     * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    @Export(name="alwaysApply", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> alwaysApply;

    /**
     * @return Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * 
     * &gt; **WARNING**: `always_apply` is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * 
     * &gt; **WARNING:** `always_apply` makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    public Output<Optional<Boolean>> alwaysApply() {
        return Codegen.optional(this.alwaysApply);
    }
    /**
     * Tells the provider whether to attempt to delete missing mappings under profile mapping.
     * 
     */
    @Export(name="deleteWhenAbsent", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteWhenAbsent;

    /**
     * @return Tells the provider whether to attempt to delete missing mappings under profile mapping.
     * 
     */
    public Output<Optional<Boolean>> deleteWhenAbsent() {
        return Codegen.optional(this.deleteWhenAbsent);
    }
    /**
     * Priority of the policy.
     * 
     */
    @Export(name="mappings", refs={List.class,MappingMapping.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MappingMapping>> mappings;

    /**
     * @return Priority of the policy.
     * 
     */
    public Output<Optional<List<MappingMapping>>> mappings() {
        return Codegen.optional(this.mappings);
    }
    /**
     * Source id of the profile mapping.
     * 
     */
    @Export(name="sourceId", refs={String.class}, tree="[0]")
    private Output<String> sourceId;

    /**
     * @return Source id of the profile mapping.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }
    /**
     * Name of the mapping source.
     * 
     */
    @Export(name="sourceName", refs={String.class}, tree="[0]")
    private Output<String> sourceName;

    /**
     * @return Name of the mapping source.
     * 
     */
    public Output<String> sourceName() {
        return this.sourceName;
    }
    /**
     * ID of the mapping source.
     * 
     */
    @Export(name="sourceType", refs={String.class}, tree="[0]")
    private Output<String> sourceType;

    /**
     * @return ID of the mapping source.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }
    /**
     * ID of the mapping target.
     * 
     */
    @Export(name="targetId", refs={String.class}, tree="[0]")
    private Output<String> targetId;

    /**
     * @return ID of the mapping target.
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }
    /**
     * Name of the mapping target.
     * 
     */
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output<String> targetName;

    /**
     * @return Name of the mapping target.
     * 
     */
    public Output<String> targetName() {
        return this.targetName;
    }
    /**
     * ID of the mapping target.
     * 
     */
    @Export(name="targetType", refs={String.class}, tree="[0]")
    private Output<String> targetType;

    /**
     * @return ID of the mapping target.
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Mapping(String name) {
        this(name, MappingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Mapping(String name, MappingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Mapping(String name, MappingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:profile/mapping:Mapping", name, args == null ? MappingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Mapping(String name, Output<String> id, @Nullable MappingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:profile/mapping:Mapping", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Mapping get(String name, Output<String> id, @Nullable MappingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Mapping(name, id, state, options);
    }
}
