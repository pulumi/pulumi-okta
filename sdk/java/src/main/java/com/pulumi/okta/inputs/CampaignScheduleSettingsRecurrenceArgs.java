// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CampaignScheduleSettingsRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CampaignScheduleSettingsRecurrenceArgs Empty = new CampaignScheduleSettingsRecurrenceArgs();

    /**
     * Specifies when the recurring schedule can have an end.
     * 
     */
    @Import(name="ends")
    private @Nullable Output<String> ends;

    /**
     * @return Specifies when the recurring schedule can have an end.
     * 
     */
    public Optional<Output<String>> ends() {
        return Optional.ofNullable(this.ends);
    }

    /**
     * Recurrence interval specified according to ISO8061 notation for durations.
     * 
     */
    @Import(name="interval", required=true)
    private Output<String> interval;

    /**
     * @return Recurrence interval specified according to ISO8061 notation for durations.
     * 
     */
    public Output<String> interval() {
        return this.interval;
    }

    /**
     * Specifies when the recurring schedule can have an end.
     * 
     */
    @Import(name="repeatOnType")
    private @Nullable Output<String> repeatOnType;

    /**
     * @return Specifies when the recurring schedule can have an end.
     * 
     */
    public Optional<Output<String>> repeatOnType() {
        return Optional.ofNullable(this.repeatOnType);
    }

    private CampaignScheduleSettingsRecurrenceArgs() {}

    private CampaignScheduleSettingsRecurrenceArgs(CampaignScheduleSettingsRecurrenceArgs $) {
        this.ends = $.ends;
        this.interval = $.interval;
        this.repeatOnType = $.repeatOnType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CampaignScheduleSettingsRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CampaignScheduleSettingsRecurrenceArgs $;

        public Builder() {
            $ = new CampaignScheduleSettingsRecurrenceArgs();
        }

        public Builder(CampaignScheduleSettingsRecurrenceArgs defaults) {
            $ = new CampaignScheduleSettingsRecurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ends Specifies when the recurring schedule can have an end.
         * 
         * @return builder
         * 
         */
        public Builder ends(@Nullable Output<String> ends) {
            $.ends = ends;
            return this;
        }

        /**
         * @param ends Specifies when the recurring schedule can have an end.
         * 
         * @return builder
         * 
         */
        public Builder ends(String ends) {
            return ends(Output.of(ends));
        }

        /**
         * @param interval Recurrence interval specified according to ISO8061 notation for durations.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Recurrence interval specified according to ISO8061 notation for durations.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param repeatOnType Specifies when the recurring schedule can have an end.
         * 
         * @return builder
         * 
         */
        public Builder repeatOnType(@Nullable Output<String> repeatOnType) {
            $.repeatOnType = repeatOnType;
            return this;
        }

        /**
         * @param repeatOnType Specifies when the recurring schedule can have an end.
         * 
         * @return builder
         * 
         */
        public Builder repeatOnType(String repeatOnType) {
            return repeatOnType(Output.of(repeatOnType));
        }

        public CampaignScheduleSettingsRecurrenceArgs build() {
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("CampaignScheduleSettingsRecurrenceArgs", "interval");
            }
            return $;
        }
    }

}
