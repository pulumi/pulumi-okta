// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGroupMembershipsState extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupMembershipsState Empty = new UserGroupMembershipsState();

    /**
     * The list of Okta group IDs which the user should have membership managed for.
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    /**
     * @return The list of Okta group IDs which the user should have membership managed for.
     * 
     */
    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Okta user ID.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return Okta user ID.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserGroupMembershipsState() {}

    private UserGroupMembershipsState(UserGroupMembershipsState $) {
        this.groups = $.groups;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupMembershipsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupMembershipsState $;

        public Builder() {
            $ = new UserGroupMembershipsState();
        }

        public Builder(UserGroupMembershipsState defaults) {
            $ = new UserGroupMembershipsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups The list of Okta group IDs which the user should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param userId Okta user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Okta user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserGroupMembershipsState build() {
            return $;
        }
    }

}
