// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupMembershipsState extends com.pulumi.resources.ResourceArgs {

    public static final GroupMembershipsState Empty = new GroupMembershipsState();

    /**
     * ID of a Okta group.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return ID of a Okta group.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.
     * 
     */
    @Import(name="trackAllUsers")
    private @Nullable Output<Boolean> trackAllUsers;

    /**
     * @return The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.
     * 
     */
    public Optional<Output<Boolean>> trackAllUsers() {
        return Optional.ofNullable(this.trackAllUsers);
    }

    /**
     * The list of Okta user IDs which the group should have membership managed for.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    /**
     * @return The list of Okta user IDs which the group should have membership managed for.
     * 
     */
    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    private GroupMembershipsState() {}

    private GroupMembershipsState(GroupMembershipsState $) {
        this.groupId = $.groupId;
        this.trackAllUsers = $.trackAllUsers;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupMembershipsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupMembershipsState $;

        public Builder() {
            $ = new GroupMembershipsState();
        }

        public Builder(GroupMembershipsState defaults) {
            $ = new GroupMembershipsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId ID of a Okta group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId ID of a Okta group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param trackAllUsers The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.
         * 
         * @return builder
         * 
         */
        public Builder trackAllUsers(@Nullable Output<Boolean> trackAllUsers) {
            $.trackAllUsers = trackAllUsers;
            return this;
        }

        /**
         * @param trackAllUsers The resource concerns itself with all users added/deleted to the group; even those managed outside of the resource.
         * 
         * @return builder
         * 
         */
        public Builder trackAllUsers(Boolean trackAllUsers) {
            return trackAllUsers(Output.of(trackAllUsers));
        }

        /**
         * @param users The list of Okta user IDs which the group should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users The list of Okta user IDs which the group should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users The list of Okta user IDs which the group should have membership managed for.
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        public GroupMembershipsState build() {
            return $;
        }
    }

}
