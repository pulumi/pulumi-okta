// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.FeatureStageArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureState extends com.pulumi.resources.ResourceArgs {

    public static final FeatureState Empty = new FeatureState();

    /**
     * Name of the feature.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Name of the feature.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     * 
     */
    @Import(name="featureId")
    private @Nullable Output<String> featureId;

    /**
     * @return Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     * 
     */
    public Optional<Output<String>> featureId() {
        return Optional.ofNullable(this.featureId);
    }

    /**
     * Whether to `ENABLE` or `DISABLE` the feature
     * 
     */
    @Import(name="lifeCycle")
    private @Nullable Output<String> lifeCycle;

    /**
     * @return Whether to `ENABLE` or `DISABLE` the feature
     * 
     */
    public Optional<Output<String>> lifeCycle() {
        return Optional.ofNullable(this.lifeCycle);
    }

    /**
     * Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     * 
     */
    @Import(name="mode")
    private @Nullable Output<Boolean> mode;

    /**
     * @return Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     * 
     */
    public Optional<Output<Boolean>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Name of the feature.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the feature.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Current release cycle stage of a feature.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<FeatureStageArgs> stage;

    /**
     * @return Current release cycle stage of a feature.
     * 
     */
    public Optional<Output<FeatureStageArgs>> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * The feature status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The feature status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Type of feature.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of feature.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private FeatureState() {}

    private FeatureState(FeatureState $) {
        this.description = $.description;
        this.featureId = $.featureId;
        this.lifeCycle = $.lifeCycle;
        this.mode = $.mode;
        this.name = $.name;
        this.stage = $.stage;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureState $;

        public Builder() {
            $ = new FeatureState();
        }

        public Builder(FeatureState defaults) {
            $ = new FeatureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Name of the feature.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Name of the feature.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param featureId Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
         * 
         * @return builder
         * 
         */
        public Builder featureId(@Nullable Output<String> featureId) {
            $.featureId = featureId;
            return this;
        }

        /**
         * @param featureId Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
         * 
         * @return builder
         * 
         */
        public Builder featureId(String featureId) {
            return featureId(Output.of(featureId));
        }

        /**
         * @param lifeCycle Whether to `ENABLE` or `DISABLE` the feature
         * 
         * @return builder
         * 
         */
        public Builder lifeCycle(@Nullable Output<String> lifeCycle) {
            $.lifeCycle = lifeCycle;
            return this;
        }

        /**
         * @param lifeCycle Whether to `ENABLE` or `DISABLE` the feature
         * 
         * @return builder
         * 
         */
        public Builder lifeCycle(String lifeCycle) {
            return lifeCycle(Output.of(lifeCycle));
        }

        /**
         * @param mode Indicates if you want to force enable or disable a feature. Value is `true` meaning force
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<Boolean> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Indicates if you want to force enable or disable a feature. Value is `true` meaning force
         * 
         * @return builder
         * 
         */
        public Builder mode(Boolean mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Name of the feature.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the feature.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param stage Current release cycle stage of a feature.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<FeatureStageArgs> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage Current release cycle stage of a feature.
         * 
         * @return builder
         * 
         */
        public Builder stage(FeatureStageArgs stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param status The feature status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The feature status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Type of feature.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of feature.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FeatureState build() {
            return $;
        }
    }

}
