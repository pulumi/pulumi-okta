// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthServerClaimResult {
    /**
     * @return Specifies whether to include Claims in the token.
     * 
     */
    private Boolean alwaysIncludeInToken;
    /**
     * @return Auth server ID
     * 
     */
    private String authServerId;
    /**
     * @return Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
     * 
     */
    private String claimType;
    /**
     * @return Name of the claim. Conflicts with `name`.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the claim. Conflicts with `id`.
     * 
     */
    private @Nullable String name;
    /**
     * @return Auth server claim list of scopes
     * 
     */
    private List<String> scopes;
    /**
     * @return Status of the claim.
     * 
     */
    private String status;
    /**
     * @return Value of the claim.
     * 
     */
    private String value;
    /**
     * @return Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
     * 
     */
    private String valueType;

    private GetAuthServerClaimResult() {}
    /**
     * @return Specifies whether to include Claims in the token.
     * 
     */
    public Boolean alwaysIncludeInToken() {
        return this.alwaysIncludeInToken;
    }
    /**
     * @return Auth server ID
     * 
     */
    public String authServerId() {
        return this.authServerId;
    }
    /**
     * @return Specifies whether the Claim is for an access token (`RESOURCE`) or ID token (`IDENTITY`).
     * 
     */
    public String claimType() {
        return this.claimType;
    }
    /**
     * @return Name of the claim. Conflicts with `name`.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the claim. Conflicts with `id`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Auth server claim list of scopes
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Status of the claim.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Value of the claim.
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return Specifies whether the Claim is an Okta EL expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)
     * 
     */
    public String valueType() {
        return this.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthServerClaimResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean alwaysIncludeInToken;
        private String authServerId;
        private String claimType;
        private @Nullable String id;
        private @Nullable String name;
        private List<String> scopes;
        private String status;
        private String value;
        private String valueType;
        public Builder() {}
        public Builder(GetAuthServerClaimResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysIncludeInToken = defaults.alwaysIncludeInToken;
    	      this.authServerId = defaults.authServerId;
    	      this.claimType = defaults.claimType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.scopes = defaults.scopes;
    	      this.status = defaults.status;
    	      this.value = defaults.value;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder alwaysIncludeInToken(Boolean alwaysIncludeInToken) {
            if (alwaysIncludeInToken == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "alwaysIncludeInToken");
            }
            this.alwaysIncludeInToken = alwaysIncludeInToken;
            return this;
        }
        @CustomType.Setter
        public Builder authServerId(String authServerId) {
            if (authServerId == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "authServerId");
            }
            this.authServerId = authServerId;
            return this;
        }
        @CustomType.Setter
        public Builder claimType(String claimType) {
            if (claimType == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "claimType");
            }
            this.claimType = claimType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder valueType(String valueType) {
            if (valueType == null) {
              throw new MissingRequiredPropertyException("GetAuthServerClaimResult", "valueType");
            }
            this.valueType = valueType;
            return this;
        }
        public GetAuthServerClaimResult build() {
            final var _resultValue = new GetAuthServerClaimResult();
            _resultValue.alwaysIncludeInToken = alwaysIncludeInToken;
            _resultValue.authServerId = authServerId;
            _resultValue.claimType = claimType;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.scopes = scopes;
            _resultValue.status = status;
            _resultValue.value = value;
            _resultValue.valueType = valueType;
            return _resultValue;
        }
    }
}
