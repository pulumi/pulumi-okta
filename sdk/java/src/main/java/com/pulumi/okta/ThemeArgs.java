// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThemeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThemeArgs Empty = new ThemeArgs();

    /**
     * Path to local file
     * 
     */
    @Import(name="backgroundImage")
    private @Nullable Output<String> backgroundImage;

    /**
     * @return Path to local file
     * 
     */
    public Optional<Output<String>> backgroundImage() {
        return Optional.ofNullable(this.backgroundImage);
    }

    /**
     * Brand ID
     * 
     */
    @Import(name="brandId", required=true)
    private Output<String> brandId;

    /**
     * @return Brand ID
     * 
     */
    public Output<String> brandId() {
        return this.brandId;
    }

    /**
     * Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     * 
     */
    @Import(name="emailTemplateTouchPointVariant")
    private @Nullable Output<String> emailTemplateTouchPointVariant;

    /**
     * @return Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     * 
     */
    public Optional<Output<String>> emailTemplateTouchPointVariant() {
        return Optional.ofNullable(this.emailTemplateTouchPointVariant);
    }

    /**
     * Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     * 
     */
    @Import(name="endUserDashboardTouchPointVariant")
    private @Nullable Output<String> endUserDashboardTouchPointVariant;

    /**
     * @return Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     * 
     */
    public Optional<Output<String>> endUserDashboardTouchPointVariant() {
        return Optional.ofNullable(this.endUserDashboardTouchPointVariant);
    }

    /**
     * Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    @Import(name="errorPageTouchPointVariant")
    private @Nullable Output<String> errorPageTouchPointVariant;

    /**
     * @return Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    public Optional<Output<String>> errorPageTouchPointVariant() {
        return Optional.ofNullable(this.errorPageTouchPointVariant);
    }

    /**
     * Path to local file
     * 
     */
    @Import(name="favicon")
    private @Nullable Output<String> favicon;

    /**
     * @return Path to local file
     * 
     */
    public Optional<Output<String>> favicon() {
        return Optional.ofNullable(this.favicon);
    }

    /**
     * Path to local file
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Path to local file
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Primary color contrast hex code
     * 
     */
    @Import(name="primaryColorContrastHex")
    private @Nullable Output<String> primaryColorContrastHex;

    /**
     * @return Primary color contrast hex code
     * 
     */
    public Optional<Output<String>> primaryColorContrastHex() {
        return Optional.ofNullable(this.primaryColorContrastHex);
    }

    /**
     * Primary color hex code
     * 
     */
    @Import(name="primaryColorHex")
    private @Nullable Output<String> primaryColorHex;

    /**
     * @return Primary color hex code
     * 
     */
    public Optional<Output<String>> primaryColorHex() {
        return Optional.ofNullable(this.primaryColorHex);
    }

    /**
     * Secondary color contrast hex code
     * 
     */
    @Import(name="secondaryColorContrastHex")
    private @Nullable Output<String> secondaryColorContrastHex;

    /**
     * @return Secondary color contrast hex code
     * 
     */
    public Optional<Output<String>> secondaryColorContrastHex() {
        return Optional.ofNullable(this.secondaryColorContrastHex);
    }

    /**
     * Secondary color hex code
     * 
     */
    @Import(name="secondaryColorHex")
    private @Nullable Output<String> secondaryColorHex;

    /**
     * @return Secondary color hex code
     * 
     */
    public Optional<Output<String>> secondaryColorHex() {
        return Optional.ofNullable(this.secondaryColorHex);
    }

    /**
     * Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    @Import(name="signInPageTouchPointVariant")
    private @Nullable Output<String> signInPageTouchPointVariant;

    /**
     * @return Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    public Optional<Output<String>> signInPageTouchPointVariant() {
        return Optional.ofNullable(this.signInPageTouchPointVariant);
    }

    /**
     * Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
     * 
     */
    @Import(name="themeId")
    private @Nullable Output<String> themeId;

    /**
     * @return Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
     * 
     */
    public Optional<Output<String>> themeId() {
        return Optional.ofNullable(this.themeId);
    }

    private ThemeArgs() {}

    private ThemeArgs(ThemeArgs $) {
        this.backgroundImage = $.backgroundImage;
        this.brandId = $.brandId;
        this.emailTemplateTouchPointVariant = $.emailTemplateTouchPointVariant;
        this.endUserDashboardTouchPointVariant = $.endUserDashboardTouchPointVariant;
        this.errorPageTouchPointVariant = $.errorPageTouchPointVariant;
        this.favicon = $.favicon;
        this.logo = $.logo;
        this.primaryColorContrastHex = $.primaryColorContrastHex;
        this.primaryColorHex = $.primaryColorHex;
        this.secondaryColorContrastHex = $.secondaryColorContrastHex;
        this.secondaryColorHex = $.secondaryColorHex;
        this.signInPageTouchPointVariant = $.signInPageTouchPointVariant;
        this.themeId = $.themeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeArgs $;

        public Builder() {
            $ = new ThemeArgs();
        }

        public Builder(ThemeArgs defaults) {
            $ = new ThemeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backgroundImage Path to local file
         * 
         * @return builder
         * 
         */
        public Builder backgroundImage(@Nullable Output<String> backgroundImage) {
            $.backgroundImage = backgroundImage;
            return this;
        }

        /**
         * @param backgroundImage Path to local file
         * 
         * @return builder
         * 
         */
        public Builder backgroundImage(String backgroundImage) {
            return backgroundImage(Output.of(backgroundImage));
        }

        /**
         * @param brandId Brand ID
         * 
         * @return builder
         * 
         */
        public Builder brandId(Output<String> brandId) {
            $.brandId = brandId;
            return this;
        }

        /**
         * @param brandId Brand ID
         * 
         * @return builder
         * 
         */
        public Builder brandId(String brandId) {
            return brandId(Output.of(brandId));
        }

        /**
         * @param emailTemplateTouchPointVariant Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
         * 
         * @return builder
         * 
         */
        public Builder emailTemplateTouchPointVariant(@Nullable Output<String> emailTemplateTouchPointVariant) {
            $.emailTemplateTouchPointVariant = emailTemplateTouchPointVariant;
            return this;
        }

        /**
         * @param emailTemplateTouchPointVariant Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
         * 
         * @return builder
         * 
         */
        public Builder emailTemplateTouchPointVariant(String emailTemplateTouchPointVariant) {
            return emailTemplateTouchPointVariant(Output.of(emailTemplateTouchPointVariant));
        }

        /**
         * @param endUserDashboardTouchPointVariant Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
         * 
         * @return builder
         * 
         */
        public Builder endUserDashboardTouchPointVariant(@Nullable Output<String> endUserDashboardTouchPointVariant) {
            $.endUserDashboardTouchPointVariant = endUserDashboardTouchPointVariant;
            return this;
        }

        /**
         * @param endUserDashboardTouchPointVariant Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
         * 
         * @return builder
         * 
         */
        public Builder endUserDashboardTouchPointVariant(String endUserDashboardTouchPointVariant) {
            return endUserDashboardTouchPointVariant(Output.of(endUserDashboardTouchPointVariant));
        }

        /**
         * @param errorPageTouchPointVariant Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
         * 
         * @return builder
         * 
         */
        public Builder errorPageTouchPointVariant(@Nullable Output<String> errorPageTouchPointVariant) {
            $.errorPageTouchPointVariant = errorPageTouchPointVariant;
            return this;
        }

        /**
         * @param errorPageTouchPointVariant Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
         * 
         * @return builder
         * 
         */
        public Builder errorPageTouchPointVariant(String errorPageTouchPointVariant) {
            return errorPageTouchPointVariant(Output.of(errorPageTouchPointVariant));
        }

        /**
         * @param favicon Path to local file
         * 
         * @return builder
         * 
         */
        public Builder favicon(@Nullable Output<String> favicon) {
            $.favicon = favicon;
            return this;
        }

        /**
         * @param favicon Path to local file
         * 
         * @return builder
         * 
         */
        public Builder favicon(String favicon) {
            return favicon(Output.of(favicon));
        }

        /**
         * @param logo Path to local file
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Path to local file
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param primaryColorContrastHex Primary color contrast hex code
         * 
         * @return builder
         * 
         */
        public Builder primaryColorContrastHex(@Nullable Output<String> primaryColorContrastHex) {
            $.primaryColorContrastHex = primaryColorContrastHex;
            return this;
        }

        /**
         * @param primaryColorContrastHex Primary color contrast hex code
         * 
         * @return builder
         * 
         */
        public Builder primaryColorContrastHex(String primaryColorContrastHex) {
            return primaryColorContrastHex(Output.of(primaryColorContrastHex));
        }

        /**
         * @param primaryColorHex Primary color hex code
         * 
         * @return builder
         * 
         */
        public Builder primaryColorHex(@Nullable Output<String> primaryColorHex) {
            $.primaryColorHex = primaryColorHex;
            return this;
        }

        /**
         * @param primaryColorHex Primary color hex code
         * 
         * @return builder
         * 
         */
        public Builder primaryColorHex(String primaryColorHex) {
            return primaryColorHex(Output.of(primaryColorHex));
        }

        /**
         * @param secondaryColorContrastHex Secondary color contrast hex code
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorContrastHex(@Nullable Output<String> secondaryColorContrastHex) {
            $.secondaryColorContrastHex = secondaryColorContrastHex;
            return this;
        }

        /**
         * @param secondaryColorContrastHex Secondary color contrast hex code
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorContrastHex(String secondaryColorContrastHex) {
            return secondaryColorContrastHex(Output.of(secondaryColorContrastHex));
        }

        /**
         * @param secondaryColorHex Secondary color hex code
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorHex(@Nullable Output<String> secondaryColorHex) {
            $.secondaryColorHex = secondaryColorHex;
            return this;
        }

        /**
         * @param secondaryColorHex Secondary color hex code
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorHex(String secondaryColorHex) {
            return secondaryColorHex(Output.of(secondaryColorHex));
        }

        /**
         * @param signInPageTouchPointVariant Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
         * 
         * @return builder
         * 
         */
        public Builder signInPageTouchPointVariant(@Nullable Output<String> signInPageTouchPointVariant) {
            $.signInPageTouchPointVariant = signInPageTouchPointVariant;
            return this;
        }

        /**
         * @param signInPageTouchPointVariant Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
         * 
         * @return builder
         * 
         */
        public Builder signInPageTouchPointVariant(String signInPageTouchPointVariant) {
            return signInPageTouchPointVariant(Output.of(signInPageTouchPointVariant));
        }

        /**
         * @param themeId Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
         * 
         * @return builder
         * 
         */
        public Builder themeId(@Nullable Output<String> themeId) {
            $.themeId = themeId;
            return this;
        }

        /**
         * @param themeId Theme ID - Note: Okta API for theme only reads and updates therefore the okta*theme resource needs to act as a quasi data source. Do this by setting theme*id.
         * 
         * @return builder
         * 
         */
        public Builder themeId(String themeId) {
            return themeId(Output.of(themeId));
        }

        public ThemeArgs build() {
            $.brandId = Objects.requireNonNull($.brandId, "expected parameter 'brandId' to be non-null");
            return $;
        }
    }

}
