// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final RealmAssignmentArgs Empty = new RealmAssignmentArgs();

    /**
     * Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or `user.profile.state.contains(&#34;example&#34;)`.
     * 
     */
    @Import(name="conditionExpression")
    private @Nullable Output<String> conditionExpression;

    /**
     * @return Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or `user.profile.state.contains(&#34;example&#34;)`.
     * 
     */
    public Optional<Output<String>> conditionExpression() {
        return Optional.ofNullable(this.conditionExpression);
    }

    /**
     * The name of the Okta Realm Assignment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Okta Realm Assignment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Priority of the Realm Assignment. The lower the number, the higher the priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The Priority of the Realm Assignment. The lower the number, the higher the priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the Profile Source.
     * 
     */
    @Import(name="profileSourceId", required=true)
    private Output<String> profileSourceId;

    /**
     * @return The ID of the Profile Source.
     * 
     */
    public Output<String> profileSourceId() {
        return this.profileSourceId;
    }

    /**
     * The ID of the Realm asscociated with the Realm Assignment.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The ID of the Realm asscociated with the Realm Assignment.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    /**
     * Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RealmAssignmentArgs() {}

    private RealmAssignmentArgs(RealmAssignmentArgs $) {
        this.conditionExpression = $.conditionExpression;
        this.name = $.name;
        this.priority = $.priority;
        this.profileSourceId = $.profileSourceId;
        this.realmId = $.realmId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmAssignmentArgs $;

        public Builder() {
            $ = new RealmAssignmentArgs();
        }

        public Builder(RealmAssignmentArgs defaults) {
            $ = new RealmAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionExpression Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or `user.profile.state.contains(&#34;example&#34;)`.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(@Nullable Output<String> conditionExpression) {
            $.conditionExpression = conditionExpression;
            return this;
        }

        /**
         * @param conditionExpression Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or `user.profile.state.contains(&#34;example&#34;)`.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(String conditionExpression) {
            return conditionExpression(Output.of(conditionExpression));
        }

        /**
         * @param name The name of the Okta Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Okta Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The Priority of the Realm Assignment. The lower the number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The Priority of the Realm Assignment. The lower the number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param profileSourceId The ID of the Profile Source.
         * 
         * @return builder
         * 
         */
        public Builder profileSourceId(Output<String> profileSourceId) {
            $.profileSourceId = profileSourceId;
            return this;
        }

        /**
         * @param profileSourceId The ID of the Profile Source.
         * 
         * @return builder
         * 
         */
        public Builder profileSourceId(String profileSourceId) {
            return profileSourceId(Output.of(profileSourceId));
        }

        /**
         * @param realmId The ID of the Realm asscociated with the Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The ID of the Realm asscociated with the Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param status Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RealmAssignmentArgs build() {
            if ($.profileSourceId == null) {
                throw new MissingRequiredPropertyException("RealmAssignmentArgs", "profileSourceId");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("RealmAssignmentArgs", "realmId");
            }
            return $;
        }
    }

}
