// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    private List<String> adminRoles;
    private String city;
    private String costCenter;
    private String countryCode;
    private String customProfileAttributes;
    private String department;
    private String displayName;
    private String division;
    private String email;
    private String employeeNumber;
    private String firstName;
    private List<String> groupMemberships;
    private String honorificPrefix;
    private String honorificSuffix;
    private String id;
    private String lastName;
    private String locale;
    private String login;
    private String manager;
    private String managerId;
    private String middleName;
    private String mobilePhone;
    private String nickName;
    private String organization;
    private String postalAddress;
    private String preferredLanguage;
    private String primaryPhone;
    private String profileUrl;
    private List<String> roles;
    private String secondEmail;
    private String state;
    private String status;
    private String streetAddress;
    private String timezone;
    private String title;
    private String userType;
    private String zipCode;

    private GetUsersUser() {}
    public List<String> adminRoles() {
        return this.adminRoles;
    }
    public String city() {
        return this.city;
    }
    public String costCenter() {
        return this.costCenter;
    }
    public String countryCode() {
        return this.countryCode;
    }
    public String customProfileAttributes() {
        return this.customProfileAttributes;
    }
    public String department() {
        return this.department;
    }
    public String displayName() {
        return this.displayName;
    }
    public String division() {
        return this.division;
    }
    public String email() {
        return this.email;
    }
    public String employeeNumber() {
        return this.employeeNumber;
    }
    public String firstName() {
        return this.firstName;
    }
    public List<String> groupMemberships() {
        return this.groupMemberships;
    }
    public String honorificPrefix() {
        return this.honorificPrefix;
    }
    public String honorificSuffix() {
        return this.honorificSuffix;
    }
    public String id() {
        return this.id;
    }
    public String lastName() {
        return this.lastName;
    }
    public String locale() {
        return this.locale;
    }
    public String login() {
        return this.login;
    }
    public String manager() {
        return this.manager;
    }
    public String managerId() {
        return this.managerId;
    }
    public String middleName() {
        return this.middleName;
    }
    public String mobilePhone() {
        return this.mobilePhone;
    }
    public String nickName() {
        return this.nickName;
    }
    public String organization() {
        return this.organization;
    }
    public String postalAddress() {
        return this.postalAddress;
    }
    public String preferredLanguage() {
        return this.preferredLanguage;
    }
    public String primaryPhone() {
        return this.primaryPhone;
    }
    public String profileUrl() {
        return this.profileUrl;
    }
    public List<String> roles() {
        return this.roles;
    }
    public String secondEmail() {
        return this.secondEmail;
    }
    public String state() {
        return this.state;
    }
    public String status() {
        return this.status;
    }
    public String streetAddress() {
        return this.streetAddress;
    }
    public String timezone() {
        return this.timezone;
    }
    public String title() {
        return this.title;
    }
    public String userType() {
        return this.userType;
    }
    public String zipCode() {
        return this.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> adminRoles;
        private String city;
        private String costCenter;
        private String countryCode;
        private String customProfileAttributes;
        private String department;
        private String displayName;
        private String division;
        private String email;
        private String employeeNumber;
        private String firstName;
        private List<String> groupMemberships;
        private String honorificPrefix;
        private String honorificSuffix;
        private String id;
        private String lastName;
        private String locale;
        private String login;
        private String manager;
        private String managerId;
        private String middleName;
        private String mobilePhone;
        private String nickName;
        private String organization;
        private String postalAddress;
        private String preferredLanguage;
        private String primaryPhone;
        private String profileUrl;
        private List<String> roles;
        private String secondEmail;
        private String state;
        private String status;
        private String streetAddress;
        private String timezone;
        private String title;
        private String userType;
        private String zipCode;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminRoles = defaults.adminRoles;
    	      this.city = defaults.city;
    	      this.costCenter = defaults.costCenter;
    	      this.countryCode = defaults.countryCode;
    	      this.customProfileAttributes = defaults.customProfileAttributes;
    	      this.department = defaults.department;
    	      this.displayName = defaults.displayName;
    	      this.division = defaults.division;
    	      this.email = defaults.email;
    	      this.employeeNumber = defaults.employeeNumber;
    	      this.firstName = defaults.firstName;
    	      this.groupMemberships = defaults.groupMemberships;
    	      this.honorificPrefix = defaults.honorificPrefix;
    	      this.honorificSuffix = defaults.honorificSuffix;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.locale = defaults.locale;
    	      this.login = defaults.login;
    	      this.manager = defaults.manager;
    	      this.managerId = defaults.managerId;
    	      this.middleName = defaults.middleName;
    	      this.mobilePhone = defaults.mobilePhone;
    	      this.nickName = defaults.nickName;
    	      this.organization = defaults.organization;
    	      this.postalAddress = defaults.postalAddress;
    	      this.preferredLanguage = defaults.preferredLanguage;
    	      this.primaryPhone = defaults.primaryPhone;
    	      this.profileUrl = defaults.profileUrl;
    	      this.roles = defaults.roles;
    	      this.secondEmail = defaults.secondEmail;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.streetAddress = defaults.streetAddress;
    	      this.timezone = defaults.timezone;
    	      this.title = defaults.title;
    	      this.userType = defaults.userType;
    	      this.zipCode = defaults.zipCode;
        }

        @CustomType.Setter
        public Builder adminRoles(List<String> adminRoles) {
            if (adminRoles == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "adminRoles");
            }
            this.adminRoles = adminRoles;
            return this;
        }
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder costCenter(String costCenter) {
            if (costCenter == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "costCenter");
            }
            this.costCenter = costCenter;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(String countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder customProfileAttributes(String customProfileAttributes) {
            if (customProfileAttributes == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "customProfileAttributes");
            }
            this.customProfileAttributes = customProfileAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder department(String department) {
            if (department == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "department");
            }
            this.department = department;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder division(String division) {
            if (division == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "division");
            }
            this.division = division;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder employeeNumber(String employeeNumber) {
            if (employeeNumber == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "employeeNumber");
            }
            this.employeeNumber = employeeNumber;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder groupMemberships(List<String> groupMemberships) {
            if (groupMemberships == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "groupMemberships");
            }
            this.groupMemberships = groupMemberships;
            return this;
        }
        public Builder groupMemberships(String... groupMemberships) {
            return groupMemberships(List.of(groupMemberships));
        }
        @CustomType.Setter
        public Builder honorificPrefix(String honorificPrefix) {
            if (honorificPrefix == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "honorificPrefix");
            }
            this.honorificPrefix = honorificPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder honorificSuffix(String honorificSuffix) {
            if (honorificSuffix == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "honorificSuffix");
            }
            this.honorificSuffix = honorificSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder locale(String locale) {
            if (locale == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "locale");
            }
            this.locale = locale;
            return this;
        }
        @CustomType.Setter
        public Builder login(String login) {
            if (login == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "login");
            }
            this.login = login;
            return this;
        }
        @CustomType.Setter
        public Builder manager(String manager) {
            if (manager == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "manager");
            }
            this.manager = manager;
            return this;
        }
        @CustomType.Setter
        public Builder managerId(String managerId) {
            if (managerId == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "managerId");
            }
            this.managerId = managerId;
            return this;
        }
        @CustomType.Setter
        public Builder middleName(String middleName) {
            if (middleName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "middleName");
            }
            this.middleName = middleName;
            return this;
        }
        @CustomType.Setter
        public Builder mobilePhone(String mobilePhone) {
            if (mobilePhone == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "mobilePhone");
            }
            this.mobilePhone = mobilePhone;
            return this;
        }
        @CustomType.Setter
        public Builder nickName(String nickName) {
            if (nickName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "nickName");
            }
            this.nickName = nickName;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder postalAddress(String postalAddress) {
            if (postalAddress == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "postalAddress");
            }
            this.postalAddress = postalAddress;
            return this;
        }
        @CustomType.Setter
        public Builder preferredLanguage(String preferredLanguage) {
            if (preferredLanguage == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "preferredLanguage");
            }
            this.preferredLanguage = preferredLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder primaryPhone(String primaryPhone) {
            if (primaryPhone == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "primaryPhone");
            }
            this.primaryPhone = primaryPhone;
            return this;
        }
        @CustomType.Setter
        public Builder profileUrl(String profileUrl) {
            if (profileUrl == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "profileUrl");
            }
            this.profileUrl = profileUrl;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder secondEmail(String secondEmail) {
            if (secondEmail == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "secondEmail");
            }
            this.secondEmail = secondEmail;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder streetAddress(String streetAddress) {
            if (streetAddress == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "streetAddress");
            }
            this.streetAddress = streetAddress;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder userType(String userType) {
            if (userType == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "userType");
            }
            this.userType = userType;
            return this;
        }
        @CustomType.Setter
        public Builder zipCode(String zipCode) {
            if (zipCode == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "zipCode");
            }
            this.zipCode = zipCode;
            return this;
        }
        public GetUsersUser build() {
            final var _resultValue = new GetUsersUser();
            _resultValue.adminRoles = adminRoles;
            _resultValue.city = city;
            _resultValue.costCenter = costCenter;
            _resultValue.countryCode = countryCode;
            _resultValue.customProfileAttributes = customProfileAttributes;
            _resultValue.department = department;
            _resultValue.displayName = displayName;
            _resultValue.division = division;
            _resultValue.email = email;
            _resultValue.employeeNumber = employeeNumber;
            _resultValue.firstName = firstName;
            _resultValue.groupMemberships = groupMemberships;
            _resultValue.honorificPrefix = honorificPrefix;
            _resultValue.honorificSuffix = honorificSuffix;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.locale = locale;
            _resultValue.login = login;
            _resultValue.manager = manager;
            _resultValue.managerId = managerId;
            _resultValue.middleName = middleName;
            _resultValue.mobilePhone = mobilePhone;
            _resultValue.nickName = nickName;
            _resultValue.organization = organization;
            _resultValue.postalAddress = postalAddress;
            _resultValue.preferredLanguage = preferredLanguage;
            _resultValue.primaryPhone = primaryPhone;
            _resultValue.profileUrl = profileUrl;
            _resultValue.roles = roles;
            _resultValue.secondEmail = secondEmail;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.streetAddress = streetAddress;
            _resultValue.timezone = timezone;
            _resultValue.title = title;
            _resultValue.userType = userType;
            _resultValue.zipCode = zipCode;
            return _resultValue;
        }
    }
}
