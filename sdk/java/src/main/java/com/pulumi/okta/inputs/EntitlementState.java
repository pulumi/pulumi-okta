// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.EntitlementParentArgs;
import com.pulumi.okta.inputs.EntitlementValueArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntitlementState extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementState Empty = new EntitlementState();

    /**
     * The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: &#34;array&#34;, &#34;string&#34;.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: &#34;array&#34;, &#34;string&#34;.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * The description of an entitlement property.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of an entitlement property.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The value of an entitlement property.
     * 
     */
    @Import(name="externalValue")
    private @Nullable Output<String> externalValue;

    /**
     * @return The value of an entitlement property.
     * 
     */
    public Optional<Output<String>> externalValue() {
        return Optional.ofNullable(this.externalValue);
    }

    /**
     * The property that determines if the entitlement property can hold multiple values.
     * 
     */
    @Import(name="multiValue")
    private @Nullable Output<Boolean> multiValue;

    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    public Optional<Output<Boolean>> multiValue() {
        return Optional.ofNullable(this.multiValue);
    }

    /**
     * The display name for an entitlement property.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name for an entitlement property.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Representation of a resource
     * 
     */
    @Import(name="parent")
    private @Nullable Output<EntitlementParentArgs> parent;

    /**
     * @return Representation of a resource
     * 
     */
    public Optional<Output<EntitlementParentArgs>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * The Okta app instance, in ORN format.
     * 
     */
    @Import(name="parentResourceOrn")
    private @Nullable Output<String> parentResourceOrn;

    /**
     * @return The Okta app instance, in ORN format.
     * 
     */
    public Optional<Output<String>> parentResourceOrn() {
        return Optional.ofNullable(this.parentResourceOrn);
    }

    /**
     * The value of the entitlement property.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value of the entitlement property.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="values")
    private @Nullable Output<List<EntitlementValueArgs>> values;

    public Optional<Output<List<EntitlementValueArgs>>> values() {
        return Optional.ofNullable(this.values);
    }

    private EntitlementState() {}

    private EntitlementState(EntitlementState $) {
        this.dataType = $.dataType;
        this.description = $.description;
        this.externalValue = $.externalValue;
        this.multiValue = $.multiValue;
        this.name = $.name;
        this.parent = $.parent;
        this.parentResourceOrn = $.parentResourceOrn;
        this.value = $.value;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementState $;

        public Builder() {
            $ = new EntitlementState();
        }

        public Builder(EntitlementState defaults) {
            $ = new EntitlementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: &#34;array&#34;, &#34;string&#34;.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type of the entitlement property. If the entitlement property is multivalued, the data type is replaced with an array. Enum: &#34;array&#34;, &#34;string&#34;.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param description The description of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalValue The value of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder externalValue(@Nullable Output<String> externalValue) {
            $.externalValue = externalValue;
            return this;
        }

        /**
         * @param externalValue The value of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder externalValue(String externalValue) {
            return externalValue(Output.of(externalValue));
        }

        /**
         * @param multiValue The property that determines if the entitlement property can hold multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(@Nullable Output<Boolean> multiValue) {
            $.multiValue = multiValue;
            return this;
        }

        /**
         * @param multiValue The property that determines if the entitlement property can hold multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(Boolean multiValue) {
            return multiValue(Output.of(multiValue));
        }

        /**
         * @param name The display name for an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name for an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent Representation of a resource
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<EntitlementParentArgs> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Representation of a resource
         * 
         * @return builder
         * 
         */
        public Builder parent(EntitlementParentArgs parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param parentResourceOrn The Okta app instance, in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceOrn(@Nullable Output<String> parentResourceOrn) {
            $.parentResourceOrn = parentResourceOrn;
            return this;
        }

        /**
         * @param parentResourceOrn The Okta app instance, in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceOrn(String parentResourceOrn) {
            return parentResourceOrn(Output.of(parentResourceOrn));
        }

        /**
         * @param value The value of the entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder values(@Nullable Output<List<EntitlementValueArgs>> values) {
            $.values = values;
            return this;
        }

        public Builder values(List<EntitlementValueArgs> values) {
            return values(Output.of(values));
        }

        public Builder values(EntitlementValueArgs... values) {
            return values(List.of(values));
        }

        public EntitlementState build() {
            return $;
        }
    }

}
