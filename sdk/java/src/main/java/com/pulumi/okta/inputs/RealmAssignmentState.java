// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final RealmAssignmentState Empty = new RealmAssignmentState();

    /**
     * Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or
     * `user.profile.state.contains(&#34;example&#34;)`.
     * 
     */
    @Import(name="conditionExpression")
    private @Nullable Output<String> conditionExpression;

    /**
     * @return Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or
     * `user.profile.state.contains(&#34;example&#34;)`.
     * 
     */
    public Optional<Output<String>> conditionExpression() {
        return Optional.ofNullable(this.conditionExpression);
    }

    /**
     * Indicates whether the realm assignment is the default.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Indicates whether the realm assignment is the default.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The name of the Okta Realm Assignment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Okta Realm Assignment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Priority of the Realm Assignment. The lower the number, the higher the priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The Priority of the Realm Assignment. The lower the number, the higher the priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the Profile Source.
     * 
     */
    @Import(name="profileSourceId")
    private @Nullable Output<String> profileSourceId;

    /**
     * @return The ID of the Profile Source.
     * 
     */
    public Optional<Output<String>> profileSourceId() {
        return Optional.ofNullable(this.profileSourceId);
    }

    /**
     * The ID of the Realm asscociated with the Realm Assignment.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The ID of the Realm asscociated with the Realm Assignment.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RealmAssignmentState() {}

    private RealmAssignmentState(RealmAssignmentState $) {
        this.conditionExpression = $.conditionExpression;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.priority = $.priority;
        this.profileSourceId = $.profileSourceId;
        this.realmId = $.realmId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmAssignmentState $;

        public Builder() {
            $ = new RealmAssignmentState();
        }

        public Builder(RealmAssignmentState defaults) {
            $ = new RealmAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionExpression Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or
         * `user.profile.state.contains(&#34;example&#34;)`.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(@Nullable Output<String> conditionExpression) {
            $.conditionExpression = conditionExpression;
            return this;
        }

        /**
         * @param conditionExpression Condition expression for the Realm Assignment in Okta Expression Language. Example: `user.profile.role ==&#34;Manager&#34;` or
         * `user.profile.state.contains(&#34;example&#34;)`.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(String conditionExpression) {
            return conditionExpression(Output.of(conditionExpression));
        }

        /**
         * @param isDefault Indicates whether the realm assignment is the default.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Indicates whether the realm assignment is the default.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name The name of the Okta Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Okta Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The Priority of the Realm Assignment. The lower the number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The Priority of the Realm Assignment. The lower the number, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param profileSourceId The ID of the Profile Source.
         * 
         * @return builder
         * 
         */
        public Builder profileSourceId(@Nullable Output<String> profileSourceId) {
            $.profileSourceId = profileSourceId;
            return this;
        }

        /**
         * @param profileSourceId The ID of the Profile Source.
         * 
         * @return builder
         * 
         */
        public Builder profileSourceId(String profileSourceId) {
            return profileSourceId(Output.of(profileSourceId));
        }

        /**
         * @param realmId The ID of the Realm asscociated with the Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The ID of the Realm asscociated with the Realm Assignment.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param status Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Defines whether the Realm Assignment is active or not. Valid values: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RealmAssignmentState build() {
            return $;
        }
    }

}
