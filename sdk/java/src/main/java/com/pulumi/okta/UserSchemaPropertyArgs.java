// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.UserSchemaPropertyArrayOneOfArgs;
import com.pulumi.okta.inputs.UserSchemaPropertyMasterOverridePriorityArgs;
import com.pulumi.okta.inputs.UserSchemaPropertyOneOfArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSchemaPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserSchemaPropertyArgs Empty = new UserSchemaPropertyArgs();

    /**
     * Array of values that an array property&#39;s items can be set to.
     * 
     */
    @Import(name="arrayEnums")
    private @Nullable Output<List<String>> arrayEnums;

    /**
     * @return Array of values that an array property&#39;s items can be set to.
     * 
     */
    public Optional<Output<List<String>>> arrayEnums() {
        return Optional.ofNullable(this.arrayEnums);
    }

    /**
     * Display name and value an enum array can be set to.
     * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
     * 	- &#39;title&#39; - (Required) display name for the enum value.
     * 
     */
    @Import(name="arrayOneOfs")
    private @Nullable Output<List<UserSchemaPropertyArrayOneOfArgs>> arrayOneOfs;

    /**
     * @return Display name and value an enum array can be set to.
     * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
     * 	- &#39;title&#39; - (Required) display name for the enum value.
     * 
     */
    public Optional<Output<List<UserSchemaPropertyArrayOneOfArgs>>> arrayOneOfs() {
        return Optional.ofNullable(this.arrayOneOfs);
    }

    /**
     * The type of the array elements if `type` is set to `array`
     * 
     */
    @Import(name="arrayType")
    private @Nullable Output<String> arrayType;

    /**
     * @return The type of the array elements if `type` is set to `array`
     * 
     */
    public Optional<Output<String>> arrayType() {
        return Optional.ofNullable(this.arrayType);
    }

    /**
     * The description of the user schema property.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the user schema property.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Array of values a primitive property can be set to. See `array_enum` for arrays.
     * 
     */
    @Import(name="enums")
    private @Nullable Output<List<String>> enums;

    /**
     * @return Array of values a primitive property can be set to. See `array_enum` for arrays.
     * 
     */
    public Optional<Output<List<String>>> enums() {
        return Optional.ofNullable(this.enums);
    }

    /**
     * External name of the user schema property.
     * 
     */
    @Import(name="externalName")
    private @Nullable Output<String> externalName;

    /**
     * @return External name of the user schema property.
     * 
     */
    public Optional<Output<String>> externalName() {
        return Optional.ofNullable(this.externalName);
    }

    /**
     * External namespace of the user schema property.
     * 
     */
    @Import(name="externalNamespace")
    private @Nullable Output<String> externalNamespace;

    /**
     * @return External namespace of the user schema property.
     * 
     */
    public Optional<Output<String>> externalNamespace() {
        return Optional.ofNullable(this.externalNamespace);
    }

    /**
     * Subschema unique string identifier
     * 
     */
    @Import(name="index", required=true)
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }

    /**
     * Master priority for the user schema property. It can be set to `PROFILE_MASTER`, `OVERRIDE` or `OKTA`.
     * 
     */
    @Import(name="master")
    private @Nullable Output<String> master;

    /**
     * @return Master priority for the user schema property. It can be set to `PROFILE_MASTER`, `OVERRIDE` or `OKTA`.
     * 
     */
    public Optional<Output<String>> master() {
        return Optional.ofNullable(this.master);
    }

    /**
     * Prioritized list of profile sources (required when &#39;master&#39; is &#39;OVERRIDE&#39;).
     * 	- &#39;type&#39; - (Optional) - Type of profile source.
     * 	- &#39;value&#39; - (Required) - ID of profile source.
     * 
     */
    @Import(name="masterOverridePriorities")
    private @Nullable Output<List<UserSchemaPropertyMasterOverridePriorityArgs>> masterOverridePriorities;

    /**
     * @return Prioritized list of profile sources (required when &#39;master&#39; is &#39;OVERRIDE&#39;).
     * 	- &#39;type&#39; - (Optional) - Type of profile source.
     * 	- &#39;value&#39; - (Required) - ID of profile source.
     * 
     */
    public Optional<Output<List<UserSchemaPropertyMasterOverridePriorityArgs>>> masterOverridePriorities() {
        return Optional.ofNullable(this.masterOverridePriorities);
    }

    /**
     * The maximum length of the user property value. Only applies to type `string`
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return The maximum length of the user property value. Only applies to type `string`
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * The minimum length of the user property value. Only applies to type `string`
     * 
     */
    @Import(name="minLength")
    private @Nullable Output<Integer> minLength;

    /**
     * @return The minimum length of the user property value. Only applies to type `string`
     * 
     */
    public Optional<Output<Integer>> minLength() {
        return Optional.ofNullable(this.minLength);
    }

    /**
     * Array of maps containing a mapping for display name to enum value.
     * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
     * 	- &#39;title&#39; - (Required) display name for the enum value.
     * 
     */
    @Import(name="oneOfs")
    private @Nullable Output<List<UserSchemaPropertyOneOfArgs>> oneOfs;

    /**
     * @return Array of maps containing a mapping for display name to enum value.
     * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
     * 	- &#39;title&#39; - (Required) display name for the enum value.
     * 
     */
    public Optional<Output<List<UserSchemaPropertyOneOfArgs>>> oneOfs() {
        return Optional.ofNullable(this.oneOfs);
    }

    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Whether the subschema is required
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * determines whether an app user attribute can be set at the Individual or Group Level. Default: `NONE`
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return determines whether an app user attribute can be set at the Individual or Group Level. Default: `NONE`
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Subschema title (display name)
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Subschema title (display name)
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
     * 
     */
    @Import(name="unique")
    private @Nullable Output<String> unique;

    /**
     * @return Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
     * 
     */
    public Optional<Output<String>> unique() {
        return Optional.ofNullable(this.unique);
    }

    /**
     * User type ID. By default, it is `default`
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return User type ID. By default, it is `default`
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private UserSchemaPropertyArgs() {}

    private UserSchemaPropertyArgs(UserSchemaPropertyArgs $) {
        this.arrayEnums = $.arrayEnums;
        this.arrayOneOfs = $.arrayOneOfs;
        this.arrayType = $.arrayType;
        this.description = $.description;
        this.enums = $.enums;
        this.externalName = $.externalName;
        this.externalNamespace = $.externalNamespace;
        this.index = $.index;
        this.master = $.master;
        this.masterOverridePriorities = $.masterOverridePriorities;
        this.maxLength = $.maxLength;
        this.minLength = $.minLength;
        this.oneOfs = $.oneOfs;
        this.pattern = $.pattern;
        this.permissions = $.permissions;
        this.required = $.required;
        this.scope = $.scope;
        this.title = $.title;
        this.type = $.type;
        this.unique = $.unique;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSchemaPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSchemaPropertyArgs $;

        public Builder() {
            $ = new UserSchemaPropertyArgs();
        }

        public Builder(UserSchemaPropertyArgs defaults) {
            $ = new UserSchemaPropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayEnums Array of values that an array property&#39;s items can be set to.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(@Nullable Output<List<String>> arrayEnums) {
            $.arrayEnums = arrayEnums;
            return this;
        }

        /**
         * @param arrayEnums Array of values that an array property&#39;s items can be set to.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(List<String> arrayEnums) {
            return arrayEnums(Output.of(arrayEnums));
        }

        /**
         * @param arrayEnums Array of values that an array property&#39;s items can be set to.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(String... arrayEnums) {
            return arrayEnums(List.of(arrayEnums));
        }

        /**
         * @param arrayOneOfs Display name and value an enum array can be set to.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(@Nullable Output<List<UserSchemaPropertyArrayOneOfArgs>> arrayOneOfs) {
            $.arrayOneOfs = arrayOneOfs;
            return this;
        }

        /**
         * @param arrayOneOfs Display name and value an enum array can be set to.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(List<UserSchemaPropertyArrayOneOfArgs> arrayOneOfs) {
            return arrayOneOfs(Output.of(arrayOneOfs));
        }

        /**
         * @param arrayOneOfs Display name and value an enum array can be set to.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(UserSchemaPropertyArrayOneOfArgs... arrayOneOfs) {
            return arrayOneOfs(List.of(arrayOneOfs));
        }

        /**
         * @param arrayType The type of the array elements if `type` is set to `array`
         * 
         * @return builder
         * 
         */
        public Builder arrayType(@Nullable Output<String> arrayType) {
            $.arrayType = arrayType;
            return this;
        }

        /**
         * @param arrayType The type of the array elements if `type` is set to `array`
         * 
         * @return builder
         * 
         */
        public Builder arrayType(String arrayType) {
            return arrayType(Output.of(arrayType));
        }

        /**
         * @param description The description of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enums Array of values a primitive property can be set to. See `array_enum` for arrays.
         * 
         * @return builder
         * 
         */
        public Builder enums(@Nullable Output<List<String>> enums) {
            $.enums = enums;
            return this;
        }

        /**
         * @param enums Array of values a primitive property can be set to. See `array_enum` for arrays.
         * 
         * @return builder
         * 
         */
        public Builder enums(List<String> enums) {
            return enums(Output.of(enums));
        }

        /**
         * @param enums Array of values a primitive property can be set to. See `array_enum` for arrays.
         * 
         * @return builder
         * 
         */
        public Builder enums(String... enums) {
            return enums(List.of(enums));
        }

        /**
         * @param externalName External name of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder externalName(@Nullable Output<String> externalName) {
            $.externalName = externalName;
            return this;
        }

        /**
         * @param externalName External name of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder externalName(String externalName) {
            return externalName(Output.of(externalName));
        }

        /**
         * @param externalNamespace External namespace of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder externalNamespace(@Nullable Output<String> externalNamespace) {
            $.externalNamespace = externalNamespace;
            return this;
        }

        /**
         * @param externalNamespace External namespace of the user schema property.
         * 
         * @return builder
         * 
         */
        public Builder externalNamespace(String externalNamespace) {
            return externalNamespace(Output.of(externalNamespace));
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param master Master priority for the user schema property. It can be set to `PROFILE_MASTER`, `OVERRIDE` or `OKTA`.
         * 
         * @return builder
         * 
         */
        public Builder master(@Nullable Output<String> master) {
            $.master = master;
            return this;
        }

        /**
         * @param master Master priority for the user schema property. It can be set to `PROFILE_MASTER`, `OVERRIDE` or `OKTA`.
         * 
         * @return builder
         * 
         */
        public Builder master(String master) {
            return master(Output.of(master));
        }

        /**
         * @param masterOverridePriorities Prioritized list of profile sources (required when &#39;master&#39; is &#39;OVERRIDE&#39;).
         * 	- &#39;type&#39; - (Optional) - Type of profile source.
         * 	- &#39;value&#39; - (Required) - ID of profile source.
         * 
         * @return builder
         * 
         */
        public Builder masterOverridePriorities(@Nullable Output<List<UserSchemaPropertyMasterOverridePriorityArgs>> masterOverridePriorities) {
            $.masterOverridePriorities = masterOverridePriorities;
            return this;
        }

        /**
         * @param masterOverridePriorities Prioritized list of profile sources (required when &#39;master&#39; is &#39;OVERRIDE&#39;).
         * 	- &#39;type&#39; - (Optional) - Type of profile source.
         * 	- &#39;value&#39; - (Required) - ID of profile source.
         * 
         * @return builder
         * 
         */
        public Builder masterOverridePriorities(List<UserSchemaPropertyMasterOverridePriorityArgs> masterOverridePriorities) {
            return masterOverridePriorities(Output.of(masterOverridePriorities));
        }

        /**
         * @param masterOverridePriorities Prioritized list of profile sources (required when &#39;master&#39; is &#39;OVERRIDE&#39;).
         * 	- &#39;type&#39; - (Optional) - Type of profile source.
         * 	- &#39;value&#39; - (Required) - ID of profile source.
         * 
         * @return builder
         * 
         */
        public Builder masterOverridePriorities(UserSchemaPropertyMasterOverridePriorityArgs... masterOverridePriorities) {
            return masterOverridePriorities(List.of(masterOverridePriorities));
        }

        /**
         * @param maxLength The maximum length of the user property value. Only applies to type `string`
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength The maximum length of the user property value. Only applies to type `string`
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param minLength The minimum length of the user property value. Only applies to type `string`
         * 
         * @return builder
         * 
         */
        public Builder minLength(@Nullable Output<Integer> minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param minLength The minimum length of the user property value. Only applies to type `string`
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            return minLength(Output.of(minLength));
        }

        /**
         * @param oneOfs Array of maps containing a mapping for display name to enum value.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(@Nullable Output<List<UserSchemaPropertyOneOfArgs>> oneOfs) {
            $.oneOfs = oneOfs;
            return this;
        }

        /**
         * @param oneOfs Array of maps containing a mapping for display name to enum value.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(List<UserSchemaPropertyOneOfArgs> oneOfs) {
            return oneOfs(Output.of(oneOfs));
        }

        /**
         * @param oneOfs Array of maps containing a mapping for display name to enum value.
         * 	- &#39;const&#39; - (Required) value mapping to member of &#39;enum&#39;.
         * 	- &#39;title&#39; - (Required) display name for the enum value.
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(UserSchemaPropertyOneOfArgs... oneOfs) {
            return oneOfs(List.of(oneOfs));
        }

        /**
         * @param pattern The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param permissions Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param scope determines whether an app user attribute can be set at the Individual or Group Level. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope determines whether an app user attribute can be set at the Individual or Group Level. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param title Subschema title (display name)
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Subschema title (display name)
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unique Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
         * 
         * @return builder
         * 
         */
        public Builder unique(@Nullable Output<String> unique) {
            $.unique = unique;
            return this;
        }

        /**
         * @param unique Whether the property should be unique. It can be set to `UNIQUE_VALIDATED` or `NOT_UNIQUE`.
         * 
         * @return builder
         * 
         */
        public Builder unique(String unique) {
            return unique(Output.of(unique));
        }

        /**
         * @param userType User type ID. By default, it is `default`
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType User type ID. By default, it is `default`
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserSchemaPropertyArgs build() {
            if ($.index == null) {
                throw new MissingRequiredPropertyException("UserSchemaPropertyArgs", "index");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("UserSchemaPropertyArgs", "title");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("UserSchemaPropertyArgs", "type");
            }
            return $;
        }
    }

}
