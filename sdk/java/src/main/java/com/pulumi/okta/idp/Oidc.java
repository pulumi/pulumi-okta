// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.idp.OidcArgs;
import com.pulumi.okta.idp.inputs.OidcState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an OIDC Identity Provider. This resource allows you to create and configure an OIDC Identity Provider.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.idp.Oidc;
 * import com.pulumi.okta.idp.OidcArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Oidc("example", OidcArgs.builder()
 *             .name("example")
 *             .authorizationUrl("https://idp.example.com/authorize")
 *             .authorizationBinding("HTTP-REDIRECT")
 *             .tokenUrl("https://idp.example.com/token")
 *             .tokenBinding("HTTP-POST")
 *             .userInfoUrl("https://idp.example.com/userinfo")
 *             .userInfoBinding("HTTP-REDIRECT")
 *             .jwksUrl("https://idp.example.com/keys")
 *             .jwksBinding("HTTP-REDIRECT")
 *             .scopes("openid")
 *             .clientId("efg456")
 *             .clientSecret("efg456")
 *             .issuerUrl("https://id.example.com")
 *             .usernameTemplate("idpuser.email")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:idp/oidc:Oidc example &amp;#60;idp id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:idp/oidc:Oidc")
public class Oidc extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     * 
     */
    @Export(name="accountLinkAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accountLinkAction;

    /**
     * @return Specifies the account linking action for an IdP user. Default: `AUTO`
     * 
     */
    public Output<Optional<String>> accountLinkAction() {
        return Codegen.optional(this.accountLinkAction);
    }
    /**
     * Group memberships to determine link candidates.
     * 
     */
    @Export(name="accountLinkGroupIncludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> accountLinkGroupIncludes;

    /**
     * @return Group memberships to determine link candidates.
     * 
     */
    public Output<Optional<List<String>>> accountLinkGroupIncludes() {
        return Codegen.optional(this.accountLinkGroupIncludes);
    }
    /**
     * The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    @Export(name="authorizationBinding", refs={String.class}, tree="[0]")
    private Output<String> authorizationBinding;

    /**
     * @return The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    public Output<String> authorizationBinding() {
        return this.authorizationBinding;
    }
    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    @Export(name="authorizationUrl", refs={String.class}, tree="[0]")
    private Output<String> authorizationUrl;

    /**
     * @return IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    public Output<String> authorizationUrl() {
        return this.authorizationUrl;
    }
    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output<String> clientId;

    /**
     * @return Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }
    /**
     * Client secret issued by AS for the Okta IdP instance.
     * 
     */
    @Export(name="clientSecret", refs={String.class}, tree="[0]")
    private Output<String> clientSecret;

    /**
     * @return Client secret issued by AS for the Okta IdP instance.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }
    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    @Export(name="deprovisionedAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deprovisionedAction;

    /**
     * @return Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    public Output<Optional<String>> deprovisionedAction() {
        return Codegen.optional(this.deprovisionedAction);
    }
    /**
     * Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     * 
     */
    @Export(name="groupsAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> groupsAction;

    /**
     * @return Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     * 
     */
    public Output<Optional<String>> groupsAction() {
        return Codegen.optional(this.groupsAction);
    }
    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
     * 
     */
    @Export(name="groupsAssignments", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupsAssignments;

    /**
     * @return List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
     * 
     */
    public Output<Optional<List<String>>> groupsAssignments() {
        return Codegen.optional(this.groupsAssignments);
    }
    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     * 
     */
    @Export(name="groupsAttribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> groupsAttribute;

    /**
     * @return IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     * 
     */
    public Output<Optional<String>> groupsAttribute() {
        return Codegen.optional(this.groupsAttribute);
    }
    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
     * 
     */
    @Export(name="groupsFilters", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupsFilters;

    /**
     * @return Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
     * 
     */
    public Output<Optional<List<String>>> groupsFilters() {
        return Codegen.optional(this.groupsFilters);
    }
    /**
     * Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
     * 
     */
    @Export(name="issuerMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> issuerMode;

    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, a custom domain URL, or dynamic. It can be `ORG_URL`, `CUSTOM_URL`, or `DYNAMIC`. Default: `ORG_URL`
     * 
     */
    public Output<Optional<String>> issuerMode() {
        return Codegen.optional(this.issuerMode);
    }
    /**
     * URI that identifies the issuer.
     * 
     */
    @Export(name="issuerUrl", refs={String.class}, tree="[0]")
    private Output<String> issuerUrl;

    /**
     * @return URI that identifies the issuer.
     * 
     */
    public Output<String> issuerUrl() {
        return this.issuerUrl;
    }
    /**
     * The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
     * 
     */
    @Export(name="jwksBinding", refs={String.class}, tree="[0]")
    private Output<String> jwksBinding;

    /**
     * @return The method of making a request for the OIDC JWKS. It can be set to `HTTP-POST` or `HTTP-REDIRECT`
     * 
     */
    public Output<String> jwksBinding() {
        return this.jwksBinding;
    }
    /**
     * Endpoint where the keys signer publishes its keys in a JWK Set.
     * 
     */
    @Export(name="jwksUrl", refs={String.class}, tree="[0]")
    private Output<String> jwksUrl;

    /**
     * @return Endpoint where the keys signer publishes its keys in a JWK Set.
     * 
     */
    public Output<String> jwksUrl() {
        return this.jwksUrl;
    }
    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    @Export(name="maxClockSkew", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxClockSkew;

    /**
     * @return Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    public Output<Optional<Integer>> maxClockSkew() {
        return Codegen.optional(this.maxClockSkew);
    }
    /**
     * Name of the IdP
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the IdP
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: [https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object](https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object)
     * 
     */
    @Export(name="pkceRequired", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pkceRequired;

    /**
     * @return Require Proof Key for Code Exchange (PKCE) for additional verification key rotation mode. See: [https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object](https://developer.okta.com/docs/reference/api/idps/#oauth-2-0-and-openid-connect-client-object)
     * 
     */
    public Output<Optional<Boolean>> pkceRequired() {
        return Codegen.optional(this.pkceRequired);
    }
    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     * 
     */
    @Export(name="profileMaster", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> profileMaster;

    /**
     * @return Determines if the IdP should act as a source of truth for user profile attributes.
     * 
     */
    public Output<Optional<Boolean>> profileMaster() {
        return Codegen.optional(this.profileMaster);
    }
    /**
     * The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
     * 
     */
    @Export(name="protocolType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> protocolType;

    /**
     * @return The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OIDC`
     * 
     */
    public Output<Optional<String>> protocolType() {
        return Codegen.optional(this.protocolType);
    }
    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     * 
     */
    @Export(name="provisioningAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> provisioningAction;

    /**
     * @return Provisioning action for an IdP user during authentication. Default: `AUTO`
     * 
     */
    public Output<Optional<String>> provisioningAction() {
        return Codegen.optional(this.provisioningAction);
    }
    /**
     * The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs [https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object](https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object)
     * 
     */
    @Export(name="requestSignatureAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> requestSignatureAlgorithm;

    /**
     * @return The HMAC Signature Algorithm used when signing an authorization request. Defaults to `HS256`. It can be `HS256`, `HS384`, `HS512`, `SHA-256`. `RS256`, `RS384`, or `RS512`. NOTE: `SHA-256` an undocumented legacy value and not continue to be valid. See API docs [https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object](https://developer.okta.com/docs/reference/api/idps/#oidc-request-signature-algorithm-object)
     * 
     */
    public Output<Optional<String>> requestSignatureAlgorithm() {
        return Codegen.optional(this.requestSignatureAlgorithm);
    }
    /**
     * Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
     * 
     */
    @Export(name="requestSignatureScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> requestSignatureScope;

    /**
     * @return Specifies whether to digitally sign an AuthnRequest messages to the IdP. Defaults to `REQUEST`. It can be `REQUEST` or `NONE`.
     * 
     */
    public Output<Optional<String>> requestSignatureScope() {
        return Codegen.optional(this.requestSignatureScope);
    }
    /**
     * The scopes of the IdP.
     * 
     */
    @Export(name="scopes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> scopes;

    /**
     * @return The scopes of the IdP.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }
    /**
     * Default to `ACTIVE`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Default to `ACTIVE`
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     * 
     */
    @Export(name="subjectMatchAttribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subjectMatchAttribute;

    /**
     * @return Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     * 
     */
    public Output<Optional<String>> subjectMatchAttribute() {
        return Codegen.optional(this.subjectMatchAttribute);
    }
    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     * 
     */
    @Export(name="subjectMatchType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subjectMatchType;

    /**
     * @return Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     * 
     */
    public Output<Optional<String>> subjectMatchType() {
        return Codegen.optional(this.subjectMatchType);
    }
    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    @Export(name="suspendedAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> suspendedAction;

    /**
     * @return Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    public Output<Optional<String>> suspendedAction() {
        return Codegen.optional(this.suspendedAction);
    }
    /**
     * The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    @Export(name="tokenBinding", refs={String.class}, tree="[0]")
    private Output<String> tokenBinding;

    /**
     * @return The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    public Output<String> tokenBinding() {
        return this.tokenBinding;
    }
    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    @Export(name="tokenUrl", refs={String.class}, tree="[0]")
    private Output<String> tokenUrl;

    /**
     * @return IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    public Output<String> tokenUrl() {
        return this.tokenUrl;
    }
    /**
     * Type of OIDC IdP.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of OIDC IdP.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    @Export(name="userInfoBinding", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userInfoBinding;

    public Output<Optional<String>> userInfoBinding() {
        return Codegen.optional(this.userInfoBinding);
    }
    /**
     * Protected resource endpoint that returns claims about the authenticated user.
     * 
     */
    @Export(name="userInfoUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userInfoUrl;

    /**
     * @return Protected resource endpoint that returns claims about the authenticated user.
     * 
     */
    public Output<Optional<String>> userInfoUrl() {
        return Codegen.optional(this.userInfoUrl);
    }
    /**
     * User type ID. Can be used as `target_id` in the `okta.profile.Mapping` resource.
     * 
     */
    @Export(name="userTypeId", refs={String.class}, tree="[0]")
    private Output<String> userTypeId;

    /**
     * @return User type ID. Can be used as `target_id` in the `okta.profile.Mapping` resource.
     * 
     */
    public Output<String> userTypeId() {
        return this.userTypeId;
    }
    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     * 
     */
    @Export(name="usernameTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> usernameTemplate;

    /**
     * @return Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     * 
     */
    public Output<Optional<String>> usernameTemplate() {
        return Codegen.optional(this.usernameTemplate);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Oidc(java.lang.String name) {
        this(name, OidcArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Oidc(java.lang.String name, OidcArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Oidc(java.lang.String name, OidcArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:idp/oidc:Oidc", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Oidc(java.lang.String name, Output<java.lang.String> id, @Nullable OidcState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:idp/oidc:Oidc", name, state, makeResourceOptions(options, id), false);
    }

    private static OidcArgs makeArgs(OidcArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OidcArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "clientSecret"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Oidc get(java.lang.String name, Output<java.lang.String> id, @Nullable OidcState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Oidc(name, id, state, options);
    }
}
