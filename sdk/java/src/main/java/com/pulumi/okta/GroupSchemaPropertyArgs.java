// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.GroupSchemaPropertyArrayOneOfArgs;
import com.pulumi.okta.inputs.GroupSchemaPropertyMasterOverridePriorityArgs;
import com.pulumi.okta.inputs.GroupSchemaPropertyOneOfArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupSchemaPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupSchemaPropertyArgs Empty = new GroupSchemaPropertyArgs();

    /**
     * Custom Subschema enumerated value of a property of type array.
     * 
     */
    @Import(name="arrayEnums")
    private @Nullable Output<List<String>> arrayEnums;

    /**
     * @return Custom Subschema enumerated value of a property of type array.
     * 
     */
    public Optional<Output<List<String>>> arrayEnums() {
        return Optional.ofNullable(this.arrayEnums);
    }

    /**
     * array of valid JSON schemas for property type array.
     * 
     */
    @Import(name="arrayOneOfs")
    private @Nullable Output<List<GroupSchemaPropertyArrayOneOfArgs>> arrayOneOfs;

    /**
     * @return array of valid JSON schemas for property type array.
     * 
     */
    public Optional<Output<List<GroupSchemaPropertyArrayOneOfArgs>>> arrayOneOfs() {
        return Optional.ofNullable(this.arrayOneOfs);
    }

    /**
     * Subschema array type: string, number, integer, reference. Type field must be an array.
     * 
     */
    @Import(name="arrayType")
    private @Nullable Output<String> arrayType;

    /**
     * @return Subschema array type: string, number, integer, reference. Type field must be an array.
     * 
     */
    public Optional<Output<String>> arrayType() {
        return Optional.ofNullable(this.arrayType);
    }

    /**
     * Custom Subschema description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Custom Subschema description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    @Import(name="enums")
    private @Nullable Output<List<String>> enums;

    /**
     * @return Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    public Optional<Output<List<String>>> enums() {
        return Optional.ofNullable(this.enums);
    }

    /**
     * Subschema external name
     * 
     */
    @Import(name="externalName")
    private @Nullable Output<String> externalName;

    /**
     * @return Subschema external name
     * 
     */
    public Optional<Output<String>> externalName() {
        return Optional.ofNullable(this.externalName);
    }

    /**
     * Subschema external namespace
     * 
     */
    @Import(name="externalNamespace")
    private @Nullable Output<String> externalNamespace;

    /**
     * @return Subschema external namespace
     * 
     */
    public Optional<Output<String>> externalNamespace() {
        return Optional.ofNullable(this.externalNamespace);
    }

    /**
     * Subschema unique string identifier
     * 
     */
    @Import(name="index", required=true)
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }

    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    @Import(name="master")
    private @Nullable Output<String> master;

    /**
     * @return SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    public Optional<Output<String>> master() {
        return Optional.ofNullable(this.master);
    }

    @Import(name="masterOverridePriorities")
    private @Nullable Output<List<GroupSchemaPropertyMasterOverridePriorityArgs>> masterOverridePriorities;

    public Optional<Output<List<GroupSchemaPropertyMasterOverridePriorityArgs>>> masterOverridePriorities() {
        return Optional.ofNullable(this.masterOverridePriorities);
    }

    /**
     * Subschema of type string maximum length
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return Subschema of type string maximum length
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * Subschema of type string minimum length
     * 
     */
    @Import(name="minLength")
    private @Nullable Output<Integer> minLength;

    /**
     * @return Subschema of type string minimum length
     * 
     */
    public Optional<Output<Integer>> minLength() {
        return Optional.ofNullable(this.minLength);
    }

    /**
     * Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    @Import(name="oneOfs")
    private @Nullable Output<List<GroupSchemaPropertyOneOfArgs>> oneOfs;

    /**
     * @return Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    public Optional<Output<List<GroupSchemaPropertyOneOfArgs>>> oneOfs() {
        return Optional.ofNullable(this.oneOfs);
    }

    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Whether the subschema is required
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    @Import(name="scope")
    private @Nullable Output<String> scope;

    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Enum title
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Enum title
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Subschema unique restriction
     * 
     */
    @Import(name="unique")
    private @Nullable Output<String> unique;

    /**
     * @return Subschema unique restriction
     * 
     */
    public Optional<Output<String>> unique() {
        return Optional.ofNullable(this.unique);
    }

    private GroupSchemaPropertyArgs() {}

    private GroupSchemaPropertyArgs(GroupSchemaPropertyArgs $) {
        this.arrayEnums = $.arrayEnums;
        this.arrayOneOfs = $.arrayOneOfs;
        this.arrayType = $.arrayType;
        this.description = $.description;
        this.enums = $.enums;
        this.externalName = $.externalName;
        this.externalNamespace = $.externalNamespace;
        this.index = $.index;
        this.master = $.master;
        this.masterOverridePriorities = $.masterOverridePriorities;
        this.maxLength = $.maxLength;
        this.minLength = $.minLength;
        this.oneOfs = $.oneOfs;
        this.permissions = $.permissions;
        this.required = $.required;
        this.scope = $.scope;
        this.title = $.title;
        this.type = $.type;
        this.unique = $.unique;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupSchemaPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupSchemaPropertyArgs $;

        public Builder() {
            $ = new GroupSchemaPropertyArgs();
        }

        public Builder(GroupSchemaPropertyArgs defaults) {
            $ = new GroupSchemaPropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayEnums Custom Subschema enumerated value of a property of type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(@Nullable Output<List<String>> arrayEnums) {
            $.arrayEnums = arrayEnums;
            return this;
        }

        /**
         * @param arrayEnums Custom Subschema enumerated value of a property of type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(List<String> arrayEnums) {
            return arrayEnums(Output.of(arrayEnums));
        }

        /**
         * @param arrayEnums Custom Subschema enumerated value of a property of type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayEnums(String... arrayEnums) {
            return arrayEnums(List.of(arrayEnums));
        }

        /**
         * @param arrayOneOfs array of valid JSON schemas for property type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(@Nullable Output<List<GroupSchemaPropertyArrayOneOfArgs>> arrayOneOfs) {
            $.arrayOneOfs = arrayOneOfs;
            return this;
        }

        /**
         * @param arrayOneOfs array of valid JSON schemas for property type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(List<GroupSchemaPropertyArrayOneOfArgs> arrayOneOfs) {
            return arrayOneOfs(Output.of(arrayOneOfs));
        }

        /**
         * @param arrayOneOfs array of valid JSON schemas for property type array.
         * 
         * @return builder
         * 
         */
        public Builder arrayOneOfs(GroupSchemaPropertyArrayOneOfArgs... arrayOneOfs) {
            return arrayOneOfs(List.of(arrayOneOfs));
        }

        /**
         * @param arrayType Subschema array type: string, number, integer, reference. Type field must be an array.
         * 
         * @return builder
         * 
         */
        public Builder arrayType(@Nullable Output<String> arrayType) {
            $.arrayType = arrayType;
            return this;
        }

        /**
         * @param arrayType Subschema array type: string, number, integer, reference. Type field must be an array.
         * 
         * @return builder
         * 
         */
        public Builder arrayType(String arrayType) {
            return arrayType(Output.of(arrayType));
        }

        /**
         * @param description Custom Subschema description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Custom Subschema description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enums Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder enums(@Nullable Output<List<String>> enums) {
            $.enums = enums;
            return this;
        }

        /**
         * @param enums Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder enums(List<String> enums) {
            return enums(Output.of(enums));
        }

        /**
         * @param enums Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder enums(String... enums) {
            return enums(List.of(enums));
        }

        /**
         * @param externalName Subschema external name
         * 
         * @return builder
         * 
         */
        public Builder externalName(@Nullable Output<String> externalName) {
            $.externalName = externalName;
            return this;
        }

        /**
         * @param externalName Subschema external name
         * 
         * @return builder
         * 
         */
        public Builder externalName(String externalName) {
            return externalName(Output.of(externalName));
        }

        /**
         * @param externalNamespace Subschema external namespace
         * 
         * @return builder
         * 
         */
        public Builder externalNamespace(@Nullable Output<String> externalNamespace) {
            $.externalNamespace = externalNamespace;
            return this;
        }

        /**
         * @param externalNamespace Subschema external namespace
         * 
         * @return builder
         * 
         */
        public Builder externalNamespace(String externalNamespace) {
            return externalNamespace(Output.of(externalNamespace));
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param master SubSchema profile manager, if not set it will inherit its setting.
         * 
         * @return builder
         * 
         */
        public Builder master(@Nullable Output<String> master) {
            $.master = master;
            return this;
        }

        /**
         * @param master SubSchema profile manager, if not set it will inherit its setting.
         * 
         * @return builder
         * 
         */
        public Builder master(String master) {
            return master(Output.of(master));
        }

        public Builder masterOverridePriorities(@Nullable Output<List<GroupSchemaPropertyMasterOverridePriorityArgs>> masterOverridePriorities) {
            $.masterOverridePriorities = masterOverridePriorities;
            return this;
        }

        public Builder masterOverridePriorities(List<GroupSchemaPropertyMasterOverridePriorityArgs> masterOverridePriorities) {
            return masterOverridePriorities(Output.of(masterOverridePriorities));
        }

        public Builder masterOverridePriorities(GroupSchemaPropertyMasterOverridePriorityArgs... masterOverridePriorities) {
            return masterOverridePriorities(List.of(masterOverridePriorities));
        }

        /**
         * @param maxLength Subschema of type string maximum length
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength Subschema of type string maximum length
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param minLength Subschema of type string minimum length
         * 
         * @return builder
         * 
         */
        public Builder minLength(@Nullable Output<Integer> minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param minLength Subschema of type string minimum length
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            return minLength(Output.of(minLength));
        }

        /**
         * @param oneOfs Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(@Nullable Output<List<GroupSchemaPropertyOneOfArgs>> oneOfs) {
            $.oneOfs = oneOfs;
            return this;
        }

        /**
         * @param oneOfs Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(List<GroupSchemaPropertyOneOfArgs> oneOfs) {
            return oneOfs(Output.of(oneOfs));
        }

        /**
         * @param oneOfs Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
         * 
         * @return builder
         * 
         */
        public Builder oneOfs(GroupSchemaPropertyOneOfArgs... oneOfs) {
            return oneOfs(List.of(oneOfs));
        }

        /**
         * @param permissions SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param title Enum title
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Enum title
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type Subschema type: string, boolean, number, integer, array, or object
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Subschema type: string, boolean, number, integer, array, or object
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unique Subschema unique restriction
         * 
         * @return builder
         * 
         */
        public Builder unique(@Nullable Output<String> unique) {
            $.unique = unique;
            return this;
        }

        /**
         * @param unique Subschema unique restriction
         * 
         * @return builder
         * 
         */
        public Builder unique(String unique) {
            return unique(Output.of(unique));
        }

        public GroupSchemaPropertyArgs build() {
            $.index = Objects.requireNonNull($.index, "expected parameter 'index' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
