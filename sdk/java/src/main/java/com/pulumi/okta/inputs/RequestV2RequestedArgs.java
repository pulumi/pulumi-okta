// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestV2RequestedArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestV2RequestedArgs Empty = new RequestV2RequestedArgs();

    /**
     * The ID of the access scope associated with the resource.
     * 
     */
    @Import(name="accessScopeId")
    private @Nullable Output<String> accessScopeId;

    /**
     * @return The ID of the access scope associated with the resource.
     * 
     */
    public Optional<Output<String>> accessScopeId() {
        return Optional.ofNullable(this.accessScopeId);
    }

    /**
     * The access scope type.
     * 
     */
    @Import(name="accessScopeType")
    private @Nullable Output<String> accessScopeType;

    /**
     * @return The access scope type.
     * 
     */
    public Optional<Output<String>> accessScopeType() {
        return Optional.ofNullable(this.accessScopeType);
    }

    /**
     * The ID of the resource catalog entry.
     * 
     */
    @Import(name="entryId", required=true)
    private Output<String> entryId;

    /**
     * @return The ID of the resource catalog entry.
     * 
     */
    public Output<String> entryId() {
        return this.entryId;
    }

    /**
     * The ID of the requested resource.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID of the requested resource.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The requested resource type.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The requested resource type.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RequestV2RequestedArgs() {}

    private RequestV2RequestedArgs(RequestV2RequestedArgs $) {
        this.accessScopeId = $.accessScopeId;
        this.accessScopeType = $.accessScopeType;
        this.entryId = $.entryId;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestV2RequestedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestV2RequestedArgs $;

        public Builder() {
            $ = new RequestV2RequestedArgs();
        }

        public Builder(RequestV2RequestedArgs defaults) {
            $ = new RequestV2RequestedArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessScopeId The ID of the access scope associated with the resource.
         * 
         * @return builder
         * 
         */
        public Builder accessScopeId(@Nullable Output<String> accessScopeId) {
            $.accessScopeId = accessScopeId;
            return this;
        }

        /**
         * @param accessScopeId The ID of the access scope associated with the resource.
         * 
         * @return builder
         * 
         */
        public Builder accessScopeId(String accessScopeId) {
            return accessScopeId(Output.of(accessScopeId));
        }

        /**
         * @param accessScopeType The access scope type.
         * 
         * @return builder
         * 
         */
        public Builder accessScopeType(@Nullable Output<String> accessScopeType) {
            $.accessScopeType = accessScopeType;
            return this;
        }

        /**
         * @param accessScopeType The access scope type.
         * 
         * @return builder
         * 
         */
        public Builder accessScopeType(String accessScopeType) {
            return accessScopeType(Output.of(accessScopeType));
        }

        /**
         * @param entryId The ID of the resource catalog entry.
         * 
         * @return builder
         * 
         */
        public Builder entryId(Output<String> entryId) {
            $.entryId = entryId;
            return this;
        }

        /**
         * @param entryId The ID of the resource catalog entry.
         * 
         * @return builder
         * 
         */
        public Builder entryId(String entryId) {
            return entryId(Output.of(entryId));
        }

        /**
         * @param resourceId The ID of the requested resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the requested resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType The requested resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The requested resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param type The type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RequestV2RequestedArgs build() {
            if ($.entryId == null) {
                throw new MissingRequiredPropertyException("RequestV2RequestedArgs", "entryId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RequestV2RequestedArgs", "type");
            }
            return $;
        }
    }

}
