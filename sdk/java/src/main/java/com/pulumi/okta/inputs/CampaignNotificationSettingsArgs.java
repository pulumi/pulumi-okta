// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CampaignNotificationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CampaignNotificationSettingsArgs Empty = new CampaignNotificationSettingsArgs();

    /**
     * To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
     * 
     */
    @Import(name="notifyReviewPeriodEnd", required=true)
    private Output<Boolean> notifyReviewPeriodEnd;

    /**
     * @return To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
     * 
     */
    public Output<Boolean> notifyReviewPeriodEnd() {
        return this.notifyReviewPeriodEnd;
    }

    /**
     * To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
     * 
     */
    @Import(name="notifyReviewerAtCampaignEnd", required=true)
    private Output<Boolean> notifyReviewerAtCampaignEnd;

    /**
     * @return To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
     * 
     */
    public Output<Boolean> notifyReviewerAtCampaignEnd() {
        return this.notifyReviewerAtCampaignEnd;
    }

    /**
     * To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
     * 
     */
    @Import(name="notifyReviewerDuringMidpointOfReview", required=true)
    private Output<Boolean> notifyReviewerDuringMidpointOfReview;

    /**
     * @return To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
     * 
     */
    public Output<Boolean> notifyReviewerDuringMidpointOfReview() {
        return this.notifyReviewerDuringMidpointOfReview;
    }

    /**
     * To indicate whether a notification should be sent to the reviewer when the review is overdue.
     * 
     */
    @Import(name="notifyReviewerWhenOverdue", required=true)
    private Output<Boolean> notifyReviewerWhenOverdue;

    /**
     * @return To indicate whether a notification should be sent to the reviewer when the review is overdue.
     * 
     */
    public Output<Boolean> notifyReviewerWhenOverdue() {
        return this.notifyReviewerWhenOverdue;
    }

    /**
     * To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
     * 
     */
    @Import(name="notifyReviewerWhenReviewAssigned", required=true)
    private Output<Boolean> notifyReviewerWhenReviewAssigned;

    /**
     * @return To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
     * 
     */
    public Output<Boolean> notifyReviewerWhenReviewAssigned() {
        return this.notifyReviewerWhenReviewAssigned;
    }

    /**
     * Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
     * 
     */
    @Import(name="remindersReviewerBeforeCampaignCloseInSecs")
    private @Nullable Output<List<Integer>> remindersReviewerBeforeCampaignCloseInSecs;

    /**
     * @return Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
     * 
     */
    public Optional<Output<List<Integer>>> remindersReviewerBeforeCampaignCloseInSecs() {
        return Optional.ofNullable(this.remindersReviewerBeforeCampaignCloseInSecs);
    }

    private CampaignNotificationSettingsArgs() {}

    private CampaignNotificationSettingsArgs(CampaignNotificationSettingsArgs $) {
        this.notifyReviewPeriodEnd = $.notifyReviewPeriodEnd;
        this.notifyReviewerAtCampaignEnd = $.notifyReviewerAtCampaignEnd;
        this.notifyReviewerDuringMidpointOfReview = $.notifyReviewerDuringMidpointOfReview;
        this.notifyReviewerWhenOverdue = $.notifyReviewerWhenOverdue;
        this.notifyReviewerWhenReviewAssigned = $.notifyReviewerWhenReviewAssigned;
        this.remindersReviewerBeforeCampaignCloseInSecs = $.remindersReviewerBeforeCampaignCloseInSecs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CampaignNotificationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CampaignNotificationSettingsArgs $;

        public Builder() {
            $ = new CampaignNotificationSettingsArgs();
        }

        public Builder(CampaignNotificationSettingsArgs defaults) {
            $ = new CampaignNotificationSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notifyReviewPeriodEnd To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewPeriodEnd(Output<Boolean> notifyReviewPeriodEnd) {
            $.notifyReviewPeriodEnd = notifyReviewPeriodEnd;
            return this;
        }

        /**
         * @param notifyReviewPeriodEnd To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewPeriodEnd(Boolean notifyReviewPeriodEnd) {
            return notifyReviewPeriodEnd(Output.of(notifyReviewPeriodEnd));
        }

        /**
         * @param notifyReviewerAtCampaignEnd To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerAtCampaignEnd(Output<Boolean> notifyReviewerAtCampaignEnd) {
            $.notifyReviewerAtCampaignEnd = notifyReviewerAtCampaignEnd;
            return this;
        }

        /**
         * @param notifyReviewerAtCampaignEnd To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerAtCampaignEnd(Boolean notifyReviewerAtCampaignEnd) {
            return notifyReviewerAtCampaignEnd(Output.of(notifyReviewerAtCampaignEnd));
        }

        /**
         * @param notifyReviewerDuringMidpointOfReview To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerDuringMidpointOfReview(Output<Boolean> notifyReviewerDuringMidpointOfReview) {
            $.notifyReviewerDuringMidpointOfReview = notifyReviewerDuringMidpointOfReview;
            return this;
        }

        /**
         * @param notifyReviewerDuringMidpointOfReview To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerDuringMidpointOfReview(Boolean notifyReviewerDuringMidpointOfReview) {
            return notifyReviewerDuringMidpointOfReview(Output.of(notifyReviewerDuringMidpointOfReview));
        }

        /**
         * @param notifyReviewerWhenOverdue To indicate whether a notification should be sent to the reviewer when the review is overdue.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerWhenOverdue(Output<Boolean> notifyReviewerWhenOverdue) {
            $.notifyReviewerWhenOverdue = notifyReviewerWhenOverdue;
            return this;
        }

        /**
         * @param notifyReviewerWhenOverdue To indicate whether a notification should be sent to the reviewer when the review is overdue.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerWhenOverdue(Boolean notifyReviewerWhenOverdue) {
            return notifyReviewerWhenOverdue(Output.of(notifyReviewerWhenOverdue));
        }

        /**
         * @param notifyReviewerWhenReviewAssigned To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerWhenReviewAssigned(Output<Boolean> notifyReviewerWhenReviewAssigned) {
            $.notifyReviewerWhenReviewAssigned = notifyReviewerWhenReviewAssigned;
            return this;
        }

        /**
         * @param notifyReviewerWhenReviewAssigned To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
         * 
         * @return builder
         * 
         */
        public Builder notifyReviewerWhenReviewAssigned(Boolean notifyReviewerWhenReviewAssigned) {
            return notifyReviewerWhenReviewAssigned(Output.of(notifyReviewerWhenReviewAssigned));
        }

        /**
         * @param remindersReviewerBeforeCampaignCloseInSecs Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
         * 
         * @return builder
         * 
         */
        public Builder remindersReviewerBeforeCampaignCloseInSecs(@Nullable Output<List<Integer>> remindersReviewerBeforeCampaignCloseInSecs) {
            $.remindersReviewerBeforeCampaignCloseInSecs = remindersReviewerBeforeCampaignCloseInSecs;
            return this;
        }

        /**
         * @param remindersReviewerBeforeCampaignCloseInSecs Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
         * 
         * @return builder
         * 
         */
        public Builder remindersReviewerBeforeCampaignCloseInSecs(List<Integer> remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(Output.of(remindersReviewerBeforeCampaignCloseInSecs));
        }

        /**
         * @param remindersReviewerBeforeCampaignCloseInSecs Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
         * 
         * @return builder
         * 
         */
        public Builder remindersReviewerBeforeCampaignCloseInSecs(Integer... remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(List.of(remindersReviewerBeforeCampaignCloseInSecs));
        }

        public CampaignNotificationSettingsArgs build() {
            if ($.notifyReviewPeriodEnd == null) {
                throw new MissingRequiredPropertyException("CampaignNotificationSettingsArgs", "notifyReviewPeriodEnd");
            }
            if ($.notifyReviewerAtCampaignEnd == null) {
                throw new MissingRequiredPropertyException("CampaignNotificationSettingsArgs", "notifyReviewerAtCampaignEnd");
            }
            if ($.notifyReviewerDuringMidpointOfReview == null) {
                throw new MissingRequiredPropertyException("CampaignNotificationSettingsArgs", "notifyReviewerDuringMidpointOfReview");
            }
            if ($.notifyReviewerWhenOverdue == null) {
                throw new MissingRequiredPropertyException("CampaignNotificationSettingsArgs", "notifyReviewerWhenOverdue");
            }
            if ($.notifyReviewerWhenReviewAssigned == null) {
                throw new MissingRequiredPropertyException("CampaignNotificationSettingsArgs", "notifyReviewerWhenReviewAssigned");
            }
            return $;
        }
    }

}
