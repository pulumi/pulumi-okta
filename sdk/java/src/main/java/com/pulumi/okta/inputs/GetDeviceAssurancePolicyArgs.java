// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.GetDeviceAssurancePolicyThirdPartySignalProviderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeviceAssurancePolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeviceAssurancePolicyArgs Empty = new GetDeviceAssurancePolicyArgs();

    /**
     * ID of the user type to retrieve, conflicts with `name`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the user type to retrieve, conflicts with `name`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of user type to retrieve, conflicts with `id`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of user type to retrieve, conflicts with `id`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates if the device contains a secure hardware functionality
     * 
     */
    @Import(name="secureHardwarePresent")
    private @Nullable Output<Boolean> secureHardwarePresent;

    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    public Optional<Output<Boolean>> secureHardwarePresent() {
        return Optional.ofNullable(this.secureHardwarePresent);
    }

    /**
     * Indicates if the device contains a secure hardware functionality
     * 
     */
    @Import(name="thirdPartySignalProvider")
    private @Nullable Output<GetDeviceAssurancePolicyThirdPartySignalProviderArgs> thirdPartySignalProvider;

    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    public Optional<Output<GetDeviceAssurancePolicyThirdPartySignalProviderArgs>> thirdPartySignalProvider() {
        return Optional.ofNullable(this.thirdPartySignalProvider);
    }

    private GetDeviceAssurancePolicyArgs() {}

    private GetDeviceAssurancePolicyArgs(GetDeviceAssurancePolicyArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.secureHardwarePresent = $.secureHardwarePresent;
        this.thirdPartySignalProvider = $.thirdPartySignalProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeviceAssurancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeviceAssurancePolicyArgs $;

        public Builder() {
            $ = new GetDeviceAssurancePolicyArgs();
        }

        public Builder(GetDeviceAssurancePolicyArgs defaults) {
            $ = new GetDeviceAssurancePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the user type to retrieve, conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the user type to retrieve, conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of user type to retrieve, conflicts with `id`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of user type to retrieve, conflicts with `id`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secureHardwarePresent Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder secureHardwarePresent(@Nullable Output<Boolean> secureHardwarePresent) {
            $.secureHardwarePresent = secureHardwarePresent;
            return this;
        }

        /**
         * @param secureHardwarePresent Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder secureHardwarePresent(Boolean secureHardwarePresent) {
            return secureHardwarePresent(Output.of(secureHardwarePresent));
        }

        /**
         * @param thirdPartySignalProvider Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder thirdPartySignalProvider(@Nullable Output<GetDeviceAssurancePolicyThirdPartySignalProviderArgs> thirdPartySignalProvider) {
            $.thirdPartySignalProvider = thirdPartySignalProvider;
            return this;
        }

        /**
         * @param thirdPartySignalProvider Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder thirdPartySignalProvider(GetDeviceAssurancePolicyThirdPartySignalProviderArgs thirdPartySignalProvider) {
            return thirdPartySignalProvider(Output.of(thirdPartySignalProvider));
        }

        public GetDeviceAssurancePolicyArgs build() {
            return $;
        }
    }

}
