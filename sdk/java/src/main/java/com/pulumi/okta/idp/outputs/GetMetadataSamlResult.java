// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMetadataSamlResult {
    /**
     * @return Whether assertions are signed.
     * 
     */
    private Boolean assertionsSigned;
    /**
     * @return Whether authn requests are signed.
     * 
     */
    private Boolean authnRequestSigned;
    /**
     * @return SAML request encryption certificate.
     * 
     */
    private String encryptionCertificate;
    /**
     * @return Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
     * 
     */
    private String entityId;
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    private String httpPostBinding;
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    private String httpRedirectBinding;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The id of the IdP to retrieve metadata for.
     * 
     */
    private @Nullable String idpId;
    /**
     * @return Raw IdP metadata.
     * 
     */
    private String metadata;
    /**
     * @return SAML request signing certificate.
     * 
     */
    private String signingCertificate;

    private GetMetadataSamlResult() {}
    /**
     * @return Whether assertions are signed.
     * 
     */
    public Boolean assertionsSigned() {
        return this.assertionsSigned;
    }
    /**
     * @return Whether authn requests are signed.
     * 
     */
    public Boolean authnRequestSigned() {
        return this.authnRequestSigned;
    }
    /**
     * @return SAML request encryption certificate.
     * 
     */
    public String encryptionCertificate() {
        return this.encryptionCertificate;
    }
    /**
     * @return Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
     * 
     */
    public String entityId() {
        return this.entityId;
    }
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    public String httpPostBinding() {
        return this.httpPostBinding;
    }
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    public String httpRedirectBinding() {
        return this.httpRedirectBinding;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The id of the IdP to retrieve metadata for.
     * 
     */
    public Optional<String> idpId() {
        return Optional.ofNullable(this.idpId);
    }
    /**
     * @return Raw IdP metadata.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return SAML request signing certificate.
     * 
     */
    public String signingCertificate() {
        return this.signingCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetadataSamlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean assertionsSigned;
        private Boolean authnRequestSigned;
        private String encryptionCertificate;
        private String entityId;
        private String httpPostBinding;
        private String httpRedirectBinding;
        private String id;
        private @Nullable String idpId;
        private String metadata;
        private String signingCertificate;
        public Builder() {}
        public Builder(GetMetadataSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionsSigned = defaults.assertionsSigned;
    	      this.authnRequestSigned = defaults.authnRequestSigned;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.entityId = defaults.entityId;
    	      this.httpPostBinding = defaults.httpPostBinding;
    	      this.httpRedirectBinding = defaults.httpRedirectBinding;
    	      this.id = defaults.id;
    	      this.idpId = defaults.idpId;
    	      this.metadata = defaults.metadata;
    	      this.signingCertificate = defaults.signingCertificate;
        }

        @CustomType.Setter
        public Builder assertionsSigned(Boolean assertionsSigned) {
            if (assertionsSigned == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "assertionsSigned");
            }
            this.assertionsSigned = assertionsSigned;
            return this;
        }
        @CustomType.Setter
        public Builder authnRequestSigned(Boolean authnRequestSigned) {
            if (authnRequestSigned == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "authnRequestSigned");
            }
            this.authnRequestSigned = authnRequestSigned;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(String encryptionCertificate) {
            if (encryptionCertificate == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "encryptionCertificate");
            }
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            if (entityId == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "entityId");
            }
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder httpPostBinding(String httpPostBinding) {
            if (httpPostBinding == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "httpPostBinding");
            }
            this.httpPostBinding = httpPostBinding;
            return this;
        }
        @CustomType.Setter
        public Builder httpRedirectBinding(String httpRedirectBinding) {
            if (httpRedirectBinding == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "httpRedirectBinding");
            }
            this.httpRedirectBinding = httpRedirectBinding;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idpId(@Nullable String idpId) {

            this.idpId = idpId;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(String signingCertificate) {
            if (signingCertificate == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "signingCertificate");
            }
            this.signingCertificate = signingCertificate;
            return this;
        }
        public GetMetadataSamlResult build() {
            final var _resultValue = new GetMetadataSamlResult();
            _resultValue.assertionsSigned = assertionsSigned;
            _resultValue.authnRequestSigned = authnRequestSigned;
            _resultValue.encryptionCertificate = encryptionCertificate;
            _resultValue.entityId = entityId;
            _resultValue.httpPostBinding = httpPostBinding;
            _resultValue.httpRedirectBinding = httpRedirectBinding;
            _resultValue.id = id;
            _resultValue.idpId = idpId;
            _resultValue.metadata = metadata;
            _resultValue.signingCertificate = signingCertificate;
            return _resultValue;
        }
    }
}
