// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticatorState extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticatorState Empty = new AuthenticatorState();

    /**
     * A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Name does not trigger change detection (legacy behavior)
     * 
     */
    @Import(name="legacyIgnoreName")
    private @Nullable Output<Boolean> legacyIgnoreName;

    /**
     * @return Name does not trigger change detection (legacy behavior)
     * 
     */
    public Optional<Output<Boolean>> legacyIgnoreName() {
        return Optional.ofNullable(this.legacyIgnoreName);
    }

    /**
     * Display name of the Authenticator
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of the Authenticator
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerAuthPort")
    private @Nullable Output<Integer> providerAuthPort;

    /**
     * @return The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<Integer>> providerAuthPort() {
        return Optional.ofNullable(this.providerAuthPort);
    }

    /**
     * (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerHost")
    private @Nullable Output<String> providerHost;

    /**
     * @return (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerHost() {
        return Optional.ofNullable(this.providerHost);
    }

    /**
     * Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerHostname")
    private @Nullable Output<String> providerHostname;

    /**
     * @return Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerHostname() {
        return Optional.ofNullable(this.providerHostname);
    }

    /**
     * App Instance ID.
     * 
     */
    @Import(name="providerInstanceId")
    private @Nullable Output<String> providerInstanceId;

    /**
     * @return App Instance ID.
     * 
     */
    public Optional<Output<String>> providerInstanceId() {
        return Optional.ofNullable(this.providerInstanceId);
    }

    /**
     * (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerIntegrationKey")
    private @Nullable Output<String> providerIntegrationKey;

    /**
     * @return (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerIntegrationKey() {
        return Optional.ofNullable(this.providerIntegrationKey);
    }

    /**
     * Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
     * 
     */
    @Import(name="providerJson")
    private @Nullable Output<String> providerJson;

    /**
     * @return Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
     * 
     */
    public Optional<Output<String>> providerJson() {
        return Optional.ofNullable(this.providerJson);
    }

    /**
     * (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerSecretKey")
    private @Nullable Output<String> providerSecretKey;

    /**
     * @return (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerSecretKey() {
        return Optional.ofNullable(this.providerSecretKey);
    }

    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerSharedSecret")
    private @Nullable Output<String> providerSharedSecret;

    /**
     * @return An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerSharedSecret() {
        return Optional.ofNullable(this.providerSharedSecret);
    }

    /**
     * Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     * 
     */
    @Import(name="providerType")
    private @Nullable Output<String> providerType;

    /**
     * @return Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     * 
     */
    public Optional<Output<String>> providerType() {
        return Optional.ofNullable(this.providerType);
    }

    /**
     * Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    @Import(name="providerUserNameTemplate")
    private @Nullable Output<String> providerUserNameTemplate;

    /**
     * @return Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    public Optional<Output<String>> providerUserNameTemplate() {
        return Optional.ofNullable(this.providerUserNameTemplate);
    }

    /**
     * Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
     * 
     */
    @Import(name="settings")
    private @Nullable Output<String> settings;

    /**
     * @return Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
     * 
     */
    public Optional<Output<String>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthenticatorState() {}

    private AuthenticatorState(AuthenticatorState $) {
        this.key = $.key;
        this.legacyIgnoreName = $.legacyIgnoreName;
        this.name = $.name;
        this.providerAuthPort = $.providerAuthPort;
        this.providerHost = $.providerHost;
        this.providerHostname = $.providerHostname;
        this.providerInstanceId = $.providerInstanceId;
        this.providerIntegrationKey = $.providerIntegrationKey;
        this.providerJson = $.providerJson;
        this.providerSecretKey = $.providerSecretKey;
        this.providerSharedSecret = $.providerSharedSecret;
        this.providerType = $.providerType;
        this.providerUserNameTemplate = $.providerUserNameTemplate;
        this.settings = $.settings;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticatorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticatorState $;

        public Builder() {
            $ = new AuthenticatorState();
        }

        public Builder(AuthenticatorState defaults) {
            $ = new AuthenticatorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param key A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param legacyIgnoreName Name does not trigger change detection (legacy behavior)
         * 
         * @return builder
         * 
         */
        public Builder legacyIgnoreName(@Nullable Output<Boolean> legacyIgnoreName) {
            $.legacyIgnoreName = legacyIgnoreName;
            return this;
        }

        /**
         * @param legacyIgnoreName Name does not trigger change detection (legacy behavior)
         * 
         * @return builder
         * 
         */
        public Builder legacyIgnoreName(Boolean legacyIgnoreName) {
            return legacyIgnoreName(Output.of(legacyIgnoreName));
        }

        /**
         * @param name Display name of the Authenticator
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of the Authenticator
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param providerAuthPort The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerAuthPort(@Nullable Output<Integer> providerAuthPort) {
            $.providerAuthPort = providerAuthPort;
            return this;
        }

        /**
         * @param providerAuthPort The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerAuthPort(Integer providerAuthPort) {
            return providerAuthPort(Output.of(providerAuthPort));
        }

        /**
         * @param providerHost (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerHost(@Nullable Output<String> providerHost) {
            $.providerHost = providerHost;
            return this;
        }

        /**
         * @param providerHost (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerHost(String providerHost) {
            return providerHost(Output.of(providerHost));
        }

        /**
         * @param providerHostname Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerHostname(@Nullable Output<String> providerHostname) {
            $.providerHostname = providerHostname;
            return this;
        }

        /**
         * @param providerHostname Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerHostname(String providerHostname) {
            return providerHostname(Output.of(providerHostname));
        }

        /**
         * @param providerInstanceId App Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder providerInstanceId(@Nullable Output<String> providerInstanceId) {
            $.providerInstanceId = providerInstanceId;
            return this;
        }

        /**
         * @param providerInstanceId App Instance ID.
         * 
         * @return builder
         * 
         */
        public Builder providerInstanceId(String providerInstanceId) {
            return providerInstanceId(Output.of(providerInstanceId));
        }

        /**
         * @param providerIntegrationKey (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerIntegrationKey(@Nullable Output<String> providerIntegrationKey) {
            $.providerIntegrationKey = providerIntegrationKey;
            return this;
        }

        /**
         * @param providerIntegrationKey (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerIntegrationKey(String providerIntegrationKey) {
            return providerIntegrationKey(Output.of(providerIntegrationKey));
        }

        /**
         * @param providerJson Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
         * 
         * @return builder
         * 
         */
        public Builder providerJson(@Nullable Output<String> providerJson) {
            $.providerJson = providerJson;
            return this;
        }

        /**
         * @param providerJson Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
         * 
         * @return builder
         * 
         */
        public Builder providerJson(String providerJson) {
            return providerJson(Output.of(providerJson));
        }

        /**
         * @param providerSecretKey (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerSecretKey(@Nullable Output<String> providerSecretKey) {
            $.providerSecretKey = providerSecretKey;
            return this;
        }

        /**
         * @param providerSecretKey (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerSecretKey(String providerSecretKey) {
            return providerSecretKey(Output.of(providerSecretKey));
        }

        /**
         * @param providerSharedSecret An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerSharedSecret(@Nullable Output<String> providerSharedSecret) {
            $.providerSharedSecret = providerSharedSecret;
            return this;
        }

        /**
         * @param providerSharedSecret An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerSharedSecret(String providerSharedSecret) {
            return providerSharedSecret(Output.of(providerSharedSecret));
        }

        /**
         * @param providerType Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
         * 
         * @return builder
         * 
         */
        public Builder providerType(@Nullable Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        /**
         * @param providerType Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
         * 
         * @return builder
         * 
         */
        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        /**
         * @param providerUserNameTemplate Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerUserNameTemplate(@Nullable Output<String> providerUserNameTemplate) {
            $.providerUserNameTemplate = providerUserNameTemplate;
            return this;
        }

        /**
         * @param providerUserNameTemplate Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
         * 
         * @return builder
         * 
         */
        public Builder providerUserNameTemplate(String providerUserNameTemplate) {
            return providerUserNameTemplate(Output.of(providerUserNameTemplate));
        }

        /**
         * @param settings Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<String> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
         * 
         * @return builder
         * 
         */
        public Builder settings(String settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param status Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AuthenticatorState build() {
            return $;
        }
    }

}
