// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.factor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FactorArgs extends com.pulumi.resources.ResourceArgs {

    public static final FactorArgs Empty = new FactorArgs();

    /**
     * Is this provider active?
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Is this provider active?
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Factor provider ID
     * 
     */
    @Import(name="providerId", required=true)
    private Output<String> providerId;

    /**
     * @return Factor provider ID
     * 
     */
    public Output<String> providerId() {
        return this.providerId;
    }

    private FactorArgs() {}

    private FactorArgs(FactorArgs $) {
        this.active = $.active;
        this.providerId = $.providerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FactorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FactorArgs $;

        public Builder() {
            $ = new FactorArgs();
        }

        public Builder(FactorArgs defaults) {
            $ = new FactorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Is this provider active?
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Is this provider active?
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param providerId Factor provider ID
         * 
         * @return builder
         * 
         */
        public Builder providerId(Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId Factor provider ID
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        public FactorArgs build() {
            $.providerId = Objects.requireNonNull($.providerId, "expected parameter 'providerId' to be non-null");
            return $;
        }
    }

}
