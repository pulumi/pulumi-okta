// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OAuthGroupsClaim {
    /**
     * @return Groups claim filter. Can only be set if type is `&#34;FILTER&#34;`. Valid values: `&#34;EQUALS&#34;`, `&#34;STARTS_WITH&#34;`, `&#34;CONTAINS&#34;`, `&#34;REGEX&#34;`.
     * 
     */
    private final @Nullable String filterType;
    /**
     * @return Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
     * Valid values: `&#34;CUSTOM_URL&#34;`,`&#34;ORG_URL&#34;` or `&#34;DYNAMIC&#34;`. Default is `&#34;ORG_URL&#34;`.
     * 
     */
    private final @Nullable String issuerMode;
    /**
     * @return Name of the claim that will be used in the token.
     * 
     */
    private final String name;
    /**
     * @return The type of OAuth application. Valid values: `&#34;web&#34;`, `&#34;native&#34;`, `&#34;browser&#34;`, `&#34;service&#34;`. For SPA apps use `browser`.
     * 
     */
    private final String type;
    /**
     * @return Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
     * 
     */
    private final String value;

    @CustomType.Constructor
    private OAuthGroupsClaim(
        @CustomType.Parameter("filterType") @Nullable String filterType,
        @CustomType.Parameter("issuerMode") @Nullable String issuerMode,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("value") String value) {
        this.filterType = filterType;
        this.issuerMode = issuerMode;
        this.name = name;
        this.type = type;
        this.value = value;
    }

    /**
     * @return Groups claim filter. Can only be set if type is `&#34;FILTER&#34;`. Valid values: `&#34;EQUALS&#34;`, `&#34;STARTS_WITH&#34;`, `&#34;CONTAINS&#34;`, `&#34;REGEX&#34;`.
     * 
     */
    public Optional<String> filterType() {
        return Optional.ofNullable(this.filterType);
    }
    /**
     * @return Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a custom domain URL as the issuer of ID token for this client.
     * Valid values: `&#34;CUSTOM_URL&#34;`,`&#34;ORG_URL&#34;` or `&#34;DYNAMIC&#34;`. Default is `&#34;ORG_URL&#34;`.
     * 
     */
    public Optional<String> issuerMode() {
        return Optional.ofNullable(this.issuerMode);
    }
    /**
     * @return Name of the claim that will be used in the token.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of OAuth application. Valid values: `&#34;web&#34;`, `&#34;native&#34;`, `&#34;browser&#34;`, `&#34;service&#34;`. For SPA apps use `browser`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OAuthGroupsClaim defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String filterType;
        private @Nullable String issuerMode;
        private String name;
        private String type;
        private String value;

        public Builder() {
    	      // Empty
        }

        public Builder(OAuthGroupsClaim defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterType = defaults.filterType;
    	      this.issuerMode = defaults.issuerMode;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        public Builder filterType(@Nullable String filterType) {
            this.filterType = filterType;
            return this;
        }
        public Builder issuerMode(@Nullable String issuerMode) {
            this.issuerMode = issuerMode;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public OAuthGroupsClaim build() {
            return new OAuthGroupsClaim(filterType, issuerMode, name, type, value);
        }
    }
}
