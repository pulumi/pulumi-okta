// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.UserFactorQuestionArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.UserFactorQuestionState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Creates security question factor for a user.
 * 
 * This resource allows you to create and configure security question factor for a user.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.user.User;
 * import com.pulumi.okta.user.UserArgs;
 * import com.pulumi.okta.OktaFunctions;
 * import com.pulumi.okta.inputs.GetUserSecurityQuestionsArgs;
 * import com.pulumi.okta.factor.Factor;
 * import com.pulumi.okta.factor.FactorArgs;
 * import com.pulumi.okta.UserFactorQuestion;
 * import com.pulumi.okta.UserFactorQuestionArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleUser = new User(&#34;exampleUser&#34;, UserArgs.builder()        
 *             .firstName(&#34;John&#34;)
 *             .lastName(&#34;Smith&#34;)
 *             .login(&#34;john.smith@example.com&#34;)
 *             .email(&#34;john.smith@example.com&#34;)
 *             .build());
 * 
 *         final var exampleUserSecurityQuestions = OktaFunctions.getUserSecurityQuestions(GetUserSecurityQuestionsArgs.builder()
 *             .userId(exampleUser.id())
 *             .build());
 * 
 *         var exampleFactor = new Factor(&#34;exampleFactor&#34;, FactorArgs.builder()        
 *             .providerId(&#34;okta_question&#34;)
 *             .active(true)
 *             .build());
 * 
 *         var exampleUserFactorQuestion = new UserFactorQuestion(&#34;exampleUserFactorQuestion&#34;, UserFactorQuestionArgs.builder()        
 *             .userId(exampleUser.id())
 *             .key(exampleUserSecurityQuestions.applyValue(getUserSecurityQuestionsResult -&gt; getUserSecurityQuestionsResult).applyValue(exampleUserSecurityQuestions -&gt; exampleUserSecurityQuestions.applyValue(getUserSecurityQuestionsResult -&gt; getUserSecurityQuestionsResult.questions()[0].key())))
 *             .answer(&#34;meatball&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleFactor)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Security question factor for a user can be imported via the `user_id` and the `factor_id`.
 * 
 * ```sh
 * $ pulumi import okta:index/userFactorQuestion:UserFactorQuestion example &amp;#60;user id&amp;#62;/&amp;#60;question factor id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:index/userFactorQuestion:UserFactorQuestion")
public class UserFactorQuestion extends com.pulumi.resources.CustomResource {
    /**
     * Security question answer. Note here that answer won&#39;t be set during the resource import.
     * 
     */
    @Export(name="answer", refs={String.class}, tree="[0]")
    private Output<String> answer;

    /**
     * @return Security question answer. Note here that answer won&#39;t be set during the resource import.
     * 
     */
    public Output<String> answer() {
        return this.answer;
    }
    /**
     * Security question unique key.
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return Security question unique key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The status of the security question factor.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the security question factor.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Display text for security question.
     * 
     */
    @Export(name="text", refs={String.class}, tree="[0]")
    private Output<String> text;

    /**
     * @return Display text for security question.
     * 
     */
    public Output<String> text() {
        return this.text;
    }
    /**
     * ID of the user. Resource will be recreated when `user_id` changes.
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output<String> userId;

    /**
     * @return ID of the user. Resource will be recreated when `user_id` changes.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserFactorQuestion(String name) {
        this(name, UserFactorQuestionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserFactorQuestion(String name, UserFactorQuestionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserFactorQuestion(String name, UserFactorQuestionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userFactorQuestion:UserFactorQuestion", name, args == null ? UserFactorQuestionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserFactorQuestion(String name, Output<String> id, @Nullable UserFactorQuestionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userFactorQuestion:UserFactorQuestion", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "answer"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserFactorQuestion get(String name, Output<String> id, @Nullable UserFactorQuestionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserFactorQuestion(name, id, state, options);
    }
}
