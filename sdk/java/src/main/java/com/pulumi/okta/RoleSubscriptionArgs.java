// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleSubscriptionArgs Empty = new RoleSubscriptionArgs();

    /**
     * Type of the notification
     * 
     */
    @Import(name="notificationType", required=true)
    private Output<String> notificationType;

    /**
     * @return Type of the notification
     * 
     */
    public Output<String> notificationType() {
        return this.notificationType;
    }

    /**
     * Type of the role
     * 
     */
    @Import(name="roleType", required=true)
    private Output<String> roleType;

    /**
     * @return Type of the role
     * 
     */
    public Output<String> roleType() {
        return this.roleType;
    }

    /**
     * Status of subscription
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of subscription
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RoleSubscriptionArgs() {}

    private RoleSubscriptionArgs(RoleSubscriptionArgs $) {
        this.notificationType = $.notificationType;
        this.roleType = $.roleType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleSubscriptionArgs $;

        public Builder() {
            $ = new RoleSubscriptionArgs();
        }

        public Builder(RoleSubscriptionArgs defaults) {
            $ = new RoleSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notificationType Type of the notification
         * 
         * @return builder
         * 
         */
        public Builder notificationType(Output<String> notificationType) {
            $.notificationType = notificationType;
            return this;
        }

        /**
         * @param notificationType Type of the notification
         * 
         * @return builder
         * 
         */
        public Builder notificationType(String notificationType) {
            return notificationType(Output.of(notificationType));
        }

        /**
         * @param roleType Type of the role
         * 
         * @return builder
         * 
         */
        public Builder roleType(Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Type of the role
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        /**
         * @param status Status of subscription
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of subscription
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RoleSubscriptionArgs build() {
            $.notificationType = Objects.requireNonNull($.notificationType, "expected parameter 'notificationType' to be non-null");
            $.roleType = Objects.requireNonNull($.roleType, "expected parameter 'roleType' to be non-null");
            return $;
        }
    }

}
