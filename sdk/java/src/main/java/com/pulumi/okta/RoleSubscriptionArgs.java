// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleSubscriptionArgs Empty = new RoleSubscriptionArgs();

    /**
     * Type of the notification. Valid values:
     * - `&#34;CONNECTOR_AGENT&#34;` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
     * - `&#34;USER_LOCKED_OUT&#34;` - User lockouts.
     * - `&#34;APP_IMPORT&#34;` - App user import status.
     * - `&#34;LDAP_AGENT&#34;` - Disconnects and reconnects: LDAP agent.
     * - `&#34;AD_AGENT&#34;` - Disconnects and reconnects: AD agent.
     * - `&#34;OKTA_ANNOUNCEMENT&#34;` - Okta release notes and announcements.
     * - `&#34;OKTA_ISSUE&#34;` - Trust incidents and updates.
     * - `&#34;OKTA_UPDATE&#34;` - Scheduled system updates.
     * - `&#34;IWA_AGENT&#34;` - Disconnects and reconnects: IWA agent.
     * - `&#34;USER_DEPROVISION&#34;` - User deprovisions.
     * - `&#34;REPORT_SUSPICIOUS_ACTIVITY&#34;` - User reporting of suspicious activity.
     * - `&#34;RATELIMIT_NOTIFICATION&#34;` - Rate limit warning and violation.
     * - `&#34;AGENT_AUTO_UPDATE_NOTIFICATION&#34;` - Agent auto-update notifications: AD Agent.
     * 
     */
    @Import(name="notificationType", required=true)
    private Output<String> notificationType;

    /**
     * @return Type of the notification. Valid values:
     * - `&#34;CONNECTOR_AGENT&#34;` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
     * - `&#34;USER_LOCKED_OUT&#34;` - User lockouts.
     * - `&#34;APP_IMPORT&#34;` - App user import status.
     * - `&#34;LDAP_AGENT&#34;` - Disconnects and reconnects: LDAP agent.
     * - `&#34;AD_AGENT&#34;` - Disconnects and reconnects: AD agent.
     * - `&#34;OKTA_ANNOUNCEMENT&#34;` - Okta release notes and announcements.
     * - `&#34;OKTA_ISSUE&#34;` - Trust incidents and updates.
     * - `&#34;OKTA_UPDATE&#34;` - Scheduled system updates.
     * - `&#34;IWA_AGENT&#34;` - Disconnects and reconnects: IWA agent.
     * - `&#34;USER_DEPROVISION&#34;` - User deprovisions.
     * - `&#34;REPORT_SUSPICIOUS_ACTIVITY&#34;` - User reporting of suspicious activity.
     * - `&#34;RATELIMIT_NOTIFICATION&#34;` - Rate limit warning and violation.
     * - `&#34;AGENT_AUTO_UPDATE_NOTIFICATION&#34;` - Agent auto-update notifications: AD Agent.
     * 
     */
    public Output<String> notificationType() {
        return this.notificationType;
    }

    /**
     * Type of the role. Valid values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
     * 
     */
    @Import(name="roleType", required=true)
    private Output<String> roleType;

    /**
     * @return Type of the role. Valid values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
     * 
     */
    public Output<String> roleType() {
        return this.roleType;
    }

    /**
     * Subscription status. Valid values: `&#34;subscribed&#34;`, `&#34;unsubscribed&#34;`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Subscription status. Valid values: `&#34;subscribed&#34;`, `&#34;unsubscribed&#34;`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RoleSubscriptionArgs() {}

    private RoleSubscriptionArgs(RoleSubscriptionArgs $) {
        this.notificationType = $.notificationType;
        this.roleType = $.roleType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleSubscriptionArgs $;

        public Builder() {
            $ = new RoleSubscriptionArgs();
        }

        public Builder(RoleSubscriptionArgs defaults) {
            $ = new RoleSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notificationType Type of the notification. Valid values:
         * - `&#34;CONNECTOR_AGENT&#34;` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
         * - `&#34;USER_LOCKED_OUT&#34;` - User lockouts.
         * - `&#34;APP_IMPORT&#34;` - App user import status.
         * - `&#34;LDAP_AGENT&#34;` - Disconnects and reconnects: LDAP agent.
         * - `&#34;AD_AGENT&#34;` - Disconnects and reconnects: AD agent.
         * - `&#34;OKTA_ANNOUNCEMENT&#34;` - Okta release notes and announcements.
         * - `&#34;OKTA_ISSUE&#34;` - Trust incidents and updates.
         * - `&#34;OKTA_UPDATE&#34;` - Scheduled system updates.
         * - `&#34;IWA_AGENT&#34;` - Disconnects and reconnects: IWA agent.
         * - `&#34;USER_DEPROVISION&#34;` - User deprovisions.
         * - `&#34;REPORT_SUSPICIOUS_ACTIVITY&#34;` - User reporting of suspicious activity.
         * - `&#34;RATELIMIT_NOTIFICATION&#34;` - Rate limit warning and violation.
         * - `&#34;AGENT_AUTO_UPDATE_NOTIFICATION&#34;` - Agent auto-update notifications: AD Agent.
         * 
         * @return builder
         * 
         */
        public Builder notificationType(Output<String> notificationType) {
            $.notificationType = notificationType;
            return this;
        }

        /**
         * @param notificationType Type of the notification. Valid values:
         * - `&#34;CONNECTOR_AGENT&#34;` -  Disconnects and reconnects: On-prem provisioning, on-prem MFA agents, and RADIUS server agent.
         * - `&#34;USER_LOCKED_OUT&#34;` - User lockouts.
         * - `&#34;APP_IMPORT&#34;` - App user import status.
         * - `&#34;LDAP_AGENT&#34;` - Disconnects and reconnects: LDAP agent.
         * - `&#34;AD_AGENT&#34;` - Disconnects and reconnects: AD agent.
         * - `&#34;OKTA_ANNOUNCEMENT&#34;` - Okta release notes and announcements.
         * - `&#34;OKTA_ISSUE&#34;` - Trust incidents and updates.
         * - `&#34;OKTA_UPDATE&#34;` - Scheduled system updates.
         * - `&#34;IWA_AGENT&#34;` - Disconnects and reconnects: IWA agent.
         * - `&#34;USER_DEPROVISION&#34;` - User deprovisions.
         * - `&#34;REPORT_SUSPICIOUS_ACTIVITY&#34;` - User reporting of suspicious activity.
         * - `&#34;RATELIMIT_NOTIFICATION&#34;` - Rate limit warning and violation.
         * - `&#34;AGENT_AUTO_UPDATE_NOTIFICATION&#34;` - Agent auto-update notifications: AD Agent.
         * 
         * @return builder
         * 
         */
        public Builder notificationType(String notificationType) {
            return notificationType(Output.of(notificationType));
        }

        /**
         * @param roleType Type of the role. Valid values:
         * `&#34;API_ADMIN&#34;`,
         * `&#34;APP_ADMIN&#34;`,
         * `&#34;CUSTOM&#34;`,
         * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
         * `&#34;HELP_DESK_ADMIN&#34;`,
         * `&#34;MOBILE_ADMIN&#34;`,
         * `&#34;ORG_ADMIN&#34;`,
         * `&#34;READ_ONLY_ADMIN&#34;`,
         * `&#34;REPORT_ADMIN&#34;`,
         * `&#34;SUPER_ADMIN&#34;`,
         * `&#34;USER_ADMIN&#34;`
         * . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
         * 
         * @return builder
         * 
         */
        public Builder roleType(Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Type of the role. Valid values:
         * `&#34;API_ADMIN&#34;`,
         * `&#34;APP_ADMIN&#34;`,
         * `&#34;CUSTOM&#34;`,
         * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
         * `&#34;HELP_DESK_ADMIN&#34;`,
         * `&#34;MOBILE_ADMIN&#34;`,
         * `&#34;ORG_ADMIN&#34;`,
         * `&#34;READ_ONLY_ADMIN&#34;`,
         * `&#34;REPORT_ADMIN&#34;`,
         * `&#34;SUPER_ADMIN&#34;`,
         * `&#34;USER_ADMIN&#34;`
         * . See [API docs](https://developer.okta.com/docs/reference/api/admin-notifications/#role-types)
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        /**
         * @param status Subscription status. Valid values: `&#34;subscribed&#34;`, `&#34;unsubscribed&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Subscription status. Valid values: `&#34;subscribed&#34;`, `&#34;unsubscribed&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RoleSubscriptionArgs build() {
            if ($.notificationType == null) {
                throw new MissingRequiredPropertyException("RoleSubscriptionArgs", "notificationType");
            }
            if ($.roleType == null) {
                throw new MissingRequiredPropertyException("RoleSubscriptionArgs", "roleType");
            }
            return $;
        }
    }

}
