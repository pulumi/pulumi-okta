// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerScopesScope {
    private String consent;
    private Boolean default_;
    private String description;
    private String displayName;
    private String id;
    private String metadataPublish;
    private String name;
    private Boolean optional;
    private Boolean system;

    private GetServerScopesScope() {}
    public String consent() {
        return this.consent;
    }
    public Boolean default_() {
        return this.default_;
    }
    public String description() {
        return this.description;
    }
    public String displayName() {
        return this.displayName;
    }
    public String id() {
        return this.id;
    }
    public String metadataPublish() {
        return this.metadataPublish;
    }
    public String name() {
        return this.name;
    }
    public Boolean optional() {
        return this.optional;
    }
    public Boolean system() {
        return this.system;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerScopesScope defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String consent;
        private Boolean default_;
        private String description;
        private String displayName;
        private String id;
        private String metadataPublish;
        private String name;
        private Boolean optional;
        private Boolean system;
        public Builder() {}
        public Builder(GetServerScopesScope defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consent = defaults.consent;
    	      this.default_ = defaults.default_;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.metadataPublish = defaults.metadataPublish;
    	      this.name = defaults.name;
    	      this.optional = defaults.optional;
    	      this.system = defaults.system;
        }

        @CustomType.Setter
        public Builder consent(String consent) {
            if (consent == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "consent");
            }
            this.consent = consent;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadataPublish(String metadataPublish) {
            if (metadataPublish == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "metadataPublish");
            }
            this.metadataPublish = metadataPublish;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder system(Boolean system) {
            if (system == null) {
              throw new MissingRequiredPropertyException("GetServerScopesScope", "system");
            }
            this.system = system;
            return this;
        }
        public GetServerScopesScope build() {
            final var _resultValue = new GetServerScopesScope();
            _resultValue.consent = consent;
            _resultValue.default_ = default_;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.metadataPublish = metadataPublish;
            _resultValue.name = name;
            _resultValue.optional = optional;
            _resultValue.system = system;
            return _resultValue;
        }
    }
}
