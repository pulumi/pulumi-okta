// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * Brand id of the domain
     * 
     */
    @Import(name="brandId")
    private @Nullable Output<String> brandId;

    /**
     * @return Brand id of the domain
     * 
     */
    public Optional<Output<String>> brandId() {
        return Optional.ofNullable(this.brandId);
    }

    /**
     * Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Warning: Use of OKTA_MANAGED requires a feature flag to be enabled. Default value = MANUAL
     * 
     */
    @Import(name="certificateSourceType")
    private @Nullable Output<String> certificateSourceType;

    /**
     * @return Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Warning: Use of OKTA_MANAGED requires a feature flag to be enabled. Default value = MANUAL
     * 
     */
    public Optional<Output<String>> certificateSourceType() {
        return Optional.ofNullable(this.certificateSourceType);
    }

    /**
     * Custom Domain name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Custom Domain name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.brandId = $.brandId;
        this.certificateSourceType = $.certificateSourceType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param brandId Brand id of the domain
         * 
         * @return builder
         * 
         */
        public Builder brandId(@Nullable Output<String> brandId) {
            $.brandId = brandId;
            return this;
        }

        /**
         * @param brandId Brand id of the domain
         * 
         * @return builder
         * 
         */
        public Builder brandId(String brandId) {
            return brandId(Output.of(brandId));
        }

        /**
         * @param certificateSourceType Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Warning: Use of OKTA_MANAGED requires a feature flag to be enabled. Default value = MANUAL
         * 
         * @return builder
         * 
         */
        public Builder certificateSourceType(@Nullable Output<String> certificateSourceType) {
            $.certificateSourceType = certificateSourceType;
            return this;
        }

        /**
         * @param certificateSourceType Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Warning: Use of OKTA_MANAGED requires a feature flag to be enabled. Default value = MANUAL
         * 
         * @return builder
         * 
         */
        public Builder certificateSourceType(String certificateSourceType) {
            return certificateSourceType(Output.of(certificateSourceType));
        }

        /**
         * @param name Custom Domain name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Custom Domain name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DomainArgs build() {
            return $;
        }
    }

}
