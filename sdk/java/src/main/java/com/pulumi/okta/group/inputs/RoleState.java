// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleState extends com.pulumi.resources.ResourceArgs {

    public static final RoleState Empty = new RoleState();

    /**
     * When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
     * 
     */
    @Import(name="disableNotifications")
    private @Nullable Output<Boolean> disableNotifications;

    /**
     * @return When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
     * 
     */
    public Optional<Output<Boolean>> disableNotifications() {
        return Optional.ofNullable(this.disableNotifications);
    }

    /**
     * ID of group to attach admin roles to
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return ID of group to attach admin roles to
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Type of Role to assign
     * 
     */
    @Import(name="roleType")
    private @Nullable Output<String> roleType;

    /**
     * @return Type of Role to assign
     * 
     */
    public Optional<Output<String>> roleType() {
        return Optional.ofNullable(this.roleType);
    }

    /**
     * List of apps ids for the targets of the admin role.
     * 
     */
    @Import(name="targetAppLists")
    private @Nullable Output<List<String>> targetAppLists;

    /**
     * @return List of apps ids for the targets of the admin role.
     * 
     */
    public Optional<Output<List<String>>> targetAppLists() {
        return Optional.ofNullable(this.targetAppLists);
    }

    /**
     * List of groups ids for the targets of the admin role.
     * 
     */
    @Import(name="targetGroupLists")
    private @Nullable Output<List<String>> targetGroupLists;

    /**
     * @return List of groups ids for the targets of the admin role.
     * 
     */
    public Optional<Output<List<String>>> targetGroupLists() {
        return Optional.ofNullable(this.targetGroupLists);
    }

    private RoleState() {}

    private RoleState(RoleState $) {
        this.disableNotifications = $.disableNotifications;
        this.groupId = $.groupId;
        this.roleType = $.roleType;
        this.targetAppLists = $.targetAppLists;
        this.targetGroupLists = $.targetGroupLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleState $;

        public Builder() {
            $ = new RoleState();
        }

        public Builder(RoleState defaults) {
            $ = new RoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(@Nullable Output<Boolean> disableNotifications) {
            $.disableNotifications = disableNotifications;
            return this;
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(Boolean disableNotifications) {
            return disableNotifications(Output.of(disableNotifications));
        }

        /**
         * @param groupId ID of group to attach admin roles to
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId ID of group to attach admin roles to
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param roleType Type of Role to assign
         * 
         * @return builder
         * 
         */
        public Builder roleType(@Nullable Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Type of Role to assign
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        /**
         * @param targetAppLists List of apps ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(@Nullable Output<List<String>> targetAppLists) {
            $.targetAppLists = targetAppLists;
            return this;
        }

        /**
         * @param targetAppLists List of apps ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(List<String> targetAppLists) {
            return targetAppLists(Output.of(targetAppLists));
        }

        /**
         * @param targetAppLists List of apps ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(String... targetAppLists) {
            return targetAppLists(List.of(targetAppLists));
        }

        /**
         * @param targetGroupLists List of groups ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(@Nullable Output<List<String>> targetGroupLists) {
            $.targetGroupLists = targetGroupLists;
            return this;
        }

        /**
         * @param targetGroupLists List of groups ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(List<String> targetGroupLists) {
            return targetGroupLists(Output.of(targetGroupLists));
        }

        /**
         * @param targetGroupLists List of groups ids for the targets of the admin role.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(String... targetGroupLists) {
            return targetGroupLists(List.of(targetGroupLists));
        }

        public RoleState build() {
            return $;
        }
    }

}
