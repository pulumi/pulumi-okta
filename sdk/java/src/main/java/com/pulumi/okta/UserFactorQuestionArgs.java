// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class UserFactorQuestionArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserFactorQuestionArgs Empty = new UserFactorQuestionArgs();

    /**
     * Security question answer. Note here that answer won&#39;t be set during the resource import.
     * 
     */
    @Import(name="answer", required=true)
    private Output<String> answer;

    /**
     * @return Security question answer. Note here that answer won&#39;t be set during the resource import.
     * 
     */
    public Output<String> answer() {
        return this.answer;
    }

    /**
     * Security question unique key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Security question unique key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * ID of the user. Resource will be recreated when `user_id` changes.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return ID of the user. Resource will be recreated when `user_id` changes.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserFactorQuestionArgs() {}

    private UserFactorQuestionArgs(UserFactorQuestionArgs $) {
        this.answer = $.answer;
        this.key = $.key;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserFactorQuestionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserFactorQuestionArgs $;

        public Builder() {
            $ = new UserFactorQuestionArgs();
        }

        public Builder(UserFactorQuestionArgs defaults) {
            $ = new UserFactorQuestionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param answer Security question answer. Note here that answer won&#39;t be set during the resource import.
         * 
         * @return builder
         * 
         */
        public Builder answer(Output<String> answer) {
            $.answer = answer;
            return this;
        }

        /**
         * @param answer Security question answer. Note here that answer won&#39;t be set during the resource import.
         * 
         * @return builder
         * 
         */
        public Builder answer(String answer) {
            return answer(Output.of(answer));
        }

        /**
         * @param key Security question unique key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Security question unique key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param userId ID of the user. Resource will be recreated when `user_id` changes.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of the user. Resource will be recreated when `user_id` changes.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserFactorQuestionArgs build() {
            if ($.answer == null) {
                throw new MissingRequiredPropertyException("UserFactorQuestionArgs", "answer");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("UserFactorQuestionArgs", "key");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserFactorQuestionArgs", "userId");
            }
            return $;
        }
    }

}
