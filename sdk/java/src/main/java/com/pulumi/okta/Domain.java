// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.DomainArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.DomainState;
import com.pulumi.okta.outputs.DomainDnsRecord;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages custom domain for your organization.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.Domain;
 * import com.pulumi.okta.DomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Domain("example", DomainArgs.builder()
 *             .name("www.example.com")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Okta Admin Role Targets can be imported via the Okta ID.
 * 
 * ```sh
 * $ pulumi import okta:index/domain:Domain example &amp;#60;domain_id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:index/domain:Domain")
public class Domain extends com.pulumi.resources.CustomResource {
    /**
     * The Brand ID of the domain
     * 
     */
    @Export(name="brandId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> brandId;

    /**
     * @return The Brand ID of the domain
     * 
     */
    public Output<Optional<String>> brandId() {
        return Codegen.optional(this.brandId);
    }
    /**
     * Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Default value = `MANUAL`
     * 
     * &gt; **WARNING**: Use of `OKTA_MANAGED` requires a feature flag to be enabled.
     * 
     */
    @Export(name="certificateSourceType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certificateSourceType;

    /**
     * @return Certificate source type that indicates whether the certificate is provided by the user or Okta. Accepted values: `MANUAL`, `OKTA_MANAGED`. Default value = `MANUAL`
     * 
     * &gt; **WARNING**: Use of `OKTA_MANAGED` requires a feature flag to be enabled.
     * 
     */
    public Output<Optional<String>> certificateSourceType() {
        return Codegen.optional(this.certificateSourceType);
    }
    /**
     * TXT and CNAME records to be registered for the Domain.
     * 
     */
    @Export(name="dnsRecords", refs={List.class,DomainDnsRecord.class}, tree="[0,1]")
    private Output<List<DomainDnsRecord>> dnsRecords;

    /**
     * @return TXT and CNAME records to be registered for the Domain.
     * 
     */
    public Output<List<DomainDnsRecord>> dnsRecords() {
        return this.dnsRecords;
    }
    /**
     * Custom Domain name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Custom Domain name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Status of the domain.
     * 
     */
    @Export(name="validationStatus", refs={String.class}, tree="[0]")
    private Output<String> validationStatus;

    /**
     * @return Status of the domain.
     * 
     */
    public Output<String> validationStatus() {
        return this.validationStatus;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Domain(String name) {
        this(name, DomainArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Domain(String name, @Nullable DomainArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Domain(String name, @Nullable DomainArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/domain:Domain", name, args == null ? DomainArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Domain(String name, Output<String> id, @Nullable DomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/domain:Domain", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Domain get(String name, Output<String> id, @Nullable DomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Domain(name, id, state, options);
    }
}
