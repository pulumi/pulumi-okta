// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserPasswordHashArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPasswordHashArgs Empty = new UserPasswordHashArgs();

    /**
     * The algorithm used to generate the hash using the password
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return The algorithm used to generate the hash using the password
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Only required for salted hashes
     * 
     */
    @Import(name="salt")
    private @Nullable Output<String> salt;

    /**
     * @return Only required for salted hashes
     * 
     */
    public Optional<Output<String>> salt() {
        return Optional.ofNullable(this.salt);
    }

    /**
     * Specifies whether salt was pre- or postfixed to the password before hashing
     * 
     */
    @Import(name="saltOrder")
    private @Nullable Output<String> saltOrder;

    /**
     * @return Specifies whether salt was pre- or postfixed to the password before hashing
     * 
     */
    public Optional<Output<String>> saltOrder() {
        return Optional.ofNullable(this.saltOrder);
    }

    /**
     * For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
     * 
     */
    @Import(name="workFactor")
    private @Nullable Output<Integer> workFactor;

    /**
     * @return Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
     * 
     */
    public Optional<Output<Integer>> workFactor() {
        return Optional.ofNullable(this.workFactor);
    }

    private UserPasswordHashArgs() {}

    private UserPasswordHashArgs(UserPasswordHashArgs $) {
        this.algorithm = $.algorithm;
        this.salt = $.salt;
        this.saltOrder = $.saltOrder;
        this.value = $.value;
        this.workFactor = $.workFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPasswordHashArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPasswordHashArgs $;

        public Builder() {
            $ = new UserPasswordHashArgs();
        }

        public Builder(UserPasswordHashArgs defaults) {
            $ = new UserPasswordHashArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The algorithm used to generate the hash using the password
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The algorithm used to generate the hash using the password
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param salt Only required for salted hashes
         * 
         * @return builder
         * 
         */
        public Builder salt(@Nullable Output<String> salt) {
            $.salt = salt;
            return this;
        }

        /**
         * @param salt Only required for salted hashes
         * 
         * @return builder
         * 
         */
        public Builder salt(String salt) {
            return salt(Output.of(salt));
        }

        /**
         * @param saltOrder Specifies whether salt was pre- or postfixed to the password before hashing
         * 
         * @return builder
         * 
         */
        public Builder saltOrder(@Nullable Output<String> saltOrder) {
            $.saltOrder = saltOrder;
            return this;
        }

        /**
         * @param saltOrder Specifies whether salt was pre- or postfixed to the password before hashing
         * 
         * @return builder
         * 
         */
        public Builder saltOrder(String saltOrder) {
            return saltOrder(Output.of(saltOrder));
        }

        /**
         * @param value For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password&#39;s SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param workFactor Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
         * 
         * @return builder
         * 
         */
        public Builder workFactor(@Nullable Output<Integer> workFactor) {
            $.workFactor = workFactor;
            return this;
        }

        /**
         * @param workFactor Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
         * 
         * @return builder
         * 
         */
        public Builder workFactor(Integer workFactor) {
            return workFactor(Output.of(workFactor));
        }

        public UserPasswordHashArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("UserPasswordHashArgs", "algorithm");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("UserPasswordHashArgs", "value");
            }
            return $;
        }
    }

}
