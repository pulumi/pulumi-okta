// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SocialState extends com.pulumi.resources.ResourceArgs {

    public static final SocialState Empty = new SocialState();

    /**
     * Specifies the account linking action for an IdP user. Default: `AUTO`
     * 
     */
    @Import(name="accountLinkAction")
    private @Nullable Output<String> accountLinkAction;

    /**
     * @return Specifies the account linking action for an IdP user. Default: `AUTO`
     * 
     */
    public Optional<Output<String>> accountLinkAction() {
        return Optional.ofNullable(this.accountLinkAction);
    }

    /**
     * Group memberships to determine link candidates.
     * 
     */
    @Import(name="accountLinkGroupIncludes")
    private @Nullable Output<List<String>> accountLinkGroupIncludes;

    /**
     * @return Group memberships to determine link candidates.
     * 
     */
    public Optional<Output<List<String>>> accountLinkGroupIncludes() {
        return Optional.ofNullable(this.accountLinkGroupIncludes);
    }

    /**
     * The Key ID that you obtained from Apple when you created the private key for the client
     * 
     */
    @Import(name="appleKid")
    private @Nullable Output<String> appleKid;

    /**
     * @return The Key ID that you obtained from Apple when you created the private key for the client
     * 
     */
    public Optional<Output<String>> appleKid() {
        return Optional.ofNullable(this.appleKid);
    }

    /**
     * The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn&#39;t returned when importing this resource.
     * 
     */
    @Import(name="applePrivateKey")
    private @Nullable Output<String> applePrivateKey;

    /**
     * @return The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn&#39;t returned when importing this resource.
     * 
     */
    public Optional<Output<String>> applePrivateKey() {
        return Optional.ofNullable(this.applePrivateKey);
    }

    /**
     * The Team ID associated with your Apple developer account
     * 
     */
    @Import(name="appleTeamId")
    private @Nullable Output<String> appleTeamId;

    /**
     * @return The Team ID associated with your Apple developer account
     * 
     */
    public Optional<Output<String>> appleTeamId() {
        return Optional.ofNullable(this.appleTeamId);
    }

    /**
     * The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    @Import(name="authorizationBinding")
    private @Nullable Output<String> authorizationBinding;

    /**
     * @return The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    public Optional<Output<String>> authorizationBinding() {
        return Optional.ofNullable(this.authorizationBinding);
    }

    /**
     * IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    @Import(name="authorizationUrl")
    private @Nullable Output<String> authorizationUrl;

    /**
     * @return IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    public Optional<Output<String>> authorizationUrl() {
        return Optional.ofNullable(this.authorizationUrl);
    }

    /**
     * Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client secret issued by AS for the Okta IdP instance.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Client secret issued by AS for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    @Import(name="deprovisionedAction")
    private @Nullable Output<String> deprovisionedAction;

    /**
     * @return Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    public Optional<Output<String>> deprovisionedAction() {
        return Optional.ofNullable(this.deprovisionedAction);
    }

    /**
     * Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     * 
     */
    @Import(name="groupsAction")
    private @Nullable Output<String> groupsAction;

    /**
     * @return Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
     * 
     */
    public Optional<Output<String>> groupsAction() {
        return Optional.ofNullable(this.groupsAction);
    }

    /**
     * List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
     * 
     */
    @Import(name="groupsAssignments")
    private @Nullable Output<List<String>> groupsAssignments;

    /**
     * @return List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
     * 
     */
    public Optional<Output<List<String>>> groupsAssignments() {
        return Optional.ofNullable(this.groupsAssignments);
    }

    /**
     * IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     * 
     */
    @Import(name="groupsAttribute")
    private @Nullable Output<String> groupsAttribute;

    /**
     * @return IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
     * 
     */
    public Optional<Output<String>> groupsAttribute() {
        return Optional.ofNullable(this.groupsAttribute);
    }

    /**
     * Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
     * 
     */
    @Import(name="groupsFilters")
    private @Nullable Output<List<String>> groupsFilters;

    /**
     * @return Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
     * 
     */
    public Optional<Output<List<String>>> groupsFilters() {
        return Optional.ofNullable(this.groupsFilters);
    }

    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
     * 
     */
    @Import(name="issuerMode")
    private @Nullable Output<String> issuerMode;

    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
     * 
     */
    public Optional<Output<String>> issuerMode() {
        return Optional.ofNullable(this.issuerMode);
    }

    /**
     * Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    @Import(name="maxClockSkew")
    private @Nullable Output<Integer> maxClockSkew;

    /**
     * @return Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    public Optional<Output<Integer>> maxClockSkew() {
        return Optional.ofNullable(this.maxClockSkew);
    }

    /**
     * Name of the IdP
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the IdP
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Determines if the IdP should act as a source of truth for user profile attributes.
     * 
     */
    @Import(name="profileMaster")
    private @Nullable Output<Boolean> profileMaster;

    /**
     * @return Determines if the IdP should act as a source of truth for user profile attributes.
     * 
     */
    public Optional<Output<Boolean>> profileMaster() {
        return Optional.ofNullable(this.profileMaster);
    }

    /**
     * The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<String> protocolType;

    /**
     * @return The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
     * 
     */
    public Optional<Output<String>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    /**
     * Provisioning action for an IdP user during authentication. Default: `AUTO`
     * 
     */
    @Import(name="provisioningAction")
    private @Nullable Output<String> provisioningAction;

    /**
     * @return Provisioning action for an IdP user during authentication. Default: `AUTO`
     * 
     */
    public Optional<Output<String>> provisioningAction() {
        return Optional.ofNullable(this.provisioningAction);
    }

    /**
     * The scopes of the IdP.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The scopes of the IdP.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Default to `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Default to `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     * 
     */
    @Import(name="subjectMatchAttribute")
    private @Nullable Output<String> subjectMatchAttribute;

    /**
     * @return Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
     * 
     */
    public Optional<Output<String>> subjectMatchAttribute() {
        return Optional.ofNullable(this.subjectMatchAttribute);
    }

    /**
     * Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     * 
     */
    @Import(name="subjectMatchType")
    private @Nullable Output<String> subjectMatchType;

    /**
     * @return Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
     * 
     */
    public Optional<Output<String>> subjectMatchType() {
        return Optional.ofNullable(this.subjectMatchType);
    }

    /**
     * Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    @Import(name="suspendedAction")
    private @Nullable Output<String> suspendedAction;

    /**
     * @return Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
     * 
     */
    public Optional<Output<String>> suspendedAction() {
        return Optional.ofNullable(this.suspendedAction);
    }

    /**
     * The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    @Import(name="tokenBinding")
    private @Nullable Output<String> tokenBinding;

    /**
     * @return The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
     * 
     */
    public Optional<Output<String>> tokenBinding() {
        return Optional.ofNullable(this.tokenBinding);
    }

    /**
     * IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    @Import(name="tokenUrl")
    private @Nullable Output<String> tokenUrl;

    /**
     * @return IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    public Optional<Output<String>> tokenUrl() {
        return Optional.ofNullable(this.tokenUrl);
    }

    /**
     * Trust audience for the Okta IdP instance.
     * 
     */
    @Import(name="trustAudience")
    private @Nullable Output<String> trustAudience;

    /**
     * @return Trust audience for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> trustAudience() {
        return Optional.ofNullable(this.trustAudience);
    }

    /**
     * Trust issuer for the Okta IdP instance.
     * 
     */
    @Import(name="trustIssuer")
    private @Nullable Output<String> trustIssuer;

    /**
     * @return Trust issuer for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> trustIssuer() {
        return Optional.ofNullable(this.trustIssuer);
    }

    /**
     * Trust kid for the Okta IdP instance.
     * 
     */
    @Import(name="trustKid")
    private @Nullable Output<String> trustKid;

    /**
     * @return Trust kid for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> trustKid() {
        return Optional.ofNullable(this.trustKid);
    }

    /**
     * Trust revocation for the Okta IdP instance.
     * 
     */
    @Import(name="trustRevocation")
    private @Nullable Output<String> trustRevocation;

    /**
     * @return Trust revocation for the Okta IdP instance.
     * 
     */
    public Optional<Output<String>> trustRevocation() {
        return Optional.ofNullable(this.trustRevocation);
    }

    /**
     * Trust revocation cache lifetime for the Okta IdP instance.
     * 
     */
    @Import(name="trustRevocationCacheLifetime")
    private @Nullable Output<Integer> trustRevocationCacheLifetime;

    /**
     * @return Trust revocation cache lifetime for the Okta IdP instance.
     * 
     */
    public Optional<Output<Integer>> trustRevocationCacheLifetime() {
        return Optional.ofNullable(this.trustRevocationCacheLifetime);
    }

    /**
     * Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     * 
     */
    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    /**
     * @return Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
     * 
     */
    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SocialState() {}

    private SocialState(SocialState $) {
        this.accountLinkAction = $.accountLinkAction;
        this.accountLinkGroupIncludes = $.accountLinkGroupIncludes;
        this.appleKid = $.appleKid;
        this.applePrivateKey = $.applePrivateKey;
        this.appleTeamId = $.appleTeamId;
        this.authorizationBinding = $.authorizationBinding;
        this.authorizationUrl = $.authorizationUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.deprovisionedAction = $.deprovisionedAction;
        this.groupsAction = $.groupsAction;
        this.groupsAssignments = $.groupsAssignments;
        this.groupsAttribute = $.groupsAttribute;
        this.groupsFilters = $.groupsFilters;
        this.issuerMode = $.issuerMode;
        this.maxClockSkew = $.maxClockSkew;
        this.name = $.name;
        this.profileMaster = $.profileMaster;
        this.protocolType = $.protocolType;
        this.provisioningAction = $.provisioningAction;
        this.scopes = $.scopes;
        this.status = $.status;
        this.subjectMatchAttribute = $.subjectMatchAttribute;
        this.subjectMatchType = $.subjectMatchType;
        this.suspendedAction = $.suspendedAction;
        this.tokenBinding = $.tokenBinding;
        this.tokenUrl = $.tokenUrl;
        this.trustAudience = $.trustAudience;
        this.trustIssuer = $.trustIssuer;
        this.trustKid = $.trustKid;
        this.trustRevocation = $.trustRevocation;
        this.trustRevocationCacheLifetime = $.trustRevocationCacheLifetime;
        this.type = $.type;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SocialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SocialState $;

        public Builder() {
            $ = new SocialState();
        }

        public Builder(SocialState defaults) {
            $ = new SocialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountLinkAction Specifies the account linking action for an IdP user. Default: `AUTO`
         * 
         * @return builder
         * 
         */
        public Builder accountLinkAction(@Nullable Output<String> accountLinkAction) {
            $.accountLinkAction = accountLinkAction;
            return this;
        }

        /**
         * @param accountLinkAction Specifies the account linking action for an IdP user. Default: `AUTO`
         * 
         * @return builder
         * 
         */
        public Builder accountLinkAction(String accountLinkAction) {
            return accountLinkAction(Output.of(accountLinkAction));
        }

        /**
         * @param accountLinkGroupIncludes Group memberships to determine link candidates.
         * 
         * @return builder
         * 
         */
        public Builder accountLinkGroupIncludes(@Nullable Output<List<String>> accountLinkGroupIncludes) {
            $.accountLinkGroupIncludes = accountLinkGroupIncludes;
            return this;
        }

        /**
         * @param accountLinkGroupIncludes Group memberships to determine link candidates.
         * 
         * @return builder
         * 
         */
        public Builder accountLinkGroupIncludes(List<String> accountLinkGroupIncludes) {
            return accountLinkGroupIncludes(Output.of(accountLinkGroupIncludes));
        }

        /**
         * @param accountLinkGroupIncludes Group memberships to determine link candidates.
         * 
         * @return builder
         * 
         */
        public Builder accountLinkGroupIncludes(String... accountLinkGroupIncludes) {
            return accountLinkGroupIncludes(List.of(accountLinkGroupIncludes));
        }

        /**
         * @param appleKid The Key ID that you obtained from Apple when you created the private key for the client
         * 
         * @return builder
         * 
         */
        public Builder appleKid(@Nullable Output<String> appleKid) {
            $.appleKid = appleKid;
            return this;
        }

        /**
         * @param appleKid The Key ID that you obtained from Apple when you created the private key for the client
         * 
         * @return builder
         * 
         */
        public Builder appleKid(String appleKid) {
            return appleKid(Output.of(appleKid));
        }

        /**
         * @param applePrivateKey The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn&#39;t returned when importing this resource.
         * 
         * @return builder
         * 
         */
        public Builder applePrivateKey(@Nullable Output<String> applePrivateKey) {
            $.applePrivateKey = applePrivateKey;
            return this;
        }

        /**
         * @param applePrivateKey The Key ID that you obtained from Apple when you created the private key for the client. PrivateKey is required when resource is first created. For all consecutive updates, it can be empty/omitted and keeps the existing value if it is empty/omitted. PrivateKey isn&#39;t returned when importing this resource.
         * 
         * @return builder
         * 
         */
        public Builder applePrivateKey(String applePrivateKey) {
            return applePrivateKey(Output.of(applePrivateKey));
        }

        /**
         * @param appleTeamId The Team ID associated with your Apple developer account
         * 
         * @return builder
         * 
         */
        public Builder appleTeamId(@Nullable Output<String> appleTeamId) {
            $.appleTeamId = appleTeamId;
            return this;
        }

        /**
         * @param appleTeamId The Team ID associated with your Apple developer account
         * 
         * @return builder
         * 
         */
        public Builder appleTeamId(String appleTeamId) {
            return appleTeamId(Output.of(appleTeamId));
        }

        /**
         * @param authorizationBinding The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationBinding(@Nullable Output<String> authorizationBinding) {
            $.authorizationBinding = authorizationBinding;
            return this;
        }

        /**
         * @param authorizationBinding The method of making an authorization request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationBinding(String authorizationBinding) {
            return authorizationBinding(Output.of(authorizationBinding));
        }

        /**
         * @param authorizationUrl IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            $.authorizationUrl = authorizationUrl;
            return this;
        }

        /**
         * @param authorizationUrl IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(String authorizationUrl) {
            return authorizationUrl(Output.of(authorizationUrl));
        }

        /**
         * @param clientId Unique identifier issued by AS for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Unique identifier issued by AS for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Client secret issued by AS for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Client secret issued by AS for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param deprovisionedAction Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder deprovisionedAction(@Nullable Output<String> deprovisionedAction) {
            $.deprovisionedAction = deprovisionedAction;
            return this;
        }

        /**
         * @param deprovisionedAction Action for a previously deprovisioned IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder deprovisionedAction(String deprovisionedAction) {
            return deprovisionedAction(Output.of(deprovisionedAction));
        }

        /**
         * @param groupsAction Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder groupsAction(@Nullable Output<String> groupsAction) {
            $.groupsAction = groupsAction;
            return this;
        }

        /**
         * @param groupsAction Provisioning action for IdP user&#39;s group memberships. It can be `NONE`, `SYNC`, `APPEND`, or `ASSIGN`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder groupsAction(String groupsAction) {
            return groupsAction(Output.of(groupsAction));
        }

        /**
         * @param groupsAssignments List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsAssignments(@Nullable Output<List<String>> groupsAssignments) {
            $.groupsAssignments = groupsAssignments;
            return this;
        }

        /**
         * @param groupsAssignments List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsAssignments(List<String> groupsAssignments) {
            return groupsAssignments(Output.of(groupsAssignments));
        }

        /**
         * @param groupsAssignments List of Okta Group IDs to add an IdP user as a member with the `ASSIGN` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsAssignments(String... groupsAssignments) {
            return groupsAssignments(List.of(groupsAssignments));
        }

        /**
         * @param groupsAttribute IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
         * 
         * @return builder
         * 
         */
        public Builder groupsAttribute(@Nullable Output<String> groupsAttribute) {
            $.groupsAttribute = groupsAttribute;
            return this;
        }

        /**
         * @param groupsAttribute IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
         * 
         * @return builder
         * 
         */
        public Builder groupsAttribute(String groupsAttribute) {
            return groupsAttribute(Output.of(groupsAttribute));
        }

        /**
         * @param groupsFilters Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsFilters(@Nullable Output<List<String>> groupsFilters) {
            $.groupsFilters = groupsFilters;
            return this;
        }

        /**
         * @param groupsFilters Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsFilters(List<String> groupsFilters) {
            return groupsFilters(Output.of(groupsFilters));
        }

        /**
         * @param groupsFilters Whitelist of Okta Group identifiers that are allowed for the `APPEND` or `SYNC` `groups_action`.
         * 
         * @return builder
         * 
         */
        public Builder groupsFilters(String... groupsFilters) {
            return groupsFilters(List.of(groupsFilters));
        }

        /**
         * @param issuerMode Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(@Nullable Output<String> issuerMode) {
            $.issuerMode = issuerMode;
            return this;
        }

        /**
         * @param issuerMode Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `ORG_URL` or `CUSTOM_URL`. Default: `ORG_URL`
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(String issuerMode) {
            return issuerMode(Output.of(issuerMode));
        }

        /**
         * @param maxClockSkew Maximum allowable clock-skew when processing messages from the IdP.
         * 
         * @return builder
         * 
         */
        public Builder maxClockSkew(@Nullable Output<Integer> maxClockSkew) {
            $.maxClockSkew = maxClockSkew;
            return this;
        }

        /**
         * @param maxClockSkew Maximum allowable clock-skew when processing messages from the IdP.
         * 
         * @return builder
         * 
         */
        public Builder maxClockSkew(Integer maxClockSkew) {
            return maxClockSkew(Output.of(maxClockSkew));
        }

        /**
         * @param name Name of the IdP
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the IdP
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param profileMaster Determines if the IdP should act as a source of truth for user profile attributes.
         * 
         * @return builder
         * 
         */
        public Builder profileMaster(@Nullable Output<Boolean> profileMaster) {
            $.profileMaster = profileMaster;
            return this;
        }

        /**
         * @param profileMaster Determines if the IdP should act as a source of truth for user profile attributes.
         * 
         * @return builder
         * 
         */
        public Builder profileMaster(Boolean profileMaster) {
            return profileMaster(Output.of(profileMaster));
        }

        /**
         * @param protocolType The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The type of protocol to use. It can be `OIDC` or `OAUTH2`. Default: `OAUTH2`
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param provisioningAction Provisioning action for an IdP user during authentication. Default: `AUTO`
         * 
         * @return builder
         * 
         */
        public Builder provisioningAction(@Nullable Output<String> provisioningAction) {
            $.provisioningAction = provisioningAction;
            return this;
        }

        /**
         * @param provisioningAction Provisioning action for an IdP user during authentication. Default: `AUTO`
         * 
         * @return builder
         * 
         */
        public Builder provisioningAction(String provisioningAction) {
            return provisioningAction(Output.of(provisioningAction));
        }

        /**
         * @param scopes The scopes of the IdP.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The scopes of the IdP.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The scopes of the IdP.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param status Default to `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Default to `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subjectMatchAttribute Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMatchAttribute(@Nullable Output<String> subjectMatchAttribute) {
            $.subjectMatchAttribute = subjectMatchAttribute;
            return this;
        }

        /**
         * @param subjectMatchAttribute Okta user profile attribute for matching transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMatchAttribute(String subjectMatchAttribute) {
            return subjectMatchAttribute(Output.of(subjectMatchAttribute));
        }

        /**
         * @param subjectMatchType Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMatchType(@Nullable Output<String> subjectMatchType) {
            $.subjectMatchType = subjectMatchType;
            return this;
        }

        /**
         * @param subjectMatchType Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default, it is set to `USERNAME`. It can be set to `USERNAME`, `EMAIL`, `USERNAME_OR_EMAIL` or `CUSTOM_ATTRIBUTE`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMatchType(String subjectMatchType) {
            return subjectMatchType(Output.of(subjectMatchType));
        }

        /**
         * @param suspendedAction Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder suspendedAction(@Nullable Output<String> suspendedAction) {
            $.suspendedAction = suspendedAction;
            return this;
        }

        /**
         * @param suspendedAction Action for a previously suspended IdP user during authentication. Can be `NONE` or `REACTIVATE`. Default: `NONE`
         * 
         * @return builder
         * 
         */
        public Builder suspendedAction(String suspendedAction) {
            return suspendedAction(Output.of(suspendedAction));
        }

        /**
         * @param tokenBinding The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
         * 
         * @return builder
         * 
         */
        public Builder tokenBinding(@Nullable Output<String> tokenBinding) {
            $.tokenBinding = tokenBinding;
            return this;
        }

        /**
         * @param tokenBinding The method of making a token request. It can be set to `HTTP-POST` or `HTTP-REDIRECT`.
         * 
         * @return builder
         * 
         */
        public Builder tokenBinding(String tokenBinding) {
            return tokenBinding(Output.of(tokenBinding));
        }

        /**
         * @param tokenUrl IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(@Nullable Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * @param tokenUrl IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        /**
         * @param trustAudience Trust audience for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustAudience(@Nullable Output<String> trustAudience) {
            $.trustAudience = trustAudience;
            return this;
        }

        /**
         * @param trustAudience Trust audience for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustAudience(String trustAudience) {
            return trustAudience(Output.of(trustAudience));
        }

        /**
         * @param trustIssuer Trust issuer for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustIssuer(@Nullable Output<String> trustIssuer) {
            $.trustIssuer = trustIssuer;
            return this;
        }

        /**
         * @param trustIssuer Trust issuer for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustIssuer(String trustIssuer) {
            return trustIssuer(Output.of(trustIssuer));
        }

        /**
         * @param trustKid Trust kid for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustKid(@Nullable Output<String> trustKid) {
            $.trustKid = trustKid;
            return this;
        }

        /**
         * @param trustKid Trust kid for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustKid(String trustKid) {
            return trustKid(Output.of(trustKid));
        }

        /**
         * @param trustRevocation Trust revocation for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustRevocation(@Nullable Output<String> trustRevocation) {
            $.trustRevocation = trustRevocation;
            return this;
        }

        /**
         * @param trustRevocation Trust revocation for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustRevocation(String trustRevocation) {
            return trustRevocation(Output.of(trustRevocation));
        }

        /**
         * @param trustRevocationCacheLifetime Trust revocation cache lifetime for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustRevocationCacheLifetime(@Nullable Output<Integer> trustRevocationCacheLifetime) {
            $.trustRevocationCacheLifetime = trustRevocationCacheLifetime;
            return this;
        }

        /**
         * @param trustRevocationCacheLifetime Trust revocation cache lifetime for the Okta IdP instance.
         * 
         * @return builder
         * 
         */
        public Builder trustRevocationCacheLifetime(Integer trustRevocationCacheLifetime) {
            return trustRevocationCacheLifetime(Output.of(trustRevocationCacheLifetime));
        }

        /**
         * @param type Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Identity Provider Types: https://developer.okta.com/docs/reference/api/idps/#identity-provider-type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usernameTemplate Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        /**
         * @param usernameTemplate Okta EL Expression to generate or transform a unique username for the IdP user. Default: `idpuser.email`
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SocialState build() {
            return $;
        }
    }

}
