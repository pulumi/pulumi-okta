// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerScopeArgs Empty = new ServerScopeArgs();

    /**
     * Auth Server ID.
     * 
     */
    @Import(name="authServerId", required=true)
    private Output<String> authServerId;

    /**
     * @return Auth Server ID.
     * 
     */
    public Output<String> authServerId() {
        return this.authServerId;
    }

    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `&#34;REQUIRED&#34;` or `&#34;IMPLICIT&#34;`.
     * 
     */
    @Import(name="consent")
    private @Nullable Output<String> consent;

    /**
     * @return Indicates whether a consent dialog is needed for the scope. It can be set to `&#34;REQUIRED&#34;` or `&#34;IMPLICIT&#34;`.
     * 
     */
    public Optional<Output<String>> consent() {
        return Optional.ofNullable(this.consent);
    }

    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Description of the Auth Server Scope.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Auth Server Scope.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the end user displayed in a consent dialog box.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Name of the end user displayed in a consent dialog box.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Whether to publish metadata or not. It can be set to `&#34;ALL_CLIENTS&#34;` or `&#34;NO_CLIENTS&#34;`.
     * 
     */
    @Import(name="metadataPublish")
    private @Nullable Output<String> metadataPublish;

    /**
     * @return Whether to publish metadata or not. It can be set to `&#34;ALL_CLIENTS&#34;` or `&#34;NO_CLIENTS&#34;`.
     * 
     */
    public Optional<Output<String>> metadataPublish() {
        return Optional.ofNullable(this.metadataPublish);
    }

    /**
     * Auth Server scope name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Auth Server scope name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the scope optional
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Whether the scope optional
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    private ServerScopeArgs() {}

    private ServerScopeArgs(ServerScopeArgs $) {
        this.authServerId = $.authServerId;
        this.consent = $.consent;
        this.default_ = $.default_;
        this.description = $.description;
        this.displayName = $.displayName;
        this.metadataPublish = $.metadataPublish;
        this.name = $.name;
        this.optional = $.optional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerScopeArgs $;

        public Builder() {
            $ = new ServerScopeArgs();
        }

        public Builder(ServerScopeArgs defaults) {
            $ = new ServerScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authServerId Auth Server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId Auth Server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param consent Indicates whether a consent dialog is needed for the scope. It can be set to `&#34;REQUIRED&#34;` or `&#34;IMPLICIT&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder consent(@Nullable Output<String> consent) {
            $.consent = consent;
            return this;
        }

        /**
         * @param consent Indicates whether a consent dialog is needed for the scope. It can be set to `&#34;REQUIRED&#34;` or `&#34;IMPLICIT&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder consent(String consent) {
            return consent(Output.of(consent));
        }

        /**
         * @param default_ A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description Description of the Auth Server Scope.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Auth Server Scope.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Name of the end user displayed in a consent dialog box.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name of the end user displayed in a consent dialog box.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param metadataPublish Whether to publish metadata or not. It can be set to `&#34;ALL_CLIENTS&#34;` or `&#34;NO_CLIENTS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder metadataPublish(@Nullable Output<String> metadataPublish) {
            $.metadataPublish = metadataPublish;
            return this;
        }

        /**
         * @param metadataPublish Whether to publish metadata or not. It can be set to `&#34;ALL_CLIENTS&#34;` or `&#34;NO_CLIENTS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder metadataPublish(String metadataPublish) {
            return metadataPublish(Output.of(metadataPublish));
        }

        /**
         * @param name Auth Server scope name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Auth Server scope name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optional Whether the scope optional
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Whether the scope optional
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        public ServerScopeArgs build() {
            $.authServerId = Objects.requireNonNull($.authServerId, "expected parameter 'authServerId' to be non-null");
            return $;
        }
    }

}
