// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("okta");
/**
 * Bearer token granting privileges to Okta API.
 * 
 */
    public Optional<String> accessToken() {
        return Codegen.stringProp("accessToken").config(config).get();
    }
/**
 * API Token granting privileges to Okta API.
 * 
 */
    public Optional<String> apiToken() {
        return Codegen.stringProp("apiToken").config(config).get();
    }
/**
 * Use exponential back off strategy for rate limits.
 * 
 */
    public Optional<Boolean> backoff() {
        return Codegen.booleanProp("backoff").config(config).get();
    }
/**
 * The Okta url. (Use &#39;oktapreview.com&#39; for Okta testing)
 * 
 */
    public Optional<String> baseUrl() {
        return Codegen.stringProp("baseUrl").config(config).get();
    }
/**
 * API Token granting privileges to Okta API.
 * 
 */
    public Optional<String> clientId() {
        return Codegen.stringProp("clientId").config(config).get();
    }
/**
 * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
 * 
 */
    public Optional<String> httpProxy() {
        return Codegen.stringProp("httpProxy").config(config).get();
    }
/**
 * providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
 * 
 */
    public Optional<Integer> logLevel() {
        return Codegen.integerProp("logLevel").config(config).get();
    }
/**
 * Sets what percentage of capacity the provider can use of the total rate limit capacity while making calls to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits: https://developer.okta.com/docs/reference/rl-global-mgmt/
 * 
 */
    public Optional<Integer> maxApiCapacity() {
        return Codegen.integerProp("maxApiCapacity").config(config).get();
    }
/**
 * maximum number of retries to attempt before erroring out.
 * 
 */
    public Optional<Integer> maxRetries() {
        return Codegen.integerProp("maxRetries").config(config).get();
    }
/**
 * maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
 * 
 */
    public Optional<Integer> maxWaitSeconds() {
        return Codegen.integerProp("maxWaitSeconds").config(config).get();
    }
/**
 * minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
 * 
 */
    public Optional<Integer> minWaitSeconds() {
        return Codegen.integerProp("minWaitSeconds").config(config).get();
    }
/**
 * The organization to manage in Okta.
 * 
 */
    public Optional<String> orgName() {
        return Codegen.stringProp("orgName").config(config).get();
    }
/**
 * Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of https://developer.okta.com/docs/api/getting_started/rate-limits.
 * 
 */
    public Optional<Integer> parallelism() {
        return Codegen.integerProp("parallelism").config(config).get();
    }
/**
 * API Token granting privileges to Okta API.
 * 
 */
    public Optional<String> privateKey() {
        return Codegen.stringProp("privateKey").config(config).get();
    }
/**
 * API Token Id granting privileges to Okta API.
 * 
 */
    public Optional<String> privateKeyId() {
        return Codegen.stringProp("privateKeyId").config(config).get();
    }
/**
 * Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum value can be `300`.
 * 
 */
    public Optional<Integer> requestTimeout() {
        return Codegen.integerProp("requestTimeout").config(config).get();
    }
/**
 * API Token granting privileges to Okta API.
 * 
 */
    public Optional<List<String>> scopes() {
        return Codegen.objectProp("scopes", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
}
