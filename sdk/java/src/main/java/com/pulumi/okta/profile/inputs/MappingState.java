// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.profile.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.profile.inputs.MappingMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MappingState extends com.pulumi.resources.ResourceArgs {

    public static final MappingState Empty = new MappingState();

    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * &gt; **WARNING:**: &#39;always*apply&#39; is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * **WARNING:** &#39;always*apply&#39; makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    @Import(name="alwaysApply")
    private @Nullable Output<Boolean> alwaysApply;

    /**
     * @return Whether apply the changes to all users with this profile after updating or creating the these mappings.
     * &gt; **WARNING:**: &#39;always*apply&#39; is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * **WARNING:** &#39;always*apply&#39; makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
     * 
     */
    public Optional<Output<Boolean>> alwaysApply() {
        return Optional.ofNullable(this.alwaysApply);
    }

    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     * 
     */
    @Import(name="deleteWhenAbsent")
    private @Nullable Output<Boolean> deleteWhenAbsent;

    /**
     * @return When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
     * 
     */
    public Optional<Output<Boolean>> deleteWhenAbsent() {
        return Optional.ofNullable(this.deleteWhenAbsent);
    }

    @Import(name="mappings")
    private @Nullable Output<List<MappingMappingArgs>> mappings;

    public Optional<Output<List<MappingMappingArgs>>> mappings() {
        return Optional.ofNullable(this.mappings);
    }

    /**
     * The source id of the mapping to manage.
     * 
     */
    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    /**
     * @return The source id of the mapping to manage.
     * 
     */
    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    /**
     * Name of the mapping source.
     * 
     */
    @Import(name="sourceName")
    private @Nullable Output<String> sourceName;

    /**
     * @return Name of the mapping source.
     * 
     */
    public Optional<Output<String>> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    /**
     * ID of the mapping source.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return ID of the mapping source.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The target id of the mapping to manage.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The target id of the mapping to manage.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * Name of the mapping target.
     * 
     */
    @Import(name="targetName")
    private @Nullable Output<String> targetName;

    /**
     * @return Name of the mapping target.
     * 
     */
    public Optional<Output<String>> targetName() {
        return Optional.ofNullable(this.targetName);
    }

    /**
     * ID of the mapping target.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return ID of the mapping target.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    private MappingState() {}

    private MappingState(MappingState $) {
        this.alwaysApply = $.alwaysApply;
        this.deleteWhenAbsent = $.deleteWhenAbsent;
        this.mappings = $.mappings;
        this.sourceId = $.sourceId;
        this.sourceName = $.sourceName;
        this.sourceType = $.sourceType;
        this.targetId = $.targetId;
        this.targetName = $.targetName;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MappingState $;

        public Builder() {
            $ = new MappingState();
        }

        public Builder(MappingState defaults) {
            $ = new MappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysApply Whether apply the changes to all users with this profile after updating or creating the these mappings.
         * &gt; **WARNING:**: &#39;always*apply&#39; is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
         * **WARNING:** &#39;always*apply&#39; makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApply(@Nullable Output<Boolean> alwaysApply) {
            $.alwaysApply = alwaysApply;
            return this;
        }

        /**
         * @param alwaysApply Whether apply the changes to all users with this profile after updating or creating the these mappings.
         * &gt; **WARNING:**: &#39;always*apply&#39; is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
         * **WARNING:** &#39;always*apply&#39; makes use of an internal/private Okta API endpoint that could change without notice rendering this resource inoperable.
         * 
         * @return builder
         * 
         */
        public Builder alwaysApply(Boolean alwaysApply) {
            return alwaysApply(Output.of(alwaysApply));
        }

        /**
         * @param deleteWhenAbsent When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
         * 
         * @return builder
         * 
         */
        public Builder deleteWhenAbsent(@Nullable Output<Boolean> deleteWhenAbsent) {
            $.deleteWhenAbsent = deleteWhenAbsent;
            return this;
        }

        /**
         * @param deleteWhenAbsent When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By default, we do not delete missing properties.
         * 
         * @return builder
         * 
         */
        public Builder deleteWhenAbsent(Boolean deleteWhenAbsent) {
            return deleteWhenAbsent(Output.of(deleteWhenAbsent));
        }

        public Builder mappings(@Nullable Output<List<MappingMappingArgs>> mappings) {
            $.mappings = mappings;
            return this;
        }

        public Builder mappings(List<MappingMappingArgs> mappings) {
            return mappings(Output.of(mappings));
        }

        public Builder mappings(MappingMappingArgs... mappings) {
            return mappings(List.of(mappings));
        }

        /**
         * @param sourceId The source id of the mapping to manage.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId The source id of the mapping to manage.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param sourceName Name of the mapping source.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(@Nullable Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName Name of the mapping source.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        /**
         * @param sourceType ID of the mapping source.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType ID of the mapping source.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param targetId The target id of the mapping to manage.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The target id of the mapping to manage.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetName Name of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetName(@Nullable Output<String> targetName) {
            $.targetName = targetName;
            return this;
        }

        /**
         * @param targetName Name of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetName(String targetName) {
            return targetName(Output.of(targetName));
        }

        /**
         * @param targetType ID of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType ID of the mapping target.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public MappingState build() {
            return $;
        }
    }

}
