// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.RequestV2RequesterFieldValueValueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestV2RequesterFieldValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestV2RequesterFieldValueArgs Empty = new RequestV2RequesterFieldValueArgs();

    /**
     * The ID of a requester field.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of a requester field.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A human-readable description of requester field.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return A human-readable description of requester field.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Type of value for the requester field.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of value for the requester field.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The value of requester field, which depends on the type of the field.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value of requester field, which depends on the type of the field.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<RequestV2RequesterFieldValueValueArgs>> values;

    /**
     * @return The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
     * 
     */
    public Optional<Output<List<RequestV2RequesterFieldValueValueArgs>>> values() {
        return Optional.ofNullable(this.values);
    }

    private RequestV2RequesterFieldValueArgs() {}

    private RequestV2RequesterFieldValueArgs(RequestV2RequesterFieldValueArgs $) {
        this.id = $.id;
        this.label = $.label;
        this.type = $.type;
        this.value = $.value;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestV2RequesterFieldValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestV2RequesterFieldValueArgs $;

        public Builder() {
            $ = new RequestV2RequesterFieldValueArgs();
        }

        public Builder(RequestV2RequesterFieldValueArgs defaults) {
            $ = new RequestV2RequesterFieldValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of a requester field.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of a requester field.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label A human-readable description of requester field.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A human-readable description of requester field.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param type Type of value for the requester field.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of value for the requester field.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value The value of requester field, which depends on the type of the field.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of requester field, which depends on the type of the field.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param values The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<RequestV2RequesterFieldValueValueArgs>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
         * 
         * @return builder
         * 
         */
        public Builder values(List<RequestV2RequesterFieldValueValueArgs> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
         * 
         * @return builder
         * 
         */
        public Builder values(RequestV2RequesterFieldValueValueArgs... values) {
            return values(List.of(values));
        }

        public RequestV2RequesterFieldValueArgs build() {
            return $;
        }
    }

}
