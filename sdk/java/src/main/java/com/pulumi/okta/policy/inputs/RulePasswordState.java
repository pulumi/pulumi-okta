// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulePasswordState extends com.pulumi.resources.ResourceArgs {

    public static final RulePasswordState Empty = new RulePasswordState();

    /**
     * Policy Rule Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy Rule Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     * 
     */
    @Import(name="networkConnection")
    private @Nullable Output<String> networkConnection;

    /**
     * @return Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     * 
     */
    public Optional<Output<String>> networkConnection() {
        return Optional.ofNullable(this.networkConnection);
    }

    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     * 
     */
    @Import(name="networkExcludes")
    private @Nullable Output<List<String>> networkExcludes;

    /**
     * @return Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     * 
     */
    public Optional<Output<List<String>>> networkExcludes() {
        return Optional.ofNullable(this.networkExcludes);
    }

    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     * 
     */
    @Import(name="networkIncludes")
    private @Nullable Output<List<String>> networkIncludes;

    /**
     * @return Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     * 
     */
    public Optional<Output<List<String>>> networkIncludes() {
        return Optional.ofNullable(this.networkIncludes);
    }

    /**
     * Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
     * 
     */
    @Import(name="passwordChange")
    private @Nullable Output<String> passwordChange;

    /**
     * @return Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
     * 
     */
    public Optional<Output<String>> passwordChange() {
        return Optional.ofNullable(this.passwordChange);
    }

    /**
     * Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
     * 
     */
    @Import(name="passwordReset")
    private @Nullable Output<String> passwordReset;

    /**
     * @return Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
     * 
     */
    public Optional<Output<String>> passwordReset() {
        return Optional.ofNullable(this.passwordReset);
    }

    /**
     * Allow or deny a user to unlock. Default: `DENY`
     * 
     */
    @Import(name="passwordUnlock")
    private @Nullable Output<String> passwordUnlock;

    /**
     * @return Allow or deny a user to unlock. Default: `DENY`
     * 
     */
    public Optional<Output<String>> passwordUnlock() {
        return Optional.ofNullable(this.passwordUnlock);
    }

    /**
     * Policy ID of the Rule
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return Policy ID of the Rule
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Set of User IDs to Exclude
     * 
     */
    @Import(name="usersExcludeds")
    private @Nullable Output<List<String>> usersExcludeds;

    /**
     * @return Set of User IDs to Exclude
     * 
     */
    public Optional<Output<List<String>>> usersExcludeds() {
        return Optional.ofNullable(this.usersExcludeds);
    }

    private RulePasswordState() {}

    private RulePasswordState(RulePasswordState $) {
        this.name = $.name;
        this.networkConnection = $.networkConnection;
        this.networkExcludes = $.networkExcludes;
        this.networkIncludes = $.networkIncludes;
        this.passwordChange = $.passwordChange;
        this.passwordReset = $.passwordReset;
        this.passwordUnlock = $.passwordUnlock;
        this.policyId = $.policyId;
        this.priority = $.priority;
        this.status = $.status;
        this.usersExcludeds = $.usersExcludeds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulePasswordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulePasswordState $;

        public Builder() {
            $ = new RulePasswordState();
        }

        public Builder(RulePasswordState defaults) {
            $ = new RulePasswordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Policy Rule Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy Rule Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConnection Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(@Nullable Output<String> networkConnection) {
            $.networkConnection = networkConnection;
            return this;
        }

        /**
         * @param networkConnection Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(String networkConnection) {
            return networkConnection(Output.of(networkConnection));
        }

        /**
         * @param networkExcludes Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(@Nullable Output<List<String>> networkExcludes) {
            $.networkExcludes = networkExcludes;
            return this;
        }

        /**
         * @param networkExcludes Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(List<String> networkExcludes) {
            return networkExcludes(Output.of(networkExcludes));
        }

        /**
         * @param networkExcludes Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(String... networkExcludes) {
            return networkExcludes(List.of(networkExcludes));
        }

        /**
         * @param networkIncludes Required if `network_connection` = `ZONE`. Indicates the network zones to include.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(@Nullable Output<List<String>> networkIncludes) {
            $.networkIncludes = networkIncludes;
            return this;
        }

        /**
         * @param networkIncludes Required if `network_connection` = `ZONE`. Indicates the network zones to include.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(List<String> networkIncludes) {
            return networkIncludes(Output.of(networkIncludes));
        }

        /**
         * @param networkIncludes Required if `network_connection` = `ZONE`. Indicates the network zones to include.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(String... networkIncludes) {
            return networkIncludes(List.of(networkIncludes));
        }

        /**
         * @param passwordChange Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
         * 
         * @return builder
         * 
         */
        public Builder passwordChange(@Nullable Output<String> passwordChange) {
            $.passwordChange = passwordChange;
            return this;
        }

        /**
         * @param passwordChange Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
         * 
         * @return builder
         * 
         */
        public Builder passwordChange(String passwordChange) {
            return passwordChange(Output.of(passwordChange));
        }

        /**
         * @param passwordReset Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
         * 
         * @return builder
         * 
         */
        public Builder passwordReset(@Nullable Output<String> passwordReset) {
            $.passwordReset = passwordReset;
            return this;
        }

        /**
         * @param passwordReset Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
         * 
         * @return builder
         * 
         */
        public Builder passwordReset(String passwordReset) {
            return passwordReset(Output.of(passwordReset));
        }

        /**
         * @param passwordUnlock Allow or deny a user to unlock. Default: `DENY`
         * 
         * @return builder
         * 
         */
        public Builder passwordUnlock(@Nullable Output<String> passwordUnlock) {
            $.passwordUnlock = passwordUnlock;
            return this;
        }

        /**
         * @param passwordUnlock Allow or deny a user to unlock. Default: `DENY`
         * 
         * @return builder
         * 
         */
        public Builder passwordUnlock(String passwordUnlock) {
            return passwordUnlock(Output.of(passwordUnlock));
        }

        /**
         * @param policyId Policy ID of the Rule
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId Policy ID of the Rule
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param priority Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(@Nullable Output<List<String>> usersExcludeds) {
            $.usersExcludeds = usersExcludeds;
            return this;
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(List<String> usersExcludeds) {
            return usersExcludeds(Output.of(usersExcludeds));
        }

        /**
         * @param usersExcludeds Set of User IDs to Exclude
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(String... usersExcludeds) {
            return usersExcludeds(List.of(usersExcludeds));
        }

        public RulePasswordState build() {
            return $;
        }
    }

}
