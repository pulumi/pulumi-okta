// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSamlPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSamlPlainArgs Empty = new GetSamlPlainArgs();

    /**
     * Search only ACTIVE applications.
     * 
     */
    @Import(name="activeOnly")
    private @Nullable Boolean activeOnly;

    /**
     * @return Search only ACTIVE applications.
     * 
     */
    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }

    /**
     * Id of application to retrieve, conflicts with label and label_prefix.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Id of application to retrieve, conflicts with label and label_prefix.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The label of the app to retrieve, conflicts with label_prefix and id. Label
     * 			uses the ?q=\n\n query parameter exposed by Okta&#39;s API. It should be noted that at this time
     * 			this searches both name and label. This is used to avoid paginating through all applications.
     * 
     */
    @Import(name="label")
    private @Nullable String label;

    /**
     * @return The label of the app to retrieve, conflicts with label_prefix and id. Label
     * 			uses the ?q=\n\n query parameter exposed by Okta&#39;s API. It should be noted that at this time
     * 			this searches both name and label. This is used to avoid paginating through all applications.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     * 
     */
    @Import(name="labelPrefix")
    private @Nullable String labelPrefix;

    /**
     * @return Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     * 
     */
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }

    /**
     * Denotes whether the request is compressed or not.
     * 
     */
    @Import(name="requestCompressed")
    private @Nullable Boolean requestCompressed;

    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Optional<Boolean> requestCompressed() {
        return Optional.ofNullable(this.requestCompressed);
    }

    /**
     * Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    @Import(name="skipGroups")
    private @Nullable Boolean skipGroups;

    /**
     * @return Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    @Import(name="skipUsers")
    private @Nullable Boolean skipUsers;

    /**
     * @return Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }

    private GetSamlPlainArgs() {}

    private GetSamlPlainArgs(GetSamlPlainArgs $) {
        this.activeOnly = $.activeOnly;
        this.id = $.id;
        this.label = $.label;
        this.labelPrefix = $.labelPrefix;
        this.requestCompressed = $.requestCompressed;
        this.skipGroups = $.skipGroups;
        this.skipUsers = $.skipUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSamlPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSamlPlainArgs $;

        public Builder() {
            $ = new GetSamlPlainArgs();
        }

        public Builder(GetSamlPlainArgs defaults) {
            $ = new GetSamlPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeOnly Search only ACTIVE applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(@Nullable Boolean activeOnly) {
            $.activeOnly = activeOnly;
            return this;
        }

        /**
         * @param id Id of application to retrieve, conflicts with label and label_prefix.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param label The label of the app to retrieve, conflicts with label_prefix and id. Label
         * 			uses the ?q=\n\n query parameter exposed by Okta&#39;s API. It should be noted that at this time
         * 			this searches both name and label. This is used to avoid paginating through all applications.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable String label) {
            $.label = label;
            return this;
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with label and id. This will tell the
         * 			provider to do a starts with query as opposed to an equals query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(@Nullable String labelPrefix) {
            $.labelPrefix = labelPrefix;
            return this;
        }

        /**
         * @param requestCompressed Denotes whether the request is compressed or not.
         * 
         * @return builder
         * 
         */
        public Builder requestCompressed(@Nullable Boolean requestCompressed) {
            $.requestCompressed = requestCompressed;
            return this;
        }

        /**
         * @param skipGroups Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         * @deprecated
         * Because groups has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipUsers Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         * @deprecated
         * Because users has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
        public Builder skipUsers(@Nullable Boolean skipUsers) {
            $.skipUsers = skipUsers;
            return this;
        }

        public GetSamlPlainArgs build() {
            return $;
        }
    }

}
