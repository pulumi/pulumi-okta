// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyPasswordDefaultState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyPasswordDefaultState Empty = new PolicyPasswordDefaultState();

    /**
     * Enable or disable voice call recovery: ACTIVE or INACTIVE.
     * 
     */
    @Import(name="callRecovery")
    private @Nullable Output<String> callRecovery;

    /**
     * @return Enable or disable voice call recovery: ACTIVE or INACTIVE.
     * 
     */
    public Optional<Output<String>> callRecovery() {
        return Optional.ofNullable(this.callRecovery);
    }

    /**
     * Default Authentication Provider
     * 
     */
    @Import(name="defaultAuthProvider")
    private @Nullable Output<String> defaultAuthProvider;

    /**
     * @return Default Authentication Provider
     * 
     */
    public Optional<Output<String>> defaultAuthProvider() {
        return Optional.ofNullable(this.defaultAuthProvider);
    }

    /**
     * Default group ID (always included)
     * 
     */
    @Import(name="defaultIncludedGroupId")
    private @Nullable Output<String> defaultIncludedGroupId;

    /**
     * @return Default group ID (always included)
     * 
     */
    public Optional<Output<String>> defaultIncludedGroupId() {
        return Optional.ofNullable(this.defaultIncludedGroupId);
    }

    /**
     * Default policy description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Default policy description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable or disable email password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Import(name="emailRecovery")
    private @Nullable Output<String> emailRecovery;

    /**
     * @return Enable or disable email password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Optional<Output<String>> emailRecovery() {
        return Optional.ofNullable(this.emailRecovery);
    }

    /**
     * Default policy name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Default policy name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit.
     * 
     */
    @Import(name="passwordAutoUnlockMinutes")
    private @Nullable Output<Integer> passwordAutoUnlockMinutes;

    /**
     * @return Number of minutes before a locked account is unlocked: 0 = no limit.
     * 
     */
    public Optional<Output<Integer>> passwordAutoUnlockMinutes() {
        return Optional.ofNullable(this.passwordAutoUnlockMinutes);
    }

    /**
     * Check Passwords Against Common Password Dictionary.
     * 
     */
    @Import(name="passwordDictionaryLookup")
    private @Nullable Output<Boolean> passwordDictionaryLookup;

    /**
     * @return Check Passwords Against Common Password Dictionary.
     * 
     */
    public Optional<Output<Boolean>> passwordDictionaryLookup() {
        return Optional.ofNullable(this.passwordDictionaryLookup);
    }

    /**
     * User firstName attribute must be excluded from the password
     * 
     */
    @Import(name="passwordExcludeFirstName")
    private @Nullable Output<Boolean> passwordExcludeFirstName;

    /**
     * @return User firstName attribute must be excluded from the password
     * 
     */
    public Optional<Output<Boolean>> passwordExcludeFirstName() {
        return Optional.ofNullable(this.passwordExcludeFirstName);
    }

    /**
     * User lastName attribute must be excluded from the password
     * 
     */
    @Import(name="passwordExcludeLastName")
    private @Nullable Output<Boolean> passwordExcludeLastName;

    /**
     * @return User lastName attribute must be excluded from the password
     * 
     */
    public Optional<Output<Boolean>> passwordExcludeLastName() {
        return Optional.ofNullable(this.passwordExcludeLastName);
    }

    /**
     * If the user name must be excluded from the password.
     * 
     */
    @Import(name="passwordExcludeUsername")
    private @Nullable Output<Boolean> passwordExcludeUsername;

    /**
     * @return If the user name must be excluded from the password.
     * 
     */
    public Optional<Output<Boolean>> passwordExcludeUsername() {
        return Optional.ofNullable(this.passwordExcludeUsername);
    }

    /**
     * Length in days a user will be warned before password expiry: 0 = no warning.
     * 
     */
    @Import(name="passwordExpireWarnDays")
    private @Nullable Output<Integer> passwordExpireWarnDays;

    /**
     * @return Length in days a user will be warned before password expiry: 0 = no warning.
     * 
     */
    public Optional<Output<Integer>> passwordExpireWarnDays() {
        return Optional.ofNullable(this.passwordExpireWarnDays);
    }

    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none.
     * 
     */
    @Import(name="passwordHistoryCount")
    private @Nullable Output<Integer> passwordHistoryCount;

    /**
     * @return Number of distinct passwords that must be created before they can be reused: 0 = none.
     * 
     */
    public Optional<Output<Integer>> passwordHistoryCount() {
        return Optional.ofNullable(this.passwordHistoryCount);
    }

    /**
     * Notification channels to use to notify a user when their account has been locked.
     * 
     */
    @Import(name="passwordLockoutNotificationChannels")
    private @Nullable Output<List<String>> passwordLockoutNotificationChannels;

    /**
     * @return Notification channels to use to notify a user when their account has been locked.
     * 
     */
    public Optional<Output<List<String>>> passwordLockoutNotificationChannels() {
        return Optional.ofNullable(this.passwordLockoutNotificationChannels);
    }

    /**
     * Length in days a password is valid before expiry: 0 = no limit.
     * 
     */
    @Import(name="passwordMaxAgeDays")
    private @Nullable Output<Integer> passwordMaxAgeDays;

    /**
     * @return Length in days a password is valid before expiry: 0 = no limit.
     * 
     */
    public Optional<Output<Integer>> passwordMaxAgeDays() {
        return Optional.ofNullable(this.passwordMaxAgeDays);
    }

    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
     * 
     */
    @Import(name="passwordMaxLockoutAttempts")
    private @Nullable Output<Integer> passwordMaxLockoutAttempts;

    /**
     * @return Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
     * 
     */
    public Optional<Output<Integer>> passwordMaxLockoutAttempts() {
        return Optional.ofNullable(this.passwordMaxLockoutAttempts);
    }

    /**
     * Minimum time interval in minutes between password changes: 0 = no limit.
     * 
     */
    @Import(name="passwordMinAgeMinutes")
    private @Nullable Output<Integer> passwordMinAgeMinutes;

    /**
     * @return Minimum time interval in minutes between password changes: 0 = no limit.
     * 
     */
    public Optional<Output<Integer>> passwordMinAgeMinutes() {
        return Optional.ofNullable(this.passwordMinAgeMinutes);
    }

    /**
     * Minimum password length.
     * 
     */
    @Import(name="passwordMinLength")
    private @Nullable Output<Integer> passwordMinLength;

    /**
     * @return Minimum password length.
     * 
     */
    public Optional<Output<Integer>> passwordMinLength() {
        return Optional.ofNullable(this.passwordMinLength);
    }

    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Import(name="passwordMinLowercase")
    private @Nullable Output<Integer> passwordMinLowercase;

    /**
     * @return If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Optional<Output<Integer>> passwordMinLowercase() {
        return Optional.ofNullable(this.passwordMinLowercase);
    }

    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Import(name="passwordMinNumber")
    private @Nullable Output<Integer> passwordMinNumber;

    /**
     * @return If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Optional<Output<Integer>> passwordMinNumber() {
        return Optional.ofNullable(this.passwordMinNumber);
    }

    /**
     * If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
     * 
     */
    @Import(name="passwordMinSymbol")
    private @Nullable Output<Integer> passwordMinSymbol;

    /**
     * @return If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
     * 
     */
    public Optional<Output<Integer>> passwordMinSymbol() {
        return Optional.ofNullable(this.passwordMinSymbol);
    }

    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Import(name="passwordMinUppercase")
    private @Nullable Output<Integer> passwordMinUppercase;

    /**
     * @return If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Optional<Output<Integer>> passwordMinUppercase() {
        return Optional.ofNullable(this.passwordMinUppercase);
    }

    /**
     * If a user should be informed when their account is locked.
     * 
     */
    @Import(name="passwordShowLockoutFailures")
    private @Nullable Output<Boolean> passwordShowLockoutFailures;

    /**
     * @return If a user should be informed when their account is locked.
     * 
     */
    public Optional<Output<Boolean>> passwordShowLockoutFailures() {
        return Optional.ofNullable(this.passwordShowLockoutFailures);
    }

    /**
     * Default policy priority
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Default policy priority
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Min length of the password recovery question answer.
     * 
     */
    @Import(name="questionMinLength")
    private @Nullable Output<Integer> questionMinLength;

    /**
     * @return Min length of the password recovery question answer.
     * 
     */
    public Optional<Output<Integer>> questionMinLength() {
        return Optional.ofNullable(this.questionMinLength);
    }

    /**
     * Enable or disable security question password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Import(name="questionRecovery")
    private @Nullable Output<String> questionRecovery;

    /**
     * @return Enable or disable security question password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Optional<Output<String>> questionRecovery() {
        return Optional.ofNullable(this.questionRecovery);
    }

    /**
     * Lifetime in minutes of the recovery email token.
     * 
     */
    @Import(name="recoveryEmailToken")
    private @Nullable Output<Integer> recoveryEmailToken;

    /**
     * @return Lifetime in minutes of the recovery email token.
     * 
     */
    public Optional<Output<Integer>> recoveryEmailToken() {
        return Optional.ofNullable(this.recoveryEmailToken);
    }

    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account.
     * 
     */
    @Import(name="skipUnlock")
    private @Nullable Output<Boolean> skipUnlock;

    /**
     * @return When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account.
     * 
     */
    public Optional<Output<Boolean>> skipUnlock() {
        return Optional.ofNullable(this.skipUnlock);
    }

    /**
     * Enable or disable SMS password recovery: ACTIVE or INACTIVE.
     * 
     */
    @Import(name="smsRecovery")
    private @Nullable Output<String> smsRecovery;

    /**
     * @return Enable or disable SMS password recovery: ACTIVE or INACTIVE.
     * 
     */
    public Optional<Output<String>> smsRecovery() {
        return Optional.ofNullable(this.smsRecovery);
    }

    /**
     * Default policy status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Default policy status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private PolicyPasswordDefaultState() {}

    private PolicyPasswordDefaultState(PolicyPasswordDefaultState $) {
        this.callRecovery = $.callRecovery;
        this.defaultAuthProvider = $.defaultAuthProvider;
        this.defaultIncludedGroupId = $.defaultIncludedGroupId;
        this.description = $.description;
        this.emailRecovery = $.emailRecovery;
        this.name = $.name;
        this.passwordAutoUnlockMinutes = $.passwordAutoUnlockMinutes;
        this.passwordDictionaryLookup = $.passwordDictionaryLookup;
        this.passwordExcludeFirstName = $.passwordExcludeFirstName;
        this.passwordExcludeLastName = $.passwordExcludeLastName;
        this.passwordExcludeUsername = $.passwordExcludeUsername;
        this.passwordExpireWarnDays = $.passwordExpireWarnDays;
        this.passwordHistoryCount = $.passwordHistoryCount;
        this.passwordLockoutNotificationChannels = $.passwordLockoutNotificationChannels;
        this.passwordMaxAgeDays = $.passwordMaxAgeDays;
        this.passwordMaxLockoutAttempts = $.passwordMaxLockoutAttempts;
        this.passwordMinAgeMinutes = $.passwordMinAgeMinutes;
        this.passwordMinLength = $.passwordMinLength;
        this.passwordMinLowercase = $.passwordMinLowercase;
        this.passwordMinNumber = $.passwordMinNumber;
        this.passwordMinSymbol = $.passwordMinSymbol;
        this.passwordMinUppercase = $.passwordMinUppercase;
        this.passwordShowLockoutFailures = $.passwordShowLockoutFailures;
        this.priority = $.priority;
        this.questionMinLength = $.questionMinLength;
        this.questionRecovery = $.questionRecovery;
        this.recoveryEmailToken = $.recoveryEmailToken;
        this.skipUnlock = $.skipUnlock;
        this.smsRecovery = $.smsRecovery;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyPasswordDefaultState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyPasswordDefaultState $;

        public Builder() {
            $ = new PolicyPasswordDefaultState();
        }

        public Builder(PolicyPasswordDefaultState defaults) {
            $ = new PolicyPasswordDefaultState(Objects.requireNonNull(defaults));
        }

        /**
         * @param callRecovery Enable or disable voice call recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder callRecovery(@Nullable Output<String> callRecovery) {
            $.callRecovery = callRecovery;
            return this;
        }

        /**
         * @param callRecovery Enable or disable voice call recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder callRecovery(String callRecovery) {
            return callRecovery(Output.of(callRecovery));
        }

        /**
         * @param defaultAuthProvider Default Authentication Provider
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthProvider(@Nullable Output<String> defaultAuthProvider) {
            $.defaultAuthProvider = defaultAuthProvider;
            return this;
        }

        /**
         * @param defaultAuthProvider Default Authentication Provider
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthProvider(String defaultAuthProvider) {
            return defaultAuthProvider(Output.of(defaultAuthProvider));
        }

        /**
         * @param defaultIncludedGroupId Default group ID (always included)
         * 
         * @return builder
         * 
         */
        public Builder defaultIncludedGroupId(@Nullable Output<String> defaultIncludedGroupId) {
            $.defaultIncludedGroupId = defaultIncludedGroupId;
            return this;
        }

        /**
         * @param defaultIncludedGroupId Default group ID (always included)
         * 
         * @return builder
         * 
         */
        public Builder defaultIncludedGroupId(String defaultIncludedGroupId) {
            return defaultIncludedGroupId(Output.of(defaultIncludedGroupId));
        }

        /**
         * @param description Default policy description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Default policy description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param emailRecovery Enable or disable email password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder emailRecovery(@Nullable Output<String> emailRecovery) {
            $.emailRecovery = emailRecovery;
            return this;
        }

        /**
         * @param emailRecovery Enable or disable email password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder emailRecovery(String emailRecovery) {
            return emailRecovery(Output.of(emailRecovery));
        }

        /**
         * @param name Default policy name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Default policy name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param passwordAutoUnlockMinutes Number of minutes before a locked account is unlocked: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordAutoUnlockMinutes(@Nullable Output<Integer> passwordAutoUnlockMinutes) {
            $.passwordAutoUnlockMinutes = passwordAutoUnlockMinutes;
            return this;
        }

        /**
         * @param passwordAutoUnlockMinutes Number of minutes before a locked account is unlocked: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordAutoUnlockMinutes(Integer passwordAutoUnlockMinutes) {
            return passwordAutoUnlockMinutes(Output.of(passwordAutoUnlockMinutes));
        }

        /**
         * @param passwordDictionaryLookup Check Passwords Against Common Password Dictionary.
         * 
         * @return builder
         * 
         */
        public Builder passwordDictionaryLookup(@Nullable Output<Boolean> passwordDictionaryLookup) {
            $.passwordDictionaryLookup = passwordDictionaryLookup;
            return this;
        }

        /**
         * @param passwordDictionaryLookup Check Passwords Against Common Password Dictionary.
         * 
         * @return builder
         * 
         */
        public Builder passwordDictionaryLookup(Boolean passwordDictionaryLookup) {
            return passwordDictionaryLookup(Output.of(passwordDictionaryLookup));
        }

        /**
         * @param passwordExcludeFirstName User firstName attribute must be excluded from the password
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeFirstName(@Nullable Output<Boolean> passwordExcludeFirstName) {
            $.passwordExcludeFirstName = passwordExcludeFirstName;
            return this;
        }

        /**
         * @param passwordExcludeFirstName User firstName attribute must be excluded from the password
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeFirstName(Boolean passwordExcludeFirstName) {
            return passwordExcludeFirstName(Output.of(passwordExcludeFirstName));
        }

        /**
         * @param passwordExcludeLastName User lastName attribute must be excluded from the password
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeLastName(@Nullable Output<Boolean> passwordExcludeLastName) {
            $.passwordExcludeLastName = passwordExcludeLastName;
            return this;
        }

        /**
         * @param passwordExcludeLastName User lastName attribute must be excluded from the password
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeLastName(Boolean passwordExcludeLastName) {
            return passwordExcludeLastName(Output.of(passwordExcludeLastName));
        }

        /**
         * @param passwordExcludeUsername If the user name must be excluded from the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeUsername(@Nullable Output<Boolean> passwordExcludeUsername) {
            $.passwordExcludeUsername = passwordExcludeUsername;
            return this;
        }

        /**
         * @param passwordExcludeUsername If the user name must be excluded from the password.
         * 
         * @return builder
         * 
         */
        public Builder passwordExcludeUsername(Boolean passwordExcludeUsername) {
            return passwordExcludeUsername(Output.of(passwordExcludeUsername));
        }

        /**
         * @param passwordExpireWarnDays Length in days a user will be warned before password expiry: 0 = no warning.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireWarnDays(@Nullable Output<Integer> passwordExpireWarnDays) {
            $.passwordExpireWarnDays = passwordExpireWarnDays;
            return this;
        }

        /**
         * @param passwordExpireWarnDays Length in days a user will be warned before password expiry: 0 = no warning.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireWarnDays(Integer passwordExpireWarnDays) {
            return passwordExpireWarnDays(Output.of(passwordExpireWarnDays));
        }

        /**
         * @param passwordHistoryCount Number of distinct passwords that must be created before they can be reused: 0 = none.
         * 
         * @return builder
         * 
         */
        public Builder passwordHistoryCount(@Nullable Output<Integer> passwordHistoryCount) {
            $.passwordHistoryCount = passwordHistoryCount;
            return this;
        }

        /**
         * @param passwordHistoryCount Number of distinct passwords that must be created before they can be reused: 0 = none.
         * 
         * @return builder
         * 
         */
        public Builder passwordHistoryCount(Integer passwordHistoryCount) {
            return passwordHistoryCount(Output.of(passwordHistoryCount));
        }

        /**
         * @param passwordLockoutNotificationChannels Notification channels to use to notify a user when their account has been locked.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockoutNotificationChannels(@Nullable Output<List<String>> passwordLockoutNotificationChannels) {
            $.passwordLockoutNotificationChannels = passwordLockoutNotificationChannels;
            return this;
        }

        /**
         * @param passwordLockoutNotificationChannels Notification channels to use to notify a user when their account has been locked.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockoutNotificationChannels(List<String> passwordLockoutNotificationChannels) {
            return passwordLockoutNotificationChannels(Output.of(passwordLockoutNotificationChannels));
        }

        /**
         * @param passwordLockoutNotificationChannels Notification channels to use to notify a user when their account has been locked.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockoutNotificationChannels(String... passwordLockoutNotificationChannels) {
            return passwordLockoutNotificationChannels(List.of(passwordLockoutNotificationChannels));
        }

        /**
         * @param passwordMaxAgeDays Length in days a password is valid before expiry: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxAgeDays(@Nullable Output<Integer> passwordMaxAgeDays) {
            $.passwordMaxAgeDays = passwordMaxAgeDays;
            return this;
        }

        /**
         * @param passwordMaxAgeDays Length in days a password is valid before expiry: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxAgeDays(Integer passwordMaxAgeDays) {
            return passwordMaxAgeDays(Output.of(passwordMaxAgeDays));
        }

        /**
         * @param passwordMaxLockoutAttempts Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxLockoutAttempts(@Nullable Output<Integer> passwordMaxLockoutAttempts) {
            $.passwordMaxLockoutAttempts = passwordMaxLockoutAttempts;
            return this;
        }

        /**
         * @param passwordMaxLockoutAttempts Number of unsuccessful login attempts allowed before lockout: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMaxLockoutAttempts(Integer passwordMaxLockoutAttempts) {
            return passwordMaxLockoutAttempts(Output.of(passwordMaxLockoutAttempts));
        }

        /**
         * @param passwordMinAgeMinutes Minimum time interval in minutes between password changes: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMinAgeMinutes(@Nullable Output<Integer> passwordMinAgeMinutes) {
            $.passwordMinAgeMinutes = passwordMinAgeMinutes;
            return this;
        }

        /**
         * @param passwordMinAgeMinutes Minimum time interval in minutes between password changes: 0 = no limit.
         * 
         * @return builder
         * 
         */
        public Builder passwordMinAgeMinutes(Integer passwordMinAgeMinutes) {
            return passwordMinAgeMinutes(Output.of(passwordMinAgeMinutes));
        }

        /**
         * @param passwordMinLength Minimum password length.
         * 
         * @return builder
         * 
         */
        public Builder passwordMinLength(@Nullable Output<Integer> passwordMinLength) {
            $.passwordMinLength = passwordMinLength;
            return this;
        }

        /**
         * @param passwordMinLength Minimum password length.
         * 
         * @return builder
         * 
         */
        public Builder passwordMinLength(Integer passwordMinLength) {
            return passwordMinLength(Output.of(passwordMinLength));
        }

        /**
         * @param passwordMinLowercase If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinLowercase(@Nullable Output<Integer> passwordMinLowercase) {
            $.passwordMinLowercase = passwordMinLowercase;
            return this;
        }

        /**
         * @param passwordMinLowercase If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinLowercase(Integer passwordMinLowercase) {
            return passwordMinLowercase(Output.of(passwordMinLowercase));
        }

        /**
         * @param passwordMinNumber If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinNumber(@Nullable Output<Integer> passwordMinNumber) {
            $.passwordMinNumber = passwordMinNumber;
            return this;
        }

        /**
         * @param passwordMinNumber If a password must contain at least one number: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinNumber(Integer passwordMinNumber) {
            return passwordMinNumber(Output.of(passwordMinNumber));
        }

        /**
         * @param passwordMinSymbol If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinSymbol(@Nullable Output<Integer> passwordMinSymbol) {
            $.passwordMinSymbol = passwordMinSymbol;
            return this;
        }

        /**
         * @param passwordMinSymbol If a password must contain at least one symbol (!@#$%^&amp;*): 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinSymbol(Integer passwordMinSymbol) {
            return passwordMinSymbol(Output.of(passwordMinSymbol));
        }

        /**
         * @param passwordMinUppercase If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinUppercase(@Nullable Output<Integer> passwordMinUppercase) {
            $.passwordMinUppercase = passwordMinUppercase;
            return this;
        }

        /**
         * @param passwordMinUppercase If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
         * 
         * @return builder
         * 
         */
        public Builder passwordMinUppercase(Integer passwordMinUppercase) {
            return passwordMinUppercase(Output.of(passwordMinUppercase));
        }

        /**
         * @param passwordShowLockoutFailures If a user should be informed when their account is locked.
         * 
         * @return builder
         * 
         */
        public Builder passwordShowLockoutFailures(@Nullable Output<Boolean> passwordShowLockoutFailures) {
            $.passwordShowLockoutFailures = passwordShowLockoutFailures;
            return this;
        }

        /**
         * @param passwordShowLockoutFailures If a user should be informed when their account is locked.
         * 
         * @return builder
         * 
         */
        public Builder passwordShowLockoutFailures(Boolean passwordShowLockoutFailures) {
            return passwordShowLockoutFailures(Output.of(passwordShowLockoutFailures));
        }

        /**
         * @param priority Default policy priority
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Default policy priority
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param questionMinLength Min length of the password recovery question answer.
         * 
         * @return builder
         * 
         */
        public Builder questionMinLength(@Nullable Output<Integer> questionMinLength) {
            $.questionMinLength = questionMinLength;
            return this;
        }

        /**
         * @param questionMinLength Min length of the password recovery question answer.
         * 
         * @return builder
         * 
         */
        public Builder questionMinLength(Integer questionMinLength) {
            return questionMinLength(Output.of(questionMinLength));
        }

        /**
         * @param questionRecovery Enable or disable security question password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder questionRecovery(@Nullable Output<String> questionRecovery) {
            $.questionRecovery = questionRecovery;
            return this;
        }

        /**
         * @param questionRecovery Enable or disable security question password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder questionRecovery(String questionRecovery) {
            return questionRecovery(Output.of(questionRecovery));
        }

        /**
         * @param recoveryEmailToken Lifetime in minutes of the recovery email token.
         * 
         * @return builder
         * 
         */
        public Builder recoveryEmailToken(@Nullable Output<Integer> recoveryEmailToken) {
            $.recoveryEmailToken = recoveryEmailToken;
            return this;
        }

        /**
         * @param recoveryEmailToken Lifetime in minutes of the recovery email token.
         * 
         * @return builder
         * 
         */
        public Builder recoveryEmailToken(Integer recoveryEmailToken) {
            return recoveryEmailToken(Output.of(recoveryEmailToken));
        }

        /**
         * @param skipUnlock When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account.
         * 
         * @return builder
         * 
         */
        public Builder skipUnlock(@Nullable Output<Boolean> skipUnlock) {
            $.skipUnlock = skipUnlock;
            return this;
        }

        /**
         * @param skipUnlock When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account.
         * 
         * @return builder
         * 
         */
        public Builder skipUnlock(Boolean skipUnlock) {
            return skipUnlock(Output.of(skipUnlock));
        }

        /**
         * @param smsRecovery Enable or disable SMS password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder smsRecovery(@Nullable Output<String> smsRecovery) {
            $.smsRecovery = smsRecovery;
            return this;
        }

        /**
         * @param smsRecovery Enable or disable SMS password recovery: ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder smsRecovery(String smsRecovery) {
            return smsRecovery(Output.of(smsRecovery));
        }

        /**
         * @param status Default policy status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Default policy status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public PolicyPasswordDefaultState build() {
            return $;
        }
    }

}
