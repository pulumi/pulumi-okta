// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetDeviceAssurancePolicyDiskEncryptionType;
import com.pulumi.okta.outputs.GetDeviceAssurancePolicyOsVersion;
import com.pulumi.okta.outputs.GetDeviceAssurancePolicyOsVersionConstraint;
import com.pulumi.okta.outputs.GetDeviceAssurancePolicyScreenlockType;
import com.pulumi.okta.outputs.GetDeviceAssurancePolicyThirdPartySignalProvider;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDeviceAssurancePolicyResult {
    /**
     * @return List of disk encryption type, can be `FULL`, `USER`
     * 
     */
    private GetDeviceAssurancePolicyDiskEncryptionType diskEncryptionType;
    /**
     * @return ID of the user type to retrieve, conflicts with `name`.
     * 
     */
    private @Nullable String id;
    /**
     * @return Is the device jailbroken in the device assurance policy.
     * 
     */
    private Boolean jailbreak;
    /**
     * @return Name of user type to retrieve, conflicts with `id`.
     * 
     */
    private @Nullable String name;
    /**
     * @return Minimum os version of the device in the device assurance policy.
     * 
     */
    private GetDeviceAssurancePolicyOsVersion osVersion;
    /**
     * @return The list of os version constraints.
     * 
     */
    private List<GetDeviceAssurancePolicyOsVersionConstraint> osVersionConstraints;
    /**
     * @return Policy device assurance platform
     * 
     */
    private String platform;
    /**
     * @return List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     * 
     */
    private GetDeviceAssurancePolicyScreenlockType screenlockType;
    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    private @Nullable Boolean secureHardwarePresent;
    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    private @Nullable GetDeviceAssurancePolicyThirdPartySignalProvider thirdPartySignalProvider;

    private GetDeviceAssurancePolicyResult() {}
    /**
     * @return List of disk encryption type, can be `FULL`, `USER`
     * 
     */
    public GetDeviceAssurancePolicyDiskEncryptionType diskEncryptionType() {
        return this.diskEncryptionType;
    }
    /**
     * @return ID of the user type to retrieve, conflicts with `name`.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Is the device jailbroken in the device assurance policy.
     * 
     */
    public Boolean jailbreak() {
        return this.jailbreak;
    }
    /**
     * @return Name of user type to retrieve, conflicts with `id`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Minimum os version of the device in the device assurance policy.
     * 
     */
    public GetDeviceAssurancePolicyOsVersion osVersion() {
        return this.osVersion;
    }
    /**
     * @return The list of os version constraints.
     * 
     */
    public List<GetDeviceAssurancePolicyOsVersionConstraint> osVersionConstraints() {
        return this.osVersionConstraints;
    }
    /**
     * @return Policy device assurance platform
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     * 
     */
    public GetDeviceAssurancePolicyScreenlockType screenlockType() {
        return this.screenlockType;
    }
    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    public Optional<Boolean> secureHardwarePresent() {
        return Optional.ofNullable(this.secureHardwarePresent);
    }
    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    public Optional<GetDeviceAssurancePolicyThirdPartySignalProvider> thirdPartySignalProvider() {
        return Optional.ofNullable(this.thirdPartySignalProvider);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceAssurancePolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetDeviceAssurancePolicyDiskEncryptionType diskEncryptionType;
        private @Nullable String id;
        private Boolean jailbreak;
        private @Nullable String name;
        private GetDeviceAssurancePolicyOsVersion osVersion;
        private List<GetDeviceAssurancePolicyOsVersionConstraint> osVersionConstraints;
        private String platform;
        private GetDeviceAssurancePolicyScreenlockType screenlockType;
        private @Nullable Boolean secureHardwarePresent;
        private @Nullable GetDeviceAssurancePolicyThirdPartySignalProvider thirdPartySignalProvider;
        public Builder() {}
        public Builder(GetDeviceAssurancePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionType = defaults.diskEncryptionType;
    	      this.id = defaults.id;
    	      this.jailbreak = defaults.jailbreak;
    	      this.name = defaults.name;
    	      this.osVersion = defaults.osVersion;
    	      this.osVersionConstraints = defaults.osVersionConstraints;
    	      this.platform = defaults.platform;
    	      this.screenlockType = defaults.screenlockType;
    	      this.secureHardwarePresent = defaults.secureHardwarePresent;
    	      this.thirdPartySignalProvider = defaults.thirdPartySignalProvider;
        }

        @CustomType.Setter
        public Builder diskEncryptionType(GetDeviceAssurancePolicyDiskEncryptionType diskEncryptionType) {
            if (diskEncryptionType == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "diskEncryptionType");
            }
            this.diskEncryptionType = diskEncryptionType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jailbreak(Boolean jailbreak) {
            if (jailbreak == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "jailbreak");
            }
            this.jailbreak = jailbreak;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(GetDeviceAssurancePolicyOsVersion osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osVersionConstraints(List<GetDeviceAssurancePolicyOsVersionConstraint> osVersionConstraints) {
            if (osVersionConstraints == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "osVersionConstraints");
            }
            this.osVersionConstraints = osVersionConstraints;
            return this;
        }
        public Builder osVersionConstraints(GetDeviceAssurancePolicyOsVersionConstraint... osVersionConstraints) {
            return osVersionConstraints(List.of(osVersionConstraints));
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder screenlockType(GetDeviceAssurancePolicyScreenlockType screenlockType) {
            if (screenlockType == null) {
              throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyResult", "screenlockType");
            }
            this.screenlockType = screenlockType;
            return this;
        }
        @CustomType.Setter
        public Builder secureHardwarePresent(@Nullable Boolean secureHardwarePresent) {

            this.secureHardwarePresent = secureHardwarePresent;
            return this;
        }
        @CustomType.Setter
        public Builder thirdPartySignalProvider(@Nullable GetDeviceAssurancePolicyThirdPartySignalProvider thirdPartySignalProvider) {

            this.thirdPartySignalProvider = thirdPartySignalProvider;
            return this;
        }
        public GetDeviceAssurancePolicyResult build() {
            final var _resultValue = new GetDeviceAssurancePolicyResult();
            _resultValue.diskEncryptionType = diskEncryptionType;
            _resultValue.id = id;
            _resultValue.jailbreak = jailbreak;
            _resultValue.name = name;
            _resultValue.osVersion = osVersion;
            _resultValue.osVersionConstraints = osVersionConstraints;
            _resultValue.platform = platform;
            _resultValue.screenlockType = screenlockType;
            _resultValue.secureHardwarePresent = secureHardwarePresent;
            _resultValue.thirdPartySignalProvider = thirdPartySignalProvider;
            return _resultValue;
        }
    }
}
