// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.okta.outputs.RequestV2RequesterFieldValueValue;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RequestV2RequesterFieldValue {
    /**
     * @return Request condition id.
     * 
     */
    private @Nullable String id;
    /**
     * @return A human-readable description of requester field.
     * 
     */
    private @Nullable String label;
    /**
     * @return Type of value for the requester field.
     * 
     */
    private @Nullable String type;
    /**
     * @return The value of requester field, which depends on the type of the field.
     * 
     */
    private @Nullable String value;
    /**
     * @return The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
     * 
     */
    private @Nullable List<RequestV2RequesterFieldValueValue> values;

    private RequestV2RequesterFieldValue() {}
    /**
     * @return Request condition id.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A human-readable description of requester field.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return Type of value for the requester field.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The value of requester field, which depends on the type of the field.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return The values of requester field with the type MULTISELECT. If the field type is MULTISELECT, this property is required.
     * 
     */
    public List<RequestV2RequesterFieldValueValue> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequestV2RequesterFieldValue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable String label;
        private @Nullable String type;
        private @Nullable String value;
        private @Nullable List<RequestV2RequesterFieldValueValue> values;
        public Builder() {}
        public Builder(RequestV2RequesterFieldValue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {

            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<RequestV2RequesterFieldValueValue> values) {

            this.values = values;
            return this;
        }
        public Builder values(RequestV2RequesterFieldValueValue... values) {
            return values(List.of(values));
        }
        public RequestV2RequesterFieldValue build() {
            final var _resultValue = new RequestV2RequesterFieldValue();
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.type = type;
            _resultValue.value = value;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
