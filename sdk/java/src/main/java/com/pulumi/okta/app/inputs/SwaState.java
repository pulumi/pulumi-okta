// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwaState extends com.pulumi.resources.ResourceArgs {

    public static final SwaState Empty = new SwaState();

    /**
     * Custom error page URL
     * 
     */
    @Import(name="accessibilityErrorRedirectUrl")
    private @Nullable Output<String> accessibilityErrorRedirectUrl;

    /**
     * @return Custom error page URL
     * 
     */
    public Optional<Output<String>> accessibilityErrorRedirectUrl() {
        return Optional.ofNullable(this.accessibilityErrorRedirectUrl);
    }

    /**
     * Custom login page URL
     * 
     */
    @Import(name="accessibilityLoginRedirectUrl")
    private @Nullable Output<String> accessibilityLoginRedirectUrl;

    /**
     * @return Custom login page URL
     * 
     */
    public Optional<Output<String>> accessibilityLoginRedirectUrl() {
        return Optional.ofNullable(this.accessibilityLoginRedirectUrl);
    }

    /**
     * Enable self service. Default is `false`
     * 
     */
    @Import(name="accessibilitySelfService")
    private @Nullable Output<Boolean> accessibilitySelfService;

    /**
     * @return Enable self service. Default is `false`
     * 
     */
    public Optional<Output<Boolean>> accessibilitySelfService() {
        return Optional.ofNullable(this.accessibilitySelfService);
    }

    /**
     * Application notes for admins.
     * 
     */
    @Import(name="adminNote")
    private @Nullable Output<String> adminNote;

    /**
     * @return Application notes for admins.
     * 
     */
    public Optional<Output<String>> adminNote() {
        return Optional.ofNullable(this.adminNote);
    }

    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    @Import(name="appLinksJson")
    private @Nullable Output<String> appLinksJson;

    /**
     * @return Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    public Optional<Output<String>> appLinksJson() {
        return Optional.ofNullable(this.appLinksJson);
    }

    /**
     * Display auto submit toolbar
     * 
     */
    @Import(name="autoSubmitToolbar")
    private @Nullable Output<Boolean> autoSubmitToolbar;

    /**
     * @return Display auto submit toolbar
     * 
     */
    public Optional<Output<Boolean>> autoSubmitToolbar() {
        return Optional.ofNullable(this.autoSubmitToolbar);
    }

    /**
     * Login button field
     * 
     */
    @Import(name="buttonField")
    private @Nullable Output<String> buttonField;

    /**
     * @return Login button field
     * 
     */
    public Optional<Output<String>> buttonField() {
        return Optional.ofNullable(this.buttonField);
    }

    /**
     * CSS selector for the checkbox
     * 
     */
    @Import(name="checkbox")
    private @Nullable Output<String> checkbox;

    /**
     * @return CSS selector for the checkbox
     * 
     */
    public Optional<Output<String>> checkbox() {
        return Optional.ofNullable(this.checkbox);
    }

    /**
     * Application notes for end users.
     * 
     */
    @Import(name="enduserNote")
    private @Nullable Output<String> enduserNote;

    /**
     * @return Application notes for end users.
     * 
     */
    public Optional<Output<String>> enduserNote() {
        return Optional.ofNullable(this.enduserNote);
    }

    /**
     * Do not display application icon on mobile app
     * 
     */
    @Import(name="hideIos")
    private @Nullable Output<Boolean> hideIos;

    /**
     * @return Do not display application icon on mobile app
     * 
     */
    public Optional<Output<Boolean>> hideIos() {
        return Optional.ofNullable(this.hideIos);
    }

    /**
     * Do not display application icon to users
     * 
     */
    @Import(name="hideWeb")
    private @Nullable Output<Boolean> hideWeb;

    /**
     * @return Do not display application icon to users
     * 
     */
    public Optional<Output<Boolean>> hideWeb() {
        return Optional.ofNullable(this.hideWeb);
    }

    /**
     * The Application&#39;s display name.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The Application&#39;s display name.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * URL of the application&#39;s logo
     * 
     */
    @Import(name="logoUrl")
    private @Nullable Output<String> logoUrl;

    /**
     * @return URL of the application&#39;s logo
     * 
     */
    public Optional<Output<String>> logoUrl() {
        return Optional.ofNullable(this.logoUrl);
    }

    /**
     * Name of the app.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the app.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Login password field
     * 
     */
    @Import(name="passwordField")
    private @Nullable Output<String> passwordField;

    /**
     * @return Login password field
     * 
     */
    public Optional<Output<String>> passwordField() {
        return Optional.ofNullable(this.passwordField);
    }

    /**
     * Preconfigured app name
     * 
     */
    @Import(name="preconfiguredApp")
    private @Nullable Output<String> preconfiguredApp;

    /**
     * @return Preconfigured app name
     * 
     */
    public Optional<Output<String>> preconfiguredApp() {
        return Optional.ofNullable(this.preconfiguredApp);
    }

    /**
     * If going to the login page URL redirects to another page, then enter that URL here
     * 
     */
    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    /**
     * @return If going to the login page URL redirects to another page, then enter that URL here
     * 
     */
    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    /**
     * Sign on mode of application.
     * 
     */
    @Import(name="signOnMode")
    private @Nullable Output<String> signOnMode;

    /**
     * @return Sign on mode of application.
     * 
     */
    public Optional<Output<String>> signOnMode() {
        return Optional.ofNullable(this.signOnMode);
    }

    /**
     * Status of application. By default, it is `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of application. By default, it is `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Login URL
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return Login URL
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * A regex that further restricts URL to the specified regex
     * 
     */
    @Import(name="urlRegex")
    private @Nullable Output<String> urlRegex;

    /**
     * @return A regex that further restricts URL to the specified regex
     * 
     */
    public Optional<Output<String>> urlRegex() {
        return Optional.ofNullable(this.urlRegex);
    }

    /**
     * Username template. Default: `${source.login}`
     * 
     */
    @Import(name="userNameTemplate")
    private @Nullable Output<String> userNameTemplate;

    /**
     * @return Username template. Default: `${source.login}`
     * 
     */
    public Optional<Output<String>> userNameTemplate() {
        return Optional.ofNullable(this.userNameTemplate);
    }

    /**
     * Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    @Import(name="userNameTemplatePushStatus")
    private @Nullable Output<String> userNameTemplatePushStatus;

    /**
     * @return Push username on update. Valid values: `PUSH` and `DONT_PUSH`
     * 
     */
    public Optional<Output<String>> userNameTemplatePushStatus() {
        return Optional.ofNullable(this.userNameTemplatePushStatus);
    }

    /**
     * Username template suffix
     * 
     */
    @Import(name="userNameTemplateSuffix")
    private @Nullable Output<String> userNameTemplateSuffix;

    /**
     * @return Username template suffix
     * 
     */
    public Optional<Output<String>> userNameTemplateSuffix() {
        return Optional.ofNullable(this.userNameTemplateSuffix);
    }

    /**
     * Username template type. Default: `BUILT_IN`
     * 
     */
    @Import(name="userNameTemplateType")
    private @Nullable Output<String> userNameTemplateType;

    /**
     * @return Username template type. Default: `BUILT_IN`
     * 
     */
    public Optional<Output<String>> userNameTemplateType() {
        return Optional.ofNullable(this.userNameTemplateType);
    }

    /**
     * Login username field
     * 
     */
    @Import(name="usernameField")
    private @Nullable Output<String> usernameField;

    /**
     * @return Login username field
     * 
     */
    public Optional<Output<String>> usernameField() {
        return Optional.ofNullable(this.usernameField);
    }

    private SwaState() {}

    private SwaState(SwaState $) {
        this.accessibilityErrorRedirectUrl = $.accessibilityErrorRedirectUrl;
        this.accessibilityLoginRedirectUrl = $.accessibilityLoginRedirectUrl;
        this.accessibilitySelfService = $.accessibilitySelfService;
        this.adminNote = $.adminNote;
        this.appLinksJson = $.appLinksJson;
        this.autoSubmitToolbar = $.autoSubmitToolbar;
        this.buttonField = $.buttonField;
        this.checkbox = $.checkbox;
        this.enduserNote = $.enduserNote;
        this.hideIos = $.hideIos;
        this.hideWeb = $.hideWeb;
        this.label = $.label;
        this.logo = $.logo;
        this.logoUrl = $.logoUrl;
        this.name = $.name;
        this.passwordField = $.passwordField;
        this.preconfiguredApp = $.preconfiguredApp;
        this.redirectUrl = $.redirectUrl;
        this.signOnMode = $.signOnMode;
        this.status = $.status;
        this.url = $.url;
        this.urlRegex = $.urlRegex;
        this.userNameTemplate = $.userNameTemplate;
        this.userNameTemplatePushStatus = $.userNameTemplatePushStatus;
        this.userNameTemplateSuffix = $.userNameTemplateSuffix;
        this.userNameTemplateType = $.userNameTemplateType;
        this.usernameField = $.usernameField;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwaState $;

        public Builder() {
            $ = new SwaState();
        }

        public Builder(SwaState defaults) {
            $ = new SwaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(@Nullable Output<String> accessibilityErrorRedirectUrl) {
            $.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            return accessibilityErrorRedirectUrl(Output.of(accessibilityErrorRedirectUrl));
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(@Nullable Output<String> accessibilityLoginRedirectUrl) {
            $.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            return accessibilityLoginRedirectUrl(Output.of(accessibilityLoginRedirectUrl));
        }

        /**
         * @param accessibilitySelfService Enable self service. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(@Nullable Output<Boolean> accessibilitySelfService) {
            $.accessibilitySelfService = accessibilitySelfService;
            return this;
        }

        /**
         * @param accessibilitySelfService Enable self service. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            return accessibilitySelfService(Output.of(accessibilitySelfService));
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(@Nullable Output<String> adminNote) {
            $.adminNote = adminNote;
            return this;
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(String adminNote) {
            return adminNote(Output.of(adminNote));
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(@Nullable Output<String> appLinksJson) {
            $.appLinksJson = appLinksJson;
            return this;
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(String appLinksJson) {
            return appLinksJson(Output.of(appLinksJson));
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(@Nullable Output<Boolean> autoSubmitToolbar) {
            $.autoSubmitToolbar = autoSubmitToolbar;
            return this;
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            return autoSubmitToolbar(Output.of(autoSubmitToolbar));
        }

        /**
         * @param buttonField Login button field
         * 
         * @return builder
         * 
         */
        public Builder buttonField(@Nullable Output<String> buttonField) {
            $.buttonField = buttonField;
            return this;
        }

        /**
         * @param buttonField Login button field
         * 
         * @return builder
         * 
         */
        public Builder buttonField(String buttonField) {
            return buttonField(Output.of(buttonField));
        }

        /**
         * @param checkbox CSS selector for the checkbox
         * 
         * @return builder
         * 
         */
        public Builder checkbox(@Nullable Output<String> checkbox) {
            $.checkbox = checkbox;
            return this;
        }

        /**
         * @param checkbox CSS selector for the checkbox
         * 
         * @return builder
         * 
         */
        public Builder checkbox(String checkbox) {
            return checkbox(Output.of(checkbox));
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(@Nullable Output<String> enduserNote) {
            $.enduserNote = enduserNote;
            return this;
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(String enduserNote) {
            return enduserNote(Output.of(enduserNote));
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(@Nullable Output<Boolean> hideIos) {
            $.hideIos = hideIos;
            return this;
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(Boolean hideIos) {
            return hideIos(Output.of(hideIos));
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(@Nullable Output<Boolean> hideWeb) {
            $.hideWeb = hideWeb;
            return this;
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(Boolean hideWeb) {
            return hideWeb(Output.of(hideWeb));
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param logo Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Local file path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param logoUrl URL of the application&#39;s logo
         * 
         * @return builder
         * 
         */
        public Builder logoUrl(@Nullable Output<String> logoUrl) {
            $.logoUrl = logoUrl;
            return this;
        }

        /**
         * @param logoUrl URL of the application&#39;s logo
         * 
         * @return builder
         * 
         */
        public Builder logoUrl(String logoUrl) {
            return logoUrl(Output.of(logoUrl));
        }

        /**
         * @param name Name of the app.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the app.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param passwordField Login password field
         * 
         * @return builder
         * 
         */
        public Builder passwordField(@Nullable Output<String> passwordField) {
            $.passwordField = passwordField;
            return this;
        }

        /**
         * @param passwordField Login password field
         * 
         * @return builder
         * 
         */
        public Builder passwordField(String passwordField) {
            return passwordField(Output.of(passwordField));
        }

        /**
         * @param preconfiguredApp Preconfigured app name
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(@Nullable Output<String> preconfiguredApp) {
            $.preconfiguredApp = preconfiguredApp;
            return this;
        }

        /**
         * @param preconfiguredApp Preconfigured app name
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(String preconfiguredApp) {
            return preconfiguredApp(Output.of(preconfiguredApp));
        }

        /**
         * @param redirectUrl If going to the login page URL redirects to another page, then enter that URL here
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl If going to the login page URL redirects to another page, then enter that URL here
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param signOnMode Sign on mode of application.
         * 
         * @return builder
         * 
         */
        public Builder signOnMode(@Nullable Output<String> signOnMode) {
            $.signOnMode = signOnMode;
            return this;
        }

        /**
         * @param signOnMode Sign on mode of application.
         * 
         * @return builder
         * 
         */
        public Builder signOnMode(String signOnMode) {
            return signOnMode(Output.of(signOnMode));
        }

        /**
         * @param status Status of application. By default, it is `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of application. By default, it is `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url Login URL
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Login URL
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param urlRegex A regex that further restricts URL to the specified regex
         * 
         * @return builder
         * 
         */
        public Builder urlRegex(@Nullable Output<String> urlRegex) {
            $.urlRegex = urlRegex;
            return this;
        }

        /**
         * @param urlRegex A regex that further restricts URL to the specified regex
         * 
         * @return builder
         * 
         */
        public Builder urlRegex(String urlRegex) {
            return urlRegex(Output.of(urlRegex));
        }

        /**
         * @param userNameTemplate Username template. Default: `${source.login}`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(@Nullable Output<String> userNameTemplate) {
            $.userNameTemplate = userNameTemplate;
            return this;
        }

        /**
         * @param userNameTemplate Username template. Default: `${source.login}`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(String userNameTemplate) {
            return userNameTemplate(Output.of(userNameTemplate));
        }

        /**
         * @param userNameTemplatePushStatus Push username on update. Valid values: `PUSH` and `DONT_PUSH`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(@Nullable Output<String> userNameTemplatePushStatus) {
            $.userNameTemplatePushStatus = userNameTemplatePushStatus;
            return this;
        }

        /**
         * @param userNameTemplatePushStatus Push username on update. Valid values: `PUSH` and `DONT_PUSH`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(String userNameTemplatePushStatus) {
            return userNameTemplatePushStatus(Output.of(userNameTemplatePushStatus));
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(@Nullable Output<String> userNameTemplateSuffix) {
            $.userNameTemplateSuffix = userNameTemplateSuffix;
            return this;
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(String userNameTemplateSuffix) {
            return userNameTemplateSuffix(Output.of(userNameTemplateSuffix));
        }

        /**
         * @param userNameTemplateType Username template type. Default: `BUILT_IN`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(@Nullable Output<String> userNameTemplateType) {
            $.userNameTemplateType = userNameTemplateType;
            return this;
        }

        /**
         * @param userNameTemplateType Username template type. Default: `BUILT_IN`
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(String userNameTemplateType) {
            return userNameTemplateType(Output.of(userNameTemplateType));
        }

        /**
         * @param usernameField Login username field
         * 
         * @return builder
         * 
         */
        public Builder usernameField(@Nullable Output<String> usernameField) {
            $.usernameField = usernameField;
            return this;
        }

        /**
         * @param usernameField Login username field
         * 
         * @return builder
         * 
         */
        public Builder usernameField(String usernameField) {
            return usernameField(Output.of(usernameField));
        }

        public SwaState build() {
            return $;
        }
    }

}
