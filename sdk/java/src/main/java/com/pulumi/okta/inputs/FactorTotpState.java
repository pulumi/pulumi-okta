// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FactorTotpState extends com.pulumi.resources.ResourceArgs {

    public static final FactorTotpState Empty = new FactorTotpState();

    /**
     * Clock drift interval. This setting allows you to build in tolerance for any
     * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
     * 
     */
    @Import(name="clockDriftInterval")
    private @Nullable Output<Integer> clockDriftInterval;

    /**
     * @return Clock drift interval. This setting allows you to build in tolerance for any
     * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
     * 
     */
    public Optional<Output<Integer>> clockDriftInterval() {
        return Optional.ofNullable(this.clockDriftInterval);
    }

    /**
     * HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
     * is `&#34;HMacSHA512&#34;`.
     * 
     */
    @Import(name="hmacAlgorithm")
    private @Nullable Output<String> hmacAlgorithm;

    /**
     * @return HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
     * is `&#34;HMacSHA512&#34;`.
     * 
     */
    public Optional<Output<String>> hmacAlgorithm() {
        return Optional.ofNullable(this.hmacAlgorithm);
    }

    /**
     * The TOTP name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The TOTP name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Length of the password. Default is `6`.
     * 
     */
    @Import(name="otpLength")
    private @Nullable Output<Integer> otpLength;

    /**
     * @return Length of the password. Default is `6`.
     * 
     */
    public Optional<Output<Integer>> otpLength() {
        return Optional.ofNullable(this.otpLength);
    }

    /**
     * Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
     * Default is `&#34;base32&#34;`.
     * 
     */
    @Import(name="sharedSecretEncoding")
    private @Nullable Output<String> sharedSecretEncoding;

    /**
     * @return Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
     * Default is `&#34;base32&#34;`.
     * 
     */
    public Optional<Output<String>> sharedSecretEncoding() {
        return Optional.ofNullable(this.sharedSecretEncoding);
    }

    /**
     * Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
     * 
     */
    @Import(name="timeStep")
    private @Nullable Output<Integer> timeStep;

    /**
     * @return Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
     * 
     */
    public Optional<Output<Integer>> timeStep() {
        return Optional.ofNullable(this.timeStep);
    }

    private FactorTotpState() {}

    private FactorTotpState(FactorTotpState $) {
        this.clockDriftInterval = $.clockDriftInterval;
        this.hmacAlgorithm = $.hmacAlgorithm;
        this.name = $.name;
        this.otpLength = $.otpLength;
        this.sharedSecretEncoding = $.sharedSecretEncoding;
        this.timeStep = $.timeStep;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FactorTotpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FactorTotpState $;

        public Builder() {
            $ = new FactorTotpState();
        }

        public Builder(FactorTotpState defaults) {
            $ = new FactorTotpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clockDriftInterval Clock drift interval. This setting allows you to build in tolerance for any
         * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
         * 
         * @return builder
         * 
         */
        public Builder clockDriftInterval(@Nullable Output<Integer> clockDriftInterval) {
            $.clockDriftInterval = clockDriftInterval;
            return this;
        }

        /**
         * @param clockDriftInterval Clock drift interval. This setting allows you to build in tolerance for any
         * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
         * 
         * @return builder
         * 
         */
        public Builder clockDriftInterval(Integer clockDriftInterval) {
            return clockDriftInterval(Output.of(clockDriftInterval));
        }

        /**
         * @param hmacAlgorithm HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
         * is `&#34;HMacSHA512&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder hmacAlgorithm(@Nullable Output<String> hmacAlgorithm) {
            $.hmacAlgorithm = hmacAlgorithm;
            return this;
        }

        /**
         * @param hmacAlgorithm HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
         * is `&#34;HMacSHA512&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder hmacAlgorithm(String hmacAlgorithm) {
            return hmacAlgorithm(Output.of(hmacAlgorithm));
        }

        /**
         * @param name The TOTP name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The TOTP name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param otpLength Length of the password. Default is `6`.
         * 
         * @return builder
         * 
         */
        public Builder otpLength(@Nullable Output<Integer> otpLength) {
            $.otpLength = otpLength;
            return this;
        }

        /**
         * @param otpLength Length of the password. Default is `6`.
         * 
         * @return builder
         * 
         */
        public Builder otpLength(Integer otpLength) {
            return otpLength(Output.of(otpLength));
        }

        /**
         * @param sharedSecretEncoding Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
         * Default is `&#34;base32&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecretEncoding(@Nullable Output<String> sharedSecretEncoding) {
            $.sharedSecretEncoding = sharedSecretEncoding;
            return this;
        }

        /**
         * @param sharedSecretEncoding Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
         * Default is `&#34;base32&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecretEncoding(String sharedSecretEncoding) {
            return sharedSecretEncoding(Output.of(sharedSecretEncoding));
        }

        /**
         * @param timeStep Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
         * 
         * @return builder
         * 
         */
        public Builder timeStep(@Nullable Output<Integer> timeStep) {
            $.timeStep = timeStep;
            return this;
        }

        /**
         * @param timeStep Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
         * 
         * @return builder
         * 
         */
        public Builder timeStep(Integer timeStep) {
            return timeStep(Output.of(timeStep));
        }

        public FactorTotpState build() {
            return $;
        }
    }

}
