// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlAttributeStatementArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlAttributeStatementArgs Empty = new SamlAttributeStatementArgs();

    /**
     * Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
     * 
     */
    @Import(name="filterType")
    private @Nullable Output<String> filterType;

    /**
     * @return Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
     * 
     */
    public Optional<Output<String>> filterType() {
        return Optional.ofNullable(this.filterType);
    }

    /**
     * Filter value to use.
     * 
     */
    @Import(name="filterValue")
    private @Nullable Output<String> filterValue;

    /**
     * @return Filter value to use.
     * 
     */
    public Optional<Output<String>> filterValue() {
        return Optional.ofNullable(this.filterValue);
    }

    /**
     * The name of the attribute statement.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the attribute statement.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Array of values to use.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return Array of values to use.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private SamlAttributeStatementArgs() {}

    private SamlAttributeStatementArgs(SamlAttributeStatementArgs $) {
        this.filterType = $.filterType;
        this.filterValue = $.filterValue;
        this.name = $.name;
        this.namespace = $.namespace;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlAttributeStatementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlAttributeStatementArgs $;

        public Builder() {
            $ = new SamlAttributeStatementArgs();
        }

        public Builder(SamlAttributeStatementArgs defaults) {
            $ = new SamlAttributeStatementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterType Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
         * 
         * @return builder
         * 
         */
        public Builder filterType(@Nullable Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        /**
         * @param filterType Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
         * 
         * @return builder
         * 
         */
        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        /**
         * @param filterValue Filter value to use.
         * 
         * @return builder
         * 
         */
        public Builder filterValue(@Nullable Output<String> filterValue) {
            $.filterValue = filterValue;
            return this;
        }

        /**
         * @param filterValue Filter value to use.
         * 
         * @return builder
         * 
         */
        public Builder filterValue(String filterValue) {
            return filterValue(Output.of(filterValue));
        }

        /**
         * @param name The name of the attribute statement.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute statement.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param type The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param values Array of values to use.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Array of values to use.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values Array of values to use.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public SamlAttributeStatementArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
