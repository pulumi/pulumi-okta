// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEmailSmtpServerResult {
    /**
     * @return Human-readable name for SMTP server
     * 
     */
    private String alias;
    /**
     * @return If true, routes all email traffic through the SMTP server.
     * 
     */
    private Boolean enabled;
    /**
     * @return Hostname or IP address of the SMTP server
     * 
     */
    private String host;
    /**
     * @return ID of your SMTP server
     * 
     */
    private String id;
    /**
     * @return The port number of the SMTP server
     * 
     */
    private Integer port;
    /**
     * @return Username used to access the SMTP server
     * 
     */
    private String username;

    private GetEmailSmtpServerResult() {}
    /**
     * @return Human-readable name for SMTP server
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return If true, routes all email traffic through the SMTP server.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Hostname or IP address of the SMTP server
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return ID of your SMTP server
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The port number of the SMTP server
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Username used to access the SMTP server
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEmailSmtpServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alias;
        private Boolean enabled;
        private String host;
        private String id;
        private Integer port;
        private String username;
        public Builder() {}
        public Builder(GetEmailSmtpServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.enabled = defaults.enabled;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.port = defaults.port;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder alias(String alias) {
            if (alias == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "alias");
            }
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetEmailSmtpServerResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetEmailSmtpServerResult build() {
            final var _resultValue = new GetEmailSmtpServerResult();
            _resultValue.alias = alias;
            _resultValue.enabled = enabled;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.port = port;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
