// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.profile.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MappingMapping {
    /**
     * @return Combination or single source properties that will be mapped to the target property.
     * 
     */
    private final String expression;
    /**
     * @return Key of mapping.
     * 
     */
    private final String id;
    /**
     * @return Whether to update target properties on user create &amp; update or just on create.
     * 
     */
    private final @Nullable String pushStatus;

    @CustomType.Constructor
    private MappingMapping(
        @CustomType.Parameter("expression") String expression,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("pushStatus") @Nullable String pushStatus) {
        this.expression = expression;
        this.id = id;
        this.pushStatus = pushStatus;
    }

    /**
     * @return Combination or single source properties that will be mapped to the target property.
     * 
     */
    public String expression() {
        return this.expression;
    }
    /**
     * @return Key of mapping.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to update target properties on user create &amp; update or just on create.
     * 
     */
    public Optional<String> pushStatus() {
        return Optional.ofNullable(this.pushStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MappingMapping defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String expression;
        private String id;
        private @Nullable String pushStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(MappingMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expression = defaults.expression;
    	      this.id = defaults.id;
    	      this.pushStatus = defaults.pushStatus;
        }

        public Builder expression(String expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder pushStatus(@Nullable String pushStatus) {
            this.pushStatus = pushStatus;
            return this;
        }        public MappingMapping build() {
            return new MappingMapping(expression, id, pushStatus);
        }
    }
}
