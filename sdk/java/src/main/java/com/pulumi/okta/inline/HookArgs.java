// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inline;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inline.inputs.HookHeaderArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HookArgs extends com.pulumi.resources.ResourceArgs {

    public static final HookArgs Empty = new HookArgs();

    @Import(name="auth")
    private @Nullable Output<Map<String,String>> auth;

    public Optional<Output<Map<String,String>>> auth() {
        return Optional.ofNullable(this.auth);
    }

    @Import(name="channel", required=true)
    private Output<Map<String,String>> channel;

    public Output<Map<String,String>> channel() {
        return this.channel;
    }

    @Import(name="headers")
    private @Nullable Output<List<HookHeaderArgs>> headers;

    public Optional<Output<List<HookHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="version", required=true)
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    private HookArgs() {}

    private HookArgs(HookArgs $) {
        this.auth = $.auth;
        this.channel = $.channel;
        this.headers = $.headers;
        this.name = $.name;
        this.status = $.status;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HookArgs $;

        public Builder() {
            $ = new HookArgs();
        }

        public Builder(HookArgs defaults) {
            $ = new HookArgs(Objects.requireNonNull(defaults));
        }

        public Builder auth(@Nullable Output<Map<String,String>> auth) {
            $.auth = auth;
            return this;
        }

        public Builder auth(Map<String,String> auth) {
            return auth(Output.of(auth));
        }

        public Builder channel(Output<Map<String,String>> channel) {
            $.channel = channel;
            return this;
        }

        public Builder channel(Map<String,String> channel) {
            return channel(Output.of(channel));
        }

        public Builder headers(@Nullable Output<List<HookHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(List<HookHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        public Builder headers(HookHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public HookArgs build() {
            $.channel = Objects.requireNonNull($.channel, "expected parameter 'channel' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
