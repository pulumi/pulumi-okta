// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.RateLimitingUseCaseModeOverridesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RateLimitingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitingArgs Empty = new RateLimitingArgs();

    @Import(name="defaultMode", required=true)
    private Output<String> defaultMode;

    public Output<String> defaultMode() {
        return this.defaultMode;
    }

    /**
     * A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
     * 
     */
    @Import(name="useCaseModeOverrides")
    private @Nullable Output<RateLimitingUseCaseModeOverridesArgs> useCaseModeOverrides;

    /**
     * @return A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
     * 
     */
    public Optional<Output<RateLimitingUseCaseModeOverridesArgs>> useCaseModeOverrides() {
        return Optional.ofNullable(this.useCaseModeOverrides);
    }

    private RateLimitingArgs() {}

    private RateLimitingArgs(RateLimitingArgs $) {
        this.defaultMode = $.defaultMode;
        this.useCaseModeOverrides = $.useCaseModeOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitingArgs $;

        public Builder() {
            $ = new RateLimitingArgs();
        }

        public Builder(RateLimitingArgs defaults) {
            $ = new RateLimitingArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultMode(Output<String> defaultMode) {
            $.defaultMode = defaultMode;
            return this;
        }

        public Builder defaultMode(String defaultMode) {
            return defaultMode(Output.of(defaultMode));
        }

        /**
         * @param useCaseModeOverrides A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
         * 
         * @return builder
         * 
         */
        public Builder useCaseModeOverrides(@Nullable Output<RateLimitingUseCaseModeOverridesArgs> useCaseModeOverrides) {
            $.useCaseModeOverrides = useCaseModeOverrides;
            return this;
        }

        /**
         * @param useCaseModeOverrides A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.Overrides the defaultMode property for the specified use cases.
         * 
         * @return builder
         * 
         */
        public Builder useCaseModeOverrides(RateLimitingUseCaseModeOverridesArgs useCaseModeOverrides) {
            return useCaseModeOverrides(Output.of(useCaseModeOverrides));
        }

        public RateLimitingArgs build() {
            if ($.defaultMode == null) {
                throw new MissingRequiredPropertyException("RateLimitingArgs", "defaultMode");
            }
            return $;
        }
    }

}
