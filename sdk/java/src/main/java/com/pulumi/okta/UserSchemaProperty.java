// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.UserSchemaPropertyArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.UserSchemaPropertyState;
import com.pulumi.okta.outputs.UserSchemaPropertyArrayOneOf;
import com.pulumi.okta.outputs.UserSchemaPropertyMasterOverridePriority;
import com.pulumi.okta.outputs.UserSchemaPropertyOneOf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="okta:index/userSchemaProperty:UserSchemaProperty")
public class UserSchemaProperty extends com.pulumi.resources.CustomResource {
    /**
     * Custom Subschema enumerated value of a property of type array.
     * 
     */
    @Export(name="arrayEnums", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> arrayEnums;

    /**
     * @return Custom Subschema enumerated value of a property of type array.
     * 
     */
    public Output<Optional<List<String>>> arrayEnums() {
        return Codegen.optional(this.arrayEnums);
    }
    /**
     * array of valid JSON schemas for property type array.
     * 
     */
    @Export(name="arrayOneOfs", refs={List.class,UserSchemaPropertyArrayOneOf.class}, tree="[0,1]")
    private Output</* @Nullable */ List<UserSchemaPropertyArrayOneOf>> arrayOneOfs;

    /**
     * @return array of valid JSON schemas for property type array.
     * 
     */
    public Output<Optional<List<UserSchemaPropertyArrayOneOf>>> arrayOneOfs() {
        return Codegen.optional(this.arrayOneOfs);
    }
    /**
     * Subschema array type: string, number, integer, reference. Type field must be an array.
     * 
     */
    @Export(name="arrayType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> arrayType;

    /**
     * @return Subschema array type: string, number, integer, reference. Type field must be an array.
     * 
     */
    public Output<Optional<String>> arrayType() {
        return Codegen.optional(this.arrayType);
    }
    /**
     * Custom Subschema description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Custom Subschema description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    @Export(name="enums", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> enums;

    /**
     * @return Custom Subschema enumerated value of the property. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    public Output<Optional<List<String>>> enums() {
        return Codegen.optional(this.enums);
    }
    /**
     * Subschema external name
     * 
     */
    @Export(name="externalName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalName;

    /**
     * @return Subschema external name
     * 
     */
    public Output<Optional<String>> externalName() {
        return Codegen.optional(this.externalName);
    }
    /**
     * Subschema external namespace
     * 
     */
    @Export(name="externalNamespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalNamespace;

    /**
     * @return Subschema external namespace
     * 
     */
    public Output<Optional<String>> externalNamespace() {
        return Codegen.optional(this.externalNamespace);
    }
    /**
     * Subschema unique string identifier
     * 
     */
    @Export(name="index", refs={String.class}, tree="[0]")
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }
    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    @Export(name="master", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> master;

    /**
     * @return SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    public Output<Optional<String>> master() {
        return Codegen.optional(this.master);
    }
    @Export(name="masterOverridePriorities", refs={List.class,UserSchemaPropertyMasterOverridePriority.class}, tree="[0,1]")
    private Output</* @Nullable */ List<UserSchemaPropertyMasterOverridePriority>> masterOverridePriorities;

    public Output<Optional<List<UserSchemaPropertyMasterOverridePriority>>> masterOverridePriorities() {
        return Codegen.optional(this.masterOverridePriorities);
    }
    /**
     * Subschema of type string maximum length
     * 
     */
    @Export(name="maxLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxLength;

    /**
     * @return Subschema of type string maximum length
     * 
     */
    public Output<Optional<Integer>> maxLength() {
        return Codegen.optional(this.maxLength);
    }
    /**
     * Subschema of type string minimum length
     * 
     */
    @Export(name="minLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minLength;

    /**
     * @return Subschema of type string minimum length
     * 
     */
    public Output<Optional<Integer>> minLength() {
        return Codegen.optional(this.minLength);
    }
    /**
     * Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    @Export(name="oneOfs", refs={List.class,UserSchemaPropertyOneOf.class}, tree="[0,1]")
    private Output</* @Nullable */ List<UserSchemaPropertyOneOf>> oneOfs;

    /**
     * @return Custom Subschema json schemas. see: developer.okta.com/docs/api/resources/schemas#user-profile-schema-property-object
     * 
     */
    public Output<Optional<List<UserSchemaPropertyOneOf>>> oneOfs() {
        return Codegen.optional(this.oneOfs);
    }
    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    @Export(name="pattern", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    public Output<Optional<String>> pattern() {
        return Codegen.optional(this.pattern);
    }
    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    @Export(name="permissions", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> permissions;

    /**
     * @return SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Whether the subschema is required
     * 
     */
    @Export(name="required", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Output<Optional<Boolean>> required() {
        return Codegen.optional(this.required);
    }
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * Enum title
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Enum title
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Subschema unique restriction
     * 
     */
    @Export(name="unique", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> unique;

    /**
     * @return Subschema unique restriction
     * 
     */
    public Output<Optional<String>> unique() {
        return Codegen.optional(this.unique);
    }
    /**
     * Custom subschema user type
     * 
     */
    @Export(name="userType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userType;

    /**
     * @return Custom subschema user type
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserSchemaProperty(String name) {
        this(name, UserSchemaPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserSchemaProperty(String name, UserSchemaPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserSchemaProperty(String name, UserSchemaPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userSchemaProperty:UserSchemaProperty", name, args == null ? UserSchemaPropertyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserSchemaProperty(String name, Output<String> id, @Nullable UserSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userSchemaProperty:UserSchemaProperty", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserSchemaProperty get(String name, Output<String> id, @Nullable UserSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserSchemaProperty(name, id, state, options);
    }
}
