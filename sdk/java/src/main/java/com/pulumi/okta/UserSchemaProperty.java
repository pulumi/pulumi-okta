// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.UserSchemaPropertyArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.UserSchemaPropertyState;
import com.pulumi.okta.outputs.UserSchemaPropertyArrayOneOf;
import com.pulumi.okta.outputs.UserSchemaPropertyMasterOverridePriority;
import com.pulumi.okta.outputs.UserSchemaPropertyOneOf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.UserSchemaProperty;
 * import com.pulumi.okta.UserSchemaPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new UserSchemaProperty(&#34;example&#34;, UserSchemaPropertyArgs.builder()        
 *             .description(&#34;My custom property name&#34;)
 *             .index(&#34;customPropertyName&#34;)
 *             .master(&#34;OKTA&#34;)
 *             .scope(&#34;SELF&#34;)
 *             .title(&#34;customPropertyName&#34;)
 *             .type(&#34;string&#34;)
 *             .userType(data.okta_user_type().example().id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * User schema property of default user type can be imported via the property index.
 * 
 * ```sh
 *  $ pulumi import okta:index/userSchemaProperty:UserSchemaProperty example &amp;#60;index&amp;#62;
 * ```
 * 
 *  User schema property of custom user type can be imported via user type id and property index
 * 
 * ```sh
 *  $ pulumi import okta:index/userSchemaProperty:UserSchemaProperty example &amp;#60;user type id&amp;#62;.&amp;#60;index&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:index/userSchemaProperty:UserSchemaProperty")
public class UserSchemaProperty extends com.pulumi.resources.CustomResource {
    /**
     * Array of values that an array property&#39;s items can be set to.
     * 
     */
    @Export(name="arrayEnums", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> arrayEnums;

    /**
     * @return Array of values that an array property&#39;s items can be set to.
     * 
     */
    public Output<Optional<List<String>>> arrayEnums() {
        return Codegen.optional(this.arrayEnums);
    }
    /**
     * Display name and value an enum array can be set to.
     * 
     */
    @Export(name="arrayOneOfs", type=List.class, parameters={UserSchemaPropertyArrayOneOf.class})
    private Output</* @Nullable */ List<UserSchemaPropertyArrayOneOf>> arrayOneOfs;

    /**
     * @return Display name and value an enum array can be set to.
     * 
     */
    public Output<Optional<List<UserSchemaPropertyArrayOneOf>>> arrayOneOfs() {
        return Codegen.optional(this.arrayOneOfs);
    }
    /**
     * The type of the array elements if `type` is set to `&#34;array&#34;`.
     * 
     */
    @Export(name="arrayType", type=String.class, parameters={})
    private Output</* @Nullable */ String> arrayType;

    /**
     * @return The type of the array elements if `type` is set to `&#34;array&#34;`.
     * 
     */
    public Output<Optional<String>> arrayType() {
        return Codegen.optional(this.arrayType);
    }
    /**
     * The description of the user schema property.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the user schema property.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Array of values a primitive property can be set to. See `array_enum` for arrays.
     * 
     */
    @Export(name="enums", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> enums;

    /**
     * @return Array of values a primitive property can be set to. See `array_enum` for arrays.
     * 
     */
    public Output<Optional<List<String>>> enums() {
        return Codegen.optional(this.enums);
    }
    /**
     * External name of the user schema property.
     * 
     */
    @Export(name="externalName", type=String.class, parameters={})
    private Output</* @Nullable */ String> externalName;

    /**
     * @return External name of the user schema property.
     * 
     */
    public Output<Optional<String>> externalName() {
        return Codegen.optional(this.externalName);
    }
    /**
     * External name of the user schema property.
     * 
     */
    @Export(name="externalNamespace", type=String.class, parameters={})
    private Output</* @Nullable */ String> externalNamespace;

    /**
     * @return External name of the user schema property.
     * 
     */
    public Output<Optional<String>> externalNamespace() {
        return Codegen.optional(this.externalNamespace);
    }
    /**
     * The property name.
     * 
     */
    @Export(name="index", type=String.class, parameters={})
    private Output<String> index;

    /**
     * @return The property name.
     * 
     */
    public Output<String> index() {
        return this.index;
    }
    /**
     * Master priority for the user schema property. It can be set to `&#34;PROFILE_MASTER&#34;`, `&#34;OVERRIDE&#34;` or `&#34;OKTA&#34;`.
     * 
     */
    @Export(name="master", type=String.class, parameters={})
    private Output</* @Nullable */ String> master;

    /**
     * @return Master priority for the user schema property. It can be set to `&#34;PROFILE_MASTER&#34;`, `&#34;OVERRIDE&#34;` or `&#34;OKTA&#34;`.
     * 
     */
    public Output<Optional<String>> master() {
        return Codegen.optional(this.master);
    }
    /**
     * Prioritized list of profile sources (required when `master` is `&#34;OVERRIDE&#34;`).
     * 
     */
    @Export(name="masterOverridePriorities", type=List.class, parameters={UserSchemaPropertyMasterOverridePriority.class})
    private Output</* @Nullable */ List<UserSchemaPropertyMasterOverridePriority>> masterOverridePriorities;

    /**
     * @return Prioritized list of profile sources (required when `master` is `&#34;OVERRIDE&#34;`).
     * 
     */
    public Output<Optional<List<UserSchemaPropertyMasterOverridePriority>>> masterOverridePriorities() {
        return Codegen.optional(this.masterOverridePriorities);
    }
    /**
     * The maximum length of the user property value. Only applies to type `&#34;string&#34;`.
     * 
     */
    @Export(name="maxLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxLength;

    /**
     * @return The maximum length of the user property value. Only applies to type `&#34;string&#34;`.
     * 
     */
    public Output<Optional<Integer>> maxLength() {
        return Codegen.optional(this.maxLength);
    }
    /**
     * The minimum length of the user property value. Only applies to type `&#34;string&#34;`.
     * 
     */
    @Export(name="minLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minLength;

    /**
     * @return The minimum length of the user property value. Only applies to type `&#34;string&#34;`.
     * 
     */
    public Output<Optional<Integer>> minLength() {
        return Codegen.optional(this.minLength);
    }
    /**
     * Array of maps containing a mapping for display name to enum value.
     * 
     */
    @Export(name="oneOfs", type=List.class, parameters={UserSchemaPropertyOneOf.class})
    private Output</* @Nullable */ List<UserSchemaPropertyOneOf>> oneOfs;

    /**
     * @return Array of maps containing a mapping for display name to enum value.
     * 
     */
    public Output<Optional<List<UserSchemaPropertyOneOf>>> oneOfs() {
        return Codegen.optional(this.oneOfs);
    }
    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
     * 
     */
    @Export(name="pattern", type=String.class, parameters={})
    private Output</* @Nullable */ String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[&lt;pattern&gt;]+&#39; if present.&#39;
     * 
     */
    public Output<Optional<String>> pattern() {
        return Codegen.optional(this.pattern);
    }
    /**
     * Access control permissions for the property. It can be set to `&#34;READ_WRITE&#34;`, `&#34;READ_ONLY&#34;`, `&#34;HIDE&#34;`.
     * 
     */
    @Export(name="permissions", type=String.class, parameters={})
    private Output</* @Nullable */ String> permissions;

    /**
     * @return Access control permissions for the property. It can be set to `&#34;READ_WRITE&#34;`, `&#34;READ_ONLY&#34;`, `&#34;HIDE&#34;`.
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Whether the property is required for these users.
     * 
     */
    @Export(name="required", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> required;

    /**
     * @return Whether the property is required for these users.
     * 
     */
    public Output<Optional<Boolean>> required() {
        return Codegen.optional(this.required);
    }
    /**
     * determines whether an app user attribute can be set at the Individual or Group Level.
     * 
     */
    @Export(name="scope", type=String.class, parameters={})
    private Output</* @Nullable */ String> scope;

    /**
     * @return determines whether an app user attribute can be set at the Individual or Group Level.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * display name for the enum value.
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output<String> title;

    /**
     * @return display name for the enum value.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * - Type of profile source.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return - Type of profile source.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Whether the property should be unique. It can be set to `&#34;UNIQUE_VALIDATED&#34;` or `&#34;NOT_UNIQUE&#34;`.
     * 
     */
    @Export(name="unique", type=String.class, parameters={})
    private Output</* @Nullable */ String> unique;

    /**
     * @return Whether the property should be unique. It can be set to `&#34;UNIQUE_VALIDATED&#34;` or `&#34;NOT_UNIQUE&#34;`.
     * 
     */
    public Output<Optional<String>> unique() {
        return Codegen.optional(this.unique);
    }
    /**
     * User type ID
     * 
     */
    @Export(name="userType", type=String.class, parameters={})
    private Output</* @Nullable */ String> userType;

    /**
     * @return User type ID
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserSchemaProperty(String name) {
        this(name, UserSchemaPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserSchemaProperty(String name, UserSchemaPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserSchemaProperty(String name, UserSchemaPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userSchemaProperty:UserSchemaProperty", name, args == null ? UserSchemaPropertyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserSchemaProperty(String name, Output<String> id, @Nullable UserSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userSchemaProperty:UserSchemaProperty", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserSchemaProperty get(String name, Output<String> id, @Nullable UserSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserSchemaProperty(name, id, state, options);
    }
}
