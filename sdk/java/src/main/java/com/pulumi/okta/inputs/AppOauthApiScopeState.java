// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppOauthApiScopeState extends com.pulumi.resources.ResourceArgs {

    public static final AppOauthApiScopeState Empty = new AppOauthApiScopeState();

    /**
     * ID of the application.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return ID of the application.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The issuer of your Org Authorization Server, your Org URL.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The issuer of your Org Authorization Server, your Org URL.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * List of scopes for which consent is granted.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return List of scopes for which consent is granted.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private AppOauthApiScopeState() {}

    private AppOauthApiScopeState(AppOauthApiScopeState $) {
        this.appId = $.appId;
        this.issuer = $.issuer;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppOauthApiScopeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppOauthApiScopeState $;

        public Builder() {
            $ = new AppOauthApiScopeState();
        }

        public Builder(AppOauthApiScopeState defaults) {
            $ = new AppOauthApiScopeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId ID of the application.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId ID of the application.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param issuer The issuer of your Org Authorization Server, your Org URL.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer of your Org Authorization Server, your Org URL.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param scopes List of scopes for which consent is granted.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes List of scopes for which consent is granted.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes List of scopes for which consent is granted.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public AppOauthApiScopeState build() {
            return $;
        }
    }

}
