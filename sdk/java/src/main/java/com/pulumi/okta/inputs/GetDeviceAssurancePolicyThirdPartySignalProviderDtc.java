// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion;
import com.pulumi.okta.inputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetDeviceAssurancePolicyThirdPartySignalProviderDtc extends com.pulumi.resources.InvokeArgs {

    public static final GetDeviceAssurancePolicyThirdPartySignalProviderDtc Empty = new GetDeviceAssurancePolicyThirdPartySignalProviderDtc();

    @Import(name="allowScreenLock", required=true)
    private Boolean allowScreenLock;

    public Boolean allowScreenLock() {
        return this.allowScreenLock;
    }

    @Import(name="browserVersion", required=true)
    private GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion browserVersion;

    public GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion browserVersion() {
        return this.browserVersion;
    }

    @Import(name="builtInDnsClientEnabled", required=true)
    private Boolean builtInDnsClientEnabled;

    public Boolean builtInDnsClientEnabled() {
        return this.builtInDnsClientEnabled;
    }

    @Import(name="chromeRemoteDesktopAppBlocked", required=true)
    private Boolean chromeRemoteDesktopAppBlocked;

    public Boolean chromeRemoteDesktopAppBlocked() {
        return this.chromeRemoteDesktopAppBlocked;
    }

    @Import(name="crowdStrikeAgentId", required=true)
    private String crowdStrikeAgentId;

    public String crowdStrikeAgentId() {
        return this.crowdStrikeAgentId;
    }

    @Import(name="crowdStrikeCustomerId", required=true)
    private String crowdStrikeCustomerId;

    public String crowdStrikeCustomerId() {
        return this.crowdStrikeCustomerId;
    }

    @Import(name="deviceEnrollmentDomain", required=true)
    private String deviceEnrollmentDomain;

    public String deviceEnrollmentDomain() {
        return this.deviceEnrollmentDomain;
    }

    @Import(name="diskEncrypted", required=true)
    private Boolean diskEncrypted;

    public Boolean diskEncrypted() {
        return this.diskEncrypted;
    }

    @Import(name="keyTrustLevel", required=true)
    private String keyTrustLevel;

    public String keyTrustLevel() {
        return this.keyTrustLevel;
    }

    @Import(name="managedDevice", required=true)
    private Boolean managedDevice;

    public Boolean managedDevice() {
        return this.managedDevice;
    }

    @Import(name="osFirewall", required=true)
    private Boolean osFirewall;

    public Boolean osFirewall() {
        return this.osFirewall;
    }

    @Import(name="osVersion", required=true)
    private GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion osVersion;

    public GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion osVersion() {
        return this.osVersion;
    }

    @Import(name="passwordProtectionWarningTrigger", required=true)
    private String passwordProtectionWarningTrigger;

    public String passwordProtectionWarningTrigger() {
        return this.passwordProtectionWarningTrigger;
    }

    @Import(name="realtimeUrlCheckMode", required=true)
    private Boolean realtimeUrlCheckMode;

    public Boolean realtimeUrlCheckMode() {
        return this.realtimeUrlCheckMode;
    }

    @Import(name="safeBrowsingProtectionLevel", required=true)
    private String safeBrowsingProtectionLevel;

    public String safeBrowsingProtectionLevel() {
        return this.safeBrowsingProtectionLevel;
    }

    @Import(name="screenLockSecured", required=true)
    private Boolean screenLockSecured;

    public Boolean screenLockSecured() {
        return this.screenLockSecured;
    }

    @Import(name="siteIsolationEnabled", required=true)
    private Boolean siteIsolationEnabled;

    public Boolean siteIsolationEnabled() {
        return this.siteIsolationEnabled;
    }

    @Import(name="thirdPartyBlockingEnabled", required=true)
    private Boolean thirdPartyBlockingEnabled;

    public Boolean thirdPartyBlockingEnabled() {
        return this.thirdPartyBlockingEnabled;
    }

    @Import(name="windowsMachineDomain", required=true)
    private String windowsMachineDomain;

    public String windowsMachineDomain() {
        return this.windowsMachineDomain;
    }

    @Import(name="windowsUserDomain", required=true)
    private String windowsUserDomain;

    public String windowsUserDomain() {
        return this.windowsUserDomain;
    }

    private GetDeviceAssurancePolicyThirdPartySignalProviderDtc() {}

    private GetDeviceAssurancePolicyThirdPartySignalProviderDtc(GetDeviceAssurancePolicyThirdPartySignalProviderDtc $) {
        this.allowScreenLock = $.allowScreenLock;
        this.browserVersion = $.browserVersion;
        this.builtInDnsClientEnabled = $.builtInDnsClientEnabled;
        this.chromeRemoteDesktopAppBlocked = $.chromeRemoteDesktopAppBlocked;
        this.crowdStrikeAgentId = $.crowdStrikeAgentId;
        this.crowdStrikeCustomerId = $.crowdStrikeCustomerId;
        this.deviceEnrollmentDomain = $.deviceEnrollmentDomain;
        this.diskEncrypted = $.diskEncrypted;
        this.keyTrustLevel = $.keyTrustLevel;
        this.managedDevice = $.managedDevice;
        this.osFirewall = $.osFirewall;
        this.osVersion = $.osVersion;
        this.passwordProtectionWarningTrigger = $.passwordProtectionWarningTrigger;
        this.realtimeUrlCheckMode = $.realtimeUrlCheckMode;
        this.safeBrowsingProtectionLevel = $.safeBrowsingProtectionLevel;
        this.screenLockSecured = $.screenLockSecured;
        this.siteIsolationEnabled = $.siteIsolationEnabled;
        this.thirdPartyBlockingEnabled = $.thirdPartyBlockingEnabled;
        this.windowsMachineDomain = $.windowsMachineDomain;
        this.windowsUserDomain = $.windowsUserDomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeviceAssurancePolicyThirdPartySignalProviderDtc defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeviceAssurancePolicyThirdPartySignalProviderDtc $;

        public Builder() {
            $ = new GetDeviceAssurancePolicyThirdPartySignalProviderDtc();
        }

        public Builder(GetDeviceAssurancePolicyThirdPartySignalProviderDtc defaults) {
            $ = new GetDeviceAssurancePolicyThirdPartySignalProviderDtc(Objects.requireNonNull(defaults));
        }

        public Builder allowScreenLock(Boolean allowScreenLock) {
            $.allowScreenLock = allowScreenLock;
            return this;
        }

        public Builder browserVersion(GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersion browserVersion) {
            $.browserVersion = browserVersion;
            return this;
        }

        public Builder builtInDnsClientEnabled(Boolean builtInDnsClientEnabled) {
            $.builtInDnsClientEnabled = builtInDnsClientEnabled;
            return this;
        }

        public Builder chromeRemoteDesktopAppBlocked(Boolean chromeRemoteDesktopAppBlocked) {
            $.chromeRemoteDesktopAppBlocked = chromeRemoteDesktopAppBlocked;
            return this;
        }

        public Builder crowdStrikeAgentId(String crowdStrikeAgentId) {
            $.crowdStrikeAgentId = crowdStrikeAgentId;
            return this;
        }

        public Builder crowdStrikeCustomerId(String crowdStrikeCustomerId) {
            $.crowdStrikeCustomerId = crowdStrikeCustomerId;
            return this;
        }

        public Builder deviceEnrollmentDomain(String deviceEnrollmentDomain) {
            $.deviceEnrollmentDomain = deviceEnrollmentDomain;
            return this;
        }

        public Builder diskEncrypted(Boolean diskEncrypted) {
            $.diskEncrypted = diskEncrypted;
            return this;
        }

        public Builder keyTrustLevel(String keyTrustLevel) {
            $.keyTrustLevel = keyTrustLevel;
            return this;
        }

        public Builder managedDevice(Boolean managedDevice) {
            $.managedDevice = managedDevice;
            return this;
        }

        public Builder osFirewall(Boolean osFirewall) {
            $.osFirewall = osFirewall;
            return this;
        }

        public Builder osVersion(GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersion osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        public Builder passwordProtectionWarningTrigger(String passwordProtectionWarningTrigger) {
            $.passwordProtectionWarningTrigger = passwordProtectionWarningTrigger;
            return this;
        }

        public Builder realtimeUrlCheckMode(Boolean realtimeUrlCheckMode) {
            $.realtimeUrlCheckMode = realtimeUrlCheckMode;
            return this;
        }

        public Builder safeBrowsingProtectionLevel(String safeBrowsingProtectionLevel) {
            $.safeBrowsingProtectionLevel = safeBrowsingProtectionLevel;
            return this;
        }

        public Builder screenLockSecured(Boolean screenLockSecured) {
            $.screenLockSecured = screenLockSecured;
            return this;
        }

        public Builder siteIsolationEnabled(Boolean siteIsolationEnabled) {
            $.siteIsolationEnabled = siteIsolationEnabled;
            return this;
        }

        public Builder thirdPartyBlockingEnabled(Boolean thirdPartyBlockingEnabled) {
            $.thirdPartyBlockingEnabled = thirdPartyBlockingEnabled;
            return this;
        }

        public Builder windowsMachineDomain(String windowsMachineDomain) {
            $.windowsMachineDomain = windowsMachineDomain;
            return this;
        }

        public Builder windowsUserDomain(String windowsUserDomain) {
            $.windowsUserDomain = windowsUserDomain;
            return this;
        }

        public GetDeviceAssurancePolicyThirdPartySignalProviderDtc build() {
            if ($.allowScreenLock == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "allowScreenLock");
            }
            if ($.browserVersion == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "browserVersion");
            }
            if ($.builtInDnsClientEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "builtInDnsClientEnabled");
            }
            if ($.chromeRemoteDesktopAppBlocked == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "chromeRemoteDesktopAppBlocked");
            }
            if ($.crowdStrikeAgentId == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "crowdStrikeAgentId");
            }
            if ($.crowdStrikeCustomerId == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "crowdStrikeCustomerId");
            }
            if ($.deviceEnrollmentDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "deviceEnrollmentDomain");
            }
            if ($.diskEncrypted == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "diskEncrypted");
            }
            if ($.keyTrustLevel == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "keyTrustLevel");
            }
            if ($.managedDevice == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "managedDevice");
            }
            if ($.osFirewall == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "osFirewall");
            }
            if ($.osVersion == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "osVersion");
            }
            if ($.passwordProtectionWarningTrigger == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "passwordProtectionWarningTrigger");
            }
            if ($.realtimeUrlCheckMode == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "realtimeUrlCheckMode");
            }
            if ($.safeBrowsingProtectionLevel == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "safeBrowsingProtectionLevel");
            }
            if ($.screenLockSecured == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "screenLockSecured");
            }
            if ($.siteIsolationEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "siteIsolationEnabled");
            }
            if ($.thirdPartyBlockingEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "thirdPartyBlockingEnabled");
            }
            if ($.windowsMachineDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "windowsMachineDomain");
            }
            if ($.windowsUserDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtc", "windowsUserDomain");
            }
            return $;
        }
    }

}
