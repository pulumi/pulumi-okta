// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetReviewAllReviewerLevelReviewerGroupProfileArgs;
import com.pulumi.okta.inputs.GetReviewAllReviewerLevelReviewerProfileArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetReviewAllReviewerLevelArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetReviewAllReviewerLevelArgs Empty = new GetReviewAllReviewerLevelArgs();

    /**
     * The ISO 8601 formatted date and time when the resource was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return The ISO 8601 formatted date and time when the resource was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * The id of user who created the resource.
     * 
     */
    @Import(name="createdBy", required=true)
    private Output<String> createdBy;

    /**
     * @return The id of user who created the resource.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
     * 
     */
    @Import(name="decision", required=true)
    private Output<String> decision;

    /**
     * @return The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
     * 
     */
    public Output<String> decision() {
        return this.decision;
    }

    /**
     * The ID of  review.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of  review.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    @Import(name="lastUpdated", required=true)
    private Output<String> lastUpdated;

    /**
     * @return The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    public Output<String> lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * The id of user who last updated the object.
     * 
     */
    @Import(name="lastUpdatedBy", required=true)
    private Output<String> lastUpdatedBy;

    /**
     * @return The id of user who last updated the object.
     * 
     */
    public Output<String> lastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    @Import(name="reviewerGroupProfile")
    private @Nullable Output<GetReviewAllReviewerLevelReviewerGroupProfileArgs> reviewerGroupProfile;

    public Optional<Output<GetReviewAllReviewerLevelReviewerGroupProfileArgs>> reviewerGroupProfile() {
        return Optional.ofNullable(this.reviewerGroupProfile);
    }

    @Import(name="reviewerLevel", required=true)
    private Output<String> reviewerLevel;

    public Output<String> reviewerLevel() {
        return this.reviewerLevel;
    }

    @Import(name="reviewerProfile")
    private @Nullable Output<GetReviewAllReviewerLevelReviewerProfileArgs> reviewerProfile;

    public Optional<Output<GetReviewAllReviewerLevelReviewerProfileArgs>> reviewerProfile() {
        return Optional.ofNullable(this.reviewerProfile);
    }

    /**
     * The type of reviewer to which the review is assigned.
     * 
     */
    @Import(name="reviewerType", required=true)
    private Output<String> reviewerType;

    /**
     * @return The type of reviewer to which the review is assigned.
     * 
     */
    public Output<String> reviewerType() {
        return this.reviewerType;
    }

    private GetReviewAllReviewerLevelArgs() {}

    private GetReviewAllReviewerLevelArgs(GetReviewAllReviewerLevelArgs $) {
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.decision = $.decision;
        this.id = $.id;
        this.lastUpdated = $.lastUpdated;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.reviewerGroupProfile = $.reviewerGroupProfile;
        this.reviewerLevel = $.reviewerLevel;
        this.reviewerProfile = $.reviewerProfile;
        this.reviewerType = $.reviewerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetReviewAllReviewerLevelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetReviewAllReviewerLevelArgs $;

        public Builder() {
            $ = new GetReviewAllReviewerLevelArgs();
        }

        public Builder(GetReviewAllReviewerLevelArgs defaults) {
            $ = new GetReviewAllReviewerLevelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created The ISO 8601 formatted date and time when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The ISO 8601 formatted date and time when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param createdBy The id of user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The id of user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param decision The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
         * 
         * @return builder
         * 
         */
        public Builder decision(Output<String> decision) {
            $.decision = decision;
            return this;
        }

        /**
         * @param decision The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
         * 
         * @return builder
         * 
         */
        public Builder decision(String decision) {
            return decision(Output.of(decision));
        }

        /**
         * @param id The ID of  review.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of  review.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param lastUpdated The ISO 8601 formatted date and time when the object was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdated The ISO 8601 formatted date and time when the object was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param lastUpdatedBy The id of user who last updated the object.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(Output<String> lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * @param lastUpdatedBy The id of user who last updated the object.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            return lastUpdatedBy(Output.of(lastUpdatedBy));
        }

        public Builder reviewerGroupProfile(@Nullable Output<GetReviewAllReviewerLevelReviewerGroupProfileArgs> reviewerGroupProfile) {
            $.reviewerGroupProfile = reviewerGroupProfile;
            return this;
        }

        public Builder reviewerGroupProfile(GetReviewAllReviewerLevelReviewerGroupProfileArgs reviewerGroupProfile) {
            return reviewerGroupProfile(Output.of(reviewerGroupProfile));
        }

        public Builder reviewerLevel(Output<String> reviewerLevel) {
            $.reviewerLevel = reviewerLevel;
            return this;
        }

        public Builder reviewerLevel(String reviewerLevel) {
            return reviewerLevel(Output.of(reviewerLevel));
        }

        public Builder reviewerProfile(@Nullable Output<GetReviewAllReviewerLevelReviewerProfileArgs> reviewerProfile) {
            $.reviewerProfile = reviewerProfile;
            return this;
        }

        public Builder reviewerProfile(GetReviewAllReviewerLevelReviewerProfileArgs reviewerProfile) {
            return reviewerProfile(Output.of(reviewerProfile));
        }

        /**
         * @param reviewerType The type of reviewer to which the review is assigned.
         * 
         * @return builder
         * 
         */
        public Builder reviewerType(Output<String> reviewerType) {
            $.reviewerType = reviewerType;
            return this;
        }

        /**
         * @param reviewerType The type of reviewer to which the review is assigned.
         * 
         * @return builder
         * 
         */
        public Builder reviewerType(String reviewerType) {
            return reviewerType(Output.of(reviewerType));
        }

        public GetReviewAllReviewerLevelArgs build() {
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "created");
            }
            if ($.createdBy == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "createdBy");
            }
            if ($.decision == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "decision");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "id");
            }
            if ($.lastUpdated == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "lastUpdated");
            }
            if ($.lastUpdatedBy == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "lastUpdatedBy");
            }
            if ($.reviewerLevel == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "reviewerLevel");
            }
            if ($.reviewerType == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevelArgs", "reviewerType");
            }
            return $;
        }
    }

}
