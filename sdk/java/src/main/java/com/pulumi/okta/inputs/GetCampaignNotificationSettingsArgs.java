// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetCampaignNotificationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCampaignNotificationSettingsArgs Empty = new GetCampaignNotificationSettingsArgs();

    @Import(name="notifyReviewPeriodEnd", required=true)
    private Output<Boolean> notifyReviewPeriodEnd;

    public Output<Boolean> notifyReviewPeriodEnd() {
        return this.notifyReviewPeriodEnd;
    }

    @Import(name="notifyReviewerAtCampaignEnd", required=true)
    private Output<Boolean> notifyReviewerAtCampaignEnd;

    public Output<Boolean> notifyReviewerAtCampaignEnd() {
        return this.notifyReviewerAtCampaignEnd;
    }

    @Import(name="notifyReviewerDuringMidpointOfReview", required=true)
    private Output<Boolean> notifyReviewerDuringMidpointOfReview;

    public Output<Boolean> notifyReviewerDuringMidpointOfReview() {
        return this.notifyReviewerDuringMidpointOfReview;
    }

    @Import(name="notifyReviewerWhenOverdue", required=true)
    private Output<Boolean> notifyReviewerWhenOverdue;

    public Output<Boolean> notifyReviewerWhenOverdue() {
        return this.notifyReviewerWhenOverdue;
    }

    @Import(name="notifyReviewerWhenReviewAssigned", required=true)
    private Output<Boolean> notifyReviewerWhenReviewAssigned;

    public Output<Boolean> notifyReviewerWhenReviewAssigned() {
        return this.notifyReviewerWhenReviewAssigned;
    }

    @Import(name="remindersReviewerBeforeCampaignCloseInSecs", required=true)
    private Output<List<Integer>> remindersReviewerBeforeCampaignCloseInSecs;

    public Output<List<Integer>> remindersReviewerBeforeCampaignCloseInSecs() {
        return this.remindersReviewerBeforeCampaignCloseInSecs;
    }

    private GetCampaignNotificationSettingsArgs() {}

    private GetCampaignNotificationSettingsArgs(GetCampaignNotificationSettingsArgs $) {
        this.notifyReviewPeriodEnd = $.notifyReviewPeriodEnd;
        this.notifyReviewerAtCampaignEnd = $.notifyReviewerAtCampaignEnd;
        this.notifyReviewerDuringMidpointOfReview = $.notifyReviewerDuringMidpointOfReview;
        this.notifyReviewerWhenOverdue = $.notifyReviewerWhenOverdue;
        this.notifyReviewerWhenReviewAssigned = $.notifyReviewerWhenReviewAssigned;
        this.remindersReviewerBeforeCampaignCloseInSecs = $.remindersReviewerBeforeCampaignCloseInSecs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCampaignNotificationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCampaignNotificationSettingsArgs $;

        public Builder() {
            $ = new GetCampaignNotificationSettingsArgs();
        }

        public Builder(GetCampaignNotificationSettingsArgs defaults) {
            $ = new GetCampaignNotificationSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder notifyReviewPeriodEnd(Output<Boolean> notifyReviewPeriodEnd) {
            $.notifyReviewPeriodEnd = notifyReviewPeriodEnd;
            return this;
        }

        public Builder notifyReviewPeriodEnd(Boolean notifyReviewPeriodEnd) {
            return notifyReviewPeriodEnd(Output.of(notifyReviewPeriodEnd));
        }

        public Builder notifyReviewerAtCampaignEnd(Output<Boolean> notifyReviewerAtCampaignEnd) {
            $.notifyReviewerAtCampaignEnd = notifyReviewerAtCampaignEnd;
            return this;
        }

        public Builder notifyReviewerAtCampaignEnd(Boolean notifyReviewerAtCampaignEnd) {
            return notifyReviewerAtCampaignEnd(Output.of(notifyReviewerAtCampaignEnd));
        }

        public Builder notifyReviewerDuringMidpointOfReview(Output<Boolean> notifyReviewerDuringMidpointOfReview) {
            $.notifyReviewerDuringMidpointOfReview = notifyReviewerDuringMidpointOfReview;
            return this;
        }

        public Builder notifyReviewerDuringMidpointOfReview(Boolean notifyReviewerDuringMidpointOfReview) {
            return notifyReviewerDuringMidpointOfReview(Output.of(notifyReviewerDuringMidpointOfReview));
        }

        public Builder notifyReviewerWhenOverdue(Output<Boolean> notifyReviewerWhenOverdue) {
            $.notifyReviewerWhenOverdue = notifyReviewerWhenOverdue;
            return this;
        }

        public Builder notifyReviewerWhenOverdue(Boolean notifyReviewerWhenOverdue) {
            return notifyReviewerWhenOverdue(Output.of(notifyReviewerWhenOverdue));
        }

        public Builder notifyReviewerWhenReviewAssigned(Output<Boolean> notifyReviewerWhenReviewAssigned) {
            $.notifyReviewerWhenReviewAssigned = notifyReviewerWhenReviewAssigned;
            return this;
        }

        public Builder notifyReviewerWhenReviewAssigned(Boolean notifyReviewerWhenReviewAssigned) {
            return notifyReviewerWhenReviewAssigned(Output.of(notifyReviewerWhenReviewAssigned));
        }

        public Builder remindersReviewerBeforeCampaignCloseInSecs(Output<List<Integer>> remindersReviewerBeforeCampaignCloseInSecs) {
            $.remindersReviewerBeforeCampaignCloseInSecs = remindersReviewerBeforeCampaignCloseInSecs;
            return this;
        }

        public Builder remindersReviewerBeforeCampaignCloseInSecs(List<Integer> remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(Output.of(remindersReviewerBeforeCampaignCloseInSecs));
        }

        public Builder remindersReviewerBeforeCampaignCloseInSecs(Integer... remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(List.of(remindersReviewerBeforeCampaignCloseInSecs));
        }

        public GetCampaignNotificationSettingsArgs build() {
            if ($.notifyReviewPeriodEnd == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "notifyReviewPeriodEnd");
            }
            if ($.notifyReviewerAtCampaignEnd == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "notifyReviewerAtCampaignEnd");
            }
            if ($.notifyReviewerDuringMidpointOfReview == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "notifyReviewerDuringMidpointOfReview");
            }
            if ($.notifyReviewerWhenOverdue == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "notifyReviewerWhenOverdue");
            }
            if ($.notifyReviewerWhenReviewAssigned == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "notifyReviewerWhenReviewAssigned");
            }
            if ($.remindersReviewerBeforeCampaignCloseInSecs == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettingsArgs", "remindersReviewerBeforeCampaignCloseInSecs");
            }
            return $;
        }
    }

}
