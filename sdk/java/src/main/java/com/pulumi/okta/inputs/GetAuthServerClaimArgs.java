// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAuthServerClaimArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAuthServerClaimArgs Empty = new GetAuthServerClaimArgs();

    /**
     * Auth server ID.
     * 
     */
    @Import(name="authServerId", required=true)
    private Output<String> authServerId;

    /**
     * @return Auth server ID.
     * 
     */
    public Output<String> authServerId() {
        return this.authServerId;
    }

    /**
     * ID of the claim. Conflicts with `name`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the claim. Conflicts with `name`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the claim. Conflicts with `id`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the claim. Conflicts with `id`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetAuthServerClaimArgs() {}

    private GetAuthServerClaimArgs(GetAuthServerClaimArgs $) {
        this.authServerId = $.authServerId;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAuthServerClaimArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAuthServerClaimArgs $;

        public Builder() {
            $ = new GetAuthServerClaimArgs();
        }

        public Builder(GetAuthServerClaimArgs defaults) {
            $ = new GetAuthServerClaimArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authServerId Auth server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId Auth server ID.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param id ID of the claim. Conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the claim. Conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the claim. Conflicts with `id`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the claim. Conflicts with `id`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetAuthServerClaimArgs build() {
            if ($.authServerId == null) {
                throw new MissingRequiredPropertyException("GetAuthServerClaimArgs", "authServerId");
            }
            return $;
        }
    }

}
