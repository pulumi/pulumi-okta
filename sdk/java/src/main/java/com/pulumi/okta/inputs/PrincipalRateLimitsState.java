// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrincipalRateLimitsState extends com.pulumi.resources.ResourceArgs {

    public static final PrincipalRateLimitsState Empty = new PrincipalRateLimitsState();

    /**
     * The Okta user ID of the user who created the principle rate limit entity.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The Okta user ID of the user who created the principle rate limit entity.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The date and time the principle rate limit entity was created.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The date and time the principle rate limit entity was created.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * The default percentage of a given concurrency limit threshold that the owning principal can consume.
     * 
     */
    @Import(name="defaultConcurrencyPercentage")
    private @Nullable Output<Integer> defaultConcurrencyPercentage;

    /**
     * @return The default percentage of a given concurrency limit threshold that the owning principal can consume.
     * 
     */
    public Optional<Output<Integer>> defaultConcurrencyPercentage() {
        return Optional.ofNullable(this.defaultConcurrencyPercentage);
    }

    /**
     * The default percentage of a given rate limit threshold that the owning principal can consume.
     * 
     */
    @Import(name="defaultPercentage")
    private @Nullable Output<Integer> defaultPercentage;

    /**
     * @return The default percentage of a given rate limit threshold that the owning principal can consume.
     * 
     */
    public Optional<Output<Integer>> defaultPercentage() {
        return Optional.ofNullable(this.defaultPercentage);
    }

    /**
     * The date and time the principle rate limit entity was last updated.
     * 
     */
    @Import(name="lastUpdate")
    private @Nullable Output<String> lastUpdate;

    /**
     * @return The date and time the principle rate limit entity was last updated.
     * 
     */
    public Optional<Output<String>> lastUpdate() {
        return Optional.ofNullable(this.lastUpdate);
    }

    /**
     * The Okta user ID of the user who last updated the principle rate limit entity.
     * 
     */
    @Import(name="lastUpdatedBy")
    private @Nullable Output<String> lastUpdatedBy;

    /**
     * @return The Okta user ID of the user who last updated the principle rate limit entity.
     * 
     */
    public Optional<Output<String>> lastUpdatedBy() {
        return Optional.ofNullable(this.lastUpdatedBy);
    }

    /**
     * The unique identifier of the Okta org.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The unique identifier of the Okta org.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    @Import(name="principalId")
    private @Nullable Output<String> principalId;

    /**
     * @return The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    public Optional<Output<String>> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    private PrincipalRateLimitsState() {}

    private PrincipalRateLimitsState(PrincipalRateLimitsState $) {
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.defaultConcurrencyPercentage = $.defaultConcurrencyPercentage;
        this.defaultPercentage = $.defaultPercentage;
        this.lastUpdate = $.lastUpdate;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.orgId = $.orgId;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrincipalRateLimitsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrincipalRateLimitsState $;

        public Builder() {
            $ = new PrincipalRateLimitsState();
        }

        public Builder(PrincipalRateLimitsState defaults) {
            $ = new PrincipalRateLimitsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy The Okta user ID of the user who created the principle rate limit entity.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The Okta user ID of the user who created the principle rate limit entity.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate The date and time the principle rate limit entity was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The date and time the principle rate limit entity was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param defaultConcurrencyPercentage The default percentage of a given concurrency limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultConcurrencyPercentage(@Nullable Output<Integer> defaultConcurrencyPercentage) {
            $.defaultConcurrencyPercentage = defaultConcurrencyPercentage;
            return this;
        }

        /**
         * @param defaultConcurrencyPercentage The default percentage of a given concurrency limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultConcurrencyPercentage(Integer defaultConcurrencyPercentage) {
            return defaultConcurrencyPercentage(Output.of(defaultConcurrencyPercentage));
        }

        /**
         * @param defaultPercentage The default percentage of a given rate limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultPercentage(@Nullable Output<Integer> defaultPercentage) {
            $.defaultPercentage = defaultPercentage;
            return this;
        }

        /**
         * @param defaultPercentage The default percentage of a given rate limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultPercentage(Integer defaultPercentage) {
            return defaultPercentage(Output.of(defaultPercentage));
        }

        /**
         * @param lastUpdate The date and time the principle rate limit entity was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(@Nullable Output<String> lastUpdate) {
            $.lastUpdate = lastUpdate;
            return this;
        }

        /**
         * @param lastUpdate The date and time the principle rate limit entity was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(String lastUpdate) {
            return lastUpdate(Output.of(lastUpdate));
        }

        /**
         * @param lastUpdatedBy The Okta user ID of the user who last updated the principle rate limit entity.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(@Nullable Output<String> lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * @param lastUpdatedBy The Okta user ID of the user who last updated the principle rate limit entity.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            return lastUpdatedBy(Output.of(lastUpdatedBy));
        }

        /**
         * @param orgId The unique identifier of the Okta org.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The unique identifier of the Okta org.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param principalId The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The type of principal, either an API token or an OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The type of principal, either an API token or an OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        public PrincipalRateLimitsState build() {
            return $;
        }
    }

}
