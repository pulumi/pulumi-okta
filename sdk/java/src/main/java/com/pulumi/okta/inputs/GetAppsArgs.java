// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppsArgs Empty = new GetAppsArgs();

    /**
     * Search only active applications.
     * 
     */
    @Import(name="activeOnly")
    private @Nullable Output<Boolean> activeOnly;

    /**
     * @return Search only active applications.
     * 
     */
    public Optional<Output<Boolean>> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }

    /**
     * Specifies whether to include non-active, but not deleted apps in the results.
     * 
     */
    @Import(name="includeNonDeleted")
    private @Nullable Output<Boolean> includeNonDeleted;

    /**
     * @return Specifies whether to include non-active, but not deleted apps in the results.
     * 
     */
    public Optional<Output<Boolean>> includeNonDeleted() {
        return Optional.ofNullable(this.includeNonDeleted);
    }

    /**
     * Searches for applications whose label or name property matches this value exactly.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Searches for applications whose label or name property matches this value exactly.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Searches for applications whose label or name property begins with this value. **Warning:** This might not work as intended and will be removed in the future release. Use `q` instead.
     * 
     * @deprecated
     * Use `q` instead. This attribute will be removed in a future version.
     * 
     */
    @Deprecated /* Use `q` instead. This attribute will be removed in a future version. */
    @Import(name="labelPrefix")
    private @Nullable Output<String> labelPrefix;

    /**
     * @return Searches for applications whose label or name property begins with this value. **Warning:** This might not work as intended and will be removed in the future release. Use `q` instead.
     * 
     * @deprecated
     * Use `q` instead. This attribute will be removed in a future version.
     * 
     */
    @Deprecated /* Use `q` instead. This attribute will be removed in a future version. */
    public Optional<Output<String>> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }

    /**
     * Searches for apps with name or label properties that starts with the `q` value.
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return Searches for apps with name or label properties that starts with the `q` value.
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    /**
     * Specifies whether to use query optimization. If you specify `useOptimization=true` in the request query, the response contains a subset of app instance properties.
     * 
     */
    @Import(name="useOptimization")
    private @Nullable Output<Boolean> useOptimization;

    /**
     * @return Specifies whether to use query optimization. If you specify `useOptimization=true` in the request query, the response contains a subset of app instance properties.
     * 
     */
    public Optional<Output<Boolean>> useOptimization() {
        return Optional.ofNullable(this.useOptimization);
    }

    private GetAppsArgs() {}

    private GetAppsArgs(GetAppsArgs $) {
        this.activeOnly = $.activeOnly;
        this.includeNonDeleted = $.includeNonDeleted;
        this.label = $.label;
        this.labelPrefix = $.labelPrefix;
        this.q = $.q;
        this.useOptimization = $.useOptimization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppsArgs $;

        public Builder() {
            $ = new GetAppsArgs();
        }

        public Builder(GetAppsArgs defaults) {
            $ = new GetAppsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeOnly Search only active applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(@Nullable Output<Boolean> activeOnly) {
            $.activeOnly = activeOnly;
            return this;
        }

        /**
         * @param activeOnly Search only active applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(Boolean activeOnly) {
            return activeOnly(Output.of(activeOnly));
        }

        /**
         * @param includeNonDeleted Specifies whether to include non-active, but not deleted apps in the results.
         * 
         * @return builder
         * 
         */
        public Builder includeNonDeleted(@Nullable Output<Boolean> includeNonDeleted) {
            $.includeNonDeleted = includeNonDeleted;
            return this;
        }

        /**
         * @param includeNonDeleted Specifies whether to include non-active, but not deleted apps in the results.
         * 
         * @return builder
         * 
         */
        public Builder includeNonDeleted(Boolean includeNonDeleted) {
            return includeNonDeleted(Output.of(includeNonDeleted));
        }

        /**
         * @param label Searches for applications whose label or name property matches this value exactly.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Searches for applications whose label or name property matches this value exactly.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelPrefix Searches for applications whose label or name property begins with this value. **Warning:** This might not work as intended and will be removed in the future release. Use `q` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `q` instead. This attribute will be removed in a future version.
         * 
         */
        @Deprecated /* Use `q` instead. This attribute will be removed in a future version. */
        public Builder labelPrefix(@Nullable Output<String> labelPrefix) {
            $.labelPrefix = labelPrefix;
            return this;
        }

        /**
         * @param labelPrefix Searches for applications whose label or name property begins with this value. **Warning:** This might not work as intended and will be removed in the future release. Use `q` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `q` instead. This attribute will be removed in a future version.
         * 
         */
        @Deprecated /* Use `q` instead. This attribute will be removed in a future version. */
        public Builder labelPrefix(String labelPrefix) {
            return labelPrefix(Output.of(labelPrefix));
        }

        /**
         * @param q Searches for apps with name or label properties that starts with the `q` value.
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q Searches for apps with name or label properties that starts with the `q` value.
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        /**
         * @param useOptimization Specifies whether to use query optimization. If you specify `useOptimization=true` in the request query, the response contains a subset of app instance properties.
         * 
         * @return builder
         * 
         */
        public Builder useOptimization(@Nullable Output<Boolean> useOptimization) {
            $.useOptimization = useOptimization;
            return this;
        }

        /**
         * @param useOptimization Specifies whether to use query optimization. If you specify `useOptimization=true` in the request query, the response contains a subset of app instance properties.
         * 
         * @return builder
         * 
         */
        public Builder useOptimization(Boolean useOptimization) {
            return useOptimization(Output.of(useOptimization));
        }

        public GetAppsArgs build() {
            return $;
        }
    }

}
