// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.user.inputs.UserPasswordHashArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Administrator roles assigned to User.
     * - `DEPRECATED`: Please replace usage with the `okta.UserAdminRoles` resource.
     * 
     * @deprecated
     * The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles`
     * 
     */
    @Deprecated /* The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles` */
    @Import(name="adminRoles")
    private @Nullable Output<List<String>> adminRoles;

    /**
     * @return Administrator roles assigned to User.
     * - `DEPRECATED`: Please replace usage with the `okta.UserAdminRoles` resource.
     * 
     * @deprecated
     * The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles`
     * 
     */
    @Deprecated /* The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles` */
    public Optional<Output<List<String>>> adminRoles() {
        return Optional.ofNullable(this.adminRoles);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="costCenter")
    private @Nullable Output<String> costCenter;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> costCenter() {
        return Optional.ofNullable(this.costCenter);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * raw JSON containing all custom profile attributes.
     * 
     */
    @Import(name="customProfileAttributes")
    private @Nullable Output<String> customProfileAttributes;

    /**
     * @return raw JSON containing all custom profile attributes.
     * 
     */
    public Optional<Output<String>> customProfileAttributes() {
        return Optional.ofNullable(this.customProfileAttributes);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="department")
    private @Nullable Output<String> department;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="division")
    private @Nullable Output<String> division;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> division() {
        return Optional.ofNullable(this.division);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return User profile property.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="employeeNumber")
    private @Nullable Output<String> employeeNumber;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> employeeNumber() {
        return Optional.ofNullable(this.employeeNumber);
    }

    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used
     * when user is being created and works only when `password` field is set. Default is `false`.
     * 
     */
    @Import(name="expirePasswordOnCreate")
    private @Nullable Output<Boolean> expirePasswordOnCreate;

    /**
     * @return If set to `true`, the user will have to change the password at the next login. This property will be used
     * when user is being created and works only when `password` field is set. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> expirePasswordOnCreate() {
        return Optional.ofNullable(this.expirePasswordOnCreate);
    }

    /**
     * User&#39;s First Name, required by default.
     * 
     */
    @Import(name="firstName", required=true)
    private Output<String> firstName;

    /**
     * @return User&#39;s First Name, required by default.
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }

    /**
     * User profile property.
     * 
     * @deprecated
     * The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships`
     * 
     */
    @Deprecated /* The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships` */
    @Import(name="groupMemberships")
    private @Nullable Output<List<String>> groupMemberships;

    /**
     * @return User profile property.
     * 
     * @deprecated
     * The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships`
     * 
     */
    @Deprecated /* The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships` */
    public Optional<Output<List<String>>> groupMemberships() {
        return Optional.ofNullable(this.groupMemberships);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="honorificPrefix")
    private @Nullable Output<String> honorificPrefix;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> honorificPrefix() {
        return Optional.ofNullable(this.honorificPrefix);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="honorificSuffix")
    private @Nullable Output<String> honorificSuffix;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> honorificSuffix() {
        return Optional.ofNullable(this.honorificSuffix);
    }

    /**
     * User&#39;s Last Name, required by default.
     * 
     */
    @Import(name="lastName", required=true)
    private Output<String> lastName;

    /**
     * @return User&#39;s Last Name, required by default.
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="locale")
    private @Nullable Output<String> locale;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> locale() {
        return Optional.ofNullable(this.locale);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="login", required=true)
    private Output<String> login;

    /**
     * @return User profile property.
     * 
     */
    public Output<String> login() {
        return this.login;
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="manager")
    private @Nullable Output<String> manager;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> manager() {
        return Optional.ofNullable(this.manager);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="managerId")
    private @Nullable Output<String> managerId;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> managerId() {
        return Optional.ofNullable(this.managerId);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="middleName")
    private @Nullable Output<String> middleName;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> middleName() {
        return Optional.ofNullable(this.middleName);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="mobilePhone")
    private @Nullable Output<String> mobilePhone;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> mobilePhone() {
        return Optional.ofNullable(this.mobilePhone);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="nickName")
    private @Nullable Output<String> nickName;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> nickName() {
        return Optional.ofNullable(this.nickName);
    }

    /**
     * Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
     * outside the provider. After successful password change this field should be removed and `password` field should be used
     * for further changes.
     * 
     */
    @Import(name="oldPassword")
    private @Nullable Output<String> oldPassword;

    /**
     * @return Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
     * outside the provider. After successful password change this field should be removed and `password` field should be used
     * for further changes.
     * 
     */
    public Optional<Output<String>> oldPassword() {
        return Optional.ofNullable(this.oldPassword);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * User password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return User password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Specifies a hashed password to import into Okta.
     * 
     */
    @Import(name="passwordHash")
    private @Nullable Output<UserPasswordHashArgs> passwordHash;

    /**
     * @return Specifies a hashed password to import into Okta.
     * 
     */
    public Optional<Output<UserPasswordHashArgs>> passwordHash() {
        return Optional.ofNullable(this.passwordHash);
    }

    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification
     * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
     * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
     * field should not be specified when using Password Import Inline Hook.
     * 
     */
    @Import(name="passwordInlineHook")
    private @Nullable Output<String> passwordInlineHook;

    /**
     * @return Specifies that a Password Import Inline Hook should be triggered to handle verification
     * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
     * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
     * field should not be specified when using Password Import Inline Hook.
     * 
     */
    public Optional<Output<String>> passwordInlineHook() {
        return Optional.ofNullable(this.passwordInlineHook);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="postalAddress")
    private @Nullable Output<String> postalAddress;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> postalAddress() {
        return Optional.ofNullable(this.postalAddress);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="preferredLanguage")
    private @Nullable Output<String> preferredLanguage;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> preferredLanguage() {
        return Optional.ofNullable(this.preferredLanguage);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="primaryPhone")
    private @Nullable Output<String> primaryPhone;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> primaryPhone() {
        return Optional.ofNullable(this.primaryPhone);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="profileUrl")
    private @Nullable Output<String> profileUrl;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> profileUrl() {
        return Optional.ofNullable(this.profileUrl);
    }

    /**
     * User password recovery answer.
     * 
     */
    @Import(name="recoveryAnswer")
    private @Nullable Output<String> recoveryAnswer;

    /**
     * @return User password recovery answer.
     * 
     */
    public Optional<Output<String>> recoveryAnswer() {
        return Optional.ofNullable(this.recoveryAnswer);
    }

    /**
     * User password recovery question.
     * 
     */
    @Import(name="recoveryQuestion")
    private @Nullable Output<String> recoveryQuestion;

    /**
     * @return User password recovery question.
     * 
     */
    public Optional<Output<String>> recoveryQuestion() {
        return Optional.ofNullable(this.recoveryQuestion);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="secondEmail")
    private @Nullable Output<String> secondEmail;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> secondEmail() {
        return Optional.ofNullable(this.secondEmail);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="streetAddress")
    private @Nullable Output<String> streetAddress;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> streetAddress() {
        return Optional.ofNullable(this.streetAddress);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    /**
     * User profile property.
     * 
     */
    @Import(name="zipCode")
    private @Nullable Output<String> zipCode;

    /**
     * @return User profile property.
     * 
     */
    public Optional<Output<String>> zipCode() {
        return Optional.ofNullable(this.zipCode);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.adminRoles = $.adminRoles;
        this.city = $.city;
        this.costCenter = $.costCenter;
        this.countryCode = $.countryCode;
        this.customProfileAttributes = $.customProfileAttributes;
        this.department = $.department;
        this.displayName = $.displayName;
        this.division = $.division;
        this.email = $.email;
        this.employeeNumber = $.employeeNumber;
        this.expirePasswordOnCreate = $.expirePasswordOnCreate;
        this.firstName = $.firstName;
        this.groupMemberships = $.groupMemberships;
        this.honorificPrefix = $.honorificPrefix;
        this.honorificSuffix = $.honorificSuffix;
        this.lastName = $.lastName;
        this.locale = $.locale;
        this.login = $.login;
        this.manager = $.manager;
        this.managerId = $.managerId;
        this.middleName = $.middleName;
        this.mobilePhone = $.mobilePhone;
        this.nickName = $.nickName;
        this.oldPassword = $.oldPassword;
        this.organization = $.organization;
        this.password = $.password;
        this.passwordHash = $.passwordHash;
        this.passwordInlineHook = $.passwordInlineHook;
        this.postalAddress = $.postalAddress;
        this.preferredLanguage = $.preferredLanguage;
        this.primaryPhone = $.primaryPhone;
        this.profileUrl = $.profileUrl;
        this.recoveryAnswer = $.recoveryAnswer;
        this.recoveryQuestion = $.recoveryQuestion;
        this.secondEmail = $.secondEmail;
        this.state = $.state;
        this.status = $.status;
        this.streetAddress = $.streetAddress;
        this.timezone = $.timezone;
        this.title = $.title;
        this.userType = $.userType;
        this.zipCode = $.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRoles Administrator roles assigned to User.
         * - `DEPRECATED`: Please replace usage with the `okta.UserAdminRoles` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles`
         * 
         */
        @Deprecated /* The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles` */
        public Builder adminRoles(@Nullable Output<List<String>> adminRoles) {
            $.adminRoles = adminRoles;
            return this;
        }

        /**
         * @param adminRoles Administrator roles assigned to User.
         * - `DEPRECATED`: Please replace usage with the `okta.UserAdminRoles` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles`
         * 
         */
        @Deprecated /* The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles` */
        public Builder adminRoles(List<String> adminRoles) {
            return adminRoles(Output.of(adminRoles));
        }

        /**
         * @param adminRoles Administrator roles assigned to User.
         * - `DEPRECATED`: Please replace usage with the `okta.UserAdminRoles` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles`
         * 
         */
        @Deprecated /* The `admin_roles` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_admin_roles` */
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }

        /**
         * @param city User profile property.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city User profile property.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param costCenter User profile property.
         * 
         * @return builder
         * 
         */
        public Builder costCenter(@Nullable Output<String> costCenter) {
            $.costCenter = costCenter;
            return this;
        }

        /**
         * @param costCenter User profile property.
         * 
         * @return builder
         * 
         */
        public Builder costCenter(String costCenter) {
            return costCenter(Output.of(costCenter));
        }

        /**
         * @param countryCode User profile property.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode User profile property.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param customProfileAttributes raw JSON containing all custom profile attributes.
         * 
         * @return builder
         * 
         */
        public Builder customProfileAttributes(@Nullable Output<String> customProfileAttributes) {
            $.customProfileAttributes = customProfileAttributes;
            return this;
        }

        /**
         * @param customProfileAttributes raw JSON containing all custom profile attributes.
         * 
         * @return builder
         * 
         */
        public Builder customProfileAttributes(String customProfileAttributes) {
            return customProfileAttributes(Output.of(customProfileAttributes));
        }

        /**
         * @param department User profile property.
         * 
         * @return builder
         * 
         */
        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        /**
         * @param department User profile property.
         * 
         * @return builder
         * 
         */
        public Builder department(String department) {
            return department(Output.of(department));
        }

        /**
         * @param displayName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param division User profile property.
         * 
         * @return builder
         * 
         */
        public Builder division(@Nullable Output<String> division) {
            $.division = division;
            return this;
        }

        /**
         * @param division User profile property.
         * 
         * @return builder
         * 
         */
        public Builder division(String division) {
            return division(Output.of(division));
        }

        /**
         * @param email User profile property.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email User profile property.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param employeeNumber User profile property.
         * 
         * @return builder
         * 
         */
        public Builder employeeNumber(@Nullable Output<String> employeeNumber) {
            $.employeeNumber = employeeNumber;
            return this;
        }

        /**
         * @param employeeNumber User profile property.
         * 
         * @return builder
         * 
         */
        public Builder employeeNumber(String employeeNumber) {
            return employeeNumber(Output.of(employeeNumber));
        }

        /**
         * @param expirePasswordOnCreate If set to `true`, the user will have to change the password at the next login. This property will be used
         * when user is being created and works only when `password` field is set. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder expirePasswordOnCreate(@Nullable Output<Boolean> expirePasswordOnCreate) {
            $.expirePasswordOnCreate = expirePasswordOnCreate;
            return this;
        }

        /**
         * @param expirePasswordOnCreate If set to `true`, the user will have to change the password at the next login. This property will be used
         * when user is being created and works only when `password` field is set. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder expirePasswordOnCreate(Boolean expirePasswordOnCreate) {
            return expirePasswordOnCreate(Output.of(expirePasswordOnCreate));
        }

        /**
         * @param firstName User&#39;s First Name, required by default.
         * 
         * @return builder
         * 
         */
        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User&#39;s First Name, required by default.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param groupMemberships User profile property.
         * 
         * @return builder
         * 
         * @deprecated
         * The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships`
         * 
         */
        @Deprecated /* The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships` */
        public Builder groupMemberships(@Nullable Output<List<String>> groupMemberships) {
            $.groupMemberships = groupMemberships;
            return this;
        }

        /**
         * @param groupMemberships User profile property.
         * 
         * @return builder
         * 
         * @deprecated
         * The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships`
         * 
         */
        @Deprecated /* The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships` */
        public Builder groupMemberships(List<String> groupMemberships) {
            return groupMemberships(Output.of(groupMemberships));
        }

        /**
         * @param groupMemberships User profile property.
         * 
         * @return builder
         * 
         * @deprecated
         * The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships`
         * 
         */
        @Deprecated /* The `group_memberships` field is now deprecated for the resource `okta_user`, please replace all uses of this with: `okta_user_group_memberships` */
        public Builder groupMemberships(String... groupMemberships) {
            return groupMemberships(List.of(groupMemberships));
        }

        /**
         * @param honorificPrefix User profile property.
         * 
         * @return builder
         * 
         */
        public Builder honorificPrefix(@Nullable Output<String> honorificPrefix) {
            $.honorificPrefix = honorificPrefix;
            return this;
        }

        /**
         * @param honorificPrefix User profile property.
         * 
         * @return builder
         * 
         */
        public Builder honorificPrefix(String honorificPrefix) {
            return honorificPrefix(Output.of(honorificPrefix));
        }

        /**
         * @param honorificSuffix User profile property.
         * 
         * @return builder
         * 
         */
        public Builder honorificSuffix(@Nullable Output<String> honorificSuffix) {
            $.honorificSuffix = honorificSuffix;
            return this;
        }

        /**
         * @param honorificSuffix User profile property.
         * 
         * @return builder
         * 
         */
        public Builder honorificSuffix(String honorificSuffix) {
            return honorificSuffix(Output.of(honorificSuffix));
        }

        /**
         * @param lastName User&#39;s Last Name, required by default.
         * 
         * @return builder
         * 
         */
        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User&#39;s Last Name, required by default.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param locale User profile property.
         * 
         * @return builder
         * 
         */
        public Builder locale(@Nullable Output<String> locale) {
            $.locale = locale;
            return this;
        }

        /**
         * @param locale User profile property.
         * 
         * @return builder
         * 
         */
        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        /**
         * @param login User profile property.
         * 
         * @return builder
         * 
         */
        public Builder login(Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login User profile property.
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param manager User profile property.
         * 
         * @return builder
         * 
         */
        public Builder manager(@Nullable Output<String> manager) {
            $.manager = manager;
            return this;
        }

        /**
         * @param manager User profile property.
         * 
         * @return builder
         * 
         */
        public Builder manager(String manager) {
            return manager(Output.of(manager));
        }

        /**
         * @param managerId User profile property.
         * 
         * @return builder
         * 
         */
        public Builder managerId(@Nullable Output<String> managerId) {
            $.managerId = managerId;
            return this;
        }

        /**
         * @param managerId User profile property.
         * 
         * @return builder
         * 
         */
        public Builder managerId(String managerId) {
            return managerId(Output.of(managerId));
        }

        /**
         * @param middleName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder middleName(@Nullable Output<String> middleName) {
            $.middleName = middleName;
            return this;
        }

        /**
         * @param middleName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder middleName(String middleName) {
            return middleName(Output.of(middleName));
        }

        /**
         * @param mobilePhone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(@Nullable Output<String> mobilePhone) {
            $.mobilePhone = mobilePhone;
            return this;
        }

        /**
         * @param mobilePhone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(String mobilePhone) {
            return mobilePhone(Output.of(mobilePhone));
        }

        /**
         * @param nickName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder nickName(@Nullable Output<String> nickName) {
            $.nickName = nickName;
            return this;
        }

        /**
         * @param nickName User profile property.
         * 
         * @return builder
         * 
         */
        public Builder nickName(String nickName) {
            return nickName(Output.of(nickName));
        }

        /**
         * @param oldPassword Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
         * outside the provider. After successful password change this field should be removed and `password` field should be used
         * for further changes.
         * 
         * @return builder
         * 
         */
        public Builder oldPassword(@Nullable Output<String> oldPassword) {
            $.oldPassword = oldPassword;
            return this;
        }

        /**
         * @param oldPassword Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
         * outside the provider. After successful password change this field should be removed and `password` field should be used
         * for further changes.
         * 
         * @return builder
         * 
         */
        public Builder oldPassword(String oldPassword) {
            return oldPassword(Output.of(oldPassword));
        }

        /**
         * @param organization User profile property.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization User profile property.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param password User password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password User password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordHash Specifies a hashed password to import into Okta.
         * 
         * @return builder
         * 
         */
        public Builder passwordHash(@Nullable Output<UserPasswordHashArgs> passwordHash) {
            $.passwordHash = passwordHash;
            return this;
        }

        /**
         * @param passwordHash Specifies a hashed password to import into Okta.
         * 
         * @return builder
         * 
         */
        public Builder passwordHash(UserPasswordHashArgs passwordHash) {
            return passwordHash(Output.of(passwordHash));
        }

        /**
         * @param passwordInlineHook Specifies that a Password Import Inline Hook should be triggered to handle verification
         * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
         * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
         * field should not be specified when using Password Import Inline Hook.
         * 
         * @return builder
         * 
         */
        public Builder passwordInlineHook(@Nullable Output<String> passwordInlineHook) {
            $.passwordInlineHook = passwordInlineHook;
            return this;
        }

        /**
         * @param passwordInlineHook Specifies that a Password Import Inline Hook should be triggered to handle verification
         * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
         * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
         * field should not be specified when using Password Import Inline Hook.
         * 
         * @return builder
         * 
         */
        public Builder passwordInlineHook(String passwordInlineHook) {
            return passwordInlineHook(Output.of(passwordInlineHook));
        }

        /**
         * @param postalAddress User profile property.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(@Nullable Output<String> postalAddress) {
            $.postalAddress = postalAddress;
            return this;
        }

        /**
         * @param postalAddress User profile property.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(String postalAddress) {
            return postalAddress(Output.of(postalAddress));
        }

        /**
         * @param preferredLanguage User profile property.
         * 
         * @return builder
         * 
         */
        public Builder preferredLanguage(@Nullable Output<String> preferredLanguage) {
            $.preferredLanguage = preferredLanguage;
            return this;
        }

        /**
         * @param preferredLanguage User profile property.
         * 
         * @return builder
         * 
         */
        public Builder preferredLanguage(String preferredLanguage) {
            return preferredLanguage(Output.of(preferredLanguage));
        }

        /**
         * @param primaryPhone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder primaryPhone(@Nullable Output<String> primaryPhone) {
            $.primaryPhone = primaryPhone;
            return this;
        }

        /**
         * @param primaryPhone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder primaryPhone(String primaryPhone) {
            return primaryPhone(Output.of(primaryPhone));
        }

        /**
         * @param profileUrl User profile property.
         * 
         * @return builder
         * 
         */
        public Builder profileUrl(@Nullable Output<String> profileUrl) {
            $.profileUrl = profileUrl;
            return this;
        }

        /**
         * @param profileUrl User profile property.
         * 
         * @return builder
         * 
         */
        public Builder profileUrl(String profileUrl) {
            return profileUrl(Output.of(profileUrl));
        }

        /**
         * @param recoveryAnswer User password recovery answer.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAnswer(@Nullable Output<String> recoveryAnswer) {
            $.recoveryAnswer = recoveryAnswer;
            return this;
        }

        /**
         * @param recoveryAnswer User password recovery answer.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAnswer(String recoveryAnswer) {
            return recoveryAnswer(Output.of(recoveryAnswer));
        }

        /**
         * @param recoveryQuestion User password recovery question.
         * 
         * @return builder
         * 
         */
        public Builder recoveryQuestion(@Nullable Output<String> recoveryQuestion) {
            $.recoveryQuestion = recoveryQuestion;
            return this;
        }

        /**
         * @param recoveryQuestion User password recovery question.
         * 
         * @return builder
         * 
         */
        public Builder recoveryQuestion(String recoveryQuestion) {
            return recoveryQuestion(Output.of(recoveryQuestion));
        }

        /**
         * @param secondEmail User profile property.
         * 
         * @return builder
         * 
         */
        public Builder secondEmail(@Nullable Output<String> secondEmail) {
            $.secondEmail = secondEmail;
            return this;
        }

        /**
         * @param secondEmail User profile property.
         * 
         * @return builder
         * 
         */
        public Builder secondEmail(String secondEmail) {
            return secondEmail(Output.of(secondEmail));
        }

        /**
         * @param state User profile property.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state User profile property.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param streetAddress User profile property.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(@Nullable Output<String> streetAddress) {
            $.streetAddress = streetAddress;
            return this;
        }

        /**
         * @param streetAddress User profile property.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(String streetAddress) {
            return streetAddress(Output.of(streetAddress));
        }

        /**
         * @param timezone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone User profile property.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param title User profile property.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title User profile property.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param userType User profile property.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType User profile property.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        /**
         * @param zipCode User profile property.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(@Nullable Output<String> zipCode) {
            $.zipCode = zipCode;
            return this;
        }

        /**
         * @param zipCode User profile property.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(String zipCode) {
            return zipCode(Output.of(zipCode));
        }

        public UserArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.firstName = Objects.requireNonNull($.firstName, "expected parameter 'firstName' to be non-null");
            $.lastName = Objects.requireNonNull($.lastName, "expected parameter 'lastName' to be non-null");
            $.login = Objects.requireNonNull($.login, "expected parameter 'login' to be non-null");
            return $;
        }
    }

}
