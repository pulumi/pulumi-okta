// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.policy.inputs.RuleSignonFactorSequenceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleSignonState extends com.pulumi.resources.ResourceArgs {

    public static final RuleSignonState Empty = new RuleSignonState();

    /**
     * Allow or deny access based on the rule conditions: `&#34;ALLOW&#34;`, `&#34;DENY&#34;` or `&#34;CHALLENGE&#34;`. The default is `&#34;ALLOW&#34;`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return Allow or deny access based on the rule conditions: `&#34;ALLOW&#34;`, `&#34;DENY&#34;` or `&#34;CHALLENGE&#34;`. The default is `&#34;ALLOW&#34;`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * Authentication entrypoint: `&#34;ANY&#34;`, `&#34;LDAP_INTERFACE&#34;` or `&#34;RADIUS&#34;`.
     * 
     */
    @Import(name="authtype")
    private @Nullable Output<String> authtype;

    /**
     * @return Authentication entrypoint: `&#34;ANY&#34;`, `&#34;LDAP_INTERFACE&#34;` or `&#34;RADIUS&#34;`.
     * 
     */
    public Optional<Output<String>> authtype() {
        return Optional.ofNullable(this.authtype);
    }

    /**
     * List of behavior IDs.
     * 
     */
    @Import(name="behaviors")
    private @Nullable Output<List<String>> behaviors;

    /**
     * @return List of behavior IDs.
     * 
     */
    public Optional<Output<List<String>>> behaviors() {
        return Optional.ofNullable(this.behaviors);
    }

    /**
     * Auth factor sequences. Should be set if `access = &#34;CHALLENGE&#34;`.
     * 
     */
    @Import(name="factorSequences")
    private @Nullable Output<List<RuleSignonFactorSequenceArgs>> factorSequences;

    /**
     * @return Auth factor sequences. Should be set if `access = &#34;CHALLENGE&#34;`.
     * 
     */
    public Optional<Output<List<RuleSignonFactorSequenceArgs>>> factorSequences() {
        return Optional.ofNullable(this.factorSequences);
    }

    /**
     * Defines the identity provider for this rule. Valid values are `&#34;ANY&#34;`, `&#34;OKTA&#34;`, and `&#34;SPECIFIC_IDP&#34;`.
     * 
     * &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
     * 
     */
    @Import(name="identityProvider")
    private @Nullable Output<String> identityProvider;

    /**
     * @return Defines the identity provider for this rule. Valid values are `&#34;ANY&#34;`, `&#34;OKTA&#34;`, and `&#34;SPECIFIC_IDP&#34;`.
     * 
     * &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
     * 
     */
    public Optional<Output<String>> identityProvider() {
        return Optional.ofNullable(this.identityProvider);
    }

    /**
     * When identity_provider is `&#34;SPECIFIC_IDP&#34;` then this is the list of IdP IDs to apply the rule on.
     * 
     */
    @Import(name="identityProviderIds")
    private @Nullable Output<List<String>> identityProviderIds;

    /**
     * @return When identity_provider is `&#34;SPECIFIC_IDP&#34;` then this is the list of IdP IDs to apply the rule on.
     * 
     */
    public Optional<Output<List<String>>> identityProviderIds() {
        return Optional.ofNullable(this.identityProviderIds);
    }

    /**
     * Elapsed time before the next MFA challenge.
     * 
     */
    @Import(name="mfaLifetime")
    private @Nullable Output<Integer> mfaLifetime;

    /**
     * @return Elapsed time before the next MFA challenge.
     * 
     */
    public Optional<Output<Integer>> mfaLifetime() {
        return Optional.ofNullable(this.mfaLifetime);
    }

    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `&#34;DEVICE&#34;`, `&#34;SESSION&#34;` or `&#34;ALWAYS&#34;`.
     * 
     */
    @Import(name="mfaPrompt")
    private @Nullable Output<String> mfaPrompt;

    /**
     * @return Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `&#34;DEVICE&#34;`, `&#34;SESSION&#34;` or `&#34;ALWAYS&#34;`.
     * 
     */
    public Optional<Output<String>> mfaPrompt() {
        return Optional.ofNullable(this.mfaPrompt);
    }

    /**
     * Remember MFA device. The default `false`.
     * 
     */
    @Import(name="mfaRememberDevice")
    private @Nullable Output<Boolean> mfaRememberDevice;

    /**
     * @return Remember MFA device. The default `false`.
     * 
     */
    public Optional<Output<Boolean>> mfaRememberDevice() {
        return Optional.ofNullable(this.mfaRememberDevice);
    }

    /**
     * Require MFA. By default is `false`.
     * 
     */
    @Import(name="mfaRequired")
    private @Nullable Output<Boolean> mfaRequired;

    /**
     * @return Require MFA. By default is `false`.
     * 
     */
    public Optional<Output<Boolean>> mfaRequired() {
        return Optional.ofNullable(this.mfaRequired);
    }

    /**
     * Policy Rule Name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy Rule Name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    @Import(name="networkConnection")
    private @Nullable Output<String> networkConnection;

    /**
     * @return Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    public Optional<Output<String>> networkConnection() {
        return Optional.ofNullable(this.networkConnection);
    }

    /**
     * The network zones to exclude. Conflicts with `network_includes`.
     * 
     */
    @Import(name="networkExcludes")
    private @Nullable Output<List<String>> networkExcludes;

    /**
     * @return The network zones to exclude. Conflicts with `network_includes`.
     * 
     */
    public Optional<Output<List<String>>> networkExcludes() {
        return Optional.ofNullable(this.networkExcludes);
    }

    /**
     * The network zones to include. Conflicts with `network_excludes`.
     * 
     */
    @Import(name="networkIncludes")
    private @Nullable Output<List<String>> networkIncludes;

    /**
     * @return The network zones to include. Conflicts with `network_excludes`.
     * 
     */
    public Optional<Output<List<String>>> networkIncludes() {
        return Optional.ofNullable(this.networkIncludes);
    }

    /**
     * Policy ID.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return Policy ID.
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
     * `&#34;PASSWORD_IDP_ANY_FACTOR&#34;`, `&#34;PASSWORD_IDP&#34;`.
     * 
     */
    @Import(name="primaryFactor")
    private @Nullable Output<String> primaryFactor;

    /**
     * @return Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
     * `&#34;PASSWORD_IDP_ANY_FACTOR&#34;`, `&#34;PASSWORD_IDP&#34;`.
     * 
     */
    public Optional<Output<String>> primaryFactor() {
        return Optional.ofNullable(this.primaryFactor);
    }

    /**
     * Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Risc level: `&#34;ANY&#34;`, `&#34;LOW&#34;`, `&#34;MEDIUM&#34;` or `&#34;HIGH&#34;`. Default is `&#34;ANY&#34;`. It can be also
     * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
     * 
     * @deprecated
     * Attribute typo, switch to risk_level instead. Default: `ANY`
     * 
     */
    @Deprecated /* Attribute typo, switch to risk_level instead. Default: `ANY` */
    @Import(name="riscLevel")
    private @Nullable Output<String> riscLevel;

    /**
     * @return Risc level: `&#34;ANY&#34;`, `&#34;LOW&#34;`, `&#34;MEDIUM&#34;` or `&#34;HIGH&#34;`. Default is `&#34;ANY&#34;`. It can be also
     * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
     * 
     * @deprecated
     * Attribute typo, switch to risk_level instead. Default: `ANY`
     * 
     */
    @Deprecated /* Attribute typo, switch to risk_level instead. Default: `ANY` */
    public Optional<Output<String>> riscLevel() {
        return Optional.ofNullable(this.riscLevel);
    }

    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     */
    @Import(name="riskLevel")
    private @Nullable Output<String> riskLevel;

    /**
     * @return Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     */
    public Optional<Output<String>> riskLevel() {
        return Optional.ofNullable(this.riskLevel);
    }

    /**
     * Max minutes a session can be idle.,
     * 
     */
    @Import(name="sessionIdle")
    private @Nullable Output<Integer> sessionIdle;

    /**
     * @return Max minutes a session can be idle.,
     * 
     */
    public Optional<Output<Integer>> sessionIdle() {
        return Optional.ofNullable(this.sessionIdle);
    }

    /**
     * Max minutes a session is active: Disable = 0.
     * 
     */
    @Import(name="sessionLifetime")
    private @Nullable Output<Integer> sessionLifetime;

    /**
     * @return Max minutes a session is active: Disable = 0.
     * 
     */
    public Optional<Output<Integer>> sessionLifetime() {
        return Optional.ofNullable(this.sessionLifetime);
    }

    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
     * 
     */
    @Import(name="sessionPersistent")
    private @Nullable Output<Boolean> sessionPersistent;

    /**
     * @return Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
     * 
     */
    public Optional<Output<Boolean>> sessionPersistent() {
        return Optional.ofNullable(this.sessionPersistent);
    }

    /**
     * Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of user IDs that would be excluded when rules are processed.
     * 
     */
    @Import(name="usersExcludeds")
    private @Nullable Output<List<String>> usersExcludeds;

    /**
     * @return The list of user IDs that would be excluded when rules are processed.
     * 
     */
    public Optional<Output<List<String>>> usersExcludeds() {
        return Optional.ofNullable(this.usersExcludeds);
    }

    private RuleSignonState() {}

    private RuleSignonState(RuleSignonState $) {
        this.access = $.access;
        this.authtype = $.authtype;
        this.behaviors = $.behaviors;
        this.factorSequences = $.factorSequences;
        this.identityProvider = $.identityProvider;
        this.identityProviderIds = $.identityProviderIds;
        this.mfaLifetime = $.mfaLifetime;
        this.mfaPrompt = $.mfaPrompt;
        this.mfaRememberDevice = $.mfaRememberDevice;
        this.mfaRequired = $.mfaRequired;
        this.name = $.name;
        this.networkConnection = $.networkConnection;
        this.networkExcludes = $.networkExcludes;
        this.networkIncludes = $.networkIncludes;
        this.policyId = $.policyId;
        this.primaryFactor = $.primaryFactor;
        this.priority = $.priority;
        this.riscLevel = $.riscLevel;
        this.riskLevel = $.riskLevel;
        this.sessionIdle = $.sessionIdle;
        this.sessionLifetime = $.sessionLifetime;
        this.sessionPersistent = $.sessionPersistent;
        this.status = $.status;
        this.usersExcludeds = $.usersExcludeds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleSignonState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleSignonState $;

        public Builder() {
            $ = new RuleSignonState();
        }

        public Builder(RuleSignonState defaults) {
            $ = new RuleSignonState(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Allow or deny access based on the rule conditions: `&#34;ALLOW&#34;`, `&#34;DENY&#34;` or `&#34;CHALLENGE&#34;`. The default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Allow or deny access based on the rule conditions: `&#34;ALLOW&#34;`, `&#34;DENY&#34;` or `&#34;CHALLENGE&#34;`. The default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param authtype Authentication entrypoint: `&#34;ANY&#34;`, `&#34;LDAP_INTERFACE&#34;` or `&#34;RADIUS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder authtype(@Nullable Output<String> authtype) {
            $.authtype = authtype;
            return this;
        }

        /**
         * @param authtype Authentication entrypoint: `&#34;ANY&#34;`, `&#34;LDAP_INTERFACE&#34;` or `&#34;RADIUS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder authtype(String authtype) {
            return authtype(Output.of(authtype));
        }

        /**
         * @param behaviors List of behavior IDs.
         * 
         * @return builder
         * 
         */
        public Builder behaviors(@Nullable Output<List<String>> behaviors) {
            $.behaviors = behaviors;
            return this;
        }

        /**
         * @param behaviors List of behavior IDs.
         * 
         * @return builder
         * 
         */
        public Builder behaviors(List<String> behaviors) {
            return behaviors(Output.of(behaviors));
        }

        /**
         * @param behaviors List of behavior IDs.
         * 
         * @return builder
         * 
         */
        public Builder behaviors(String... behaviors) {
            return behaviors(List.of(behaviors));
        }

        /**
         * @param factorSequences Auth factor sequences. Should be set if `access = &#34;CHALLENGE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder factorSequences(@Nullable Output<List<RuleSignonFactorSequenceArgs>> factorSequences) {
            $.factorSequences = factorSequences;
            return this;
        }

        /**
         * @param factorSequences Auth factor sequences. Should be set if `access = &#34;CHALLENGE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder factorSequences(List<RuleSignonFactorSequenceArgs> factorSequences) {
            return factorSequences(Output.of(factorSequences));
        }

        /**
         * @param factorSequences Auth factor sequences. Should be set if `access = &#34;CHALLENGE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder factorSequences(RuleSignonFactorSequenceArgs... factorSequences) {
            return factorSequences(List.of(factorSequences));
        }

        /**
         * @param identityProvider Defines the identity provider for this rule. Valid values are `&#34;ANY&#34;`, `&#34;OKTA&#34;`, and `&#34;SPECIFIC_IDP&#34;`.
         * 
         * &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(@Nullable Output<String> identityProvider) {
            $.identityProvider = identityProvider;
            return this;
        }

        /**
         * @param identityProvider Defines the identity provider for this rule. Valid values are `&#34;ANY&#34;`, `&#34;OKTA&#34;`, and `&#34;SPECIFIC_IDP&#34;`.
         * 
         * &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(String identityProvider) {
            return identityProvider(Output.of(identityProvider));
        }

        /**
         * @param identityProviderIds When identity_provider is `&#34;SPECIFIC_IDP&#34;` then this is the list of IdP IDs to apply the rule on.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderIds(@Nullable Output<List<String>> identityProviderIds) {
            $.identityProviderIds = identityProviderIds;
            return this;
        }

        /**
         * @param identityProviderIds When identity_provider is `&#34;SPECIFIC_IDP&#34;` then this is the list of IdP IDs to apply the rule on.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderIds(List<String> identityProviderIds) {
            return identityProviderIds(Output.of(identityProviderIds));
        }

        /**
         * @param identityProviderIds When identity_provider is `&#34;SPECIFIC_IDP&#34;` then this is the list of IdP IDs to apply the rule on.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderIds(String... identityProviderIds) {
            return identityProviderIds(List.of(identityProviderIds));
        }

        /**
         * @param mfaLifetime Elapsed time before the next MFA challenge.
         * 
         * @return builder
         * 
         */
        public Builder mfaLifetime(@Nullable Output<Integer> mfaLifetime) {
            $.mfaLifetime = mfaLifetime;
            return this;
        }

        /**
         * @param mfaLifetime Elapsed time before the next MFA challenge.
         * 
         * @return builder
         * 
         */
        public Builder mfaLifetime(Integer mfaLifetime) {
            return mfaLifetime(Output.of(mfaLifetime));
        }

        /**
         * @param mfaPrompt Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `&#34;DEVICE&#34;`, `&#34;SESSION&#34;` or `&#34;ALWAYS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder mfaPrompt(@Nullable Output<String> mfaPrompt) {
            $.mfaPrompt = mfaPrompt;
            return this;
        }

        /**
         * @param mfaPrompt Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `&#34;DEVICE&#34;`, `&#34;SESSION&#34;` or `&#34;ALWAYS&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder mfaPrompt(String mfaPrompt) {
            return mfaPrompt(Output.of(mfaPrompt));
        }

        /**
         * @param mfaRememberDevice Remember MFA device. The default `false`.
         * 
         * @return builder
         * 
         */
        public Builder mfaRememberDevice(@Nullable Output<Boolean> mfaRememberDevice) {
            $.mfaRememberDevice = mfaRememberDevice;
            return this;
        }

        /**
         * @param mfaRememberDevice Remember MFA device. The default `false`.
         * 
         * @return builder
         * 
         */
        public Builder mfaRememberDevice(Boolean mfaRememberDevice) {
            return mfaRememberDevice(Output.of(mfaRememberDevice));
        }

        /**
         * @param mfaRequired Require MFA. By default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder mfaRequired(@Nullable Output<Boolean> mfaRequired) {
            $.mfaRequired = mfaRequired;
            return this;
        }

        /**
         * @param mfaRequired Require MFA. By default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder mfaRequired(Boolean mfaRequired) {
            return mfaRequired(Output.of(mfaRequired));
        }

        /**
         * @param name Policy Rule Name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy Rule Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(@Nullable Output<String> networkConnection) {
            $.networkConnection = networkConnection;
            return this;
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(String networkConnection) {
            return networkConnection(Output.of(networkConnection));
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(@Nullable Output<List<String>> networkExcludes) {
            $.networkExcludes = networkExcludes;
            return this;
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(List<String> networkExcludes) {
            return networkExcludes(Output.of(networkExcludes));
        }

        /**
         * @param networkExcludes The network zones to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(String... networkExcludes) {
            return networkExcludes(List.of(networkExcludes));
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(@Nullable Output<List<String>> networkIncludes) {
            $.networkIncludes = networkIncludes;
            return this;
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(List<String> networkIncludes) {
            return networkIncludes(Output.of(networkIncludes));
        }

        /**
         * @param networkIncludes The network zones to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(String... networkIncludes) {
            return networkIncludes(List.of(networkIncludes));
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param primaryFactor Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
         * `&#34;PASSWORD_IDP_ANY_FACTOR&#34;`, `&#34;PASSWORD_IDP&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder primaryFactor(@Nullable Output<String> primaryFactor) {
            $.primaryFactor = primaryFactor;
            return this;
        }

        /**
         * @param primaryFactor Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values:
         * `&#34;PASSWORD_IDP_ANY_FACTOR&#34;`, `&#34;PASSWORD_IDP&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder primaryFactor(String primaryFactor) {
            return primaryFactor(Output.of(primaryFactor));
        }

        /**
         * @param priority Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param riscLevel Risc level: `&#34;ANY&#34;`, `&#34;LOW&#34;`, `&#34;MEDIUM&#34;` or `&#34;HIGH&#34;`. Default is `&#34;ANY&#34;`. It can be also
         * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute typo, switch to risk_level instead. Default: `ANY`
         * 
         */
        @Deprecated /* Attribute typo, switch to risk_level instead. Default: `ANY` */
        public Builder riscLevel(@Nullable Output<String> riscLevel) {
            $.riscLevel = riscLevel;
            return this;
        }

        /**
         * @param riscLevel Risc level: `&#34;ANY&#34;`, `&#34;LOW&#34;`, `&#34;MEDIUM&#34;` or `&#34;HIGH&#34;`. Default is `&#34;ANY&#34;`. It can be also
         * set to an empty string in case `RISC_SCORING` org feature flag is disabled.
         * 
         * @return builder
         * 
         * @deprecated
         * Attribute typo, switch to risk_level instead. Default: `ANY`
         * 
         */
        @Deprecated /* Attribute typo, switch to risk_level instead. Default: `ANY` */
        public Builder riscLevel(String riscLevel) {
            return riscLevel(Output.of(riscLevel));
        }

        /**
         * @param riskLevel Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(@Nullable Output<String> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        /**
         * @param riskLevel Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(String riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        /**
         * @param sessionIdle Max minutes a session can be idle.,
         * 
         * @return builder
         * 
         */
        public Builder sessionIdle(@Nullable Output<Integer> sessionIdle) {
            $.sessionIdle = sessionIdle;
            return this;
        }

        /**
         * @param sessionIdle Max minutes a session can be idle.,
         * 
         * @return builder
         * 
         */
        public Builder sessionIdle(Integer sessionIdle) {
            return sessionIdle(Output.of(sessionIdle));
        }

        /**
         * @param sessionLifetime Max minutes a session is active: Disable = 0.
         * 
         * @return builder
         * 
         */
        public Builder sessionLifetime(@Nullable Output<Integer> sessionLifetime) {
            $.sessionLifetime = sessionLifetime;
            return this;
        }

        /**
         * @param sessionLifetime Max minutes a session is active: Disable = 0.
         * 
         * @return builder
         * 
         */
        public Builder sessionLifetime(Integer sessionLifetime) {
            return sessionLifetime(Output.of(sessionLifetime));
        }

        /**
         * @param sessionPersistent Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistent(@Nullable Output<Boolean> sessionPersistent) {
            $.sessionPersistent = sessionPersistent;
            return this;
        }

        /**
         * @param sessionPersistent Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies.
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistent(Boolean sessionPersistent) {
            return sessionPersistent(Output.of(sessionPersistent));
        }

        /**
         * @param status Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Policy Rule Status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param usersExcludeds The list of user IDs that would be excluded when rules are processed.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(@Nullable Output<List<String>> usersExcludeds) {
            $.usersExcludeds = usersExcludeds;
            return this;
        }

        /**
         * @param usersExcludeds The list of user IDs that would be excluded when rules are processed.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(List<String> usersExcludeds) {
            return usersExcludeds(Output.of(usersExcludeds));
        }

        /**
         * @param usersExcludeds The list of user IDs that would be excluded when rules are processed.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(String... usersExcludeds) {
            return usersExcludeds(List.of(usersExcludeds));
        }

        public RuleSignonState build() {
            return $;
        }
    }

}
