// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.okta.user.outputs.GetUserSearch;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return Administrator roles assigned to user.
     * 
     */
    private final List<String> adminRoles;
    /**
     * @return City or locality component of user&#39;s address.
     * 
     */
    private final String city;
    private final @Nullable String compoundSearchOperator;
    /**
     * @return Name of a cost center assigned to user.
     * 
     */
    private final String costCenter;
    /**
     * @return Country name component of user&#39;s address.
     * 
     */
    private final String countryCode;
    /**
     * @return Raw JSON containing all custom profile attributes.
     * 
     */
    private final String customProfileAttributes;
    private final @Nullable String delayReadSeconds;
    /**
     * @return Name of user&#39;s department.
     * 
     */
    private final String department;
    /**
     * @return Name of the user, suitable for display to end users.
     * 
     */
    private final String displayName;
    /**
     * @return Name of user&#39;s division.
     * 
     */
    private final String division;
    /**
     * @return Primary email address of user.
     * 
     */
    private final String email;
    /**
     * @return Organization or company assigned unique identifier for the user.
     * 
     */
    private final String employeeNumber;
    /**
     * @return Given name of the user.
     * 
     */
    private final String firstName;
    /**
     * @return Groups user belongs to.
     * 
     */
    private final List<String> groupMemberships;
    /**
     * @return Honorific prefix(es) of the user, or title in most Western languages.
     * 
     */
    private final String honorificPrefix;
    /**
     * @return Honorific suffix(es) of the user.
     * 
     */
    private final String honorificSuffix;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Family name of the user.
     * 
     */
    private final String lastName;
    /**
     * @return User&#39;s default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
     * 
     */
    private final String locale;
    /**
     * @return Unique identifier for the user.
     * 
     */
    private final String login;
    /**
     * @return Display name of the user&#39;s manager.
     * 
     */
    private final String manager;
    /**
     * @return `id` of a user&#39;s manager.
     * 
     */
    private final String managerId;
    /**
     * @return Middle name(s) of the user.
     * 
     */
    private final String middleName;
    /**
     * @return Mobile phone number of user.
     * 
     */
    private final String mobilePhone;
    /**
     * @return Casual way to address the user in real life.
     * 
     */
    private final String nickName;
    /**
     * @return Name of user&#39;s organization.
     * 
     */
    private final String organization;
    /**
     * @return Mailing address component of user&#39;s address.
     * 
     */
    private final String postalAddress;
    /**
     * @return User&#39;s preferred written or spoken languages.
     * 
     */
    private final String preferredLanguage;
    /**
     * @return Primary phone number of user such as home number.
     * 
     */
    private final String primaryPhone;
    /**
     * @return URL of user&#39;s online profile (e.g. a web page).
     * 
     */
    private final String profileUrl;
    private final @Nullable List<GetUserSearch> searches;
    /**
     * @return Secondary email address of user typically used for account recovery.
     * 
     */
    private final String secondEmail;
    private final @Nullable Boolean skipGroups;
    private final @Nullable Boolean skipRoles;
    /**
     * @return State or region component of user&#39;s address (region).
     * 
     */
    private final String state;
    /**
     * @return Current status of user.
     * 
     */
    private final String status;
    /**
     * @return Full street address component of user&#39;s address.
     * 
     */
    private final String streetAddress;
    /**
     * @return User&#39;s time zone.
     * 
     */
    private final String timezone;
    /**
     * @return User&#39;s title, such as &#34;Vice President&#34;.
     * 
     */
    private final String title;
    private final @Nullable String userId;
    /**
     * @return Used to describe the organization to user relationship such as &#34;Employee&#34; or &#34;Contractor&#34;.
     * 
     */
    private final String userType;
    /**
     * @return Zipcode or postal code component of user&#39;s address (postalCode)
     * 
     */
    private final String zipCode;

    @CustomType.Constructor
    private GetUserResult(
        @CustomType.Parameter("adminRoles") List<String> adminRoles,
        @CustomType.Parameter("city") String city,
        @CustomType.Parameter("compoundSearchOperator") @Nullable String compoundSearchOperator,
        @CustomType.Parameter("costCenter") String costCenter,
        @CustomType.Parameter("countryCode") String countryCode,
        @CustomType.Parameter("customProfileAttributes") String customProfileAttributes,
        @CustomType.Parameter("delayReadSeconds") @Nullable String delayReadSeconds,
        @CustomType.Parameter("department") String department,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("division") String division,
        @CustomType.Parameter("email") String email,
        @CustomType.Parameter("employeeNumber") String employeeNumber,
        @CustomType.Parameter("firstName") String firstName,
        @CustomType.Parameter("groupMemberships") List<String> groupMemberships,
        @CustomType.Parameter("honorificPrefix") String honorificPrefix,
        @CustomType.Parameter("honorificSuffix") String honorificSuffix,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lastName") String lastName,
        @CustomType.Parameter("locale") String locale,
        @CustomType.Parameter("login") String login,
        @CustomType.Parameter("manager") String manager,
        @CustomType.Parameter("managerId") String managerId,
        @CustomType.Parameter("middleName") String middleName,
        @CustomType.Parameter("mobilePhone") String mobilePhone,
        @CustomType.Parameter("nickName") String nickName,
        @CustomType.Parameter("organization") String organization,
        @CustomType.Parameter("postalAddress") String postalAddress,
        @CustomType.Parameter("preferredLanguage") String preferredLanguage,
        @CustomType.Parameter("primaryPhone") String primaryPhone,
        @CustomType.Parameter("profileUrl") String profileUrl,
        @CustomType.Parameter("searches") @Nullable List<GetUserSearch> searches,
        @CustomType.Parameter("secondEmail") String secondEmail,
        @CustomType.Parameter("skipGroups") @Nullable Boolean skipGroups,
        @CustomType.Parameter("skipRoles") @Nullable Boolean skipRoles,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("streetAddress") String streetAddress,
        @CustomType.Parameter("timezone") String timezone,
        @CustomType.Parameter("title") String title,
        @CustomType.Parameter("userId") @Nullable String userId,
        @CustomType.Parameter("userType") String userType,
        @CustomType.Parameter("zipCode") String zipCode) {
        this.adminRoles = adminRoles;
        this.city = city;
        this.compoundSearchOperator = compoundSearchOperator;
        this.costCenter = costCenter;
        this.countryCode = countryCode;
        this.customProfileAttributes = customProfileAttributes;
        this.delayReadSeconds = delayReadSeconds;
        this.department = department;
        this.displayName = displayName;
        this.division = division;
        this.email = email;
        this.employeeNumber = employeeNumber;
        this.firstName = firstName;
        this.groupMemberships = groupMemberships;
        this.honorificPrefix = honorificPrefix;
        this.honorificSuffix = honorificSuffix;
        this.id = id;
        this.lastName = lastName;
        this.locale = locale;
        this.login = login;
        this.manager = manager;
        this.managerId = managerId;
        this.middleName = middleName;
        this.mobilePhone = mobilePhone;
        this.nickName = nickName;
        this.organization = organization;
        this.postalAddress = postalAddress;
        this.preferredLanguage = preferredLanguage;
        this.primaryPhone = primaryPhone;
        this.profileUrl = profileUrl;
        this.searches = searches;
        this.secondEmail = secondEmail;
        this.skipGroups = skipGroups;
        this.skipRoles = skipRoles;
        this.state = state;
        this.status = status;
        this.streetAddress = streetAddress;
        this.timezone = timezone;
        this.title = title;
        this.userId = userId;
        this.userType = userType;
        this.zipCode = zipCode;
    }

    /**
     * @return Administrator roles assigned to user.
     * 
     */
    public List<String> adminRoles() {
        return this.adminRoles;
    }
    /**
     * @return City or locality component of user&#39;s address.
     * 
     */
    public String city() {
        return this.city;
    }
    public Optional<String> compoundSearchOperator() {
        return Optional.ofNullable(this.compoundSearchOperator);
    }
    /**
     * @return Name of a cost center assigned to user.
     * 
     */
    public String costCenter() {
        return this.costCenter;
    }
    /**
     * @return Country name component of user&#39;s address.
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }
    /**
     * @return Raw JSON containing all custom profile attributes.
     * 
     */
    public String customProfileAttributes() {
        return this.customProfileAttributes;
    }
    public Optional<String> delayReadSeconds() {
        return Optional.ofNullable(this.delayReadSeconds);
    }
    /**
     * @return Name of user&#39;s department.
     * 
     */
    public String department() {
        return this.department;
    }
    /**
     * @return Name of the user, suitable for display to end users.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Name of user&#39;s division.
     * 
     */
    public String division() {
        return this.division;
    }
    /**
     * @return Primary email address of user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Organization or company assigned unique identifier for the user.
     * 
     */
    public String employeeNumber() {
        return this.employeeNumber;
    }
    /**
     * @return Given name of the user.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Groups user belongs to.
     * 
     */
    public List<String> groupMemberships() {
        return this.groupMemberships;
    }
    /**
     * @return Honorific prefix(es) of the user, or title in most Western languages.
     * 
     */
    public String honorificPrefix() {
        return this.honorificPrefix;
    }
    /**
     * @return Honorific suffix(es) of the user.
     * 
     */
    public String honorificSuffix() {
        return this.honorificSuffix;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Family name of the user.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return User&#39;s default location for purposes of localizing items such as currency, date time format, numerical representations, etc.
     * 
     */
    public String locale() {
        return this.locale;
    }
    /**
     * @return Unique identifier for the user.
     * 
     */
    public String login() {
        return this.login;
    }
    /**
     * @return Display name of the user&#39;s manager.
     * 
     */
    public String manager() {
        return this.manager;
    }
    /**
     * @return `id` of a user&#39;s manager.
     * 
     */
    public String managerId() {
        return this.managerId;
    }
    /**
     * @return Middle name(s) of the user.
     * 
     */
    public String middleName() {
        return this.middleName;
    }
    /**
     * @return Mobile phone number of user.
     * 
     */
    public String mobilePhone() {
        return this.mobilePhone;
    }
    /**
     * @return Casual way to address the user in real life.
     * 
     */
    public String nickName() {
        return this.nickName;
    }
    /**
     * @return Name of user&#39;s organization.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return Mailing address component of user&#39;s address.
     * 
     */
    public String postalAddress() {
        return this.postalAddress;
    }
    /**
     * @return User&#39;s preferred written or spoken languages.
     * 
     */
    public String preferredLanguage() {
        return this.preferredLanguage;
    }
    /**
     * @return Primary phone number of user such as home number.
     * 
     */
    public String primaryPhone() {
        return this.primaryPhone;
    }
    /**
     * @return URL of user&#39;s online profile (e.g. a web page).
     * 
     */
    public String profileUrl() {
        return this.profileUrl;
    }
    public List<GetUserSearch> searches() {
        return this.searches == null ? List.of() : this.searches;
    }
    /**
     * @return Secondary email address of user typically used for account recovery.
     * 
     */
    public String secondEmail() {
        return this.secondEmail;
    }
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    public Optional<Boolean> skipRoles() {
        return Optional.ofNullable(this.skipRoles);
    }
    /**
     * @return State or region component of user&#39;s address (region).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Current status of user.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Full street address component of user&#39;s address.
     * 
     */
    public String streetAddress() {
        return this.streetAddress;
    }
    /**
     * @return User&#39;s time zone.
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return User&#39;s title, such as &#34;Vice President&#34;.
     * 
     */
    public String title() {
        return this.title;
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    /**
     * @return Used to describe the organization to user relationship such as &#34;Employee&#34; or &#34;Contractor&#34;.
     * 
     */
    public String userType() {
        return this.userType;
    }
    /**
     * @return Zipcode or postal code component of user&#39;s address (postalCode)
     * 
     */
    public String zipCode() {
        return this.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> adminRoles;
        private String city;
        private @Nullable String compoundSearchOperator;
        private String costCenter;
        private String countryCode;
        private String customProfileAttributes;
        private @Nullable String delayReadSeconds;
        private String department;
        private String displayName;
        private String division;
        private String email;
        private String employeeNumber;
        private String firstName;
        private List<String> groupMemberships;
        private String honorificPrefix;
        private String honorificSuffix;
        private String id;
        private String lastName;
        private String locale;
        private String login;
        private String manager;
        private String managerId;
        private String middleName;
        private String mobilePhone;
        private String nickName;
        private String organization;
        private String postalAddress;
        private String preferredLanguage;
        private String primaryPhone;
        private String profileUrl;
        private @Nullable List<GetUserSearch> searches;
        private String secondEmail;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipRoles;
        private String state;
        private String status;
        private String streetAddress;
        private String timezone;
        private String title;
        private @Nullable String userId;
        private String userType;
        private String zipCode;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminRoles = defaults.adminRoles;
    	      this.city = defaults.city;
    	      this.compoundSearchOperator = defaults.compoundSearchOperator;
    	      this.costCenter = defaults.costCenter;
    	      this.countryCode = defaults.countryCode;
    	      this.customProfileAttributes = defaults.customProfileAttributes;
    	      this.delayReadSeconds = defaults.delayReadSeconds;
    	      this.department = defaults.department;
    	      this.displayName = defaults.displayName;
    	      this.division = defaults.division;
    	      this.email = defaults.email;
    	      this.employeeNumber = defaults.employeeNumber;
    	      this.firstName = defaults.firstName;
    	      this.groupMemberships = defaults.groupMemberships;
    	      this.honorificPrefix = defaults.honorificPrefix;
    	      this.honorificSuffix = defaults.honorificSuffix;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.locale = defaults.locale;
    	      this.login = defaults.login;
    	      this.manager = defaults.manager;
    	      this.managerId = defaults.managerId;
    	      this.middleName = defaults.middleName;
    	      this.mobilePhone = defaults.mobilePhone;
    	      this.nickName = defaults.nickName;
    	      this.organization = defaults.organization;
    	      this.postalAddress = defaults.postalAddress;
    	      this.preferredLanguage = defaults.preferredLanguage;
    	      this.primaryPhone = defaults.primaryPhone;
    	      this.profileUrl = defaults.profileUrl;
    	      this.searches = defaults.searches;
    	      this.secondEmail = defaults.secondEmail;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipRoles = defaults.skipRoles;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.streetAddress = defaults.streetAddress;
    	      this.timezone = defaults.timezone;
    	      this.title = defaults.title;
    	      this.userId = defaults.userId;
    	      this.userType = defaults.userType;
    	      this.zipCode = defaults.zipCode;
        }

        public Builder adminRoles(List<String> adminRoles) {
            this.adminRoles = Objects.requireNonNull(adminRoles);
            return this;
        }
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }
        public Builder city(String city) {
            this.city = Objects.requireNonNull(city);
            return this;
        }
        public Builder compoundSearchOperator(@Nullable String compoundSearchOperator) {
            this.compoundSearchOperator = compoundSearchOperator;
            return this;
        }
        public Builder costCenter(String costCenter) {
            this.costCenter = Objects.requireNonNull(costCenter);
            return this;
        }
        public Builder countryCode(String countryCode) {
            this.countryCode = Objects.requireNonNull(countryCode);
            return this;
        }
        public Builder customProfileAttributes(String customProfileAttributes) {
            this.customProfileAttributes = Objects.requireNonNull(customProfileAttributes);
            return this;
        }
        public Builder delayReadSeconds(@Nullable String delayReadSeconds) {
            this.delayReadSeconds = delayReadSeconds;
            return this;
        }
        public Builder department(String department) {
            this.department = Objects.requireNonNull(department);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder division(String division) {
            this.division = Objects.requireNonNull(division);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder employeeNumber(String employeeNumber) {
            this.employeeNumber = Objects.requireNonNull(employeeNumber);
            return this;
        }
        public Builder firstName(String firstName) {
            this.firstName = Objects.requireNonNull(firstName);
            return this;
        }
        public Builder groupMemberships(List<String> groupMemberships) {
            this.groupMemberships = Objects.requireNonNull(groupMemberships);
            return this;
        }
        public Builder groupMemberships(String... groupMemberships) {
            return groupMemberships(List.of(groupMemberships));
        }
        public Builder honorificPrefix(String honorificPrefix) {
            this.honorificPrefix = Objects.requireNonNull(honorificPrefix);
            return this;
        }
        public Builder honorificSuffix(String honorificSuffix) {
            this.honorificSuffix = Objects.requireNonNull(honorificSuffix);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lastName(String lastName) {
            this.lastName = Objects.requireNonNull(lastName);
            return this;
        }
        public Builder locale(String locale) {
            this.locale = Objects.requireNonNull(locale);
            return this;
        }
        public Builder login(String login) {
            this.login = Objects.requireNonNull(login);
            return this;
        }
        public Builder manager(String manager) {
            this.manager = Objects.requireNonNull(manager);
            return this;
        }
        public Builder managerId(String managerId) {
            this.managerId = Objects.requireNonNull(managerId);
            return this;
        }
        public Builder middleName(String middleName) {
            this.middleName = Objects.requireNonNull(middleName);
            return this;
        }
        public Builder mobilePhone(String mobilePhone) {
            this.mobilePhone = Objects.requireNonNull(mobilePhone);
            return this;
        }
        public Builder nickName(String nickName) {
            this.nickName = Objects.requireNonNull(nickName);
            return this;
        }
        public Builder organization(String organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }
        public Builder postalAddress(String postalAddress) {
            this.postalAddress = Objects.requireNonNull(postalAddress);
            return this;
        }
        public Builder preferredLanguage(String preferredLanguage) {
            this.preferredLanguage = Objects.requireNonNull(preferredLanguage);
            return this;
        }
        public Builder primaryPhone(String primaryPhone) {
            this.primaryPhone = Objects.requireNonNull(primaryPhone);
            return this;
        }
        public Builder profileUrl(String profileUrl) {
            this.profileUrl = Objects.requireNonNull(profileUrl);
            return this;
        }
        public Builder searches(@Nullable List<GetUserSearch> searches) {
            this.searches = searches;
            return this;
        }
        public Builder searches(GetUserSearch... searches) {
            return searches(List.of(searches));
        }
        public Builder secondEmail(String secondEmail) {
            this.secondEmail = Objects.requireNonNull(secondEmail);
            return this;
        }
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            this.skipGroups = skipGroups;
            return this;
        }
        public Builder skipRoles(@Nullable Boolean skipRoles) {
            this.skipRoles = skipRoles;
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder streetAddress(String streetAddress) {
            this.streetAddress = Objects.requireNonNull(streetAddress);
            return this;
        }
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        public Builder title(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public Builder userId(@Nullable String userId) {
            this.userId = userId;
            return this;
        }
        public Builder userType(String userType) {
            this.userType = Objects.requireNonNull(userType);
            return this;
        }
        public Builder zipCode(String zipCode) {
            this.zipCode = Objects.requireNonNull(zipCode);
            return this;
        }        public GetUserResult build() {
            return new GetUserResult(adminRoles, city, compoundSearchOperator, costCenter, countryCode, customProfileAttributes, delayReadSeconds, department, displayName, division, email, employeeNumber, firstName, groupMemberships, honorificPrefix, honorificSuffix, id, lastName, locale, login, manager, managerId, middleName, mobilePhone, nickName, organization, postalAddress, preferredLanguage, primaryPhone, profileUrl, searches, secondEmail, skipGroups, skipRoles, state, status, streetAddress, timezone, title, userId, userType, zipCode);
        }
    }
}
