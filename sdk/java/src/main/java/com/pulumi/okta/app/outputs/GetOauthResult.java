// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOauthResult {
    private @Nullable Boolean activeOnly;
    /**
     * @return Display auto submit toolbar.
     * 
     */
    private Boolean autoSubmitToolbar;
    /**
     * @return OAuth client ID. If set during creation, app is created with this id.
     * 
     */
    private String clientId;
    /**
     * @return The latest active client secret of the application. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
     * 
     */
    private String clientSecret;
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    private String clientUri;
    /**
     * @return List of OAuth 2.0 grant types.
     * 
     */
    private List<String> grantTypes;
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    private Boolean hideIos;
    /**
     * @return Do not display application icon to users.
     * 
     */
    private Boolean hideWeb;
    /**
     * @return ID of application.
     * 
     */
    private @Nullable String id;
    /**
     * @return Label of application.
     * 
     */
    private @Nullable String label;
    private @Nullable String labelPrefix;
    /**
     * @return generic JSON containing discoverable resources related to the app
     * 
     */
    private String links;
    /**
     * @return The type of Idp-Initiated login that the client supports, if any.
     * 
     */
    private String loginMode;
    /**
     * @return List of scopes to use for the request.
     * 
     */
    private List<String> loginScopes;
    /**
     * @return URI that initiates login.
     * 
     */
    private String loginUri;
    /**
     * @return URI that references a logo for the client.
     * 
     */
    private String logoUri;
    /**
     * @return Name of application.
     * 
     */
    private String name;
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    private String policyUri;
    /**
     * @return List of URIs for redirection after logout.
     * 
     */
    private List<String> postLogoutRedirectUris;
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    private List<String> redirectUris;
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    private List<String> responseTypes;
    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipGroups;
    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipUsers;
    /**
     * @return Status of application.
     * 
     */
    private String status;
    /**
     * @return The type of OAuth application.
     * 
     */
    private String type;
    private String wildcardRedirect;

    private GetOauthResult() {}
    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }
    /**
     * @return Display auto submit toolbar.
     * 
     */
    public Boolean autoSubmitToolbar() {
        return this.autoSubmitToolbar;
    }
    /**
     * @return OAuth client ID. If set during creation, app is created with this id.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The latest active client secret of the application. See: https://developer.okta.com/docs/reference/api/apps/#oauth-credential-object
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    public String clientUri() {
        return this.clientUri;
    }
    /**
     * @return List of OAuth 2.0 grant types.
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    public Boolean hideIos() {
        return this.hideIos;
    }
    /**
     * @return Do not display application icon to users.
     * 
     */
    public Boolean hideWeb() {
        return this.hideWeb;
    }
    /**
     * @return ID of application.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Label of application.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }
    /**
     * @return generic JSON containing discoverable resources related to the app
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return The type of Idp-Initiated login that the client supports, if any.
     * 
     */
    public String loginMode() {
        return this.loginMode;
    }
    /**
     * @return List of scopes to use for the request.
     * 
     */
    public List<String> loginScopes() {
        return this.loginScopes;
    }
    /**
     * @return URI that initiates login.
     * 
     */
    public String loginUri() {
        return this.loginUri;
    }
    /**
     * @return URI that references a logo for the client.
     * 
     */
    public String logoUri() {
        return this.logoUri;
    }
    /**
     * @return Name of application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    public String policyUri() {
        return this.policyUri;
    }
    /**
     * @return List of URIs for redirection after logout.
     * 
     */
    public List<String> postLogoutRedirectUris() {
        return this.postLogoutRedirectUris;
    }
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    public List<String> responseTypes() {
        return this.responseTypes;
    }
    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }
    /**
     * @return Status of application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of OAuth application.
     * 
     */
    public String type() {
        return this.type;
    }
    public String wildcardRedirect() {
        return this.wildcardRedirect;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOauthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean activeOnly;
        private Boolean autoSubmitToolbar;
        private String clientId;
        private String clientSecret;
        private String clientUri;
        private List<String> grantTypes;
        private Boolean hideIos;
        private Boolean hideWeb;
        private @Nullable String id;
        private @Nullable String label;
        private @Nullable String labelPrefix;
        private String links;
        private String loginMode;
        private List<String> loginScopes;
        private String loginUri;
        private String logoUri;
        private String name;
        private String policyUri;
        private List<String> postLogoutRedirectUris;
        private List<String> redirectUris;
        private List<String> responseTypes;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipUsers;
        private String status;
        private String type;
        private String wildcardRedirect;
        public Builder() {}
        public Builder(GetOauthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeOnly = defaults.activeOnly;
    	      this.autoSubmitToolbar = defaults.autoSubmitToolbar;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientUri = defaults.clientUri;
    	      this.grantTypes = defaults.grantTypes;
    	      this.hideIos = defaults.hideIos;
    	      this.hideWeb = defaults.hideWeb;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.labelPrefix = defaults.labelPrefix;
    	      this.links = defaults.links;
    	      this.loginMode = defaults.loginMode;
    	      this.loginScopes = defaults.loginScopes;
    	      this.loginUri = defaults.loginUri;
    	      this.logoUri = defaults.logoUri;
    	      this.name = defaults.name;
    	      this.policyUri = defaults.policyUri;
    	      this.postLogoutRedirectUris = defaults.postLogoutRedirectUris;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseTypes = defaults.responseTypes;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipUsers = defaults.skipUsers;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.wildcardRedirect = defaults.wildcardRedirect;
        }

        @CustomType.Setter
        public Builder activeOnly(@Nullable Boolean activeOnly) {
            this.activeOnly = activeOnly;
            return this;
        }
        @CustomType.Setter
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            this.autoSubmitToolbar = Objects.requireNonNull(autoSubmitToolbar);
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        @CustomType.Setter
        public Builder clientUri(String clientUri) {
            this.clientUri = Objects.requireNonNull(clientUri);
            return this;
        }
        @CustomType.Setter
        public Builder grantTypes(List<String> grantTypes) {
            this.grantTypes = Objects.requireNonNull(grantTypes);
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        @CustomType.Setter
        public Builder hideIos(Boolean hideIos) {
            this.hideIos = Objects.requireNonNull(hideIos);
            return this;
        }
        @CustomType.Setter
        public Builder hideWeb(Boolean hideWeb) {
            this.hideWeb = Objects.requireNonNull(hideWeb);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder labelPrefix(@Nullable String labelPrefix) {
            this.labelPrefix = labelPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder links(String links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        @CustomType.Setter
        public Builder loginMode(String loginMode) {
            this.loginMode = Objects.requireNonNull(loginMode);
            return this;
        }
        @CustomType.Setter
        public Builder loginScopes(List<String> loginScopes) {
            this.loginScopes = Objects.requireNonNull(loginScopes);
            return this;
        }
        public Builder loginScopes(String... loginScopes) {
            return loginScopes(List.of(loginScopes));
        }
        @CustomType.Setter
        public Builder loginUri(String loginUri) {
            this.loginUri = Objects.requireNonNull(loginUri);
            return this;
        }
        @CustomType.Setter
        public Builder logoUri(String logoUri) {
            this.logoUri = Objects.requireNonNull(logoUri);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policyUri(String policyUri) {
            this.policyUri = Objects.requireNonNull(policyUri);
            return this;
        }
        @CustomType.Setter
        public Builder postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
            this.postLogoutRedirectUris = Objects.requireNonNull(postLogoutRedirectUris);
            return this;
        }
        public Builder postLogoutRedirectUris(String... postLogoutRedirectUris) {
            return postLogoutRedirectUris(List.of(postLogoutRedirectUris));
        }
        @CustomType.Setter
        public Builder redirectUris(List<String> redirectUris) {
            this.redirectUris = Objects.requireNonNull(redirectUris);
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder responseTypes(List<String> responseTypes) {
            this.responseTypes = Objects.requireNonNull(responseTypes);
            return this;
        }
        public Builder responseTypes(String... responseTypes) {
            return responseTypes(List.of(responseTypes));
        }
        @CustomType.Setter
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            this.skipGroups = skipGroups;
            return this;
        }
        @CustomType.Setter
        public Builder skipUsers(@Nullable Boolean skipUsers) {
            this.skipUsers = skipUsers;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder wildcardRedirect(String wildcardRedirect) {
            this.wildcardRedirect = Objects.requireNonNull(wildcardRedirect);
            return this;
        }
        public GetOauthResult build() {
            final var o = new GetOauthResult();
            o.activeOnly = activeOnly;
            o.autoSubmitToolbar = autoSubmitToolbar;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.clientUri = clientUri;
            o.grantTypes = grantTypes;
            o.hideIos = hideIos;
            o.hideWeb = hideWeb;
            o.id = id;
            o.label = label;
            o.labelPrefix = labelPrefix;
            o.links = links;
            o.loginMode = loginMode;
            o.loginScopes = loginScopes;
            o.loginUri = loginUri;
            o.logoUri = logoUri;
            o.name = name;
            o.policyUri = policyUri;
            o.postLogoutRedirectUris = postLogoutRedirectUris;
            o.redirectUris = redirectUris;
            o.responseTypes = responseTypes;
            o.skipGroups = skipGroups;
            o.skipUsers = skipUsers;
            o.status = status;
            o.type = type;
            o.wildcardRedirect = wildcardRedirect;
            return o;
        }
    }
}
