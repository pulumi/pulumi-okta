// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOauthResult {
    private final @Nullable Boolean activeOnly;
    /**
     * @return Display auto submit toolbar.
     * 
     */
    private final Boolean autoSubmitToolbar;
    /**
     * @return OAuth client ID. If set during creation, app is created with this id.
     * 
     */
    private final String clientId;
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    private final String clientUri;
    /**
     * @return List of OAuth 2.0 grant types.
     * 
     */
    private final List<String> grantTypes;
    /**
     * @return List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_group_assignments` */
    private final List<String> groups;
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    private final Boolean hideIos;
    /**
     * @return Do not display application icon to users.
     * 
     */
    private final Boolean hideWeb;
    /**
     * @return ID of application.
     * 
     */
    private final @Nullable String id;
    /**
     * @return Label of application.
     * 
     */
    private final @Nullable String label;
    private final @Nullable String labelPrefix;
    /**
     * @return generic JSON containing discoverable resources related to the app
     * 
     */
    private final String links;
    /**
     * @return The type of Idp-Initiated login that the client supports, if any.
     * 
     */
    private final String loginMode;
    /**
     * @return List of scopes to use for the request.
     * 
     */
    private final List<String> loginScopes;
    /**
     * @return URI that initiates login.
     * 
     */
    private final String loginUri;
    /**
     * @return URI that references a logo for the client.
     * 
     */
    private final String logoUri;
    /**
     * @return Name of application.
     * 
     */
    private final String name;
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    private final String policyUri;
    /**
     * @return List of URIs for redirection after logout.
     * 
     */
    private final List<String> postLogoutRedirectUris;
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    private final List<String> redirectUris;
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    private final List<String> responseTypes;
    private final @Nullable Boolean skipGroups;
    private final @Nullable Boolean skipUsers;
    /**
     * @return Status of application.
     * 
     */
    private final String status;
    /**
     * @return The type of OAuth application.
     * 
     */
    private final String type;
    /**
     * @return List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     * 
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_user_assignments` */
    private final List<String> users;
    private final String wildcardRedirect;

    @CustomType.Constructor
    private GetOauthResult(
        @CustomType.Parameter("activeOnly") @Nullable Boolean activeOnly,
        @CustomType.Parameter("autoSubmitToolbar") Boolean autoSubmitToolbar,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientUri") String clientUri,
        @CustomType.Parameter("grantTypes") List<String> grantTypes,
        @CustomType.Parameter("groups") List<String> groups,
        @CustomType.Parameter("hideIos") Boolean hideIos,
        @CustomType.Parameter("hideWeb") Boolean hideWeb,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("label") @Nullable String label,
        @CustomType.Parameter("labelPrefix") @Nullable String labelPrefix,
        @CustomType.Parameter("links") String links,
        @CustomType.Parameter("loginMode") String loginMode,
        @CustomType.Parameter("loginScopes") List<String> loginScopes,
        @CustomType.Parameter("loginUri") String loginUri,
        @CustomType.Parameter("logoUri") String logoUri,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("policyUri") String policyUri,
        @CustomType.Parameter("postLogoutRedirectUris") List<String> postLogoutRedirectUris,
        @CustomType.Parameter("redirectUris") List<String> redirectUris,
        @CustomType.Parameter("responseTypes") List<String> responseTypes,
        @CustomType.Parameter("skipGroups") @Nullable Boolean skipGroups,
        @CustomType.Parameter("skipUsers") @Nullable Boolean skipUsers,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("users") List<String> users,
        @CustomType.Parameter("wildcardRedirect") String wildcardRedirect) {
        this.activeOnly = activeOnly;
        this.autoSubmitToolbar = autoSubmitToolbar;
        this.clientId = clientId;
        this.clientUri = clientUri;
        this.grantTypes = grantTypes;
        this.groups = groups;
        this.hideIos = hideIos;
        this.hideWeb = hideWeb;
        this.id = id;
        this.label = label;
        this.labelPrefix = labelPrefix;
        this.links = links;
        this.loginMode = loginMode;
        this.loginScopes = loginScopes;
        this.loginUri = loginUri;
        this.logoUri = logoUri;
        this.name = name;
        this.policyUri = policyUri;
        this.postLogoutRedirectUris = postLogoutRedirectUris;
        this.redirectUris = redirectUris;
        this.responseTypes = responseTypes;
        this.skipGroups = skipGroups;
        this.skipUsers = skipUsers;
        this.status = status;
        this.type = type;
        this.users = users;
        this.wildcardRedirect = wildcardRedirect;
    }

    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }
    /**
     * @return Display auto submit toolbar.
     * 
     */
    public Boolean autoSubmitToolbar() {
        return this.autoSubmitToolbar;
    }
    /**
     * @return OAuth client ID. If set during creation, app is created with this id.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    public String clientUri() {
        return this.clientUri;
    }
    /**
     * @return List of OAuth 2.0 grant types.
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_group_assignments` */
    public List<String> groups() {
        return this.groups;
    }
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    public Boolean hideIos() {
        return this.hideIos;
    }
    /**
     * @return Do not display application icon to users.
     * 
     */
    public Boolean hideWeb() {
        return this.hideWeb;
    }
    /**
     * @return ID of application.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Label of application.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }
    /**
     * @return generic JSON containing discoverable resources related to the app
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return The type of Idp-Initiated login that the client supports, if any.
     * 
     */
    public String loginMode() {
        return this.loginMode;
    }
    /**
     * @return List of scopes to use for the request.
     * 
     */
    public List<String> loginScopes() {
        return this.loginScopes;
    }
    /**
     * @return URI that initiates login.
     * 
     */
    public String loginUri() {
        return this.loginUri;
    }
    /**
     * @return URI that references a logo for the client.
     * 
     */
    public String logoUri() {
        return this.logoUri;
    }
    /**
     * @return Name of application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    public String policyUri() {
        return this.policyUri;
    }
    /**
     * @return List of URIs for redirection after logout.
     * 
     */
    public List<String> postLogoutRedirectUris() {
        return this.postLogoutRedirectUris;
    }
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    public List<String> responseTypes() {
        return this.responseTypes;
    }
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }
    /**
     * @return Status of application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of OAuth application.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     * 
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_oauth`, please replace all uses of this with: `okta_app_user_assignments` */
    public List<String> users() {
        return this.users;
    }
    public String wildcardRedirect() {
        return this.wildcardRedirect;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOauthResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean activeOnly;
        private Boolean autoSubmitToolbar;
        private String clientId;
        private String clientUri;
        private List<String> grantTypes;
        private List<String> groups;
        private Boolean hideIos;
        private Boolean hideWeb;
        private @Nullable String id;
        private @Nullable String label;
        private @Nullable String labelPrefix;
        private String links;
        private String loginMode;
        private List<String> loginScopes;
        private String loginUri;
        private String logoUri;
        private String name;
        private String policyUri;
        private List<String> postLogoutRedirectUris;
        private List<String> redirectUris;
        private List<String> responseTypes;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipUsers;
        private String status;
        private String type;
        private List<String> users;
        private String wildcardRedirect;

        public Builder() {
    	      // Empty
        }

        public Builder(GetOauthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeOnly = defaults.activeOnly;
    	      this.autoSubmitToolbar = defaults.autoSubmitToolbar;
    	      this.clientId = defaults.clientId;
    	      this.clientUri = defaults.clientUri;
    	      this.grantTypes = defaults.grantTypes;
    	      this.groups = defaults.groups;
    	      this.hideIos = defaults.hideIos;
    	      this.hideWeb = defaults.hideWeb;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.labelPrefix = defaults.labelPrefix;
    	      this.links = defaults.links;
    	      this.loginMode = defaults.loginMode;
    	      this.loginScopes = defaults.loginScopes;
    	      this.loginUri = defaults.loginUri;
    	      this.logoUri = defaults.logoUri;
    	      this.name = defaults.name;
    	      this.policyUri = defaults.policyUri;
    	      this.postLogoutRedirectUris = defaults.postLogoutRedirectUris;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseTypes = defaults.responseTypes;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipUsers = defaults.skipUsers;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.users = defaults.users;
    	      this.wildcardRedirect = defaults.wildcardRedirect;
        }

        public Builder activeOnly(@Nullable Boolean activeOnly) {
            this.activeOnly = activeOnly;
            return this;
        }
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            this.autoSubmitToolbar = Objects.requireNonNull(autoSubmitToolbar);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientUri(String clientUri) {
            this.clientUri = Objects.requireNonNull(clientUri);
            return this;
        }
        public Builder grantTypes(List<String> grantTypes) {
            this.grantTypes = Objects.requireNonNull(grantTypes);
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        public Builder groups(List<String> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        public Builder hideIos(Boolean hideIos) {
            this.hideIos = Objects.requireNonNull(hideIos);
            return this;
        }
        public Builder hideWeb(Boolean hideWeb) {
            this.hideWeb = Objects.requireNonNull(hideWeb);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        public Builder labelPrefix(@Nullable String labelPrefix) {
            this.labelPrefix = labelPrefix;
            return this;
        }
        public Builder links(String links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        public Builder loginMode(String loginMode) {
            this.loginMode = Objects.requireNonNull(loginMode);
            return this;
        }
        public Builder loginScopes(List<String> loginScopes) {
            this.loginScopes = Objects.requireNonNull(loginScopes);
            return this;
        }
        public Builder loginScopes(String... loginScopes) {
            return loginScopes(List.of(loginScopes));
        }
        public Builder loginUri(String loginUri) {
            this.loginUri = Objects.requireNonNull(loginUri);
            return this;
        }
        public Builder logoUri(String logoUri) {
            this.logoUri = Objects.requireNonNull(logoUri);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policyUri(String policyUri) {
            this.policyUri = Objects.requireNonNull(policyUri);
            return this;
        }
        public Builder postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
            this.postLogoutRedirectUris = Objects.requireNonNull(postLogoutRedirectUris);
            return this;
        }
        public Builder postLogoutRedirectUris(String... postLogoutRedirectUris) {
            return postLogoutRedirectUris(List.of(postLogoutRedirectUris));
        }
        public Builder redirectUris(List<String> redirectUris) {
            this.redirectUris = Objects.requireNonNull(redirectUris);
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        public Builder responseTypes(List<String> responseTypes) {
            this.responseTypes = Objects.requireNonNull(responseTypes);
            return this;
        }
        public Builder responseTypes(String... responseTypes) {
            return responseTypes(List.of(responseTypes));
        }
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            this.skipGroups = skipGroups;
            return this;
        }
        public Builder skipUsers(@Nullable Boolean skipUsers) {
            this.skipUsers = skipUsers;
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder users(List<String> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public Builder wildcardRedirect(String wildcardRedirect) {
            this.wildcardRedirect = Objects.requireNonNull(wildcardRedirect);
            return this;
        }        public GetOauthResult build() {
            return new GetOauthResult(activeOnly, autoSubmitToolbar, clientId, clientUri, grantTypes, groups, hideIos, hideWeb, id, label, labelPrefix, links, loginMode, loginScopes, loginUri, logoUri, name, policyUri, postLogoutRedirectUris, redirectUris, responseTypes, skipGroups, skipUsers, status, type, users, wildcardRedirect);
        }
    }
}
