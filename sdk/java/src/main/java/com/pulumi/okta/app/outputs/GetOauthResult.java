// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOauthResult {
    /**
     * @return Search only ACTIVE applications.
     * 
     */
    private @Nullable Boolean activeOnly;
    /**
     * @return Display auto submit toolbar
     * 
     */
    private Boolean autoSubmitToolbar;
    /**
     * @return OAuth client ID
     * 
     */
    private String clientId;
    /**
     * @return OAuth client secret
     * 
     */
    private String clientSecret;
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    private String clientUri;
    /**
     * @return List of OAuth 2.0 grant types
     * 
     */
    private List<String> grantTypes;
    /**
     * @return Do not display application icon on mobile app
     * 
     */
    private Boolean hideIos;
    /**
     * @return Do not display application icon to users
     * 
     */
    private Boolean hideWeb;
    /**
     * @return Id of application to retrieve, conflicts with label and label_prefix.
     * 
     */
    private @Nullable String id;
    /**
     * @return The label of the app to retrieve, conflicts with
     * 			labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
     * 			Okta&#39;s List Apps API. The API will search both name and label using that
     * 			query. Therefore similarily named and labeled apps may be returned in the query
     * 			and have the unitended result of associating the wrong app with this data
     * 			source. See:
     * 			https://developer.okta.com/docs/reference/api/apps/#list-applications
     * 
     */
    private @Nullable String label;
    /**
     * @return Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     * 
     */
    private @Nullable String labelPrefix;
    /**
     * @return Discoverable resources related to the app
     * 
     */
    private String links;
    /**
     * @return The type of Idp-Initiated login that the client supports, if any
     * 
     */
    private String loginMode;
    /**
     * @return List of scopes to use for the request when &#39;login_mode&#39; == OKTA
     * 
     */
    private List<String> loginScopes;
    /**
     * @return URI that initiates login.
     * 
     */
    private String loginUri;
    /**
     * @return URI that references a logo for the client.
     * 
     */
    private String logoUri;
    /**
     * @return Name of application.
     * 
     */
    private String name;
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    private String policyUri;
    /**
     * @return List of URIs for redirection after logout
     * 
     */
    private List<String> postLogoutRedirectUris;
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    private List<String> redirectUris;
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    private List<String> responseTypes;
    /**
     * @return Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipGroups;
    /**
     * @return Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipUsers;
    /**
     * @return Status of application.
     * 
     */
    private String status;
    /**
     * @return The type of OAuth application.
     * 
     */
    private String type;
    /**
     * @return Indicates if the client is allowed to use wildcard matching of redirect_uris. Some valid values include: &#34;SUBDOMAIN&#34;, &#34;DISABLED&#34;.
     * 
     */
    private String wildcardRedirect;

    private GetOauthResult() {}
    /**
     * @return Search only ACTIVE applications.
     * 
     */
    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }
    /**
     * @return Display auto submit toolbar
     * 
     */
    public Boolean autoSubmitToolbar() {
        return this.autoSubmitToolbar;
    }
    /**
     * @return OAuth client ID
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return OAuth client secret
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return URI to a web page providing information about the client.
     * 
     */
    public String clientUri() {
        return this.clientUri;
    }
    /**
     * @return List of OAuth 2.0 grant types
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return Do not display application icon on mobile app
     * 
     */
    public Boolean hideIos() {
        return this.hideIos;
    }
    /**
     * @return Do not display application icon to users
     * 
     */
    public Boolean hideWeb() {
        return this.hideWeb;
    }
    /**
     * @return Id of application to retrieve, conflicts with label and label_prefix.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The label of the app to retrieve, conflicts with
     * 			labelPrefix and id. Label uses the ?q=\n\n query parameter exposed by
     * 			Okta&#39;s List Apps API. The API will search both name and label using that
     * 			query. Therefore similarily named and labeled apps may be returned in the query
     * 			and have the unitended result of associating the wrong app with this data
     * 			source. See:
     * 			https://developer.okta.com/docs/reference/api/apps/#list-applications
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return Label prefix of the app to retrieve, conflicts with label and id. This will tell the
     * 			provider to do a starts with query as opposed to an equals query.
     * 
     */
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }
    /**
     * @return Discoverable resources related to the app
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return The type of Idp-Initiated login that the client supports, if any
     * 
     */
    public String loginMode() {
        return this.loginMode;
    }
    /**
     * @return List of scopes to use for the request when &#39;login_mode&#39; == OKTA
     * 
     */
    public List<String> loginScopes() {
        return this.loginScopes;
    }
    /**
     * @return URI that initiates login.
     * 
     */
    public String loginUri() {
        return this.loginUri;
    }
    /**
     * @return URI that references a logo for the client.
     * 
     */
    public String logoUri() {
        return this.logoUri;
    }
    /**
     * @return Name of application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return URI to web page providing client policy document.
     * 
     */
    public String policyUri() {
        return this.policyUri;
    }
    /**
     * @return List of URIs for redirection after logout
     * 
     */
    public List<String> postLogoutRedirectUris() {
        return this.postLogoutRedirectUris;
    }
    /**
     * @return List of URIs for use in the redirect-based flow.
     * 
     */
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    /**
     * @return List of OAuth 2.0 response type strings.
     * 
     */
    public List<String> responseTypes() {
        return this.responseTypes;
    }
    /**
     * @return Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    /**
     * @return Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }
    /**
     * @return Status of application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of OAuth application.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Indicates if the client is allowed to use wildcard matching of redirect_uris. Some valid values include: &#34;SUBDOMAIN&#34;, &#34;DISABLED&#34;.
     * 
     */
    public String wildcardRedirect() {
        return this.wildcardRedirect;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOauthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean activeOnly;
        private Boolean autoSubmitToolbar;
        private String clientId;
        private String clientSecret;
        private String clientUri;
        private List<String> grantTypes;
        private Boolean hideIos;
        private Boolean hideWeb;
        private @Nullable String id;
        private @Nullable String label;
        private @Nullable String labelPrefix;
        private String links;
        private String loginMode;
        private List<String> loginScopes;
        private String loginUri;
        private String logoUri;
        private String name;
        private String policyUri;
        private List<String> postLogoutRedirectUris;
        private List<String> redirectUris;
        private List<String> responseTypes;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipUsers;
        private String status;
        private String type;
        private String wildcardRedirect;
        public Builder() {}
        public Builder(GetOauthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeOnly = defaults.activeOnly;
    	      this.autoSubmitToolbar = defaults.autoSubmitToolbar;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientUri = defaults.clientUri;
    	      this.grantTypes = defaults.grantTypes;
    	      this.hideIos = defaults.hideIos;
    	      this.hideWeb = defaults.hideWeb;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.labelPrefix = defaults.labelPrefix;
    	      this.links = defaults.links;
    	      this.loginMode = defaults.loginMode;
    	      this.loginScopes = defaults.loginScopes;
    	      this.loginUri = defaults.loginUri;
    	      this.logoUri = defaults.logoUri;
    	      this.name = defaults.name;
    	      this.policyUri = defaults.policyUri;
    	      this.postLogoutRedirectUris = defaults.postLogoutRedirectUris;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseTypes = defaults.responseTypes;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipUsers = defaults.skipUsers;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.wildcardRedirect = defaults.wildcardRedirect;
        }

        @CustomType.Setter
        public Builder activeOnly(@Nullable Boolean activeOnly) {

            this.activeOnly = activeOnly;
            return this;
        }
        @CustomType.Setter
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            if (autoSubmitToolbar == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "autoSubmitToolbar");
            }
            this.autoSubmitToolbar = autoSubmitToolbar;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder clientUri(String clientUri) {
            if (clientUri == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "clientUri");
            }
            this.clientUri = clientUri;
            return this;
        }
        @CustomType.Setter
        public Builder grantTypes(List<String> grantTypes) {
            if (grantTypes == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "grantTypes");
            }
            this.grantTypes = grantTypes;
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        @CustomType.Setter
        public Builder hideIos(Boolean hideIos) {
            if (hideIos == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "hideIos");
            }
            this.hideIos = hideIos;
            return this;
        }
        @CustomType.Setter
        public Builder hideWeb(Boolean hideWeb) {
            if (hideWeb == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "hideWeb");
            }
            this.hideWeb = hideWeb;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {

            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder labelPrefix(@Nullable String labelPrefix) {

            this.labelPrefix = labelPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder links(String links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "links");
            }
            this.links = links;
            return this;
        }
        @CustomType.Setter
        public Builder loginMode(String loginMode) {
            if (loginMode == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "loginMode");
            }
            this.loginMode = loginMode;
            return this;
        }
        @CustomType.Setter
        public Builder loginScopes(List<String> loginScopes) {
            if (loginScopes == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "loginScopes");
            }
            this.loginScopes = loginScopes;
            return this;
        }
        public Builder loginScopes(String... loginScopes) {
            return loginScopes(List.of(loginScopes));
        }
        @CustomType.Setter
        public Builder loginUri(String loginUri) {
            if (loginUri == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "loginUri");
            }
            this.loginUri = loginUri;
            return this;
        }
        @CustomType.Setter
        public Builder logoUri(String logoUri) {
            if (logoUri == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "logoUri");
            }
            this.logoUri = logoUri;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policyUri(String policyUri) {
            if (policyUri == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "policyUri");
            }
            this.policyUri = policyUri;
            return this;
        }
        @CustomType.Setter
        public Builder postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
            if (postLogoutRedirectUris == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "postLogoutRedirectUris");
            }
            this.postLogoutRedirectUris = postLogoutRedirectUris;
            return this;
        }
        public Builder postLogoutRedirectUris(String... postLogoutRedirectUris) {
            return postLogoutRedirectUris(List.of(postLogoutRedirectUris));
        }
        @CustomType.Setter
        public Builder redirectUris(List<String> redirectUris) {
            if (redirectUris == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "redirectUris");
            }
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder responseTypes(List<String> responseTypes) {
            if (responseTypes == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "responseTypes");
            }
            this.responseTypes = responseTypes;
            return this;
        }
        public Builder responseTypes(String... responseTypes) {
            return responseTypes(List.of(responseTypes));
        }
        @CustomType.Setter
        public Builder skipGroups(@Nullable Boolean skipGroups) {

            this.skipGroups = skipGroups;
            return this;
        }
        @CustomType.Setter
        public Builder skipUsers(@Nullable Boolean skipUsers) {

            this.skipUsers = skipUsers;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder wildcardRedirect(String wildcardRedirect) {
            if (wildcardRedirect == null) {
              throw new MissingRequiredPropertyException("GetOauthResult", "wildcardRedirect");
            }
            this.wildcardRedirect = wildcardRedirect;
            return this;
        }
        public GetOauthResult build() {
            final var _resultValue = new GetOauthResult();
            _resultValue.activeOnly = activeOnly;
            _resultValue.autoSubmitToolbar = autoSubmitToolbar;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.clientUri = clientUri;
            _resultValue.grantTypes = grantTypes;
            _resultValue.hideIos = hideIos;
            _resultValue.hideWeb = hideWeb;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.labelPrefix = labelPrefix;
            _resultValue.links = links;
            _resultValue.loginMode = loginMode;
            _resultValue.loginScopes = loginScopes;
            _resultValue.loginUri = loginUri;
            _resultValue.logoUri = logoUri;
            _resultValue.name = name;
            _resultValue.policyUri = policyUri;
            _resultValue.postLogoutRedirectUris = postLogoutRedirectUris;
            _resultValue.redirectUris = redirectUris;
            _resultValue.responseTypes = responseTypes;
            _resultValue.skipGroups = skipGroups;
            _resultValue.skipUsers = skipUsers;
            _resultValue.status = status;
            _resultValue.type = type;
            _resultValue.wildcardRedirect = wildcardRedirect;
            return _resultValue;
        }
    }
}
