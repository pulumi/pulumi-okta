// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaptchaState extends com.pulumi.resources.ResourceArgs {

    public static final CaptchaState Empty = new CaptchaState();

    /**
     * Name of the CAPTCHA
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the CAPTCHA
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
     * 
     */
    @Import(name="siteKey")
    private @Nullable Output<String> siteKey;

    /**
     * @return Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
     * 
     */
    public Optional<Output<String>> siteKey() {
        return Optional.ofNullable(this.siteKey);
    }

    /**
     * Captcha type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Captcha type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private CaptchaState() {}

    private CaptchaState(CaptchaState $) {
        this.name = $.name;
        this.secretKey = $.secretKey;
        this.siteKey = $.siteKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaptchaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaptchaState $;

        public Builder() {
            $ = new CaptchaState();
        }

        public Builder(CaptchaState defaults) {
            $ = new CaptchaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the CAPTCHA
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the CAPTCHA
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretKey Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param siteKey Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
         * 
         * @return builder
         * 
         */
        public Builder siteKey(@Nullable Output<String> siteKey) {
            $.siteKey = siteKey;
            return this;
        }

        /**
         * @param siteKey Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
         * 
         * @return builder
         * 
         */
        public Builder siteKey(String siteKey) {
            return siteKey(Output.of(siteKey));
        }

        /**
         * @param type Captcha type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Captcha type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CaptchaState build() {
            return $;
        }
    }

}
