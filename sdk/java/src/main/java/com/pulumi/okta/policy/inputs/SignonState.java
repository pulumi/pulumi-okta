// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SignonState extends com.pulumi.resources.ResourceArgs {

    public static final SignonState Empty = new SignonState();

    /**
     * Policy Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Policy Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of Group IDs to Include
     * 
     */
    @Import(name="groupsIncludeds")
    private @Nullable Output<List<String>> groupsIncludeds;

    /**
     * @return List of Group IDs to Include
     * 
     */
    public Optional<Output<List<String>>> groupsIncludeds() {
        return Optional.ofNullable(this.groupsIncludeds);
    }

    /**
     * Policy Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SignonState() {}

    private SignonState(SignonState $) {
        this.description = $.description;
        this.groupsIncludeds = $.groupsIncludeds;
        this.name = $.name;
        this.priority = $.priority;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SignonState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SignonState $;

        public Builder() {
            $ = new SignonState();
        }

        public Builder(SignonState defaults) {
            $ = new SignonState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Policy Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Policy Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param groupsIncludeds List of Group IDs to Include
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(@Nullable Output<List<String>> groupsIncludeds) {
            $.groupsIncludeds = groupsIncludeds;
            return this;
        }

        /**
         * @param groupsIncludeds List of Group IDs to Include
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(List<String> groupsIncludeds) {
            return groupsIncludeds(Output.of(groupsIncludeds));
        }

        /**
         * @param groupsIncludeds List of Group IDs to Include
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(String... groupsIncludeds) {
            return groupsIncludeds(List.of(groupsIncludeds));
        }

        /**
         * @param name Policy Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last (lowest) if not there.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Policy Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SignonState build() {
            return $;
        }
    }

}
