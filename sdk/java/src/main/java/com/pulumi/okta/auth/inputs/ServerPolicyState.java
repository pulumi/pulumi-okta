// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ServerPolicyState Empty = new ServerPolicyState();

    /**
     * The ID of the Auth Server.
     * 
     */
    @Import(name="authServerId")
    private @Nullable Output<String> authServerId;

    /**
     * @return The ID of the Auth Server.
     * 
     */
    public Optional<Output<String>> authServerId() {
        return Optional.ofNullable(this.authServerId);
    }

    /**
     * The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
     * 
     */
    @Import(name="clientWhitelists")
    private @Nullable Output<List<String>> clientWhitelists;

    /**
     * @return The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
     * 
     */
    public Optional<Output<List<String>>> clientWhitelists() {
        return Optional.ofNullable(this.clientWhitelists);
    }

    /**
     * The description of the Auth Server Policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Auth Server Policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Auth Server Policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Auth Server Policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of the Auth Server Policy.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the Auth Server Policy.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The status of the Auth Server Policy.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Auth Server Policy.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ServerPolicyState() {}

    private ServerPolicyState(ServerPolicyState $) {
        this.authServerId = $.authServerId;
        this.clientWhitelists = $.clientWhitelists;
        this.description = $.description;
        this.name = $.name;
        this.priority = $.priority;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerPolicyState $;

        public Builder() {
            $ = new ServerPolicyState();
        }

        public Builder(ServerPolicyState defaults) {
            $ = new ServerPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authServerId The ID of the Auth Server.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(@Nullable Output<String> authServerId) {
            $.authServerId = authServerId;
            return this;
        }

        /**
         * @param authServerId The ID of the Auth Server.
         * 
         * @return builder
         * 
         */
        public Builder authServerId(String authServerId) {
            return authServerId(Output.of(authServerId));
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(@Nullable Output<List<String>> clientWhitelists) {
            $.clientWhitelists = clientWhitelists;
            return this;
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(List<String> clientWhitelists) {
            return clientWhitelists(Output.of(clientWhitelists));
        }

        /**
         * @param clientWhitelists The clients to whitelist the policy for. `[&#34;ALL_CLIENTS&#34;]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
         * 
         * @return builder
         * 
         */
        public Builder clientWhitelists(String... clientWhitelists) {
            return clientWhitelists(List.of(clientWhitelists));
        }

        /**
         * @param description The description of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status The status of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Auth Server Policy.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ServerPolicyState build() {
            return $;
        }
    }

}
