// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMetadataSamlResult {
    /**
     * @return The application ID.
     * 
     */
    private String appId;
    /**
     * @return Public certificate from application metadata.
     * 
     */
    private String certificate;
    /**
     * @return Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
     * 
     */
    private String entityId;
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    private String httpPostBinding;
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    private String httpRedirectBinding;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Certificate Key ID.
     * 
     */
    private @Nullable String keyId;
    /**
     * @return Raw metadata of application.
     * 
     */
    private String metadata;
    /**
     * @return Whether authn requests are signed.
     * 
     */
    private Boolean wantAuthnRequestsSigned;

    private GetMetadataSamlResult() {}
    /**
     * @return The application ID.
     * 
     */
    public String appId() {
        return this.appId;
    }
    /**
     * @return Public certificate from application metadata.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Entity URL for instance https://www.okta.com/saml2/service-provider/sposcfdmlybtwkdcgtuf
     * 
     */
    public String entityId() {
        return this.entityId;
    }
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
     * 
     */
    public String httpPostBinding() {
        return this.httpPostBinding;
    }
    /**
     * @return urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
     * 
     */
    public String httpRedirectBinding() {
        return this.httpRedirectBinding;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Certificate Key ID.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return Raw metadata of application.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return Whether authn requests are signed.
     * 
     */
    public Boolean wantAuthnRequestsSigned() {
        return this.wantAuthnRequestsSigned;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetadataSamlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appId;
        private String certificate;
        private String entityId;
        private String httpPostBinding;
        private String httpRedirectBinding;
        private String id;
        private @Nullable String keyId;
        private String metadata;
        private Boolean wantAuthnRequestsSigned;
        public Builder() {}
        public Builder(GetMetadataSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.certificate = defaults.certificate;
    	      this.entityId = defaults.entityId;
    	      this.httpPostBinding = defaults.httpPostBinding;
    	      this.httpRedirectBinding = defaults.httpRedirectBinding;
    	      this.id = defaults.id;
    	      this.keyId = defaults.keyId;
    	      this.metadata = defaults.metadata;
    	      this.wantAuthnRequestsSigned = defaults.wantAuthnRequestsSigned;
        }

        @CustomType.Setter
        public Builder appId(String appId) {
            if (appId == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "appId");
            }
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            if (entityId == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "entityId");
            }
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder httpPostBinding(String httpPostBinding) {
            if (httpPostBinding == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "httpPostBinding");
            }
            this.httpPostBinding = httpPostBinding;
            return this;
        }
        @CustomType.Setter
        public Builder httpRedirectBinding(String httpRedirectBinding) {
            if (httpRedirectBinding == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "httpRedirectBinding");
            }
            this.httpRedirectBinding = httpRedirectBinding;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {

            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder wantAuthnRequestsSigned(Boolean wantAuthnRequestsSigned) {
            if (wantAuthnRequestsSigned == null) {
              throw new MissingRequiredPropertyException("GetMetadataSamlResult", "wantAuthnRequestsSigned");
            }
            this.wantAuthnRequestsSigned = wantAuthnRequestsSigned;
            return this;
        }
        public GetMetadataSamlResult build() {
            final var _resultValue = new GetMetadataSamlResult();
            _resultValue.appId = appId;
            _resultValue.certificate = certificate;
            _resultValue.entityId = entityId;
            _resultValue.httpPostBinding = httpPostBinding;
            _resultValue.httpRedirectBinding = httpRedirectBinding;
            _resultValue.id = id;
            _resultValue.keyId = keyId;
            _resultValue.metadata = metadata;
            _resultValue.wantAuthnRequestsSigned = wantAuthnRequestsSigned;
            return _resultValue;
        }
    }
}
