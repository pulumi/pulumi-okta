// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAdminRolesArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAdminRolesArgs Empty = new UserAdminRolesArgs();

    /**
     * The list of Okta user admin roles, e.g. `[&#34;APP_ADMIN&#34;, &#34;USER_ADMIN&#34;]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     */
    @Import(name="adminRoles", required=true)
    private Output<List<String>> adminRoles;

    /**
     * @return The list of Okta user admin roles, e.g. `[&#34;APP_ADMIN&#34;, &#34;USER_ADMIN&#34;]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     */
    public Output<List<String>> adminRoles() {
        return this.adminRoles;
    }

    /**
     * When this setting is enabled, the admins won&#39;t receive any of the default Okta
     * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    @Import(name="disableNotifications")
    private @Nullable Output<Boolean> disableNotifications;

    /**
     * @return When this setting is enabled, the admins won&#39;t receive any of the default Okta
     * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    public Optional<Output<Boolean>> disableNotifications() {
        return Optional.ofNullable(this.disableNotifications);
    }

    /**
     * Okta user ID.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return Okta user ID.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserAdminRolesArgs() {}

    private UserAdminRolesArgs(UserAdminRolesArgs $) {
        this.adminRoles = $.adminRoles;
        this.disableNotifications = $.disableNotifications;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAdminRolesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAdminRolesArgs $;

        public Builder() {
            $ = new UserAdminRolesArgs();
        }

        public Builder(UserAdminRolesArgs defaults) {
            $ = new UserAdminRolesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRoles The list of Okta user admin roles, e.g. `[&#34;APP_ADMIN&#34;, &#34;USER_ADMIN&#34;]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(Output<List<String>> adminRoles) {
            $.adminRoles = adminRoles;
            return this;
        }

        /**
         * @param adminRoles The list of Okta user admin roles, e.g. `[&#34;APP_ADMIN&#34;, &#34;USER_ADMIN&#34;]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(List<String> adminRoles) {
            return adminRoles(Output.of(adminRoles));
        }

        /**
         * @param adminRoles The list of Okta user admin roles, e.g. `[&#34;APP_ADMIN&#34;, &#34;USER_ADMIN&#34;]` See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta
         * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(@Nullable Output<Boolean> disableNotifications) {
            $.disableNotifications = disableNotifications;
            return this;
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta
         * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(Boolean disableNotifications) {
            return disableNotifications(Output.of(disableNotifications));
        }

        /**
         * @param userId Okta user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Okta user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserAdminRolesArgs build() {
            if ($.adminRoles == null) {
                throw new MissingRequiredPropertyException("UserAdminRolesArgs", "adminRoles");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserAdminRolesArgs", "userId");
            }
            return $;
        }
    }

}
