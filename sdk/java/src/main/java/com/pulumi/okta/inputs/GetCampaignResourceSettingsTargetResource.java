// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetCampaignResourceSettingsTargetResourceEntitlement;
import com.pulumi.okta.inputs.GetCampaignResourceSettingsTargetResourceEntitlementBundle;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCampaignResourceSettingsTargetResource extends com.pulumi.resources.InvokeArgs {

    public static final GetCampaignResourceSettingsTargetResource Empty = new GetCampaignResourceSettingsTargetResource();

    /**
     * An array of entitlement bundles associated with resourceId that should be chosen as target when creating reviews.
     * 
     */
    @Import(name="entitlementBundles")
    private @Nullable List<GetCampaignResourceSettingsTargetResourceEntitlementBundle> entitlementBundles;

    /**
     * @return An array of entitlement bundles associated with resourceId that should be chosen as target when creating reviews.
     * 
     */
    public Optional<List<GetCampaignResourceSettingsTargetResourceEntitlementBundle>> entitlementBundles() {
        return Optional.ofNullable(this.entitlementBundles);
    }

    @Import(name="entitlements")
    private @Nullable List<GetCampaignResourceSettingsTargetResourceEntitlement> entitlements;

    public Optional<List<GetCampaignResourceSettingsTargetResourceEntitlement>> entitlements() {
        return Optional.ofNullable(this.entitlements);
    }

    /**
     * Include all entitlements and entitlement bundles for this application.
     * 
     */
    @Import(name="includeAllEntitlementsAndBundles", required=true)
    private Boolean includeAllEntitlementsAndBundles;

    /**
     * @return Include all entitlements and entitlement bundles for this application.
     * 
     */
    public Boolean includeAllEntitlementsAndBundles() {
        return this.includeAllEntitlementsAndBundles;
    }

    /**
     * The resource ID that is being reviewed.
     * 
     */
    @Import(name="resourceId", required=true)
    private String resourceId;

    /**
     * @return The resource ID that is being reviewed.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * The type of Okta resource.
     * 
     */
    @Import(name="resourceType", required=true)
    private String resourceType;

    /**
     * @return The type of Okta resource.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    private GetCampaignResourceSettingsTargetResource() {}

    private GetCampaignResourceSettingsTargetResource(GetCampaignResourceSettingsTargetResource $) {
        this.entitlementBundles = $.entitlementBundles;
        this.entitlements = $.entitlements;
        this.includeAllEntitlementsAndBundles = $.includeAllEntitlementsAndBundles;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCampaignResourceSettingsTargetResource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCampaignResourceSettingsTargetResource $;

        public Builder() {
            $ = new GetCampaignResourceSettingsTargetResource();
        }

        public Builder(GetCampaignResourceSettingsTargetResource defaults) {
            $ = new GetCampaignResourceSettingsTargetResource(Objects.requireNonNull(defaults));
        }

        /**
         * @param entitlementBundles An array of entitlement bundles associated with resourceId that should be chosen as target when creating reviews.
         * 
         * @return builder
         * 
         */
        public Builder entitlementBundles(@Nullable List<GetCampaignResourceSettingsTargetResourceEntitlementBundle> entitlementBundles) {
            $.entitlementBundles = entitlementBundles;
            return this;
        }

        /**
         * @param entitlementBundles An array of entitlement bundles associated with resourceId that should be chosen as target when creating reviews.
         * 
         * @return builder
         * 
         */
        public Builder entitlementBundles(GetCampaignResourceSettingsTargetResourceEntitlementBundle... entitlementBundles) {
            return entitlementBundles(List.of(entitlementBundles));
        }

        public Builder entitlements(@Nullable List<GetCampaignResourceSettingsTargetResourceEntitlement> entitlements) {
            $.entitlements = entitlements;
            return this;
        }

        public Builder entitlements(GetCampaignResourceSettingsTargetResourceEntitlement... entitlements) {
            return entitlements(List.of(entitlements));
        }

        /**
         * @param includeAllEntitlementsAndBundles Include all entitlements and entitlement bundles for this application.
         * 
         * @return builder
         * 
         */
        public Builder includeAllEntitlementsAndBundles(Boolean includeAllEntitlementsAndBundles) {
            $.includeAllEntitlementsAndBundles = includeAllEntitlementsAndBundles;
            return this;
        }

        /**
         * @param resourceId The resource ID that is being reviewed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceType The type of Okta resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public GetCampaignResourceSettingsTargetResource build() {
            if ($.includeAllEntitlementsAndBundles == null) {
                throw new MissingRequiredPropertyException("GetCampaignResourceSettingsTargetResource", "includeAllEntitlementsAndBundles");
            }
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("GetCampaignResourceSettingsTargetResource", "resourceId");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("GetCampaignResourceSettingsTargetResource", "resourceType");
            }
            return $;
        }
    }

}
