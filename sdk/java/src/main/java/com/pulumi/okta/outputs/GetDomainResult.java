// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetDomainDnsRecord;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDomainResult {
    /**
     * @return Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED&#34;
     * 
     */
    private String certificateSourceType;
    /**
     * @return TXT and CNAME records to be registered for the Domain.
     * 
     */
    private List<GetDomainDnsRecord> dnsRecords;
    /**
     * @return Domain name
     * 
     */
    private String domain;
    private String domainIdOrName;
    /**
     * @return Domain ID
     * 
     */
    private String id;
    /**
     * @return Certificate metadata for the Domain
     * 
     */
    private Map<String,String> publicCertificate;
    /**
     * @return Status of the domain. Values: `NOT_STARTED`, `IN_PROGRESS`, `VERIFIED`, `COMPLETED`
     * 
     */
    private String validationStatus;

    private GetDomainResult() {}
    /**
     * @return Certificate source type that indicates whether the certificate is provided by the user or Okta. Values: MANUAL, OKTA_MANAGED&#34;
     * 
     */
    public String certificateSourceType() {
        return this.certificateSourceType;
    }
    /**
     * @return TXT and CNAME records to be registered for the Domain.
     * 
     */
    public List<GetDomainDnsRecord> dnsRecords() {
        return this.dnsRecords;
    }
    /**
     * @return Domain name
     * 
     */
    public String domain() {
        return this.domain;
    }
    public String domainIdOrName() {
        return this.domainIdOrName;
    }
    /**
     * @return Domain ID
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Certificate metadata for the Domain
     * 
     */
    public Map<String,String> publicCertificate() {
        return this.publicCertificate;
    }
    /**
     * @return Status of the domain. Values: `NOT_STARTED`, `IN_PROGRESS`, `VERIFIED`, `COMPLETED`
     * 
     */
    public String validationStatus() {
        return this.validationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateSourceType;
        private List<GetDomainDnsRecord> dnsRecords;
        private String domain;
        private String domainIdOrName;
        private String id;
        private Map<String,String> publicCertificate;
        private String validationStatus;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateSourceType = defaults.certificateSourceType;
    	      this.dnsRecords = defaults.dnsRecords;
    	      this.domain = defaults.domain;
    	      this.domainIdOrName = defaults.domainIdOrName;
    	      this.id = defaults.id;
    	      this.publicCertificate = defaults.publicCertificate;
    	      this.validationStatus = defaults.validationStatus;
        }

        @CustomType.Setter
        public Builder certificateSourceType(String certificateSourceType) {
            if (certificateSourceType == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "certificateSourceType");
            }
            this.certificateSourceType = certificateSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsRecords(List<GetDomainDnsRecord> dnsRecords) {
            if (dnsRecords == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "dnsRecords");
            }
            this.dnsRecords = dnsRecords;
            return this;
        }
        public Builder dnsRecords(GetDomainDnsRecord... dnsRecords) {
            return dnsRecords(List.of(dnsRecords));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainIdOrName(String domainIdOrName) {
            if (domainIdOrName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domainIdOrName");
            }
            this.domainIdOrName = domainIdOrName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder publicCertificate(Map<String,String> publicCertificate) {
            if (publicCertificate == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "publicCertificate");
            }
            this.publicCertificate = publicCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder validationStatus(String validationStatus) {
            if (validationStatus == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "validationStatus");
            }
            this.validationStatus = validationStatus;
            return this;
        }
        public GetDomainResult build() {
            final var _resultValue = new GetDomainResult();
            _resultValue.certificateSourceType = certificateSourceType;
            _resultValue.dnsRecords = dnsRecords;
            _resultValue.domain = domain;
            _resultValue.domainIdOrName = domainIdOrName;
            _resultValue.id = id;
            _resultValue.publicCertificate = publicCertificate;
            _resultValue.validationStatus = validationStatus;
            return _resultValue;
        }
    }
}
