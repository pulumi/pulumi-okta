// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.group.RolesArgs;
import com.pulumi.okta.group.inputs.RolesState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; **DEPRECATED:** This resource is deprecated and will be removed in favor of using `okta.group.Role`, please migrate as soon as possible
 * 
 * This resource allows you to create and configure Group level Admin Role Assignments.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.group.Roles;
 * import com.pulumi.okta.group.RolesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Roles(&#34;example&#34;, RolesArgs.builder()        
 *             .adminRoles(&#34;SUPER_ADMIN&#34;)
 *             .groupId(&#34;&lt;group id&gt;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Group Role Assignment can be imported via the Okta Group ID.
 * 
 * ```sh
 *  $ pulumi import okta:group/roles:Roles example &amp;#60;group id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:group/roles:Roles")
public class Roles extends com.pulumi.resources.CustomResource {
    /**
     * Admin roles associated with the group. It can be any of the following values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     */
    @Export(name="adminRoles", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> adminRoles;

    /**
     * @return Admin roles associated with the group. It can be any of the following values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     */
    public Output<Optional<List<String>>> adminRoles() {
        return Codegen.optional(this.adminRoles);
    }
    /**
     * The ID of group to attach admin roles to.
     * 
     */
    @Export(name="groupId", type=String.class, parameters={})
    private Output<String> groupId;

    /**
     * @return The ID of group to attach admin roles to.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Roles(String name) {
        this(name, RolesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Roles(String name, RolesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Roles(String name, RolesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:group/roles:Roles", name, args == null ? RolesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Roles(String name, Output<String> id, @Nullable RolesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:group/roles:Roles", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Roles get(String name, Output<String> id, @Nullable RolesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Roles(name, id, state, options);
    }
}
