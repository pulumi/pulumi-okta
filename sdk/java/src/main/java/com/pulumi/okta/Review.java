// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.ReviewArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.ReviewState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages reassignment of review.
 * 
 * This resource allows you to reassign an already existing review.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.Review;
 * import com.pulumi.okta.ReviewArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Review("test", ReviewArgs.builder()
 *             .campaignId("icizigd86iM9sOcbN1d6")
 *             .reviewerId("00unli90kor62oF5Z1d7")
 *             .reviewIds("icrztblxbBFiVKepb1d6")
 *             .reviewerLevel("FIRST")
 *             .note("John Smith is on leave for this month. His manager Tim will be the reviewer instead.")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:index/review:Review example &lt;review_id?
 * ```
 * 
 */
@ResourceType(type="okta:index/review:Review")
public class Review extends com.pulumi.resources.CustomResource {
    /**
     * The id of the campaign.
     * 
     */
    @Export(name="campaignId", refs={String.class}, tree="[0]")
    private Output<String> campaignId;

    /**
     * @return The id of the campaign.
     * 
     */
    public Output<String> campaignId() {
        return this.campaignId;
    }
    /**
     * The ISO 8601 formatted date and time when the resource was created
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return The ISO 8601 formatted date and time when the resource was created
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * The id of user who created the resource.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return The id of user who created the resource.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * The decision of the reviewer.
     * 
     */
    @Export(name="decision", refs={String.class}, tree="[0]")
    private Output<String> decision;

    /**
     * @return The decision of the reviewer.
     * 
     */
    public Output<String> decision() {
        return this.decision;
    }
    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    @Export(name="lastUpdated", refs={String.class}, tree="[0]")
    private Output<String> lastUpdated;

    /**
     * @return The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    public Output<String> lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * The id of user who last updated the object.
     * 
     */
    @Export(name="lastUpdatedBy", refs={String.class}, tree="[0]")
    private Output<String> lastUpdatedBy;

    /**
     * @return The id of user who last updated the object.
     * 
     */
    public Output<String> lastUpdatedBy() {
        return this.lastUpdatedBy;
    }
    /**
     * A note to justify the reassignment decision for the specified review.
     * 
     */
    @Export(name="note", refs={String.class}, tree="[0]")
    private Output<String> note;

    /**
     * @return A note to justify the reassignment decision for the specified review.
     * 
     */
    public Output<String> note() {
        return this.note;
    }
    @Export(name="resourceId", refs={String.class}, tree="[0]")
    private Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId;
    }
    /**
     * A list of reviews (review id values) that are reassigned to the new reviewer.
     * 
     */
    @Export(name="reviewIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> reviewIds;

    /**
     * @return A list of reviews (review id values) that are reassigned to the new reviewer.
     * 
     */
    public Output<List<String>> reviewIds() {
        return this.reviewIds;
    }
    /**
     * The Okta user id of the new reviewer.
     * 
     */
    @Export(name="reviewerId", refs={String.class}, tree="[0]")
    private Output<String> reviewerId;

    /**
     * @return The Okta user id of the new reviewer.
     * 
     */
    public Output<String> reviewerId() {
        return this.reviewerId;
    }
    /**
     * Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
     * 
     */
    @Export(name="reviewerLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reviewerLevel;

    /**
     * @return Identifies the reviewer level of each reviews during access certification. Applicable for multi level campaigns only.
     * 
     */
    public Output<Optional<String>> reviewerLevel() {
        return Codegen.optional(this.reviewerLevel);
    }
    /**
     * The type of reviewer to which the review is assigned.
     * 
     */
    @Export(name="reviewerType", refs={String.class}, tree="[0]")
    private Output<String> reviewerType;

    /**
     * @return The type of reviewer to which the review is assigned.
     * 
     */
    public Output<String> reviewerType() {
        return this.reviewerType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Review(java.lang.String name) {
        this(name, ReviewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Review(java.lang.String name, ReviewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Review(java.lang.String name, ReviewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/review:Review", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Review(java.lang.String name, Output<java.lang.String> id, @Nullable ReviewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/review:Review", name, state, makeResourceOptions(options, id), false);
    }

    private static ReviewArgs makeArgs(ReviewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReviewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Review get(java.lang.String name, Output<java.lang.String> id, @Nullable ReviewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Review(name, id, state, options);
    }
}
