// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.user.inputs.GetUsersSearchArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersArgs Empty = new GetUsersArgs();

    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     * 
     */
    @Import(name="compoundSearchOperator")
    private @Nullable Output<String> compoundSearchOperator;

    /**
     * @return Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     * 
     */
    public Optional<Output<String>> compoundSearchOperator() {
        return Optional.ofNullable(this.compoundSearchOperator);
    }

    /**
     * Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
     * 
     */
    @Import(name="delayReadSeconds")
    private @Nullable Output<String> delayReadSeconds;

    /**
     * @return Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
     * 
     */
    public Optional<Output<String>> delayReadSeconds() {
        return Optional.ofNullable(this.delayReadSeconds);
    }

    /**
     * Id of group used to find users based on membership.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return Id of group used to find users based on membership.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Fetch each user&#39;s group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
     * 
     */
    @Import(name="includeGroups")
    private @Nullable Output<Boolean> includeGroups;

    /**
     * @return Fetch each user&#39;s group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
     * 
     */
    public Optional<Output<Boolean>> includeGroups() {
        return Optional.ofNullable(this.includeGroups);
    }

    /**
     * Fetch each user&#39;s administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
     * 
     */
    @Import(name="includeRoles")
    private @Nullable Output<Boolean> includeRoles;

    /**
     * @return Fetch each user&#39;s administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
     * 
     */
    public Optional<Output<Boolean>> includeRoles() {
        return Optional.ofNullable(this.includeRoles);
    }

    /**
     * Map of search criteria. It supports the following properties.
     * 
     */
    @Import(name="searches")
    private @Nullable Output<List<GetUsersSearchArgs>> searches;

    /**
     * @return Map of search criteria. It supports the following properties.
     * 
     */
    public Optional<Output<List<GetUsersSearchArgs>>> searches() {
        return Optional.ofNullable(this.searches);
    }

    private GetUsersArgs() {}

    private GetUsersArgs(GetUsersArgs $) {
        this.compoundSearchOperator = $.compoundSearchOperator;
        this.delayReadSeconds = $.delayReadSeconds;
        this.groupId = $.groupId;
        this.includeGroups = $.includeGroups;
        this.includeRoles = $.includeRoles;
        this.searches = $.searches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsersArgs $;

        public Builder() {
            $ = new GetUsersArgs();
        }

        public Builder(GetUsersArgs defaults) {
            $ = new GetUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compoundSearchOperator Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
         * 
         * @return builder
         * 
         */
        public Builder compoundSearchOperator(@Nullable Output<String> compoundSearchOperator) {
            $.compoundSearchOperator = compoundSearchOperator;
            return this;
        }

        /**
         * @param compoundSearchOperator Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
         * 
         * @return builder
         * 
         */
        public Builder compoundSearchOperator(String compoundSearchOperator) {
            return compoundSearchOperator(Output.of(compoundSearchOperator));
        }

        /**
         * @param delayReadSeconds Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
         * 
         * @return builder
         * 
         */
        public Builder delayReadSeconds(@Nullable Output<String> delayReadSeconds) {
            $.delayReadSeconds = delayReadSeconds;
            return this;
        }

        /**
         * @param delayReadSeconds Force delay of the users read by N seconds. Useful when eventual consistency of users information needs to be allowed for; for instance, when administrator roles are known to have been applied.
         * 
         * @return builder
         * 
         */
        public Builder delayReadSeconds(String delayReadSeconds) {
            return delayReadSeconds(Output.of(delayReadSeconds));
        }

        /**
         * @param groupId Id of group used to find users based on membership.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Id of group used to find users based on membership.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param includeGroups Fetch each user&#39;s group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
         * 
         * @return builder
         * 
         */
        public Builder includeGroups(@Nullable Output<Boolean> includeGroups) {
            $.includeGroups = includeGroups;
            return this;
        }

        /**
         * @param includeGroups Fetch each user&#39;s group memberships. Defaults to `false`, in which case the `group_memberships` user attribute will be empty.
         * 
         * @return builder
         * 
         */
        public Builder includeGroups(Boolean includeGroups) {
            return includeGroups(Output.of(includeGroups));
        }

        /**
         * @param includeRoles Fetch each user&#39;s administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
         * 
         * @return builder
         * 
         */
        public Builder includeRoles(@Nullable Output<Boolean> includeRoles) {
            $.includeRoles = includeRoles;
            return this;
        }

        /**
         * @param includeRoles Fetch each user&#39;s administrator roles. Defaults to `false`, in which case the `admin_roles` user attribute will be empty.
         * 
         * @return builder
         * 
         */
        public Builder includeRoles(Boolean includeRoles) {
            return includeRoles(Output.of(includeRoles));
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(@Nullable Output<List<GetUsersSearchArgs>> searches) {
            $.searches = searches;
            return this;
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(List<GetUsersSearchArgs> searches) {
            return searches(Output.of(searches));
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(GetUsersSearchArgs... searches) {
            return searches(List.of(searches));
        }

        public GetUsersArgs build() {
            return $;
        }
    }

}
