// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetCatalogEntryUserAccessRequestFieldsDataChoice;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogEntryUserAccessRequestFieldsData {
    /**
     * @return Valid choices when type is SELECT or MULTISELECT.
     * 
     */
    private @Nullable List<GetCatalogEntryUserAccessRequestFieldsDataChoice> choices;
    private String id;
    /**
     * @return Label of the requester field.
     * 
     */
    private String label;
    /**
     * @return The maximum value allowed for this field. Only applies to DURATION fields.
     * 
     */
    private String maximumValue;
    /**
     * @return Indicates this field is immutable.
     * 
     */
    private Boolean readOnly;
    /**
     * @return Indicates whether a value to this field is required to advance the request.
     * 
     */
    private Boolean required;
    /**
     * @return Type of value for the requester field.
     * 
     */
    private String type;
    /**
     * @return An admin configured value for this field. Only applies to DURATION fields.
     * 
     */
    private String value;

    private GetCatalogEntryUserAccessRequestFieldsData() {}
    /**
     * @return Valid choices when type is SELECT or MULTISELECT.
     * 
     */
    public List<GetCatalogEntryUserAccessRequestFieldsDataChoice> choices() {
        return this.choices == null ? List.of() : this.choices;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Label of the requester field.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The maximum value allowed for this field. Only applies to DURATION fields.
     * 
     */
    public String maximumValue() {
        return this.maximumValue;
    }
    /**
     * @return Indicates this field is immutable.
     * 
     */
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return Indicates whether a value to this field is required to advance the request.
     * 
     */
    public Boolean required() {
        return this.required;
    }
    /**
     * @return Type of value for the requester field.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return An admin configured value for this field. Only applies to DURATION fields.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogEntryUserAccessRequestFieldsData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetCatalogEntryUserAccessRequestFieldsDataChoice> choices;
        private String id;
        private String label;
        private String maximumValue;
        private Boolean readOnly;
        private Boolean required;
        private String type;
        private String value;
        public Builder() {}
        public Builder(GetCatalogEntryUserAccessRequestFieldsData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.choices = defaults.choices;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.maximumValue = defaults.maximumValue;
    	      this.readOnly = defaults.readOnly;
    	      this.required = defaults.required;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder choices(@Nullable List<GetCatalogEntryUserAccessRequestFieldsDataChoice> choices) {

            this.choices = choices;
            return this;
        }
        public Builder choices(GetCatalogEntryUserAccessRequestFieldsDataChoice... choices) {
            return choices(List.of(choices));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder maximumValue(String maximumValue) {
            if (maximumValue == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "maximumValue");
            }
            this.maximumValue = maximumValue;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            if (readOnly == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "readOnly");
            }
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder required(Boolean required) {
            if (required == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "required");
            }
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsData", "value");
            }
            this.value = value;
            return this;
        }
        public GetCatalogEntryUserAccessRequestFieldsData build() {
            final var _resultValue = new GetCatalogEntryUserAccessRequestFieldsData();
            _resultValue.choices = choices;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.maximumValue = maximumValue;
            _resultValue.readOnly = readOnly;
            _resultValue.required = required;
            _resultValue.type = type;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
