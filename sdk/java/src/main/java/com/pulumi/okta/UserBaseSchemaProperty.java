// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.UserBaseSchemaPropertyArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.UserBaseSchemaPropertyState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="okta:index/userBaseSchemaProperty:UserBaseSchemaProperty")
public class UserBaseSchemaProperty extends com.pulumi.resources.CustomResource {
    /**
     * Subschema unique string identifier
     * 
     */
    @Export(name="index", refs={String.class}, tree="[0]")
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }
    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    @Export(name="master", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> master;

    /**
     * @return SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    public Output<Optional<String>> master() {
        return Codegen.optional(this.master);
    }
    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    @Export(name="pattern", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    public Output<Optional<String>> pattern() {
        return Codegen.optional(this.pattern);
    }
    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    @Export(name="permissions", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> permissions;

    /**
     * @return SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Whether the subschema is required
     * 
     */
    @Export(name="required", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Output<Optional<Boolean>> required() {
        return Codegen.optional(this.required);
    }
    /**
     * Subschema title (display name)
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Subschema title (display name)
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Custom subschema user type
     * 
     */
    @Export(name="userType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userType;

    /**
     * @return Custom subschema user type
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserBaseSchemaProperty(String name) {
        this(name, UserBaseSchemaPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserBaseSchemaProperty(String name, UserBaseSchemaPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserBaseSchemaProperty(String name, UserBaseSchemaPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, args == null ? UserBaseSchemaPropertyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserBaseSchemaProperty(String name, Output<String> id, @Nullable UserBaseSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserBaseSchemaProperty get(String name, Output<String> id, @Nullable UserBaseSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserBaseSchemaProperty(name, id, state, options);
    }
}
