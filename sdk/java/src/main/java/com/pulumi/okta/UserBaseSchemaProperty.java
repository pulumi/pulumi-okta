// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.UserBaseSchemaPropertyArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.UserBaseSchemaPropertyState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a User Base Schema property. This resource allows you to configure a base user schema property.
 * 
 * ## IMPORTANT NOTE:
 * 
 * Based on the [official documentation](https://developer.okta.com/docs/reference/api/schemas/#user-profile-base-subschema)
 * base properties can not be modified, except to update permissions, to change the nullability of `firstName` and
 * `lastName` (`required` property) or to specify a `pattern` for `login`. Currently, `title` and `type` are required, so
 * they should be set to the current values of the base property. This will be fixed in the future releases, as this is
 * a breaking change.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.UserBaseSchemaProperty;
 * import com.pulumi.okta.UserBaseSchemaPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new UserBaseSchemaProperty("example", UserBaseSchemaPropertyArgs.builder()
 *             .index("firstName")
 *             .title("First name")
 *             .type("string")
 *             .required(true)
 *             .master("OKTA")
 *             .userType(exampleOktaUserType.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ### User schema property of default user type can be imported via the property index.
 * 
 * ```sh
 * $ pulumi import okta:index/userBaseSchemaProperty:UserBaseSchemaProperty example &lt;property_name&gt;
 * ```
 * 
 * ### User schema property of custom user type can be imported via user type id and property index
 * 
 * ```sh
 * $ pulumi import okta:index/userBaseSchemaProperty:UserBaseSchemaProperty example &lt;user_type_id&gt;.&lt;property name&gt;
 * ```
 * 
 */
@ResourceType(type="okta:index/userBaseSchemaProperty:UserBaseSchemaProperty")
public class UserBaseSchemaProperty extends com.pulumi.resources.CustomResource {
    /**
     * Subschema unique string identifier
     * 
     */
    @Export(name="index", refs={String.class}, tree="[0]")
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }
    /**
     * Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`. Default: `PROFILE_MASTER`
     * 
     */
    @Export(name="master", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> master;

    /**
     * @return Master priority for the user schema property. It can be set to `PROFILE_MASTER` or `OKTA`. Default: `PROFILE_MASTER`
     * 
     */
    public Output<Optional<String>> master() {
        return Codegen.optional(this.master);
    }
    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    @Export(name="pattern", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    public Output<Optional<String>> pattern() {
        return Codegen.optional(this.pattern);
    }
    /**
     * Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     * 
     */
    @Export(name="permissions", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> permissions;

    /**
     * @return Access control permissions for the property. It can be set to `READ_WRITE`, `READ_ONLY`, `HIDE`. Default: `READ_ONLY`
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Whether the subschema is required
     * 
     */
    @Export(name="required", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Output<Optional<Boolean>> required() {
        return Codegen.optional(this.required);
    }
    /**
     * Subschema title (display name)
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Subschema title (display name)
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the schema property. It can be `string`, `boolean`, `number`, `integer`, `array`, or `object`
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * User type ID. By default, it is `default`
     * 
     */
    @Export(name="userType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userType;

    /**
     * @return User type ID. By default, it is `default`
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserBaseSchemaProperty(java.lang.String name) {
        this(name, UserBaseSchemaPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserBaseSchemaProperty(java.lang.String name, UserBaseSchemaPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserBaseSchemaProperty(java.lang.String name, UserBaseSchemaPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private UserBaseSchemaProperty(java.lang.String name, Output<java.lang.String> id, @Nullable UserBaseSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/userBaseSchemaProperty:UserBaseSchemaProperty", name, state, makeResourceOptions(options, id), false);
    }

    private static UserBaseSchemaPropertyArgs makeArgs(UserBaseSchemaPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UserBaseSchemaPropertyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserBaseSchemaProperty get(java.lang.String name, Output<java.lang.String> id, @Nullable UserBaseSchemaPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserBaseSchemaProperty(name, id, state, options);
    }
}
