// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetCatalogEntryDefaultCounts;
import com.pulumi.okta.outputs.GetCatalogEntryDefaultLinks;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogEntryDefaultResult {
    private @Nullable GetCatalogEntryDefaultCounts counts;
    /**
     * @return Description of the catalog entry.
     * 
     */
    private String description;
    /**
     * @return TThe ID of the catalog entry.
     * 
     */
    private String entryId;
    /**
     * @return Unique identifier for the entry.
     * 
     */
    private String id;
    /**
     * @return Label of the entry. Enum: `Application`, `Resource Collection`.
     * 
     */
    private String label;
    private @Nullable GetCatalogEntryDefaultLinks links;
    /**
     * @return The name of the catalog entry.
     * 
     */
    private String name;
    /**
     * @return Parent of the catalog entry.
     * 
     */
    private String parent;
    /**
     * @return Is the resource requestable.
     * 
     */
    private Boolean requestable;

    private GetCatalogEntryDefaultResult() {}
    public Optional<GetCatalogEntryDefaultCounts> counts() {
        return Optional.ofNullable(this.counts);
    }
    /**
     * @return Description of the catalog entry.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return TThe ID of the catalog entry.
     * 
     */
    public String entryId() {
        return this.entryId;
    }
    /**
     * @return Unique identifier for the entry.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Label of the entry. Enum: `Application`, `Resource Collection`.
     * 
     */
    public String label() {
        return this.label;
    }
    public Optional<GetCatalogEntryDefaultLinks> links() {
        return Optional.ofNullable(this.links);
    }
    /**
     * @return The name of the catalog entry.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Parent of the catalog entry.
     * 
     */
    public String parent() {
        return this.parent;
    }
    /**
     * @return Is the resource requestable.
     * 
     */
    public Boolean requestable() {
        return this.requestable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogEntryDefaultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetCatalogEntryDefaultCounts counts;
        private String description;
        private String entryId;
        private String id;
        private String label;
        private @Nullable GetCatalogEntryDefaultLinks links;
        private String name;
        private String parent;
        private Boolean requestable;
        public Builder() {}
        public Builder(GetCatalogEntryDefaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counts = defaults.counts;
    	      this.description = defaults.description;
    	      this.entryId = defaults.entryId;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.links = defaults.links;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.requestable = defaults.requestable;
        }

        @CustomType.Setter
        public Builder counts(@Nullable GetCatalogEntryDefaultCounts counts) {

            this.counts = counts;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder entryId(String entryId) {
            if (entryId == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "entryId");
            }
            this.entryId = entryId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder links(@Nullable GetCatalogEntryDefaultLinks links) {

            this.links = links;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder requestable(Boolean requestable) {
            if (requestable == null) {
              throw new MissingRequiredPropertyException("GetCatalogEntryDefaultResult", "requestable");
            }
            this.requestable = requestable;
            return this;
        }
        public GetCatalogEntryDefaultResult build() {
            final var _resultValue = new GetCatalogEntryDefaultResult();
            _resultValue.counts = counts;
            _resultValue.description = description;
            _resultValue.entryId = entryId;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.links = links;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.requestable = requestable;
            return _resultValue;
        }
    }
}
