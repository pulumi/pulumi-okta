// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrgConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrgConfigurationArgs Empty = new OrgConfigurationArgs();

    /**
     * Primary address of org
     * 
     */
    @Import(name="address1")
    private @Nullable Output<String> address1;

    /**
     * @return Primary address of org
     * 
     */
    public Optional<Output<String>> address1() {
        return Optional.ofNullable(this.address1);
    }

    /**
     * Secondary address of org
     * 
     */
    @Import(name="address2")
    private @Nullable Output<String> address2;

    /**
     * @return Secondary address of org
     * 
     */
    public Optional<Output<String>> address2() {
        return Optional.ofNullable(this.address2);
    }

    /**
     * User ID representing the billing contact
     * 
     */
    @Import(name="billingContactUser")
    private @Nullable Output<String> billingContactUser;

    /**
     * @return User ID representing the billing contact
     * 
     */
    public Optional<Output<String>> billingContactUser() {
        return Optional.ofNullable(this.billingContactUser);
    }

    /**
     * City of org
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return City of org
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * Name of org
     * 
     */
    @Import(name="companyName", required=true)
    private Output<String> companyName;

    /**
     * @return Name of org
     * 
     */
    public Output<String> companyName() {
        return this.companyName;
    }

    /**
     * Country of org
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return Country of org
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * Support link of org
     * 
     */
    @Import(name="endUserSupportHelpUrl")
    private @Nullable Output<String> endUserSupportHelpUrl;

    /**
     * @return Support link of org
     * 
     */
    public Optional<Output<String>> endUserSupportHelpUrl() {
        return Optional.ofNullable(this.endUserSupportHelpUrl);
    }

    /**
     * Local path to logo of the org.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Local path to logo of the org.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Indicates whether the org&#39;s users receive Okta Communication emails
     * 
     */
    @Import(name="optOutCommunicationEmails")
    private @Nullable Output<Boolean> optOutCommunicationEmails;

    /**
     * @return Indicates whether the org&#39;s users receive Okta Communication emails
     * 
     */
    public Optional<Output<Boolean>> optOutCommunicationEmails() {
        return Optional.ofNullable(this.optOutCommunicationEmails);
    }

    /**
     * Support help phone of org
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    /**
     * @return Support help phone of org
     * 
     */
    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * Postal code of org
     * 
     */
    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    /**
     * @return Postal code of org
     * 
     */
    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * State of org
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of org
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Support help phone of org
     * 
     */
    @Import(name="supportPhoneNumber")
    private @Nullable Output<String> supportPhoneNumber;

    /**
     * @return Support help phone of org
     * 
     */
    public Optional<Output<String>> supportPhoneNumber() {
        return Optional.ofNullable(this.supportPhoneNumber);
    }

    /**
     * User ID representing the technical contact
     * 
     */
    @Import(name="technicalContactUser")
    private @Nullable Output<String> technicalContactUser;

    /**
     * @return User ID representing the technical contact
     * 
     */
    public Optional<Output<String>> technicalContactUser() {
        return Optional.ofNullable(this.technicalContactUser);
    }

    /**
     * The org&#39;s website
     * 
     */
    @Import(name="website")
    private @Nullable Output<String> website;

    /**
     * @return The org&#39;s website
     * 
     */
    public Optional<Output<String>> website() {
        return Optional.ofNullable(this.website);
    }

    private OrgConfigurationArgs() {}

    private OrgConfigurationArgs(OrgConfigurationArgs $) {
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.billingContactUser = $.billingContactUser;
        this.city = $.city;
        this.companyName = $.companyName;
        this.country = $.country;
        this.endUserSupportHelpUrl = $.endUserSupportHelpUrl;
        this.logo = $.logo;
        this.optOutCommunicationEmails = $.optOutCommunicationEmails;
        this.phoneNumber = $.phoneNumber;
        this.postalCode = $.postalCode;
        this.state = $.state;
        this.supportPhoneNumber = $.supportPhoneNumber;
        this.technicalContactUser = $.technicalContactUser;
        this.website = $.website;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrgConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrgConfigurationArgs $;

        public Builder() {
            $ = new OrgConfigurationArgs();
        }

        public Builder(OrgConfigurationArgs defaults) {
            $ = new OrgConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address1 Primary address of org
         * 
         * @return builder
         * 
         */
        public Builder address1(@Nullable Output<String> address1) {
            $.address1 = address1;
            return this;
        }

        /**
         * @param address1 Primary address of org
         * 
         * @return builder
         * 
         */
        public Builder address1(String address1) {
            return address1(Output.of(address1));
        }

        /**
         * @param address2 Secondary address of org
         * 
         * @return builder
         * 
         */
        public Builder address2(@Nullable Output<String> address2) {
            $.address2 = address2;
            return this;
        }

        /**
         * @param address2 Secondary address of org
         * 
         * @return builder
         * 
         */
        public Builder address2(String address2) {
            return address2(Output.of(address2));
        }

        /**
         * @param billingContactUser User ID representing the billing contact
         * 
         * @return builder
         * 
         */
        public Builder billingContactUser(@Nullable Output<String> billingContactUser) {
            $.billingContactUser = billingContactUser;
            return this;
        }

        /**
         * @param billingContactUser User ID representing the billing contact
         * 
         * @return builder
         * 
         */
        public Builder billingContactUser(String billingContactUser) {
            return billingContactUser(Output.of(billingContactUser));
        }

        /**
         * @param city City of org
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city City of org
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param companyName Name of org
         * 
         * @return builder
         * 
         */
        public Builder companyName(Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName Name of org
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param country Country of org
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country Country of org
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param endUserSupportHelpUrl Support link of org
         * 
         * @return builder
         * 
         */
        public Builder endUserSupportHelpUrl(@Nullable Output<String> endUserSupportHelpUrl) {
            $.endUserSupportHelpUrl = endUserSupportHelpUrl;
            return this;
        }

        /**
         * @param endUserSupportHelpUrl Support link of org
         * 
         * @return builder
         * 
         */
        public Builder endUserSupportHelpUrl(String endUserSupportHelpUrl) {
            return endUserSupportHelpUrl(Output.of(endUserSupportHelpUrl));
        }

        /**
         * @param logo Local path to logo of the org.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Local path to logo of the org.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param optOutCommunicationEmails Indicates whether the org&#39;s users receive Okta Communication emails
         * 
         * @return builder
         * 
         */
        public Builder optOutCommunicationEmails(@Nullable Output<Boolean> optOutCommunicationEmails) {
            $.optOutCommunicationEmails = optOutCommunicationEmails;
            return this;
        }

        /**
         * @param optOutCommunicationEmails Indicates whether the org&#39;s users receive Okta Communication emails
         * 
         * @return builder
         * 
         */
        public Builder optOutCommunicationEmails(Boolean optOutCommunicationEmails) {
            return optOutCommunicationEmails(Output.of(optOutCommunicationEmails));
        }

        /**
         * @param phoneNumber Support help phone of org
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber Support help phone of org
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param postalCode Postal code of org
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode Postal code of org
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param state State of org
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of org
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param supportPhoneNumber Support help phone of org
         * 
         * @return builder
         * 
         */
        public Builder supportPhoneNumber(@Nullable Output<String> supportPhoneNumber) {
            $.supportPhoneNumber = supportPhoneNumber;
            return this;
        }

        /**
         * @param supportPhoneNumber Support help phone of org
         * 
         * @return builder
         * 
         */
        public Builder supportPhoneNumber(String supportPhoneNumber) {
            return supportPhoneNumber(Output.of(supportPhoneNumber));
        }

        /**
         * @param technicalContactUser User ID representing the technical contact
         * 
         * @return builder
         * 
         */
        public Builder technicalContactUser(@Nullable Output<String> technicalContactUser) {
            $.technicalContactUser = technicalContactUser;
            return this;
        }

        /**
         * @param technicalContactUser User ID representing the technical contact
         * 
         * @return builder
         * 
         */
        public Builder technicalContactUser(String technicalContactUser) {
            return technicalContactUser(Output.of(technicalContactUser));
        }

        /**
         * @param website The org&#39;s website
         * 
         * @return builder
         * 
         */
        public Builder website(@Nullable Output<String> website) {
            $.website = website;
            return this;
        }

        /**
         * @param website The org&#39;s website
         * 
         * @return builder
         * 
         */
        public Builder website(String website) {
            return website(Output.of(website));
        }

        public OrgConfigurationArgs build() {
            if ($.companyName == null) {
                throw new MissingRequiredPropertyException("OrgConfigurationArgs", "companyName");
            }
            return $;
        }
    }

}
