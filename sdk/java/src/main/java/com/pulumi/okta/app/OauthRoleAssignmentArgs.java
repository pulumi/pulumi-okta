// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OauthRoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final OauthRoleAssignmentArgs Empty = new OauthRoleAssignmentArgs();

    /**
     * Client ID for the role to be assigned to
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Client ID for the role to be assigned to
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Resource set for the custom role to assign, must be the ID of the created resource set.
     * 
     */
    @Import(name="resourceSet")
    private @Nullable Output<String> resourceSet;

    /**
     * @return Resource set for the custom role to assign, must be the ID of the created resource set.
     * 
     */
    public Optional<Output<String>> resourceSet() {
        return Optional.ofNullable(this.resourceSet);
    }

    /**
     * Custom Role ID
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Custom Role ID
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OauthRoleAssignmentArgs() {}

    private OauthRoleAssignmentArgs(OauthRoleAssignmentArgs $) {
        this.clientId = $.clientId;
        this.resourceSet = $.resourceSet;
        this.role = $.role;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OauthRoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OauthRoleAssignmentArgs $;

        public Builder() {
            $ = new OauthRoleAssignmentArgs();
        }

        public Builder(OauthRoleAssignmentArgs defaults) {
            $ = new OauthRoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Client ID for the role to be assigned to
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID for the role to be assigned to
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param resourceSet Resource set for the custom role to assign, must be the ID of the created resource set.
         * 
         * @return builder
         * 
         */
        public Builder resourceSet(@Nullable Output<String> resourceSet) {
            $.resourceSet = resourceSet;
            return this;
        }

        /**
         * @param resourceSet Resource set for the custom role to assign, must be the ID of the created resource set.
         * 
         * @return builder
         * 
         */
        public Builder resourceSet(String resourceSet) {
            return resourceSet(Output.of(resourceSet));
        }

        /**
         * @param role Custom Role ID
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Custom Role ID
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param type Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OauthRoleAssignmentArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("OauthRoleAssignmentArgs", "clientId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("OauthRoleAssignmentArgs", "type");
            }
            return $;
        }
    }

}
