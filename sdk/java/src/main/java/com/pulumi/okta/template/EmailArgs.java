// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.template;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.template.inputs.EmailTranslationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailArgs Empty = new EmailArgs();

    /**
     * The default language, by default is set to `&#34;en&#34;`.
     * 
     */
    @Import(name="defaultLanguage")
    private @Nullable Output<String> defaultLanguage;

    /**
     * @return The default language, by default is set to `&#34;en&#34;`.
     * 
     */
    public Optional<Output<String>> defaultLanguage() {
        return Optional.ofNullable(this.defaultLanguage);
    }

    /**
     * Set of translations for a particular template.
     * 
     */
    @Import(name="translations", required=true)
    private Output<List<EmailTranslationArgs>> translations;

    /**
     * @return Set of translations for a particular template.
     * 
     */
    public Output<List<EmailTranslationArgs>> translations() {
        return this.translations;
    }

    /**
     * Email template type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Email template type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private EmailArgs() {}

    private EmailArgs(EmailArgs $) {
        this.defaultLanguage = $.defaultLanguage;
        this.translations = $.translations;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailArgs $;

        public Builder() {
            $ = new EmailArgs();
        }

        public Builder(EmailArgs defaults) {
            $ = new EmailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultLanguage The default language, by default is set to `&#34;en&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLanguage(@Nullable Output<String> defaultLanguage) {
            $.defaultLanguage = defaultLanguage;
            return this;
        }

        /**
         * @param defaultLanguage The default language, by default is set to `&#34;en&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLanguage(String defaultLanguage) {
            return defaultLanguage(Output.of(defaultLanguage));
        }

        /**
         * @param translations Set of translations for a particular template.
         * 
         * @return builder
         * 
         */
        public Builder translations(Output<List<EmailTranslationArgs>> translations) {
            $.translations = translations;
            return this;
        }

        /**
         * @param translations Set of translations for a particular template.
         * 
         * @return builder
         * 
         */
        public Builder translations(List<EmailTranslationArgs> translations) {
            return translations(Output.of(translations));
        }

        /**
         * @param translations Set of translations for a particular template.
         * 
         * @return builder
         * 
         */
        public Builder translations(EmailTranslationArgs... translations) {
            return translations(List.of(translations));
        }

        /**
         * @param type Email template type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Email template type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EmailArgs build() {
            $.translations = Objects.requireNonNull($.translations, "expected parameter 'translations' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
