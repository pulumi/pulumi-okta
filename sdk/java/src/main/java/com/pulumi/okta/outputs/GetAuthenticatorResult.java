// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthenticatorResult {
    /**
     * @return ID of the authenticator.
     * 
     */
    private @Nullable String id;
    /**
     * @return A human-readable string that identifies the authenticator.
     * 
     */
    private @Nullable String key;
    /**
     * @return Name of the authenticator.
     * 
     */
    private @Nullable String name;
    /**
     * @return The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     * 
     */
    private Integer providerAuthPort;
    /**
     * @return Server host name or IP address
     * 
     */
    private String providerHostname;
    /**
     * @return (Specific to `security_key`) App Instance ID.
     * 
     */
    private String providerInstanceId;
    /**
     * @return Authenticator Provider in JSON format
     * 
     */
    private String providerJson;
    /**
     * @return Provider type.
     * 
     */
    private String providerType;
    /**
     * @return Username template expected by the provider.
     * 
     */
    private String providerUserNameTemplate;
    /**
     * @return Authenticator settings in JSON format
     * 
     */
    private String settings;
    /**
     * @return Status of the Authenticator.
     * 
     */
    private String status;
    /**
     * @return Type of the authenticator
     * 
     */
    private String type;

    private GetAuthenticatorResult() {}
    /**
     * @return ID of the authenticator.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A human-readable string that identifies the authenticator.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Name of the authenticator.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured
     * 
     */
    public Integer providerAuthPort() {
        return this.providerAuthPort;
    }
    /**
     * @return Server host name or IP address
     * 
     */
    public String providerHostname() {
        return this.providerHostname;
    }
    /**
     * @return (Specific to `security_key`) App Instance ID.
     * 
     */
    public String providerInstanceId() {
        return this.providerInstanceId;
    }
    /**
     * @return Authenticator Provider in JSON format
     * 
     */
    public String providerJson() {
        return this.providerJson;
    }
    /**
     * @return Provider type.
     * 
     */
    public String providerType() {
        return this.providerType;
    }
    /**
     * @return Username template expected by the provider.
     * 
     */
    public String providerUserNameTemplate() {
        return this.providerUserNameTemplate;
    }
    /**
     * @return Authenticator settings in JSON format
     * 
     */
    public String settings() {
        return this.settings;
    }
    /**
     * @return Status of the Authenticator.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Type of the authenticator
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticatorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable String key;
        private @Nullable String name;
        private Integer providerAuthPort;
        private String providerHostname;
        private String providerInstanceId;
        private String providerJson;
        private String providerType;
        private String providerUserNameTemplate;
        private String settings;
        private String status;
        private String type;
        public Builder() {}
        public Builder(GetAuthenticatorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.providerAuthPort = defaults.providerAuthPort;
    	      this.providerHostname = defaults.providerHostname;
    	      this.providerInstanceId = defaults.providerInstanceId;
    	      this.providerJson = defaults.providerJson;
    	      this.providerType = defaults.providerType;
    	      this.providerUserNameTemplate = defaults.providerUserNameTemplate;
    	      this.settings = defaults.settings;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder providerAuthPort(Integer providerAuthPort) {
            if (providerAuthPort == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerAuthPort");
            }
            this.providerAuthPort = providerAuthPort;
            return this;
        }
        @CustomType.Setter
        public Builder providerHostname(String providerHostname) {
            if (providerHostname == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerHostname");
            }
            this.providerHostname = providerHostname;
            return this;
        }
        @CustomType.Setter
        public Builder providerInstanceId(String providerInstanceId) {
            if (providerInstanceId == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerInstanceId");
            }
            this.providerInstanceId = providerInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder providerJson(String providerJson) {
            if (providerJson == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerJson");
            }
            this.providerJson = providerJson;
            return this;
        }
        @CustomType.Setter
        public Builder providerType(String providerType) {
            if (providerType == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerType");
            }
            this.providerType = providerType;
            return this;
        }
        @CustomType.Setter
        public Builder providerUserNameTemplate(String providerUserNameTemplate) {
            if (providerUserNameTemplate == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "providerUserNameTemplate");
            }
            this.providerUserNameTemplate = providerUserNameTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder settings(String settings) {
            if (settings == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "settings");
            }
            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatorResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetAuthenticatorResult build() {
            final var _resultValue = new GetAuthenticatorResult();
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.name = name;
            _resultValue.providerAuthPort = providerAuthPort;
            _resultValue.providerHostname = providerHostname;
            _resultValue.providerInstanceId = providerInstanceId;
            _resultValue.providerJson = providerJson;
            _resultValue.providerType = providerType;
            _resultValue.providerUserNameTemplate = providerUserNameTemplate;
            _resultValue.settings = settings;
            _resultValue.status = status;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
