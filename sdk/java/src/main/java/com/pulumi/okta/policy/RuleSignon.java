// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.policy.RuleSignonArgs;
import com.pulumi.okta.policy.inputs.RuleSignonState;
import com.pulumi.okta.policy.outputs.RuleSignonFactorSequence;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a Sign On Policy Rule. In case `Invalid condition type specified: riskScore.` error is thrown, set `risc_level` to an empty string, since this feature is not enabled.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.policy.Signon;
 * import com.pulumi.okta.policy.SignonArgs;
 * import com.pulumi.okta.OktaFunctions;
 * import com.pulumi.okta.inputs.GetBehaviourArgs;
 * import com.pulumi.okta.policy.RuleSignon;
 * import com.pulumi.okta.policy.RuleSignonArgs;
 * import com.pulumi.okta.policy.inputs.RuleSignonFactorSequenceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Signon("test", SignonArgs.builder()
 *             .name("Example Policy")
 *             .status("ACTIVE")
 *             .description("Example Policy")
 *             .build());
 * 
 *         final var newCity = OktaFunctions.getBehaviour(GetBehaviourArgs.builder()
 *             .name("New City")
 *             .build());
 * 
 *         var example = new RuleSignon("example", RuleSignonArgs.builder()
 *             .access("CHALLENGE")
 *             .authtype("RADIUS")
 *             .name("Example Policy Rule")
 *             .networkConnection("ANYWHERE")
 *             .policyId(exampleOktaPolicySignon.id())
 *             .status("ACTIVE")
 *             .riscLevel("HIGH")
 *             .behaviors(newCity.id())
 *             .factorSequences(            
 *                 RuleSignonFactorSequenceArgs.builder()
 *                     .primaryCriteriaFactorType("token:hotp")
 *                     .primaryCriteriaProvider("CUSTOM")
 *                     .secondaryCriterias(                    
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("token:software:totp")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("push")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("password")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("question")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("sms")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("token:software:totp")
 *                             .provider("GOOGLE")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("email")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("call")
 *                             .provider("OKTA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("webauthn")
 *                             .provider("FIDO")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("token")
 *                             .provider("RSA")
 *                             .build(),
 *                         RuleSignonFactorSequenceSecondaryCriteriaArgs.builder()
 *                             .factorType("token")
 *                             .provider("SYMANTEC")
 *                             .build())
 *                     .build(),
 *                 RuleSignonFactorSequenceArgs.builder()
 *                     .primaryCriteriaFactorType("token:software:totp")
 *                     .primaryCriteriaProvider("OKTA")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:policy/ruleSignon:RuleSignon example &lt;policy_id&gt;/&lt;rule_id&gt;
 * ```
 * 
 */
@ResourceType(type="okta:policy/ruleSignon:RuleSignon")
public class RuleSignon extends com.pulumi.resources.CustomResource {
    /**
     * Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
     * 
     */
    @Export(name="access", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> access;

    /**
     * @return Allow or deny access based on the rule conditions: `ALLOW`, `DENY` or `CHALLENGE`. Default: `ALLOW`
     * 
     */
    public Output<Optional<String>> access() {
        return Codegen.optional(this.access);
    }
    /**
     * Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
     * 
     */
    @Export(name="authtype", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authtype;

    /**
     * @return Authentication entrypoint: `ANY`, `RADIUS` or `LDAP_INTERFACE`. Default: `ANY`
     * 
     */
    public Output<Optional<String>> authtype() {
        return Codegen.optional(this.authtype);
    }
    /**
     * List of behavior IDs
     * 
     */
    @Export(name="behaviors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> behaviors;

    /**
     * @return List of behavior IDs
     * 
     */
    public Output<Optional<List<String>>> behaviors() {
        return Codegen.optional(this.behaviors);
    }
    /**
     * Auth factor sequences. Should be set if &#39;access = &#34;CHALLENGE&#34;&#39;.
     * 	- &#39;primary_criteria_provider&#39; - (Required) Primary provider of the auth section.
     * 	- &#39;primary_criteria_factor_type&#39; - (Required) Primary factor type of the auth section.
     * 	- &#39;secondary_criteria&#39; - (Optional) Additional authentication steps.
     * 	- &#39;provider&#39; - (Required) Provider of the additional authentication step.
     * 	- &#39;factor_type&#39; - (Required) Factor type of the additional authentication step.
     * 
     */
    @Export(name="factorSequences", refs={List.class,RuleSignonFactorSequence.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleSignonFactorSequence>> factorSequences;

    /**
     * @return Auth factor sequences. Should be set if &#39;access = &#34;CHALLENGE&#34;&#39;.
     * 	- &#39;primary_criteria_provider&#39; - (Required) Primary provider of the auth section.
     * 	- &#39;primary_criteria_factor_type&#39; - (Required) Primary factor type of the auth section.
     * 	- &#39;secondary_criteria&#39; - (Optional) Additional authentication steps.
     * 	- &#39;provider&#39; - (Required) Provider of the additional authentication step.
     * 	- &#39;factor_type&#39; - (Required) Factor type of the additional authentication step.
     * 
     */
    public Output<Optional<List<RuleSignonFactorSequence>>> factorSequences() {
        return Codegen.optional(this.factorSequences);
    }
    /**
     * Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
     * 
     */
    @Export(name="identityProvider", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> identityProvider;

    /**
     * @return Apply rule based on the IdP used: `ANY`, `OKTA` or `SPECIFIC_IDP`. Default: `ANY`. &gt; **WARNING**: Use of `identity_provider` requires a feature flag to be enabled.
     * 
     */
    public Output<Optional<String>> identityProvider() {
        return Codegen.optional(this.identityProvider);
    }
    /**
     * When identity_provider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
     * 
     */
    @Export(name="identityProviderIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> identityProviderIds;

    /**
     * @return When identity_provider is `SPECIFIC_IDP` then this is the list of IdP IDs to apply the rule on
     * 
     */
    public Output<Optional<List<String>>> identityProviderIds() {
        return Codegen.optional(this.identityProviderIds);
    }
    /**
     * Elapsed time before the next MFA challenge
     * 
     */
    @Export(name="mfaLifetime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mfaLifetime;

    /**
     * @return Elapsed time before the next MFA challenge
     * 
     */
    public Output<Optional<Integer>> mfaLifetime() {
        return Codegen.optional(this.mfaLifetime);
    }
    /**
     * Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION` or`ALWAYS`.
     * 
     */
    @Export(name="mfaPrompt", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mfaPrompt;

    /**
     * @return Prompt for MFA based on the device used, a factor session lifetime, or every sign-on attempt: `DEVICE`, `SESSION` or`ALWAYS`.
     * 
     */
    public Output<Optional<String>> mfaPrompt() {
        return Codegen.optional(this.mfaPrompt);
    }
    /**
     * Remember MFA device. Default: `false`
     * 
     */
    @Export(name="mfaRememberDevice", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mfaRememberDevice;

    /**
     * @return Remember MFA device. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> mfaRememberDevice() {
        return Codegen.optional(this.mfaRememberDevice);
    }
    /**
     * Require MFA. Default: `false`
     * 
     */
    @Export(name="mfaRequired", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mfaRequired;

    /**
     * @return Require MFA. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> mfaRequired() {
        return Codegen.optional(this.mfaRequired);
    }
    /**
     * Policy Rule Name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Policy Rule Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     * 
     */
    @Export(name="networkConnection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> networkConnection;

    /**
     * @return Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     * 
     */
    public Output<Optional<String>> networkConnection() {
        return Codegen.optional(this.networkConnection);
    }
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     * 
     */
    @Export(name="networkExcludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> networkExcludes;

    /**
     * @return Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     * 
     */
    public Output<Optional<List<String>>> networkExcludes() {
        return Codegen.optional(this.networkExcludes);
    }
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     * 
     */
    @Export(name="networkIncludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> networkIncludes;

    /**
     * @return Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     * 
     */
    public Output<Optional<List<String>>> networkIncludes() {
        return Codegen.optional(this.networkIncludes);
    }
    /**
     * Policy ID of the Rule
     * 
     */
    @Export(name="policyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> policyId;

    /**
     * @return Policy ID of the Rule
     * 
     */
    public Output<Optional<String>> policyId() {
        return Codegen.optional(this.policyId);
    }
    /**
     * Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`, `PASSWORD_IDP`.
     * 
     */
    @Export(name="primaryFactor", refs={String.class}, tree="[0]")
    private Output<String> primaryFactor;

    /**
     * @return Rule&#39;s primary factor. **WARNING** Ony works as a part of the Identity Engine. Valid values: `PASSWORD_IDP_ANY_FACTOR`, `PASSWORD_IDP`.
     * 
     */
    public Output<String> primaryFactor() {
        return this.primaryFactor;
    }
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    /**
     * Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     * @deprecated
     * Attribute typo, switch to risk_level instead. Default: `ANY`
     * 
     */
    @Deprecated /* Attribute typo, switch to risk_level instead. Default: `ANY` */
    @Export(name="riscLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> riscLevel;

    /**
     * @return Risc level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     */
    public Output<Optional<String>> riscLevel() {
        return Codegen.optional(this.riscLevel);
    }
    /**
     * Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     */
    @Export(name="riskLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> riskLevel;

    /**
     * @return Risk level: ANY, LOW, MEDIUM or HIGH. Default: `ANY`
     * 
     */
    public Output<Optional<String>> riskLevel() {
        return Codegen.optional(this.riskLevel);
    }
    /**
     * Max minutes a session can be idle. Default: `120`
     * 
     */
    @Export(name="sessionIdle", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sessionIdle;

    /**
     * @return Max minutes a session can be idle. Default: `120`
     * 
     */
    public Output<Optional<Integer>> sessionIdle() {
        return Codegen.optional(this.sessionIdle);
    }
    /**
     * Max minutes a session is active: Disable = 0. Default: `120`
     * 
     */
    @Export(name="sessionLifetime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sessionLifetime;

    /**
     * @return Max minutes a session is active: Disable = 0. Default: `120`
     * 
     */
    public Output<Optional<Integer>> sessionLifetime() {
        return Codegen.optional(this.sessionLifetime);
    }
    /**
     * Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies. Default: `false`
     * 
     */
    @Export(name="sessionPersistent", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> sessionPersistent;

    /**
     * @return Whether session cookies will last across browser sessions. Okta Administrators can never have persistent session cookies. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> sessionPersistent() {
        return Codegen.optional(this.sessionPersistent);
    }
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Set of User IDs to Exclude
     * 
     */
    @Export(name="usersExcludeds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> usersExcludeds;

    /**
     * @return Set of User IDs to Exclude
     * 
     */
    public Output<Optional<List<String>>> usersExcludeds() {
        return Codegen.optional(this.usersExcludeds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RuleSignon(java.lang.String name) {
        this(name, RuleSignonArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RuleSignon(java.lang.String name, @Nullable RuleSignonArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RuleSignon(java.lang.String name, @Nullable RuleSignonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:policy/ruleSignon:RuleSignon", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RuleSignon(java.lang.String name, Output<java.lang.String> id, @Nullable RuleSignonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:policy/ruleSignon:RuleSignon", name, state, makeResourceOptions(options, id), false);
    }

    private static RuleSignonArgs makeArgs(@Nullable RuleSignonArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuleSignonArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RuleSignon get(java.lang.String name, Output<java.lang.String> id, @Nullable RuleSignonState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RuleSignon(name, id, state, options);
    }
}
