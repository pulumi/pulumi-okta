// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.outputs.GetPrincipalEntitlementsDataParent;
import com.pulumi.okta.outputs.GetPrincipalEntitlementsDataTargetPrincipal;
import com.pulumi.okta.outputs.GetPrincipalEntitlementsDataValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPrincipalEntitlementsData {
    /**
     * @return The data type of the entitlement property.
     * 
     */
    private String dataType;
    /**
     * @return The description of an entitlement property.
     * 
     */
    private String description;
    /**
     * @return The value of an entitlement property.
     * 
     */
    private String externalValue;
    /**
     * @return The id property of an entitlement.
     * 
     */
    private String id;
    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    private Boolean multiValue;
    /**
     * @return The display name for an entitlement property.
     * 
     */
    private String name;
    /**
     * @return Representation of a resource.
     * 
     */
    private @Nullable GetPrincipalEntitlementsDataParent parent;
    /**
     * @return The Okta app instance, in ORN format.
     * 
     */
    private String parentResourceOrn;
    /**
     * @return The property that determines if the entitlement property is a required attribute
     * 
     */
    private Boolean required;
    /**
     * @return Representation of a principal.
     * 
     */
    private @Nullable GetPrincipalEntitlementsDataTargetPrincipal targetPrincipal;
    /**
     * @return The Okta user id in ORN format.
     * 
     */
    private String targetPrincipalOrn;
    /**
     * @return Collection of entitlement values.
     * 
     */
    private @Nullable List<GetPrincipalEntitlementsDataValue> values;

    private GetPrincipalEntitlementsData() {}
    /**
     * @return The data type of the entitlement property.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return The description of an entitlement property.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The value of an entitlement property.
     * 
     */
    public String externalValue() {
        return this.externalValue;
    }
    /**
     * @return The id property of an entitlement.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    public Boolean multiValue() {
        return this.multiValue;
    }
    /**
     * @return The display name for an entitlement property.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Representation of a resource.
     * 
     */
    public Optional<GetPrincipalEntitlementsDataParent> parent() {
        return Optional.ofNullable(this.parent);
    }
    /**
     * @return The Okta app instance, in ORN format.
     * 
     */
    public String parentResourceOrn() {
        return this.parentResourceOrn;
    }
    /**
     * @return The property that determines if the entitlement property is a required attribute
     * 
     */
    public Boolean required() {
        return this.required;
    }
    /**
     * @return Representation of a principal.
     * 
     */
    public Optional<GetPrincipalEntitlementsDataTargetPrincipal> targetPrincipal() {
        return Optional.ofNullable(this.targetPrincipal);
    }
    /**
     * @return The Okta user id in ORN format.
     * 
     */
    public String targetPrincipalOrn() {
        return this.targetPrincipalOrn;
    }
    /**
     * @return Collection of entitlement values.
     * 
     */
    public List<GetPrincipalEntitlementsDataValue> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrincipalEntitlementsData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataType;
        private String description;
        private String externalValue;
        private String id;
        private Boolean multiValue;
        private String name;
        private @Nullable GetPrincipalEntitlementsDataParent parent;
        private String parentResourceOrn;
        private Boolean required;
        private @Nullable GetPrincipalEntitlementsDataTargetPrincipal targetPrincipal;
        private String targetPrincipalOrn;
        private @Nullable List<GetPrincipalEntitlementsDataValue> values;
        public Builder() {}
        public Builder(GetPrincipalEntitlementsData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataType = defaults.dataType;
    	      this.description = defaults.description;
    	      this.externalValue = defaults.externalValue;
    	      this.id = defaults.id;
    	      this.multiValue = defaults.multiValue;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.parentResourceOrn = defaults.parentResourceOrn;
    	      this.required = defaults.required;
    	      this.targetPrincipal = defaults.targetPrincipal;
    	      this.targetPrincipalOrn = defaults.targetPrincipalOrn;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalValue(String externalValue) {
            if (externalValue == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "externalValue");
            }
            this.externalValue = externalValue;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multiValue(Boolean multiValue) {
            if (multiValue == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "multiValue");
            }
            this.multiValue = multiValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(@Nullable GetPrincipalEntitlementsDataParent parent) {

            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder parentResourceOrn(String parentResourceOrn) {
            if (parentResourceOrn == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "parentResourceOrn");
            }
            this.parentResourceOrn = parentResourceOrn;
            return this;
        }
        @CustomType.Setter
        public Builder required(Boolean required) {
            if (required == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "required");
            }
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder targetPrincipal(@Nullable GetPrincipalEntitlementsDataTargetPrincipal targetPrincipal) {

            this.targetPrincipal = targetPrincipal;
            return this;
        }
        @CustomType.Setter
        public Builder targetPrincipalOrn(String targetPrincipalOrn) {
            if (targetPrincipalOrn == null) {
              throw new MissingRequiredPropertyException("GetPrincipalEntitlementsData", "targetPrincipalOrn");
            }
            this.targetPrincipalOrn = targetPrincipalOrn;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<GetPrincipalEntitlementsDataValue> values) {

            this.values = values;
            return this;
        }
        public Builder values(GetPrincipalEntitlementsDataValue... values) {
            return values(List.of(values));
        }
        public GetPrincipalEntitlementsData build() {
            final var _resultValue = new GetPrincipalEntitlementsData();
            _resultValue.dataType = dataType;
            _resultValue.description = description;
            _resultValue.externalValue = externalValue;
            _resultValue.id = id;
            _resultValue.multiValue = multiValue;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.parentResourceOrn = parentResourceOrn;
            _resultValue.required = required;
            _resultValue.targetPrincipal = targetPrincipal;
            _resultValue.targetPrincipalOrn = targetPrincipalOrn;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
