// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.RequestV2RequestedArgs;
import com.pulumi.okta.inputs.RequestV2RequestedForArgs;
import com.pulumi.okta.inputs.RequestV2RequesterFieldValueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestV2State extends com.pulumi.resources.ResourceArgs {

    public static final RequestV2State Empty = new RequestV2State();

    /**
     * How long the requester retains access after their request is approved and fulfilled.
     * 
     */
    @Import(name="accessDuration")
    private @Nullable Output<String> accessDuration;

    /**
     * @return How long the requester retains access after their request is approved and fulfilled.
     * 
     */
    public Optional<Output<String>> accessDuration() {
        return Optional.ofNullable(this.accessDuration);
    }

    /**
     * The date and time when the request condition was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The date and time when the request condition was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * The id of the user who created the request condition.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The id of the user who created the request condition.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The status of the granted access request.
     * 
     */
    @Import(name="grantStatus")
    private @Nullable Output<String> grantStatus;

    /**
     * @return The status of the granted access request.
     * 
     */
    public Optional<Output<String>> grantStatus() {
        return Optional.ofNullable(this.grantStatus);
    }

    /**
     * The date the approved access was granted. Only set if request . Status is APPROVED.
     * 
     */
    @Import(name="granted")
    private @Nullable Output<String> granted;

    /**
     * @return The date the approved access was granted. Only set if request . Status is APPROVED.
     * 
     */
    public Optional<Output<String>> granted() {
        return Optional.ofNullable(this.granted);
    }

    /**
     * The date and time when the request condition was last updated.
     * 
     */
    @Import(name="lastUpdated")
    private @Nullable Output<String> lastUpdated;

    /**
     * @return The date and time when the request condition was last updated.
     * 
     */
    public Optional<Output<String>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    /**
     * The id of the user who last updated the request condition.
     * 
     */
    @Import(name="lastUpdatedBy")
    private @Nullable Output<String> lastUpdatedBy;

    /**
     * @return The id of the user who last updated the request condition.
     * 
     */
    public Optional<Output<String>> lastUpdatedBy() {
        return Optional.ofNullable(this.lastUpdatedBy);
    }

    /**
     * A representation of a resource that can be requested for access.
     * 
     */
    @Import(name="requested")
    private @Nullable Output<RequestV2RequestedArgs> requested;

    /**
     * @return A representation of a resource that can be requested for access.
     * 
     */
    public Optional<Output<RequestV2RequestedArgs>> requested() {
        return Optional.ofNullable(this.requested);
    }

    /**
     * A representation of a principal.
     * 
     */
    @Import(name="requestedFor")
    private @Nullable Output<RequestV2RequestedForArgs> requestedFor;

    /**
     * @return A representation of a principal.
     * 
     */
    public Optional<Output<RequestV2RequestedForArgs>> requestedFor() {
        return Optional.ofNullable(this.requestedFor);
    }

    /**
     * The requester input fields required by the approval system.
     * 
     */
    @Import(name="requesterFieldValues")
    private @Nullable Output<List<RequestV2RequesterFieldValueArgs>> requesterFieldValues;

    /**
     * @return The requester input fields required by the approval system.
     * 
     */
    public Optional<Output<List<RequestV2RequesterFieldValueArgs>>> requesterFieldValues() {
        return Optional.ofNullable(this.requesterFieldValues);
    }

    /**
     * The date the request was resolved.
     * 
     */
    @Import(name="resolved")
    private @Nullable Output<String> resolved;

    /**
     * @return The date the request was resolved.
     * 
     */
    public Optional<Output<String>> resolved() {
        return Optional.ofNullable(this.resolved);
    }

    /**
     * The date the request was scheduled for revocation.
     * 
     */
    @Import(name="revocationScheduled")
    private @Nullable Output<String> revocationScheduled;

    /**
     * @return The date the request was scheduled for revocation.
     * 
     */
    public Optional<Output<String>> revocationScheduled() {
        return Optional.ofNullable(this.revocationScheduled);
    }

    /**
     * The revocation status of the request.
     * 
     */
    @Import(name="revocationStatus")
    private @Nullable Output<String> revocationStatus;

    /**
     * @return The revocation status of the request.
     * 
     */
    public Optional<Output<String>> revocationStatus() {
        return Optional.ofNullable(this.revocationStatus);
    }

    /**
     * The date the granted access was revoked.
     * 
     */
    @Import(name="revoked")
    private @Nullable Output<String> revoked;

    /**
     * @return The date the granted access was revoked.
     * 
     */
    public Optional<Output<String>> revoked() {
        return Optional.ofNullable(this.revoked);
    }

    /**
     * The status of the request.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the request.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RequestV2State() {}

    private RequestV2State(RequestV2State $) {
        this.accessDuration = $.accessDuration;
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.grantStatus = $.grantStatus;
        this.granted = $.granted;
        this.lastUpdated = $.lastUpdated;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.requested = $.requested;
        this.requestedFor = $.requestedFor;
        this.requesterFieldValues = $.requesterFieldValues;
        this.resolved = $.resolved;
        this.revocationScheduled = $.revocationScheduled;
        this.revocationStatus = $.revocationStatus;
        this.revoked = $.revoked;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestV2State $;

        public Builder() {
            $ = new RequestV2State();
        }

        public Builder(RequestV2State defaults) {
            $ = new RequestV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessDuration How long the requester retains access after their request is approved and fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder accessDuration(@Nullable Output<String> accessDuration) {
            $.accessDuration = accessDuration;
            return this;
        }

        /**
         * @param accessDuration How long the requester retains access after their request is approved and fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder accessDuration(String accessDuration) {
            return accessDuration(Output.of(accessDuration));
        }

        /**
         * @param created The date and time when the request condition was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date and time when the request condition was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param createdBy The id of the user who created the request condition.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The id of the user who created the request condition.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param grantStatus The status of the granted access request.
         * 
         * @return builder
         * 
         */
        public Builder grantStatus(@Nullable Output<String> grantStatus) {
            $.grantStatus = grantStatus;
            return this;
        }

        /**
         * @param grantStatus The status of the granted access request.
         * 
         * @return builder
         * 
         */
        public Builder grantStatus(String grantStatus) {
            return grantStatus(Output.of(grantStatus));
        }

        /**
         * @param granted The date the approved access was granted. Only set if request . Status is APPROVED.
         * 
         * @return builder
         * 
         */
        public Builder granted(@Nullable Output<String> granted) {
            $.granted = granted;
            return this;
        }

        /**
         * @param granted The date the approved access was granted. Only set if request . Status is APPROVED.
         * 
         * @return builder
         * 
         */
        public Builder granted(String granted) {
            return granted(Output.of(granted));
        }

        /**
         * @param lastUpdated The date and time when the request condition was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(@Nullable Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdated The date and time when the request condition was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param lastUpdatedBy The id of the user who last updated the request condition.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(@Nullable Output<String> lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * @param lastUpdatedBy The id of the user who last updated the request condition.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            return lastUpdatedBy(Output.of(lastUpdatedBy));
        }

        /**
         * @param requested A representation of a resource that can be requested for access.
         * 
         * @return builder
         * 
         */
        public Builder requested(@Nullable Output<RequestV2RequestedArgs> requested) {
            $.requested = requested;
            return this;
        }

        /**
         * @param requested A representation of a resource that can be requested for access.
         * 
         * @return builder
         * 
         */
        public Builder requested(RequestV2RequestedArgs requested) {
            return requested(Output.of(requested));
        }

        /**
         * @param requestedFor A representation of a principal.
         * 
         * @return builder
         * 
         */
        public Builder requestedFor(@Nullable Output<RequestV2RequestedForArgs> requestedFor) {
            $.requestedFor = requestedFor;
            return this;
        }

        /**
         * @param requestedFor A representation of a principal.
         * 
         * @return builder
         * 
         */
        public Builder requestedFor(RequestV2RequestedForArgs requestedFor) {
            return requestedFor(Output.of(requestedFor));
        }

        /**
         * @param requesterFieldValues The requester input fields required by the approval system.
         * 
         * @return builder
         * 
         */
        public Builder requesterFieldValues(@Nullable Output<List<RequestV2RequesterFieldValueArgs>> requesterFieldValues) {
            $.requesterFieldValues = requesterFieldValues;
            return this;
        }

        /**
         * @param requesterFieldValues The requester input fields required by the approval system.
         * 
         * @return builder
         * 
         */
        public Builder requesterFieldValues(List<RequestV2RequesterFieldValueArgs> requesterFieldValues) {
            return requesterFieldValues(Output.of(requesterFieldValues));
        }

        /**
         * @param requesterFieldValues The requester input fields required by the approval system.
         * 
         * @return builder
         * 
         */
        public Builder requesterFieldValues(RequestV2RequesterFieldValueArgs... requesterFieldValues) {
            return requesterFieldValues(List.of(requesterFieldValues));
        }

        /**
         * @param resolved The date the request was resolved.
         * 
         * @return builder
         * 
         */
        public Builder resolved(@Nullable Output<String> resolved) {
            $.resolved = resolved;
            return this;
        }

        /**
         * @param resolved The date the request was resolved.
         * 
         * @return builder
         * 
         */
        public Builder resolved(String resolved) {
            return resolved(Output.of(resolved));
        }

        /**
         * @param revocationScheduled The date the request was scheduled for revocation.
         * 
         * @return builder
         * 
         */
        public Builder revocationScheduled(@Nullable Output<String> revocationScheduled) {
            $.revocationScheduled = revocationScheduled;
            return this;
        }

        /**
         * @param revocationScheduled The date the request was scheduled for revocation.
         * 
         * @return builder
         * 
         */
        public Builder revocationScheduled(String revocationScheduled) {
            return revocationScheduled(Output.of(revocationScheduled));
        }

        /**
         * @param revocationStatus The revocation status of the request.
         * 
         * @return builder
         * 
         */
        public Builder revocationStatus(@Nullable Output<String> revocationStatus) {
            $.revocationStatus = revocationStatus;
            return this;
        }

        /**
         * @param revocationStatus The revocation status of the request.
         * 
         * @return builder
         * 
         */
        public Builder revocationStatus(String revocationStatus) {
            return revocationStatus(Output.of(revocationStatus));
        }

        /**
         * @param revoked The date the granted access was revoked.
         * 
         * @return builder
         * 
         */
        public Builder revoked(@Nullable Output<String> revoked) {
            $.revoked = revoked;
            return this;
        }

        /**
         * @param revoked The date the granted access was revoked.
         * 
         * @return builder
         * 
         */
        public Builder revoked(String revoked) {
            return revoked(Output.of(revoked));
        }

        /**
         * @param status The status of the request.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the request.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RequestV2State build() {
            return $;
        }
    }

}
