// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleArgs Empty = new RoleArgs();

    /**
     * When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails. These admins also
     * won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    @Import(name="disableNotifications")
    private @Nullable Output<Boolean> disableNotifications;

    /**
     * @return When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails. These admins also
     * won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    public Optional<Output<Boolean>> disableNotifications() {
        return Optional.ofNullable(this.disableNotifications);
    }

    /**
     * ID of group to attach admin roles to
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return ID of group to attach admin roles to
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * Resource Set ID. Required for role_type = `CUSTOM`
     * 
     */
    @Import(name="resourceSetId")
    private @Nullable Output<String> resourceSetId;

    /**
     * @return Resource Set ID. Required for role_type = `CUSTOM`
     * 
     */
    public Optional<Output<String>> resourceSetId() {
        return Optional.ofNullable(this.resourceSetId);
    }

    /**
     * Role ID. Required for role_type = `CUSTOM`
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return Role ID. Required for role_type = `CUSTOM`
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    /**
     * Admin role assigned to the group. It can be any one of the following values: &#34;API_ADMIN&#34;, &#34;APP_ADMIN&#34;, &#34;CUSTOM&#34;,
     * &#34;GROUP_MEMBERSHIP_ADMIN&#34;, &#34;HELP_DESK_ADMIN&#34;, &#34;MOBILE_ADMIN&#34;, &#34;ORG_ADMIN&#34;, &#34;READ_ONLY_ADMIN&#34;, &#34;REPORT_ADMIN&#34;,
     * &#34;SUPER_ADMIN&#34;, &#34;USER_ADMIN&#34; . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types). -
     * &#34;USER_ADMIN&#34; is the Group Administrator.
     * 
     */
    @Import(name="roleType", required=true)
    private Output<String> roleType;

    /**
     * @return Admin role assigned to the group. It can be any one of the following values: &#34;API_ADMIN&#34;, &#34;APP_ADMIN&#34;, &#34;CUSTOM&#34;,
     * &#34;GROUP_MEMBERSHIP_ADMIN&#34;, &#34;HELP_DESK_ADMIN&#34;, &#34;MOBILE_ADMIN&#34;, &#34;ORG_ADMIN&#34;, &#34;READ_ONLY_ADMIN&#34;, &#34;REPORT_ADMIN&#34;,
     * &#34;SUPER_ADMIN&#34;, &#34;USER_ADMIN&#34; . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types). -
     * &#34;USER_ADMIN&#34; is the Group Administrator.
     * 
     */
    public Output<String> roleType() {
        return this.roleType;
    }

    /**
     * A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;facebook&#39;), or a combination of app
     * name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as the targets of the admin role. - Only
     * supported when used with the role type `APP_ADMIN`.
     * 
     */
    @Import(name="targetAppLists")
    private @Nullable Output<List<String>> targetAppLists;

    /**
     * @return A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;facebook&#39;), or a combination of app
     * name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as the targets of the admin role. - Only
     * supported when used with the role type `APP_ADMIN`.
     * 
     */
    public Optional<Output<List<String>>> targetAppLists() {
        return Optional.ofNullable(this.targetAppLists);
    }

    /**
     * A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types:
     * `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     * 
     */
    @Import(name="targetGroupLists")
    private @Nullable Output<List<String>> targetGroupLists;

    /**
     * @return A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types:
     * `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     * 
     */
    public Optional<Output<List<String>>> targetGroupLists() {
        return Optional.ofNullable(this.targetGroupLists);
    }

    private RoleArgs() {}

    private RoleArgs(RoleArgs $) {
        this.disableNotifications = $.disableNotifications;
        this.groupId = $.groupId;
        this.resourceSetId = $.resourceSetId;
        this.roleId = $.roleId;
        this.roleType = $.roleType;
        this.targetAppLists = $.targetAppLists;
        this.targetGroupLists = $.targetGroupLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleArgs $;

        public Builder() {
            $ = new RoleArgs();
        }

        public Builder(RoleArgs defaults) {
            $ = new RoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails. These admins also
         * won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(@Nullable Output<Boolean> disableNotifications) {
            $.disableNotifications = disableNotifications;
            return this;
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails. These admins also
         * won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(Boolean disableNotifications) {
            return disableNotifications(Output.of(disableNotifications));
        }

        /**
         * @param groupId ID of group to attach admin roles to
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId ID of group to attach admin roles to
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param resourceSetId Resource Set ID. Required for role_type = `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder resourceSetId(@Nullable Output<String> resourceSetId) {
            $.resourceSetId = resourceSetId;
            return this;
        }

        /**
         * @param resourceSetId Resource Set ID. Required for role_type = `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder resourceSetId(String resourceSetId) {
            return resourceSetId(Output.of(resourceSetId));
        }

        /**
         * @param roleId Role ID. Required for role_type = `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId Role ID. Required for role_type = `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param roleType Admin role assigned to the group. It can be any one of the following values: &#34;API_ADMIN&#34;, &#34;APP_ADMIN&#34;, &#34;CUSTOM&#34;,
         * &#34;GROUP_MEMBERSHIP_ADMIN&#34;, &#34;HELP_DESK_ADMIN&#34;, &#34;MOBILE_ADMIN&#34;, &#34;ORG_ADMIN&#34;, &#34;READ_ONLY_ADMIN&#34;, &#34;REPORT_ADMIN&#34;,
         * &#34;SUPER_ADMIN&#34;, &#34;USER_ADMIN&#34; . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types). -
         * &#34;USER_ADMIN&#34; is the Group Administrator.
         * 
         * @return builder
         * 
         */
        public Builder roleType(Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Admin role assigned to the group. It can be any one of the following values: &#34;API_ADMIN&#34;, &#34;APP_ADMIN&#34;, &#34;CUSTOM&#34;,
         * &#34;GROUP_MEMBERSHIP_ADMIN&#34;, &#34;HELP_DESK_ADMIN&#34;, &#34;MOBILE_ADMIN&#34;, &#34;ORG_ADMIN&#34;, &#34;READ_ONLY_ADMIN&#34;, &#34;REPORT_ADMIN&#34;,
         * &#34;SUPER_ADMIN&#34;, &#34;USER_ADMIN&#34; . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types). -
         * &#34;USER_ADMIN&#34; is the Group Administrator.
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        /**
         * @param targetAppLists A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;facebook&#39;), or a combination of app
         * name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as the targets of the admin role. - Only
         * supported when used with the role type `APP_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(@Nullable Output<List<String>> targetAppLists) {
            $.targetAppLists = targetAppLists;
            return this;
        }

        /**
         * @param targetAppLists A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;facebook&#39;), or a combination of app
         * name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as the targets of the admin role. - Only
         * supported when used with the role type `APP_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(List<String> targetAppLists) {
            return targetAppLists(Output.of(targetAppLists));
        }

        /**
         * @param targetAppLists A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;facebook&#39;), or a combination of app
         * name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as the targets of the admin role. - Only
         * supported when used with the role type `APP_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetAppLists(String... targetAppLists) {
            return targetAppLists(List.of(targetAppLists));
        }

        /**
         * @param targetGroupLists A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types:
         * `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(@Nullable Output<List<String>> targetGroupLists) {
            $.targetGroupLists = targetGroupLists;
            return this;
        }

        /**
         * @param targetGroupLists A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types:
         * `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(List<String> targetGroupLists) {
            return targetGroupLists(Output.of(targetGroupLists));
        }

        /**
         * @param targetGroupLists A list of group IDs you would like as the targets of the admin role. - Only supported when used with the role types:
         * `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupLists(String... targetGroupLists) {
            return targetGroupLists(List.of(targetGroupLists));
        }

        public RoleArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("RoleArgs", "groupId");
            }
            if ($.roleType == null) {
                throw new MissingRequiredPropertyException("RoleArgs", "roleType");
            }
            return $;
        }
    }

}
