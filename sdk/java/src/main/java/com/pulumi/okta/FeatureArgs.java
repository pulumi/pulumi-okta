// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureArgs Empty = new FeatureArgs();

    /**
     * Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     * 
     */
    @Import(name="featureId", required=true)
    private Output<String> featureId;

    /**
     * @return Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
     * 
     */
    public Output<String> featureId() {
        return this.featureId;
    }

    /**
     * Whether to `ENABLE` or `DISABLE` the feature
     * 
     */
    @Import(name="lifeCycle")
    private @Nullable Output<String> lifeCycle;

    /**
     * @return Whether to `ENABLE` or `DISABLE` the feature
     * 
     */
    public Optional<Output<String>> lifeCycle() {
        return Optional.ofNullable(this.lifeCycle);
    }

    /**
     * Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     * 
     */
    @Import(name="mode")
    private @Nullable Output<Boolean> mode;

    /**
     * @return Indicates if you want to force enable or disable a feature. Value is `true` meaning force
     * 
     */
    public Optional<Output<Boolean>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private FeatureArgs() {}

    private FeatureArgs(FeatureArgs $) {
        this.featureId = $.featureId;
        this.lifeCycle = $.lifeCycle;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureArgs $;

        public Builder() {
            $ = new FeatureArgs();
        }

        public Builder(FeatureArgs defaults) {
            $ = new FeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param featureId Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
         * 
         * @return builder
         * 
         */
        public Builder featureId(Output<String> featureId) {
            $.featureId = featureId;
            return this;
        }

        /**
         * @param featureId Okta API for feature only reads and updates therefore the okta*feature resource needs to act as a quasi data source. Do this by setting feature*id
         * 
         * @return builder
         * 
         */
        public Builder featureId(String featureId) {
            return featureId(Output.of(featureId));
        }

        /**
         * @param lifeCycle Whether to `ENABLE` or `DISABLE` the feature
         * 
         * @return builder
         * 
         */
        public Builder lifeCycle(@Nullable Output<String> lifeCycle) {
            $.lifeCycle = lifeCycle;
            return this;
        }

        /**
         * @param lifeCycle Whether to `ENABLE` or `DISABLE` the feature
         * 
         * @return builder
         * 
         */
        public Builder lifeCycle(String lifeCycle) {
            return lifeCycle(Output.of(lifeCycle));
        }

        /**
         * @param mode Indicates if you want to force enable or disable a feature. Value is `true` meaning force
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<Boolean> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Indicates if you want to force enable or disable a feature. Value is `true` meaning force
         * 
         * @return builder
         * 
         */
        public Builder mode(Boolean mode) {
            return mode(Output.of(mode));
        }

        public FeatureArgs build() {
            if ($.featureId == null) {
                throw new MissingRequiredPropertyException("FeatureArgs", "featureId");
            }
            return $;
        }
    }

}
