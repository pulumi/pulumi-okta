// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.user.inputs.GetUserSearchArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserArgs Empty = new GetUserArgs();

    /**
     * Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     * 
     */
    @Import(name="compoundSearchOperator")
    private @Nullable Output<String> compoundSearchOperator;

    /**
     * @return Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
     * 
     */
    public Optional<Output<String>> compoundSearchOperator() {
        return Optional.ofNullable(this.compoundSearchOperator);
    }

    /**
     * Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     * 
     */
    @Import(name="delayReadSeconds")
    private @Nullable Output<String> delayReadSeconds;

    /**
     * @return Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
     * 
     */
    public Optional<Output<String>> delayReadSeconds() {
        return Optional.ofNullable(this.delayReadSeconds);
    }

    /**
     * Map of search criteria. It supports the following properties.
     * 
     */
    @Import(name="searches")
    private @Nullable Output<List<GetUserSearchArgs>> searches;

    /**
     * @return Map of search criteria. It supports the following properties.
     * 
     */
    public Optional<Output<List<GetUserSearchArgs>>> searches() {
        return Optional.ofNullable(this.searches);
    }

    /**
     * Additional API call to collect user&#39;s groups will not be made.
     * 
     */
    @Import(name="skipGroups")
    private @Nullable Output<Boolean> skipGroups;

    /**
     * @return Additional API call to collect user&#39;s groups will not be made.
     * 
     */
    public Optional<Output<Boolean>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Additional API call to collect user&#39;s roles will not be made.
     * 
     */
    @Import(name="skipRoles")
    private @Nullable Output<Boolean> skipRoles;

    /**
     * @return Additional API call to collect user&#39;s roles will not be made.
     * 
     */
    public Optional<Output<Boolean>> skipRoles() {
        return Optional.ofNullable(this.skipRoles);
    }

    /**
     * String representing a specific user&#39;s id value
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return String representing a specific user&#39;s id value
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private GetUserArgs() {}

    private GetUserArgs(GetUserArgs $) {
        this.compoundSearchOperator = $.compoundSearchOperator;
        this.delayReadSeconds = $.delayReadSeconds;
        this.searches = $.searches;
        this.skipGroups = $.skipGroups;
        this.skipRoles = $.skipRoles;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserArgs $;

        public Builder() {
            $ = new GetUserArgs();
        }

        public Builder(GetUserArgs defaults) {
            $ = new GetUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compoundSearchOperator Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
         * 
         * @return builder
         * 
         */
        public Builder compoundSearchOperator(@Nullable Output<String> compoundSearchOperator) {
            $.compoundSearchOperator = compoundSearchOperator;
            return this;
        }

        /**
         * @param compoundSearchOperator Given multiple search elements they will be compounded together with the op. Default is `and`, `or` is also valid.
         * 
         * @return builder
         * 
         */
        public Builder compoundSearchOperator(String compoundSearchOperator) {
            return compoundSearchOperator(Output.of(compoundSearchOperator));
        }

        /**
         * @param delayReadSeconds Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
         * 
         * @return builder
         * 
         */
        public Builder delayReadSeconds(@Nullable Output<String> delayReadSeconds) {
            $.delayReadSeconds = delayReadSeconds;
            return this;
        }

        /**
         * @param delayReadSeconds Force delay of the user read by N seconds. Useful when eventual consistency of user information needs to be allowed for.
         * 
         * @return builder
         * 
         */
        public Builder delayReadSeconds(String delayReadSeconds) {
            return delayReadSeconds(Output.of(delayReadSeconds));
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(@Nullable Output<List<GetUserSearchArgs>> searches) {
            $.searches = searches;
            return this;
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(List<GetUserSearchArgs> searches) {
            return searches(Output.of(searches));
        }

        /**
         * @param searches Map of search criteria. It supports the following properties.
         * 
         * @return builder
         * 
         */
        public Builder searches(GetUserSearchArgs... searches) {
            return searches(List.of(searches));
        }

        /**
         * @param skipGroups Additional API call to collect user&#39;s groups will not be made.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(@Nullable Output<Boolean> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipGroups Additional API call to collect user&#39;s groups will not be made.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(Boolean skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @param skipRoles Additional API call to collect user&#39;s roles will not be made.
         * 
         * @return builder
         * 
         */
        public Builder skipRoles(@Nullable Output<Boolean> skipRoles) {
            $.skipRoles = skipRoles;
            return this;
        }

        /**
         * @param skipRoles Additional API call to collect user&#39;s roles will not be made.
         * 
         * @return builder
         * 
         */
        public Builder skipRoles(Boolean skipRoles) {
            return skipRoles(Output.of(skipRoles));
        }

        /**
         * @param userId String representing a specific user&#39;s id value
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId String representing a specific user&#39;s id value
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public GetUserArgs build() {
            return $;
        }
    }

}
