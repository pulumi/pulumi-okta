// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LinkDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkDefinitionArgs Empty = new LinkDefinitionArgs();

    /**
     * Description of the associated relationship.
     * 
     */
    @Import(name="associatedDescription", required=true)
    private Output<String> associatedDescription;

    /**
     * @return Description of the associated relationship.
     * 
     */
    public Output<String> associatedDescription() {
        return this.associatedDescription;
    }

    /**
     * API name of the associated link.
     * 
     */
    @Import(name="associatedName", required=true)
    private Output<String> associatedName;

    /**
     * @return API name of the associated link.
     * 
     */
    public Output<String> associatedName() {
        return this.associatedName;
    }

    /**
     * Display name of the associated link.
     * 
     */
    @Import(name="associatedTitle", required=true)
    private Output<String> associatedTitle;

    /**
     * @return Display name of the associated link.
     * 
     */
    public Output<String> associatedTitle() {
        return this.associatedTitle;
    }

    /**
     * Description of the primary relationship.
     * 
     */
    @Import(name="primaryDescription", required=true)
    private Output<String> primaryDescription;

    /**
     * @return Description of the primary relationship.
     * 
     */
    public Output<String> primaryDescription() {
        return this.primaryDescription;
    }

    /**
     * API name of the primary link.
     * 
     */
    @Import(name="primaryName", required=true)
    private Output<String> primaryName;

    /**
     * @return API name of the primary link.
     * 
     */
    public Output<String> primaryName() {
        return this.primaryName;
    }

    /**
     * Display name of the primary link.
     * 
     */
    @Import(name="primaryTitle", required=true)
    private Output<String> primaryTitle;

    /**
     * @return Display name of the primary link.
     * 
     */
    public Output<String> primaryTitle() {
        return this.primaryTitle;
    }

    private LinkDefinitionArgs() {}

    private LinkDefinitionArgs(LinkDefinitionArgs $) {
        this.associatedDescription = $.associatedDescription;
        this.associatedName = $.associatedName;
        this.associatedTitle = $.associatedTitle;
        this.primaryDescription = $.primaryDescription;
        this.primaryName = $.primaryName;
        this.primaryTitle = $.primaryTitle;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkDefinitionArgs $;

        public Builder() {
            $ = new LinkDefinitionArgs();
        }

        public Builder(LinkDefinitionArgs defaults) {
            $ = new LinkDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedDescription Description of the associated relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedDescription(Output<String> associatedDescription) {
            $.associatedDescription = associatedDescription;
            return this;
        }

        /**
         * @param associatedDescription Description of the associated relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedDescription(String associatedDescription) {
            return associatedDescription(Output.of(associatedDescription));
        }

        /**
         * @param associatedName API name of the associated link.
         * 
         * @return builder
         * 
         */
        public Builder associatedName(Output<String> associatedName) {
            $.associatedName = associatedName;
            return this;
        }

        /**
         * @param associatedName API name of the associated link.
         * 
         * @return builder
         * 
         */
        public Builder associatedName(String associatedName) {
            return associatedName(Output.of(associatedName));
        }

        /**
         * @param associatedTitle Display name of the associated link.
         * 
         * @return builder
         * 
         */
        public Builder associatedTitle(Output<String> associatedTitle) {
            $.associatedTitle = associatedTitle;
            return this;
        }

        /**
         * @param associatedTitle Display name of the associated link.
         * 
         * @return builder
         * 
         */
        public Builder associatedTitle(String associatedTitle) {
            return associatedTitle(Output.of(associatedTitle));
        }

        /**
         * @param primaryDescription Description of the primary relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryDescription(Output<String> primaryDescription) {
            $.primaryDescription = primaryDescription;
            return this;
        }

        /**
         * @param primaryDescription Description of the primary relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryDescription(String primaryDescription) {
            return primaryDescription(Output.of(primaryDescription));
        }

        /**
         * @param primaryName API name of the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(Output<String> primaryName) {
            $.primaryName = primaryName;
            return this;
        }

        /**
         * @param primaryName API name of the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(String primaryName) {
            return primaryName(Output.of(primaryName));
        }

        /**
         * @param primaryTitle Display name of the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryTitle(Output<String> primaryTitle) {
            $.primaryTitle = primaryTitle;
            return this;
        }

        /**
         * @param primaryTitle Display name of the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryTitle(String primaryTitle) {
            return primaryTitle(Output.of(primaryTitle));
        }

        public LinkDefinitionArgs build() {
            if ($.associatedDescription == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "associatedDescription");
            }
            if ($.associatedName == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "associatedName");
            }
            if ($.associatedTitle == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "associatedTitle");
            }
            if ($.primaryDescription == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "primaryDescription");
            }
            if ($.primaryName == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "primaryName");
            }
            if ($.primaryTitle == null) {
                throw new MissingRequiredPropertyException("LinkDefinitionArgs", "primaryTitle");
            }
            return $;
        }
    }

}
