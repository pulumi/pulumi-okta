// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetCampaignNotificationSettings extends com.pulumi.resources.InvokeArgs {

    public static final GetCampaignNotificationSettings Empty = new GetCampaignNotificationSettings();

    @Import(name="notifyReviewPeriodEnd", required=true)
    private Boolean notifyReviewPeriodEnd;

    public Boolean notifyReviewPeriodEnd() {
        return this.notifyReviewPeriodEnd;
    }

    @Import(name="notifyReviewerAtCampaignEnd", required=true)
    private Boolean notifyReviewerAtCampaignEnd;

    public Boolean notifyReviewerAtCampaignEnd() {
        return this.notifyReviewerAtCampaignEnd;
    }

    @Import(name="notifyReviewerDuringMidpointOfReview", required=true)
    private Boolean notifyReviewerDuringMidpointOfReview;

    public Boolean notifyReviewerDuringMidpointOfReview() {
        return this.notifyReviewerDuringMidpointOfReview;
    }

    @Import(name="notifyReviewerWhenOverdue", required=true)
    private Boolean notifyReviewerWhenOverdue;

    public Boolean notifyReviewerWhenOverdue() {
        return this.notifyReviewerWhenOverdue;
    }

    @Import(name="notifyReviewerWhenReviewAssigned", required=true)
    private Boolean notifyReviewerWhenReviewAssigned;

    public Boolean notifyReviewerWhenReviewAssigned() {
        return this.notifyReviewerWhenReviewAssigned;
    }

    @Import(name="remindersReviewerBeforeCampaignCloseInSecs", required=true)
    private List<Integer> remindersReviewerBeforeCampaignCloseInSecs;

    public List<Integer> remindersReviewerBeforeCampaignCloseInSecs() {
        return this.remindersReviewerBeforeCampaignCloseInSecs;
    }

    private GetCampaignNotificationSettings() {}

    private GetCampaignNotificationSettings(GetCampaignNotificationSettings $) {
        this.notifyReviewPeriodEnd = $.notifyReviewPeriodEnd;
        this.notifyReviewerAtCampaignEnd = $.notifyReviewerAtCampaignEnd;
        this.notifyReviewerDuringMidpointOfReview = $.notifyReviewerDuringMidpointOfReview;
        this.notifyReviewerWhenOverdue = $.notifyReviewerWhenOverdue;
        this.notifyReviewerWhenReviewAssigned = $.notifyReviewerWhenReviewAssigned;
        this.remindersReviewerBeforeCampaignCloseInSecs = $.remindersReviewerBeforeCampaignCloseInSecs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCampaignNotificationSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCampaignNotificationSettings $;

        public Builder() {
            $ = new GetCampaignNotificationSettings();
        }

        public Builder(GetCampaignNotificationSettings defaults) {
            $ = new GetCampaignNotificationSettings(Objects.requireNonNull(defaults));
        }

        public Builder notifyReviewPeriodEnd(Boolean notifyReviewPeriodEnd) {
            $.notifyReviewPeriodEnd = notifyReviewPeriodEnd;
            return this;
        }

        public Builder notifyReviewerAtCampaignEnd(Boolean notifyReviewerAtCampaignEnd) {
            $.notifyReviewerAtCampaignEnd = notifyReviewerAtCampaignEnd;
            return this;
        }

        public Builder notifyReviewerDuringMidpointOfReview(Boolean notifyReviewerDuringMidpointOfReview) {
            $.notifyReviewerDuringMidpointOfReview = notifyReviewerDuringMidpointOfReview;
            return this;
        }

        public Builder notifyReviewerWhenOverdue(Boolean notifyReviewerWhenOverdue) {
            $.notifyReviewerWhenOverdue = notifyReviewerWhenOverdue;
            return this;
        }

        public Builder notifyReviewerWhenReviewAssigned(Boolean notifyReviewerWhenReviewAssigned) {
            $.notifyReviewerWhenReviewAssigned = notifyReviewerWhenReviewAssigned;
            return this;
        }

        public Builder remindersReviewerBeforeCampaignCloseInSecs(List<Integer> remindersReviewerBeforeCampaignCloseInSecs) {
            $.remindersReviewerBeforeCampaignCloseInSecs = remindersReviewerBeforeCampaignCloseInSecs;
            return this;
        }

        public Builder remindersReviewerBeforeCampaignCloseInSecs(Integer... remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(List.of(remindersReviewerBeforeCampaignCloseInSecs));
        }

        public GetCampaignNotificationSettings build() {
            if ($.notifyReviewPeriodEnd == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "notifyReviewPeriodEnd");
            }
            if ($.notifyReviewerAtCampaignEnd == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "notifyReviewerAtCampaignEnd");
            }
            if ($.notifyReviewerDuringMidpointOfReview == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "notifyReviewerDuringMidpointOfReview");
            }
            if ($.notifyReviewerWhenOverdue == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "notifyReviewerWhenOverdue");
            }
            if ($.notifyReviewerWhenReviewAssigned == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "notifyReviewerWhenReviewAssigned");
            }
            if ($.remindersReviewerBeforeCampaignCloseInSecs == null) {
                throw new MissingRequiredPropertyException("GetCampaignNotificationSettings", "remindersReviewerBeforeCampaignCloseInSecs");
            }
            return $;
        }
    }

}
