// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.okta.app.outputs.GetSamlAttributeStatement;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSamlResult {
    /**
     * @return Custom error page URL.
     * 
     */
    private final String accessibilityErrorRedirectUrl;
    /**
     * @return Custom login page URL.
     * 
     */
    private final String accessibilityLoginRedirectUrl;
    /**
     * @return Enable self-service.
     * 
     */
    private final Boolean accessibilitySelfService;
    /**
     * @return An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    private final List<String> acsEndpoints;
    private final @Nullable Boolean activeOnly;
    /**
     * @return Application settings in JSON format.
     * 
     */
    private final String appSettingsJson;
    /**
     * @return Determines whether the SAML assertion is digitally signed.
     * 
     */
    private final Boolean assertionSigned;
    /**
     * @return List of SAML Attribute statements.
     * 
     */
    private final List<GetSamlAttributeStatement> attributeStatements;
    /**
     * @return Audience restriction.
     * 
     */
    private final String audience;
    /**
     * @return Identifies the SAML authentication context class for the assertionâ€™s authentication
     * statement.
     * 
     */
    private final String authnContextClassRef;
    /**
     * @return Display auto submit toolbar.
     * 
     */
    private final Boolean autoSubmitToolbar;
    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    private final String defaultRelayState;
    /**
     * @return Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     * 
     */
    private final String destination;
    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response.
     * 
     */
    private final String digestAlgorithm;
    /**
     * @return features enabled.
     * 
     */
    private final List<String> features;
    /**
     * @return List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments` */
    private final List<String> groups;
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    private final Boolean hideIos;
    /**
     * @return Do not display application icon to users
     * 
     */
    private final Boolean hideWeb;
    /**
     * @return Prompt user to re-authenticate if SP asks for it.
     * 
     */
    private final Boolean honorForceAuthn;
    /**
     * @return id of application.
     * 
     */
    private final @Nullable String id;
    /**
     * @return SAML issuer ID.
     * 
     */
    private final String idpIssuer;
    /**
     * @return Saml Inline Hook associated with the application.
     * 
     */
    private final String inlineHookId;
    /**
     * @return Certificate key ID.
     * 
     */
    private final String keyId;
    /**
     * @return label of application.
     * 
     */
    private final @Nullable String label;
    private final @Nullable String labelPrefix;
    /**
     * @return Generic JSON containing discoverable resources related to the app.
     * 
     */
    private final String links;
    /**
     * @return The name of the attribute statement.
     * 
     */
    private final String name;
    /**
     * @return The location where the app may present the SAML assertion.
     * 
     */
    private final String recipient;
    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    private final @Nullable Boolean requestCompressed;
    /**
     * @return Determines whether the SAML auth response message is digitally signed.
     * 
     */
    private final Boolean responseSigned;
    /**
     * @return Signature algorithm used ot digitally sign the assertion and response.
     * 
     */
    private final String signatureAlgorithm;
    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * 
     */
    private final String singleLogoutCertificate;
    /**
     * @return The issuer of the Service Provider that generates the Single Logout request.
     * 
     */
    private final String singleLogoutIssuer;
    /**
     * @return The location where the logout response is sent.
     * 
     */
    private final String singleLogoutUrl;
    private final @Nullable Boolean skipGroups;
    private final @Nullable Boolean skipUsers;
    /**
     * @return SAML service provider issuer.
     * 
     */
    private final String spIssuer;
    /**
     * @return Single Sign-on Url.
     * 
     */
    private final String ssoUrl;
    /**
     * @return status of application.
     * 
     */
    private final String status;
    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    private final String subjectNameIdFormat;
    /**
     * @return Template for app user&#39;s username when a user is assigned to the app.
     * 
     */
    private final String subjectNameIdTemplate;
    /**
     * @return Username template.
     * 
     */
    private final String userNameTemplate;
    /**
     * @return Push username on update.
     * 
     */
    private final String userNameTemplatePushStatus;
    /**
     * @return Username template suffix.
     * 
     */
    private final String userNameTemplateSuffix;
    /**
     * @return Username template type.
     * 
     */
    private final String userNameTemplateType;
    /**
     * @return List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     * 
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments` */
    private final List<String> users;

    @CustomType.Constructor
    private GetSamlResult(
        @CustomType.Parameter("accessibilityErrorRedirectUrl") String accessibilityErrorRedirectUrl,
        @CustomType.Parameter("accessibilityLoginRedirectUrl") String accessibilityLoginRedirectUrl,
        @CustomType.Parameter("accessibilitySelfService") Boolean accessibilitySelfService,
        @CustomType.Parameter("acsEndpoints") List<String> acsEndpoints,
        @CustomType.Parameter("activeOnly") @Nullable Boolean activeOnly,
        @CustomType.Parameter("appSettingsJson") String appSettingsJson,
        @CustomType.Parameter("assertionSigned") Boolean assertionSigned,
        @CustomType.Parameter("attributeStatements") List<GetSamlAttributeStatement> attributeStatements,
        @CustomType.Parameter("audience") String audience,
        @CustomType.Parameter("authnContextClassRef") String authnContextClassRef,
        @CustomType.Parameter("autoSubmitToolbar") Boolean autoSubmitToolbar,
        @CustomType.Parameter("defaultRelayState") String defaultRelayState,
        @CustomType.Parameter("destination") String destination,
        @CustomType.Parameter("digestAlgorithm") String digestAlgorithm,
        @CustomType.Parameter("features") List<String> features,
        @CustomType.Parameter("groups") List<String> groups,
        @CustomType.Parameter("hideIos") Boolean hideIos,
        @CustomType.Parameter("hideWeb") Boolean hideWeb,
        @CustomType.Parameter("honorForceAuthn") Boolean honorForceAuthn,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("idpIssuer") String idpIssuer,
        @CustomType.Parameter("inlineHookId") String inlineHookId,
        @CustomType.Parameter("keyId") String keyId,
        @CustomType.Parameter("label") @Nullable String label,
        @CustomType.Parameter("labelPrefix") @Nullable String labelPrefix,
        @CustomType.Parameter("links") String links,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("recipient") String recipient,
        @CustomType.Parameter("requestCompressed") @Nullable Boolean requestCompressed,
        @CustomType.Parameter("responseSigned") Boolean responseSigned,
        @CustomType.Parameter("signatureAlgorithm") String signatureAlgorithm,
        @CustomType.Parameter("singleLogoutCertificate") String singleLogoutCertificate,
        @CustomType.Parameter("singleLogoutIssuer") String singleLogoutIssuer,
        @CustomType.Parameter("singleLogoutUrl") String singleLogoutUrl,
        @CustomType.Parameter("skipGroups") @Nullable Boolean skipGroups,
        @CustomType.Parameter("skipUsers") @Nullable Boolean skipUsers,
        @CustomType.Parameter("spIssuer") String spIssuer,
        @CustomType.Parameter("ssoUrl") String ssoUrl,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("subjectNameIdFormat") String subjectNameIdFormat,
        @CustomType.Parameter("subjectNameIdTemplate") String subjectNameIdTemplate,
        @CustomType.Parameter("userNameTemplate") String userNameTemplate,
        @CustomType.Parameter("userNameTemplatePushStatus") String userNameTemplatePushStatus,
        @CustomType.Parameter("userNameTemplateSuffix") String userNameTemplateSuffix,
        @CustomType.Parameter("userNameTemplateType") String userNameTemplateType,
        @CustomType.Parameter("users") List<String> users) {
        this.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
        this.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
        this.accessibilitySelfService = accessibilitySelfService;
        this.acsEndpoints = acsEndpoints;
        this.activeOnly = activeOnly;
        this.appSettingsJson = appSettingsJson;
        this.assertionSigned = assertionSigned;
        this.attributeStatements = attributeStatements;
        this.audience = audience;
        this.authnContextClassRef = authnContextClassRef;
        this.autoSubmitToolbar = autoSubmitToolbar;
        this.defaultRelayState = defaultRelayState;
        this.destination = destination;
        this.digestAlgorithm = digestAlgorithm;
        this.features = features;
        this.groups = groups;
        this.hideIos = hideIos;
        this.hideWeb = hideWeb;
        this.honorForceAuthn = honorForceAuthn;
        this.id = id;
        this.idpIssuer = idpIssuer;
        this.inlineHookId = inlineHookId;
        this.keyId = keyId;
        this.label = label;
        this.labelPrefix = labelPrefix;
        this.links = links;
        this.name = name;
        this.recipient = recipient;
        this.requestCompressed = requestCompressed;
        this.responseSigned = responseSigned;
        this.signatureAlgorithm = signatureAlgorithm;
        this.singleLogoutCertificate = singleLogoutCertificate;
        this.singleLogoutIssuer = singleLogoutIssuer;
        this.singleLogoutUrl = singleLogoutUrl;
        this.skipGroups = skipGroups;
        this.skipUsers = skipUsers;
        this.spIssuer = spIssuer;
        this.ssoUrl = ssoUrl;
        this.status = status;
        this.subjectNameIdFormat = subjectNameIdFormat;
        this.subjectNameIdTemplate = subjectNameIdTemplate;
        this.userNameTemplate = userNameTemplate;
        this.userNameTemplatePushStatus = userNameTemplatePushStatus;
        this.userNameTemplateSuffix = userNameTemplateSuffix;
        this.userNameTemplateType = userNameTemplateType;
        this.users = users;
    }

    /**
     * @return Custom error page URL.
     * 
     */
    public String accessibilityErrorRedirectUrl() {
        return this.accessibilityErrorRedirectUrl;
    }
    /**
     * @return Custom login page URL.
     * 
     */
    public String accessibilityLoginRedirectUrl() {
        return this.accessibilityLoginRedirectUrl;
    }
    /**
     * @return Enable self-service.
     * 
     */
    public Boolean accessibilitySelfService() {
        return this.accessibilitySelfService;
    }
    /**
     * @return An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    public List<String> acsEndpoints() {
        return this.acsEndpoints;
    }
    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }
    /**
     * @return Application settings in JSON format.
     * 
     */
    public String appSettingsJson() {
        return this.appSettingsJson;
    }
    /**
     * @return Determines whether the SAML assertion is digitally signed.
     * 
     */
    public Boolean assertionSigned() {
        return this.assertionSigned;
    }
    /**
     * @return List of SAML Attribute statements.
     * 
     */
    public List<GetSamlAttributeStatement> attributeStatements() {
        return this.attributeStatements;
    }
    /**
     * @return Audience restriction.
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return Identifies the SAML authentication context class for the assertionâ€™s authentication
     * statement.
     * 
     */
    public String authnContextClassRef() {
        return this.authnContextClassRef;
    }
    /**
     * @return Display auto submit toolbar.
     * 
     */
    public Boolean autoSubmitToolbar() {
        return this.autoSubmitToolbar;
    }
    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    public String defaultRelayState() {
        return this.defaultRelayState;
    }
    /**
     * @return Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response.
     * 
     */
    public String digestAlgorithm() {
        return this.digestAlgorithm;
    }
    /**
     * @return features enabled.
     * 
     */
    public List<String> features() {
        return this.features;
    }
    /**
     * @return List of groups IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.AppGroupAssignments`.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments` */
    public List<String> groups() {
        return this.groups;
    }
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    public Boolean hideIos() {
        return this.hideIos;
    }
    /**
     * @return Do not display application icon to users
     * 
     */
    public Boolean hideWeb() {
        return this.hideWeb;
    }
    /**
     * @return Prompt user to re-authenticate if SP asks for it.
     * 
     */
    public Boolean honorForceAuthn() {
        return this.honorForceAuthn;
    }
    /**
     * @return id of application.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return SAML issuer ID.
     * 
     */
    public String idpIssuer() {
        return this.idpIssuer;
    }
    /**
     * @return Saml Inline Hook associated with the application.
     * 
     */
    public String inlineHookId() {
        return this.inlineHookId;
    }
    /**
     * @return Certificate key ID.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return label of application.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }
    /**
     * @return Generic JSON containing discoverable resources related to the app.
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return The name of the attribute statement.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The location where the app may present the SAML assertion.
     * 
     */
    public String recipient() {
        return this.recipient;
    }
    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Optional<Boolean> requestCompressed() {
        return Optional.ofNullable(this.requestCompressed);
    }
    /**
     * @return Determines whether the SAML auth response message is digitally signed.
     * 
     */
    public Boolean responseSigned() {
        return this.responseSigned;
    }
    /**
     * @return Signature algorithm used ot digitally sign the assertion and response.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * 
     */
    public String singleLogoutCertificate() {
        return this.singleLogoutCertificate;
    }
    /**
     * @return The issuer of the Service Provider that generates the Single Logout request.
     * 
     */
    public String singleLogoutIssuer() {
        return this.singleLogoutIssuer;
    }
    /**
     * @return The location where the logout response is sent.
     * 
     */
    public String singleLogoutUrl() {
        return this.singleLogoutUrl;
    }
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }
    /**
     * @return SAML service provider issuer.
     * 
     */
    public String spIssuer() {
        return this.spIssuer;
    }
    /**
     * @return Single Sign-on Url.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return status of application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    public String subjectNameIdFormat() {
        return this.subjectNameIdFormat;
    }
    /**
     * @return Template for app user&#39;s username when a user is assigned to the app.
     * 
     */
    public String subjectNameIdTemplate() {
        return this.subjectNameIdTemplate;
    }
    /**
     * @return Username template.
     * 
     */
    public String userNameTemplate() {
        return this.userNameTemplate;
    }
    /**
     * @return Push username on update.
     * 
     */
    public String userNameTemplatePushStatus() {
        return this.userNameTemplatePushStatus;
    }
    /**
     * @return Username template suffix.
     * 
     */
    public String userNameTemplateSuffix() {
        return this.userNameTemplateSuffix;
    }
    /**
     * @return Username template type.
     * 
     */
    public String userNameTemplateType() {
        return this.userNameTemplateType;
    }
    /**
     * @return List of users IDs assigned to the application.
     * - `DEPRECATED`: Please replace all usage of this field with the data source `okta.getAppUserAssignments`.
     * 
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments` */
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSamlResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessibilityErrorRedirectUrl;
        private String accessibilityLoginRedirectUrl;
        private Boolean accessibilitySelfService;
        private List<String> acsEndpoints;
        private @Nullable Boolean activeOnly;
        private String appSettingsJson;
        private Boolean assertionSigned;
        private List<GetSamlAttributeStatement> attributeStatements;
        private String audience;
        private String authnContextClassRef;
        private Boolean autoSubmitToolbar;
        private String defaultRelayState;
        private String destination;
        private String digestAlgorithm;
        private List<String> features;
        private List<String> groups;
        private Boolean hideIos;
        private Boolean hideWeb;
        private Boolean honorForceAuthn;
        private @Nullable String id;
        private String idpIssuer;
        private String inlineHookId;
        private String keyId;
        private @Nullable String label;
        private @Nullable String labelPrefix;
        private String links;
        private String name;
        private String recipient;
        private @Nullable Boolean requestCompressed;
        private Boolean responseSigned;
        private String signatureAlgorithm;
        private String singleLogoutCertificate;
        private String singleLogoutIssuer;
        private String singleLogoutUrl;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipUsers;
        private String spIssuer;
        private String ssoUrl;
        private String status;
        private String subjectNameIdFormat;
        private String subjectNameIdTemplate;
        private String userNameTemplate;
        private String userNameTemplatePushStatus;
        private String userNameTemplateSuffix;
        private String userNameTemplateType;
        private List<String> users;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessibilityErrorRedirectUrl = defaults.accessibilityErrorRedirectUrl;
    	      this.accessibilityLoginRedirectUrl = defaults.accessibilityLoginRedirectUrl;
    	      this.accessibilitySelfService = defaults.accessibilitySelfService;
    	      this.acsEndpoints = defaults.acsEndpoints;
    	      this.activeOnly = defaults.activeOnly;
    	      this.appSettingsJson = defaults.appSettingsJson;
    	      this.assertionSigned = defaults.assertionSigned;
    	      this.attributeStatements = defaults.attributeStatements;
    	      this.audience = defaults.audience;
    	      this.authnContextClassRef = defaults.authnContextClassRef;
    	      this.autoSubmitToolbar = defaults.autoSubmitToolbar;
    	      this.defaultRelayState = defaults.defaultRelayState;
    	      this.destination = defaults.destination;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.features = defaults.features;
    	      this.groups = defaults.groups;
    	      this.hideIos = defaults.hideIos;
    	      this.hideWeb = defaults.hideWeb;
    	      this.honorForceAuthn = defaults.honorForceAuthn;
    	      this.id = defaults.id;
    	      this.idpIssuer = defaults.idpIssuer;
    	      this.inlineHookId = defaults.inlineHookId;
    	      this.keyId = defaults.keyId;
    	      this.label = defaults.label;
    	      this.labelPrefix = defaults.labelPrefix;
    	      this.links = defaults.links;
    	      this.name = defaults.name;
    	      this.recipient = defaults.recipient;
    	      this.requestCompressed = defaults.requestCompressed;
    	      this.responseSigned = defaults.responseSigned;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.singleLogoutCertificate = defaults.singleLogoutCertificate;
    	      this.singleLogoutIssuer = defaults.singleLogoutIssuer;
    	      this.singleLogoutUrl = defaults.singleLogoutUrl;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipUsers = defaults.skipUsers;
    	      this.spIssuer = defaults.spIssuer;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.status = defaults.status;
    	      this.subjectNameIdFormat = defaults.subjectNameIdFormat;
    	      this.subjectNameIdTemplate = defaults.subjectNameIdTemplate;
    	      this.userNameTemplate = defaults.userNameTemplate;
    	      this.userNameTemplatePushStatus = defaults.userNameTemplatePushStatus;
    	      this.userNameTemplateSuffix = defaults.userNameTemplateSuffix;
    	      this.userNameTemplateType = defaults.userNameTemplateType;
    	      this.users = defaults.users;
        }

        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            this.accessibilityErrorRedirectUrl = Objects.requireNonNull(accessibilityErrorRedirectUrl);
            return this;
        }
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            this.accessibilityLoginRedirectUrl = Objects.requireNonNull(accessibilityLoginRedirectUrl);
            return this;
        }
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            this.accessibilitySelfService = Objects.requireNonNull(accessibilitySelfService);
            return this;
        }
        public Builder acsEndpoints(List<String> acsEndpoints) {
            this.acsEndpoints = Objects.requireNonNull(acsEndpoints);
            return this;
        }
        public Builder acsEndpoints(String... acsEndpoints) {
            return acsEndpoints(List.of(acsEndpoints));
        }
        public Builder activeOnly(@Nullable Boolean activeOnly) {
            this.activeOnly = activeOnly;
            return this;
        }
        public Builder appSettingsJson(String appSettingsJson) {
            this.appSettingsJson = Objects.requireNonNull(appSettingsJson);
            return this;
        }
        public Builder assertionSigned(Boolean assertionSigned) {
            this.assertionSigned = Objects.requireNonNull(assertionSigned);
            return this;
        }
        public Builder attributeStatements(List<GetSamlAttributeStatement> attributeStatements) {
            this.attributeStatements = Objects.requireNonNull(attributeStatements);
            return this;
        }
        public Builder attributeStatements(GetSamlAttributeStatement... attributeStatements) {
            return attributeStatements(List.of(attributeStatements));
        }
        public Builder audience(String audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }
        public Builder authnContextClassRef(String authnContextClassRef) {
            this.authnContextClassRef = Objects.requireNonNull(authnContextClassRef);
            return this;
        }
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            this.autoSubmitToolbar = Objects.requireNonNull(autoSubmitToolbar);
            return this;
        }
        public Builder defaultRelayState(String defaultRelayState) {
            this.defaultRelayState = Objects.requireNonNull(defaultRelayState);
            return this;
        }
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        public Builder digestAlgorithm(String digestAlgorithm) {
            this.digestAlgorithm = Objects.requireNonNull(digestAlgorithm);
            return this;
        }
        public Builder features(List<String> features) {
            this.features = Objects.requireNonNull(features);
            return this;
        }
        public Builder features(String... features) {
            return features(List.of(features));
        }
        public Builder groups(List<String> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        public Builder hideIos(Boolean hideIos) {
            this.hideIos = Objects.requireNonNull(hideIos);
            return this;
        }
        public Builder hideWeb(Boolean hideWeb) {
            this.hideWeb = Objects.requireNonNull(hideWeb);
            return this;
        }
        public Builder honorForceAuthn(Boolean honorForceAuthn) {
            this.honorForceAuthn = Objects.requireNonNull(honorForceAuthn);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder idpIssuer(String idpIssuer) {
            this.idpIssuer = Objects.requireNonNull(idpIssuer);
            return this;
        }
        public Builder inlineHookId(String inlineHookId) {
            this.inlineHookId = Objects.requireNonNull(inlineHookId);
            return this;
        }
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        public Builder labelPrefix(@Nullable String labelPrefix) {
            this.labelPrefix = labelPrefix;
            return this;
        }
        public Builder links(String links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder recipient(String recipient) {
            this.recipient = Objects.requireNonNull(recipient);
            return this;
        }
        public Builder requestCompressed(@Nullable Boolean requestCompressed) {
            this.requestCompressed = requestCompressed;
            return this;
        }
        public Builder responseSigned(Boolean responseSigned) {
            this.responseSigned = Objects.requireNonNull(responseSigned);
            return this;
        }
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        public Builder singleLogoutCertificate(String singleLogoutCertificate) {
            this.singleLogoutCertificate = Objects.requireNonNull(singleLogoutCertificate);
            return this;
        }
        public Builder singleLogoutIssuer(String singleLogoutIssuer) {
            this.singleLogoutIssuer = Objects.requireNonNull(singleLogoutIssuer);
            return this;
        }
        public Builder singleLogoutUrl(String singleLogoutUrl) {
            this.singleLogoutUrl = Objects.requireNonNull(singleLogoutUrl);
            return this;
        }
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            this.skipGroups = skipGroups;
            return this;
        }
        public Builder skipUsers(@Nullable Boolean skipUsers) {
            this.skipUsers = skipUsers;
            return this;
        }
        public Builder spIssuer(String spIssuer) {
            this.spIssuer = Objects.requireNonNull(spIssuer);
            return this;
        }
        public Builder ssoUrl(String ssoUrl) {
            this.ssoUrl = Objects.requireNonNull(ssoUrl);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder subjectNameIdFormat(String subjectNameIdFormat) {
            this.subjectNameIdFormat = Objects.requireNonNull(subjectNameIdFormat);
            return this;
        }
        public Builder subjectNameIdTemplate(String subjectNameIdTemplate) {
            this.subjectNameIdTemplate = Objects.requireNonNull(subjectNameIdTemplate);
            return this;
        }
        public Builder userNameTemplate(String userNameTemplate) {
            this.userNameTemplate = Objects.requireNonNull(userNameTemplate);
            return this;
        }
        public Builder userNameTemplatePushStatus(String userNameTemplatePushStatus) {
            this.userNameTemplatePushStatus = Objects.requireNonNull(userNameTemplatePushStatus);
            return this;
        }
        public Builder userNameTemplateSuffix(String userNameTemplateSuffix) {
            this.userNameTemplateSuffix = Objects.requireNonNull(userNameTemplateSuffix);
            return this;
        }
        public Builder userNameTemplateType(String userNameTemplateType) {
            this.userNameTemplateType = Objects.requireNonNull(userNameTemplateType);
            return this;
        }
        public Builder users(List<String> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }        public GetSamlResult build() {
            return new GetSamlResult(accessibilityErrorRedirectUrl, accessibilityLoginRedirectUrl, accessibilitySelfService, acsEndpoints, activeOnly, appSettingsJson, assertionSigned, attributeStatements, audience, authnContextClassRef, autoSubmitToolbar, defaultRelayState, destination, digestAlgorithm, features, groups, hideIos, hideWeb, honorForceAuthn, id, idpIssuer, inlineHookId, keyId, label, labelPrefix, links, name, recipient, requestCompressed, responseSigned, signatureAlgorithm, singleLogoutCertificate, singleLogoutIssuer, singleLogoutUrl, skipGroups, skipUsers, spIssuer, ssoUrl, status, subjectNameIdFormat, subjectNameIdTemplate, userNameTemplate, userNameTemplatePushStatus, userNameTemplateSuffix, userNameTemplateType, users);
        }
    }
}
