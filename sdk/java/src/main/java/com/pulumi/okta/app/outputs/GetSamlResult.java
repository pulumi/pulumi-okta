// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.okta.app.outputs.GetSamlAttributeStatement;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSamlResult {
    /**
     * @return Custom error page URL.
     * 
     */
    private String accessibilityErrorRedirectUrl;
    /**
     * @return Custom login page URL.
     * 
     */
    private String accessibilityLoginRedirectUrl;
    /**
     * @return Enable self-service.
     * 
     */
    private Boolean accessibilitySelfService;
    /**
     * @return An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    private List<String> acsEndpoints;
    private @Nullable Boolean activeOnly;
    /**
     * @return Application settings in JSON format.
     * 
     */
    private String appSettingsJson;
    /**
     * @return Determines whether the SAML assertion is digitally signed.
     * 
     */
    private Boolean assertionSigned;
    /**
     * @return List of SAML Attribute statements.
     * 
     */
    private List<GetSamlAttributeStatement> attributeStatements;
    /**
     * @return Audience restriction.
     * 
     */
    private String audience;
    /**
     * @return Identifies the SAML authentication context class for the assertion’s authentication statement.
     * 
     */
    private String authnContextClassRef;
    /**
     * @return Display auto submit toolbar.
     * 
     */
    private Boolean autoSubmitToolbar;
    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    private String defaultRelayState;
    /**
     * @return Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     * 
     */
    private String destination;
    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response.
     * 
     */
    private String digestAlgorithm;
    /**
     * @return features enabled.
     * 
     */
    private List<String> features;
    /**
     * @return List of groups IDs assigned to the application.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments` */
    private List<String> groups;
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    private Boolean hideIos;
    /**
     * @return Do not display application icon to users
     * 
     */
    private Boolean hideWeb;
    /**
     * @return Prompt user to re-authenticate if SP asks for it.
     * 
     */
    private Boolean honorForceAuthn;
    /**
     * @return id of application.
     * 
     */
    private @Nullable String id;
    /**
     * @return SAML issuer ID.
     * 
     */
    private String idpIssuer;
    /**
     * @return Saml Inline Hook associated with the application.
     * 
     */
    private String inlineHookId;
    /**
     * @return Certificate key ID.
     * 
     */
    private String keyId;
    /**
     * @return label of application.
     * 
     */
    private @Nullable String label;
    private @Nullable String labelPrefix;
    /**
     * @return Generic JSON containing discoverable resources related to the app.
     * 
     */
    private String links;
    /**
     * @return name of application.
     * 
     */
    private String name;
    /**
     * @return The location where the app may present the SAML assertion.
     * 
     */
    private String recipient;
    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    private @Nullable Boolean requestCompressed;
    /**
     * @return Determines whether the SAML auth response message is digitally signed.
     * 
     */
    private Boolean responseSigned;
    /**
     * @return SAML Signed Request enabled
     * 
     */
    private Boolean samlSignedRequestEnabled;
    /**
     * @return Signature algorithm used ot digitally sign the assertion and response.
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * 
     */
    private String singleLogoutCertificate;
    /**
     * @return The issuer of the Service Provider that generates the Single Logout request.
     * 
     */
    private String singleLogoutIssuer;
    /**
     * @return The location where the logout response is sent.
     * 
     */
    private String singleLogoutUrl;
    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipGroups;
    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    private @Nullable Boolean skipUsers;
    /**
     * @return SAML service provider issuer.
     * 
     */
    private String spIssuer;
    /**
     * @return Single Sign-on Url.
     * 
     */
    private String ssoUrl;
    /**
     * @return status of application.
     * 
     */
    private String status;
    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    private String subjectNameIdFormat;
    /**
     * @return Template for app user&#39;s username when a user is assigned to the app.
     * 
     */
    private String subjectNameIdTemplate;
    /**
     * @return Username template.
     * 
     */
    private String userNameTemplate;
    /**
     * @return Push username on update.
     * 
     */
    private String userNameTemplatePushStatus;
    /**
     * @return Username template suffix.
     * 
     */
    private String userNameTemplateSuffix;
    /**
     * @return Username template type.
     * 
     */
    private String userNameTemplateType;
    /**
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments` */
    private List<String> users;

    private GetSamlResult() {}
    /**
     * @return Custom error page URL.
     * 
     */
    public String accessibilityErrorRedirectUrl() {
        return this.accessibilityErrorRedirectUrl;
    }
    /**
     * @return Custom login page URL.
     * 
     */
    public String accessibilityLoginRedirectUrl() {
        return this.accessibilityLoginRedirectUrl;
    }
    /**
     * @return Enable self-service.
     * 
     */
    public Boolean accessibilitySelfService() {
        return this.accessibilitySelfService;
    }
    /**
     * @return An array of ACS endpoints. You can configure a maximum of 100 endpoints.
     * 
     */
    public List<String> acsEndpoints() {
        return this.acsEndpoints;
    }
    public Optional<Boolean> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }
    /**
     * @return Application settings in JSON format.
     * 
     */
    public String appSettingsJson() {
        return this.appSettingsJson;
    }
    /**
     * @return Determines whether the SAML assertion is digitally signed.
     * 
     */
    public Boolean assertionSigned() {
        return this.assertionSigned;
    }
    /**
     * @return List of SAML Attribute statements.
     * 
     */
    public List<GetSamlAttributeStatement> attributeStatements() {
        return this.attributeStatements;
    }
    /**
     * @return Audience restriction.
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return Identifies the SAML authentication context class for the assertion’s authentication statement.
     * 
     */
    public String authnContextClassRef() {
        return this.authnContextClassRef;
    }
    /**
     * @return Display auto submit toolbar.
     * 
     */
    public Boolean autoSubmitToolbar() {
        return this.autoSubmitToolbar;
    }
    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    public String defaultRelayState() {
        return this.defaultRelayState;
    }
    /**
     * @return Identifies the location where the SAML response is intended to be sent inside the SAML assertion.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response.
     * 
     */
    public String digestAlgorithm() {
        return this.digestAlgorithm;
    }
    /**
     * @return features enabled.
     * 
     */
    public List<String> features() {
        return this.features;
    }
    /**
     * @return List of groups IDs assigned to the application.
     * 
     * @deprecated
     * The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments`
     * 
     */
    @Deprecated /* The `groups` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_group_assignments` */
    public List<String> groups() {
        return this.groups;
    }
    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    public Boolean hideIos() {
        return this.hideIos;
    }
    /**
     * @return Do not display application icon to users
     * 
     */
    public Boolean hideWeb() {
        return this.hideWeb;
    }
    /**
     * @return Prompt user to re-authenticate if SP asks for it.
     * 
     */
    public Boolean honorForceAuthn() {
        return this.honorForceAuthn;
    }
    /**
     * @return id of application.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return SAML issuer ID.
     * 
     */
    public String idpIssuer() {
        return this.idpIssuer;
    }
    /**
     * @return Saml Inline Hook associated with the application.
     * 
     */
    public String inlineHookId() {
        return this.inlineHookId;
    }
    /**
     * @return Certificate key ID.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return label of application.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    public Optional<String> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }
    /**
     * @return Generic JSON containing discoverable resources related to the app.
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return name of application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The location where the app may present the SAML assertion.
     * 
     */
    public String recipient() {
        return this.recipient;
    }
    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Optional<Boolean> requestCompressed() {
        return Optional.ofNullable(this.requestCompressed);
    }
    /**
     * @return Determines whether the SAML auth response message is digitally signed.
     * 
     */
    public Boolean responseSigned() {
        return this.responseSigned;
    }
    /**
     * @return SAML Signed Request enabled
     * 
     */
    public Boolean samlSignedRequestEnabled() {
        return this.samlSignedRequestEnabled;
    }
    /**
     * @return Signature algorithm used ot digitally sign the assertion and response.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests.
     * 
     */
    public String singleLogoutCertificate() {
        return this.singleLogoutCertificate;
    }
    /**
     * @return The issuer of the Service Provider that generates the Single Logout request.
     * 
     */
    public String singleLogoutIssuer() {
        return this.singleLogoutIssuer;
    }
    /**
     * @return The location where the logout response is sent.
     * 
     */
    public String singleLogoutUrl() {
        return this.singleLogoutUrl;
    }
    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }
    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    public Optional<Boolean> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }
    /**
     * @return SAML service provider issuer.
     * 
     */
    public String spIssuer() {
        return this.spIssuer;
    }
    /**
     * @return Single Sign-on Url.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return status of application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    public String subjectNameIdFormat() {
        return this.subjectNameIdFormat;
    }
    /**
     * @return Template for app user&#39;s username when a user is assigned to the app.
     * 
     */
    public String subjectNameIdTemplate() {
        return this.subjectNameIdTemplate;
    }
    /**
     * @return Username template.
     * 
     */
    public String userNameTemplate() {
        return this.userNameTemplate;
    }
    /**
     * @return Push username on update.
     * 
     */
    public String userNameTemplatePushStatus() {
        return this.userNameTemplatePushStatus;
    }
    /**
     * @return Username template suffix.
     * 
     */
    public String userNameTemplateSuffix() {
        return this.userNameTemplateSuffix;
    }
    /**
     * @return Username template type.
     * 
     */
    public String userNameTemplateType() {
        return this.userNameTemplateType;
    }
    /**
     * @deprecated
     * The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments`
     * 
     */
    @Deprecated /* The `users` field is now deprecated for the data source `okta_app_saml`, please replace all uses of this with: `okta_app_user_assignments` */
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSamlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessibilityErrorRedirectUrl;
        private String accessibilityLoginRedirectUrl;
        private Boolean accessibilitySelfService;
        private List<String> acsEndpoints;
        private @Nullable Boolean activeOnly;
        private String appSettingsJson;
        private Boolean assertionSigned;
        private List<GetSamlAttributeStatement> attributeStatements;
        private String audience;
        private String authnContextClassRef;
        private Boolean autoSubmitToolbar;
        private String defaultRelayState;
        private String destination;
        private String digestAlgorithm;
        private List<String> features;
        private List<String> groups;
        private Boolean hideIos;
        private Boolean hideWeb;
        private Boolean honorForceAuthn;
        private @Nullable String id;
        private String idpIssuer;
        private String inlineHookId;
        private String keyId;
        private @Nullable String label;
        private @Nullable String labelPrefix;
        private String links;
        private String name;
        private String recipient;
        private @Nullable Boolean requestCompressed;
        private Boolean responseSigned;
        private Boolean samlSignedRequestEnabled;
        private String signatureAlgorithm;
        private String singleLogoutCertificate;
        private String singleLogoutIssuer;
        private String singleLogoutUrl;
        private @Nullable Boolean skipGroups;
        private @Nullable Boolean skipUsers;
        private String spIssuer;
        private String ssoUrl;
        private String status;
        private String subjectNameIdFormat;
        private String subjectNameIdTemplate;
        private String userNameTemplate;
        private String userNameTemplatePushStatus;
        private String userNameTemplateSuffix;
        private String userNameTemplateType;
        private List<String> users;
        public Builder() {}
        public Builder(GetSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessibilityErrorRedirectUrl = defaults.accessibilityErrorRedirectUrl;
    	      this.accessibilityLoginRedirectUrl = defaults.accessibilityLoginRedirectUrl;
    	      this.accessibilitySelfService = defaults.accessibilitySelfService;
    	      this.acsEndpoints = defaults.acsEndpoints;
    	      this.activeOnly = defaults.activeOnly;
    	      this.appSettingsJson = defaults.appSettingsJson;
    	      this.assertionSigned = defaults.assertionSigned;
    	      this.attributeStatements = defaults.attributeStatements;
    	      this.audience = defaults.audience;
    	      this.authnContextClassRef = defaults.authnContextClassRef;
    	      this.autoSubmitToolbar = defaults.autoSubmitToolbar;
    	      this.defaultRelayState = defaults.defaultRelayState;
    	      this.destination = defaults.destination;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.features = defaults.features;
    	      this.groups = defaults.groups;
    	      this.hideIos = defaults.hideIos;
    	      this.hideWeb = defaults.hideWeb;
    	      this.honorForceAuthn = defaults.honorForceAuthn;
    	      this.id = defaults.id;
    	      this.idpIssuer = defaults.idpIssuer;
    	      this.inlineHookId = defaults.inlineHookId;
    	      this.keyId = defaults.keyId;
    	      this.label = defaults.label;
    	      this.labelPrefix = defaults.labelPrefix;
    	      this.links = defaults.links;
    	      this.name = defaults.name;
    	      this.recipient = defaults.recipient;
    	      this.requestCompressed = defaults.requestCompressed;
    	      this.responseSigned = defaults.responseSigned;
    	      this.samlSignedRequestEnabled = defaults.samlSignedRequestEnabled;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.singleLogoutCertificate = defaults.singleLogoutCertificate;
    	      this.singleLogoutIssuer = defaults.singleLogoutIssuer;
    	      this.singleLogoutUrl = defaults.singleLogoutUrl;
    	      this.skipGroups = defaults.skipGroups;
    	      this.skipUsers = defaults.skipUsers;
    	      this.spIssuer = defaults.spIssuer;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.status = defaults.status;
    	      this.subjectNameIdFormat = defaults.subjectNameIdFormat;
    	      this.subjectNameIdTemplate = defaults.subjectNameIdTemplate;
    	      this.userNameTemplate = defaults.userNameTemplate;
    	      this.userNameTemplatePushStatus = defaults.userNameTemplatePushStatus;
    	      this.userNameTemplateSuffix = defaults.userNameTemplateSuffix;
    	      this.userNameTemplateType = defaults.userNameTemplateType;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            this.accessibilityErrorRedirectUrl = Objects.requireNonNull(accessibilityErrorRedirectUrl);
            return this;
        }
        @CustomType.Setter
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            this.accessibilityLoginRedirectUrl = Objects.requireNonNull(accessibilityLoginRedirectUrl);
            return this;
        }
        @CustomType.Setter
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            this.accessibilitySelfService = Objects.requireNonNull(accessibilitySelfService);
            return this;
        }
        @CustomType.Setter
        public Builder acsEndpoints(List<String> acsEndpoints) {
            this.acsEndpoints = Objects.requireNonNull(acsEndpoints);
            return this;
        }
        public Builder acsEndpoints(String... acsEndpoints) {
            return acsEndpoints(List.of(acsEndpoints));
        }
        @CustomType.Setter
        public Builder activeOnly(@Nullable Boolean activeOnly) {
            this.activeOnly = activeOnly;
            return this;
        }
        @CustomType.Setter
        public Builder appSettingsJson(String appSettingsJson) {
            this.appSettingsJson = Objects.requireNonNull(appSettingsJson);
            return this;
        }
        @CustomType.Setter
        public Builder assertionSigned(Boolean assertionSigned) {
            this.assertionSigned = Objects.requireNonNull(assertionSigned);
            return this;
        }
        @CustomType.Setter
        public Builder attributeStatements(List<GetSamlAttributeStatement> attributeStatements) {
            this.attributeStatements = Objects.requireNonNull(attributeStatements);
            return this;
        }
        public Builder attributeStatements(GetSamlAttributeStatement... attributeStatements) {
            return attributeStatements(List.of(attributeStatements));
        }
        @CustomType.Setter
        public Builder audience(String audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }
        @CustomType.Setter
        public Builder authnContextClassRef(String authnContextClassRef) {
            this.authnContextClassRef = Objects.requireNonNull(authnContextClassRef);
            return this;
        }
        @CustomType.Setter
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            this.autoSubmitToolbar = Objects.requireNonNull(autoSubmitToolbar);
            return this;
        }
        @CustomType.Setter
        public Builder defaultRelayState(String defaultRelayState) {
            this.defaultRelayState = Objects.requireNonNull(defaultRelayState);
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        @CustomType.Setter
        public Builder digestAlgorithm(String digestAlgorithm) {
            this.digestAlgorithm = Objects.requireNonNull(digestAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder features(List<String> features) {
            this.features = Objects.requireNonNull(features);
            return this;
        }
        public Builder features(String... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder groups(List<String> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder hideIos(Boolean hideIos) {
            this.hideIos = Objects.requireNonNull(hideIos);
            return this;
        }
        @CustomType.Setter
        public Builder hideWeb(Boolean hideWeb) {
            this.hideWeb = Objects.requireNonNull(hideWeb);
            return this;
        }
        @CustomType.Setter
        public Builder honorForceAuthn(Boolean honorForceAuthn) {
            this.honorForceAuthn = Objects.requireNonNull(honorForceAuthn);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idpIssuer(String idpIssuer) {
            this.idpIssuer = Objects.requireNonNull(idpIssuer);
            return this;
        }
        @CustomType.Setter
        public Builder inlineHookId(String inlineHookId) {
            this.inlineHookId = Objects.requireNonNull(inlineHookId);
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder labelPrefix(@Nullable String labelPrefix) {
            this.labelPrefix = labelPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder links(String links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder recipient(String recipient) {
            this.recipient = Objects.requireNonNull(recipient);
            return this;
        }
        @CustomType.Setter
        public Builder requestCompressed(@Nullable Boolean requestCompressed) {
            this.requestCompressed = requestCompressed;
            return this;
        }
        @CustomType.Setter
        public Builder responseSigned(Boolean responseSigned) {
            this.responseSigned = Objects.requireNonNull(responseSigned);
            return this;
        }
        @CustomType.Setter
        public Builder samlSignedRequestEnabled(Boolean samlSignedRequestEnabled) {
            this.samlSignedRequestEnabled = Objects.requireNonNull(samlSignedRequestEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder singleLogoutCertificate(String singleLogoutCertificate) {
            this.singleLogoutCertificate = Objects.requireNonNull(singleLogoutCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder singleLogoutIssuer(String singleLogoutIssuer) {
            this.singleLogoutIssuer = Objects.requireNonNull(singleLogoutIssuer);
            return this;
        }
        @CustomType.Setter
        public Builder singleLogoutUrl(String singleLogoutUrl) {
            this.singleLogoutUrl = Objects.requireNonNull(singleLogoutUrl);
            return this;
        }
        @CustomType.Setter
        public Builder skipGroups(@Nullable Boolean skipGroups) {
            this.skipGroups = skipGroups;
            return this;
        }
        @CustomType.Setter
        public Builder skipUsers(@Nullable Boolean skipUsers) {
            this.skipUsers = skipUsers;
            return this;
        }
        @CustomType.Setter
        public Builder spIssuer(String spIssuer) {
            this.spIssuer = Objects.requireNonNull(spIssuer);
            return this;
        }
        @CustomType.Setter
        public Builder ssoUrl(String ssoUrl) {
            this.ssoUrl = Objects.requireNonNull(ssoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subjectNameIdFormat(String subjectNameIdFormat) {
            this.subjectNameIdFormat = Objects.requireNonNull(subjectNameIdFormat);
            return this;
        }
        @CustomType.Setter
        public Builder subjectNameIdTemplate(String subjectNameIdTemplate) {
            this.subjectNameIdTemplate = Objects.requireNonNull(subjectNameIdTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder userNameTemplate(String userNameTemplate) {
            this.userNameTemplate = Objects.requireNonNull(userNameTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder userNameTemplatePushStatus(String userNameTemplatePushStatus) {
            this.userNameTemplatePushStatus = Objects.requireNonNull(userNameTemplatePushStatus);
            return this;
        }
        @CustomType.Setter
        public Builder userNameTemplateSuffix(String userNameTemplateSuffix) {
            this.userNameTemplateSuffix = Objects.requireNonNull(userNameTemplateSuffix);
            return this;
        }
        @CustomType.Setter
        public Builder userNameTemplateType(String userNameTemplateType) {
            this.userNameTemplateType = Objects.requireNonNull(userNameTemplateType);
            return this;
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public GetSamlResult build() {
            final var o = new GetSamlResult();
            o.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            o.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            o.accessibilitySelfService = accessibilitySelfService;
            o.acsEndpoints = acsEndpoints;
            o.activeOnly = activeOnly;
            o.appSettingsJson = appSettingsJson;
            o.assertionSigned = assertionSigned;
            o.attributeStatements = attributeStatements;
            o.audience = audience;
            o.authnContextClassRef = authnContextClassRef;
            o.autoSubmitToolbar = autoSubmitToolbar;
            o.defaultRelayState = defaultRelayState;
            o.destination = destination;
            o.digestAlgorithm = digestAlgorithm;
            o.features = features;
            o.groups = groups;
            o.hideIos = hideIos;
            o.hideWeb = hideWeb;
            o.honorForceAuthn = honorForceAuthn;
            o.id = id;
            o.idpIssuer = idpIssuer;
            o.inlineHookId = inlineHookId;
            o.keyId = keyId;
            o.label = label;
            o.labelPrefix = labelPrefix;
            o.links = links;
            o.name = name;
            o.recipient = recipient;
            o.requestCompressed = requestCompressed;
            o.responseSigned = responseSigned;
            o.samlSignedRequestEnabled = samlSignedRequestEnabled;
            o.signatureAlgorithm = signatureAlgorithm;
            o.singleLogoutCertificate = singleLogoutCertificate;
            o.singleLogoutIssuer = singleLogoutIssuer;
            o.singleLogoutUrl = singleLogoutUrl;
            o.skipGroups = skipGroups;
            o.skipUsers = skipUsers;
            o.spIssuer = spIssuer;
            o.ssoUrl = ssoUrl;
            o.status = status;
            o.subjectNameIdFormat = subjectNameIdFormat;
            o.subjectNameIdTemplate = subjectNameIdTemplate;
            o.userNameTemplate = userNameTemplate;
            o.userNameTemplatePushStatus = userNameTemplatePushStatus;
            o.userNameTemplateSuffix = userNameTemplateSuffix;
            o.userNameTemplateType = userNameTemplateType;
            o.users = users;
            return o;
        }
    }
}
