// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.deprecated;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.deprecated.inputs.SamlAppAttributeStatementArgs;
import com.pulumi.okta.deprecated.inputs.SamlAppUserArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlAppArgs Empty = new SamlAppArgs();

    /**
     * Custom error page URL
     * 
     */
    @Import(name="accessibilityErrorRedirectUrl")
    private @Nullable Output<String> accessibilityErrorRedirectUrl;

    /**
     * @return Custom error page URL
     * 
     */
    public Optional<Output<String>> accessibilityErrorRedirectUrl() {
        return Optional.ofNullable(this.accessibilityErrorRedirectUrl);
    }

    /**
     * Custom login page URL
     * 
     */
    @Import(name="accessibilityLoginRedirectUrl")
    private @Nullable Output<String> accessibilityLoginRedirectUrl;

    /**
     * @return Custom login page URL
     * 
     */
    public Optional<Output<String>> accessibilityLoginRedirectUrl() {
        return Optional.ofNullable(this.accessibilityLoginRedirectUrl);
    }

    /**
     * Enable self service
     * 
     */
    @Import(name="accessibilitySelfService")
    private @Nullable Output<Boolean> accessibilitySelfService;

    /**
     * @return Enable self service
     * 
     */
    public Optional<Output<Boolean>> accessibilitySelfService() {
        return Optional.ofNullable(this.accessibilitySelfService);
    }

    /**
     * List of ACS endpoints for this SAML application
     * 
     */
    @Import(name="acsEndpoints")
    private @Nullable Output<List<String>> acsEndpoints;

    /**
     * @return List of ACS endpoints for this SAML application
     * 
     */
    public Optional<Output<List<String>>> acsEndpoints() {
        return Optional.ofNullable(this.acsEndpoints);
    }

    /**
     * Application notes for admins.
     * 
     */
    @Import(name="adminNote")
    private @Nullable Output<String> adminNote;

    /**
     * @return Application notes for admins.
     * 
     */
    public Optional<Output<String>> adminNote() {
        return Optional.ofNullable(this.adminNote);
    }

    /**
     * Displays specific appLinks for the app
     * 
     */
    @Import(name="appLinksJson")
    private @Nullable Output<String> appLinksJson;

    /**
     * @return Displays specific appLinks for the app
     * 
     */
    public Optional<Output<String>> appLinksJson() {
        return Optional.ofNullable(this.appLinksJson);
    }

    /**
     * Application settings in JSON format
     * 
     */
    @Import(name="appSettingsJson")
    private @Nullable Output<String> appSettingsJson;

    /**
     * @return Application settings in JSON format
     * 
     */
    public Optional<Output<String>> appSettingsJson() {
        return Optional.ofNullable(this.appSettingsJson);
    }

    /**
     * Determines whether the SAML assertion is digitally signed
     * 
     */
    @Import(name="assertionSigned")
    private @Nullable Output<Boolean> assertionSigned;

    /**
     * @return Determines whether the SAML assertion is digitally signed
     * 
     */
    public Optional<Output<Boolean>> assertionSigned() {
        return Optional.ofNullable(this.assertionSigned);
    }

    @Import(name="attributeStatements")
    private @Nullable Output<List<SamlAppAttributeStatementArgs>> attributeStatements;

    public Optional<Output<List<SamlAppAttributeStatementArgs>>> attributeStatements() {
        return Optional.ofNullable(this.attributeStatements);
    }

    /**
     * Audience Restriction
     * 
     */
    @Import(name="audience")
    private @Nullable Output<String> audience;

    /**
     * @return Audience Restriction
     * 
     */
    public Optional<Output<String>> audience() {
        return Optional.ofNullable(this.audience);
    }

    /**
     * Id of this apps authentication policy
     * 
     */
    @Import(name="authenticationPolicy")
    private @Nullable Output<String> authenticationPolicy;

    /**
     * @return Id of this apps authentication policy
     * 
     */
    public Optional<Output<String>> authenticationPolicy() {
        return Optional.ofNullable(this.authenticationPolicy);
    }

    /**
     * Identifies the SAML authentication context class for the assertion’s authentication statement
     * 
     */
    @Import(name="authnContextClassRef")
    private @Nullable Output<String> authnContextClassRef;

    /**
     * @return Identifies the SAML authentication context class for the assertion’s authentication statement
     * 
     */
    public Optional<Output<String>> authnContextClassRef() {
        return Optional.ofNullable(this.authnContextClassRef);
    }

    /**
     * Display auto submit toolbar
     * 
     */
    @Import(name="autoSubmitToolbar")
    private @Nullable Output<Boolean> autoSubmitToolbar;

    /**
     * @return Display auto submit toolbar
     * 
     */
    public Optional<Output<Boolean>> autoSubmitToolbar() {
        return Optional.ofNullable(this.autoSubmitToolbar);
    }

    /**
     * Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    @Import(name="defaultRelayState")
    private @Nullable Output<String> defaultRelayState;

    /**
     * @return Identifies a specific application resource in an IDP initiated SSO scenario.
     * 
     */
    public Optional<Output<String>> defaultRelayState() {
        return Optional.ofNullable(this.defaultRelayState);
    }

    /**
     * Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Determines the digest algorithm used to digitally sign the SAML assertion and response
     * 
     */
    @Import(name="digestAlgorithm")
    private @Nullable Output<String> digestAlgorithm;

    /**
     * @return Determines the digest algorithm used to digitally sign the SAML assertion and response
     * 
     */
    public Optional<Output<String>> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }

    /**
     * Application notes for end users.
     * 
     */
    @Import(name="enduserNote")
    private @Nullable Output<String> enduserNote;

    /**
     * @return Application notes for end users.
     * 
     */
    public Optional<Output<String>> enduserNote() {
        return Optional.ofNullable(this.enduserNote);
    }

    /**
     * Groups associated with the application
     * 
     * @deprecated
     * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    /**
     * @return Groups associated with the application
     * 
     * @deprecated
     * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Do not display application icon on mobile app
     * 
     */
    @Import(name="hideIos")
    private @Nullable Output<Boolean> hideIos;

    /**
     * @return Do not display application icon on mobile app
     * 
     */
    public Optional<Output<Boolean>> hideIos() {
        return Optional.ofNullable(this.hideIos);
    }

    /**
     * Do not display application icon to users
     * 
     */
    @Import(name="hideWeb")
    private @Nullable Output<Boolean> hideWeb;

    /**
     * @return Do not display application icon to users
     * 
     */
    public Optional<Output<Boolean>> hideWeb() {
        return Optional.ofNullable(this.hideWeb);
    }

    /**
     * Prompt user to re-authenticate if SP asks for it
     * 
     */
    @Import(name="honorForceAuthn")
    private @Nullable Output<Boolean> honorForceAuthn;

    /**
     * @return Prompt user to re-authenticate if SP asks for it
     * 
     */
    public Optional<Output<Boolean>> honorForceAuthn() {
        return Optional.ofNullable(this.honorForceAuthn);
    }

    /**
     * SAML issuer ID
     * 
     */
    @Import(name="idpIssuer")
    private @Nullable Output<String> idpIssuer;

    /**
     * @return SAML issuer ID
     * 
     */
    public Optional<Output<String>> idpIssuer() {
        return Optional.ofNullable(this.idpIssuer);
    }

    /**
     * *Early Access Property*. Enable Federation Broker Mode.
     * 
     */
    @Import(name="implicitAssignment")
    private @Nullable Output<Boolean> implicitAssignment;

    /**
     * @return *Early Access Property*. Enable Federation Broker Mode.
     * 
     */
    public Optional<Output<Boolean>> implicitAssignment() {
        return Optional.ofNullable(this.implicitAssignment);
    }

    /**
     * Saml Inline Hook setting
     * 
     */
    @Import(name="inlineHookId")
    private @Nullable Output<String> inlineHookId;

    /**
     * @return Saml Inline Hook setting
     * 
     */
    public Optional<Output<String>> inlineHookId() {
        return Optional.ofNullable(this.inlineHookId);
    }

    /**
     * Certificate name. This modulates the rotation of keys. New name == new key.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return Certificate name. This modulates the rotation of keys. New name == new key.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * Number of years the certificate is valid.
     * 
     */
    @Import(name="keyYearsValid")
    private @Nullable Output<Integer> keyYearsValid;

    /**
     * @return Number of years the certificate is valid.
     * 
     */
    public Optional<Output<Integer>> keyYearsValid() {
        return Optional.ofNullable(this.keyYearsValid);
    }

    /**
     * Pretty name of app.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Pretty name of app.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Local path to logo of the application.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Local path to logo of the application.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Name of preexisting SAML application. For instance &#39;slack&#39;
     * 
     */
    @Import(name="preconfiguredApp")
    private @Nullable Output<String> preconfiguredApp;

    /**
     * @return Name of preexisting SAML application. For instance &#39;slack&#39;
     * 
     */
    public Optional<Output<String>> preconfiguredApp() {
        return Optional.ofNullable(this.preconfiguredApp);
    }

    /**
     * The location where the app may present the SAML assertion
     * 
     */
    @Import(name="recipient")
    private @Nullable Output<String> recipient;

    /**
     * @return The location where the app may present the SAML assertion
     * 
     */
    public Optional<Output<String>> recipient() {
        return Optional.ofNullable(this.recipient);
    }

    /**
     * Denotes whether the request is compressed or not.
     * 
     */
    @Import(name="requestCompressed")
    private @Nullable Output<Boolean> requestCompressed;

    /**
     * @return Denotes whether the request is compressed or not.
     * 
     */
    public Optional<Output<Boolean>> requestCompressed() {
        return Optional.ofNullable(this.requestCompressed);
    }

    /**
     * Determines whether the SAML auth response message is digitally signed
     * 
     */
    @Import(name="responseSigned")
    private @Nullable Output<Boolean> responseSigned;

    /**
     * @return Determines whether the SAML auth response message is digitally signed
     * 
     */
    public Optional<Output<Boolean>> responseSigned() {
        return Optional.ofNullable(this.responseSigned);
    }

    /**
     * SAML version for the app&#39;s sign-on mode
     * 
     */
    @Import(name="samlVersion")
    private @Nullable Output<String> samlVersion;

    /**
     * @return SAML version for the app&#39;s sign-on mode
     * 
     */
    public Optional<Output<String>> samlVersion() {
        return Optional.ofNullable(this.samlVersion);
    }

    /**
     * Signature algorithm used ot digitally sign the assertion and response
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return Signature algorithm used ot digitally sign the assertion and response
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * x509 encoded certificate that the Service Provider uses to sign Single Logout requests
     * 
     */
    @Import(name="singleLogoutCertificate")
    private @Nullable Output<String> singleLogoutCertificate;

    /**
     * @return x509 encoded certificate that the Service Provider uses to sign Single Logout requests
     * 
     */
    public Optional<Output<String>> singleLogoutCertificate() {
        return Optional.ofNullable(this.singleLogoutCertificate);
    }

    /**
     * The issuer of the Service Provider that generates the Single Logout request
     * 
     */
    @Import(name="singleLogoutIssuer")
    private @Nullable Output<String> singleLogoutIssuer;

    /**
     * @return The issuer of the Service Provider that generates the Single Logout request
     * 
     */
    public Optional<Output<String>> singleLogoutIssuer() {
        return Optional.ofNullable(this.singleLogoutIssuer);
    }

    /**
     * The location where the logout response is sent
     * 
     */
    @Import(name="singleLogoutUrl")
    private @Nullable Output<String> singleLogoutUrl;

    /**
     * @return The location where the logout response is sent
     * 
     */
    public Optional<Output<String>> singleLogoutUrl() {
        return Optional.ofNullable(this.singleLogoutUrl);
    }

    /**
     * Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     */
    @Import(name="skipGroups")
    private @Nullable Output<Boolean> skipGroups;

    /**
     * @return Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
     * 
     */
    public Optional<Output<Boolean>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     */
    @Import(name="skipUsers")
    private @Nullable Output<Boolean> skipUsers;

    /**
     * @return Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
     * 
     */
    public Optional<Output<Boolean>> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }

    /**
     * SAML SP issuer ID
     * 
     */
    @Import(name="spIssuer")
    private @Nullable Output<String> spIssuer;

    /**
     * @return SAML SP issuer ID
     * 
     */
    public Optional<Output<String>> spIssuer() {
        return Optional.ofNullable(this.spIssuer);
    }

    /**
     * Single Sign On URL
     * 
     */
    @Import(name="ssoUrl")
    private @Nullable Output<String> ssoUrl;

    /**
     * @return Single Sign On URL
     * 
     */
    public Optional<Output<String>> ssoUrl() {
        return Optional.ofNullable(this.ssoUrl);
    }

    /**
     * Status of application.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of application.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifies the SAML processing rules.
     * 
     */
    @Import(name="subjectNameIdFormat")
    private @Nullable Output<String> subjectNameIdFormat;

    /**
     * @return Identifies the SAML processing rules.
     * 
     */
    public Optional<Output<String>> subjectNameIdFormat() {
        return Optional.ofNullable(this.subjectNameIdFormat);
    }

    /**
     * Template for app user&#39;s username when a user is assigned to the app
     * 
     */
    @Import(name="subjectNameIdTemplate")
    private @Nullable Output<String> subjectNameIdTemplate;

    /**
     * @return Template for app user&#39;s username when a user is assigned to the app
     * 
     */
    public Optional<Output<String>> subjectNameIdTemplate() {
        return Optional.ofNullable(this.subjectNameIdTemplate);
    }

    /**
     * Username template
     * 
     */
    @Import(name="userNameTemplate")
    private @Nullable Output<String> userNameTemplate;

    /**
     * @return Username template
     * 
     */
    public Optional<Output<String>> userNameTemplate() {
        return Optional.ofNullable(this.userNameTemplate);
    }

    /**
     * Push username on update
     * 
     */
    @Import(name="userNameTemplatePushStatus")
    private @Nullable Output<String> userNameTemplatePushStatus;

    /**
     * @return Push username on update
     * 
     */
    public Optional<Output<String>> userNameTemplatePushStatus() {
        return Optional.ofNullable(this.userNameTemplatePushStatus);
    }

    /**
     * Username template suffix
     * 
     */
    @Import(name="userNameTemplateSuffix")
    private @Nullable Output<String> userNameTemplateSuffix;

    /**
     * @return Username template suffix
     * 
     */
    public Optional<Output<String>> userNameTemplateSuffix() {
        return Optional.ofNullable(this.userNameTemplateSuffix);
    }

    /**
     * Username template type
     * 
     */
    @Import(name="userNameTemplateType")
    private @Nullable Output<String> userNameTemplateType;

    /**
     * @return Username template type
     * 
     */
    public Optional<Output<String>> userNameTemplateType() {
        return Optional.ofNullable(this.userNameTemplateType);
    }

    /**
     * Users associated with the application
     * 
     * @deprecated
     * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
    @Import(name="users")
    private @Nullable Output<List<SamlAppUserArgs>> users;

    /**
     * @return Users associated with the application
     * 
     * @deprecated
     * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
    public Optional<Output<List<SamlAppUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    private SamlAppArgs() {}

    private SamlAppArgs(SamlAppArgs $) {
        this.accessibilityErrorRedirectUrl = $.accessibilityErrorRedirectUrl;
        this.accessibilityLoginRedirectUrl = $.accessibilityLoginRedirectUrl;
        this.accessibilitySelfService = $.accessibilitySelfService;
        this.acsEndpoints = $.acsEndpoints;
        this.adminNote = $.adminNote;
        this.appLinksJson = $.appLinksJson;
        this.appSettingsJson = $.appSettingsJson;
        this.assertionSigned = $.assertionSigned;
        this.attributeStatements = $.attributeStatements;
        this.audience = $.audience;
        this.authenticationPolicy = $.authenticationPolicy;
        this.authnContextClassRef = $.authnContextClassRef;
        this.autoSubmitToolbar = $.autoSubmitToolbar;
        this.defaultRelayState = $.defaultRelayState;
        this.destination = $.destination;
        this.digestAlgorithm = $.digestAlgorithm;
        this.enduserNote = $.enduserNote;
        this.groups = $.groups;
        this.hideIos = $.hideIos;
        this.hideWeb = $.hideWeb;
        this.honorForceAuthn = $.honorForceAuthn;
        this.idpIssuer = $.idpIssuer;
        this.implicitAssignment = $.implicitAssignment;
        this.inlineHookId = $.inlineHookId;
        this.keyName = $.keyName;
        this.keyYearsValid = $.keyYearsValid;
        this.label = $.label;
        this.logo = $.logo;
        this.preconfiguredApp = $.preconfiguredApp;
        this.recipient = $.recipient;
        this.requestCompressed = $.requestCompressed;
        this.responseSigned = $.responseSigned;
        this.samlVersion = $.samlVersion;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.singleLogoutCertificate = $.singleLogoutCertificate;
        this.singleLogoutIssuer = $.singleLogoutIssuer;
        this.singleLogoutUrl = $.singleLogoutUrl;
        this.skipGroups = $.skipGroups;
        this.skipUsers = $.skipUsers;
        this.spIssuer = $.spIssuer;
        this.ssoUrl = $.ssoUrl;
        this.status = $.status;
        this.subjectNameIdFormat = $.subjectNameIdFormat;
        this.subjectNameIdTemplate = $.subjectNameIdTemplate;
        this.userNameTemplate = $.userNameTemplate;
        this.userNameTemplatePushStatus = $.userNameTemplatePushStatus;
        this.userNameTemplateSuffix = $.userNameTemplateSuffix;
        this.userNameTemplateType = $.userNameTemplateType;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlAppArgs $;

        public Builder() {
            $ = new SamlAppArgs();
        }

        public Builder(SamlAppArgs defaults) {
            $ = new SamlAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(@Nullable Output<String> accessibilityErrorRedirectUrl) {
            $.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            return accessibilityErrorRedirectUrl(Output.of(accessibilityErrorRedirectUrl));
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(@Nullable Output<String> accessibilityLoginRedirectUrl) {
            $.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page URL
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            return accessibilityLoginRedirectUrl(Output.of(accessibilityLoginRedirectUrl));
        }

        /**
         * @param accessibilitySelfService Enable self service
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(@Nullable Output<Boolean> accessibilitySelfService) {
            $.accessibilitySelfService = accessibilitySelfService;
            return this;
        }

        /**
         * @param accessibilitySelfService Enable self service
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            return accessibilitySelfService(Output.of(accessibilitySelfService));
        }

        /**
         * @param acsEndpoints List of ACS endpoints for this SAML application
         * 
         * @return builder
         * 
         */
        public Builder acsEndpoints(@Nullable Output<List<String>> acsEndpoints) {
            $.acsEndpoints = acsEndpoints;
            return this;
        }

        /**
         * @param acsEndpoints List of ACS endpoints for this SAML application
         * 
         * @return builder
         * 
         */
        public Builder acsEndpoints(List<String> acsEndpoints) {
            return acsEndpoints(Output.of(acsEndpoints));
        }

        /**
         * @param acsEndpoints List of ACS endpoints for this SAML application
         * 
         * @return builder
         * 
         */
        public Builder acsEndpoints(String... acsEndpoints) {
            return acsEndpoints(List.of(acsEndpoints));
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(@Nullable Output<String> adminNote) {
            $.adminNote = adminNote;
            return this;
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(String adminNote) {
            return adminNote(Output.of(adminNote));
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(@Nullable Output<String> appLinksJson) {
            $.appLinksJson = appLinksJson;
            return this;
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(String appLinksJson) {
            return appLinksJson(Output.of(appLinksJson));
        }

        /**
         * @param appSettingsJson Application settings in JSON format
         * 
         * @return builder
         * 
         */
        public Builder appSettingsJson(@Nullable Output<String> appSettingsJson) {
            $.appSettingsJson = appSettingsJson;
            return this;
        }

        /**
         * @param appSettingsJson Application settings in JSON format
         * 
         * @return builder
         * 
         */
        public Builder appSettingsJson(String appSettingsJson) {
            return appSettingsJson(Output.of(appSettingsJson));
        }

        /**
         * @param assertionSigned Determines whether the SAML assertion is digitally signed
         * 
         * @return builder
         * 
         */
        public Builder assertionSigned(@Nullable Output<Boolean> assertionSigned) {
            $.assertionSigned = assertionSigned;
            return this;
        }

        /**
         * @param assertionSigned Determines whether the SAML assertion is digitally signed
         * 
         * @return builder
         * 
         */
        public Builder assertionSigned(Boolean assertionSigned) {
            return assertionSigned(Output.of(assertionSigned));
        }

        public Builder attributeStatements(@Nullable Output<List<SamlAppAttributeStatementArgs>> attributeStatements) {
            $.attributeStatements = attributeStatements;
            return this;
        }

        public Builder attributeStatements(List<SamlAppAttributeStatementArgs> attributeStatements) {
            return attributeStatements(Output.of(attributeStatements));
        }

        public Builder attributeStatements(SamlAppAttributeStatementArgs... attributeStatements) {
            return attributeStatements(List.of(attributeStatements));
        }

        /**
         * @param audience Audience Restriction
         * 
         * @return builder
         * 
         */
        public Builder audience(@Nullable Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience Audience Restriction
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param authenticationPolicy Id of this apps authentication policy
         * 
         * @return builder
         * 
         */
        public Builder authenticationPolicy(@Nullable Output<String> authenticationPolicy) {
            $.authenticationPolicy = authenticationPolicy;
            return this;
        }

        /**
         * @param authenticationPolicy Id of this apps authentication policy
         * 
         * @return builder
         * 
         */
        public Builder authenticationPolicy(String authenticationPolicy) {
            return authenticationPolicy(Output.of(authenticationPolicy));
        }

        /**
         * @param authnContextClassRef Identifies the SAML authentication context class for the assertion’s authentication statement
         * 
         * @return builder
         * 
         */
        public Builder authnContextClassRef(@Nullable Output<String> authnContextClassRef) {
            $.authnContextClassRef = authnContextClassRef;
            return this;
        }

        /**
         * @param authnContextClassRef Identifies the SAML authentication context class for the assertion’s authentication statement
         * 
         * @return builder
         * 
         */
        public Builder authnContextClassRef(String authnContextClassRef) {
            return authnContextClassRef(Output.of(authnContextClassRef));
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(@Nullable Output<Boolean> autoSubmitToolbar) {
            $.autoSubmitToolbar = autoSubmitToolbar;
            return this;
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            return autoSubmitToolbar(Output.of(autoSubmitToolbar));
        }

        /**
         * @param defaultRelayState Identifies a specific application resource in an IDP initiated SSO scenario.
         * 
         * @return builder
         * 
         */
        public Builder defaultRelayState(@Nullable Output<String> defaultRelayState) {
            $.defaultRelayState = defaultRelayState;
            return this;
        }

        /**
         * @param defaultRelayState Identifies a specific application resource in an IDP initiated SSO scenario.
         * 
         * @return builder
         * 
         */
        public Builder defaultRelayState(String defaultRelayState) {
            return defaultRelayState(Output.of(defaultRelayState));
        }

        /**
         * @param destination Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param digestAlgorithm Determines the digest algorithm used to digitally sign the SAML assertion and response
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(@Nullable Output<String> digestAlgorithm) {
            $.digestAlgorithm = digestAlgorithm;
            return this;
        }

        /**
         * @param digestAlgorithm Determines the digest algorithm used to digitally sign the SAML assertion and response
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(String digestAlgorithm) {
            return digestAlgorithm(Output.of(digestAlgorithm));
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(@Nullable Output<String> enduserNote) {
            $.enduserNote = enduserNote;
            return this;
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(String enduserNote) {
            return enduserNote(Output.of(enduserNote));
        }

        /**
         * @param groups Groups associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups Groups associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups Groups associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(@Nullable Output<Boolean> hideIos) {
            $.hideIos = hideIos;
            return this;
        }

        /**
         * @param hideIos Do not display application icon on mobile app
         * 
         * @return builder
         * 
         */
        public Builder hideIos(Boolean hideIos) {
            return hideIos(Output.of(hideIos));
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(@Nullable Output<Boolean> hideWeb) {
            $.hideWeb = hideWeb;
            return this;
        }

        /**
         * @param hideWeb Do not display application icon to users
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(Boolean hideWeb) {
            return hideWeb(Output.of(hideWeb));
        }

        /**
         * @param honorForceAuthn Prompt user to re-authenticate if SP asks for it
         * 
         * @return builder
         * 
         */
        public Builder honorForceAuthn(@Nullable Output<Boolean> honorForceAuthn) {
            $.honorForceAuthn = honorForceAuthn;
            return this;
        }

        /**
         * @param honorForceAuthn Prompt user to re-authenticate if SP asks for it
         * 
         * @return builder
         * 
         */
        public Builder honorForceAuthn(Boolean honorForceAuthn) {
            return honorForceAuthn(Output.of(honorForceAuthn));
        }

        /**
         * @param idpIssuer SAML issuer ID
         * 
         * @return builder
         * 
         */
        public Builder idpIssuer(@Nullable Output<String> idpIssuer) {
            $.idpIssuer = idpIssuer;
            return this;
        }

        /**
         * @param idpIssuer SAML issuer ID
         * 
         * @return builder
         * 
         */
        public Builder idpIssuer(String idpIssuer) {
            return idpIssuer(Output.of(idpIssuer));
        }

        /**
         * @param implicitAssignment *Early Access Property*. Enable Federation Broker Mode.
         * 
         * @return builder
         * 
         */
        public Builder implicitAssignment(@Nullable Output<Boolean> implicitAssignment) {
            $.implicitAssignment = implicitAssignment;
            return this;
        }

        /**
         * @param implicitAssignment *Early Access Property*. Enable Federation Broker Mode.
         * 
         * @return builder
         * 
         */
        public Builder implicitAssignment(Boolean implicitAssignment) {
            return implicitAssignment(Output.of(implicitAssignment));
        }

        /**
         * @param inlineHookId Saml Inline Hook setting
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(@Nullable Output<String> inlineHookId) {
            $.inlineHookId = inlineHookId;
            return this;
        }

        /**
         * @param inlineHookId Saml Inline Hook setting
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(String inlineHookId) {
            return inlineHookId(Output.of(inlineHookId));
        }

        /**
         * @param keyName Certificate name. This modulates the rotation of keys. New name == new key.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName Certificate name. This modulates the rotation of keys. New name == new key.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyYearsValid Number of years the certificate is valid.
         * 
         * @return builder
         * 
         */
        public Builder keyYearsValid(@Nullable Output<Integer> keyYearsValid) {
            $.keyYearsValid = keyYearsValid;
            return this;
        }

        /**
         * @param keyYearsValid Number of years the certificate is valid.
         * 
         * @return builder
         * 
         */
        public Builder keyYearsValid(Integer keyYearsValid) {
            return keyYearsValid(Output.of(keyYearsValid));
        }

        /**
         * @param label Pretty name of app.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Pretty name of app.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param logo Local path to logo of the application.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Local path to logo of the application.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param preconfiguredApp Name of preexisting SAML application. For instance &#39;slack&#39;
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(@Nullable Output<String> preconfiguredApp) {
            $.preconfiguredApp = preconfiguredApp;
            return this;
        }

        /**
         * @param preconfiguredApp Name of preexisting SAML application. For instance &#39;slack&#39;
         * 
         * @return builder
         * 
         */
        public Builder preconfiguredApp(String preconfiguredApp) {
            return preconfiguredApp(Output.of(preconfiguredApp));
        }

        /**
         * @param recipient The location where the app may present the SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder recipient(@Nullable Output<String> recipient) {
            $.recipient = recipient;
            return this;
        }

        /**
         * @param recipient The location where the app may present the SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder recipient(String recipient) {
            return recipient(Output.of(recipient));
        }

        /**
         * @param requestCompressed Denotes whether the request is compressed or not.
         * 
         * @return builder
         * 
         */
        public Builder requestCompressed(@Nullable Output<Boolean> requestCompressed) {
            $.requestCompressed = requestCompressed;
            return this;
        }

        /**
         * @param requestCompressed Denotes whether the request is compressed or not.
         * 
         * @return builder
         * 
         */
        public Builder requestCompressed(Boolean requestCompressed) {
            return requestCompressed(Output.of(requestCompressed));
        }

        /**
         * @param responseSigned Determines whether the SAML auth response message is digitally signed
         * 
         * @return builder
         * 
         */
        public Builder responseSigned(@Nullable Output<Boolean> responseSigned) {
            $.responseSigned = responseSigned;
            return this;
        }

        /**
         * @param responseSigned Determines whether the SAML auth response message is digitally signed
         * 
         * @return builder
         * 
         */
        public Builder responseSigned(Boolean responseSigned) {
            return responseSigned(Output.of(responseSigned));
        }

        /**
         * @param samlVersion SAML version for the app&#39;s sign-on mode
         * 
         * @return builder
         * 
         */
        public Builder samlVersion(@Nullable Output<String> samlVersion) {
            $.samlVersion = samlVersion;
            return this;
        }

        /**
         * @param samlVersion SAML version for the app&#39;s sign-on mode
         * 
         * @return builder
         * 
         */
        public Builder samlVersion(String samlVersion) {
            return samlVersion(Output.of(samlVersion));
        }

        /**
         * @param signatureAlgorithm Signature algorithm used ot digitally sign the assertion and response
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm Signature algorithm used ot digitally sign the assertion and response
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param singleLogoutCertificate x509 encoded certificate that the Service Provider uses to sign Single Logout requests
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutCertificate(@Nullable Output<String> singleLogoutCertificate) {
            $.singleLogoutCertificate = singleLogoutCertificate;
            return this;
        }

        /**
         * @param singleLogoutCertificate x509 encoded certificate that the Service Provider uses to sign Single Logout requests
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutCertificate(String singleLogoutCertificate) {
            return singleLogoutCertificate(Output.of(singleLogoutCertificate));
        }

        /**
         * @param singleLogoutIssuer The issuer of the Service Provider that generates the Single Logout request
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutIssuer(@Nullable Output<String> singleLogoutIssuer) {
            $.singleLogoutIssuer = singleLogoutIssuer;
            return this;
        }

        /**
         * @param singleLogoutIssuer The issuer of the Service Provider that generates the Single Logout request
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutIssuer(String singleLogoutIssuer) {
            return singleLogoutIssuer(Output.of(singleLogoutIssuer));
        }

        /**
         * @param singleLogoutUrl The location where the logout response is sent
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutUrl(@Nullable Output<String> singleLogoutUrl) {
            $.singleLogoutUrl = singleLogoutUrl;
            return this;
        }

        /**
         * @param singleLogoutUrl The location where the logout response is sent
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutUrl(String singleLogoutUrl) {
            return singleLogoutUrl(Output.of(singleLogoutUrl));
        }

        /**
         * @param skipGroups Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(@Nullable Output<Boolean> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipGroups Ignore groups sync. This is a temporary solution until &#39;groups&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(Boolean skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @param skipUsers Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(@Nullable Output<Boolean> skipUsers) {
            $.skipUsers = skipUsers;
            return this;
        }

        /**
         * @param skipUsers Ignore users sync. This is a temporary solution until &#39;users&#39; field is supported in all the app-like resources
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(Boolean skipUsers) {
            return skipUsers(Output.of(skipUsers));
        }

        /**
         * @param spIssuer SAML SP issuer ID
         * 
         * @return builder
         * 
         */
        public Builder spIssuer(@Nullable Output<String> spIssuer) {
            $.spIssuer = spIssuer;
            return this;
        }

        /**
         * @param spIssuer SAML SP issuer ID
         * 
         * @return builder
         * 
         */
        public Builder spIssuer(String spIssuer) {
            return spIssuer(Output.of(spIssuer));
        }

        /**
         * @param ssoUrl Single Sign On URL
         * 
         * @return builder
         * 
         */
        public Builder ssoUrl(@Nullable Output<String> ssoUrl) {
            $.ssoUrl = ssoUrl;
            return this;
        }

        /**
         * @param ssoUrl Single Sign On URL
         * 
         * @return builder
         * 
         */
        public Builder ssoUrl(String ssoUrl) {
            return ssoUrl(Output.of(ssoUrl));
        }

        /**
         * @param status Status of application.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of application.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subjectNameIdFormat Identifies the SAML processing rules.
         * 
         * @return builder
         * 
         */
        public Builder subjectNameIdFormat(@Nullable Output<String> subjectNameIdFormat) {
            $.subjectNameIdFormat = subjectNameIdFormat;
            return this;
        }

        /**
         * @param subjectNameIdFormat Identifies the SAML processing rules.
         * 
         * @return builder
         * 
         */
        public Builder subjectNameIdFormat(String subjectNameIdFormat) {
            return subjectNameIdFormat(Output.of(subjectNameIdFormat));
        }

        /**
         * @param subjectNameIdTemplate Template for app user&#39;s username when a user is assigned to the app
         * 
         * @return builder
         * 
         */
        public Builder subjectNameIdTemplate(@Nullable Output<String> subjectNameIdTemplate) {
            $.subjectNameIdTemplate = subjectNameIdTemplate;
            return this;
        }

        /**
         * @param subjectNameIdTemplate Template for app user&#39;s username when a user is assigned to the app
         * 
         * @return builder
         * 
         */
        public Builder subjectNameIdTemplate(String subjectNameIdTemplate) {
            return subjectNameIdTemplate(Output.of(subjectNameIdTemplate));
        }

        /**
         * @param userNameTemplate Username template
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(@Nullable Output<String> userNameTemplate) {
            $.userNameTemplate = userNameTemplate;
            return this;
        }

        /**
         * @param userNameTemplate Username template
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplate(String userNameTemplate) {
            return userNameTemplate(Output.of(userNameTemplate));
        }

        /**
         * @param userNameTemplatePushStatus Push username on update
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(@Nullable Output<String> userNameTemplatePushStatus) {
            $.userNameTemplatePushStatus = userNameTemplatePushStatus;
            return this;
        }

        /**
         * @param userNameTemplatePushStatus Push username on update
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplatePushStatus(String userNameTemplatePushStatus) {
            return userNameTemplatePushStatus(Output.of(userNameTemplatePushStatus));
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(@Nullable Output<String> userNameTemplateSuffix) {
            $.userNameTemplateSuffix = userNameTemplateSuffix;
            return this;
        }

        /**
         * @param userNameTemplateSuffix Username template suffix
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateSuffix(String userNameTemplateSuffix) {
            return userNameTemplateSuffix(Output.of(userNameTemplateSuffix));
        }

        /**
         * @param userNameTemplateType Username template type
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(@Nullable Output<String> userNameTemplateType) {
            $.userNameTemplateType = userNameTemplateType;
            return this;
        }

        /**
         * @param userNameTemplateType Username template type
         * 
         * @return builder
         * 
         */
        public Builder userNameTemplateType(String userNameTemplateType) {
            return userNameTemplateType(Output.of(userNameTemplateType));
        }

        /**
         * @param users Users associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(@Nullable Output<List<SamlAppUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users Users associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(List<SamlAppUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users Users associated with the application
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(SamlAppUserArgs... users) {
            return users(List.of(users));
        }

        public SamlAppArgs build() {
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            return $;
        }
    }

}
