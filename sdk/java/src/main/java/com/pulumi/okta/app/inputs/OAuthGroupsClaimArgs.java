// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OAuthGroupsClaimArgs extends com.pulumi.resources.ResourceArgs {

    public static final OAuthGroupsClaimArgs Empty = new OAuthGroupsClaimArgs();

    /**
     * Groups claim filter. Can only be set if type is FILTER.
     * 
     */
    @Import(name="filterType")
    private @Nullable Output<String> filterType;

    /**
     * @return Groups claim filter. Can only be set if type is FILTER.
     * 
     */
    public Optional<Output<String>> filterType() {
        return Optional.ofNullable(this.filterType);
    }

    /**
     * Issuer mode inherited from OAuth App
     * 
     */
    @Import(name="issuerMode")
    private @Nullable Output<String> issuerMode;

    /**
     * @return Issuer mode inherited from OAuth App
     * 
     */
    public Optional<Output<String>> issuerMode() {
        return Optional.ofNullable(this.issuerMode);
    }

    /**
     * Name of the claim that will be used in the token.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the claim that will be used in the token.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Groups claim type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Groups claim type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private OAuthGroupsClaimArgs() {}

    private OAuthGroupsClaimArgs(OAuthGroupsClaimArgs $) {
        this.filterType = $.filterType;
        this.issuerMode = $.issuerMode;
        this.name = $.name;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OAuthGroupsClaimArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OAuthGroupsClaimArgs $;

        public Builder() {
            $ = new OAuthGroupsClaimArgs();
        }

        public Builder(OAuthGroupsClaimArgs defaults) {
            $ = new OAuthGroupsClaimArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterType Groups claim filter. Can only be set if type is FILTER.
         * 
         * @return builder
         * 
         */
        public Builder filterType(@Nullable Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        /**
         * @param filterType Groups claim filter. Can only be set if type is FILTER.
         * 
         * @return builder
         * 
         */
        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        /**
         * @param issuerMode Issuer mode inherited from OAuth App
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(@Nullable Output<String> issuerMode) {
            $.issuerMode = issuerMode;
            return this;
        }

        /**
         * @param issuerMode Issuer mode inherited from OAuth App
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(String issuerMode) {
            return issuerMode(Output.of(issuerMode));
        }

        /**
         * @param name Name of the claim that will be used in the token.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the claim that will be used in the token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Groups claim type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Groups claim type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public OAuthGroupsClaimArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
