// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.Index;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EmailDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailDomainArgs Empty = new EmailDomainArgs();

    /**
     * Brand id of the email domain.
     * 
     */
    @Import(name="brandId", required=true)
    private Output<String> brandId;

    /**
     * @return Brand id of the email domain.
     * 
     */
    public Output<String> brandId() {
        return this.brandId;
    }

    /**
     * Display name of the email domain.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Display name of the email domain.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Mail domain to send from.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Mail domain to send from.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * User name of the email domain.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return User name of the email domain.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private EmailDomainArgs() {}

    private EmailDomainArgs(EmailDomainArgs $) {
        this.brandId = $.brandId;
        this.displayName = $.displayName;
        this.domain = $.domain;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailDomainArgs $;

        public Builder() {
            $ = new EmailDomainArgs();
        }

        public Builder(EmailDomainArgs defaults) {
            $ = new EmailDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param brandId Brand id of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder brandId(Output<String> brandId) {
            $.brandId = brandId;
            return this;
        }

        /**
         * @param brandId Brand id of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder brandId(String brandId) {
            return brandId(Output.of(brandId));
        }

        /**
         * @param displayName Display name of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param domain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param userName User name of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name of the email domain.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public EmailDomainArgs build() {
            if ($.brandId == null) {
                throw new MissingRequiredPropertyException("EmailDomainArgs", "brandId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("EmailDomainArgs", "displayName");
            }
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("EmailDomainArgs", "domain");
            }
            if ($.userName == null) {
                throw new MissingRequiredPropertyException("EmailDomainArgs", "userName");
            }
            return $;
        }
    }

}
