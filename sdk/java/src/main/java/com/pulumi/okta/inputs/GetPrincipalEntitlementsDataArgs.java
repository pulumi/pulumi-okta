// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetPrincipalEntitlementsDataParentArgs;
import com.pulumi.okta.inputs.GetPrincipalEntitlementsDataTargetPrincipalArgs;
import com.pulumi.okta.inputs.GetPrincipalEntitlementsDataValueArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrincipalEntitlementsDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPrincipalEntitlementsDataArgs Empty = new GetPrincipalEntitlementsDataArgs();

    /**
     * The data type of the entitlement property.
     * 
     */
    @Import(name="dataType", required=true)
    private Output<String> dataType;

    /**
     * @return The data type of the entitlement property.
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }

    /**
     * The description of an entitlement property.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of an entitlement property.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The value of an entitlement property.
     * 
     */
    @Import(name="externalValue", required=true)
    private Output<String> externalValue;

    /**
     * @return The value of an entitlement property.
     * 
     */
    public Output<String> externalValue() {
        return this.externalValue;
    }

    /**
     * The id property of an entitlement.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The id property of an entitlement.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The property that determines if the entitlement property can hold multiple values.
     * 
     */
    @Import(name="multiValue", required=true)
    private Output<Boolean> multiValue;

    /**
     * @return The property that determines if the entitlement property can hold multiple values.
     * 
     */
    public Output<Boolean> multiValue() {
        return this.multiValue;
    }

    /**
     * The display name for an entitlement property.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The display name for an entitlement property.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Representation of a resource.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<GetPrincipalEntitlementsDataParentArgs> parent;

    /**
     * @return Representation of a resource.
     * 
     */
    public Optional<Output<GetPrincipalEntitlementsDataParentArgs>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * The Okta app instance, in ORN format.
     * 
     */
    @Import(name="parentResourceOrn", required=true)
    private Output<String> parentResourceOrn;

    /**
     * @return The Okta app instance, in ORN format.
     * 
     */
    public Output<String> parentResourceOrn() {
        return this.parentResourceOrn;
    }

    /**
     * The property that determines if the entitlement property is a required attribute
     * 
     */
    @Import(name="required", required=true)
    private Output<Boolean> required;

    /**
     * @return The property that determines if the entitlement property is a required attribute
     * 
     */
    public Output<Boolean> required() {
        return this.required;
    }

    /**
     * Representation of a principal.
     * 
     */
    @Import(name="targetPrincipal")
    private @Nullable Output<GetPrincipalEntitlementsDataTargetPrincipalArgs> targetPrincipal;

    /**
     * @return Representation of a principal.
     * 
     */
    public Optional<Output<GetPrincipalEntitlementsDataTargetPrincipalArgs>> targetPrincipal() {
        return Optional.ofNullable(this.targetPrincipal);
    }

    /**
     * The Okta user id in ORN format.
     * 
     */
    @Import(name="targetPrincipalOrn", required=true)
    private Output<String> targetPrincipalOrn;

    /**
     * @return The Okta user id in ORN format.
     * 
     */
    public Output<String> targetPrincipalOrn() {
        return this.targetPrincipalOrn;
    }

    /**
     * Collection of entitlement values.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<GetPrincipalEntitlementsDataValueArgs>> values;

    /**
     * @return Collection of entitlement values.
     * 
     */
    public Optional<Output<List<GetPrincipalEntitlementsDataValueArgs>>> values() {
        return Optional.ofNullable(this.values);
    }

    private GetPrincipalEntitlementsDataArgs() {}

    private GetPrincipalEntitlementsDataArgs(GetPrincipalEntitlementsDataArgs $) {
        this.dataType = $.dataType;
        this.description = $.description;
        this.externalValue = $.externalValue;
        this.id = $.id;
        this.multiValue = $.multiValue;
        this.name = $.name;
        this.parent = $.parent;
        this.parentResourceOrn = $.parentResourceOrn;
        this.required = $.required;
        this.targetPrincipal = $.targetPrincipal;
        this.targetPrincipalOrn = $.targetPrincipalOrn;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrincipalEntitlementsDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrincipalEntitlementsDataArgs $;

        public Builder() {
            $ = new GetPrincipalEntitlementsDataArgs();
        }

        public Builder(GetPrincipalEntitlementsDataArgs defaults) {
            $ = new GetPrincipalEntitlementsDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType The data type of the entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type of the entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param description The description of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalValue The value of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder externalValue(Output<String> externalValue) {
            $.externalValue = externalValue;
            return this;
        }

        /**
         * @param externalValue The value of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder externalValue(String externalValue) {
            return externalValue(Output.of(externalValue));
        }

        /**
         * @param id The id property of an entitlement.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The id property of an entitlement.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param multiValue The property that determines if the entitlement property can hold multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(Output<Boolean> multiValue) {
            $.multiValue = multiValue;
            return this;
        }

        /**
         * @param multiValue The property that determines if the entitlement property can hold multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(Boolean multiValue) {
            return multiValue(Output.of(multiValue));
        }

        /**
         * @param name The display name for an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name for an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent Representation of a resource.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<GetPrincipalEntitlementsDataParentArgs> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Representation of a resource.
         * 
         * @return builder
         * 
         */
        public Builder parent(GetPrincipalEntitlementsDataParentArgs parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param parentResourceOrn The Okta app instance, in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceOrn(Output<String> parentResourceOrn) {
            $.parentResourceOrn = parentResourceOrn;
            return this;
        }

        /**
         * @param parentResourceOrn The Okta app instance, in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceOrn(String parentResourceOrn) {
            return parentResourceOrn(Output.of(parentResourceOrn));
        }

        /**
         * @param required The property that determines if the entitlement property is a required attribute
         * 
         * @return builder
         * 
         */
        public Builder required(Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required The property that determines if the entitlement property is a required attribute
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param targetPrincipal Representation of a principal.
         * 
         * @return builder
         * 
         */
        public Builder targetPrincipal(@Nullable Output<GetPrincipalEntitlementsDataTargetPrincipalArgs> targetPrincipal) {
            $.targetPrincipal = targetPrincipal;
            return this;
        }

        /**
         * @param targetPrincipal Representation of a principal.
         * 
         * @return builder
         * 
         */
        public Builder targetPrincipal(GetPrincipalEntitlementsDataTargetPrincipalArgs targetPrincipal) {
            return targetPrincipal(Output.of(targetPrincipal));
        }

        /**
         * @param targetPrincipalOrn The Okta user id in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder targetPrincipalOrn(Output<String> targetPrincipalOrn) {
            $.targetPrincipalOrn = targetPrincipalOrn;
            return this;
        }

        /**
         * @param targetPrincipalOrn The Okta user id in ORN format.
         * 
         * @return builder
         * 
         */
        public Builder targetPrincipalOrn(String targetPrincipalOrn) {
            return targetPrincipalOrn(Output.of(targetPrincipalOrn));
        }

        /**
         * @param values Collection of entitlement values.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<GetPrincipalEntitlementsDataValueArgs>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Collection of entitlement values.
         * 
         * @return builder
         * 
         */
        public Builder values(List<GetPrincipalEntitlementsDataValueArgs> values) {
            return values(Output.of(values));
        }

        /**
         * @param values Collection of entitlement values.
         * 
         * @return builder
         * 
         */
        public Builder values(GetPrincipalEntitlementsDataValueArgs... values) {
            return values(List.of(values));
        }

        public GetPrincipalEntitlementsDataArgs build() {
            if ($.dataType == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "dataType");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "description");
            }
            if ($.externalValue == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "externalValue");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "id");
            }
            if ($.multiValue == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "multiValue");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "name");
            }
            if ($.parentResourceOrn == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "parentResourceOrn");
            }
            if ($.required == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "required");
            }
            if ($.targetPrincipalOrn == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataArgs", "targetPrincipalOrn");
            }
            return $;
        }
    }

}
