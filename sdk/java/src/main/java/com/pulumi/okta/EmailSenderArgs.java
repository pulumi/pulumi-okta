// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EmailSenderArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailSenderArgs Empty = new EmailSenderArgs();

    /**
     * Email address to send from.
     * 
     */
    @Import(name="fromAddress", required=true)
    private Output<String> fromAddress;

    /**
     * @return Email address to send from.
     * 
     */
    public Output<String> fromAddress() {
        return this.fromAddress;
    }

    /**
     * Name of sender.
     * 
     */
    @Import(name="fromName", required=true)
    private Output<String> fromName;

    /**
     * @return Name of sender.
     * 
     */
    public Output<String> fromName() {
        return this.fromName;
    }

    /**
     * Mail domain to send from.
     * 
     */
    @Import(name="subdomain", required=true)
    private Output<String> subdomain;

    /**
     * @return Mail domain to send from.
     * 
     */
    public Output<String> subdomain() {
        return this.subdomain;
    }

    private EmailSenderArgs() {}

    private EmailSenderArgs(EmailSenderArgs $) {
        this.fromAddress = $.fromAddress;
        this.fromName = $.fromName;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailSenderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailSenderArgs $;

        public Builder() {
            $ = new EmailSenderArgs();
        }

        public Builder(EmailSenderArgs defaults) {
            $ = new EmailSenderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fromAddress Email address to send from.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(Output<String> fromAddress) {
            $.fromAddress = fromAddress;
            return this;
        }

        /**
         * @param fromAddress Email address to send from.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(String fromAddress) {
            return fromAddress(Output.of(fromAddress));
        }

        /**
         * @param fromName Name of sender.
         * 
         * @return builder
         * 
         */
        public Builder fromName(Output<String> fromName) {
            $.fromName = fromName;
            return this;
        }

        /**
         * @param fromName Name of sender.
         * 
         * @return builder
         * 
         */
        public Builder fromName(String fromName) {
            return fromName(Output.of(fromName));
        }

        /**
         * @param subdomain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public EmailSenderArgs build() {
            if ($.fromAddress == null) {
                throw new MissingRequiredPropertyException("EmailSenderArgs", "fromAddress");
            }
            if ($.fromName == null) {
                throw new MissingRequiredPropertyException("EmailSenderArgs", "fromName");
            }
            if ($.subdomain == null) {
                throw new MissingRequiredPropertyException("EmailSenderArgs", "subdomain");
            }
            return $;
        }
    }

}
