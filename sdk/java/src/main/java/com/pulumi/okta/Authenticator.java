// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.AuthenticatorArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.AuthenticatorState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; **WARNING:** This feature is only available as a part of the Identity Engine. Contact support for further information.
 * 
 * This resource allows you to configure different authenticators.
 * 
 * &gt; **Create:** The Okta API has an odd notion of create for authenticators. If
 * the authenticator doesn&#39;t exist then a one time &#39;POST /api/v1/authenticators&#39; to
 * create the authenticator (hard create) will be performed. Thereafter, that
 * authenticator is never deleted, it is only deactivated (soft delete). Therefore,
 * if the authenticator already exists create is just a soft import of an existing
 * authenticator. This does not apply to customOtp authenticator. There can be
 * multiple customOtp authenticator. To create new customOtp authenticator, a new
 * name and key = customOtp is required. If an old name is used, it will simply
 * reactivate the old customOtp authenticator
 * 
 * &gt; **Update:** customOtp authenticator cannot be updated
 * 
 * &gt; **Delete:** Authenticators can not be truly deleted therefore delete is soft.
 * Delete will attempt to deativate the authenticator. An authenticator can only be
 * deactivated if it&#39;s not in use by any other policy.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.Authenticator;
 * import com.pulumi.okta.AuthenticatorArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Authenticator("test", AuthenticatorArgs.builder()
 *             .name("Security Question")
 *             .key("security_question")
 *             .settings(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("allowedFor", "recovery")
 *                 )))
 *             .build());
 * 
 *         var otp = new Authenticator("otp", AuthenticatorArgs.builder()
 *             .name("Custom OTP")
 *             .key("custom_otp")
 *             .status("ACTIVE")
 *             .settings(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("protocol", "TOTP"),
 *                     jsonProperty("acceptableAdjacentIntervals", 3),
 *                     jsonProperty("timeIntervalInSeconds", 30),
 *                     jsonProperty("encoding", "base32"),
 *                     jsonProperty("algorithm", "HMacSHA256"),
 *                     jsonProperty("passCodeLength", 6)
 *                 )))
 *             .legacyIgnoreName(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:index/authenticator:Authenticator example &lt;authenticator_id&gt;
 * ```
 * 
 */
@ResourceType(type="okta:index/authenticator:Authenticator")
public class Authenticator extends com.pulumi.resources.CustomResource {
    /**
     * A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `externalIdp`, `googleOtp`, `oktaEmail`, `oktaPassword`, `oktaVerify`, `onpremMfa`, `phoneNumber`, `rsaToken`, `securityQuestion`, `webauthn`
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * Name does not trigger change detection (legacy behavior)
     * 
     */
    @Export(name="legacyIgnoreName", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> legacyIgnoreName;

    /**
     * @return Name does not trigger change detection (legacy behavior)
     * 
     */
    public Output<Optional<Boolean>> legacyIgnoreName() {
        return Codegen.optional(this.legacyIgnoreName);
    }
    /**
     * Display name of the Authenticator
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Display name of the Authenticator
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerAuthPort", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> providerAuthPort;

    /**
     * @return The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<Integer>> providerAuthPort() {
        return Codegen.optional(this.providerAuthPort);
    }
    /**
     * (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerHost", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerHost;

    /**
     * @return (DUO specific) - The Duo Security API hostname. Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerHost() {
        return Codegen.optional(this.providerHost);
    }
    /**
     * Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerHostname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerHostname;

    /**
     * @return Server host name or IP address. Default is `localhost`. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerHostname() {
        return Codegen.optional(this.providerHostname);
    }
    /**
     * App Instance ID.
     * 
     */
    @Export(name="providerInstanceId", refs={String.class}, tree="[0]")
    private Output<String> providerInstanceId;

    /**
     * @return App Instance ID.
     * 
     */
    public Output<String> providerInstanceId() {
        return this.providerInstanceId;
    }
    /**
     * (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerIntegrationKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerIntegrationKey;

    /**
     * @return (DUO specific) - The Duo Security integration key.  Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerIntegrationKey() {
        return Codegen.optional(this.providerIntegrationKey);
    }
    /**
     * Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
     * 
     */
    @Export(name="providerJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerJson;

    /**
     * @return Provider JSON allows for expressive providervalues. This argument conflicts with the other &#39;provider_xxx&#39; arguments. The [CreateProvider](https://developer.okta.com/docs/reference/api/authenticators-admin/#request) illustrates detailed provider values for a Duo authenticator. [Provider values](https://developer.okta.com/docs/reference/api/authenticators-admin/#authenticators-administration-api-object)are listed in Okta API.
     * 
     */
    public Output<Optional<String>> providerJson() {
        return Codegen.optional(this.providerJson);
    }
    /**
     * (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerSecretKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerSecretKey;

    /**
     * @return (DUO specific) - The Duo Security secret key.  Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerSecretKey() {
        return Codegen.optional(this.providerSecretKey);
    }
    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerSharedSecret", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerSharedSecret;

    /**
     * @return An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `securityKey`. Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerSharedSecret() {
        return Codegen.optional(this.providerSharedSecret);
    }
    /**
     * Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     * 
     */
    @Export(name="providerType", refs={String.class}, tree="[0]")
    private Output<String> providerType;

    /**
     * @return Provider type. Supported value for Duo: `DUO`. Supported value for Custom App: `PUSH`
     * 
     */
    public Output<String> providerType() {
        return this.providerType;
    }
    /**
     * Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    @Export(name="providerUserNameTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerUserNameTemplate;

    /**
     * @return Username template expected by the provider. Used only for authenticators with type `securityKey`.  Conflicts with `providerJson` argument.
     * 
     */
    public Output<Optional<String>> providerUserNameTemplate() {
        return Codegen.optional(this.providerUserNameTemplate);
    }
    /**
     * Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
     * 
     */
    @Export(name="settings", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> settings;

    /**
     * @return Settings for the authenticator. The settings JSON contains values based on Authenticator key. It is not used for authenticators with type `securityKey`
     * 
     */
    public Output<Optional<String>> settings() {
        return Codegen.optional(this.settings);
    }
    /**
     * Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Authenticator status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return he type of Authenticator. Values include: `password`, `securityQuestion`, `phone`, `email`, `app`, `federated`, and `securityKey`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Authenticator(java.lang.String name) {
        this(name, AuthenticatorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Authenticator(java.lang.String name, AuthenticatorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Authenticator(java.lang.String name, AuthenticatorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/authenticator:Authenticator", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Authenticator(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticatorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/authenticator:Authenticator", name, state, makeResourceOptions(options, id), false);
    }

    private static AuthenticatorArgs makeArgs(AuthenticatorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AuthenticatorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "providerSharedSecret"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Authenticator get(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticatorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Authenticator(name, id, state, options);
    }
}
