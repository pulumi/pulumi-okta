// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class CampaignNotificationSettings {
    /**
     * @return To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
     * 
     */
    private Boolean notifyReviewPeriodEnd;
    /**
     * @return To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
     * 
     */
    private Boolean notifyReviewerAtCampaignEnd;
    /**
     * @return To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
     * 
     */
    private Boolean notifyReviewerDuringMidpointOfReview;
    /**
     * @return To indicate whether a notification should be sent to the reviewer when the review is overdue.
     * 
     */
    private Boolean notifyReviewerWhenOverdue;
    /**
     * @return To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
     * 
     */
    private Boolean notifyReviewerWhenReviewAssigned;
    /**
     * @return Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
     * 
     */
    private @Nullable List<Integer> remindersReviewerBeforeCampaignCloseInSecs;

    private CampaignNotificationSettings() {}
    /**
     * @return To indicate whether a notification should be sent to the reviewer when a given reviewer level period is about to end.
     * 
     */
    public Boolean notifyReviewPeriodEnd() {
        return this.notifyReviewPeriodEnd;
    }
    /**
     * @return To indicate whether a notification should be sent to the reviewers when campaign has come to an end.
     * 
     */
    public Boolean notifyReviewerAtCampaignEnd() {
        return this.notifyReviewerAtCampaignEnd;
    }
    /**
     * @return To indicate whether a notification should be sent to the reviewer during the midpoint of the review process.
     * 
     */
    public Boolean notifyReviewerDuringMidpointOfReview() {
        return this.notifyReviewerDuringMidpointOfReview;
    }
    /**
     * @return To indicate whether a notification should be sent to the reviewer when the review is overdue.
     * 
     */
    public Boolean notifyReviewerWhenOverdue() {
        return this.notifyReviewerWhenOverdue;
    }
    /**
     * @return To indicate whether a notification should be sent to the reviewer when actionable reviews are assigned.
     * 
     */
    public Boolean notifyReviewerWhenReviewAssigned() {
        return this.notifyReviewerWhenReviewAssigned;
    }
    /**
     * @return Specifies times (in seconds) to send reminders to reviewers before the campaign closes. Max 3 values. Example: [86400, 172800, 604800]
     * 
     */
    public List<Integer> remindersReviewerBeforeCampaignCloseInSecs() {
        return this.remindersReviewerBeforeCampaignCloseInSecs == null ? List.of() : this.remindersReviewerBeforeCampaignCloseInSecs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CampaignNotificationSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean notifyReviewPeriodEnd;
        private Boolean notifyReviewerAtCampaignEnd;
        private Boolean notifyReviewerDuringMidpointOfReview;
        private Boolean notifyReviewerWhenOverdue;
        private Boolean notifyReviewerWhenReviewAssigned;
        private @Nullable List<Integer> remindersReviewerBeforeCampaignCloseInSecs;
        public Builder() {}
        public Builder(CampaignNotificationSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notifyReviewPeriodEnd = defaults.notifyReviewPeriodEnd;
    	      this.notifyReviewerAtCampaignEnd = defaults.notifyReviewerAtCampaignEnd;
    	      this.notifyReviewerDuringMidpointOfReview = defaults.notifyReviewerDuringMidpointOfReview;
    	      this.notifyReviewerWhenOverdue = defaults.notifyReviewerWhenOverdue;
    	      this.notifyReviewerWhenReviewAssigned = defaults.notifyReviewerWhenReviewAssigned;
    	      this.remindersReviewerBeforeCampaignCloseInSecs = defaults.remindersReviewerBeforeCampaignCloseInSecs;
        }

        @CustomType.Setter
        public Builder notifyReviewPeriodEnd(Boolean notifyReviewPeriodEnd) {
            if (notifyReviewPeriodEnd == null) {
              throw new MissingRequiredPropertyException("CampaignNotificationSettings", "notifyReviewPeriodEnd");
            }
            this.notifyReviewPeriodEnd = notifyReviewPeriodEnd;
            return this;
        }
        @CustomType.Setter
        public Builder notifyReviewerAtCampaignEnd(Boolean notifyReviewerAtCampaignEnd) {
            if (notifyReviewerAtCampaignEnd == null) {
              throw new MissingRequiredPropertyException("CampaignNotificationSettings", "notifyReviewerAtCampaignEnd");
            }
            this.notifyReviewerAtCampaignEnd = notifyReviewerAtCampaignEnd;
            return this;
        }
        @CustomType.Setter
        public Builder notifyReviewerDuringMidpointOfReview(Boolean notifyReviewerDuringMidpointOfReview) {
            if (notifyReviewerDuringMidpointOfReview == null) {
              throw new MissingRequiredPropertyException("CampaignNotificationSettings", "notifyReviewerDuringMidpointOfReview");
            }
            this.notifyReviewerDuringMidpointOfReview = notifyReviewerDuringMidpointOfReview;
            return this;
        }
        @CustomType.Setter
        public Builder notifyReviewerWhenOverdue(Boolean notifyReviewerWhenOverdue) {
            if (notifyReviewerWhenOverdue == null) {
              throw new MissingRequiredPropertyException("CampaignNotificationSettings", "notifyReviewerWhenOverdue");
            }
            this.notifyReviewerWhenOverdue = notifyReviewerWhenOverdue;
            return this;
        }
        @CustomType.Setter
        public Builder notifyReviewerWhenReviewAssigned(Boolean notifyReviewerWhenReviewAssigned) {
            if (notifyReviewerWhenReviewAssigned == null) {
              throw new MissingRequiredPropertyException("CampaignNotificationSettings", "notifyReviewerWhenReviewAssigned");
            }
            this.notifyReviewerWhenReviewAssigned = notifyReviewerWhenReviewAssigned;
            return this;
        }
        @CustomType.Setter
        public Builder remindersReviewerBeforeCampaignCloseInSecs(@Nullable List<Integer> remindersReviewerBeforeCampaignCloseInSecs) {

            this.remindersReviewerBeforeCampaignCloseInSecs = remindersReviewerBeforeCampaignCloseInSecs;
            return this;
        }
        public Builder remindersReviewerBeforeCampaignCloseInSecs(Integer... remindersReviewerBeforeCampaignCloseInSecs) {
            return remindersReviewerBeforeCampaignCloseInSecs(List.of(remindersReviewerBeforeCampaignCloseInSecs));
        }
        public CampaignNotificationSettings build() {
            final var _resultValue = new CampaignNotificationSettings();
            _resultValue.notifyReviewPeriodEnd = notifyReviewPeriodEnd;
            _resultValue.notifyReviewerAtCampaignEnd = notifyReviewerAtCampaignEnd;
            _resultValue.notifyReviewerDuringMidpointOfReview = notifyReviewerDuringMidpointOfReview;
            _resultValue.notifyReviewerWhenOverdue = notifyReviewerWhenOverdue;
            _resultValue.notifyReviewerWhenReviewAssigned = notifyReviewerWhenReviewAssigned;
            _resultValue.remindersReviewerBeforeCampaignCloseInSecs = remindersReviewerBeforeCampaignCloseInSecs;
            return _resultValue;
        }
    }
}
