// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailSmtpServerState extends com.pulumi.resources.ResourceArgs {

    public static final EmailSmtpServerState Empty = new EmailSmtpServerState();

    /**
     * Human-readable name for your SMTP server
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return Human-readable name for your SMTP server
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * If true, routes all email traffic through your SMTP server.Default: `false`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If true, routes all email traffic through your SMTP server.Default: `false`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Hostname or IP address of your SMTP server
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Hostname or IP address of your SMTP server
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Password used to access your SMTP server
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password used to access your SMTP server
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Port number of your SMTP server
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port number of your SMTP server
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Username used to access your SMTP server
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username used to access your SMTP server
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private EmailSmtpServerState() {}

    private EmailSmtpServerState(EmailSmtpServerState $) {
        this.alias = $.alias;
        this.enabled = $.enabled;
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailSmtpServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailSmtpServerState $;

        public Builder() {
            $ = new EmailSmtpServerState();
        }

        public Builder(EmailSmtpServerState defaults) {
            $ = new EmailSmtpServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Human-readable name for your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Human-readable name for your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param enabled If true, routes all email traffic through your SMTP server.Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If true, routes all email traffic through your SMTP server.Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param host Hostname or IP address of your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Hostname or IP address of your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password Password used to access your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password used to access your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Port number of your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number of your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param username Username used to access your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username used to access your SMTP server
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public EmailSmtpServerState build() {
            return $;
        }
    }

}
