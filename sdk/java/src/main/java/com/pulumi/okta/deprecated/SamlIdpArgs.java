// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.deprecated;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlIdpArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlIdpArgs Empty = new SamlIdpArgs();

    @Import(name="accountLinkAction")
    private @Nullable Output<String> accountLinkAction;

    public Optional<Output<String>> accountLinkAction() {
        return Optional.ofNullable(this.accountLinkAction);
    }

    @Import(name="accountLinkGroupIncludes")
    private @Nullable Output<List<String>> accountLinkGroupIncludes;

    public Optional<Output<List<String>>> accountLinkGroupIncludes() {
        return Optional.ofNullable(this.accountLinkGroupIncludes);
    }

    /**
     * @deprecated
     * This property will be removed in the future, as it can only be set to &#39;HTTP-POST&#39;
     * 
     */
    @Deprecated /* This property will be removed in the future, as it can only be set to 'HTTP-POST' */
    @Import(name="acsBinding")
    private @Nullable Output<String> acsBinding;

    /**
     * @deprecated
     * This property will be removed in the future, as it can only be set to &#39;HTTP-POST&#39;
     * 
     */
    @Deprecated /* This property will be removed in the future, as it can only be set to 'HTTP-POST' */
    public Optional<Output<String>> acsBinding() {
        return Optional.ofNullable(this.acsBinding);
    }

    @Import(name="acsType")
    private @Nullable Output<String> acsType;

    public Optional<Output<String>> acsType() {
        return Optional.ofNullable(this.acsType);
    }

    @Import(name="deprovisionedAction")
    private @Nullable Output<String> deprovisionedAction;

    public Optional<Output<String>> deprovisionedAction() {
        return Optional.ofNullable(this.deprovisionedAction);
    }

    @Import(name="groupsAction")
    private @Nullable Output<String> groupsAction;

    public Optional<Output<String>> groupsAction() {
        return Optional.ofNullable(this.groupsAction);
    }

    @Import(name="groupsAssignments")
    private @Nullable Output<List<String>> groupsAssignments;

    public Optional<Output<List<String>>> groupsAssignments() {
        return Optional.ofNullable(this.groupsAssignments);
    }

    @Import(name="groupsAttribute")
    private @Nullable Output<String> groupsAttribute;

    public Optional<Output<String>> groupsAttribute() {
        return Optional.ofNullable(this.groupsAttribute);
    }

    @Import(name="groupsFilters")
    private @Nullable Output<List<String>> groupsFilters;

    public Optional<Output<List<String>>> groupsFilters() {
        return Optional.ofNullable(this.groupsFilters);
    }

    @Import(name="issuer", required=true)
    private Output<String> issuer;

    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     * 
     */
    @Import(name="issuerMode")
    private @Nullable Output<String> issuerMode;

    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
     * 
     */
    public Optional<Output<String>> issuerMode() {
        return Optional.ofNullable(this.issuerMode);
    }

    @Import(name="kid", required=true)
    private Output<String> kid;

    public Output<String> kid() {
        return this.kid;
    }

    @Import(name="maxClockSkew")
    private @Nullable Output<Integer> maxClockSkew;

    public Optional<Output<Integer>> maxClockSkew() {
        return Optional.ofNullable(this.maxClockSkew);
    }

    /**
     * Name of the IdP
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the IdP
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nameFormat")
    private @Nullable Output<String> nameFormat;

    public Optional<Output<String>> nameFormat() {
        return Optional.ofNullable(this.nameFormat);
    }

    @Import(name="profileMaster")
    private @Nullable Output<Boolean> profileMaster;

    public Optional<Output<Boolean>> profileMaster() {
        return Optional.ofNullable(this.profileMaster);
    }

    @Import(name="provisioningAction")
    private @Nullable Output<String> provisioningAction;

    public Optional<Output<String>> provisioningAction() {
        return Optional.ofNullable(this.provisioningAction);
    }

    /**
     * The XML digital Signature Algorithm used when signing an &lt;AuthnRequest&gt; message
     * 
     */
    @Import(name="requestSignatureAlgorithm")
    private @Nullable Output<String> requestSignatureAlgorithm;

    /**
     * @return The XML digital Signature Algorithm used when signing an &lt;AuthnRequest&gt; message
     * 
     */
    public Optional<Output<String>> requestSignatureAlgorithm() {
        return Optional.ofNullable(this.requestSignatureAlgorithm);
    }

    /**
     * Specifies whether to digitally sign &lt;AuthnRequest&gt; messages to the IdP
     * 
     */
    @Import(name="requestSignatureScope")
    private @Nullable Output<String> requestSignatureScope;

    /**
     * @return Specifies whether to digitally sign &lt;AuthnRequest&gt; messages to the IdP
     * 
     */
    public Optional<Output<String>> requestSignatureScope() {
        return Optional.ofNullable(this.requestSignatureScope);
    }

    /**
     * The minimum XML digital Signature Algorithm allowed when verifying a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element
     * 
     */
    @Import(name="responseSignatureAlgorithm")
    private @Nullable Output<String> responseSignatureAlgorithm;

    /**
     * @return The minimum XML digital Signature Algorithm allowed when verifying a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element
     * 
     */
    public Optional<Output<String>> responseSignatureAlgorithm() {
        return Optional.ofNullable(this.responseSignatureAlgorithm);
    }

    /**
     * Specifies whether to verify a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element XML digital signature
     * 
     */
    @Import(name="responseSignatureScope")
    private @Nullable Output<String> responseSignatureScope;

    /**
     * @return Specifies whether to verify a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element XML digital signature
     * 
     */
    public Optional<Output<String>> responseSignatureScope() {
        return Optional.ofNullable(this.responseSignatureScope);
    }

    @Import(name="ssoBinding")
    private @Nullable Output<String> ssoBinding;

    public Optional<Output<String>> ssoBinding() {
        return Optional.ofNullable(this.ssoBinding);
    }

    @Import(name="ssoDestination")
    private @Nullable Output<String> ssoDestination;

    public Optional<Output<String>> ssoDestination() {
        return Optional.ofNullable(this.ssoDestination);
    }

    @Import(name="ssoUrl", required=true)
    private Output<String> ssoUrl;

    public Output<String> ssoUrl() {
        return this.ssoUrl;
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="subjectFilter")
    private @Nullable Output<String> subjectFilter;

    public Optional<Output<String>> subjectFilter() {
        return Optional.ofNullable(this.subjectFilter);
    }

    @Import(name="subjectFormats")
    private @Nullable Output<List<String>> subjectFormats;

    public Optional<Output<List<String>>> subjectFormats() {
        return Optional.ofNullable(this.subjectFormats);
    }

    @Import(name="subjectMatchAttribute")
    private @Nullable Output<String> subjectMatchAttribute;

    public Optional<Output<String>> subjectMatchAttribute() {
        return Optional.ofNullable(this.subjectMatchAttribute);
    }

    @Import(name="subjectMatchType")
    private @Nullable Output<String> subjectMatchType;

    public Optional<Output<String>> subjectMatchType() {
        return Optional.ofNullable(this.subjectMatchType);
    }

    @Import(name="suspendedAction")
    private @Nullable Output<String> suspendedAction;

    public Optional<Output<String>> suspendedAction() {
        return Optional.ofNullable(this.suspendedAction);
    }

    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SamlIdpArgs() {}

    private SamlIdpArgs(SamlIdpArgs $) {
        this.accountLinkAction = $.accountLinkAction;
        this.accountLinkGroupIncludes = $.accountLinkGroupIncludes;
        this.acsBinding = $.acsBinding;
        this.acsType = $.acsType;
        this.deprovisionedAction = $.deprovisionedAction;
        this.groupsAction = $.groupsAction;
        this.groupsAssignments = $.groupsAssignments;
        this.groupsAttribute = $.groupsAttribute;
        this.groupsFilters = $.groupsFilters;
        this.issuer = $.issuer;
        this.issuerMode = $.issuerMode;
        this.kid = $.kid;
        this.maxClockSkew = $.maxClockSkew;
        this.name = $.name;
        this.nameFormat = $.nameFormat;
        this.profileMaster = $.profileMaster;
        this.provisioningAction = $.provisioningAction;
        this.requestSignatureAlgorithm = $.requestSignatureAlgorithm;
        this.requestSignatureScope = $.requestSignatureScope;
        this.responseSignatureAlgorithm = $.responseSignatureAlgorithm;
        this.responseSignatureScope = $.responseSignatureScope;
        this.ssoBinding = $.ssoBinding;
        this.ssoDestination = $.ssoDestination;
        this.ssoUrl = $.ssoUrl;
        this.status = $.status;
        this.subjectFilter = $.subjectFilter;
        this.subjectFormats = $.subjectFormats;
        this.subjectMatchAttribute = $.subjectMatchAttribute;
        this.subjectMatchType = $.subjectMatchType;
        this.suspendedAction = $.suspendedAction;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlIdpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlIdpArgs $;

        public Builder() {
            $ = new SamlIdpArgs();
        }

        public Builder(SamlIdpArgs defaults) {
            $ = new SamlIdpArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountLinkAction(@Nullable Output<String> accountLinkAction) {
            $.accountLinkAction = accountLinkAction;
            return this;
        }

        public Builder accountLinkAction(String accountLinkAction) {
            return accountLinkAction(Output.of(accountLinkAction));
        }

        public Builder accountLinkGroupIncludes(@Nullable Output<List<String>> accountLinkGroupIncludes) {
            $.accountLinkGroupIncludes = accountLinkGroupIncludes;
            return this;
        }

        public Builder accountLinkGroupIncludes(List<String> accountLinkGroupIncludes) {
            return accountLinkGroupIncludes(Output.of(accountLinkGroupIncludes));
        }

        public Builder accountLinkGroupIncludes(String... accountLinkGroupIncludes) {
            return accountLinkGroupIncludes(List.of(accountLinkGroupIncludes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property will be removed in the future, as it can only be set to &#39;HTTP-POST&#39;
         * 
         */
        @Deprecated /* This property will be removed in the future, as it can only be set to 'HTTP-POST' */
        public Builder acsBinding(@Nullable Output<String> acsBinding) {
            $.acsBinding = acsBinding;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property will be removed in the future, as it can only be set to &#39;HTTP-POST&#39;
         * 
         */
        @Deprecated /* This property will be removed in the future, as it can only be set to 'HTTP-POST' */
        public Builder acsBinding(String acsBinding) {
            return acsBinding(Output.of(acsBinding));
        }

        public Builder acsType(@Nullable Output<String> acsType) {
            $.acsType = acsType;
            return this;
        }

        public Builder acsType(String acsType) {
            return acsType(Output.of(acsType));
        }

        public Builder deprovisionedAction(@Nullable Output<String> deprovisionedAction) {
            $.deprovisionedAction = deprovisionedAction;
            return this;
        }

        public Builder deprovisionedAction(String deprovisionedAction) {
            return deprovisionedAction(Output.of(deprovisionedAction));
        }

        public Builder groupsAction(@Nullable Output<String> groupsAction) {
            $.groupsAction = groupsAction;
            return this;
        }

        public Builder groupsAction(String groupsAction) {
            return groupsAction(Output.of(groupsAction));
        }

        public Builder groupsAssignments(@Nullable Output<List<String>> groupsAssignments) {
            $.groupsAssignments = groupsAssignments;
            return this;
        }

        public Builder groupsAssignments(List<String> groupsAssignments) {
            return groupsAssignments(Output.of(groupsAssignments));
        }

        public Builder groupsAssignments(String... groupsAssignments) {
            return groupsAssignments(List.of(groupsAssignments));
        }

        public Builder groupsAttribute(@Nullable Output<String> groupsAttribute) {
            $.groupsAttribute = groupsAttribute;
            return this;
        }

        public Builder groupsAttribute(String groupsAttribute) {
            return groupsAttribute(Output.of(groupsAttribute));
        }

        public Builder groupsFilters(@Nullable Output<List<String>> groupsFilters) {
            $.groupsFilters = groupsFilters;
            return this;
        }

        public Builder groupsFilters(List<String> groupsFilters) {
            return groupsFilters(Output.of(groupsFilters));
        }

        public Builder groupsFilters(String... groupsFilters) {
            return groupsFilters(List.of(groupsFilters));
        }

        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param issuerMode Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(@Nullable Output<String> issuerMode) {
            $.issuerMode = issuerMode;
            return this;
        }

        /**
         * @param issuerMode Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
         * 
         * @return builder
         * 
         */
        public Builder issuerMode(String issuerMode) {
            return issuerMode(Output.of(issuerMode));
        }

        public Builder kid(Output<String> kid) {
            $.kid = kid;
            return this;
        }

        public Builder kid(String kid) {
            return kid(Output.of(kid));
        }

        public Builder maxClockSkew(@Nullable Output<Integer> maxClockSkew) {
            $.maxClockSkew = maxClockSkew;
            return this;
        }

        public Builder maxClockSkew(Integer maxClockSkew) {
            return maxClockSkew(Output.of(maxClockSkew));
        }

        /**
         * @param name Name of the IdP
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the IdP
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nameFormat(@Nullable Output<String> nameFormat) {
            $.nameFormat = nameFormat;
            return this;
        }

        public Builder nameFormat(String nameFormat) {
            return nameFormat(Output.of(nameFormat));
        }

        public Builder profileMaster(@Nullable Output<Boolean> profileMaster) {
            $.profileMaster = profileMaster;
            return this;
        }

        public Builder profileMaster(Boolean profileMaster) {
            return profileMaster(Output.of(profileMaster));
        }

        public Builder provisioningAction(@Nullable Output<String> provisioningAction) {
            $.provisioningAction = provisioningAction;
            return this;
        }

        public Builder provisioningAction(String provisioningAction) {
            return provisioningAction(Output.of(provisioningAction));
        }

        /**
         * @param requestSignatureAlgorithm The XML digital Signature Algorithm used when signing an &lt;AuthnRequest&gt; message
         * 
         * @return builder
         * 
         */
        public Builder requestSignatureAlgorithm(@Nullable Output<String> requestSignatureAlgorithm) {
            $.requestSignatureAlgorithm = requestSignatureAlgorithm;
            return this;
        }

        /**
         * @param requestSignatureAlgorithm The XML digital Signature Algorithm used when signing an &lt;AuthnRequest&gt; message
         * 
         * @return builder
         * 
         */
        public Builder requestSignatureAlgorithm(String requestSignatureAlgorithm) {
            return requestSignatureAlgorithm(Output.of(requestSignatureAlgorithm));
        }

        /**
         * @param requestSignatureScope Specifies whether to digitally sign &lt;AuthnRequest&gt; messages to the IdP
         * 
         * @return builder
         * 
         */
        public Builder requestSignatureScope(@Nullable Output<String> requestSignatureScope) {
            $.requestSignatureScope = requestSignatureScope;
            return this;
        }

        /**
         * @param requestSignatureScope Specifies whether to digitally sign &lt;AuthnRequest&gt; messages to the IdP
         * 
         * @return builder
         * 
         */
        public Builder requestSignatureScope(String requestSignatureScope) {
            return requestSignatureScope(Output.of(requestSignatureScope));
        }

        /**
         * @param responseSignatureAlgorithm The minimum XML digital Signature Algorithm allowed when verifying a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureAlgorithm(@Nullable Output<String> responseSignatureAlgorithm) {
            $.responseSignatureAlgorithm = responseSignatureAlgorithm;
            return this;
        }

        /**
         * @param responseSignatureAlgorithm The minimum XML digital Signature Algorithm allowed when verifying a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureAlgorithm(String responseSignatureAlgorithm) {
            return responseSignatureAlgorithm(Output.of(responseSignatureAlgorithm));
        }

        /**
         * @param responseSignatureScope Specifies whether to verify a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element XML digital signature
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureScope(@Nullable Output<String> responseSignatureScope) {
            $.responseSignatureScope = responseSignatureScope;
            return this;
        }

        /**
         * @param responseSignatureScope Specifies whether to verify a &lt;SAMLResponse&gt; message or &lt;Assertion&gt; element XML digital signature
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureScope(String responseSignatureScope) {
            return responseSignatureScope(Output.of(responseSignatureScope));
        }

        public Builder ssoBinding(@Nullable Output<String> ssoBinding) {
            $.ssoBinding = ssoBinding;
            return this;
        }

        public Builder ssoBinding(String ssoBinding) {
            return ssoBinding(Output.of(ssoBinding));
        }

        public Builder ssoDestination(@Nullable Output<String> ssoDestination) {
            $.ssoDestination = ssoDestination;
            return this;
        }

        public Builder ssoDestination(String ssoDestination) {
            return ssoDestination(Output.of(ssoDestination));
        }

        public Builder ssoUrl(Output<String> ssoUrl) {
            $.ssoUrl = ssoUrl;
            return this;
        }

        public Builder ssoUrl(String ssoUrl) {
            return ssoUrl(Output.of(ssoUrl));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder subjectFilter(@Nullable Output<String> subjectFilter) {
            $.subjectFilter = subjectFilter;
            return this;
        }

        public Builder subjectFilter(String subjectFilter) {
            return subjectFilter(Output.of(subjectFilter));
        }

        public Builder subjectFormats(@Nullable Output<List<String>> subjectFormats) {
            $.subjectFormats = subjectFormats;
            return this;
        }

        public Builder subjectFormats(List<String> subjectFormats) {
            return subjectFormats(Output.of(subjectFormats));
        }

        public Builder subjectFormats(String... subjectFormats) {
            return subjectFormats(List.of(subjectFormats));
        }

        public Builder subjectMatchAttribute(@Nullable Output<String> subjectMatchAttribute) {
            $.subjectMatchAttribute = subjectMatchAttribute;
            return this;
        }

        public Builder subjectMatchAttribute(String subjectMatchAttribute) {
            return subjectMatchAttribute(Output.of(subjectMatchAttribute));
        }

        public Builder subjectMatchType(@Nullable Output<String> subjectMatchType) {
            $.subjectMatchType = subjectMatchType;
            return this;
        }

        public Builder subjectMatchType(String subjectMatchType) {
            return subjectMatchType(Output.of(subjectMatchType));
        }

        public Builder suspendedAction(@Nullable Output<String> suspendedAction) {
            $.suspendedAction = suspendedAction;
            return this;
        }

        public Builder suspendedAction(String suspendedAction) {
            return suspendedAction(Output.of(suspendedAction));
        }

        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SamlIdpArgs build() {
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.kid = Objects.requireNonNull($.kid, "expected parameter 'kid' to be non-null");
            $.ssoUrl = Objects.requireNonNull($.ssoUrl, "expected parameter 'ssoUrl' to be non-null");
            return $;
        }
    }

}
