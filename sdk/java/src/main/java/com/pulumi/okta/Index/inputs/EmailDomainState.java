// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.Index.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.Index.inputs.EmailDomainDnsValidationRecordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailDomainState extends com.pulumi.resources.ResourceArgs {

    public static final EmailDomainState Empty = new EmailDomainState();

    /**
     * Brand id
     * 
     */
    @Import(name="brandId")
    private @Nullable Output<String> brandId;

    /**
     * @return Brand id
     * 
     */
    public Optional<Output<String>> brandId() {
        return Optional.ofNullable(this.brandId);
    }

    /**
     * Display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * TXT and cname records to be registered for the email Domain
     * 
     */
    @Import(name="dnsValidationRecords")
    private @Nullable Output<List<EmailDomainDnsValidationRecordArgs>> dnsValidationRecords;

    /**
     * @return TXT and cname records to be registered for the email Domain
     * 
     */
    public Optional<Output<List<EmailDomainDnsValidationRecordArgs>>> dnsValidationRecords() {
        return Optional.ofNullable(this.dnsValidationRecords);
    }

    /**
     * Domain name
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain name
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
     * 
     */
    @Import(name="validationStatus")
    private @Nullable Output<String> validationStatus;

    /**
     * @return Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
     * 
     */
    public Optional<Output<String>> validationStatus() {
        return Optional.ofNullable(this.validationStatus);
    }

    private EmailDomainState() {}

    private EmailDomainState(EmailDomainState $) {
        this.brandId = $.brandId;
        this.displayName = $.displayName;
        this.dnsValidationRecords = $.dnsValidationRecords;
        this.domain = $.domain;
        this.userName = $.userName;
        this.validationStatus = $.validationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailDomainState $;

        public Builder() {
            $ = new EmailDomainState();
        }

        public Builder(EmailDomainState defaults) {
            $ = new EmailDomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param brandId Brand id
         * 
         * @return builder
         * 
         */
        public Builder brandId(@Nullable Output<String> brandId) {
            $.brandId = brandId;
            return this;
        }

        /**
         * @param brandId Brand id
         * 
         * @return builder
         * 
         */
        public Builder brandId(String brandId) {
            return brandId(Output.of(brandId));
        }

        /**
         * @param displayName Display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dnsValidationRecords TXT and cname records to be registered for the email Domain
         * 
         * @return builder
         * 
         */
        public Builder dnsValidationRecords(@Nullable Output<List<EmailDomainDnsValidationRecordArgs>> dnsValidationRecords) {
            $.dnsValidationRecords = dnsValidationRecords;
            return this;
        }

        /**
         * @param dnsValidationRecords TXT and cname records to be registered for the email Domain
         * 
         * @return builder
         * 
         */
        public Builder dnsValidationRecords(List<EmailDomainDnsValidationRecordArgs> dnsValidationRecords) {
            return dnsValidationRecords(Output.of(dnsValidationRecords));
        }

        /**
         * @param dnsValidationRecords TXT and cname records to be registered for the email Domain
         * 
         * @return builder
         * 
         */
        public Builder dnsValidationRecords(EmailDomainDnsValidationRecordArgs... dnsValidationRecords) {
            return dnsValidationRecords(List.of(dnsValidationRecords));
        }

        /**
         * @param domain Domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        /**
         * @param validationStatus Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
         * 
         * @return builder
         * 
         */
        public Builder validationStatus(@Nullable Output<String> validationStatus) {
            $.validationStatus = validationStatus;
            return this;
        }

        /**
         * @param validationStatus Status of the email domain. Values: NOT*STARTED, IN*PROGRESS, VERIFIED, COMPLETED
         * 
         * @return builder
         * 
         */
        public Builder validationStatus(String validationStatus) {
            return validationStatus(Output.of(validationStatus));
        }

        public EmailDomainState build() {
            return $;
        }
    }

}
