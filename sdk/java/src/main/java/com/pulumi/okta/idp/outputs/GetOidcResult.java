// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOidcResult {
    /**
     * @return The method of making an authorization request.
     * 
     */
    private final String authorizationBinding;
    /**
     * @return IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    private final String authorizationUrl;
    /**
     * @return Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    private final String clientId;
    /**
     * @return Client secret issued by AS for the Okta IdP instance.
     * 
     */
    private final String clientSecret;
    /**
     * @return id of idp.
     * 
     */
    private final @Nullable String id;
    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
     * 
     */
    private final String issuerMode;
    /**
     * @return URI that identifies the issuer.
     * 
     */
    private final String issuerUrl;
    /**
     * @return The method of making a request for the OIDC JWKS.
     * 
     */
    private final String jwksBinding;
    /**
     * @return Endpoint where the keys signer publishes its keys in a JWK Set.
     * 
     */
    private final String jwksUrl;
    /**
     * @return Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    private final Integer maxClockSkew;
    /**
     * @return name of the idp.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The type of protocol to use.
     * 
     */
    private final String protocolType;
    /**
     * @return The scopes of the IdP.
     * 
     */
    private final List<String> scopes;
    /**
     * @return The method of making a token request.
     * 
     */
    private final String tokenBinding;
    /**
     * @return IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    private final String tokenUrl;
    /**
     * @return type of idp.
     * 
     */
    private final String type;
    /**
     * @return The method of making a user info request.
     * 
     */
    private final String userInfoBinding;
    /**
     * @return Protected resource endpoint that returns claims about the authenticated user.
     * 
     */
    private final String userInfoUrl;

    @CustomType.Constructor
    private GetOidcResult(
        @CustomType.Parameter("authorizationBinding") String authorizationBinding,
        @CustomType.Parameter("authorizationUrl") String authorizationUrl,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientSecret") String clientSecret,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("issuerMode") String issuerMode,
        @CustomType.Parameter("issuerUrl") String issuerUrl,
        @CustomType.Parameter("jwksBinding") String jwksBinding,
        @CustomType.Parameter("jwksUrl") String jwksUrl,
        @CustomType.Parameter("maxClockSkew") Integer maxClockSkew,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("protocolType") String protocolType,
        @CustomType.Parameter("scopes") List<String> scopes,
        @CustomType.Parameter("tokenBinding") String tokenBinding,
        @CustomType.Parameter("tokenUrl") String tokenUrl,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("userInfoBinding") String userInfoBinding,
        @CustomType.Parameter("userInfoUrl") String userInfoUrl) {
        this.authorizationBinding = authorizationBinding;
        this.authorizationUrl = authorizationUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.id = id;
        this.issuerMode = issuerMode;
        this.issuerUrl = issuerUrl;
        this.jwksBinding = jwksBinding;
        this.jwksUrl = jwksUrl;
        this.maxClockSkew = maxClockSkew;
        this.name = name;
        this.protocolType = protocolType;
        this.scopes = scopes;
        this.tokenBinding = tokenBinding;
        this.tokenUrl = tokenUrl;
        this.type = type;
        this.userInfoBinding = userInfoBinding;
        this.userInfoUrl = userInfoUrl;
    }

    /**
     * @return The method of making an authorization request.
     * 
     */
    public String authorizationBinding() {
        return this.authorizationBinding;
    }
    /**
     * @return IdP Authorization Server (AS) endpoint to request consent from the user and obtain an authorization code grant.
     * 
     */
    public String authorizationUrl() {
        return this.authorizationUrl;
    }
    /**
     * @return Unique identifier issued by AS for the Okta IdP instance.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Client secret issued by AS for the Okta IdP instance.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return id of idp.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL.
     * 
     */
    public String issuerMode() {
        return this.issuerMode;
    }
    /**
     * @return URI that identifies the issuer.
     * 
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }
    /**
     * @return The method of making a request for the OIDC JWKS.
     * 
     */
    public String jwksBinding() {
        return this.jwksBinding;
    }
    /**
     * @return Endpoint where the keys signer publishes its keys in a JWK Set.
     * 
     */
    public String jwksUrl() {
        return this.jwksUrl;
    }
    /**
     * @return Maximum allowable clock-skew when processing messages from the IdP.
     * 
     */
    public Integer maxClockSkew() {
        return this.maxClockSkew;
    }
    /**
     * @return name of the idp.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The type of protocol to use.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The scopes of the IdP.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return The method of making a token request.
     * 
     */
    public String tokenBinding() {
        return this.tokenBinding;
    }
    /**
     * @return IdP Authorization Server (AS) endpoint to exchange the authorization code grant for an access token.
     * 
     */
    public String tokenUrl() {
        return this.tokenUrl;
    }
    /**
     * @return type of idp.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The method of making a user info request.
     * 
     */
    public String userInfoBinding() {
        return this.userInfoBinding;
    }
    /**
     * @return Protected resource endpoint that returns claims about the authenticated user.
     * 
     */
    public String userInfoUrl() {
        return this.userInfoUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOidcResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authorizationBinding;
        private String authorizationUrl;
        private String clientId;
        private String clientSecret;
        private @Nullable String id;
        private String issuerMode;
        private String issuerUrl;
        private String jwksBinding;
        private String jwksUrl;
        private Integer maxClockSkew;
        private @Nullable String name;
        private String protocolType;
        private List<String> scopes;
        private String tokenBinding;
        private String tokenUrl;
        private String type;
        private String userInfoBinding;
        private String userInfoUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(GetOidcResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationBinding = defaults.authorizationBinding;
    	      this.authorizationUrl = defaults.authorizationUrl;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.id = defaults.id;
    	      this.issuerMode = defaults.issuerMode;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.jwksBinding = defaults.jwksBinding;
    	      this.jwksUrl = defaults.jwksUrl;
    	      this.maxClockSkew = defaults.maxClockSkew;
    	      this.name = defaults.name;
    	      this.protocolType = defaults.protocolType;
    	      this.scopes = defaults.scopes;
    	      this.tokenBinding = defaults.tokenBinding;
    	      this.tokenUrl = defaults.tokenUrl;
    	      this.type = defaults.type;
    	      this.userInfoBinding = defaults.userInfoBinding;
    	      this.userInfoUrl = defaults.userInfoUrl;
        }

        public Builder authorizationBinding(String authorizationBinding) {
            this.authorizationBinding = Objects.requireNonNull(authorizationBinding);
            return this;
        }
        public Builder authorizationUrl(String authorizationUrl) {
            this.authorizationUrl = Objects.requireNonNull(authorizationUrl);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder issuerMode(String issuerMode) {
            this.issuerMode = Objects.requireNonNull(issuerMode);
            return this;
        }
        public Builder issuerUrl(String issuerUrl) {
            this.issuerUrl = Objects.requireNonNull(issuerUrl);
            return this;
        }
        public Builder jwksBinding(String jwksBinding) {
            this.jwksBinding = Objects.requireNonNull(jwksBinding);
            return this;
        }
        public Builder jwksUrl(String jwksUrl) {
            this.jwksUrl = Objects.requireNonNull(jwksUrl);
            return this;
        }
        public Builder maxClockSkew(Integer maxClockSkew) {
            this.maxClockSkew = Objects.requireNonNull(maxClockSkew);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder protocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }
        public Builder scopes(List<String> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        public Builder tokenBinding(String tokenBinding) {
            this.tokenBinding = Objects.requireNonNull(tokenBinding);
            return this;
        }
        public Builder tokenUrl(String tokenUrl) {
            this.tokenUrl = Objects.requireNonNull(tokenUrl);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userInfoBinding(String userInfoBinding) {
            this.userInfoBinding = Objects.requireNonNull(userInfoBinding);
            return this;
        }
        public Builder userInfoUrl(String userInfoUrl) {
            this.userInfoUrl = Objects.requireNonNull(userInfoUrl);
            return this;
        }        public GetOidcResult build() {
            return new GetOidcResult(authorizationBinding, authorizationUrl, clientId, clientSecret, id, issuerMode, issuerUrl, jwksBinding, jwksUrl, maxClockSkew, name, protocolType, scopes, tokenBinding, tokenUrl, type, userInfoBinding, userInfoUrl);
        }
    }
}
