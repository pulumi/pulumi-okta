// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkValueState extends com.pulumi.resources.ResourceArgs {

    public static final LinkValueState Empty = new LinkValueState();

    /**
     * Set of User IDs or login values of the users to be assigned the &#39;associated&#39; relationship.
     * 
     */
    @Import(name="associatedUserIds")
    private @Nullable Output<List<String>> associatedUserIds;

    /**
     * @return Set of User IDs or login values of the users to be assigned the &#39;associated&#39; relationship.
     * 
     */
    public Optional<Output<List<String>>> associatedUserIds() {
        return Optional.ofNullable(this.associatedUserIds);
    }

    /**
     * Name of the &#39;primary&#39; relationship being assigned.
     * 
     */
    @Import(name="primaryName")
    private @Nullable Output<String> primaryName;

    /**
     * @return Name of the &#39;primary&#39; relationship being assigned.
     * 
     */
    public Optional<Output<String>> primaryName() {
        return Optional.ofNullable(this.primaryName);
    }

    /**
     * User ID to be assigned to &#39;primary&#39; for the &#39;associated&#39; user in the specified relationship.
     * 
     */
    @Import(name="primaryUserId")
    private @Nullable Output<String> primaryUserId;

    /**
     * @return User ID to be assigned to &#39;primary&#39; for the &#39;associated&#39; user in the specified relationship.
     * 
     */
    public Optional<Output<String>> primaryUserId() {
        return Optional.ofNullable(this.primaryUserId);
    }

    private LinkValueState() {}

    private LinkValueState(LinkValueState $) {
        this.associatedUserIds = $.associatedUserIds;
        this.primaryName = $.primaryName;
        this.primaryUserId = $.primaryUserId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkValueState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkValueState $;

        public Builder() {
            $ = new LinkValueState();
        }

        public Builder(LinkValueState defaults) {
            $ = new LinkValueState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the &#39;associated&#39; relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(@Nullable Output<List<String>> associatedUserIds) {
            $.associatedUserIds = associatedUserIds;
            return this;
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the &#39;associated&#39; relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(List<String> associatedUserIds) {
            return associatedUserIds(Output.of(associatedUserIds));
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the &#39;associated&#39; relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(String... associatedUserIds) {
            return associatedUserIds(List.of(associatedUserIds));
        }

        /**
         * @param primaryName Name of the &#39;primary&#39; relationship being assigned.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(@Nullable Output<String> primaryName) {
            $.primaryName = primaryName;
            return this;
        }

        /**
         * @param primaryName Name of the &#39;primary&#39; relationship being assigned.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(String primaryName) {
            return primaryName(Output.of(primaryName));
        }

        /**
         * @param primaryUserId User ID to be assigned to &#39;primary&#39; for the &#39;associated&#39; user in the specified relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryUserId(@Nullable Output<String> primaryUserId) {
            $.primaryUserId = primaryUserId;
            return this;
        }

        /**
         * @param primaryUserId User ID to be assigned to &#39;primary&#39; for the &#39;associated&#39; user in the specified relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryUserId(String primaryUserId) {
            return primaryUserId(Output.of(primaryUserId));
        }

        public LinkValueState build() {
            return $;
        }
    }

}
