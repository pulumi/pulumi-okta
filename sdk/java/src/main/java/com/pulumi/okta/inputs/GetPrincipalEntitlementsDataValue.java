// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetPrincipalEntitlementsDataValue extends com.pulumi.resources.InvokeArgs {

    public static final GetPrincipalEntitlementsDataValue Empty = new GetPrincipalEntitlementsDataValue();

    /**
     * The description of an entitlement property.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return The description of an entitlement property.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * The value of an entitlement property value.
     * 
     */
    @Import(name="externalValue", required=true)
    private String externalValue;

    /**
     * @return The value of an entitlement property value.
     * 
     */
    public String externalValue() {
        return this.externalValue;
    }

    /**
     * The id of an entitlement value.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The id of an entitlement value.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The name of an entitlement value.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of an entitlement value.
     * 
     */
    public String name() {
        return this.name;
    }

    private GetPrincipalEntitlementsDataValue() {}

    private GetPrincipalEntitlementsDataValue(GetPrincipalEntitlementsDataValue $) {
        this.description = $.description;
        this.externalValue = $.externalValue;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrincipalEntitlementsDataValue defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrincipalEntitlementsDataValue $;

        public Builder() {
            $ = new GetPrincipalEntitlementsDataValue();
        }

        public Builder(GetPrincipalEntitlementsDataValue defaults) {
            $ = new GetPrincipalEntitlementsDataValue(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of an entitlement property.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param externalValue The value of an entitlement property value.
         * 
         * @return builder
         * 
         */
        public Builder externalValue(String externalValue) {
            $.externalValue = externalValue;
            return this;
        }

        /**
         * @param id The id of an entitlement value.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of an entitlement value.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GetPrincipalEntitlementsDataValue build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataValue", "description");
            }
            if ($.externalValue == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataValue", "externalValue");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataValue", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsDataValue", "name");
            }
            return $;
        }
    }

}
