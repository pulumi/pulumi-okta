// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLogStreamSettings {
    /**
     * @return AWS account ID. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    private String accountId;
    /**
     * @return Edition of the Splunk Cloud instance. Could be one of: &#39;aws&#39;, &#39;aws*govcloud&#39;, &#39;gcp&#39;. Required only for &#39;splunk*cloud_logstreaming&#39; type
     * 
     */
    private String edition;
    /**
     * @return An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    private String eventSourceName;
    /**
     * @return The domain name for Splunk Cloud instance. Don&#39;t include http or https in the string. For example: &#39;acme.splunkcloud.com&#39;. Required only for &#39;splunk*cloud*logstreaming&#39; type
     * 
     */
    private String host;
    /**
     * @return The destination AWS region where event source is located. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    private String region;
    /**
     * @return The HEC token for your Splunk Cloud HTTP Event Collector. Required only for &#39;splunk*cloud*logstreaming&#39; type
     * 
     */
    private String token;

    private GetLogStreamSettings() {}
    /**
     * @return AWS account ID. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Edition of the Splunk Cloud instance. Could be one of: &#39;aws&#39;, &#39;aws*govcloud&#39;, &#39;gcp&#39;. Required only for &#39;splunk*cloud_logstreaming&#39; type
     * 
     */
    public String edition() {
        return this.edition;
    }
    /**
     * @return An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    public String eventSourceName() {
        return this.eventSourceName;
    }
    /**
     * @return The domain name for Splunk Cloud instance. Don&#39;t include http or https in the string. For example: &#39;acme.splunkcloud.com&#39;. Required only for &#39;splunk*cloud*logstreaming&#39; type
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The destination AWS region where event source is located. Required only for &#39;aws_eventbridge&#39; type
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The HEC token for your Splunk Cloud HTTP Event Collector. Required only for &#39;splunk*cloud*logstreaming&#39; type
     * 
     */
    public String token() {
        return this.token;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogStreamSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String edition;
        private String eventSourceName;
        private String host;
        private String region;
        private String token;
        public Builder() {}
        public Builder(GetLogStreamSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.edition = defaults.edition;
    	      this.eventSourceName = defaults.eventSourceName;
    	      this.host = defaults.host;
    	      this.region = defaults.region;
    	      this.token = defaults.token;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder eventSourceName(String eventSourceName) {
            if (eventSourceName == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "eventSourceName");
            }
            this.eventSourceName = eventSourceName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetLogStreamSettings", "token");
            }
            this.token = token;
            return this;
        }
        public GetLogStreamSettings build() {
            final var _resultValue = new GetLogStreamSettings();
            _resultValue.accountId = accountId;
            _resultValue.edition = edition;
            _resultValue.eventSourceName = eventSourceName;
            _resultValue.host = host;
            _resultValue.region = region;
            _resultValue.token = token;
            return _resultValue;
        }
    }
}
