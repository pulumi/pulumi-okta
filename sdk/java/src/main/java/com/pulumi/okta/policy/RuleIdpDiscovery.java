// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.policy.RuleIdpDiscoveryArgs;
import com.pulumi.okta.policy.inputs.RuleIdpDiscoveryState;
import com.pulumi.okta.policy.outputs.RuleIdpDiscoveryAppExclude;
import com.pulumi.okta.policy.outputs.RuleIdpDiscoveryAppInclude;
import com.pulumi.okta.policy.outputs.RuleIdpDiscoveryPlatformInclude;
import com.pulumi.okta.policy.outputs.RuleIdpDiscoveryUserIdentifierPattern;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and configure an IdP Discovery Policy Rule.
 * 
 * &gt; If you receive the error `You do not have permission to access the feature
 * you are requesting` contact support and
 * request feature flag `ADVANCED_SSO` be applied to your org.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.policy.PolicyFunctions;
 * import com.pulumi.okta.policy.inputs.GetPolicyArgs;
 * import com.pulumi.okta.policy.RuleIdpDiscovery;
 * import com.pulumi.okta.policy.RuleIdpDiscoveryArgs;
 * import com.pulumi.okta.policy.inputs.RuleIdpDiscoveryAppExcludeArgs;
 * import com.pulumi.okta.policy.inputs.RuleIdpDiscoveryAppIncludeArgs;
 * import com.pulumi.okta.policy.inputs.RuleIdpDiscoveryPlatformIncludeArgs;
 * import com.pulumi.okta.policy.inputs.RuleIdpDiscoveryUserIdentifierPatternArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var idpDiscoveryPolicy = PolicyFunctions.getPolicy(GetPolicyArgs.builder()
 *             .name(&#34;Idp Discovery Policy&#34;)
 *             .type(&#34;IDP_DISCOVERY&#34;)
 *             .build());
 * 
 *         var example = new RuleIdpDiscovery(&#34;example&#34;, RuleIdpDiscoveryArgs.builder()        
 *             .policyId(idpDiscoveryPolicy.applyValue(getPolicyResult -&gt; getPolicyResult.id()))
 *             .idpId(&#34;&lt;idp id&gt;&#34;)
 *             .idpType(&#34;OIDC&#34;)
 *             .networkConnection(&#34;ANYWHERE&#34;)
 *             .priority(1)
 *             .status(&#34;ACTIVE&#34;)
 *             .userIdentifierType(&#34;ATTRIBUTE&#34;)
 *             .userIdentifierAttribute(&#34;company&#34;)
 *             .appExcludes(            
 *                 RuleIdpDiscoveryAppExcludeArgs.builder()
 *                     .id(&#34;&lt;app id&gt;&#34;)
 *                     .type(&#34;APP&#34;)
 *                     .build(),
 *                 RuleIdpDiscoveryAppExcludeArgs.builder()
 *                     .name(&#34;yahoo_mail&#34;)
 *                     .type(&#34;APP_TYPE&#34;)
 *                     .build())
 *             .appIncludes(            
 *                 RuleIdpDiscoveryAppIncludeArgs.builder()
 *                     .id(&#34;&lt;app id&gt;&#34;)
 *                     .type(&#34;APP&#34;)
 *                     .build(),
 *                 RuleIdpDiscoveryAppIncludeArgs.builder()
 *                     .name(&#34;&lt;app type name&gt;&#34;)
 *                     .type(&#34;APP_TYPE&#34;)
 *                     .build())
 *             .platformIncludes(RuleIdpDiscoveryPlatformIncludeArgs.builder()
 *                 .type(&#34;MOBILE&#34;)
 *                 .osType(&#34;OSX&#34;)
 *                 .build())
 *             .userIdentifierPatterns(RuleIdpDiscoveryUserIdentifierPatternArgs.builder()
 *                 .matchType(&#34;EQUALS&#34;)
 *                 .value(&#34;Articulate&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Policy Rule can be imported via the Policy and Rule ID.
 * 
 * ```sh
 * $ pulumi import okta:policy/ruleIdpDiscovery:RuleIdpDiscovery example &amp;#60;policy id&amp;#62;/&amp;#60;rule id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:policy/ruleIdpDiscovery:RuleIdpDiscovery")
public class RuleIdpDiscovery extends com.pulumi.resources.CustomResource {
    /**
     * Applications to exclude in discovery. See `app_include` for details.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    @Export(name="appExcludes", refs={List.class,RuleIdpDiscoveryAppExclude.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleIdpDiscoveryAppExclude>> appExcludes;

    /**
     * @return Applications to exclude in discovery. See `app_include` for details.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public Output<Optional<List<RuleIdpDiscoveryAppExclude>>> appExcludes() {
        return Codegen.optional(this.appExcludes);
    }
    /**
     * Applications to include in discovery rule.
     * 
     */
    @Export(name="appIncludes", refs={List.class,RuleIdpDiscoveryAppInclude.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleIdpDiscoveryAppInclude>> appIncludes;

    /**
     * @return Applications to include in discovery rule.
     * 
     */
    public Output<Optional<List<RuleIdpDiscoveryAppInclude>>> appIncludes() {
        return Codegen.optional(this.appIncludes);
    }
    /**
     * The identifier for the Idp the rule should route to if all conditions are met.
     * 
     */
    @Export(name="idpId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idpId;

    /**
     * @return The identifier for the Idp the rule should route to if all conditions are met.
     * 
     */
    public Output<Optional<String>> idpId() {
        return Codegen.optional(this.idpId);
    }
    /**
     * Type of Idp. One of: `&#34;SAML2&#34;`, `&#34;IWA&#34;`, `&#34;AgentlessDSSO&#34;`, `&#34;X509&#34;`, `&#34;FACEBOOK&#34;`, `&#34;GOOGLE&#34;`, `&#34;LINKEDIN&#34;`, `&#34;MICROSOFT&#34;`, `&#34;OIDC&#34;`
     * 
     */
    @Export(name="idpType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idpType;

    /**
     * @return Type of Idp. One of: `&#34;SAML2&#34;`, `&#34;IWA&#34;`, `&#34;AgentlessDSSO&#34;`, `&#34;X509&#34;`, `&#34;FACEBOOK&#34;`, `&#34;GOOGLE&#34;`, `&#34;LINKEDIN&#34;`, `&#34;MICROSOFT&#34;`, `&#34;OIDC&#34;`
     * 
     */
    public Output<Optional<String>> idpType() {
        return Codegen.optional(this.idpType);
    }
    /**
     * Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The network selection mode. One of `&#34;ANYWEHRE&#34;` or `&#34;ZONE&#34;`.
     * 
     */
    @Export(name="networkConnection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> networkConnection;

    /**
     * @return The network selection mode. One of `&#34;ANYWEHRE&#34;` or `&#34;ZONE&#34;`.
     * 
     */
    public Output<Optional<String>> networkConnection() {
        return Codegen.optional(this.networkConnection);
    }
    /**
     * Required if `network_connection` = `&#34;ZONE&#34;`. Indicates the network zones to exclude.
     * 
     */
    @Export(name="networkExcludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> networkExcludes;

    /**
     * @return Required if `network_connection` = `&#34;ZONE&#34;`. Indicates the network zones to exclude.
     * 
     */
    public Output<Optional<List<String>>> networkExcludes() {
        return Codegen.optional(this.networkExcludes);
    }
    /**
     * Required if `network_connection` = `&#34;ZONE&#34;`. Indicates the network zones to include.
     * 
     */
    @Export(name="networkIncludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> networkIncludes;

    /**
     * @return Required if `network_connection` = `&#34;ZONE&#34;`. Indicates the network zones to include.
     * 
     */
    public Output<Optional<List<String>>> networkIncludes() {
        return Codegen.optional(this.networkIncludes);
    }
    /**
     * Platform to include in discovery rule. - &#39;type&#39; - (Optional) One of: &#39;ANY&#39;, &#39;MOBILE&#39;, &#39;DESKTOP&#39; - &#39;os_expression -
     * (Optional) Only available when using os_type = &#39;OTHER&#39; - &#39;os_type&#39; - (Optional) One of: &#39;ANY&#39;, &#39;IOS&#39;, &#39;WINDOWS&#39;,
     * &#39;ANDROID&#39;, &#39;OTHER&#39;, &#39;OSX&#39;
     * 
     */
    @Export(name="platformIncludes", refs={List.class,RuleIdpDiscoveryPlatformInclude.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleIdpDiscoveryPlatformInclude>> platformIncludes;

    /**
     * @return Platform to include in discovery rule. - &#39;type&#39; - (Optional) One of: &#39;ANY&#39;, &#39;MOBILE&#39;, &#39;DESKTOP&#39; - &#39;os_expression -
     * (Optional) Only available when using os_type = &#39;OTHER&#39; - &#39;os_type&#39; - (Optional) One of: &#39;ANY&#39;, &#39;IOS&#39;, &#39;WINDOWS&#39;,
     * &#39;ANDROID&#39;, &#39;OTHER&#39;, &#39;OSX&#39;
     * 
     */
    public Output<Optional<List<RuleIdpDiscoveryPlatformInclude>>> platformIncludes() {
        return Codegen.optional(this.platformIncludes);
    }
    /**
     * Policy ID.
     * 
     */
    @Export(name="policyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> policyId;

    /**
     * @return Policy ID.
     * 
     */
    public Output<Optional<String>> policyId() {
        return Codegen.optional(this.policyId);
    }
    /**
     * Idp rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return Idp rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    /**
     * Idp rule status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`. By default, it is `&#34;ACTIVE&#34;`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Idp rule status: `&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`. By default, it is `&#34;ACTIVE&#34;`.
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Profile attribute matching can only have a single value that describes the type indicated in `user_identifier_type`. This is the attribute or identifier that the `user_identifier_patterns` are checked against.
     * 
     */
    @Export(name="userIdentifierAttribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userIdentifierAttribute;

    /**
     * @return Profile attribute matching can only have a single value that describes the type indicated in `user_identifier_type`. This is the attribute or identifier that the `user_identifier_patterns` are checked against.
     * 
     */
    public Output<Optional<String>> userIdentifierAttribute() {
        return Codegen.optional(this.userIdentifierAttribute);
    }
    /**
     * Specifies a User Identifier pattern condition to match against. If `match_type` of `&#34;EXPRESSION&#34;` is used, only a *single* element can be set, otherwise multiple elements of matching patterns may be provided.
     * 
     */
    @Export(name="userIdentifierPatterns", refs={List.class,RuleIdpDiscoveryUserIdentifierPattern.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleIdpDiscoveryUserIdentifierPattern>> userIdentifierPatterns;

    /**
     * @return Specifies a User Identifier pattern condition to match against. If `match_type` of `&#34;EXPRESSION&#34;` is used, only a *single* element can be set, otherwise multiple elements of matching patterns may be provided.
     * 
     */
    public Output<Optional<List<RuleIdpDiscoveryUserIdentifierPattern>>> userIdentifierPatterns() {
        return Codegen.optional(this.userIdentifierPatterns);
    }
    /**
     * One of: `&#34;IDENTIFIER&#34;`, `&#34;ATTRIBUTE&#34;`
     * 
     */
    @Export(name="userIdentifierType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userIdentifierType;

    /**
     * @return One of: `&#34;IDENTIFIER&#34;`, `&#34;ATTRIBUTE&#34;`
     * 
     */
    public Output<Optional<String>> userIdentifierType() {
        return Codegen.optional(this.userIdentifierType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RuleIdpDiscovery(String name) {
        this(name, RuleIdpDiscoveryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RuleIdpDiscovery(String name, @Nullable RuleIdpDiscoveryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RuleIdpDiscovery(String name, @Nullable RuleIdpDiscoveryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, args == null ? RuleIdpDiscoveryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RuleIdpDiscovery(String name, Output<String> id, @Nullable RuleIdpDiscoveryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RuleIdpDiscovery get(String name, Output<String> id, @Nullable RuleIdpDiscoveryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RuleIdpDiscovery(name, id, state, options);
    }
}
