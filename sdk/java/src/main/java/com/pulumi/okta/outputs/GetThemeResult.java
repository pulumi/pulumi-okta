// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetThemeResult {
    /**
     * @return Background image URL
     * 
     */
    private String backgroundImageUrl;
    private String brandId;
    /**
     * @return (Enum) Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     * 
     */
    private String emailTemplateTouchPointVariant;
    /**
     * @return (Enum) Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     * 
     */
    private String endUserDashboardTouchPointVariant;
    /**
     * @return (Enum) Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    private String errorPageTouchPointVariant;
    /**
     * @return Favicon URL
     * 
     */
    private String faviconUrl;
    /**
     * @return Theme URL
     * 
     */
    private String id;
    /**
     * @return Link relations for this object - JSON HAL - Discoverable resources related to the brand
     * 
     */
    private String links;
    /**
     * @return Logo URL
     * 
     */
    private String logoUrl;
    /**
     * @return Primary color contrast hex code
     * 
     */
    private String primaryColorContrastHex;
    /**
     * @return Primary color hex code
     * 
     */
    private String primaryColorHex;
    /**
     * @return Secondary color contrast hex code
     * 
     */
    private String secondaryColorContrastHex;
    /**
     * @return Secondary color hex code
     * 
     */
    private String secondaryColorHex;
    /**
     * @return (Enum) Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    private String signInPageTouchPointVariant;
    private String themeId;

    private GetThemeResult() {}
    /**
     * @return Background image URL
     * 
     */
    public String backgroundImageUrl() {
        return this.backgroundImageUrl;
    }
    public String brandId() {
        return this.brandId;
    }
    /**
     * @return (Enum) Variant for email templates (`OKTA_DEFAULT`, `FULL_THEME`)
     * 
     */
    public String emailTemplateTouchPointVariant() {
        return this.emailTemplateTouchPointVariant;
    }
    /**
     * @return (Enum) Variant for the Okta End-User Dashboard (`OKTA_DEFAULT`, `WHITE_LOGO_BACKGROUND`, `FULL_THEME`, `LOGO_ON_FULL_WHITE_BACKGROUND`)
     * 
     */
    public String endUserDashboardTouchPointVariant() {
        return this.endUserDashboardTouchPointVariant;
    }
    /**
     * @return (Enum) Variant for the error page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    public String errorPageTouchPointVariant() {
        return this.errorPageTouchPointVariant;
    }
    /**
     * @return Favicon URL
     * 
     */
    public String faviconUrl() {
        return this.faviconUrl;
    }
    /**
     * @return Theme URL
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Link relations for this object - JSON HAL - Discoverable resources related to the brand
     * 
     */
    public String links() {
        return this.links;
    }
    /**
     * @return Logo URL
     * 
     */
    public String logoUrl() {
        return this.logoUrl;
    }
    /**
     * @return Primary color contrast hex code
     * 
     */
    public String primaryColorContrastHex() {
        return this.primaryColorContrastHex;
    }
    /**
     * @return Primary color hex code
     * 
     */
    public String primaryColorHex() {
        return this.primaryColorHex;
    }
    /**
     * @return Secondary color contrast hex code
     * 
     */
    public String secondaryColorContrastHex() {
        return this.secondaryColorContrastHex;
    }
    /**
     * @return Secondary color hex code
     * 
     */
    public String secondaryColorHex() {
        return this.secondaryColorHex;
    }
    /**
     * @return (Enum) Variant for the Okta Sign-In Page (`OKTA_DEFAULT`, `BACKGROUND_SECONDARY_COLOR`, `BACKGROUND_IMAGE`)
     * 
     */
    public String signInPageTouchPointVariant() {
        return this.signInPageTouchPointVariant;
    }
    public String themeId() {
        return this.themeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetThemeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backgroundImageUrl;
        private String brandId;
        private String emailTemplateTouchPointVariant;
        private String endUserDashboardTouchPointVariant;
        private String errorPageTouchPointVariant;
        private String faviconUrl;
        private String id;
        private String links;
        private String logoUrl;
        private String primaryColorContrastHex;
        private String primaryColorHex;
        private String secondaryColorContrastHex;
        private String secondaryColorHex;
        private String signInPageTouchPointVariant;
        private String themeId;
        public Builder() {}
        public Builder(GetThemeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundImageUrl = defaults.backgroundImageUrl;
    	      this.brandId = defaults.brandId;
    	      this.emailTemplateTouchPointVariant = defaults.emailTemplateTouchPointVariant;
    	      this.endUserDashboardTouchPointVariant = defaults.endUserDashboardTouchPointVariant;
    	      this.errorPageTouchPointVariant = defaults.errorPageTouchPointVariant;
    	      this.faviconUrl = defaults.faviconUrl;
    	      this.id = defaults.id;
    	      this.links = defaults.links;
    	      this.logoUrl = defaults.logoUrl;
    	      this.primaryColorContrastHex = defaults.primaryColorContrastHex;
    	      this.primaryColorHex = defaults.primaryColorHex;
    	      this.secondaryColorContrastHex = defaults.secondaryColorContrastHex;
    	      this.secondaryColorHex = defaults.secondaryColorHex;
    	      this.signInPageTouchPointVariant = defaults.signInPageTouchPointVariant;
    	      this.themeId = defaults.themeId;
        }

        @CustomType.Setter
        public Builder backgroundImageUrl(String backgroundImageUrl) {
            if (backgroundImageUrl == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "backgroundImageUrl");
            }
            this.backgroundImageUrl = backgroundImageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder brandId(String brandId) {
            if (brandId == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "brandId");
            }
            this.brandId = brandId;
            return this;
        }
        @CustomType.Setter
        public Builder emailTemplateTouchPointVariant(String emailTemplateTouchPointVariant) {
            if (emailTemplateTouchPointVariant == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "emailTemplateTouchPointVariant");
            }
            this.emailTemplateTouchPointVariant = emailTemplateTouchPointVariant;
            return this;
        }
        @CustomType.Setter
        public Builder endUserDashboardTouchPointVariant(String endUserDashboardTouchPointVariant) {
            if (endUserDashboardTouchPointVariant == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "endUserDashboardTouchPointVariant");
            }
            this.endUserDashboardTouchPointVariant = endUserDashboardTouchPointVariant;
            return this;
        }
        @CustomType.Setter
        public Builder errorPageTouchPointVariant(String errorPageTouchPointVariant) {
            if (errorPageTouchPointVariant == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "errorPageTouchPointVariant");
            }
            this.errorPageTouchPointVariant = errorPageTouchPointVariant;
            return this;
        }
        @CustomType.Setter
        public Builder faviconUrl(String faviconUrl) {
            if (faviconUrl == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "faviconUrl");
            }
            this.faviconUrl = faviconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder links(String links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "links");
            }
            this.links = links;
            return this;
        }
        @CustomType.Setter
        public Builder logoUrl(String logoUrl) {
            if (logoUrl == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "logoUrl");
            }
            this.logoUrl = logoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder primaryColorContrastHex(String primaryColorContrastHex) {
            if (primaryColorContrastHex == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "primaryColorContrastHex");
            }
            this.primaryColorContrastHex = primaryColorContrastHex;
            return this;
        }
        @CustomType.Setter
        public Builder primaryColorHex(String primaryColorHex) {
            if (primaryColorHex == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "primaryColorHex");
            }
            this.primaryColorHex = primaryColorHex;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryColorContrastHex(String secondaryColorContrastHex) {
            if (secondaryColorContrastHex == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "secondaryColorContrastHex");
            }
            this.secondaryColorContrastHex = secondaryColorContrastHex;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryColorHex(String secondaryColorHex) {
            if (secondaryColorHex == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "secondaryColorHex");
            }
            this.secondaryColorHex = secondaryColorHex;
            return this;
        }
        @CustomType.Setter
        public Builder signInPageTouchPointVariant(String signInPageTouchPointVariant) {
            if (signInPageTouchPointVariant == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "signInPageTouchPointVariant");
            }
            this.signInPageTouchPointVariant = signInPageTouchPointVariant;
            return this;
        }
        @CustomType.Setter
        public Builder themeId(String themeId) {
            if (themeId == null) {
              throw new MissingRequiredPropertyException("GetThemeResult", "themeId");
            }
            this.themeId = themeId;
            return this;
        }
        public GetThemeResult build() {
            final var _resultValue = new GetThemeResult();
            _resultValue.backgroundImageUrl = backgroundImageUrl;
            _resultValue.brandId = brandId;
            _resultValue.emailTemplateTouchPointVariant = emailTemplateTouchPointVariant;
            _resultValue.endUserDashboardTouchPointVariant = endUserDashboardTouchPointVariant;
            _resultValue.errorPageTouchPointVariant = errorPageTouchPointVariant;
            _resultValue.faviconUrl = faviconUrl;
            _resultValue.id = id;
            _resultValue.links = links;
            _resultValue.logoUrl = logoUrl;
            _resultValue.primaryColorContrastHex = primaryColorContrastHex;
            _resultValue.primaryColorHex = primaryColorHex;
            _resultValue.secondaryColorContrastHex = secondaryColorContrastHex;
            _resultValue.secondaryColorHex = secondaryColorHex;
            _resultValue.signInPageTouchPointVariant = signInPageTouchPointVariant;
            _resultValue.themeId = themeId;
            return _resultValue;
        }
    }
}
