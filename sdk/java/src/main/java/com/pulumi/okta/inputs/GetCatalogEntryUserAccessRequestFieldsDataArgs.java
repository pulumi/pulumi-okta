// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogEntryUserAccessRequestFieldsDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCatalogEntryUserAccessRequestFieldsDataArgs Empty = new GetCatalogEntryUserAccessRequestFieldsDataArgs();

    /**
     * Valid choices when type is SELECT or MULTISELECT.
     * 
     */
    @Import(name="choices")
    private @Nullable Output<List<GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs>> choices;

    /**
     * @return Valid choices when type is SELECT or MULTISELECT.
     * 
     */
    public Optional<Output<List<GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs>>> choices() {
        return Optional.ofNullable(this.choices);
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    /**
     * Label of the requester field.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Label of the requester field.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The maximum value allowed for this field. Only applies to DURATION fields.
     * 
     */
    @Import(name="maximumValue", required=true)
    private Output<String> maximumValue;

    /**
     * @return The maximum value allowed for this field. Only applies to DURATION fields.
     * 
     */
    public Output<String> maximumValue() {
        return this.maximumValue;
    }

    /**
     * Indicates this field is immutable.
     * 
     */
    @Import(name="readOnly", required=true)
    private Output<Boolean> readOnly;

    /**
     * @return Indicates this field is immutable.
     * 
     */
    public Output<Boolean> readOnly() {
        return this.readOnly;
    }

    /**
     * Indicates whether a value to this field is required to advance the request.
     * 
     */
    @Import(name="required", required=true)
    private Output<Boolean> required;

    /**
     * @return Indicates whether a value to this field is required to advance the request.
     * 
     */
    public Output<Boolean> required() {
        return this.required;
    }

    /**
     * Type of value for the requester field.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of value for the requester field.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * An admin configured value for this field. Only applies to DURATION fields.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return An admin configured value for this field. Only applies to DURATION fields.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private GetCatalogEntryUserAccessRequestFieldsDataArgs() {}

    private GetCatalogEntryUserAccessRequestFieldsDataArgs(GetCatalogEntryUserAccessRequestFieldsDataArgs $) {
        this.choices = $.choices;
        this.id = $.id;
        this.label = $.label;
        this.maximumValue = $.maximumValue;
        this.readOnly = $.readOnly;
        this.required = $.required;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogEntryUserAccessRequestFieldsDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogEntryUserAccessRequestFieldsDataArgs $;

        public Builder() {
            $ = new GetCatalogEntryUserAccessRequestFieldsDataArgs();
        }

        public Builder(GetCatalogEntryUserAccessRequestFieldsDataArgs defaults) {
            $ = new GetCatalogEntryUserAccessRequestFieldsDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param choices Valid choices when type is SELECT or MULTISELECT.
         * 
         * @return builder
         * 
         */
        public Builder choices(@Nullable Output<List<GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs>> choices) {
            $.choices = choices;
            return this;
        }

        /**
         * @param choices Valid choices when type is SELECT or MULTISELECT.
         * 
         * @return builder
         * 
         */
        public Builder choices(List<GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs> choices) {
            return choices(Output.of(choices));
        }

        /**
         * @param choices Valid choices when type is SELECT or MULTISELECT.
         * 
         * @return builder
         * 
         */
        public Builder choices(GetCatalogEntryUserAccessRequestFieldsDataChoiceArgs... choices) {
            return choices(List.of(choices));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label Label of the requester field.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label of the requester field.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param maximumValue The maximum value allowed for this field. Only applies to DURATION fields.
         * 
         * @return builder
         * 
         */
        public Builder maximumValue(Output<String> maximumValue) {
            $.maximumValue = maximumValue;
            return this;
        }

        /**
         * @param maximumValue The maximum value allowed for this field. Only applies to DURATION fields.
         * 
         * @return builder
         * 
         */
        public Builder maximumValue(String maximumValue) {
            return maximumValue(Output.of(maximumValue));
        }

        /**
         * @param readOnly Indicates this field is immutable.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly Indicates this field is immutable.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param required Indicates whether a value to this field is required to advance the request.
         * 
         * @return builder
         * 
         */
        public Builder required(Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Indicates whether a value to this field is required to advance the request.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param type Type of value for the requester field.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of value for the requester field.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value An admin configured value for this field. Only applies to DURATION fields.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value An admin configured value for this field. Only applies to DURATION fields.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public GetCatalogEntryUserAccessRequestFieldsDataArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "id");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "label");
            }
            if ($.maximumValue == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "maximumValue");
            }
            if ($.readOnly == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "readOnly");
            }
            if ($.required == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "required");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("GetCatalogEntryUserAccessRequestFieldsDataArgs", "value");
            }
            return $;
        }
    }

}
