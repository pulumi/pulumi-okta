// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.PolicyRuleProfileEnrollmentProfileAttributeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyRuleProfileEnrollmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyRuleProfileEnrollmentArgs Empty = new PolicyRuleProfileEnrollmentArgs();

    /**
     * Allow or deny access based on the rule conditions. Valid values are: `&#34;ALLOW&#34;`, `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return Allow or deny access based on the rule conditions. Valid values are: `&#34;ALLOW&#34;`, `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * Indicates whether email verification should occur before access is granted. Default is `true`.
     * 
     */
    @Import(name="emailVerification")
    private @Nullable Output<Boolean> emailVerification;

    /**
     * @return Indicates whether email verification should occur before access is granted. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> emailVerification() {
        return Optional.ofNullable(this.emailVerification);
    }

    /**
     * ID of a Registration Inline Hook.
     * 
     */
    @Import(name="inlineHookId")
    private @Nullable Output<String> inlineHookId;

    /**
     * @return ID of a Registration Inline Hook.
     * 
     */
    public Optional<Output<String>> inlineHookId() {
        return Optional.ofNullable(this.inlineHookId);
    }

    /**
     * Policy ID.
     * 
     */
    @Import(name="policyId", required=true)
    private Output<String> policyId;

    /**
     * @return Policy ID.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }

    /**
     * A list of attributes to prompt the user during registration or progressive profiling.
     * 
     */
    @Import(name="profileAttributes")
    private @Nullable Output<List<PolicyRuleProfileEnrollmentProfileAttributeArgs>> profileAttributes;

    /**
     * @return A list of attributes to prompt the user during registration or progressive profiling.
     * 
     */
    public Optional<Output<List<PolicyRuleProfileEnrollmentProfileAttributeArgs>>> profileAttributes() {
        return Optional.ofNullable(this.profileAttributes);
    }

    /**
     * The ID of a Group that this User should be added to.
     * 
     */
    @Import(name="targetGroupId")
    private @Nullable Output<String> targetGroupId;

    /**
     * @return The ID of a Group that this User should be added to.
     * 
     */
    public Optional<Output<String>> targetGroupId() {
        return Optional.ofNullable(this.targetGroupId);
    }

    /**
     * Which action should be taken if this User is new. Valid values are: `&#34;DENY&#34;`, `&#34;REGISTER&#34;`.
     * 
     */
    @Import(name="unknownUserAction", required=true)
    private Output<String> unknownUserAction;

    /**
     * @return Which action should be taken if this User is new. Valid values are: `&#34;DENY&#34;`, `&#34;REGISTER&#34;`.
     * 
     */
    public Output<String> unknownUserAction() {
        return this.unknownUserAction;
    }

    private PolicyRuleProfileEnrollmentArgs() {}

    private PolicyRuleProfileEnrollmentArgs(PolicyRuleProfileEnrollmentArgs $) {
        this.access = $.access;
        this.emailVerification = $.emailVerification;
        this.inlineHookId = $.inlineHookId;
        this.policyId = $.policyId;
        this.profileAttributes = $.profileAttributes;
        this.targetGroupId = $.targetGroupId;
        this.unknownUserAction = $.unknownUserAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyRuleProfileEnrollmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyRuleProfileEnrollmentArgs $;

        public Builder() {
            $ = new PolicyRuleProfileEnrollmentArgs();
        }

        public Builder(PolicyRuleProfileEnrollmentArgs defaults) {
            $ = new PolicyRuleProfileEnrollmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Allow or deny access based on the rule conditions. Valid values are: `&#34;ALLOW&#34;`, `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Allow or deny access based on the rule conditions. Valid values are: `&#34;ALLOW&#34;`, `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param emailVerification Indicates whether email verification should occur before access is granted. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder emailVerification(@Nullable Output<Boolean> emailVerification) {
            $.emailVerification = emailVerification;
            return this;
        }

        /**
         * @param emailVerification Indicates whether email verification should occur before access is granted. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder emailVerification(Boolean emailVerification) {
            return emailVerification(Output.of(emailVerification));
        }

        /**
         * @param inlineHookId ID of a Registration Inline Hook.
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(@Nullable Output<String> inlineHookId) {
            $.inlineHookId = inlineHookId;
            return this;
        }

        /**
         * @param inlineHookId ID of a Registration Inline Hook.
         * 
         * @return builder
         * 
         */
        public Builder inlineHookId(String inlineHookId) {
            return inlineHookId(Output.of(inlineHookId));
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId Policy ID.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param profileAttributes A list of attributes to prompt the user during registration or progressive profiling.
         * 
         * @return builder
         * 
         */
        public Builder profileAttributes(@Nullable Output<List<PolicyRuleProfileEnrollmentProfileAttributeArgs>> profileAttributes) {
            $.profileAttributes = profileAttributes;
            return this;
        }

        /**
         * @param profileAttributes A list of attributes to prompt the user during registration or progressive profiling.
         * 
         * @return builder
         * 
         */
        public Builder profileAttributes(List<PolicyRuleProfileEnrollmentProfileAttributeArgs> profileAttributes) {
            return profileAttributes(Output.of(profileAttributes));
        }

        /**
         * @param profileAttributes A list of attributes to prompt the user during registration or progressive profiling.
         * 
         * @return builder
         * 
         */
        public Builder profileAttributes(PolicyRuleProfileEnrollmentProfileAttributeArgs... profileAttributes) {
            return profileAttributes(List.of(profileAttributes));
        }

        /**
         * @param targetGroupId The ID of a Group that this User should be added to.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupId(@Nullable Output<String> targetGroupId) {
            $.targetGroupId = targetGroupId;
            return this;
        }

        /**
         * @param targetGroupId The ID of a Group that this User should be added to.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupId(String targetGroupId) {
            return targetGroupId(Output.of(targetGroupId));
        }

        /**
         * @param unknownUserAction Which action should be taken if this User is new. Valid values are: `&#34;DENY&#34;`, `&#34;REGISTER&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder unknownUserAction(Output<String> unknownUserAction) {
            $.unknownUserAction = unknownUserAction;
            return this;
        }

        /**
         * @param unknownUserAction Which action should be taken if this User is new. Valid values are: `&#34;DENY&#34;`, `&#34;REGISTER&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder unknownUserAction(String unknownUserAction) {
            return unknownUserAction(Output.of(unknownUserAction));
        }

        public PolicyRuleProfileEnrollmentArgs build() {
            $.policyId = Objects.requireNonNull($.policyId, "expected parameter 'policyId' to be non-null");
            $.unknownUserAction = Objects.requireNonNull($.unknownUserAction, "expected parameter 'unknownUserAction' to be non-null");
            return $;
        }
    }

}
