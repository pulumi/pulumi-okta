// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class OwnerArgs extends com.pulumi.resources.ResourceArgs {

    public static final OwnerArgs Empty = new OwnerArgs();

    /**
     * The id of the group
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The id of the group
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The user id of the group owner
     * 
     */
    @Import(name="idOfGroupOwner", required=true)
    private Output<String> idOfGroupOwner;

    /**
     * @return The user id of the group owner
     * 
     */
    public Output<String> idOfGroupOwner() {
        return this.idOfGroupOwner;
    }

    /**
     * The entity type of the owner. Enum: &#34;GROUP&#34; &#34;USER&#34;
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The entity type of the owner. Enum: &#34;GROUP&#34; &#34;USER&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OwnerArgs() {}

    private OwnerArgs(OwnerArgs $) {
        this.groupId = $.groupId;
        this.idOfGroupOwner = $.idOfGroupOwner;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OwnerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OwnerArgs $;

        public Builder() {
            $ = new OwnerArgs();
        }

        public Builder(OwnerArgs defaults) {
            $ = new OwnerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The id of the group
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The id of the group
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param idOfGroupOwner The user id of the group owner
         * 
         * @return builder
         * 
         */
        public Builder idOfGroupOwner(Output<String> idOfGroupOwner) {
            $.idOfGroupOwner = idOfGroupOwner;
            return this;
        }

        /**
         * @param idOfGroupOwner The user id of the group owner
         * 
         * @return builder
         * 
         */
        public Builder idOfGroupOwner(String idOfGroupOwner) {
            return idOfGroupOwner(Output.of(idOfGroupOwner));
        }

        /**
         * @param type The entity type of the owner. Enum: &#34;GROUP&#34; &#34;USER&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The entity type of the owner. Enum: &#34;GROUP&#34; &#34;USER&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OwnerArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("OwnerArgs", "groupId");
            }
            if ($.idOfGroupOwner == null) {
                throw new MissingRequiredPropertyException("OwnerArgs", "idOfGroupOwner");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("OwnerArgs", "type");
            }
            return $;
        }
    }

}
