// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.EmailSenderDnsRecordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailSenderState extends com.pulumi.resources.ResourceArgs {

    public static final EmailSenderState Empty = new EmailSenderState();

    /**
     * TXT and CNAME records to be registered for the domain.
     * 
     */
    @Import(name="dnsRecords")
    private @Nullable Output<List<EmailSenderDnsRecordArgs>> dnsRecords;

    /**
     * @return TXT and CNAME records to be registered for the domain.
     * 
     */
    public Optional<Output<List<EmailSenderDnsRecordArgs>>> dnsRecords() {
        return Optional.ofNullable(this.dnsRecords);
    }

    /**
     * Email address to send from.
     * 
     */
    @Import(name="fromAddress")
    private @Nullable Output<String> fromAddress;

    /**
     * @return Email address to send from.
     * 
     */
    public Optional<Output<String>> fromAddress() {
        return Optional.ofNullable(this.fromAddress);
    }

    /**
     * Name of sender.
     * 
     */
    @Import(name="fromName")
    private @Nullable Output<String> fromName;

    /**
     * @return Name of sender.
     * 
     */
    public Optional<Output<String>> fromName() {
        return Optional.ofNullable(this.fromName);
    }

    /**
     * Status of the sender (shows whether the sender is verified).
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the sender (shows whether the sender is verified).
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Mail domain to send from.
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    /**
     * @return Mail domain to send from.
     * 
     */
    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    private EmailSenderState() {}

    private EmailSenderState(EmailSenderState $) {
        this.dnsRecords = $.dnsRecords;
        this.fromAddress = $.fromAddress;
        this.fromName = $.fromName;
        this.status = $.status;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailSenderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailSenderState $;

        public Builder() {
            $ = new EmailSenderState();
        }

        public Builder(EmailSenderState defaults) {
            $ = new EmailSenderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsRecords TXT and CNAME records to be registered for the domain.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(@Nullable Output<List<EmailSenderDnsRecordArgs>> dnsRecords) {
            $.dnsRecords = dnsRecords;
            return this;
        }

        /**
         * @param dnsRecords TXT and CNAME records to be registered for the domain.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(List<EmailSenderDnsRecordArgs> dnsRecords) {
            return dnsRecords(Output.of(dnsRecords));
        }

        /**
         * @param dnsRecords TXT and CNAME records to be registered for the domain.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(EmailSenderDnsRecordArgs... dnsRecords) {
            return dnsRecords(List.of(dnsRecords));
        }

        /**
         * @param fromAddress Email address to send from.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(@Nullable Output<String> fromAddress) {
            $.fromAddress = fromAddress;
            return this;
        }

        /**
         * @param fromAddress Email address to send from.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(String fromAddress) {
            return fromAddress(Output.of(fromAddress));
        }

        /**
         * @param fromName Name of sender.
         * 
         * @return builder
         * 
         */
        public Builder fromName(@Nullable Output<String> fromName) {
            $.fromName = fromName;
            return this;
        }

        /**
         * @param fromName Name of sender.
         * 
         * @return builder
         * 
         */
        public Builder fromName(String fromName) {
            return fromName(Output.of(fromName));
        }

        /**
         * @param status Status of the sender (shows whether the sender is verified).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the sender (shows whether the sender is verified).
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subdomain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Mail domain to send from.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public EmailSenderState build() {
            return $;
        }
    }

}
