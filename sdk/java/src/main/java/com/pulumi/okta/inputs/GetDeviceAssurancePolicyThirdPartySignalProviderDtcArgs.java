// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs;
import com.pulumi.okta.inputs.GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs Empty = new GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs();

    @Import(name="allowScreenLock", required=true)
    private Output<Boolean> allowScreenLock;

    public Output<Boolean> allowScreenLock() {
        return this.allowScreenLock;
    }

    @Import(name="browserVersion", required=true)
    private Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs> browserVersion;

    public Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs> browserVersion() {
        return this.browserVersion;
    }

    @Import(name="builtInDnsClientEnabled", required=true)
    private Output<Boolean> builtInDnsClientEnabled;

    public Output<Boolean> builtInDnsClientEnabled() {
        return this.builtInDnsClientEnabled;
    }

    @Import(name="chromeRemoteDesktopAppBlocked", required=true)
    private Output<Boolean> chromeRemoteDesktopAppBlocked;

    public Output<Boolean> chromeRemoteDesktopAppBlocked() {
        return this.chromeRemoteDesktopAppBlocked;
    }

    @Import(name="crowdStrikeAgentId", required=true)
    private Output<String> crowdStrikeAgentId;

    public Output<String> crowdStrikeAgentId() {
        return this.crowdStrikeAgentId;
    }

    @Import(name="crowdStrikeCustomerId", required=true)
    private Output<String> crowdStrikeCustomerId;

    public Output<String> crowdStrikeCustomerId() {
        return this.crowdStrikeCustomerId;
    }

    @Import(name="deviceEnrollmentDomain", required=true)
    private Output<String> deviceEnrollmentDomain;

    public Output<String> deviceEnrollmentDomain() {
        return this.deviceEnrollmentDomain;
    }

    @Import(name="diskEncrypted", required=true)
    private Output<Boolean> diskEncrypted;

    public Output<Boolean> diskEncrypted() {
        return this.diskEncrypted;
    }

    @Import(name="keyTrustLevel", required=true)
    private Output<String> keyTrustLevel;

    public Output<String> keyTrustLevel() {
        return this.keyTrustLevel;
    }

    @Import(name="managedDevice", required=true)
    private Output<Boolean> managedDevice;

    public Output<Boolean> managedDevice() {
        return this.managedDevice;
    }

    @Import(name="osFirewall", required=true)
    private Output<Boolean> osFirewall;

    public Output<Boolean> osFirewall() {
        return this.osFirewall;
    }

    @Import(name="osVersion", required=true)
    private Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs> osVersion;

    public Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs> osVersion() {
        return this.osVersion;
    }

    @Import(name="passwordProtectionWarningTrigger", required=true)
    private Output<String> passwordProtectionWarningTrigger;

    public Output<String> passwordProtectionWarningTrigger() {
        return this.passwordProtectionWarningTrigger;
    }

    @Import(name="realtimeUrlCheckMode", required=true)
    private Output<Boolean> realtimeUrlCheckMode;

    public Output<Boolean> realtimeUrlCheckMode() {
        return this.realtimeUrlCheckMode;
    }

    @Import(name="safeBrowsingProtectionLevel", required=true)
    private Output<String> safeBrowsingProtectionLevel;

    public Output<String> safeBrowsingProtectionLevel() {
        return this.safeBrowsingProtectionLevel;
    }

    @Import(name="screenLockSecured", required=true)
    private Output<Boolean> screenLockSecured;

    public Output<Boolean> screenLockSecured() {
        return this.screenLockSecured;
    }

    @Import(name="siteIsolationEnabled", required=true)
    private Output<Boolean> siteIsolationEnabled;

    public Output<Boolean> siteIsolationEnabled() {
        return this.siteIsolationEnabled;
    }

    @Import(name="thirdPartyBlockingEnabled", required=true)
    private Output<Boolean> thirdPartyBlockingEnabled;

    public Output<Boolean> thirdPartyBlockingEnabled() {
        return this.thirdPartyBlockingEnabled;
    }

    @Import(name="windowsMachineDomain", required=true)
    private Output<String> windowsMachineDomain;

    public Output<String> windowsMachineDomain() {
        return this.windowsMachineDomain;
    }

    @Import(name="windowsUserDomain", required=true)
    private Output<String> windowsUserDomain;

    public Output<String> windowsUserDomain() {
        return this.windowsUserDomain;
    }

    private GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs() {}

    private GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs(GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs $) {
        this.allowScreenLock = $.allowScreenLock;
        this.browserVersion = $.browserVersion;
        this.builtInDnsClientEnabled = $.builtInDnsClientEnabled;
        this.chromeRemoteDesktopAppBlocked = $.chromeRemoteDesktopAppBlocked;
        this.crowdStrikeAgentId = $.crowdStrikeAgentId;
        this.crowdStrikeCustomerId = $.crowdStrikeCustomerId;
        this.deviceEnrollmentDomain = $.deviceEnrollmentDomain;
        this.diskEncrypted = $.diskEncrypted;
        this.keyTrustLevel = $.keyTrustLevel;
        this.managedDevice = $.managedDevice;
        this.osFirewall = $.osFirewall;
        this.osVersion = $.osVersion;
        this.passwordProtectionWarningTrigger = $.passwordProtectionWarningTrigger;
        this.realtimeUrlCheckMode = $.realtimeUrlCheckMode;
        this.safeBrowsingProtectionLevel = $.safeBrowsingProtectionLevel;
        this.screenLockSecured = $.screenLockSecured;
        this.siteIsolationEnabled = $.siteIsolationEnabled;
        this.thirdPartyBlockingEnabled = $.thirdPartyBlockingEnabled;
        this.windowsMachineDomain = $.windowsMachineDomain;
        this.windowsUserDomain = $.windowsUserDomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs $;

        public Builder() {
            $ = new GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs();
        }

        public Builder(GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs defaults) {
            $ = new GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowScreenLock(Output<Boolean> allowScreenLock) {
            $.allowScreenLock = allowScreenLock;
            return this;
        }

        public Builder allowScreenLock(Boolean allowScreenLock) {
            return allowScreenLock(Output.of(allowScreenLock));
        }

        public Builder browserVersion(Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs> browserVersion) {
            $.browserVersion = browserVersion;
            return this;
        }

        public Builder browserVersion(GetDeviceAssurancePolicyThirdPartySignalProviderDtcBrowserVersionArgs browserVersion) {
            return browserVersion(Output.of(browserVersion));
        }

        public Builder builtInDnsClientEnabled(Output<Boolean> builtInDnsClientEnabled) {
            $.builtInDnsClientEnabled = builtInDnsClientEnabled;
            return this;
        }

        public Builder builtInDnsClientEnabled(Boolean builtInDnsClientEnabled) {
            return builtInDnsClientEnabled(Output.of(builtInDnsClientEnabled));
        }

        public Builder chromeRemoteDesktopAppBlocked(Output<Boolean> chromeRemoteDesktopAppBlocked) {
            $.chromeRemoteDesktopAppBlocked = chromeRemoteDesktopAppBlocked;
            return this;
        }

        public Builder chromeRemoteDesktopAppBlocked(Boolean chromeRemoteDesktopAppBlocked) {
            return chromeRemoteDesktopAppBlocked(Output.of(chromeRemoteDesktopAppBlocked));
        }

        public Builder crowdStrikeAgentId(Output<String> crowdStrikeAgentId) {
            $.crowdStrikeAgentId = crowdStrikeAgentId;
            return this;
        }

        public Builder crowdStrikeAgentId(String crowdStrikeAgentId) {
            return crowdStrikeAgentId(Output.of(crowdStrikeAgentId));
        }

        public Builder crowdStrikeCustomerId(Output<String> crowdStrikeCustomerId) {
            $.crowdStrikeCustomerId = crowdStrikeCustomerId;
            return this;
        }

        public Builder crowdStrikeCustomerId(String crowdStrikeCustomerId) {
            return crowdStrikeCustomerId(Output.of(crowdStrikeCustomerId));
        }

        public Builder deviceEnrollmentDomain(Output<String> deviceEnrollmentDomain) {
            $.deviceEnrollmentDomain = deviceEnrollmentDomain;
            return this;
        }

        public Builder deviceEnrollmentDomain(String deviceEnrollmentDomain) {
            return deviceEnrollmentDomain(Output.of(deviceEnrollmentDomain));
        }

        public Builder diskEncrypted(Output<Boolean> diskEncrypted) {
            $.diskEncrypted = diskEncrypted;
            return this;
        }

        public Builder diskEncrypted(Boolean diskEncrypted) {
            return diskEncrypted(Output.of(diskEncrypted));
        }

        public Builder keyTrustLevel(Output<String> keyTrustLevel) {
            $.keyTrustLevel = keyTrustLevel;
            return this;
        }

        public Builder keyTrustLevel(String keyTrustLevel) {
            return keyTrustLevel(Output.of(keyTrustLevel));
        }

        public Builder managedDevice(Output<Boolean> managedDevice) {
            $.managedDevice = managedDevice;
            return this;
        }

        public Builder managedDevice(Boolean managedDevice) {
            return managedDevice(Output.of(managedDevice));
        }

        public Builder osFirewall(Output<Boolean> osFirewall) {
            $.osFirewall = osFirewall;
            return this;
        }

        public Builder osFirewall(Boolean osFirewall) {
            return osFirewall(Output.of(osFirewall));
        }

        public Builder osVersion(Output<GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        public Builder osVersion(GetDeviceAssurancePolicyThirdPartySignalProviderDtcOsVersionArgs osVersion) {
            return osVersion(Output.of(osVersion));
        }

        public Builder passwordProtectionWarningTrigger(Output<String> passwordProtectionWarningTrigger) {
            $.passwordProtectionWarningTrigger = passwordProtectionWarningTrigger;
            return this;
        }

        public Builder passwordProtectionWarningTrigger(String passwordProtectionWarningTrigger) {
            return passwordProtectionWarningTrigger(Output.of(passwordProtectionWarningTrigger));
        }

        public Builder realtimeUrlCheckMode(Output<Boolean> realtimeUrlCheckMode) {
            $.realtimeUrlCheckMode = realtimeUrlCheckMode;
            return this;
        }

        public Builder realtimeUrlCheckMode(Boolean realtimeUrlCheckMode) {
            return realtimeUrlCheckMode(Output.of(realtimeUrlCheckMode));
        }

        public Builder safeBrowsingProtectionLevel(Output<String> safeBrowsingProtectionLevel) {
            $.safeBrowsingProtectionLevel = safeBrowsingProtectionLevel;
            return this;
        }

        public Builder safeBrowsingProtectionLevel(String safeBrowsingProtectionLevel) {
            return safeBrowsingProtectionLevel(Output.of(safeBrowsingProtectionLevel));
        }

        public Builder screenLockSecured(Output<Boolean> screenLockSecured) {
            $.screenLockSecured = screenLockSecured;
            return this;
        }

        public Builder screenLockSecured(Boolean screenLockSecured) {
            return screenLockSecured(Output.of(screenLockSecured));
        }

        public Builder siteIsolationEnabled(Output<Boolean> siteIsolationEnabled) {
            $.siteIsolationEnabled = siteIsolationEnabled;
            return this;
        }

        public Builder siteIsolationEnabled(Boolean siteIsolationEnabled) {
            return siteIsolationEnabled(Output.of(siteIsolationEnabled));
        }

        public Builder thirdPartyBlockingEnabled(Output<Boolean> thirdPartyBlockingEnabled) {
            $.thirdPartyBlockingEnabled = thirdPartyBlockingEnabled;
            return this;
        }

        public Builder thirdPartyBlockingEnabled(Boolean thirdPartyBlockingEnabled) {
            return thirdPartyBlockingEnabled(Output.of(thirdPartyBlockingEnabled));
        }

        public Builder windowsMachineDomain(Output<String> windowsMachineDomain) {
            $.windowsMachineDomain = windowsMachineDomain;
            return this;
        }

        public Builder windowsMachineDomain(String windowsMachineDomain) {
            return windowsMachineDomain(Output.of(windowsMachineDomain));
        }

        public Builder windowsUserDomain(Output<String> windowsUserDomain) {
            $.windowsUserDomain = windowsUserDomain;
            return this;
        }

        public Builder windowsUserDomain(String windowsUserDomain) {
            return windowsUserDomain(Output.of(windowsUserDomain));
        }

        public GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs build() {
            if ($.allowScreenLock == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "allowScreenLock");
            }
            if ($.browserVersion == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "browserVersion");
            }
            if ($.builtInDnsClientEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "builtInDnsClientEnabled");
            }
            if ($.chromeRemoteDesktopAppBlocked == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "chromeRemoteDesktopAppBlocked");
            }
            if ($.crowdStrikeAgentId == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "crowdStrikeAgentId");
            }
            if ($.crowdStrikeCustomerId == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "crowdStrikeCustomerId");
            }
            if ($.deviceEnrollmentDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "deviceEnrollmentDomain");
            }
            if ($.diskEncrypted == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "diskEncrypted");
            }
            if ($.keyTrustLevel == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "keyTrustLevel");
            }
            if ($.managedDevice == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "managedDevice");
            }
            if ($.osFirewall == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "osFirewall");
            }
            if ($.osVersion == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "osVersion");
            }
            if ($.passwordProtectionWarningTrigger == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "passwordProtectionWarningTrigger");
            }
            if ($.realtimeUrlCheckMode == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "realtimeUrlCheckMode");
            }
            if ($.safeBrowsingProtectionLevel == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "safeBrowsingProtectionLevel");
            }
            if ($.screenLockSecured == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "screenLockSecured");
            }
            if ($.siteIsolationEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "siteIsolationEnabled");
            }
            if ($.thirdPartyBlockingEnabled == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "thirdPartyBlockingEnabled");
            }
            if ($.windowsMachineDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "windowsMachineDomain");
            }
            if ($.windowsUserDomain == null) {
                throw new MissingRequiredPropertyException("GetDeviceAssurancePolicyThirdPartySignalProviderDtcArgs", "windowsUserDomain");
            }
            return $;
        }
    }

}
