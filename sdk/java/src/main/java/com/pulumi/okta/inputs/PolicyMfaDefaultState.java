// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyMfaDefaultState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyMfaDefaultState Empty = new PolicyMfaDefaultState();

    /**
     * ID of the default Okta group.
     * 
     */
    @Import(name="defaultIncludedGroupId")
    private @Nullable Output<String> defaultIncludedGroupId;

    /**
     * @return ID of the default Okta group.
     * 
     */
    public Optional<Output<String>> defaultIncludedGroupId() {
        return Optional.ofNullable(this.defaultIncludedGroupId);
    }

    /**
     * Default policy description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Default policy description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * DUO MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="duo")
    private @Nullable Output<Map<String,String>> duo;

    /**
     * @return DUO MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> duo() {
        return Optional.ofNullable(this.duo);
    }

    /**
     * External IDP MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="externalIdp")
    private @Nullable Output<Map<String,String>> externalIdp;

    /**
     * @return External IDP MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> externalIdp() {
        return Optional.ofNullable(this.externalIdp);
    }

    /**
     * Fido U2F MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="fidoU2f")
    private @Nullable Output<Map<String,String>> fidoU2f;

    /**
     * @return Fido U2F MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> fidoU2f() {
        return Optional.ofNullable(this.fidoU2f);
    }

    /**
     * Fido Web Authn MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="fidoWebauthn")
    private @Nullable Output<Map<String,String>> fidoWebauthn;

    /**
     * @return Fido Web Authn MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> fidoWebauthn() {
        return Optional.ofNullable(this.fidoWebauthn);
    }

    /**
     * Google OTP MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="googleOtp")
    private @Nullable Output<Map<String,String>> googleOtp;

    /**
     * @return Google OTP MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> googleOtp() {
        return Optional.ofNullable(this.googleOtp);
    }

    /**
     * HMAC-based One-Time Password MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="hotp")
    private @Nullable Output<Map<String,String>> hotp;

    /**
     * @return HMAC-based One-Time Password MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> hotp() {
        return Optional.ofNullable(this.hotp);
    }

    /**
     * Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
     * &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
     * 
     */
    @Import(name="isOie")
    private @Nullable Output<Boolean> isOie;

    /**
     * @return Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
     * &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
     * 
     */
    public Optional<Output<Boolean>> isOie() {
        return Optional.ofNullable(this.isOie);
    }

    /**
     * Default policy name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Default policy name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Okta Call MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="oktaCall")
    private @Nullable Output<Map<String,String>> oktaCall;

    /**
     * @return Okta Call MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaCall() {
        return Optional.ofNullable(this.oktaCall);
    }

    /**
     * Okta Email MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="oktaEmail")
    private @Nullable Output<Map<String,String>> oktaEmail;

    /**
     * @return Okta Email MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaEmail() {
        return Optional.ofNullable(this.oktaEmail);
    }

    /**
     * Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="oktaOtp")
    private @Nullable Output<Map<String,String>> oktaOtp;

    /**
     * @return Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaOtp() {
        return Optional.ofNullable(this.oktaOtp);
    }

    /**
     * Okta Password MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="oktaPassword")
    private @Nullable Output<Map<String,String>> oktaPassword;

    /**
     * @return Okta Password MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaPassword() {
        return Optional.ofNullable(this.oktaPassword);
    }

    /**
     * Okta Push MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="oktaPush")
    private @Nullable Output<Map<String,String>> oktaPush;

    /**
     * @return Okta Push MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaPush() {
        return Optional.ofNullable(this.oktaPush);
    }

    /**
     * Okta Question MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="oktaQuestion")
    private @Nullable Output<Map<String,String>> oktaQuestion;

    /**
     * @return Okta Question MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaQuestion() {
        return Optional.ofNullable(this.oktaQuestion);
    }

    /**
     * Okta SMS MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="oktaSms")
    private @Nullable Output<Map<String,String>> oktaSms;

    /**
     * @return Okta SMS MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaSms() {
        return Optional.ofNullable(this.oktaSms);
    }

    /**
     * Okta Verify MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="oktaVerify")
    private @Nullable Output<Map<String,String>> oktaVerify;

    /**
     * @return Okta Verify MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> oktaVerify() {
        return Optional.ofNullable(this.oktaVerify);
    }

    /**
     * On-Prem MFA MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="onpremMfa")
    private @Nullable Output<Map<String,String>> onpremMfa;

    /**
     * @return On-Prem MFA MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> onpremMfa() {
        return Optional.ofNullable(this.onpremMfa);
    }

    /**
     * Phone Number MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<Map<String,String>> phoneNumber;

    /**
     * @return Phone Number MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * Default policy priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Default policy priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * RSA Token MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="rsaToken")
    private @Nullable Output<Map<String,String>> rsaToken;

    /**
     * @return RSA Token MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> rsaToken() {
        return Optional.ofNullable(this.rsaToken);
    }

    /**
     * Security Question MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="securityQuestion")
    private @Nullable Output<Map<String,String>> securityQuestion;

    /**
     * @return Security Question MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> securityQuestion() {
        return Optional.ofNullable(this.securityQuestion);
    }

    /**
     * Default policy status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Default policy status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Symantec VIP MFA policy settings (✓ Classic).
     * 
     */
    @Import(name="symantecVip")
    private @Nullable Output<Map<String,String>> symantecVip;

    /**
     * @return Symantec VIP MFA policy settings (✓ Classic).
     * 
     */
    public Optional<Output<Map<String,String>>> symantecVip() {
        return Optional.ofNullable(this.symantecVip);
    }

    /**
     * FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
     * 
     */
    @Import(name="webauthn")
    private @Nullable Output<Map<String,String>> webauthn;

    /**
     * @return FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> webauthn() {
        return Optional.ofNullable(this.webauthn);
    }

    /**
     * Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    @Import(name="yubikeyToken")
    private @Nullable Output<Map<String,String>> yubikeyToken;

    /**
     * @return Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
     * 
     */
    public Optional<Output<Map<String,String>>> yubikeyToken() {
        return Optional.ofNullable(this.yubikeyToken);
    }

    private PolicyMfaDefaultState() {}

    private PolicyMfaDefaultState(PolicyMfaDefaultState $) {
        this.defaultIncludedGroupId = $.defaultIncludedGroupId;
        this.description = $.description;
        this.duo = $.duo;
        this.externalIdp = $.externalIdp;
        this.fidoU2f = $.fidoU2f;
        this.fidoWebauthn = $.fidoWebauthn;
        this.googleOtp = $.googleOtp;
        this.hotp = $.hotp;
        this.isOie = $.isOie;
        this.name = $.name;
        this.oktaCall = $.oktaCall;
        this.oktaEmail = $.oktaEmail;
        this.oktaOtp = $.oktaOtp;
        this.oktaPassword = $.oktaPassword;
        this.oktaPush = $.oktaPush;
        this.oktaQuestion = $.oktaQuestion;
        this.oktaSms = $.oktaSms;
        this.oktaVerify = $.oktaVerify;
        this.onpremMfa = $.onpremMfa;
        this.phoneNumber = $.phoneNumber;
        this.priority = $.priority;
        this.rsaToken = $.rsaToken;
        this.securityQuestion = $.securityQuestion;
        this.status = $.status;
        this.symantecVip = $.symantecVip;
        this.webauthn = $.webauthn;
        this.yubikeyToken = $.yubikeyToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyMfaDefaultState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyMfaDefaultState $;

        public Builder() {
            $ = new PolicyMfaDefaultState();
        }

        public Builder(PolicyMfaDefaultState defaults) {
            $ = new PolicyMfaDefaultState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultIncludedGroupId ID of the default Okta group.
         * 
         * @return builder
         * 
         */
        public Builder defaultIncludedGroupId(@Nullable Output<String> defaultIncludedGroupId) {
            $.defaultIncludedGroupId = defaultIncludedGroupId;
            return this;
        }

        /**
         * @param defaultIncludedGroupId ID of the default Okta group.
         * 
         * @return builder
         * 
         */
        public Builder defaultIncludedGroupId(String defaultIncludedGroupId) {
            return defaultIncludedGroupId(Output.of(defaultIncludedGroupId));
        }

        /**
         * @param description Default policy description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Default policy description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param duo DUO MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder duo(@Nullable Output<Map<String,String>> duo) {
            $.duo = duo;
            return this;
        }

        /**
         * @param duo DUO MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder duo(Map<String,String> duo) {
            return duo(Output.of(duo));
        }

        /**
         * @param externalIdp External IDP MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder externalIdp(@Nullable Output<Map<String,String>> externalIdp) {
            $.externalIdp = externalIdp;
            return this;
        }

        /**
         * @param externalIdp External IDP MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder externalIdp(Map<String,String> externalIdp) {
            return externalIdp(Output.of(externalIdp));
        }

        /**
         * @param fidoU2f Fido U2F MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder fidoU2f(@Nullable Output<Map<String,String>> fidoU2f) {
            $.fidoU2f = fidoU2f;
            return this;
        }

        /**
         * @param fidoU2f Fido U2F MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder fidoU2f(Map<String,String> fidoU2f) {
            return fidoU2f(Output.of(fidoU2f));
        }

        /**
         * @param fidoWebauthn Fido Web Authn MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder fidoWebauthn(@Nullable Output<Map<String,String>> fidoWebauthn) {
            $.fidoWebauthn = fidoWebauthn;
            return this;
        }

        /**
         * @param fidoWebauthn Fido Web Authn MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder fidoWebauthn(Map<String,String> fidoWebauthn) {
            return fidoWebauthn(Output.of(fidoWebauthn));
        }

        /**
         * @param googleOtp Google OTP MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder googleOtp(@Nullable Output<Map<String,String>> googleOtp) {
            $.googleOtp = googleOtp;
            return this;
        }

        /**
         * @param googleOtp Google OTP MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder googleOtp(Map<String,String> googleOtp) {
            return googleOtp(Output.of(googleOtp));
        }

        /**
         * @param hotp HMAC-based One-Time Password MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder hotp(@Nullable Output<Map<String,String>> hotp) {
            $.hotp = hotp;
            return this;
        }

        /**
         * @param hotp HMAC-based One-Time Password MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder hotp(Map<String,String> hotp) {
            return hotp(Output.of(hotp));
        }

        /**
         * @param isOie Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
         * &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder isOie(@Nullable Output<Boolean> isOie) {
            $.isOie = isOie;
            return this;
        }

        /**
         * @param isOie Boolean that specifies whether to use the newer Okta Identity Engine (OIE) with policy authenticators instead of the classic engine with Factors. This value determines which of the following policy factor settings can be configured. (Default = `false`)
         * &gt; **WARNING:** Tenant must have the Okta Identity Engine enabled in order to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder isOie(Boolean isOie) {
            return isOie(Output.of(isOie));
        }

        /**
         * @param name Default policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Default policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oktaCall Okta Call MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaCall(@Nullable Output<Map<String,String>> oktaCall) {
            $.oktaCall = oktaCall;
            return this;
        }

        /**
         * @param oktaCall Okta Call MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaCall(Map<String,String> oktaCall) {
            return oktaCall(Output.of(oktaCall));
        }

        /**
         * @param oktaEmail Okta Email MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaEmail(@Nullable Output<Map<String,String>> oktaEmail) {
            $.oktaEmail = oktaEmail;
            return this;
        }

        /**
         * @param oktaEmail Okta Email MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaEmail(Map<String,String> oktaEmail) {
            return oktaEmail(Output.of(oktaEmail));
        }

        /**
         * @param oktaOtp Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaOtp(@Nullable Output<Map<String,String>> oktaOtp) {
            $.oktaOtp = oktaOtp;
            return this;
        }

        /**
         * @param oktaOtp Okta OTP (via the Okta Verify app) MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaOtp(Map<String,String> oktaOtp) {
            return oktaOtp(Output.of(oktaOtp));
        }

        /**
         * @param oktaPassword Okta Password MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaPassword(@Nullable Output<Map<String,String>> oktaPassword) {
            $.oktaPassword = oktaPassword;
            return this;
        }

        /**
         * @param oktaPassword Okta Password MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaPassword(Map<String,String> oktaPassword) {
            return oktaPassword(Output.of(oktaPassword));
        }

        /**
         * @param oktaPush Okta Push MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaPush(@Nullable Output<Map<String,String>> oktaPush) {
            $.oktaPush = oktaPush;
            return this;
        }

        /**
         * @param oktaPush Okta Push MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaPush(Map<String,String> oktaPush) {
            return oktaPush(Output.of(oktaPush));
        }

        /**
         * @param oktaQuestion Okta Question MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaQuestion(@Nullable Output<Map<String,String>> oktaQuestion) {
            $.oktaQuestion = oktaQuestion;
            return this;
        }

        /**
         * @param oktaQuestion Okta Question MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaQuestion(Map<String,String> oktaQuestion) {
            return oktaQuestion(Output.of(oktaQuestion));
        }

        /**
         * @param oktaSms Okta SMS MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaSms(@Nullable Output<Map<String,String>> oktaSms) {
            $.oktaSms = oktaSms;
            return this;
        }

        /**
         * @param oktaSms Okta SMS MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder oktaSms(Map<String,String> oktaSms) {
            return oktaSms(Output.of(oktaSms));
        }

        /**
         * @param oktaVerify Okta Verify MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaVerify(@Nullable Output<Map<String,String>> oktaVerify) {
            $.oktaVerify = oktaVerify;
            return this;
        }

        /**
         * @param oktaVerify Okta Verify MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder oktaVerify(Map<String,String> oktaVerify) {
            return oktaVerify(Output.of(oktaVerify));
        }

        /**
         * @param onpremMfa On-Prem MFA MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder onpremMfa(@Nullable Output<Map<String,String>> onpremMfa) {
            $.onpremMfa = onpremMfa;
            return this;
        }

        /**
         * @param onpremMfa On-Prem MFA MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder onpremMfa(Map<String,String> onpremMfa) {
            return onpremMfa(Output.of(onpremMfa));
        }

        /**
         * @param phoneNumber Phone Number MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<Map<String,String>> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber Phone Number MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(Map<String,String> phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param priority Default policy priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Default policy priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param rsaToken RSA Token MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder rsaToken(@Nullable Output<Map<String,String>> rsaToken) {
            $.rsaToken = rsaToken;
            return this;
        }

        /**
         * @param rsaToken RSA Token MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder rsaToken(Map<String,String> rsaToken) {
            return rsaToken(Output.of(rsaToken));
        }

        /**
         * @param securityQuestion Security Question MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder securityQuestion(@Nullable Output<Map<String,String>> securityQuestion) {
            $.securityQuestion = securityQuestion;
            return this;
        }

        /**
         * @param securityQuestion Security Question MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder securityQuestion(Map<String,String> securityQuestion) {
            return securityQuestion(Output.of(securityQuestion));
        }

        /**
         * @param status Default policy status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Default policy status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param symantecVip Symantec VIP MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder symantecVip(@Nullable Output<Map<String,String>> symantecVip) {
            $.symantecVip = symantecVip;
            return this;
        }

        /**
         * @param symantecVip Symantec VIP MFA policy settings (✓ Classic).
         * 
         * @return builder
         * 
         */
        public Builder symantecVip(Map<String,String> symantecVip) {
            return symantecVip(Output.of(symantecVip));
        }

        /**
         * @param webauthn FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder webauthn(@Nullable Output<Map<String,String>> webauthn) {
            $.webauthn = webauthn;
            return this;
        }

        /**
         * @param webauthn FIDO2 (WebAuthn) MFA policy settings (✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder webauthn(Map<String,String> webauthn) {
            return webauthn(Output.of(webauthn));
        }

        /**
         * @param yubikeyToken Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder yubikeyToken(@Nullable Output<Map<String,String>> yubikeyToken) {
            $.yubikeyToken = yubikeyToken;
            return this;
        }

        /**
         * @param yubikeyToken Yubikey Token MFA policy settings (✓ Classic, ✓ OIE).
         * 
         * @return builder
         * 
         */
        public Builder yubikeyToken(Map<String,String> yubikeyToken) {
            return yubikeyToken(Output.of(yubikeyToken));
        }

        public PolicyMfaDefaultState build() {
            return $;
        }
    }

}
