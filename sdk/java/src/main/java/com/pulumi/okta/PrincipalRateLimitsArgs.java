// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrincipalRateLimitsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrincipalRateLimitsArgs Empty = new PrincipalRateLimitsArgs();

    /**
     * The default percentage of a given concurrency limit threshold that the owning principal can consume.
     * 
     */
    @Import(name="defaultConcurrencyPercentage")
    private @Nullable Output<Integer> defaultConcurrencyPercentage;

    /**
     * @return The default percentage of a given concurrency limit threshold that the owning principal can consume.
     * 
     */
    public Optional<Output<Integer>> defaultConcurrencyPercentage() {
        return Optional.ofNullable(this.defaultConcurrencyPercentage);
    }

    /**
     * The default percentage of a given rate limit threshold that the owning principal can consume.
     * 
     */
    @Import(name="defaultPercentage")
    private @Nullable Output<Integer> defaultPercentage;

    /**
     * @return The default percentage of a given rate limit threshold that the owning principal can consume.
     * 
     */
    public Optional<Output<Integer>> defaultPercentage() {
        return Optional.ofNullable(this.defaultPercentage);
    }

    /**
     * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return The type of principal, either an API token or an OAuth 2.0 app.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    private PrincipalRateLimitsArgs() {}

    private PrincipalRateLimitsArgs(PrincipalRateLimitsArgs $) {
        this.defaultConcurrencyPercentage = $.defaultConcurrencyPercentage;
        this.defaultPercentage = $.defaultPercentage;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrincipalRateLimitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrincipalRateLimitsArgs $;

        public Builder() {
            $ = new PrincipalRateLimitsArgs();
        }

        public Builder(PrincipalRateLimitsArgs defaults) {
            $ = new PrincipalRateLimitsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultConcurrencyPercentage The default percentage of a given concurrency limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultConcurrencyPercentage(@Nullable Output<Integer> defaultConcurrencyPercentage) {
            $.defaultConcurrencyPercentage = defaultConcurrencyPercentage;
            return this;
        }

        /**
         * @param defaultConcurrencyPercentage The default percentage of a given concurrency limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultConcurrencyPercentage(Integer defaultConcurrencyPercentage) {
            return defaultConcurrencyPercentage(Output.of(defaultConcurrencyPercentage));
        }

        /**
         * @param defaultPercentage The default percentage of a given rate limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultPercentage(@Nullable Output<Integer> defaultPercentage) {
            $.defaultPercentage = defaultPercentage;
            return this;
        }

        /**
         * @param defaultPercentage The default percentage of a given rate limit threshold that the owning principal can consume.
         * 
         * @return builder
         * 
         */
        public Builder defaultPercentage(Integer defaultPercentage) {
            return defaultPercentage(Output.of(defaultPercentage));
        }

        /**
         * @param principalId The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The type of principal, either an API token or an OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The type of principal, either an API token or an OAuth 2.0 app.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        public PrincipalRateLimitsArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("PrincipalRateLimitsArgs", "principalId");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("PrincipalRateLimitsArgs", "principalType");
            }
            return $;
        }
    }

}
