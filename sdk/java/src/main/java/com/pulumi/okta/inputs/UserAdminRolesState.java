// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAdminRolesState extends com.pulumi.resources.ResourceArgs {

    public static final UserAdminRolesState Empty = new UserAdminRolesState();

    /**
     * User Okta admin roles - ie. [&#39;APP*ADMIN&#39;, &#39;USER*ADMIN&#39;]
     * 
     */
    @Import(name="adminRoles")
    private @Nullable Output<List<String>> adminRoles;

    /**
     * @return User Okta admin roles - ie. [&#39;APP*ADMIN&#39;, &#39;USER*ADMIN&#39;]
     * 
     */
    public Optional<Output<List<String>>> adminRoles() {
        return Optional.ofNullable(this.adminRoles);
    }

    /**
     * When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
     * 
     */
    @Import(name="disableNotifications")
    private @Nullable Output<Boolean> disableNotifications;

    /**
     * @return When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
     * 
     */
    public Optional<Output<Boolean>> disableNotifications() {
        return Optional.ofNullable(this.disableNotifications);
    }

    /**
     * ID of a Okta User
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return ID of a Okta User
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserAdminRolesState() {}

    private UserAdminRolesState(UserAdminRolesState $) {
        this.adminRoles = $.adminRoles;
        this.disableNotifications = $.disableNotifications;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAdminRolesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAdminRolesState $;

        public Builder() {
            $ = new UserAdminRolesState();
        }

        public Builder(UserAdminRolesState defaults) {
            $ = new UserAdminRolesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRoles User Okta admin roles - ie. [&#39;APP*ADMIN&#39;, &#39;USER*ADMIN&#39;]
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(@Nullable Output<List<String>> adminRoles) {
            $.adminRoles = adminRoles;
            return this;
        }

        /**
         * @param adminRoles User Okta admin roles - ie. [&#39;APP*ADMIN&#39;, &#39;USER*ADMIN&#39;]
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(List<String> adminRoles) {
            return adminRoles(Output.of(adminRoles));
        }

        /**
         * @param adminRoles User Okta admin roles - ie. [&#39;APP*ADMIN&#39;, &#39;USER*ADMIN&#39;]
         * 
         * @return builder
         * 
         */
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(@Nullable Output<Boolean> disableNotifications) {
            $.disableNotifications = disableNotifications;
            return this;
        }

        /**
         * @param disableNotifications When this setting is enabled, the admins won&#39;t receive any of the default Okta administrator emails
         * 
         * @return builder
         * 
         */
        public Builder disableNotifications(Boolean disableNotifications) {
            return disableNotifications(Output.of(disableNotifications));
        }

        /**
         * @param userId ID of a Okta User
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of a Okta User
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserAdminRolesState build() {
            return $;
        }
    }

}
