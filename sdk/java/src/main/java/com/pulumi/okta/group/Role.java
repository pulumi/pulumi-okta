// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.group;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.group.RoleArgs;
import com.pulumi.okta.group.inputs.RoleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Assigns Admin roles to Okta Groups.
 * 
 * This resource allows you to assign Okta administrator roles to Okta Groups. This resource provides a one-to-one
 * interface between the Okta group and the admin role.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.group.Role;
 * import com.pulumi.okta.group.RoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Role(&#34;example&#34;, RoleArgs.builder()        
 *             .groupId(&#34;&lt;group id&gt;&#34;)
 *             .roleType(&#34;READ_ONLY_ADMIN&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Individual admin role assignment can be imported by passing the group and role assignment IDs as follows
 * 
 * ```sh
 *  $ pulumi import okta:group/role:Role example &amp;#60;group id&amp;#62;/&amp;#60;role id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:group/role:Role")
public class Role extends com.pulumi.resources.CustomResource {
    /**
     * When this setting is enabled, the admins won&#39;t receive any of the default Okta
     * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    @Export(name="disableNotifications", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableNotifications;

    /**
     * @return When this setting is enabled, the admins won&#39;t receive any of the default Okta
     * administrator emails. These admins also won&#39;t have access to contact Okta Support and open support cases on behalf of your org.
     * 
     */
    public Output<Optional<Boolean>> disableNotifications() {
        return Codegen.optional(this.disableNotifications);
    }
    /**
     * The ID of group to attach admin roles to.
     * 
     */
    @Export(name="groupId", refs={String.class}, tree="[0]")
    private Output<String> groupId;

    /**
     * @return The ID of group to attach admin roles to.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }
    /**
     * Admin role assigned to the group. It can be any one of the following values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     * - `&#34;USER_ADMIN&#34;` is the Group Administrator.
     * 
     */
    @Export(name="roleType", refs={String.class}, tree="[0]")
    private Output<String> roleType;

    /**
     * @return Admin role assigned to the group. It can be any one of the following values:
     * `&#34;API_ADMIN&#34;`,
     * `&#34;APP_ADMIN&#34;`,
     * `&#34;CUSTOM&#34;`,
     * `&#34;GROUP_MEMBERSHIP_ADMIN&#34;`,
     * `&#34;HELP_DESK_ADMIN&#34;`,
     * `&#34;MOBILE_ADMIN&#34;`,
     * `&#34;ORG_ADMIN&#34;`,
     * `&#34;READ_ONLY_ADMIN&#34;`,
     * `&#34;REPORT_ADMIN&#34;`,
     * `&#34;SUPER_ADMIN&#34;`,
     * `&#34;USER_ADMIN&#34;`
     * . See [API Docs](https://developer.okta.com/docs/reference/api/roles/#role-types).
     * 
     * - `&#34;USER_ADMIN&#34;` is the Group Administrator.
     * 
     */
    public Output<String> roleType() {
        return this.roleType;
    }
    /**
     * A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;
     * facebook&#39;), or a combination of app name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as
     * the targets of the admin role.
     * - Only supported when used with the role type `&#34;APP_ADMIN&#34;`.
     * 
     */
    @Export(name="targetAppLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> targetAppLists;

    /**
     * @return A list of app names (name represents set of app instances, like &#39;salesforce&#39; or &#39;
     * facebook&#39;), or a combination of app name and app instance ID (like &#39;facebook.0oapsqQ6dv19pqyEo0g3&#39;) you would like as
     * the targets of the admin role.
     * - Only supported when used with the role type `&#34;APP_ADMIN&#34;`.
     * 
     */
    public Output<Optional<List<String>>> targetAppLists() {
        return Codegen.optional(this.targetAppLists);
    }
    /**
     * A list of group IDs you would like as the targets of the admin role.
     * - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     * 
     */
    @Export(name="targetGroupLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> targetGroupLists;

    /**
     * @return A list of group IDs you would like as the targets of the admin role.
     * - Only supported when used with the role types: `GROUP_MEMBERSHIP_ADMIN`, `HELP_DESK_ADMIN`, or `USER_ADMIN`.
     * 
     */
    public Output<Optional<List<String>>> targetGroupLists() {
        return Codegen.optional(this.targetGroupLists);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Role(String name) {
        this(name, RoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Role(String name, RoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Role(String name, RoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:group/role:Role", name, args == null ? RoleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Role(String name, Output<String> id, @Nullable RoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:group/role:Role", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Role get(String name, Output<String> id, @Nullable RoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Role(name, id, state, options);
    }
}
