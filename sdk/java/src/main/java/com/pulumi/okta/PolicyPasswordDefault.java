// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.PolicyPasswordDefaultArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.PolicyPasswordDefaultState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Configures default password policy. This resource allows you to configure default password policy.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.PolicyPasswordDefault;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new PolicyPasswordDefault("default");
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:index/policyPasswordDefault:PolicyPasswordDefault example .
 * ```
 * 
 */
@ResourceType(type="okta:index/policyPasswordDefault:PolicyPasswordDefault")
public class PolicyPasswordDefault extends com.pulumi.resources.CustomResource {
    /**
     * Enable or disable voice call recovery: ACTIVE or INACTIVE. Default: `INACTIVE`
     * 
     */
    @Export(name="callRecovery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> callRecovery;

    /**
     * @return Enable or disable voice call recovery: ACTIVE or INACTIVE. Default: `INACTIVE`
     * 
     */
    public Output<Optional<String>> callRecovery() {
        return Codegen.optional(this.callRecovery);
    }
    /**
     * Default Authentication Provider
     * 
     */
    @Export(name="defaultAuthProvider", refs={String.class}, tree="[0]")
    private Output<String> defaultAuthProvider;

    /**
     * @return Default Authentication Provider
     * 
     */
    public Output<String> defaultAuthProvider() {
        return this.defaultAuthProvider;
    }
    /**
     * Default group ID (always included)
     * 
     */
    @Export(name="defaultIncludedGroupId", refs={String.class}, tree="[0]")
    private Output<String> defaultIncludedGroupId;

    /**
     * @return Default group ID (always included)
     * 
     */
    public Output<String> defaultIncludedGroupId() {
        return this.defaultIncludedGroupId;
    }
    /**
     * Default policy description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Default policy description
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Enable or disable email password recovery: ACTIVE or INACTIVE. Default: `ACTIVE`
     * 
     */
    @Export(name="emailRecovery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> emailRecovery;

    /**
     * @return Enable or disable email password recovery: ACTIVE or INACTIVE. Default: `ACTIVE`
     * 
     */
    public Output<Optional<String>> emailRecovery() {
        return Codegen.optional(this.emailRecovery);
    }
    /**
     * Default policy name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Default policy name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of minutes before a locked account is unlocked: 0 = no limit. Default: `0`
     * 
     */
    @Export(name="passwordAutoUnlockMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordAutoUnlockMinutes;

    /**
     * @return Number of minutes before a locked account is unlocked: 0 = no limit. Default: `0`
     * 
     */
    public Output<Optional<Integer>> passwordAutoUnlockMinutes() {
        return Codegen.optional(this.passwordAutoUnlockMinutes);
    }
    /**
     * Check Passwords Against Common Password Dictionary. Default: `false`
     * 
     */
    @Export(name="passwordDictionaryLookup", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordDictionaryLookup;

    /**
     * @return Check Passwords Against Common Password Dictionary. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> passwordDictionaryLookup() {
        return Codegen.optional(this.passwordDictionaryLookup);
    }
    /**
     * User firstName attribute must be excluded from the password
     * 
     */
    @Export(name="passwordExcludeFirstName", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordExcludeFirstName;

    /**
     * @return User firstName attribute must be excluded from the password
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeFirstName() {
        return Codegen.optional(this.passwordExcludeFirstName);
    }
    /**
     * User lastName attribute must be excluded from the password
     * 
     */
    @Export(name="passwordExcludeLastName", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordExcludeLastName;

    /**
     * @return User lastName attribute must be excluded from the password
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeLastName() {
        return Codegen.optional(this.passwordExcludeLastName);
    }
    /**
     * If the user name must be excluded from the password. Default: `true`
     * 
     */
    @Export(name="passwordExcludeUsername", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordExcludeUsername;

    /**
     * @return If the user name must be excluded from the password. Default: `true`
     * 
     */
    public Output<Optional<Boolean>> passwordExcludeUsername() {
        return Codegen.optional(this.passwordExcludeUsername);
    }
    /**
     * Length in days a user will be warned before password expiry: 0 = no warning. Default: `0`
     * 
     */
    @Export(name="passwordExpireWarnDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordExpireWarnDays;

    /**
     * @return Length in days a user will be warned before password expiry: 0 = no warning. Default: `0`
     * 
     */
    public Output<Optional<Integer>> passwordExpireWarnDays() {
        return Codegen.optional(this.passwordExpireWarnDays);
    }
    /**
     * Number of distinct passwords that must be created before they can be reused: 0 = none. Default: `4`
     * 
     */
    @Export(name="passwordHistoryCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordHistoryCount;

    /**
     * @return Number of distinct passwords that must be created before they can be reused: 0 = none. Default: `4`
     * 
     */
    public Output<Optional<Integer>> passwordHistoryCount() {
        return Codegen.optional(this.passwordHistoryCount);
    }
    /**
     * Notification channels to use to notify a user when their account has been locked.
     * 
     */
    @Export(name="passwordLockoutNotificationChannels", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> passwordLockoutNotificationChannels;

    /**
     * @return Notification channels to use to notify a user when their account has been locked.
     * 
     */
    public Output<Optional<List<String>>> passwordLockoutNotificationChannels() {
        return Codegen.optional(this.passwordLockoutNotificationChannels);
    }
    /**
     * Length in days a password is valid before expiry: 0 = no limit. Default: `0`
     * 
     */
    @Export(name="passwordMaxAgeDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMaxAgeDays;

    /**
     * @return Length in days a password is valid before expiry: 0 = no limit. Default: `0`
     * 
     */
    public Output<Optional<Integer>> passwordMaxAgeDays() {
        return Codegen.optional(this.passwordMaxAgeDays);
    }
    /**
     * Number of unsuccessful login attempts allowed before lockout: 0 = no limit. Default: `10`
     * 
     */
    @Export(name="passwordMaxLockoutAttempts", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMaxLockoutAttempts;

    /**
     * @return Number of unsuccessful login attempts allowed before lockout: 0 = no limit. Default: `10`
     * 
     */
    public Output<Optional<Integer>> passwordMaxLockoutAttempts() {
        return Codegen.optional(this.passwordMaxLockoutAttempts);
    }
    /**
     * Minimum time interval in minutes between password changes: 0 = no limit. Default: `0`
     * 
     */
    @Export(name="passwordMinAgeMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinAgeMinutes;

    /**
     * @return Minimum time interval in minutes between password changes: 0 = no limit. Default: `0`
     * 
     */
    public Output<Optional<Integer>> passwordMinAgeMinutes() {
        return Codegen.optional(this.passwordMinAgeMinutes);
    }
    /**
     * Minimum password length. Default is `8`.
     * 
     */
    @Export(name="passwordMinLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinLength;

    /**
     * @return Minimum password length. Default is `8`.
     * 
     */
    public Output<Optional<Integer>> passwordMinLength() {
        return Codegen.optional(this.passwordMinLength);
    }
    /**
     * If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinLowercase", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinLowercase;

    /**
     * @return If a password must contain at least one lower case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinLowercase() {
        return Codegen.optional(this.passwordMinLowercase);
    }
    /**
     * If a password must contain at least one number: 0 = no, 1 = yes. Default = `1`
     * 
     */
    @Export(name="passwordMinNumber", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinNumber;

    /**
     * @return If a password must contain at least one number: 0 = no, 1 = yes. Default = `1`
     * 
     */
    public Output<Optional<Integer>> passwordMinNumber() {
        return Codegen.optional(this.passwordMinNumber);
    }
    /**
     * If a password must contain at least one symbol (!{@literal @}#$%^&amp;*): 0 = no, 1 = yes. Default = `0`
     * 
     */
    @Export(name="passwordMinSymbol", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinSymbol;

    /**
     * @return If a password must contain at least one symbol (!{@literal @}#$%^&amp;*): 0 = no, 1 = yes. Default = `0`
     * 
     */
    public Output<Optional<Integer>> passwordMinSymbol() {
        return Codegen.optional(this.passwordMinSymbol);
    }
    /**
     * If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    @Export(name="passwordMinUppercase", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> passwordMinUppercase;

    /**
     * @return If a password must contain at least one upper case letter: 0 = no, 1 = yes. Default = 1
     * 
     */
    public Output<Optional<Integer>> passwordMinUppercase() {
        return Codegen.optional(this.passwordMinUppercase);
    }
    /**
     * If a user should be informed when their account is locked. Default: `false`
     * 
     */
    @Export(name="passwordShowLockoutFailures", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordShowLockoutFailures;

    /**
     * @return If a user should be informed when their account is locked. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> passwordShowLockoutFailures() {
        return Codegen.optional(this.passwordShowLockoutFailures);
    }
    /**
     * Default policy priority
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output<Integer> priority;

    /**
     * @return Default policy priority
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }
    /**
     * Min length of the password recovery question answer. Default: `4`
     * 
     */
    @Export(name="questionMinLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> questionMinLength;

    /**
     * @return Min length of the password recovery question answer. Default: `4`
     * 
     */
    public Output<Optional<Integer>> questionMinLength() {
        return Codegen.optional(this.questionMinLength);
    }
    /**
     * Enable or disable security question password recovery: ACTIVE or INACTIVE. Default: `ACTIVE`
     * 
     */
    @Export(name="questionRecovery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> questionRecovery;

    /**
     * @return Enable or disable security question password recovery: ACTIVE or INACTIVE. Default: `ACTIVE`
     * 
     */
    public Output<Optional<String>> questionRecovery() {
        return Codegen.optional(this.questionRecovery);
    }
    /**
     * Lifetime in minutes of the recovery email token. Default: `60`
     * 
     */
    @Export(name="recoveryEmailToken", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> recoveryEmailToken;

    /**
     * @return Lifetime in minutes of the recovery email token. Default: `60`
     * 
     */
    public Output<Optional<Integer>> recoveryEmailToken() {
        return Codegen.optional(this.recoveryEmailToken);
    }
    /**
     * When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account. Default: `false`
     * 
     */
    @Export(name="skipUnlock", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> skipUnlock;

    /**
     * @return When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user&#39;s Windows account. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> skipUnlock() {
        return Codegen.optional(this.skipUnlock);
    }
    /**
     * Enable or disable SMS password recovery: ACTIVE or INACTIVE. Default: `INACTIVE`
     * 
     */
    @Export(name="smsRecovery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> smsRecovery;

    /**
     * @return Enable or disable SMS password recovery: ACTIVE or INACTIVE. Default: `INACTIVE`
     * 
     */
    public Output<Optional<String>> smsRecovery() {
        return Codegen.optional(this.smsRecovery);
    }
    /**
     * Default policy status
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Default policy status
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PolicyPasswordDefault(String name) {
        this(name, PolicyPasswordDefaultArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PolicyPasswordDefault(String name, @Nullable PolicyPasswordDefaultArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PolicyPasswordDefault(String name, @Nullable PolicyPasswordDefaultArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/policyPasswordDefault:PolicyPasswordDefault", name, args == null ? PolicyPasswordDefaultArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PolicyPasswordDefault(String name, Output<String> id, @Nullable PolicyPasswordDefaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/policyPasswordDefault:PolicyPasswordDefault", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PolicyPasswordDefault get(String name, Output<String> id, @Nullable PolicyPasswordDefaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PolicyPasswordDefault(name, id, state, options);
    }
}
