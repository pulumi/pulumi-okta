// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserBaseSchemaPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserBaseSchemaPropertyArgs Empty = new UserBaseSchemaPropertyArgs();

    /**
     * Subschema unique string identifier
     * 
     */
    @Import(name="index", required=true)
    private Output<String> index;

    /**
     * @return Subschema unique string identifier
     * 
     */
    public Output<String> index() {
        return this.index;
    }

    /**
     * SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    @Import(name="master")
    private @Nullable Output<String> master;

    /**
     * @return SubSchema profile manager, if not set it will inherit its setting.
     * 
     */
    public Optional<Output<String>> master() {
        return Optional.ofNullable(this.master);
    }

    /**
     * The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Whether the subschema is required
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Whether the subschema is required
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Subschema title (display name)
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Subschema title (display name)
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Subschema type: string, boolean, number, integer, array, or object
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Custom subschema user type
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return Custom subschema user type
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private UserBaseSchemaPropertyArgs() {}

    private UserBaseSchemaPropertyArgs(UserBaseSchemaPropertyArgs $) {
        this.index = $.index;
        this.master = $.master;
        this.pattern = $.pattern;
        this.permissions = $.permissions;
        this.required = $.required;
        this.title = $.title;
        this.type = $.type;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserBaseSchemaPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserBaseSchemaPropertyArgs $;

        public Builder() {
            $ = new UserBaseSchemaPropertyArgs();
        }

        public Builder(UserBaseSchemaPropertyArgs defaults) {
            $ = new UserBaseSchemaPropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Subschema unique string identifier
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param master SubSchema profile manager, if not set it will inherit its setting.
         * 
         * @return builder
         * 
         */
        public Builder master(@Nullable Output<String> master) {
            $.master = master;
            return this;
        }

        /**
         * @param master SubSchema profile manager, if not set it will inherit its setting.
         * 
         * @return builder
         * 
         */
        public Builder master(String master) {
            return master(Output.of(master));
        }

        /**
         * @param pattern The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern The validation pattern to use for the subschema. Must be in form of &#39;.+&#39;, or &#39;[\n\n]+&#39; if present.&#39;
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param permissions SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions SubSchema permissions: HIDE, READ*ONLY, or READ*WRITE.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Whether the subschema is required
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param title Subschema title (display name)
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Subschema title (display name)
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type Subschema type: string, boolean, number, integer, array, or object
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Subschema type: string, boolean, number, integer, array, or object
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userType Custom subschema user type
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType Custom subschema user type
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserBaseSchemaPropertyArgs build() {
            if ($.index == null) {
                throw new MissingRequiredPropertyException("UserBaseSchemaPropertyArgs", "index");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("UserBaseSchemaPropertyArgs", "title");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("UserBaseSchemaPropertyArgs", "type");
            }
            return $;
        }
    }

}
