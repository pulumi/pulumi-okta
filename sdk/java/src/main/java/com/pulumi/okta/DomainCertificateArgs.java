// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainCertificateArgs Empty = new DomainCertificateArgs();

    /**
     * Certificate content
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate content
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Certificate chain
     * 
     */
    @Import(name="certificateChain", required=true)
    private Output<String> certificateChain;

    /**
     * @return Certificate chain
     * 
     */
    public Output<String> certificateChain() {
        return this.certificateChain;
    }

    /**
     * Domain&#39;s ID
     * 
     */
    @Import(name="domainId", required=true)
    private Output<String> domainId;

    /**
     * @return Domain&#39;s ID
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * Certificate private key
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return Certificate private key
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * Certificate type. Valid value is `PEM`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Certificate type. Valid value is `PEM`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DomainCertificateArgs() {}

    private DomainCertificateArgs(DomainCertificateArgs $) {
        this.certificate = $.certificate;
        this.certificateChain = $.certificateChain;
        this.domainId = $.domainId;
        this.privateKey = $.privateKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainCertificateArgs $;

        public Builder() {
            $ = new DomainCertificateArgs();
        }

        public Builder(DomainCertificateArgs defaults) {
            $ = new DomainCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate content
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate content
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificateChain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param domainId Domain&#39;s ID
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Domain&#39;s ID
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param privateKey Certificate private key
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Certificate private key
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param type Certificate type. Valid value is `PEM`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate type. Valid value is `PEM`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainCertificateArgs build() {
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("DomainCertificateArgs", "certificate");
            }
            if ($.certificateChain == null) {
                throw new MissingRequiredPropertyException("DomainCertificateArgs", "certificateChain");
            }
            if ($.domainId == null) {
                throw new MissingRequiredPropertyException("DomainCertificateArgs", "domainId");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("DomainCertificateArgs", "privateKey");
            }
            return $;
        }
    }

}
