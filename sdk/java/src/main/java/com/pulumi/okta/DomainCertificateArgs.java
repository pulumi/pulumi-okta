// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DomainCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainCertificateArgs Empty = new DomainCertificateArgs();

    /**
     * Certificate content.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate content.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Certificate certificate chain.
     * 
     */
    @Import(name="certificateChain", required=true)
    private Output<String> certificateChain;

    /**
     * @return Certificate certificate chain.
     * 
     */
    public Output<String> certificateChain() {
        return this.certificateChain;
    }

    /**
     * Domain ID.
     * 
     */
    @Import(name="domainId", required=true)
    private Output<String> domainId;

    /**
     * @return Domain ID.
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * Certificate private key.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return Certificate private key.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * Certificate type. Valid value is `&#34;PEM&#34;`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Certificate type. Valid value is `&#34;PEM&#34;`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DomainCertificateArgs() {}

    private DomainCertificateArgs(DomainCertificateArgs $) {
        this.certificate = $.certificate;
        this.certificateChain = $.certificateChain;
        this.domainId = $.domainId;
        this.privateKey = $.privateKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainCertificateArgs $;

        public Builder() {
            $ = new DomainCertificateArgs();
        }

        public Builder(DomainCertificateArgs defaults) {
            $ = new DomainCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificateChain Certificate certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain Certificate certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param domainId Domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param privateKey Certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Certificate private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param type Certificate type. Valid value is `&#34;PEM&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate type. Valid value is `&#34;PEM&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainCertificateArgs build() {
            $.certificate = Objects.requireNonNull($.certificate, "expected parameter 'certificate' to be non-null");
            $.certificateChain = Objects.requireNonNull($.certificateChain, "expected parameter 'certificateChain' to be non-null");
            $.domainId = Objects.requireNonNull($.domainId, "expected parameter 'domainId' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
