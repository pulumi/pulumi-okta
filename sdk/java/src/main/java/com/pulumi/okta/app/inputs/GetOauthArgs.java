// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOauthArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOauthArgs Empty = new GetOauthArgs();

    /**
     * tells the provider to query for only `ACTIVE` applications.
     * 
     */
    @Import(name="activeOnly")
    private @Nullable Output<Boolean> activeOnly;

    /**
     * @return tells the provider to query for only `ACTIVE` applications.
     * 
     */
    public Optional<Output<Boolean>> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }

    /**
     * `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The label of the app to retrieve, conflicts with
     * `label_prefix` and `id`. Label uses the `?q=&lt;label&gt;` query parameter exposed by
     * Okta&#39;s List Apps API. The API will search both `name` and `label` using that
     * query. Therefore similarily named and labeled apps may be returned in the query
     * and have the unitended result of associating the wrong app with this data
     * source. See:
     * https://developer.okta.com/docs/reference/api/apps/#list-applications
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the app to retrieve, conflicts with
     * `label_prefix` and `id`. Label uses the `?q=&lt;label&gt;` query parameter exposed by
     * Okta&#39;s List Apps API. The API will search both `name` and `label` using that
     * query. Therefore similarily named and labeled apps may be returned in the query
     * and have the unitended result of associating the wrong app with this data
     * source. See:
     * https://developer.okta.com/docs/reference/api/apps/#list-applications
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    @Import(name="labelPrefix")
    private @Nullable Output<String> labelPrefix;

    /**
     * @return Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    public Optional<Output<String>> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }

    /**
     * Indicator that allows the app to skip `groups` sync. Default is `false`.
     * 
     */
    @Import(name="skipGroups")
    private @Nullable Output<Boolean> skipGroups;

    /**
     * @return Indicator that allows the app to skip `groups` sync. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Indicator that allows the app to skip `users` sync. Default is `false`.
     * 
     */
    @Import(name="skipUsers")
    private @Nullable Output<Boolean> skipUsers;

    /**
     * @return Indicator that allows the app to skip `users` sync. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }

    private GetOauthArgs() {}

    private GetOauthArgs(GetOauthArgs $) {
        this.activeOnly = $.activeOnly;
        this.id = $.id;
        this.label = $.label;
        this.labelPrefix = $.labelPrefix;
        this.skipGroups = $.skipGroups;
        this.skipUsers = $.skipUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOauthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOauthArgs $;

        public Builder() {
            $ = new GetOauthArgs();
        }

        public Builder(GetOauthArgs defaults) {
            $ = new GetOauthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(@Nullable Output<Boolean> activeOnly) {
            $.activeOnly = activeOnly;
            return this;
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(Boolean activeOnly) {
            return activeOnly(Output.of(activeOnly));
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label The label of the app to retrieve, conflicts with
         * `label_prefix` and `id`. Label uses the `?q=&lt;label&gt;` query parameter exposed by
         * Okta&#39;s List Apps API. The API will search both `name` and `label` using that
         * query. Therefore similarily named and labeled apps may be returned in the query
         * and have the unitended result of associating the wrong app with this data
         * source. See:
         * https://developer.okta.com/docs/reference/api/apps/#list-applications
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the app to retrieve, conflicts with
         * `label_prefix` and `id`. Label uses the `?q=&lt;label&gt;` query parameter exposed by
         * Okta&#39;s List Apps API. The API will search both `name` and `label` using that
         * query. Therefore similarily named and labeled apps may be returned in the query
         * and have the unitended result of associating the wrong app with this data
         * source. See:
         * https://developer.okta.com/docs/reference/api/apps/#list-applications
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(@Nullable Output<String> labelPrefix) {
            $.labelPrefix = labelPrefix;
            return this;
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(String labelPrefix) {
            return labelPrefix(Output.of(labelPrefix));
        }

        /**
         * @param skipGroups Indicator that allows the app to skip `groups` sync. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(@Nullable Output<Boolean> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipGroups Indicator that allows the app to skip `groups` sync. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(Boolean skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @param skipUsers Indicator that allows the app to skip `users` sync. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(@Nullable Output<Boolean> skipUsers) {
            $.skipUsers = skipUsers;
            return this;
        }

        /**
         * @param skipUsers Indicator that allows the app to skip `users` sync. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(Boolean skipUsers) {
            return skipUsers(Output.of(skipUsers));
        }

        public GetOauthArgs build() {
            return $;
        }
    }

}
