// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Bearer token granting privileges to Okta API.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Bearer token granting privileges to Okta API.
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * API Token granting privileges to Okta API.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return API Token granting privileges to Okta API.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * Use exponential back off strategy for rate limits.
     * 
     */
    @Import(name="backoff", json=true)
    private @Nullable Output<Boolean> backoff;

    /**
     * @return Use exponential back off strategy for rate limits.
     * 
     */
    public Optional<Output<Boolean>> backoff() {
        return Optional.ofNullable(this.backoff);
    }

    /**
     * The Okta url. (Use &#39;oktapreview.com&#39; for Okta testing)
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return The Okta url. (Use &#39;oktapreview.com&#39; for Okta testing)
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * API Token granting privileges to Okta API.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return API Token granting privileges to Okta API.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
     * 
     */
    @Import(name="httpProxy")
    private @Nullable Output<String> httpProxy;

    /**
     * @return Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
     * 
     */
    public Optional<Output<String>> httpProxy() {
        return Optional.ofNullable(this.httpProxy);
    }

    /**
     * providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
     * 
     */
    @Import(name="logLevel", json=true)
    private @Nullable Output<Integer> logLevel;

    /**
     * @return providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
     * 
     */
    public Optional<Output<Integer>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * (Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls
     * to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:
     * https://developer.okta.com/docs/reference/rl-global-mgmt/
     * 
     */
    @Import(name="maxApiCapacity", json=true)
    private @Nullable Output<Integer> maxApiCapacity;

    /**
     * @return (Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls
     * to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:
     * https://developer.okta.com/docs/reference/rl-global-mgmt/
     * 
     */
    public Optional<Output<Integer>> maxApiCapacity() {
        return Optional.ofNullable(this.maxApiCapacity);
    }

    /**
     * maximum number of retries to attempt before erroring out.
     * 
     */
    @Import(name="maxRetries", json=true)
    private @Nullable Output<Integer> maxRetries;

    /**
     * @return maximum number of retries to attempt before erroring out.
     * 
     */
    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    /**
     * maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     * 
     */
    @Import(name="maxWaitSeconds", json=true)
    private @Nullable Output<Integer> maxWaitSeconds;

    /**
     * @return maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     * 
     */
    public Optional<Output<Integer>> maxWaitSeconds() {
        return Optional.ofNullable(this.maxWaitSeconds);
    }

    /**
     * minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     * 
     */
    @Import(name="minWaitSeconds", json=true)
    private @Nullable Output<Integer> minWaitSeconds;

    /**
     * @return minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
     * 
     */
    public Optional<Output<Integer>> minWaitSeconds() {
        return Optional.ofNullable(this.minWaitSeconds);
    }

    /**
     * The organization to manage in Okta.
     * 
     */
    @Import(name="orgName")
    private @Nullable Output<String> orgName;

    /**
     * @return The organization to manage in Okta.
     * 
     */
    public Optional<Output<String>> orgName() {
        return Optional.ofNullable(this.orgName);
    }

    /**
     * Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
     * https://developer.okta.com/docs/api/getting_started/rate-limits.
     * 
     */
    @Import(name="parallelism", json=true)
    private @Nullable Output<Integer> parallelism;

    /**
     * @return Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
     * https://developer.okta.com/docs/api/getting_started/rate-limits.
     * 
     */
    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    /**
     * API Token granting privileges to Okta API.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return API Token granting privileges to Okta API.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * API Token Id granting privileges to Okta API.
     * 
     */
    @Import(name="privateKeyId")
    private @Nullable Output<String> privateKeyId;

    /**
     * @return API Token Id granting privileges to Okta API.
     * 
     */
    public Optional<Output<String>> privateKeyId() {
        return Optional.ofNullable(this.privateKeyId);
    }

    /**
     * Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
     * value can be `300`.
     * 
     */
    @Import(name="requestTimeout", json=true)
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
     * value can be `300`.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * API Token granting privileges to Okta API.
     * 
     */
    @Import(name="scopes", json=true)
    private @Nullable Output<List<String>> scopes;

    /**
     * @return API Token granting privileges to Okta API.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accessToken = $.accessToken;
        this.apiToken = $.apiToken;
        this.backoff = $.backoff;
        this.baseUrl = $.baseUrl;
        this.clientId = $.clientId;
        this.httpProxy = $.httpProxy;
        this.logLevel = $.logLevel;
        this.maxApiCapacity = $.maxApiCapacity;
        this.maxRetries = $.maxRetries;
        this.maxWaitSeconds = $.maxWaitSeconds;
        this.minWaitSeconds = $.minWaitSeconds;
        this.orgName = $.orgName;
        this.parallelism = $.parallelism;
        this.privateKey = $.privateKey;
        this.privateKeyId = $.privateKeyId;
        this.requestTimeout = $.requestTimeout;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Bearer token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Bearer token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param apiToken API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param backoff Use exponential back off strategy for rate limits.
         * 
         * @return builder
         * 
         */
        public Builder backoff(@Nullable Output<Boolean> backoff) {
            $.backoff = backoff;
            return this;
        }

        /**
         * @param backoff Use exponential back off strategy for rate limits.
         * 
         * @return builder
         * 
         */
        public Builder backoff(Boolean backoff) {
            return backoff(Output.of(backoff));
        }

        /**
         * @param baseUrl The Okta url. (Use &#39;oktapreview.com&#39; for Okta testing)
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The Okta url. (Use &#39;oktapreview.com&#39; for Okta testing)
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param clientId API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param httpProxy Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
         * 
         * @return builder
         * 
         */
        public Builder httpProxy(@Nullable Output<String> httpProxy) {
            $.httpProxy = httpProxy;
            return this;
        }

        /**
         * @param httpProxy Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
         * 
         * @return builder
         * 
         */
        public Builder httpProxy(String httpProxy) {
            return httpProxy(Output.of(httpProxy));
        }

        /**
         * @param logLevel providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<Integer> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel providers log level. Minimum is 1 (TRACE), and maximum is 5 (ERROR)
         * 
         * @return builder
         * 
         */
        public Builder logLevel(Integer logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param maxApiCapacity (Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls
         * to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:
         * https://developer.okta.com/docs/reference/rl-global-mgmt/
         * 
         * @return builder
         * 
         */
        public Builder maxApiCapacity(@Nullable Output<Integer> maxApiCapacity) {
            $.maxApiCapacity = maxApiCapacity;
            return this;
        }

        /**
         * @param maxApiCapacity (Experimental) sets what percentage of capacity the provider can use of the total rate limit capacity while making calls
         * to the Okta management API endpoints. Okta API operates in one minute buckets. See Okta Management API Rate Limits:
         * https://developer.okta.com/docs/reference/rl-global-mgmt/
         * 
         * @return builder
         * 
         */
        public Builder maxApiCapacity(Integer maxApiCapacity) {
            return maxApiCapacity(Output.of(maxApiCapacity));
        }

        /**
         * @param maxRetries maximum number of retries to attempt before erroring out.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @param maxRetries maximum number of retries to attempt before erroring out.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param maxWaitSeconds maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxWaitSeconds(@Nullable Output<Integer> maxWaitSeconds) {
            $.maxWaitSeconds = maxWaitSeconds;
            return this;
        }

        /**
         * @param maxWaitSeconds maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxWaitSeconds(Integer maxWaitSeconds) {
            return maxWaitSeconds(Output.of(maxWaitSeconds));
        }

        /**
         * @param minWaitSeconds minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
         * 
         * @return builder
         * 
         */
        public Builder minWaitSeconds(@Nullable Output<Integer> minWaitSeconds) {
            $.minWaitSeconds = minWaitSeconds;
            return this;
        }

        /**
         * @param minWaitSeconds minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
         * 
         * @return builder
         * 
         */
        public Builder minWaitSeconds(Integer minWaitSeconds) {
            return minWaitSeconds(Output.of(minWaitSeconds));
        }

        /**
         * @param orgName The organization to manage in Okta.
         * 
         * @return builder
         * 
         */
        public Builder orgName(@Nullable Output<String> orgName) {
            $.orgName = orgName;
            return this;
        }

        /**
         * @param orgName The organization to manage in Okta.
         * 
         * @return builder
         * 
         */
        public Builder orgName(String orgName) {
            return orgName(Output.of(orgName));
        }

        /**
         * @param parallelism Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
         * https://developer.okta.com/docs/api/getting_started/rate-limits.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        /**
         * @param parallelism Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
         * https://developer.okta.com/docs/api/getting_started/rate-limits.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        /**
         * @param privateKey API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyId API Token Id granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(@Nullable Output<String> privateKeyId) {
            $.privateKeyId = privateKeyId;
            return this;
        }

        /**
         * @param privateKeyId API Token Id granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(String privateKeyId) {
            return privateKeyId(Output.of(privateKeyId));
        }

        /**
         * @param requestTimeout Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
         * value can be `300`.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Timeout for single request (in seconds) which is made to Okta, the default is `0` (means no limit is set). The maximum
         * value can be `300`.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param scopes API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes API Token granting privileges to Okta API.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
