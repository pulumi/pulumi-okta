// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRoleSubscriptionResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Type of the notification
     * 
     */
    private String notificationType;
    /**
     * @return Type of the role
     * 
     */
    private String roleType;
    /**
     * @return Status of subscription
     * 
     */
    private String status;

    private GetRoleSubscriptionResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Type of the notification
     * 
     */
    public String notificationType() {
        return this.notificationType;
    }
    /**
     * @return Type of the role
     * 
     */
    public String roleType() {
        return this.roleType;
    }
    /**
     * @return Status of subscription
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String notificationType;
        private String roleType;
        private String status;
        public Builder() {}
        public Builder(GetRoleSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.notificationType = defaults.notificationType;
    	      this.roleType = defaults.roleType;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRoleSubscriptionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder notificationType(String notificationType) {
            if (notificationType == null) {
              throw new MissingRequiredPropertyException("GetRoleSubscriptionResult", "notificationType");
            }
            this.notificationType = notificationType;
            return this;
        }
        @CustomType.Setter
        public Builder roleType(String roleType) {
            if (roleType == null) {
              throw new MissingRequiredPropertyException("GetRoleSubscriptionResult", "roleType");
            }
            this.roleType = roleType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRoleSubscriptionResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetRoleSubscriptionResult build() {
            final var _resultValue = new GetRoleSubscriptionResult();
            _resultValue.id = id;
            _resultValue.notificationType = notificationType;
            _resultValue.roleType = roleType;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
