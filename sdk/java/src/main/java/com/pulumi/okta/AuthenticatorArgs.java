// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticatorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticatorArgs Empty = new AuthenticatorArgs();

    /**
     * A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Name of the authenticator.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the authenticator.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    @Import(name="providerAuthPort")
    private @Nullable Output<Integer> providerAuthPort;

    /**
     * @return The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    public Optional<Output<Integer>> providerAuthPort() {
        return Optional.ofNullable(this.providerAuthPort);
    }

    /**
     * Server host name or IP address. Default is `&#34;localhost&#34;`. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    @Import(name="providerHostname")
    private @Nullable Output<String> providerHostname;

    /**
     * @return Server host name or IP address. Default is `&#34;localhost&#34;`. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    public Optional<Output<String>> providerHostname() {
        return Optional.ofNullable(this.providerHostname);
    }

    /**
     * An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    @Import(name="providerSharedSecret")
    private @Nullable Output<String> providerSharedSecret;

    /**
     * @return An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    public Optional<Output<String>> providerSharedSecret() {
        return Optional.ofNullable(this.providerSharedSecret);
    }

    /**
     * Username template expected by the provider. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    @Import(name="providerUserNameTemplate")
    private @Nullable Output<String> providerUserNameTemplate;

    /**
     * @return Username template expected by the provider. Used only for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    public Optional<Output<String>> providerUserNameTemplate() {
        return Optional.ofNullable(this.providerUserNameTemplate);
    }

    /**
     * Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<String> settings;

    /**
     * @return Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `&#34;security_key&#34;`.
     * 
     */
    public Optional<Output<String>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Status of the authenticator. Default is `ACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the authenticator. Default is `ACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AuthenticatorArgs() {}

    private AuthenticatorArgs(AuthenticatorArgs $) {
        this.key = $.key;
        this.name = $.name;
        this.providerAuthPort = $.providerAuthPort;
        this.providerHostname = $.providerHostname;
        this.providerSharedSecret = $.providerSharedSecret;
        this.providerUserNameTemplate = $.providerUserNameTemplate;
        this.settings = $.settings;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticatorArgs $;

        public Builder() {
            $ = new AuthenticatorArgs();
        }

        public Builder(AuthenticatorArgs defaults) {
            $ = new AuthenticatorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A human-readable string that identifies the authenticator. Some authenticators are available by feature flag on the organization. Possible values inclue: `duo`, `external_idp`, `google_otp`, `okta_email`, `okta_password`, `okta_verify`, `onprem_mfa`, `phone_number`, `rsa_token`, `security_question`, `webauthn`
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Name of the authenticator.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the authenticator.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param providerAuthPort The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerAuthPort(@Nullable Output<Integer> providerAuthPort) {
            $.providerAuthPort = providerAuthPort;
            return this;
        }

        /**
         * @param providerAuthPort The RADIUS server port (for example 1812). This is defined when the On-Prem RADIUS server is configured. Default is `9000`. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerAuthPort(Integer providerAuthPort) {
            return providerAuthPort(Output.of(providerAuthPort));
        }

        /**
         * @param providerHostname Server host name or IP address. Default is `&#34;localhost&#34;`. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerHostname(@Nullable Output<String> providerHostname) {
            $.providerHostname = providerHostname;
            return this;
        }

        /**
         * @param providerHostname Server host name or IP address. Default is `&#34;localhost&#34;`. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerHostname(String providerHostname) {
            return providerHostname(Output.of(providerHostname));
        }

        /**
         * @param providerSharedSecret An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerSharedSecret(@Nullable Output<String> providerSharedSecret) {
            $.providerSharedSecret = providerSharedSecret;
            return this;
        }

        /**
         * @param providerSharedSecret An authentication key that must be defined when the RADIUS server is configured, and must be the same on both the RADIUS client and server. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerSharedSecret(String providerSharedSecret) {
            return providerSharedSecret(Output.of(providerSharedSecret));
        }

        /**
         * @param providerUserNameTemplate Username template expected by the provider. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerUserNameTemplate(@Nullable Output<String> providerUserNameTemplate) {
            $.providerUserNameTemplate = providerUserNameTemplate;
            return this;
        }

        /**
         * @param providerUserNameTemplate Username template expected by the provider. Used only for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder providerUserNameTemplate(String providerUserNameTemplate) {
            return providerUserNameTemplate(Output.of(providerUserNameTemplate));
        }

        /**
         * @param settings Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<String> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Settings for the authenticator. Settings object contains values based on Authenticator key. It is not used for authenticators with type `&#34;security_key&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder settings(String settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param status Status of the authenticator. Default is `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the authenticator. Default is `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AuthenticatorArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            return $;
        }
    }

}
