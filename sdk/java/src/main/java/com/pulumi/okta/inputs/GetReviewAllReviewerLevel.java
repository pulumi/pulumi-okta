// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.okta.inputs.GetReviewAllReviewerLevelReviewerGroupProfile;
import com.pulumi.okta.inputs.GetReviewAllReviewerLevelReviewerProfile;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetReviewAllReviewerLevel extends com.pulumi.resources.InvokeArgs {

    public static final GetReviewAllReviewerLevel Empty = new GetReviewAllReviewerLevel();

    /**
     * The ISO 8601 formatted date and time when the resource was created.
     * 
     */
    @Import(name="created", required=true)
    private String created;

    /**
     * @return The ISO 8601 formatted date and time when the resource was created.
     * 
     */
    public String created() {
        return this.created;
    }

    /**
     * The id of user who created the resource.
     * 
     */
    @Import(name="createdBy", required=true)
    private String createdBy;

    /**
     * @return The id of user who created the resource.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
     * 
     */
    @Import(name="decision", required=true)
    private String decision;

    /**
     * @return The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
     * 
     */
    public String decision() {
        return this.decision;
    }

    /**
     * The ID of  review.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The ID of  review.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    @Import(name="lastUpdated", required=true)
    private String lastUpdated;

    /**
     * @return The ISO 8601 formatted date and time when the object was last updated.
     * 
     */
    public String lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * The id of user who last updated the object.
     * 
     */
    @Import(name="lastUpdatedBy", required=true)
    private String lastUpdatedBy;

    /**
     * @return The id of user who last updated the object.
     * 
     */
    public String lastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    @Import(name="reviewerGroupProfile")
    private @Nullable GetReviewAllReviewerLevelReviewerGroupProfile reviewerGroupProfile;

    public Optional<GetReviewAllReviewerLevelReviewerGroupProfile> reviewerGroupProfile() {
        return Optional.ofNullable(this.reviewerGroupProfile);
    }

    @Import(name="reviewerLevel", required=true)
    private String reviewerLevel;

    public String reviewerLevel() {
        return this.reviewerLevel;
    }

    @Import(name="reviewerProfile")
    private @Nullable GetReviewAllReviewerLevelReviewerProfile reviewerProfile;

    public Optional<GetReviewAllReviewerLevelReviewerProfile> reviewerProfile() {
        return Optional.ofNullable(this.reviewerProfile);
    }

    /**
     * The type of reviewer to which the review is assigned.
     * 
     */
    @Import(name="reviewerType", required=true)
    private String reviewerType;

    /**
     * @return The type of reviewer to which the review is assigned.
     * 
     */
    public String reviewerType() {
        return this.reviewerType;
    }

    private GetReviewAllReviewerLevel() {}

    private GetReviewAllReviewerLevel(GetReviewAllReviewerLevel $) {
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.decision = $.decision;
        this.id = $.id;
        this.lastUpdated = $.lastUpdated;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.reviewerGroupProfile = $.reviewerGroupProfile;
        this.reviewerLevel = $.reviewerLevel;
        this.reviewerProfile = $.reviewerProfile;
        this.reviewerType = $.reviewerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetReviewAllReviewerLevel defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetReviewAllReviewerLevel $;

        public Builder() {
            $ = new GetReviewAllReviewerLevel();
        }

        public Builder(GetReviewAllReviewerLevel defaults) {
            $ = new GetReviewAllReviewerLevel(Objects.requireNonNull(defaults));
        }

        /**
         * @param created The ISO 8601 formatted date and time when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            $.created = created;
            return this;
        }

        /**
         * @param createdBy The id of user who created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param decision The decision taken by the reviewer. Will be `UNASSIGNED` if no decision is made.
         * 
         * @return builder
         * 
         */
        public Builder decision(String decision) {
            $.decision = decision;
            return this;
        }

        /**
         * @param id The ID of  review.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param lastUpdated The ISO 8601 formatted date and time when the object was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(String lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdatedBy The id of user who last updated the object.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        public Builder reviewerGroupProfile(@Nullable GetReviewAllReviewerLevelReviewerGroupProfile reviewerGroupProfile) {
            $.reviewerGroupProfile = reviewerGroupProfile;
            return this;
        }

        public Builder reviewerLevel(String reviewerLevel) {
            $.reviewerLevel = reviewerLevel;
            return this;
        }

        public Builder reviewerProfile(@Nullable GetReviewAllReviewerLevelReviewerProfile reviewerProfile) {
            $.reviewerProfile = reviewerProfile;
            return this;
        }

        /**
         * @param reviewerType The type of reviewer to which the review is assigned.
         * 
         * @return builder
         * 
         */
        public Builder reviewerType(String reviewerType) {
            $.reviewerType = reviewerType;
            return this;
        }

        public GetReviewAllReviewerLevel build() {
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "created");
            }
            if ($.createdBy == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "createdBy");
            }
            if ($.decision == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "decision");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "id");
            }
            if ($.lastUpdated == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "lastUpdated");
            }
            if ($.lastUpdatedBy == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "lastUpdatedBy");
            }
            if ($.reviewerLevel == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "reviewerLevel");
            }
            if ($.reviewerType == null) {
                throw new MissingRequiredPropertyException("GetReviewAllReviewerLevel", "reviewerType");
            }
            return $;
        }
    }

}
