// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inline.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inline.inputs.HookHeaderArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HookState extends com.pulumi.resources.ResourceArgs {

    public static final HookState Empty = new HookState();

    @Import(name="auth")
    private @Nullable Output<Map<String,String>> auth;

    public Optional<Output<Map<String,String>>> auth() {
        return Optional.ofNullable(this.auth);
    }

    @Import(name="channel")
    private @Nullable Output<Map<String,String>> channel;

    public Optional<Output<Map<String,String>>> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * Map of headers to send along in inline hook request.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<HookHeaderArgs>> headers;

    /**
     * @return Map of headers to send along in inline hook request.
     * 
     */
    public Optional<Output<List<HookHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The inline hook display name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The inline hook display name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Default to `ACTIVE`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Default to `ACTIVE`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The version of the hook. The currently-supported version is `1.0.0`.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the hook. The currently-supported version is `1.0.0`.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private HookState() {}

    private HookState(HookState $) {
        this.auth = $.auth;
        this.channel = $.channel;
        this.headers = $.headers;
        this.name = $.name;
        this.status = $.status;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HookState $;

        public Builder() {
            $ = new HookState();
        }

        public Builder(HookState defaults) {
            $ = new HookState(Objects.requireNonNull(defaults));
        }

        public Builder auth(@Nullable Output<Map<String,String>> auth) {
            $.auth = auth;
            return this;
        }

        public Builder auth(Map<String,String> auth) {
            return auth(Output.of(auth));
        }

        public Builder channel(@Nullable Output<Map<String,String>> channel) {
            $.channel = channel;
            return this;
        }

        public Builder channel(Map<String,String> channel) {
            return channel(Output.of(channel));
        }

        /**
         * @param headers Map of headers to send along in inline hook request.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<HookHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Map of headers to send along in inline hook request.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<HookHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Map of headers to send along in inline hook request.
         * 
         * @return builder
         * 
         */
        public Builder headers(HookHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param name The inline hook display name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The inline hook display name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Default to `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Default to `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of hook to create. [See here for supported types](https://developer.okta.com/docs/reference/api/inline-hooks/#supported-inline-hook-types).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version The version of the hook. The currently-supported version is `1.0.0`.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the hook. The currently-supported version is `1.0.0`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public HookState build() {
            return $;
        }
    }

}
