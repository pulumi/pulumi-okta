// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsersSearch {
    /**
     * @return Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
     * 
     */
    private final @Nullable String comparison;
    /**
     * @return A raw search expression string. If present it will override name/comparison/value.
     * 
     */
    private final @Nullable String expression;
    /**
     * @return Name of property to search against.
     * 
     */
    private final @Nullable String name;
    /**
     * @return Value to compare with.
     * 
     */
    private final @Nullable String value;

    @CustomType.Constructor
    private GetUsersSearch(
        @CustomType.Parameter("comparison") @Nullable String comparison,
        @CustomType.Parameter("expression") @Nullable String expression,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("value") @Nullable String value) {
        this.comparison = comparison;
        this.expression = expression;
        this.name = name;
        this.value = value;
    }

    /**
     * @return Comparison to use. Comparitors for strings: [`eq`, `ge`, `gt`, `le`, `lt`, `ne`, `pr`, `sw`](https://developer.okta.com/docs/reference/core-okta-api/#operators).
     * 
     */
    public Optional<String> comparison() {
        return Optional.ofNullable(this.comparison);
    }
    /**
     * @return A raw search expression string. If present it will override name/comparison/value.
     * 
     */
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }
    /**
     * @return Name of property to search against.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Value to compare with.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersSearch defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String comparison;
        private @Nullable String expression;
        private @Nullable String name;
        private @Nullable String value;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersSearch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparison = defaults.comparison;
    	      this.expression = defaults.expression;
    	      this.name = defaults.name;
    	      this.value = defaults.value;
        }

        public Builder comparison(@Nullable String comparison) {
            this.comparison = comparison;
            return this;
        }
        public Builder expression(@Nullable String expression) {
            this.expression = expression;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }        public GetUsersSearch build() {
            return new GetUsersSearch(comparison, expression, name, value);
        }
    }
}
