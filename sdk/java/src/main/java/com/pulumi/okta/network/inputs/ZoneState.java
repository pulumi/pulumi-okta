// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneState Empty = new ZoneState();

    /**
     * List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     * 
     */
    @Import(name="asns")
    private @Nullable Output<List<String>> asns;

    /**
     * @return List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
     * 
     */
    public Optional<Output<List<String>>> asns() {
        return Optional.ofNullable(this.asns);
    }

    /**
     * Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     * 
     */
    @Import(name="dynamicLocations")
    private @Nullable Output<List<String>> dynamicLocations;

    /**
     * @return Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
     * 
     */
    public Optional<Output<List<String>>> dynamicLocations() {
        return Optional.ofNullable(this.dynamicLocations);
    }

    /**
     * Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     * 
     */
    @Import(name="dynamicLocationsExcludes")
    private @Nullable Output<List<String>> dynamicLocationsExcludes;

    /**
     * @return Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
     * 
     */
    public Optional<Output<List<String>>> dynamicLocationsExcludes() {
        return Optional.ofNullable(this.dynamicLocationsExcludes);
    }

    /**
     * Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     * 
     */
    @Import(name="dynamicProxyType")
    private @Nullable Output<String> dynamicProxyType;

    /**
     * @return Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
     * 
     */
    public Optional<Output<String>> dynamicProxyType() {
        return Optional.ofNullable(this.dynamicProxyType);
    }

    /**
     * Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     * 
     */
    @Import(name="gateways")
    private @Nullable Output<List<String>> gateways;

    /**
     * @return Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
     * 
     */
    public Optional<Output<List<String>>> gateways() {
        return Optional.ofNullable(this.gateways);
    }

    /**
     * List of ip service excluded. Use with type `DYNAMIC_V2`
     * 
     */
    @Import(name="ipServiceCategoriesExcludes")
    private @Nullable Output<List<String>> ipServiceCategoriesExcludes;

    /**
     * @return List of ip service excluded. Use with type `DYNAMIC_V2`
     * 
     */
    public Optional<Output<List<String>>> ipServiceCategoriesExcludes() {
        return Optional.ofNullable(this.ipServiceCategoriesExcludes);
    }

    /**
     * List of ip service included. Use with type `DYNAMIC_V2`
     * 
     */
    @Import(name="ipServiceCategoriesIncludes")
    private @Nullable Output<List<String>> ipServiceCategoriesIncludes;

    /**
     * @return List of ip service included. Use with type `DYNAMIC_V2`
     * 
     */
    public Optional<Output<List<String>>> ipServiceCategoriesIncludes() {
        return Optional.ofNullable(this.ipServiceCategoriesIncludes);
    }

    /**
     * Name of the Network Zone Resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Network Zone Resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     * 
     */
    @Import(name="proxies")
    private @Nullable Output<List<String>> proxies;

    /**
     * @return Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
     * 
     */
    public Optional<Output<List<String>>> proxies() {
        return Optional.ofNullable(this.proxies);
    }

    /**
     * Network Status - can either be `ACTIVE` or `INACTIVE` only
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Network Status - can either be `ACTIVE` or `INACTIVE` only
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
     * 
     */
    @Import(name="usage")
    private @Nullable Output<String> usage;

    /**
     * @return Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
     * 
     */
    public Optional<Output<String>> usage() {
        return Optional.ofNullable(this.usage);
    }

    private ZoneState() {}

    private ZoneState(ZoneState $) {
        this.asns = $.asns;
        this.dynamicLocations = $.dynamicLocations;
        this.dynamicLocationsExcludes = $.dynamicLocationsExcludes;
        this.dynamicProxyType = $.dynamicProxyType;
        this.gateways = $.gateways;
        this.ipServiceCategoriesExcludes = $.ipServiceCategoriesExcludes;
        this.ipServiceCategoriesIncludes = $.ipServiceCategoriesIncludes;
        this.name = $.name;
        this.proxies = $.proxies;
        this.status = $.status;
        this.type = $.type;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneState $;

        public Builder() {
            $ = new ZoneState();
        }

        public Builder(ZoneState defaults) {
            $ = new ZoneState(Objects.requireNonNull(defaults));
        }

        /**
         * @param asns List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder asns(@Nullable Output<List<String>> asns) {
            $.asns = asns;
            return this;
        }

        /**
         * @param asns List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder asns(List<String> asns) {
            return asns(Output.of(asns));
        }

        /**
         * @param asns List of asns included. Format of each array value: a string representation of an ASN numeric value. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder asns(String... asns) {
            return asns(List.of(asns));
        }

        /**
         * @param dynamicLocations Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocations(@Nullable Output<List<String>> dynamicLocations) {
            $.dynamicLocations = dynamicLocations;
            return this;
        }

        /**
         * @param dynamicLocations Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocations(List<String> dynamicLocations) {
            return dynamicLocations(Output.of(dynamicLocations));
        }

        /**
         * @param dynamicLocations Array of locations ISO-3166-1(2) included. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC` or `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocations(String... dynamicLocations) {
            return dynamicLocations(List.of(dynamicLocations));
        }

        /**
         * @param dynamicLocationsExcludes Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocationsExcludes(@Nullable Output<List<String>> dynamicLocationsExcludes) {
            $.dynamicLocationsExcludes = dynamicLocationsExcludes;
            return this;
        }

        /**
         * @param dynamicLocationsExcludes Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocationsExcludes(List<String> dynamicLocationsExcludes) {
            return dynamicLocationsExcludes(Output.of(dynamicLocationsExcludes));
        }

        /**
         * @param dynamicLocationsExcludes Array of locations ISO-3166-1(2) excluded. Format code: countryCode OR countryCode-regionCode. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder dynamicLocationsExcludes(String... dynamicLocationsExcludes) {
            return dynamicLocationsExcludes(List.of(dynamicLocationsExcludes));
        }

        /**
         * @param dynamicProxyType Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
         * 
         * @return builder
         * 
         */
        public Builder dynamicProxyType(@Nullable Output<String> dynamicProxyType) {
            $.dynamicProxyType = dynamicProxyType;
            return this;
        }

        /**
         * @param dynamicProxyType Type of proxy being controlled by this dynamic network zone - can be one of `Any`, `TorAnonymizer` or `NotTorAnonymizer`. Use with type `DYNAMIC`
         * 
         * @return builder
         * 
         */
        public Builder dynamicProxyType(String dynamicProxyType) {
            return dynamicProxyType(Output.of(dynamicProxyType));
        }

        /**
         * @param gateways Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder gateways(@Nullable Output<List<String>> gateways) {
            $.gateways = gateways;
            return this;
        }

        /**
         * @param gateways Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder gateways(List<String> gateways) {
            return gateways(Output.of(gateways));
        }

        /**
         * @param gateways Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder gateways(String... gateways) {
            return gateways(List.of(gateways));
        }

        /**
         * @param ipServiceCategoriesExcludes List of ip service excluded. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesExcludes(@Nullable Output<List<String>> ipServiceCategoriesExcludes) {
            $.ipServiceCategoriesExcludes = ipServiceCategoriesExcludes;
            return this;
        }

        /**
         * @param ipServiceCategoriesExcludes List of ip service excluded. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesExcludes(List<String> ipServiceCategoriesExcludes) {
            return ipServiceCategoriesExcludes(Output.of(ipServiceCategoriesExcludes));
        }

        /**
         * @param ipServiceCategoriesExcludes List of ip service excluded. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesExcludes(String... ipServiceCategoriesExcludes) {
            return ipServiceCategoriesExcludes(List.of(ipServiceCategoriesExcludes));
        }

        /**
         * @param ipServiceCategoriesIncludes List of ip service included. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesIncludes(@Nullable Output<List<String>> ipServiceCategoriesIncludes) {
            $.ipServiceCategoriesIncludes = ipServiceCategoriesIncludes;
            return this;
        }

        /**
         * @param ipServiceCategoriesIncludes List of ip service included. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesIncludes(List<String> ipServiceCategoriesIncludes) {
            return ipServiceCategoriesIncludes(Output.of(ipServiceCategoriesIncludes));
        }

        /**
         * @param ipServiceCategoriesIncludes List of ip service included. Use with type `DYNAMIC_V2`
         * 
         * @return builder
         * 
         */
        public Builder ipServiceCategoriesIncludes(String... ipServiceCategoriesIncludes) {
            return ipServiceCategoriesIncludes(List.of(ipServiceCategoriesIncludes));
        }

        /**
         * @param name Name of the Network Zone Resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Network Zone Resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param proxies Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder proxies(@Nullable Output<List<String>> proxies) {
            $.proxies = proxies;
            return this;
        }

        /**
         * @param proxies Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder proxies(List<String> proxies) {
            return proxies(Output.of(proxies));
        }

        /**
         * @param proxies Array of values in CIDR/range form depending on the way it&#39;s been declared (i.e. CIDR will contain /suffix). Please check API docs for examples. Can not be set if `usage` is set to `BLOCKLIST`. Use with type `IP`
         * 
         * @return builder
         * 
         */
        public Builder proxies(String... proxies) {
            return proxies(List.of(proxies));
        }

        /**
         * @param status Network Status - can either be `ACTIVE` or `INACTIVE` only
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Network Status - can either be `ACTIVE` or `INACTIVE` only
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the Network Zone - can be `IP`, `DYNAMIC` or `DYNAMIC_V2` only
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usage Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage Usage of the Network Zone - can be either `POLICY` or `BLOCKLIST`. By default, it is `POLICY`
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public ZoneState build() {
            return $;
        }
    }

}
