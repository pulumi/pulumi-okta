// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.auth;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.auth.ServerScopeArgs;
import com.pulumi.okta.auth.inputs.ServerScopeState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an Authorization Server Scope. This resource allows you to create and configure an Authorization Server Scope.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.auth.ServerScope;
 * import com.pulumi.okta.auth.ServerScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ServerScope("example", ServerScopeArgs.builder()
 *             .authServerId("<auth server id>")
 *             .metadataPublish("NO_CLIENTS")
 *             .name("example")
 *             .consent("IMPLICIT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:auth/serverScope:ServerScope example &amp;#60;auth server id&amp;#62;/&amp;#60;scope id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:auth/serverScope:ServerScope")
public class ServerScope extends com.pulumi.resources.CustomResource {
    /**
     * Auth server ID
     * 
     */
    @Export(name="authServerId", refs={String.class}, tree="[0]")
    private Output<String> authServerId;

    /**
     * @return Auth server ID
     * 
     */
    public Output<String> authServerId() {
        return this.authServerId;
    }
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default: `IMPLICIT`
     * 
     */
    @Export(name="consent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consent;

    /**
     * @return Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default: `IMPLICIT`
     * 
     */
    public Output<Optional<String>> consent() {
        return Codegen.optional(this.consent);
    }
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     * 
     */
    @Export(name="default", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> default_;

    /**
     * @return A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
     * 
     */
    public Output<Optional<Boolean>> default_() {
        return Codegen.optional(this.default_);
    }
    /**
     * Description of the Auth Server Scope.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the Auth Server Scope.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Name of the end user displayed in a consent dialog box
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Name of the end user displayed in a consent dialog box
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     * 
     */
    @Export(name="metadataPublish", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> metadataPublish;

    /**
     * @return Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     * 
     */
    public Output<Optional<String>> metadataPublish() {
        return Codegen.optional(this.metadataPublish);
    }
    /**
     * Auth server scope name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Auth server scope name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Whether the scope optional
     * 
     */
    @Export(name="optional", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> optional;

    /**
     * @return Whether the scope optional
     * 
     */
    public Output<Optional<Boolean>> optional() {
        return Codegen.optional(this.optional);
    }
    /**
     * Whether Okta created the Scope
     * 
     */
    @Export(name="system", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> system;

    /**
     * @return Whether Okta created the Scope
     * 
     */
    public Output<Boolean> system() {
        return this.system;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerScope(String name) {
        this(name, ServerScopeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerScope(String name, ServerScopeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerScope(String name, ServerScopeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:auth/serverScope:ServerScope", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private ServerScope(String name, Output<String> id, @Nullable ServerScopeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:auth/serverScope:ServerScope", name, state, makeResourceOptions(options, id));
    }

    private static ServerScopeArgs makeArgs(ServerScopeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServerScopeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerScope get(String name, Output<String> id, @Nullable ServerScopeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerScope(name, id, state, options);
    }
}
