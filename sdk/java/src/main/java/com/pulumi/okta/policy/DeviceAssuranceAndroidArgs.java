// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceAssuranceAndroidArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceAssuranceAndroidArgs Empty = new DeviceAssuranceAndroidArgs();

    /**
     * List of disk encryption type, can be `FULL`, `USER`
     * 
     */
    @Import(name="diskEncryptionTypes")
    private @Nullable Output<List<String>> diskEncryptionTypes;

    /**
     * @return List of disk encryption type, can be `FULL`, `USER`
     * 
     */
    public Optional<Output<List<String>>> diskEncryptionTypes() {
        return Optional.ofNullable(this.diskEncryptionTypes);
    }

    /**
     * Is the device jailbroken in the device assurance policy.
     * 
     */
    @Import(name="jailbreak")
    private @Nullable Output<Boolean> jailbreak;

    /**
     * @return Is the device jailbroken in the device assurance policy.
     * 
     */
    public Optional<Output<Boolean>> jailbreak() {
        return Optional.ofNullable(this.jailbreak);
    }

    /**
     * Policy device assurance name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy device assurance name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Minimum os version of the device in the device assurance policy.
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return Minimum os version of the device in the device assurance policy.
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     * 
     */
    @Import(name="screenlockTypes")
    private @Nullable Output<List<String>> screenlockTypes;

    /**
     * @return List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
     * 
     */
    public Optional<Output<List<String>>> screenlockTypes() {
        return Optional.ofNullable(this.screenlockTypes);
    }

    /**
     * Indicates if the device contains a secure hardware functionality
     * 
     */
    @Import(name="secureHardwarePresent")
    private @Nullable Output<Boolean> secureHardwarePresent;

    /**
     * @return Indicates if the device contains a secure hardware functionality
     * 
     */
    public Optional<Output<Boolean>> secureHardwarePresent() {
        return Optional.ofNullable(this.secureHardwarePresent);
    }

    private DeviceAssuranceAndroidArgs() {}

    private DeviceAssuranceAndroidArgs(DeviceAssuranceAndroidArgs $) {
        this.diskEncryptionTypes = $.diskEncryptionTypes;
        this.jailbreak = $.jailbreak;
        this.name = $.name;
        this.osVersion = $.osVersion;
        this.screenlockTypes = $.screenlockTypes;
        this.secureHardwarePresent = $.secureHardwarePresent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceAssuranceAndroidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceAssuranceAndroidArgs $;

        public Builder() {
            $ = new DeviceAssuranceAndroidArgs();
        }

        public Builder(DeviceAssuranceAndroidArgs defaults) {
            $ = new DeviceAssuranceAndroidArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionTypes List of disk encryption type, can be `FULL`, `USER`
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionTypes(@Nullable Output<List<String>> diskEncryptionTypes) {
            $.diskEncryptionTypes = diskEncryptionTypes;
            return this;
        }

        /**
         * @param diskEncryptionTypes List of disk encryption type, can be `FULL`, `USER`
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionTypes(List<String> diskEncryptionTypes) {
            return diskEncryptionTypes(Output.of(diskEncryptionTypes));
        }

        /**
         * @param diskEncryptionTypes List of disk encryption type, can be `FULL`, `USER`
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionTypes(String... diskEncryptionTypes) {
            return diskEncryptionTypes(List.of(diskEncryptionTypes));
        }

        /**
         * @param jailbreak Is the device jailbroken in the device assurance policy.
         * 
         * @return builder
         * 
         */
        public Builder jailbreak(@Nullable Output<Boolean> jailbreak) {
            $.jailbreak = jailbreak;
            return this;
        }

        /**
         * @param jailbreak Is the device jailbroken in the device assurance policy.
         * 
         * @return builder
         * 
         */
        public Builder jailbreak(Boolean jailbreak) {
            return jailbreak(Output.of(jailbreak));
        }

        /**
         * @param name Policy device assurance name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy device assurance name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osVersion Minimum os version of the device in the device assurance policy.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion Minimum os version of the device in the device assurance policy.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param screenlockTypes List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
         * 
         * @return builder
         * 
         */
        public Builder screenlockTypes(@Nullable Output<List<String>> screenlockTypes) {
            $.screenlockTypes = screenlockTypes;
            return this;
        }

        /**
         * @param screenlockTypes List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
         * 
         * @return builder
         * 
         */
        public Builder screenlockTypes(List<String> screenlockTypes) {
            return screenlockTypes(Output.of(screenlockTypes));
        }

        /**
         * @param screenlockTypes List of screenlock type, can be `BIOMETRIC` or `BIOMETRIC, PASSCODE`
         * 
         * @return builder
         * 
         */
        public Builder screenlockTypes(String... screenlockTypes) {
            return screenlockTypes(List.of(screenlockTypes));
        }

        /**
         * @param secureHardwarePresent Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder secureHardwarePresent(@Nullable Output<Boolean> secureHardwarePresent) {
            $.secureHardwarePresent = secureHardwarePresent;
            return this;
        }

        /**
         * @param secureHardwarePresent Indicates if the device contains a secure hardware functionality
         * 
         * @return builder
         * 
         */
        public Builder secureHardwarePresent(Boolean secureHardwarePresent) {
            return secureHardwarePresent(Output.of(secureHardwarePresent));
        }

        public DeviceAssuranceAndroidArgs build() {
            return $;
        }
    }

}
