// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.AppSignonPolicyRulePlatformIncludeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSignonPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSignonPolicyRuleArgs Empty = new AppSignonPolicyRuleArgs();

    /**
     * Allow or deny access based on the rule conditions. It can be set to `&#34;ALLOW&#34;` or `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return Allow or deny access based on the rule conditions. It can be set to `&#34;ALLOW&#34;` or `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
     * 
     */
    @Import(name="constraints")
    private @Nullable Output<List<String>> constraints;

    /**
     * @return An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
     * 
     */
    public Optional<Output<List<String>>> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     * 
     */
    @Import(name="customExpression")
    private @Nullable Output<String> customExpression;

    /**
     * @return This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
     * 
     */
    public Optional<Output<String>> customExpression() {
        return Optional.ofNullable(this.customExpression);
    }

    /**
     * If the device is managed. A device is managed if it&#39;s managed by a device management
     * system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
     * 
     */
    @Import(name="deviceIsManaged")
    private @Nullable Output<Boolean> deviceIsManaged;

    /**
     * @return If the device is managed. A device is managed if it&#39;s managed by a device management
     * system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
     * 
     */
    public Optional<Output<Boolean>> deviceIsManaged() {
        return Optional.ofNullable(this.deviceIsManaged);
    }

    /**
     * If the device is registered. A device is registered if the User enrolls with Okta
     * Verify that is installed on the device. Can only be set to `true`.
     * 
     */
    @Import(name="deviceIsRegistered")
    private @Nullable Output<Boolean> deviceIsRegistered;

    /**
     * @return If the device is registered. A device is registered if the User enrolls with Okta
     * Verify that is installed on the device. Can only be set to `true`.
     * 
     */
    public Optional<Output<Boolean>> deviceIsRegistered() {
        return Optional.ofNullable(this.deviceIsRegistered);
    }

    /**
     * The number of factors required to satisfy this assurance level. It can be set to `&#34;1FA&#34;` or `&#34;2FA&#34;`. Default is `&#34;2FA&#34;`.
     * 
     */
    @Import(name="factorMode")
    private @Nullable Output<String> factorMode;

    /**
     * @return The number of factors required to satisfy this assurance level. It can be set to `&#34;1FA&#34;` or `&#34;2FA&#34;`. Default is `&#34;2FA&#34;`.
     * 
     */
    public Optional<Output<String>> factorMode() {
        return Optional.ofNullable(this.factorMode);
    }

    /**
     * List of groups IDs to be excluded.
     * 
     */
    @Import(name="groupsExcludeds")
    private @Nullable Output<List<String>> groupsExcludeds;

    /**
     * @return List of groups IDs to be excluded.
     * 
     */
    public Optional<Output<List<String>>> groupsExcludeds() {
        return Optional.ofNullable(this.groupsExcludeds);
    }

    /**
     * List of groups IDs to be included.
     * 
     */
    @Import(name="groupsIncludeds")
    private @Nullable Output<List<String>> groupsIncludeds;

    /**
     * @return List of groups IDs to be included.
     * 
     */
    public Optional<Output<List<String>>> groupsIncludeds() {
        return Optional.ofNullable(this.groupsIncludeds);
    }

    /**
     * The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `&#34;PT1H&#34;`.
     * 
     */
    @Import(name="inactivityPeriod")
    private @Nullable Output<String> inactivityPeriod;

    /**
     * @return The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `&#34;PT1H&#34;`.
     * 
     */
    public Optional<Output<String>> inactivityPeriod() {
        return Optional.ofNullable(this.inactivityPeriod);
    }

    /**
     * Name of the policy rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    @Import(name="networkConnection")
    private @Nullable Output<String> networkConnection;

    /**
     * @return Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
     * 
     */
    public Optional<Output<String>> networkConnection() {
        return Optional.ofNullable(this.networkConnection);
    }

    /**
     * List of network zones IDs to exclude. Conflicts with `network_includes`.
     * 
     */
    @Import(name="networkExcludes")
    private @Nullable Output<List<String>> networkExcludes;

    /**
     * @return List of network zones IDs to exclude. Conflicts with `network_includes`.
     * 
     */
    public Optional<Output<List<String>>> networkExcludes() {
        return Optional.ofNullable(this.networkExcludes);
    }

    /**
     * List of network zones IDs to include. Conflicts with `network_excludes`.
     * 
     */
    @Import(name="networkIncludes")
    private @Nullable Output<List<String>> networkIncludes;

    /**
     * @return List of network zones IDs to include. Conflicts with `network_excludes`.
     * 
     */
    public Optional<Output<List<String>>> networkIncludes() {
        return Optional.ofNullable(this.networkIncludes);
    }

    /**
     * List of particular platforms or devices to match on.
     * 
     */
    @Import(name="platformIncludes")
    private @Nullable Output<List<AppSignonPolicyRulePlatformIncludeArgs>> platformIncludes;

    /**
     * @return List of particular platforms or devices to match on.
     * 
     */
    public Optional<Output<List<AppSignonPolicyRulePlatformIncludeArgs>>> platformIncludes() {
        return Optional.ofNullable(this.platformIncludes);
    }

    /**
     * ID of the app sign-on policy.
     * 
     */
    @Import(name="policyId", required=true)
    private Output<String> policyId;

    /**
     * @return ID of the app sign-on policy.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }

    /**
     * Priority of the rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority of the rule.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `&#34;PT0S&#34;` - every sign-in attempt, `&#34;PT43800H&#34;` - once per session. Default is `&#34;PT2H&#34;`.
     * 
     */
    @Import(name="reAuthenticationFrequency")
    private @Nullable Output<String> reAuthenticationFrequency;

    /**
     * @return The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `&#34;PT0S&#34;` - every sign-in attempt, `&#34;PT43800H&#34;` - once per session. Default is `&#34;PT2H&#34;`.
     * 
     */
    public Optional<Output<String>> reAuthenticationFrequency() {
        return Optional.ofNullable(this.reAuthenticationFrequency);
    }

    /**
     * Status of the rule
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the rule
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The Verification Method type. It can be set to `&#34;ASSURANCE&#34;`. Default is `&#34;ASSURANCE&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The Verification Method type. It can be set to `&#34;ASSURANCE&#34;`. Default is `&#34;ASSURANCE&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * List of user types IDs to be excluded.
     * 
     */
    @Import(name="userTypesExcludeds")
    private @Nullable Output<List<String>> userTypesExcludeds;

    /**
     * @return List of user types IDs to be excluded.
     * 
     */
    public Optional<Output<List<String>>> userTypesExcludeds() {
        return Optional.ofNullable(this.userTypesExcludeds);
    }

    /**
     * List of user types IDs to be included.
     * 
     */
    @Import(name="userTypesIncludeds")
    private @Nullable Output<List<String>> userTypesIncludeds;

    /**
     * @return List of user types IDs to be included.
     * 
     */
    public Optional<Output<List<String>>> userTypesIncludeds() {
        return Optional.ofNullable(this.userTypesIncludeds);
    }

    /**
     * List of users IDs to be excluded.
     * 
     */
    @Import(name="usersExcludeds")
    private @Nullable Output<List<String>> usersExcludeds;

    /**
     * @return List of users IDs to be excluded.
     * 
     */
    public Optional<Output<List<String>>> usersExcludeds() {
        return Optional.ofNullable(this.usersExcludeds);
    }

    /**
     * List of users IDs to be included.
     * 
     */
    @Import(name="usersIncludeds")
    private @Nullable Output<List<String>> usersIncludeds;

    /**
     * @return List of users IDs to be included.
     * 
     */
    public Optional<Output<List<String>>> usersIncludeds() {
        return Optional.ofNullable(this.usersIncludeds);
    }

    private AppSignonPolicyRuleArgs() {}

    private AppSignonPolicyRuleArgs(AppSignonPolicyRuleArgs $) {
        this.access = $.access;
        this.constraints = $.constraints;
        this.customExpression = $.customExpression;
        this.deviceIsManaged = $.deviceIsManaged;
        this.deviceIsRegistered = $.deviceIsRegistered;
        this.factorMode = $.factorMode;
        this.groupsExcludeds = $.groupsExcludeds;
        this.groupsIncludeds = $.groupsIncludeds;
        this.inactivityPeriod = $.inactivityPeriod;
        this.name = $.name;
        this.networkConnection = $.networkConnection;
        this.networkExcludes = $.networkExcludes;
        this.networkIncludes = $.networkIncludes;
        this.platformIncludes = $.platformIncludes;
        this.policyId = $.policyId;
        this.priority = $.priority;
        this.reAuthenticationFrequency = $.reAuthenticationFrequency;
        this.status = $.status;
        this.type = $.type;
        this.userTypesExcludeds = $.userTypesExcludeds;
        this.userTypesIncludeds = $.userTypesIncludeds;
        this.usersExcludeds = $.usersExcludeds;
        this.usersIncludeds = $.usersIncludeds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSignonPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSignonPolicyRuleArgs $;

        public Builder() {
            $ = new AppSignonPolicyRuleArgs();
        }

        public Builder(AppSignonPolicyRuleArgs defaults) {
            $ = new AppSignonPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Allow or deny access based on the rule conditions. It can be set to `&#34;ALLOW&#34;` or `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Allow or deny access based on the rule conditions. It can be set to `&#34;ALLOW&#34;` or `&#34;DENY&#34;`. Default is `&#34;ALLOW&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param constraints An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable Output<List<String>> constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param constraints An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder constraints(List<String> constraints) {
            return constraints(Output.of(constraints));
        }

        /**
         * @param constraints An array that contains nested Authenticator Constraint objects that are organized by the Authenticator class. Each element should be in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder constraints(String... constraints) {
            return constraints(List.of(constraints));
        }

        /**
         * @param customExpression This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
         * 
         * @return builder
         * 
         */
        public Builder customExpression(@Nullable Output<String> customExpression) {
            $.customExpression = customExpression;
            return this;
        }

        /**
         * @param customExpression This is an advanced optional setting. If the expression is formatted incorrectly or conflicts with conditions set above, the rule may not match any users.
         * 
         * @return builder
         * 
         */
        public Builder customExpression(String customExpression) {
            return customExpression(Output.of(customExpression));
        }

        /**
         * @param deviceIsManaged If the device is managed. A device is managed if it&#39;s managed by a device management
         * system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deviceIsManaged(@Nullable Output<Boolean> deviceIsManaged) {
            $.deviceIsManaged = deviceIsManaged;
            return this;
        }

        /**
         * @param deviceIsManaged If the device is managed. A device is managed if it&#39;s managed by a device management
         * system. When managed is passed, `device_is_registered` must also be included and must be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deviceIsManaged(Boolean deviceIsManaged) {
            return deviceIsManaged(Output.of(deviceIsManaged));
        }

        /**
         * @param deviceIsRegistered If the device is registered. A device is registered if the User enrolls with Okta
         * Verify that is installed on the device. Can only be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deviceIsRegistered(@Nullable Output<Boolean> deviceIsRegistered) {
            $.deviceIsRegistered = deviceIsRegistered;
            return this;
        }

        /**
         * @param deviceIsRegistered If the device is registered. A device is registered if the User enrolls with Okta
         * Verify that is installed on the device. Can only be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deviceIsRegistered(Boolean deviceIsRegistered) {
            return deviceIsRegistered(Output.of(deviceIsRegistered));
        }

        /**
         * @param factorMode The number of factors required to satisfy this assurance level. It can be set to `&#34;1FA&#34;` or `&#34;2FA&#34;`. Default is `&#34;2FA&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder factorMode(@Nullable Output<String> factorMode) {
            $.factorMode = factorMode;
            return this;
        }

        /**
         * @param factorMode The number of factors required to satisfy this assurance level. It can be set to `&#34;1FA&#34;` or `&#34;2FA&#34;`. Default is `&#34;2FA&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder factorMode(String factorMode) {
            return factorMode(Output.of(factorMode));
        }

        /**
         * @param groupsExcludeds List of groups IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupsExcludeds(@Nullable Output<List<String>> groupsExcludeds) {
            $.groupsExcludeds = groupsExcludeds;
            return this;
        }

        /**
         * @param groupsExcludeds List of groups IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupsExcludeds(List<String> groupsExcludeds) {
            return groupsExcludeds(Output.of(groupsExcludeds));
        }

        /**
         * @param groupsExcludeds List of groups IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder groupsExcludeds(String... groupsExcludeds) {
            return groupsExcludeds(List.of(groupsExcludeds));
        }

        /**
         * @param groupsIncludeds List of groups IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(@Nullable Output<List<String>> groupsIncludeds) {
            $.groupsIncludeds = groupsIncludeds;
            return this;
        }

        /**
         * @param groupsIncludeds List of groups IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(List<String> groupsIncludeds) {
            return groupsIncludeds(Output.of(groupsIncludeds));
        }

        /**
         * @param groupsIncludeds List of groups IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder groupsIncludeds(String... groupsIncludeds) {
            return groupsIncludeds(List.of(groupsIncludeds));
        }

        /**
         * @param inactivityPeriod The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `&#34;PT1H&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder inactivityPeriod(@Nullable Output<String> inactivityPeriod) {
            $.inactivityPeriod = inactivityPeriod;
            return this;
        }

        /**
         * @param inactivityPeriod The inactivity duration after which the end user must re-authenticate. Use the ISO 8601 Period format for recurring time intervals. Default is `&#34;PT1H&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder inactivityPeriod(String inactivityPeriod) {
            return inactivityPeriod(Output.of(inactivityPeriod));
        }

        /**
         * @param name Name of the policy rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(@Nullable Output<String> networkConnection) {
            $.networkConnection = networkConnection;
            return this;
        }

        /**
         * @param networkConnection Network selection mode: `&#34;ANYWHERE&#34;`, `&#34;ZONE&#34;`, `&#34;ON_NETWORK&#34;`, or `&#34;OFF_NETWORK&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder networkConnection(String networkConnection) {
            return networkConnection(Output.of(networkConnection));
        }

        /**
         * @param networkExcludes List of network zones IDs to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(@Nullable Output<List<String>> networkExcludes) {
            $.networkExcludes = networkExcludes;
            return this;
        }

        /**
         * @param networkExcludes List of network zones IDs to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(List<String> networkExcludes) {
            return networkExcludes(Output.of(networkExcludes));
        }

        /**
         * @param networkExcludes List of network zones IDs to exclude. Conflicts with `network_includes`.
         * 
         * @return builder
         * 
         */
        public Builder networkExcludes(String... networkExcludes) {
            return networkExcludes(List.of(networkExcludes));
        }

        /**
         * @param networkIncludes List of network zones IDs to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(@Nullable Output<List<String>> networkIncludes) {
            $.networkIncludes = networkIncludes;
            return this;
        }

        /**
         * @param networkIncludes List of network zones IDs to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(List<String> networkIncludes) {
            return networkIncludes(Output.of(networkIncludes));
        }

        /**
         * @param networkIncludes List of network zones IDs to include. Conflicts with `network_excludes`.
         * 
         * @return builder
         * 
         */
        public Builder networkIncludes(String... networkIncludes) {
            return networkIncludes(List.of(networkIncludes));
        }

        /**
         * @param platformIncludes List of particular platforms or devices to match on.
         * 
         * @return builder
         * 
         */
        public Builder platformIncludes(@Nullable Output<List<AppSignonPolicyRulePlatformIncludeArgs>> platformIncludes) {
            $.platformIncludes = platformIncludes;
            return this;
        }

        /**
         * @param platformIncludes List of particular platforms or devices to match on.
         * 
         * @return builder
         * 
         */
        public Builder platformIncludes(List<AppSignonPolicyRulePlatformIncludeArgs> platformIncludes) {
            return platformIncludes(Output.of(platformIncludes));
        }

        /**
         * @param platformIncludes List of particular platforms or devices to match on.
         * 
         * @return builder
         * 
         */
        public Builder platformIncludes(AppSignonPolicyRulePlatformIncludeArgs... platformIncludes) {
            return platformIncludes(List.of(platformIncludes));
        }

        /**
         * @param policyId ID of the app sign-on policy.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId ID of the app sign-on policy.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param priority Priority of the rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param reAuthenticationFrequency The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `&#34;PT0S&#34;` - every sign-in attempt, `&#34;PT43800H&#34;` - once per session. Default is `&#34;PT2H&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder reAuthenticationFrequency(@Nullable Output<String> reAuthenticationFrequency) {
            $.reAuthenticationFrequency = reAuthenticationFrequency;
            return this;
        }

        /**
         * @param reAuthenticationFrequency The duration after which the end user must re-authenticate, regardless of user activity. Use the ISO 8601 Period format for recurring time intervals. `&#34;PT0S&#34;` - every sign-in attempt, `&#34;PT43800H&#34;` - once per session. Default is `&#34;PT2H&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder reAuthenticationFrequency(String reAuthenticationFrequency) {
            return reAuthenticationFrequency(Output.of(reAuthenticationFrequency));
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The Verification Method type. It can be set to `&#34;ASSURANCE&#34;`. Default is `&#34;ASSURANCE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Verification Method type. It can be set to `&#34;ASSURANCE&#34;`. Default is `&#34;ASSURANCE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userTypesExcludeds List of user types IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userTypesExcludeds(@Nullable Output<List<String>> userTypesExcludeds) {
            $.userTypesExcludeds = userTypesExcludeds;
            return this;
        }

        /**
         * @param userTypesExcludeds List of user types IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userTypesExcludeds(List<String> userTypesExcludeds) {
            return userTypesExcludeds(Output.of(userTypesExcludeds));
        }

        /**
         * @param userTypesExcludeds List of user types IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder userTypesExcludeds(String... userTypesExcludeds) {
            return userTypesExcludeds(List.of(userTypesExcludeds));
        }

        /**
         * @param userTypesIncludeds List of user types IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder userTypesIncludeds(@Nullable Output<List<String>> userTypesIncludeds) {
            $.userTypesIncludeds = userTypesIncludeds;
            return this;
        }

        /**
         * @param userTypesIncludeds List of user types IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder userTypesIncludeds(List<String> userTypesIncludeds) {
            return userTypesIncludeds(Output.of(userTypesIncludeds));
        }

        /**
         * @param userTypesIncludeds List of user types IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder userTypesIncludeds(String... userTypesIncludeds) {
            return userTypesIncludeds(List.of(userTypesIncludeds));
        }

        /**
         * @param usersExcludeds List of users IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(@Nullable Output<List<String>> usersExcludeds) {
            $.usersExcludeds = usersExcludeds;
            return this;
        }

        /**
         * @param usersExcludeds List of users IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(List<String> usersExcludeds) {
            return usersExcludeds(Output.of(usersExcludeds));
        }

        /**
         * @param usersExcludeds List of users IDs to be excluded.
         * 
         * @return builder
         * 
         */
        public Builder usersExcludeds(String... usersExcludeds) {
            return usersExcludeds(List.of(usersExcludeds));
        }

        /**
         * @param usersIncludeds List of users IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder usersIncludeds(@Nullable Output<List<String>> usersIncludeds) {
            $.usersIncludeds = usersIncludeds;
            return this;
        }

        /**
         * @param usersIncludeds List of users IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder usersIncludeds(List<String> usersIncludeds) {
            return usersIncludeds(Output.of(usersIncludeds));
        }

        /**
         * @param usersIncludeds List of users IDs to be included.
         * 
         * @return builder
         * 
         */
        public Builder usersIncludeds(String... usersIncludeds) {
            return usersIncludeds(List.of(usersIncludeds));
        }

        public AppSignonPolicyRuleArgs build() {
            $.policyId = Objects.requireNonNull($.policyId, "expected parameter 'policyId' to be non-null");
            return $;
        }
    }

}
