// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkValueArgs Empty = new LinkValueArgs();

    /**
     * Set of User IDs or login values of the users to be assigned the `associated` relationship.
     * 
     */
    @Import(name="associatedUserIds")
    private @Nullable Output<List<String>> associatedUserIds;

    /**
     * @return Set of User IDs or login values of the users to be assigned the `associated` relationship.
     * 
     */
    public Optional<Output<List<String>>> associatedUserIds() {
        return Optional.ofNullable(this.associatedUserIds);
    }

    /**
     * Name of the `primary` relationship being assigned.
     * 
     */
    @Import(name="primaryName", required=true)
    private Output<String> primaryName;

    /**
     * @return Name of the `primary` relationship being assigned.
     * 
     */
    public Output<String> primaryName() {
        return this.primaryName;
    }

    /**
     * User ID to be assigned to `primary` for the &#39;associated&#39; user in the specified relationship.
     * 
     */
    @Import(name="primaryUserId", required=true)
    private Output<String> primaryUserId;

    /**
     * @return User ID to be assigned to `primary` for the &#39;associated&#39; user in the specified relationship.
     * 
     */
    public Output<String> primaryUserId() {
        return this.primaryUserId;
    }

    private LinkValueArgs() {}

    private LinkValueArgs(LinkValueArgs $) {
        this.associatedUserIds = $.associatedUserIds;
        this.primaryName = $.primaryName;
        this.primaryUserId = $.primaryUserId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkValueArgs $;

        public Builder() {
            $ = new LinkValueArgs();
        }

        public Builder(LinkValueArgs defaults) {
            $ = new LinkValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the `associated` relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(@Nullable Output<List<String>> associatedUserIds) {
            $.associatedUserIds = associatedUserIds;
            return this;
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the `associated` relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(List<String> associatedUserIds) {
            return associatedUserIds(Output.of(associatedUserIds));
        }

        /**
         * @param associatedUserIds Set of User IDs or login values of the users to be assigned the `associated` relationship.
         * 
         * @return builder
         * 
         */
        public Builder associatedUserIds(String... associatedUserIds) {
            return associatedUserIds(List.of(associatedUserIds));
        }

        /**
         * @param primaryName Name of the `primary` relationship being assigned.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(Output<String> primaryName) {
            $.primaryName = primaryName;
            return this;
        }

        /**
         * @param primaryName Name of the `primary` relationship being assigned.
         * 
         * @return builder
         * 
         */
        public Builder primaryName(String primaryName) {
            return primaryName(Output.of(primaryName));
        }

        /**
         * @param primaryUserId User ID to be assigned to `primary` for the &#39;associated&#39; user in the specified relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryUserId(Output<String> primaryUserId) {
            $.primaryUserId = primaryUserId;
            return this;
        }

        /**
         * @param primaryUserId User ID to be assigned to `primary` for the &#39;associated&#39; user in the specified relationship.
         * 
         * @return builder
         * 
         */
        public Builder primaryUserId(String primaryUserId) {
            return primaryUserId(Output.of(primaryUserId));
        }

        public LinkValueArgs build() {
            if ($.primaryName == null) {
                throw new MissingRequiredPropertyException("LinkValueArgs", "primaryName");
            }
            if ($.primaryUserId == null) {
                throw new MissingRequiredPropertyException("LinkValueArgs", "primaryUserId");
            }
            return $;
        }
    }

}
