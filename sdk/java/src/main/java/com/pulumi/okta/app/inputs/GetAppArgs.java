// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppArgs Empty = new GetAppArgs();

    /**
     * tells the provider to query for only `ACTIVE` applications.
     * 
     */
    @Import(name="activeOnly")
    private @Nullable Output<Boolean> activeOnly;

    /**
     * @return tells the provider to query for only `ACTIVE` applications.
     * 
     */
    public Optional<Output<Boolean>> activeOnly() {
        return Optional.ofNullable(this.activeOnly);
    }

    /**
     * `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return `id` of application to retrieve, conflicts with `label` and `label_prefix`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
     * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time the API searches both `name`
     * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
     * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
     * an exact match.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
     * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time the API searches both `name`
     * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
     * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
     * an exact match.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    @Import(name="labelPrefix")
    private @Nullable Output<String> labelPrefix;

    /**
     * @return Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
     * provider to do a `starts with` query as opposed to an `equals` query.
     * 
     */
    public Optional<Output<String>> labelPrefix() {
        return Optional.ofNullable(this.labelPrefix);
    }

    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    @Import(name="skipGroups")
    private @Nullable Output<Boolean> skipGroups;

    /**
     * @deprecated
     * Because groups has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
    public Optional<Output<Boolean>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    @Import(name="skipUsers")
    private @Nullable Output<Boolean> skipUsers;

    /**
     * @deprecated
     * Because users has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
    public Optional<Output<Boolean>> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }

    private GetAppArgs() {}

    private GetAppArgs(GetAppArgs $) {
        this.activeOnly = $.activeOnly;
        this.id = $.id;
        this.label = $.label;
        this.labelPrefix = $.labelPrefix;
        this.skipGroups = $.skipGroups;
        this.skipUsers = $.skipUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppArgs $;

        public Builder() {
            $ = new GetAppArgs();
        }

        public Builder(GetAppArgs defaults) {
            $ = new GetAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(@Nullable Output<Boolean> activeOnly) {
            $.activeOnly = activeOnly;
            return this;
        }

        /**
         * @param activeOnly tells the provider to query for only `ACTIVE` applications.
         * 
         * @return builder
         * 
         */
        public Builder activeOnly(Boolean activeOnly) {
            return activeOnly(Output.of(activeOnly));
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id `id` of application to retrieve, conflicts with `label` and `label_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
         * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time the API searches both `name`
         * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
         * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
         * an exact match.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the app to retrieve, conflicts with `label_prefix` and `id`. Label uses
         * the `?q=&lt;label&gt;` query parameter exposed by Okta&#39;s API. It should be noted that at this time the API searches both `name`
         * and `label` with a [starts with query](https://developer.okta.com/docs/reference/api/apps/#list-applications) which
         * may result in multiple apps being returned for the query. The data source further inspects the lables looking for
         * an exact match.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(@Nullable Output<String> labelPrefix) {
            $.labelPrefix = labelPrefix;
            return this;
        }

        /**
         * @param labelPrefix Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the
         * provider to do a `starts with` query as opposed to an `equals` query.
         * 
         * @return builder
         * 
         */
        public Builder labelPrefix(String labelPrefix) {
            return labelPrefix(Output.of(labelPrefix));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Because groups has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
        public Builder skipGroups(@Nullable Output<Boolean> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Because groups has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because groups has been removed, this attribute is a no op and will be removed */
        public Builder skipGroups(Boolean skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Because users has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
        public Builder skipUsers(@Nullable Output<Boolean> skipUsers) {
            $.skipUsers = skipUsers;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Because users has been removed, this attribute is a no op and will be removed
         * 
         */
        @Deprecated /* Because users has been removed, this attribute is a no op and will be removed */
        public Builder skipUsers(Boolean skipUsers) {
            return skipUsers(Output.of(skipUsers));
        }

        public GetAppArgs build() {
            return $;
        }
    }

}
