// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetPrincipalEntitlementsParentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPrincipalEntitlementsParentArgs Empty = new GetPrincipalEntitlementsParentArgs();

    @Import(name="externalId", required=true)
    private Output<String> externalId;

    public Output<String> externalId() {
        return this.externalId;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private GetPrincipalEntitlementsParentArgs() {}

    private GetPrincipalEntitlementsParentArgs(GetPrincipalEntitlementsParentArgs $) {
        this.externalId = $.externalId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrincipalEntitlementsParentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrincipalEntitlementsParentArgs $;

        public Builder() {
            $ = new GetPrincipalEntitlementsParentArgs();
        }

        public Builder(GetPrincipalEntitlementsParentArgs defaults) {
            $ = new GetPrincipalEntitlementsParentArgs(Objects.requireNonNull(defaults));
        }

        public Builder externalId(Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetPrincipalEntitlementsParentArgs build() {
            if ($.externalId == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsParentArgs", "externalId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetPrincipalEntitlementsParentArgs", "type");
            }
            return $;
        }
    }

}
