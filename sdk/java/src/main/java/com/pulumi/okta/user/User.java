// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.user.UserArgs;
import com.pulumi.okta.user.inputs.UserState;
import com.pulumi.okta.user.outputs.UserPasswordHash;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an Okta User.
 * 
 * This resource allows you to create and configure an Okta User.
 * 
 * ## Example Usage
 * 
 * Full profile:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.user.User;
 * import com.pulumi.okta.user.UserArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new User(&#34;example&#34;, UserArgs.builder()        
 *             .city(&#34;New York&#34;)
 *             .costCenter(&#34;10&#34;)
 *             .countryCode(&#34;US&#34;)
 *             .department(&#34;IT&#34;)
 *             .displayName(&#34;Dr. John Smith&#34;)
 *             .division(&#34;Acquisitions&#34;)
 *             .email(&#34;john.smith@example.com&#34;)
 *             .employeeNumber(&#34;111111&#34;)
 *             .firstName(&#34;John&#34;)
 *             .honorificPrefix(&#34;Dr.&#34;)
 *             .honorificSuffix(&#34;Jr.&#34;)
 *             .lastName(&#34;Smith&#34;)
 *             .locale(&#34;en_US&#34;)
 *             .login(&#34;john.smith@example.com&#34;)
 *             .manager(&#34;Jimbo&#34;)
 *             .managerId(&#34;222222&#34;)
 *             .middleName(&#34;John&#34;)
 *             .mobilePhone(&#34;1112223333&#34;)
 *             .nickName(&#34;Johnny&#34;)
 *             .organization(&#34;Testing Inc.&#34;)
 *             .postalAddress(&#34;1234 Testing St.&#34;)
 *             .preferredLanguage(&#34;en-us&#34;)
 *             .primaryPhone(&#34;4445556666&#34;)
 *             .profileUrl(&#34;https://www.example.com/profile&#34;)
 *             .secondEmail(&#34;john.smith.fun@example.com&#34;)
 *             .state(&#34;NY&#34;)
 *             .streetAddress(&#34;5678 Testing Ave.&#34;)
 *             .timezone(&#34;America/New_York&#34;)
 *             .title(&#34;Director&#34;)
 *             .userType(&#34;Employee&#34;)
 *             .zipCode(&#34;11111&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * With Password Inline Hook:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.user.User;
 * import com.pulumi.okta.user.UserArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test2 = new User(&#34;test2&#34;, UserArgs.builder()        
 *             .email(&#34;example@example.com&#34;)
 *             .firstName(&#34;John&#34;)
 *             .lastName(&#34;Smith&#34;)
 *             .login(&#34;example@example.com&#34;)
 *             .passwordInlineHook(&#34;default&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * An Okta User can be imported via the ID.
 * 
 * ```sh
 *  $ pulumi import okta:user/user:User example &amp;#60;user id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:user/user:User")
public class User extends com.pulumi.resources.CustomResource {
    /**
     * User profile property.
     * 
     */
    @Export(name="city", type=String.class, parameters={})
    private Output</* @Nullable */ String> city;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> city() {
        return Codegen.optional(this.city);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="costCenter", type=String.class, parameters={})
    private Output</* @Nullable */ String> costCenter;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> costCenter() {
        return Codegen.optional(this.costCenter);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="countryCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> countryCode;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> countryCode() {
        return Codegen.optional(this.countryCode);
    }
    /**
     * raw JSON containing all custom profile attributes.
     * 
     */
    @Export(name="customProfileAttributes", type=String.class, parameters={})
    private Output<String> customProfileAttributes;

    /**
     * @return raw JSON containing all custom profile attributes.
     * 
     */
    public Output<String> customProfileAttributes() {
        return this.customProfileAttributes;
    }
    /**
     * List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
     * 
     */
    @Export(name="customProfileAttributesToIgnores", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> customProfileAttributesToIgnores;

    /**
     * @return List of custom_profile_attribute keys that should be excluded from being managed by Terraform.
     * 
     */
    public Output<Optional<List<String>>> customProfileAttributesToIgnores() {
        return Codegen.optional(this.customProfileAttributesToIgnores);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="department", type=String.class, parameters={})
    private Output</* @Nullable */ String> department;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> department() {
        return Codegen.optional(this.department);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="division", type=String.class, parameters={})
    private Output</* @Nullable */ String> division;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> division() {
        return Codegen.optional(this.division);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="email", type=String.class, parameters={})
    private Output<String> email;

    /**
     * @return User profile property.
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="employeeNumber", type=String.class, parameters={})
    private Output</* @Nullable */ String> employeeNumber;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> employeeNumber() {
        return Codegen.optional(this.employeeNumber);
    }
    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used
     * when user is being created and works only when `password` field is set. Default is `false`.
     * 
     */
    @Export(name="expirePasswordOnCreate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> expirePasswordOnCreate;

    /**
     * @return If set to `true`, the user will have to change the password at the next login. This property will be used
     * when user is being created and works only when `password` field is set. Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> expirePasswordOnCreate() {
        return Codegen.optional(this.expirePasswordOnCreate);
    }
    /**
     * User&#39;s First Name, required by default.
     * 
     */
    @Export(name="firstName", type=String.class, parameters={})
    private Output<String> firstName;

    /**
     * @return User&#39;s First Name, required by default.
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="honorificPrefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> honorificPrefix;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> honorificPrefix() {
        return Codegen.optional(this.honorificPrefix);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="honorificSuffix", type=String.class, parameters={})
    private Output</* @Nullable */ String> honorificSuffix;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> honorificSuffix() {
        return Codegen.optional(this.honorificSuffix);
    }
    /**
     * User&#39;s Last Name, required by default.
     * 
     */
    @Export(name="lastName", type=String.class, parameters={})
    private Output<String> lastName;

    /**
     * @return User&#39;s Last Name, required by default.
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="locale", type=String.class, parameters={})
    private Output</* @Nullable */ String> locale;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> locale() {
        return Codegen.optional(this.locale);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="login", type=String.class, parameters={})
    private Output<String> login;

    /**
     * @return User profile property.
     * 
     */
    public Output<String> login() {
        return this.login;
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="manager", type=String.class, parameters={})
    private Output</* @Nullable */ String> manager;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> manager() {
        return Codegen.optional(this.manager);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="managerId", type=String.class, parameters={})
    private Output</* @Nullable */ String> managerId;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> managerId() {
        return Codegen.optional(this.managerId);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="middleName", type=String.class, parameters={})
    private Output</* @Nullable */ String> middleName;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> middleName() {
        return Codegen.optional(this.middleName);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="mobilePhone", type=String.class, parameters={})
    private Output</* @Nullable */ String> mobilePhone;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> mobilePhone() {
        return Codegen.optional(this.mobilePhone);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="nickName", type=String.class, parameters={})
    private Output</* @Nullable */ String> nickName;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> nickName() {
        return Codegen.optional(this.nickName);
    }
    /**
     * Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
     * outside the provider. After successful password change this field should be removed and `password` field should be used
     * for further changes.
     * 
     */
    @Export(name="oldPassword", type=String.class, parameters={})
    private Output</* @Nullable */ String> oldPassword;

    /**
     * @return Old user password. **IMPORTANT**: Should be ONLY set in case the password was changed
     * outside the provider. After successful password change this field should be removed and `password` field should be used
     * for further changes.
     * 
     */
    public Output<Optional<String>> oldPassword() {
        return Codegen.optional(this.oldPassword);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="organization", type=String.class, parameters={})
    private Output</* @Nullable */ String> organization;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> organization() {
        return Codegen.optional(this.organization);
    }
    /**
     * User password.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output</* @Nullable */ String> password;

    /**
     * @return User password.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Specifies a hashed password to import into Okta.
     * 
     */
    @Export(name="passwordHash", type=UserPasswordHash.class, parameters={})
    private Output</* @Nullable */ UserPasswordHash> passwordHash;

    /**
     * @return Specifies a hashed password to import into Okta.
     * 
     */
    public Output<Optional<UserPasswordHash>> passwordHash() {
        return Codegen.optional(this.passwordHash);
    }
    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification
     * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
     * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
     * field should not be specified when using Password Import Inline Hook.
     * 
     */
    @Export(name="passwordInlineHook", type=String.class, parameters={})
    private Output</* @Nullable */ String> passwordInlineHook;

    /**
     * @return Specifies that a Password Import Inline Hook should be triggered to handle verification
     * of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly
     * from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password`
     * field should not be specified when using Password Import Inline Hook.
     * 
     */
    public Output<Optional<String>> passwordInlineHook() {
        return Codegen.optional(this.passwordInlineHook);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="postalAddress", type=String.class, parameters={})
    private Output</* @Nullable */ String> postalAddress;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> postalAddress() {
        return Codegen.optional(this.postalAddress);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="preferredLanguage", type=String.class, parameters={})
    private Output</* @Nullable */ String> preferredLanguage;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> preferredLanguage() {
        return Codegen.optional(this.preferredLanguage);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="primaryPhone", type=String.class, parameters={})
    private Output</* @Nullable */ String> primaryPhone;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> primaryPhone() {
        return Codegen.optional(this.primaryPhone);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="profileUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> profileUrl;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> profileUrl() {
        return Codegen.optional(this.profileUrl);
    }
    /**
     * The raw status of the User in Okta - (status is mapped)
     * 
     */
    @Export(name="rawStatus", type=String.class, parameters={})
    private Output<String> rawStatus;

    /**
     * @return The raw status of the User in Okta - (status is mapped)
     * 
     */
    public Output<String> rawStatus() {
        return this.rawStatus;
    }
    /**
     * User password recovery answer.
     * 
     * - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
     * - `algorithm&#34;` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
     * 
     */
    @Export(name="recoveryAnswer", type=String.class, parameters={})
    private Output</* @Nullable */ String> recoveryAnswer;

    /**
     * @return User password recovery answer.
     * 
     * - `password hash` - (Optional) Specifies a hashed password to import into Okta. When updating a user with a hashed password the user must be in the `STAGED` status.
     * - `algorithm&#34;` - (Required) The algorithm used to generate the hash using the password (and salt, when applicable). Must be set to BCRYPT, SHA-512, SHA-256, SHA-1 or MD5.
     * 
     */
    public Output<Optional<String>> recoveryAnswer() {
        return Codegen.optional(this.recoveryAnswer);
    }
    /**
     * User password recovery question.
     * 
     */
    @Export(name="recoveryQuestion", type=String.class, parameters={})
    private Output</* @Nullable */ String> recoveryQuestion;

    /**
     * @return User password recovery question.
     * 
     */
    public Output<Optional<String>> recoveryQuestion() {
        return Codegen.optional(this.recoveryQuestion);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="secondEmail", type=String.class, parameters={})
    private Output</* @Nullable */ String> secondEmail;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> secondEmail() {
        return Codegen.optional(this.secondEmail);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output</* @Nullable */ String> state;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return User profile property. Valid values are &#34;ACTIVE&#34;, &#34;DEPROVISIONED&#34;, &#34;STAGED&#34;, &#34;SUSPENDED&#34;
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="streetAddress", type=String.class, parameters={})
    private Output</* @Nullable */ String> streetAddress;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> streetAddress() {
        return Codegen.optional(this.streetAddress);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="timezone", type=String.class, parameters={})
    private Output</* @Nullable */ String> timezone;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output</* @Nullable */ String> title;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> title() {
        return Codegen.optional(this.title);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="userType", type=String.class, parameters={})
    private Output</* @Nullable */ String> userType;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }
    /**
     * User profile property.
     * 
     */
    @Export(name="zipCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> zipCode;

    /**
     * @return User profile property.
     * 
     */
    public Output<Optional<String>> zipCode() {
        return Codegen.optional(this.zipCode);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public User(String name) {
        this(name, UserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public User(String name, UserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public User(String name, UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:user/user:User", name, args == null ? UserArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private User(String name, Output<String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:user/user:User", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "oldPassword",
                "password",
                "recoveryAnswer"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static User get(String name, Output<String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new User(name, id, state, options);
    }
}
