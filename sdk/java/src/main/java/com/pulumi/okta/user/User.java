// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.user;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.user.UserArgs;
import com.pulumi.okta.user.inputs.UserState;
import com.pulumi.okta.user.outputs.UserPasswordHash;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an Okta User. This resource allows you to create and configure an Okta User.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.user.User;
 * import com.pulumi.okta.user.UserArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         //## Full profile:
 *         var example = new User("example", UserArgs.builder()
 *             .firstName("John")
 *             .lastName("Smith")
 *             .login("john.smith}{@literal @}{@code example.com")
 *             .email("john.smith}{@literal @}{@code example.com")
 *             .city("New York")
 *             .costCenter("10")
 *             .countryCode("US")
 *             .department("IT")
 *             .displayName("Dr. John Smith")
 *             .division("Acquisitions")
 *             .employeeNumber("111111")
 *             .honorificPrefix("Dr.")
 *             .honorificSuffix("Jr.")
 *             .locale("en_US")
 *             .manager("Jimbo")
 *             .managerId("222222")
 *             .middleName("John")
 *             .mobilePhone("1112223333")
 *             .nickName("Johnny")
 *             .organization("Testing Inc.")
 *             .postalAddress("1234 Testing St.")
 *             .preferredLanguage("en-us")
 *             .primaryPhone("4445556666")
 *             .profileUrl("https://www.example.com/profile")
 *             .secondEmail("john.smith.fun}{@literal @}{@code example.com")
 *             .state("NY")
 *             .streetAddress("5678 Testing Ave.")
 *             .timezone("America/New_York")
 *             .title("Director")
 *             .userType("Employee")
 *             .zipCode("11111")
 *             .build());
 * 
 *         //## With Password Inline Hook:
 *         var test2 = new User("test2", UserArgs.builder()
 *             .firstName("John")
 *             .lastName("Smith")
 *             .login("example}{@literal @}{@code example.com")
 *             .email("example}{@literal @}{@code example.com")
 *             .passwordInlineHook("default")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import okta:user/user:User example &lt;user_id&gt;
 * ```
 * 
 */
@ResourceType(type="okta:user/user:User")
public class User extends com.pulumi.resources.CustomResource {
    /**
     * User city
     * 
     */
    @Export(name="city", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> city;

    /**
     * @return User city
     * 
     */
    public Output<Optional<String>> city() {
        return Codegen.optional(this.city);
    }
    /**
     * User cost center
     * 
     */
    @Export(name="costCenter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> costCenter;

    /**
     * @return User cost center
     * 
     */
    public Output<Optional<String>> costCenter() {
        return Codegen.optional(this.costCenter);
    }
    /**
     * User country code
     * 
     */
    @Export(name="countryCode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> countryCode;

    /**
     * @return User country code
     * 
     */
    public Output<Optional<String>> countryCode() {
        return Codegen.optional(this.countryCode);
    }
    /**
     * JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows.
     * 
     */
    @Export(name="customProfileAttributes", refs={String.class}, tree="[0]")
    private Output<String> customProfileAttributes;

    /**
     * @return JSON formatted custom attributes for a user. It must be JSON due to various types Okta allows.
     * 
     */
    public Output<String> customProfileAttributes() {
        return this.customProfileAttributes;
    }
    @Export(name="customProfileAttributesToIgnores", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> customProfileAttributesToIgnores;

    public Output<Optional<List<String>>> customProfileAttributesToIgnores() {
        return Codegen.optional(this.customProfileAttributesToIgnores);
    }
    /**
     * User department
     * 
     */
    @Export(name="department", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> department;

    /**
     * @return User department
     * 
     */
    public Output<Optional<String>> department() {
        return Codegen.optional(this.department);
    }
    /**
     * User display name, suitable to show end users
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User display name, suitable to show end users
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * User division
     * 
     */
    @Export(name="division", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> division;

    /**
     * @return User division
     * 
     */
    public Output<Optional<String>> division() {
        return Codegen.optional(this.division);
    }
    /**
     * User primary email address
     * 
     */
    @Export(name="email", refs={String.class}, tree="[0]")
    private Output<String> email;

    /**
     * @return User primary email address
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * User employee number
     * 
     */
    @Export(name="employeeNumber", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> employeeNumber;

    /**
     * @return User employee number
     * 
     */
    public Output<Optional<String>> employeeNumber() {
        return Codegen.optional(this.employeeNumber);
    }
    /**
     * If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
     * 
     */
    @Export(name="expirePasswordOnCreate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> expirePasswordOnCreate;

    /**
     * @return If set to `true`, the user will have to change the password at the next login. This property will be used when user is being created and works only when `password` field is set. Default: `false`
     * 
     */
    public Output<Optional<Boolean>> expirePasswordOnCreate() {
        return Codegen.optional(this.expirePasswordOnCreate);
    }
    /**
     * User first name
     * 
     */
    @Export(name="firstName", refs={String.class}, tree="[0]")
    private Output<String> firstName;

    /**
     * @return User first name
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }
    /**
     * User honorific prefix
     * 
     */
    @Export(name="honorificPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> honorificPrefix;

    /**
     * @return User honorific prefix
     * 
     */
    public Output<Optional<String>> honorificPrefix() {
        return Codegen.optional(this.honorificPrefix);
    }
    /**
     * User honorific suffix
     * 
     */
    @Export(name="honorificSuffix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> honorificSuffix;

    /**
     * @return User honorific suffix
     * 
     */
    public Output<Optional<String>> honorificSuffix() {
        return Codegen.optional(this.honorificSuffix);
    }
    /**
     * User last name
     * 
     */
    @Export(name="lastName", refs={String.class}, tree="[0]")
    private Output<String> lastName;

    /**
     * @return User last name
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }
    /**
     * User default location
     * 
     */
    @Export(name="locale", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> locale;

    /**
     * @return User default location
     * 
     */
    public Output<Optional<String>> locale() {
        return Codegen.optional(this.locale);
    }
    /**
     * User Okta login
     * 
     */
    @Export(name="login", refs={String.class}, tree="[0]")
    private Output<String> login;

    /**
     * @return User Okta login
     * 
     */
    public Output<String> login() {
        return this.login;
    }
    /**
     * Manager of User
     * 
     */
    @Export(name="manager", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> manager;

    /**
     * @return Manager of User
     * 
     */
    public Output<Optional<String>> manager() {
        return Codegen.optional(this.manager);
    }
    /**
     * Manager ID of User
     * 
     */
    @Export(name="managerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> managerId;

    /**
     * @return Manager ID of User
     * 
     */
    public Output<Optional<String>> managerId() {
        return Codegen.optional(this.managerId);
    }
    /**
     * User middle name
     * 
     */
    @Export(name="middleName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> middleName;

    /**
     * @return User middle name
     * 
     */
    public Output<Optional<String>> middleName() {
        return Codegen.optional(this.middleName);
    }
    /**
     * User mobile phone number
     * 
     */
    @Export(name="mobilePhone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mobilePhone;

    /**
     * @return User mobile phone number
     * 
     */
    public Output<Optional<String>> mobilePhone() {
        return Codegen.optional(this.mobilePhone);
    }
    /**
     * User nickname
     * 
     */
    @Export(name="nickName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nickName;

    /**
     * @return User nickname
     * 
     */
    public Output<Optional<String>> nickName() {
        return Codegen.optional(this.nickName);
    }
    /**
     * Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
     * 
     */
    @Export(name="oldPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oldPassword;

    /**
     * @return Old User Password. Should be only set in case the password was not changed using the provider. fter successful password change this field should be removed and `password` field should be used for further changes.
     * 
     */
    public Output<Optional<String>> oldPassword() {
        return Codegen.optional(this.oldPassword);
    }
    /**
     * User organization
     * 
     */
    @Export(name="organization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> organization;

    /**
     * @return User organization
     * 
     */
    public Output<Optional<String>> organization() {
        return Codegen.optional(this.organization);
    }
    /**
     * User Password
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return User Password
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Specifies a hashed password to import into Okta.
     * 
     */
    @Export(name="passwordHash", refs={UserPasswordHash.class}, tree="[0]")
    private Output</* @Nullable */ UserPasswordHash> passwordHash;

    /**
     * @return Specifies a hashed password to import into Okta.
     * 
     */
    public Output<Optional<UserPasswordHash>> passwordHash() {
        return Codegen.optional(this.passwordHash);
    }
    /**
     * Specifies that a Password Import Inline Hook should be triggered to handle verification of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
     * 
     */
    @Export(name="passwordInlineHook", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> passwordInlineHook;

    /**
     * @return Specifies that a Password Import Inline Hook should be triggered to handle verification of the user&#39;s password the first time the user logs in. This allows an existing password to be imported into Okta directly from some other store. When updating a user with a password hook the user must be in the `STAGED` status. The `password` field should not be specified when using Password Import Inline Hook.
     * 
     */
    public Output<Optional<String>> passwordInlineHook() {
        return Codegen.optional(this.passwordInlineHook);
    }
    /**
     * User mailing address
     * 
     */
    @Export(name="postalAddress", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> postalAddress;

    /**
     * @return User mailing address
     * 
     */
    public Output<Optional<String>> postalAddress() {
        return Codegen.optional(this.postalAddress);
    }
    /**
     * User preferred language
     * 
     */
    @Export(name="preferredLanguage", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> preferredLanguage;

    /**
     * @return User preferred language
     * 
     */
    public Output<Optional<String>> preferredLanguage() {
        return Codegen.optional(this.preferredLanguage);
    }
    /**
     * User primary phone number
     * 
     */
    @Export(name="primaryPhone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> primaryPhone;

    /**
     * @return User primary phone number
     * 
     */
    public Output<Optional<String>> primaryPhone() {
        return Codegen.optional(this.primaryPhone);
    }
    /**
     * User online profile (web page)
     * 
     */
    @Export(name="profileUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> profileUrl;

    /**
     * @return User online profile (web page)
     * 
     */
    public Output<Optional<String>> profileUrl() {
        return Codegen.optional(this.profileUrl);
    }
    /**
     * The raw status of the User in Okta - (status is mapped)
     * 
     */
    @Export(name="rawStatus", refs={String.class}, tree="[0]")
    private Output<String> rawStatus;

    /**
     * @return The raw status of the User in Okta - (status is mapped)
     * 
     */
    public Output<String> rawStatus() {
        return this.rawStatus;
    }
    /**
     * User Password Recovery Answer
     * 
     */
    @Export(name="recoveryAnswer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> recoveryAnswer;

    /**
     * @return User Password Recovery Answer
     * 
     */
    public Output<Optional<String>> recoveryAnswer() {
        return Codegen.optional(this.recoveryAnswer);
    }
    /**
     * User Password Recovery Question
     * 
     */
    @Export(name="recoveryQuestion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> recoveryQuestion;

    /**
     * @return User Password Recovery Question
     * 
     */
    public Output<Optional<String>> recoveryQuestion() {
        return Codegen.optional(this.recoveryQuestion);
    }
    /**
     * User secondary email address, used for account recovery
     * 
     */
    @Export(name="secondEmail", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondEmail;

    /**
     * @return User secondary email address, used for account recovery
     * 
     */
    public Output<Optional<String>> secondEmail() {
        return Codegen.optional(this.secondEmail);
    }
    /**
     * Do not populate user roles information (prevents additional API call)
     * 
     * @deprecated
     * Because admin_roles has been removed, this attribute is a no op and will be removed
     * 
     */
    @Deprecated /* Because admin_roles has been removed, this attribute is a no op and will be removed */
    @Export(name="skipRoles", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> skipRoles;

    /**
     * @return Do not populate user roles information (prevents additional API call)
     * 
     */
    public Output<Optional<Boolean>> skipRoles() {
        return Codegen.optional(this.skipRoles);
    }
    /**
     * User state or region
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return User state or region
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return User profile property. Valid values are `ACTIVE`, `DEPROVISIONED`, `STAGED`, `SUSPENDED`. Default: `ACTIVE`
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * User street address
     * 
     */
    @Export(name="streetAddress", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> streetAddress;

    /**
     * @return User street address
     * 
     */
    public Output<Optional<String>> streetAddress() {
        return Codegen.optional(this.streetAddress);
    }
    /**
     * User default timezone
     * 
     */
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    /**
     * @return User default timezone
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * User title
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> title;

    /**
     * @return User title
     * 
     */
    public Output<Optional<String>> title() {
        return Codegen.optional(this.title);
    }
    /**
     * User employee type
     * 
     */
    @Export(name="userType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userType;

    /**
     * @return User employee type
     * 
     */
    public Output<Optional<String>> userType() {
        return Codegen.optional(this.userType);
    }
    /**
     * User zipcode or postal code
     * 
     */
    @Export(name="zipCode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zipCode;

    /**
     * @return User zipcode or postal code
     * 
     */
    public Output<Optional<String>> zipCode() {
        return Codegen.optional(this.zipCode);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public User(java.lang.String name) {
        this(name, UserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public User(java.lang.String name, UserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public User(java.lang.String name, UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:user/user:User", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private User(java.lang.String name, Output<java.lang.String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:user/user:User", name, state, makeResourceOptions(options, id), false);
    }

    private static UserArgs makeArgs(UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UserArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "oldPassword",
                "password",
                "recoveryAnswer"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static User get(java.lang.String name, Output<java.lang.String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new User(name, id, state, options);
    }
}
