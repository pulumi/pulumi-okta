// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SamlAttributeStatement {
    /**
     * @return Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
     * 
     */
    private final @Nullable String filterType;
    /**
     * @return Filter value to use.
     * 
     */
    private final @Nullable String filterValue;
    /**
     * @return The name of the attribute statement.
     * 
     */
    private final String name;
    /**
     * @return The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
     * 
     */
    private final @Nullable String namespace;
    /**
     * @return The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
     * 
     */
    private final @Nullable String type;
    /**
     * @return Array of values to use.
     * 
     */
    private final @Nullable List<String> values;

    @CustomType.Constructor
    private SamlAttributeStatement(
        @CustomType.Parameter("filterType") @Nullable String filterType,
        @CustomType.Parameter("filterValue") @Nullable String filterValue,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("namespace") @Nullable String namespace,
        @CustomType.Parameter("type") @Nullable String type,
        @CustomType.Parameter("values") @Nullable List<String> values) {
        this.filterType = filterType;
        this.filterValue = filterValue;
        this.name = name;
        this.namespace = namespace;
        this.type = type;
        this.values = values;
    }

    /**
     * @return Type of group attribute filter. Valid values are: `&#34;STARTS_WITH&#34;`, `&#34;EQUALS&#34;`, `&#34;CONTAINS&#34;`, or `&#34;REGEX&#34;`
     * 
     */
    public Optional<String> filterType() {
        return Optional.ofNullable(this.filterType);
    }
    /**
     * @return Filter value to use.
     * 
     */
    public Optional<String> filterValue() {
        return Optional.ofNullable(this.filterValue);
    }
    /**
     * @return The name of the attribute statement.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The attribute namespace. It can be set to `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified&#34;`, `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&#34;`, or `&#34;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&#34;`.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The type of attribute statement value. Valid values are: `&#34;EXPRESSION&#34;` or `&#34;GROUP&#34;`. Default is `&#34;EXPRESSION&#34;`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Array of values to use.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamlAttributeStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String filterType;
        private @Nullable String filterValue;
        private String name;
        private @Nullable String namespace;
        private @Nullable String type;
        private @Nullable List<String> values;

        public Builder() {
    	      // Empty
        }

        public Builder(SamlAttributeStatement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterType = defaults.filterType;
    	      this.filterValue = defaults.filterValue;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.type = defaults.type;
    	      this.values = defaults.values;
        }

        public Builder filterType(@Nullable String filterType) {
            this.filterType = filterType;
            return this;
        }
        public Builder filterValue(@Nullable String filterValue) {
            this.filterValue = filterValue;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public Builder values(@Nullable List<String> values) {
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }        public SamlAttributeStatement build() {
            return new SamlAttributeStatement(filterType, filterValue, name, namespace, type, values);
        }
    }
}
