// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaptchaArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaptchaArgs Empty = new CaptchaArgs();

    /**
     * Name of the CAPTCHA
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the CAPTCHA
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
     * 
     */
    @Import(name="siteKey", required=true)
    private Output<String> siteKey;

    /**
     * @return Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
     * 
     */
    public Output<String> siteKey() {
        return this.siteKey;
    }

    /**
     * Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private CaptchaArgs() {}

    private CaptchaArgs(CaptchaArgs $) {
        this.name = $.name;
        this.secretKey = $.secretKey;
        this.siteKey = $.siteKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaptchaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaptchaArgs $;

        public Builder() {
            $ = new CaptchaArgs();
        }

        public Builder(CaptchaArgs defaults) {
            $ = new CaptchaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the CAPTCHA
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the CAPTCHA
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretKey Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key issued from the CAPTCHA vendor to perform server-side validation for a CAPTCHA token
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param siteKey Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
         * 
         * @return builder
         * 
         */
        public Builder siteKey(Output<String> siteKey) {
            $.siteKey = siteKey;
            return this;
        }

        /**
         * @param siteKey Site key issued from the CAPTCHA vendor to render a CAPTCHA on a page
         * 
         * @return builder
         * 
         */
        public Builder siteKey(String siteKey) {
            return siteKey(Output.of(siteKey));
        }

        /**
         * @param type Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the captcha. Valid values: `HCAPTCHA`, `RECAPTCHA_V2`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CaptchaArgs build() {
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("CaptchaArgs", "secretKey");
            }
            if ($.siteKey == null) {
                throw new MissingRequiredPropertyException("CaptchaArgs", "siteKey");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CaptchaArgs", "type");
            }
            return $;
        }
    }

}
