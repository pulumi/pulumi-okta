// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.inputs.LogStreamSettingsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogStreamState extends com.pulumi.resources.ResourceArgs {

    public static final LogStreamState Empty = new LogStreamState();

    /**
     * Unique name for the Log Stream object
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name for the Log Stream object
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="settings")
    private @Nullable Output<LogStreamSettingsArgs> settings;

    public Optional<Output<LogStreamSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Stream status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Stream status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Streaming provider used - &#39;aws*eventbridge&#39; or &#39;splunk*cloud_logstreaming&#39;
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Streaming provider used - &#39;aws*eventbridge&#39; or &#39;splunk*cloud_logstreaming&#39;
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LogStreamState() {}

    private LogStreamState(LogStreamState $) {
        this.name = $.name;
        this.settings = $.settings;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogStreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogStreamState $;

        public Builder() {
            $ = new LogStreamState();
        }

        public Builder(LogStreamState defaults) {
            $ = new LogStreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Unique name for the Log Stream object
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for the Log Stream object
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder settings(@Nullable Output<LogStreamSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(LogStreamSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param status Stream status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Stream status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Streaming provider used - &#39;aws*eventbridge&#39; or &#39;splunk*cloud_logstreaming&#39;
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Streaming provider used - &#39;aws*eventbridge&#39; or &#39;splunk*cloud_logstreaming&#39;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LogStreamState build() {
            return $;
        }
    }

}
