// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.policy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleIdpDiscoveryAppIncludeArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleIdpDiscoveryAppIncludeArgs Empty = new RuleIdpDiscoveryAppIncludeArgs();

    /**
     * Use if `type` is `&#34;APP&#34;` to indicate the application id to include.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Use if `type` is `&#34;APP&#34;` to indicate the application id to include.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One of: `&#34;ANY&#34;`, `&#34;MOBILE&#34;`, `&#34;DESKTOP&#34;`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return One of: `&#34;ANY&#34;`, `&#34;MOBILE&#34;`, `&#34;DESKTOP&#34;`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RuleIdpDiscoveryAppIncludeArgs() {}

    private RuleIdpDiscoveryAppIncludeArgs(RuleIdpDiscoveryAppIncludeArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleIdpDiscoveryAppIncludeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleIdpDiscoveryAppIncludeArgs $;

        public Builder() {
            $ = new RuleIdpDiscoveryAppIncludeArgs();
        }

        public Builder(RuleIdpDiscoveryAppIncludeArgs defaults) {
            $ = new RuleIdpDiscoveryAppIncludeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Use if `type` is `&#34;APP&#34;` to indicate the application id to include.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Use if `type` is `&#34;APP&#34;` to indicate the application id to include.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Use if the `type` is `&#34;APP_TYPE&#34;` to indicate the type of application(s) to include in instances where an entire group (i.e. `yahoo_mail`) of applications should be included.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type One of: `&#34;ANY&#34;`, `&#34;MOBILE&#34;`, `&#34;DESKTOP&#34;`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type One of: `&#34;ANY&#34;`, `&#34;MOBILE&#34;`, `&#34;DESKTOP&#34;`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuleIdpDiscoveryAppIncludeArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
