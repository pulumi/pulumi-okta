// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.okta.app.inputs.BasicAuthUserArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasicAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasicAuthArgs Empty = new BasicAuthArgs();

    /**
     * Custom error page URL.
     * 
     */
    @Import(name="accessibilityErrorRedirectUrl")
    private @Nullable Output<String> accessibilityErrorRedirectUrl;

    /**
     * @return Custom error page URL.
     * 
     */
    public Optional<Output<String>> accessibilityErrorRedirectUrl() {
        return Optional.ofNullable(this.accessibilityErrorRedirectUrl);
    }

    /**
     * Custom login page for this application.
     * 
     */
    @Import(name="accessibilityLoginRedirectUrl")
    private @Nullable Output<String> accessibilityLoginRedirectUrl;

    /**
     * @return Custom login page for this application.
     * 
     */
    public Optional<Output<String>> accessibilityLoginRedirectUrl() {
        return Optional.ofNullable(this.accessibilityLoginRedirectUrl);
    }

    /**
     * Enable self-service. By default, it is `false`.
     * 
     */
    @Import(name="accessibilitySelfService")
    private @Nullable Output<Boolean> accessibilitySelfService;

    /**
     * @return Enable self-service. By default, it is `false`.
     * 
     */
    public Optional<Output<Boolean>> accessibilitySelfService() {
        return Optional.ofNullable(this.accessibilitySelfService);
    }

    /**
     * Application notes for admins.
     * 
     */
    @Import(name="adminNote")
    private @Nullable Output<String> adminNote;

    /**
     * @return Application notes for admins.
     * 
     */
    public Optional<Output<String>> adminNote() {
        return Optional.ofNullable(this.adminNote);
    }

    /**
     * Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    @Import(name="appLinksJson")
    private @Nullable Output<String> appLinksJson;

    /**
     * @return Displays specific appLinks for the app. The value for each application link should be boolean.
     * 
     */
    public Optional<Output<String>> appLinksJson() {
        return Optional.ofNullable(this.appLinksJson);
    }

    /**
     * The URL of the authenticating site for this app.
     * 
     */
    @Import(name="authUrl", required=true)
    private Output<String> authUrl;

    /**
     * @return The URL of the authenticating site for this app.
     * 
     */
    public Output<String> authUrl() {
        return this.authUrl;
    }

    /**
     * Display auto submit toolbar.
     * 
     */
    @Import(name="autoSubmitToolbar")
    private @Nullable Output<Boolean> autoSubmitToolbar;

    /**
     * @return Display auto submit toolbar.
     * 
     */
    public Optional<Output<Boolean>> autoSubmitToolbar() {
        return Optional.ofNullable(this.autoSubmitToolbar);
    }

    /**
     * Application notes for end users.
     * 
     */
    @Import(name="enduserNote")
    private @Nullable Output<String> enduserNote;

    /**
     * @return Application notes for end users.
     * 
     */
    public Optional<Output<String>> enduserNote() {
        return Optional.ofNullable(this.enduserNote);
    }

    /**
     * Groups associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
     * 
     * @deprecated
     * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    /**
     * @return Groups associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
     * 
     * @deprecated
     * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Do not display application icon on mobile app.
     * 
     */
    @Import(name="hideIos")
    private @Nullable Output<Boolean> hideIos;

    /**
     * @return Do not display application icon on mobile app.
     * 
     */
    public Optional<Output<Boolean>> hideIos() {
        return Optional.ofNullable(this.hideIos);
    }

    /**
     * Do not display application icon to users.
     * 
     */
    @Import(name="hideWeb")
    private @Nullable Output<Boolean> hideWeb;

    /**
     * @return Do not display application icon to users.
     * 
     */
    public Optional<Output<Boolean>> hideWeb() {
        return Optional.ofNullable(this.hideWeb);
    }

    /**
     * The Application&#39;s display name.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The Application&#39;s display name.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Local path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return Local path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Indicator that allows the app to skip `groups` sync (it&#39;s also can be provided during import). Default is `false`.
     * 
     */
    @Import(name="skipGroups")
    private @Nullable Output<Boolean> skipGroups;

    /**
     * @return Indicator that allows the app to skip `groups` sync (it&#39;s also can be provided during import). Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Indicator that allows the app to skip `users` sync (it&#39;s also can be provided during import). Default is `false`.
     * 
     */
    @Import(name="skipUsers")
    private @Nullable Output<Boolean> skipUsers;

    /**
     * @return Indicator that allows the app to skip `users` sync (it&#39;s also can be provided during import). Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> skipUsers() {
        return Optional.ofNullable(this.skipUsers);
    }

    /**
     * Status of application. (`&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`).
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of application. (`&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`).
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The URL of the sign-in page for this app.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the sign-in page for this app.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Users associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
     * 
     * @deprecated
     * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
    @Import(name="users")
    private @Nullable Output<List<BasicAuthUserArgs>> users;

    /**
     * @return Users associated with the application.
     * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
     * 
     * @deprecated
     * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
     * 
     */
    @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
    public Optional<Output<List<BasicAuthUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    private BasicAuthArgs() {}

    private BasicAuthArgs(BasicAuthArgs $) {
        this.accessibilityErrorRedirectUrl = $.accessibilityErrorRedirectUrl;
        this.accessibilityLoginRedirectUrl = $.accessibilityLoginRedirectUrl;
        this.accessibilitySelfService = $.accessibilitySelfService;
        this.adminNote = $.adminNote;
        this.appLinksJson = $.appLinksJson;
        this.authUrl = $.authUrl;
        this.autoSubmitToolbar = $.autoSubmitToolbar;
        this.enduserNote = $.enduserNote;
        this.groups = $.groups;
        this.hideIos = $.hideIos;
        this.hideWeb = $.hideWeb;
        this.label = $.label;
        this.logo = $.logo;
        this.skipGroups = $.skipGroups;
        this.skipUsers = $.skipUsers;
        this.status = $.status;
        this.url = $.url;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicAuthArgs $;

        public Builder() {
            $ = new BasicAuthArgs();
        }

        public Builder(BasicAuthArgs defaults) {
            $ = new BasicAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL.
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(@Nullable Output<String> accessibilityErrorRedirectUrl) {
            $.accessibilityErrorRedirectUrl = accessibilityErrorRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityErrorRedirectUrl Custom error page URL.
         * 
         * @return builder
         * 
         */
        public Builder accessibilityErrorRedirectUrl(String accessibilityErrorRedirectUrl) {
            return accessibilityErrorRedirectUrl(Output.of(accessibilityErrorRedirectUrl));
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page for this application.
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(@Nullable Output<String> accessibilityLoginRedirectUrl) {
            $.accessibilityLoginRedirectUrl = accessibilityLoginRedirectUrl;
            return this;
        }

        /**
         * @param accessibilityLoginRedirectUrl Custom login page for this application.
         * 
         * @return builder
         * 
         */
        public Builder accessibilityLoginRedirectUrl(String accessibilityLoginRedirectUrl) {
            return accessibilityLoginRedirectUrl(Output.of(accessibilityLoginRedirectUrl));
        }

        /**
         * @param accessibilitySelfService Enable self-service. By default, it is `false`.
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(@Nullable Output<Boolean> accessibilitySelfService) {
            $.accessibilitySelfService = accessibilitySelfService;
            return this;
        }

        /**
         * @param accessibilitySelfService Enable self-service. By default, it is `false`.
         * 
         * @return builder
         * 
         */
        public Builder accessibilitySelfService(Boolean accessibilitySelfService) {
            return accessibilitySelfService(Output.of(accessibilitySelfService));
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(@Nullable Output<String> adminNote) {
            $.adminNote = adminNote;
            return this;
        }

        /**
         * @param adminNote Application notes for admins.
         * 
         * @return builder
         * 
         */
        public Builder adminNote(String adminNote) {
            return adminNote(Output.of(adminNote));
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(@Nullable Output<String> appLinksJson) {
            $.appLinksJson = appLinksJson;
            return this;
        }

        /**
         * @param appLinksJson Displays specific appLinks for the app. The value for each application link should be boolean.
         * 
         * @return builder
         * 
         */
        public Builder appLinksJson(String appLinksJson) {
            return appLinksJson(Output.of(appLinksJson));
        }

        /**
         * @param authUrl The URL of the authenticating site for this app.
         * 
         * @return builder
         * 
         */
        public Builder authUrl(Output<String> authUrl) {
            $.authUrl = authUrl;
            return this;
        }

        /**
         * @param authUrl The URL of the authenticating site for this app.
         * 
         * @return builder
         * 
         */
        public Builder authUrl(String authUrl) {
            return authUrl(Output.of(authUrl));
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar.
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(@Nullable Output<Boolean> autoSubmitToolbar) {
            $.autoSubmitToolbar = autoSubmitToolbar;
            return this;
        }

        /**
         * @param autoSubmitToolbar Display auto submit toolbar.
         * 
         * @return builder
         * 
         */
        public Builder autoSubmitToolbar(Boolean autoSubmitToolbar) {
            return autoSubmitToolbar(Output.of(autoSubmitToolbar));
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(@Nullable Output<String> enduserNote) {
            $.enduserNote = enduserNote;
            return this;
        }

        /**
         * @param enduserNote Application notes for end users.
         * 
         * @return builder
         * 
         */
        public Builder enduserNote(String enduserNote) {
            return enduserNote(Output.of(enduserNote));
        }

        /**
         * @param groups Groups associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups Groups associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups Groups associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.AppGroupAssignments` (or `okta.app.GroupAssignment`) resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of groups in this app resource is deprecated, please ensure you use the resource `okta_app_group_assignments` for this functionality. */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param hideIos Do not display application icon on mobile app.
         * 
         * @return builder
         * 
         */
        public Builder hideIos(@Nullable Output<Boolean> hideIos) {
            $.hideIos = hideIos;
            return this;
        }

        /**
         * @param hideIos Do not display application icon on mobile app.
         * 
         * @return builder
         * 
         */
        public Builder hideIos(Boolean hideIos) {
            return hideIos(Output.of(hideIos));
        }

        /**
         * @param hideWeb Do not display application icon to users.
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(@Nullable Output<Boolean> hideWeb) {
            $.hideWeb = hideWeb;
            return this;
        }

        /**
         * @param hideWeb Do not display application icon to users.
         * 
         * @return builder
         * 
         */
        public Builder hideWeb(Boolean hideWeb) {
            return hideWeb(Output.of(hideWeb));
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The Application&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param logo Local path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo Local path to the logo. The file must be in PNG, JPG, or GIF format, and less than 1 MB in size.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param skipGroups Indicator that allows the app to skip `groups` sync (it&#39;s also can be provided during import). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(@Nullable Output<Boolean> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipGroups Indicator that allows the app to skip `groups` sync (it&#39;s also can be provided during import). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(Boolean skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @param skipUsers Indicator that allows the app to skip `users` sync (it&#39;s also can be provided during import). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(@Nullable Output<Boolean> skipUsers) {
            $.skipUsers = skipUsers;
            return this;
        }

        /**
         * @param skipUsers Indicator that allows the app to skip `users` sync (it&#39;s also can be provided during import). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipUsers(Boolean skipUsers) {
            return skipUsers(Output.of(skipUsers));
        }

        /**
         * @param status Status of application. (`&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of application. (`&#34;ACTIVE&#34;` or `&#34;INACTIVE&#34;`).
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url The URL of the sign-in page for this app.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the sign-in page for this app.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param users Users associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(@Nullable Output<List<BasicAuthUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users Users associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(List<BasicAuthUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users Users associated with the application.
         * - `DEPRECATED`: Please replace usage with the `okta.app.User` resource.
         * 
         * @return builder
         * 
         * @deprecated
         * The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality.
         * 
         */
        @Deprecated /* The direct configuration of users in this app resource is deprecated, please ensure you use the resource `okta_app_user` for this functionality. */
        public Builder users(BasicAuthUserArgs... users) {
            return users(List.of(users));
        }

        public BasicAuthArgs build() {
            $.authUrl = Objects.requireNonNull($.authUrl, "expected parameter 'authUrl' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
