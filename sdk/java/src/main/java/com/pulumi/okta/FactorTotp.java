// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.FactorTotpArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.FactorTotpState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows you to manage the time-based one-time password (TOTP) factors. A time-based one-time password (TOTP) is a
 * temporary passcode that is generated for user authentication. Examples of TOTP include hardware authenticators and
 * mobile app authenticators.
 * 
 * Once saved, the settings cannot be changed (except for the `name` field). Any other change would force resource
 * recreation.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.FactorTotp;
 * import com.pulumi.okta.FactorTotpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new FactorTotp(&#34;example&#34;, FactorTotpArgs.builder()        
 *             .clockDriftInterval(10)
 *             .hmacAlgorithm(&#34;HMacSHA256&#34;)
 *             .otpLength(10)
 *             .sharedSecretEncoding(&#34;hexadecimal&#34;)
 *             .timeStep(30)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="okta:index/factorTotp:FactorTotp")
public class FactorTotp extends com.pulumi.resources.CustomResource {
    /**
     * Clock drift interval. This setting allows you to build in tolerance for any
     * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
     * 
     */
    @Export(name="clockDriftInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> clockDriftInterval;

    /**
     * @return Clock drift interval. This setting allows you to build in tolerance for any
     * drift between the token&#39;s current time and the server&#39;s current time. Valid values: `3`, `5`, `10`. Default is `3`.
     * 
     */
    public Output<Optional<Integer>> clockDriftInterval() {
        return Codegen.optional(this.clockDriftInterval);
    }
    /**
     * HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
     * is `&#34;HMacSHA512&#34;`.
     * 
     */
    @Export(name="hmacAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hmacAlgorithm;

    /**
     * @return HMAC Algorithm. Valid values: `&#34;HMacSHA1&#34;`, `&#34;HMacSHA256&#34;`, `&#34;HMacSHA512&#34;`. Default
     * is `&#34;HMacSHA512&#34;`.
     * 
     */
    public Output<Optional<String>> hmacAlgorithm() {
        return Codegen.optional(this.hmacAlgorithm);
    }
    /**
     * The TOTP name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The TOTP name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Length of the password. Default is `6`.
     * 
     */
    @Export(name="otpLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> otpLength;

    /**
     * @return Length of the password. Default is `6`.
     * 
     */
    public Output<Optional<Integer>> otpLength() {
        return Codegen.optional(this.otpLength);
    }
    /**
     * Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
     * Default is `&#34;base32&#34;`.
     * 
     */
    @Export(name="sharedSecretEncoding", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sharedSecretEncoding;

    /**
     * @return Shared secret encoding. Valid values: `&#34;base32&#34;`, `&#34;base64&#34;`, `&#34;hexadecimal&#34;`.
     * Default is `&#34;base32&#34;`.
     * 
     */
    public Output<Optional<String>> sharedSecretEncoding() {
        return Codegen.optional(this.sharedSecretEncoding);
    }
    /**
     * Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
     * 
     */
    @Export(name="timeStep", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeStep;

    /**
     * @return Time step in seconds. Valid values: `15`, `30`, `60`. Default is `15`.
     * 
     */
    public Output<Optional<Integer>> timeStep() {
        return Codegen.optional(this.timeStep);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FactorTotp(String name) {
        this(name, FactorTotpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FactorTotp(String name, @Nullable FactorTotpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FactorTotp(String name, @Nullable FactorTotpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/factorTotp:FactorTotp", name, args == null ? FactorTotpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FactorTotp(String name, Output<String> id, @Nullable FactorTotpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/factorTotp:FactorTotp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FactorTotp get(String name, Output<String> id, @Nullable FactorTotpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FactorTotp(name, id, state, options);
    }
}
