// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.app;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * App to associate user with.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return App to associate user with.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The password to use.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to use.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The JSON profile of the App User.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return The JSON profile of the App User.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Retain the user association on destroy. If set to true, the resource will be removed from state but not from the Okta app.
     * 
     */
    @Import(name="retainAssignment")
    private @Nullable Output<Boolean> retainAssignment;

    /**
     * @return Retain the user association on destroy. If set to true, the resource will be removed from state but not from the Okta app.
     * 
     */
    public Optional<Output<Boolean>> retainAssignment() {
        return Optional.ofNullable(this.retainAssignment);
    }

    /**
     * User to associate the application with.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return User to associate the application with.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     * The username to use for the app user. In case the user is assigned to the app with
     * &#39;SHARED_USERNAME_AND_PASSWORD&#39; credentials scheme, this field will be computed and should not be set.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to use for the app user. In case the user is assigned to the app with
     * &#39;SHARED_USERNAME_AND_PASSWORD&#39; credentials scheme, this field will be computed and should not be set.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.appId = $.appId;
        this.password = $.password;
        this.profile = $.profile;
        this.retainAssignment = $.retainAssignment;
        this.userId = $.userId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId App to associate user with.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId App to associate user with.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param password The password to use.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to use.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param profile The JSON profile of the App User.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile The JSON profile of the App User.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param retainAssignment Retain the user association on destroy. If set to true, the resource will be removed from state but not from the Okta app.
         * 
         * @return builder
         * 
         */
        public Builder retainAssignment(@Nullable Output<Boolean> retainAssignment) {
            $.retainAssignment = retainAssignment;
            return this;
        }

        /**
         * @param retainAssignment Retain the user association on destroy. If set to true, the resource will be removed from state but not from the Okta app.
         * 
         * @return builder
         * 
         */
        public Builder retainAssignment(Boolean retainAssignment) {
            return retainAssignment(Output.of(retainAssignment));
        }

        /**
         * @param userId User to associate the application with.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User to associate the application with.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param username The username to use for the app user. In case the user is assigned to the app with
         * &#39;SHARED_USERNAME_AND_PASSWORD&#39; credentials scheme, this field will be computed and should not be set.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use for the app user. In case the user is assigned to the app with
         * &#39;SHARED_USERNAME_AND_PASSWORD&#39; credentials scheme, this field will be computed and should not be set.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public UserArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("UserArgs", "appId");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserArgs", "userId");
            }
            return $;
        }
    }

}
