// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSamlResult {
    /**
     * @return ACS binding
     * 
     */
    private String acsBinding;
    /**
     * @return Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
     * 
     */
    private String acsType;
    /**
     * @return URI that identifies the target Okta IdP instance (SP)
     * 
     */
    private String audience;
    /**
     * @return Id of idp.
     * 
     */
    private @Nullable String id;
    /**
     * @return URI that identifies the issuer (IdP).
     * 
     */
    private String issuer;
    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
     * 
     */
    private String issuerMode;
    /**
     * @return Key ID reference to the IdP&#39;s X.509 signature certificate.
     * 
     */
    private String kid;
    /**
     * @return Name of the idp.
     * 
     */
    private @Nullable String name;
    /**
     * @return Single sign-on binding.
     * 
     */
    private String ssoBinding;
    /**
     * @return SSO request binding, HTTP-POST or HTTP-REDIRECT.
     * 
     */
    private String ssoDestination;
    /**
     * @return Single sign-on url.
     * 
     */
    private String ssoUrl;
    /**
     * @return Regular expression pattern used to filter untrusted IdP usernames.
     * 
     */
    private String subjectFilter;
    /**
     * @return Expression to generate or transform a unique username for the IdP user.
     * 
     */
    private List<String> subjectFormats;
    /**
     * @return Type of idp.
     * 
     */
    private String type;

    private GetSamlResult() {}
    /**
     * @return ACS binding
     * 
     */
    public String acsBinding() {
        return this.acsBinding;
    }
    /**
     * @return Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
     * 
     */
    public String acsType() {
        return this.acsType;
    }
    /**
     * @return URI that identifies the target Okta IdP instance (SP)
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return Id of idp.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return URI that identifies the issuer (IdP).
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
     * 
     */
    public String issuerMode() {
        return this.issuerMode;
    }
    /**
     * @return Key ID reference to the IdP&#39;s X.509 signature certificate.
     * 
     */
    public String kid() {
        return this.kid;
    }
    /**
     * @return Name of the idp.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Single sign-on binding.
     * 
     */
    public String ssoBinding() {
        return this.ssoBinding;
    }
    /**
     * @return SSO request binding, HTTP-POST or HTTP-REDIRECT.
     * 
     */
    public String ssoDestination() {
        return this.ssoDestination;
    }
    /**
     * @return Single sign-on url.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return Regular expression pattern used to filter untrusted IdP usernames.
     * 
     */
    public String subjectFilter() {
        return this.subjectFilter;
    }
    /**
     * @return Expression to generate or transform a unique username for the IdP user.
     * 
     */
    public List<String> subjectFormats() {
        return this.subjectFormats;
    }
    /**
     * @return Type of idp.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSamlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acsBinding;
        private String acsType;
        private String audience;
        private @Nullable String id;
        private String issuer;
        private String issuerMode;
        private String kid;
        private @Nullable String name;
        private String ssoBinding;
        private String ssoDestination;
        private String ssoUrl;
        private String subjectFilter;
        private List<String> subjectFormats;
        private String type;
        public Builder() {}
        public Builder(GetSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsBinding = defaults.acsBinding;
    	      this.acsType = defaults.acsType;
    	      this.audience = defaults.audience;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.issuerMode = defaults.issuerMode;
    	      this.kid = defaults.kid;
    	      this.name = defaults.name;
    	      this.ssoBinding = defaults.ssoBinding;
    	      this.ssoDestination = defaults.ssoDestination;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.subjectFilter = defaults.subjectFilter;
    	      this.subjectFormats = defaults.subjectFormats;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder acsBinding(String acsBinding) {
            this.acsBinding = Objects.requireNonNull(acsBinding);
            return this;
        }
        @CustomType.Setter
        public Builder acsType(String acsType) {
            this.acsType = Objects.requireNonNull(acsType);
            return this;
        }
        @CustomType.Setter
        public Builder audience(String audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder issuerMode(String issuerMode) {
            this.issuerMode = Objects.requireNonNull(issuerMode);
            return this;
        }
        @CustomType.Setter
        public Builder kid(String kid) {
            this.kid = Objects.requireNonNull(kid);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ssoBinding(String ssoBinding) {
            this.ssoBinding = Objects.requireNonNull(ssoBinding);
            return this;
        }
        @CustomType.Setter
        public Builder ssoDestination(String ssoDestination) {
            this.ssoDestination = Objects.requireNonNull(ssoDestination);
            return this;
        }
        @CustomType.Setter
        public Builder ssoUrl(String ssoUrl) {
            this.ssoUrl = Objects.requireNonNull(ssoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder subjectFilter(String subjectFilter) {
            this.subjectFilter = Objects.requireNonNull(subjectFilter);
            return this;
        }
        @CustomType.Setter
        public Builder subjectFormats(List<String> subjectFormats) {
            this.subjectFormats = Objects.requireNonNull(subjectFormats);
            return this;
        }
        public Builder subjectFormats(String... subjectFormats) {
            return subjectFormats(List.of(subjectFormats));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetSamlResult build() {
            final var o = new GetSamlResult();
            o.acsBinding = acsBinding;
            o.acsType = acsType;
            o.audience = audience;
            o.id = id;
            o.issuer = issuer;
            o.issuerMode = issuerMode;
            o.kid = kid;
            o.name = name;
            o.ssoBinding = ssoBinding;
            o.ssoDestination = ssoDestination;
            o.ssoUrl = ssoUrl;
            o.subjectFilter = subjectFilter;
            o.subjectFormats = subjectFormats;
            o.type = type;
            return o;
        }
    }
}
