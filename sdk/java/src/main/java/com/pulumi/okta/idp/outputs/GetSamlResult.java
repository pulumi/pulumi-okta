// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta.idp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSamlResult {
    /**
     * @return HTTP binding used to receive a SAMLResponse message from the IdP (always equals to `&#34;HTTP-POST&#34;`).
     * 
     */
    private final String acsBinding;
    /**
     * @return Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
     * 
     */
    private final String acsType;
    /**
     * @return URI that identifies the target Okta IdP instance (SP)
     * 
     */
    private final String audience;
    /**
     * @return id of idp.
     * 
     */
    private final @Nullable String id;
    /**
     * @return URI that identifies the issuer (IdP).
     * 
     */
    private final String issuer;
    /**
     * @return indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
     * 
     */
    private final String issuerMode;
    /**
     * @return Key ID reference to the IdP&#39;s X.509 signature certificate.
     * 
     */
    private final String kid;
    /**
     * @return name of the idp.
     * 
     */
    private final @Nullable String name;
    /**
     * @return single sign-on binding.
     * 
     */
    private final String ssoBinding;
    /**
     * @return SSO request binding, HTTP-POST or HTTP-REDIRECT.
     * 
     */
    private final String ssoDestination;
    /**
     * @return single sign-on url.
     * 
     */
    private final String ssoUrl;
    /**
     * @return regular expression pattern used to filter untrusted IdP usernames.
     * 
     */
    private final String subjectFilter;
    /**
     * @return Expression to generate or transform a unique username for the IdP user.
     * 
     */
    private final List<String> subjectFormats;
    /**
     * @return type of idp.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetSamlResult(
        @CustomType.Parameter("acsBinding") String acsBinding,
        @CustomType.Parameter("acsType") String acsType,
        @CustomType.Parameter("audience") String audience,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("issuer") String issuer,
        @CustomType.Parameter("issuerMode") String issuerMode,
        @CustomType.Parameter("kid") String kid,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("ssoBinding") String ssoBinding,
        @CustomType.Parameter("ssoDestination") String ssoDestination,
        @CustomType.Parameter("ssoUrl") String ssoUrl,
        @CustomType.Parameter("subjectFilter") String subjectFilter,
        @CustomType.Parameter("subjectFormats") List<String> subjectFormats,
        @CustomType.Parameter("type") String type) {
        this.acsBinding = acsBinding;
        this.acsType = acsType;
        this.audience = audience;
        this.id = id;
        this.issuer = issuer;
        this.issuerMode = issuerMode;
        this.kid = kid;
        this.name = name;
        this.ssoBinding = ssoBinding;
        this.ssoDestination = ssoDestination;
        this.ssoUrl = ssoUrl;
        this.subjectFilter = subjectFilter;
        this.subjectFormats = subjectFormats;
        this.type = type;
    }

    /**
     * @return HTTP binding used to receive a SAMLResponse message from the IdP (always equals to `&#34;HTTP-POST&#34;`).
     * 
     */
    public String acsBinding() {
        return this.acsBinding;
    }
    /**
     * @return Determines whether to publish an instance-specific (trust) or organization (shared) ACS endpoint in the SAML metadata.
     * 
     */
    public String acsType() {
        return this.acsType;
    }
    /**
     * @return URI that identifies the target Okta IdP instance (SP)
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return id of idp.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return URI that identifies the issuer (IdP).
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return indicates whether Okta uses the original Okta org domain URL, or a custom domain URL in the request to the IdP.
     * 
     */
    public String issuerMode() {
        return this.issuerMode;
    }
    /**
     * @return Key ID reference to the IdP&#39;s X.509 signature certificate.
     * 
     */
    public String kid() {
        return this.kid;
    }
    /**
     * @return name of the idp.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return single sign-on binding.
     * 
     */
    public String ssoBinding() {
        return this.ssoBinding;
    }
    /**
     * @return SSO request binding, HTTP-POST or HTTP-REDIRECT.
     * 
     */
    public String ssoDestination() {
        return this.ssoDestination;
    }
    /**
     * @return single sign-on url.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return regular expression pattern used to filter untrusted IdP usernames.
     * 
     */
    public String subjectFilter() {
        return this.subjectFilter;
    }
    /**
     * @return Expression to generate or transform a unique username for the IdP user.
     * 
     */
    public List<String> subjectFormats() {
        return this.subjectFormats;
    }
    /**
     * @return type of idp.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSamlResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acsBinding;
        private String acsType;
        private String audience;
        private @Nullable String id;
        private String issuer;
        private String issuerMode;
        private String kid;
        private @Nullable String name;
        private String ssoBinding;
        private String ssoDestination;
        private String ssoUrl;
        private String subjectFilter;
        private List<String> subjectFormats;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSamlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsBinding = defaults.acsBinding;
    	      this.acsType = defaults.acsType;
    	      this.audience = defaults.audience;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.issuerMode = defaults.issuerMode;
    	      this.kid = defaults.kid;
    	      this.name = defaults.name;
    	      this.ssoBinding = defaults.ssoBinding;
    	      this.ssoDestination = defaults.ssoDestination;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.subjectFilter = defaults.subjectFilter;
    	      this.subjectFormats = defaults.subjectFormats;
    	      this.type = defaults.type;
        }

        public Builder acsBinding(String acsBinding) {
            this.acsBinding = Objects.requireNonNull(acsBinding);
            return this;
        }
        public Builder acsType(String acsType) {
            this.acsType = Objects.requireNonNull(acsType);
            return this;
        }
        public Builder audience(String audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        public Builder issuerMode(String issuerMode) {
            this.issuerMode = Objects.requireNonNull(issuerMode);
            return this;
        }
        public Builder kid(String kid) {
            this.kid = Objects.requireNonNull(kid);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder ssoBinding(String ssoBinding) {
            this.ssoBinding = Objects.requireNonNull(ssoBinding);
            return this;
        }
        public Builder ssoDestination(String ssoDestination) {
            this.ssoDestination = Objects.requireNonNull(ssoDestination);
            return this;
        }
        public Builder ssoUrl(String ssoUrl) {
            this.ssoUrl = Objects.requireNonNull(ssoUrl);
            return this;
        }
        public Builder subjectFilter(String subjectFilter) {
            this.subjectFilter = Objects.requireNonNull(subjectFilter);
            return this;
        }
        public Builder subjectFormats(List<String> subjectFormats) {
            this.subjectFormats = Objects.requireNonNull(subjectFormats);
            return this;
        }
        public Builder subjectFormats(String... subjectFormats) {
            return subjectFormats(List.of(subjectFormats));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetSamlResult build() {
            return new GetSamlResult(acsBinding, acsType, audience, id, issuer, issuerMode, kid, name, ssoBinding, ssoDestination, ssoUrl, subjectFilter, subjectFormats, type);
        }
    }
}
