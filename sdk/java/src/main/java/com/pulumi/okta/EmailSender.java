// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.okta;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.okta.EmailSenderArgs;
import com.pulumi.okta.Utilities;
import com.pulumi.okta.inputs.EmailSenderState;
import com.pulumi.okta.outputs.EmailSenderDnsRecord;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * &gt; **DEPRECATED** use `okta.Index.EmailDomain` instead.
 * 
 * This resource allows you to create and configure a custom email sender.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.okta.EmailSender;
 * import com.pulumi.okta.EmailSenderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new EmailSender(&#34;example&#34;, EmailSenderArgs.builder()        
 *             .fromAddress(&#34;no-reply@caladan.planet&#34;)
 *             .fromName(&#34;Paul Atreides&#34;)
 *             .subdomain(&#34;mail&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Custom email sender can be imported via the Okta ID.
 * 
 * ```sh
 *  $ pulumi import okta:index/emailSender:EmailSender example &amp;#60;sender id&amp;#62;
 * ```
 * 
 */
@ResourceType(type="okta:index/emailSender:EmailSender")
public class EmailSender extends com.pulumi.resources.CustomResource {
    /**
     * TXT and CNAME records to be registered for the domain.
     * 
     */
    @Export(name="dnsRecords", refs={List.class,EmailSenderDnsRecord.class}, tree="[0,1]")
    private Output<List<EmailSenderDnsRecord>> dnsRecords;

    /**
     * @return TXT and CNAME records to be registered for the domain.
     * 
     */
    public Output<List<EmailSenderDnsRecord>> dnsRecords() {
        return this.dnsRecords;
    }
    /**
     * Email address to send from.
     * 
     */
    @Export(name="fromAddress", refs={String.class}, tree="[0]")
    private Output<String> fromAddress;

    /**
     * @return Email address to send from.
     * 
     */
    public Output<String> fromAddress() {
        return this.fromAddress;
    }
    /**
     * Name of sender.
     * 
     */
    @Export(name="fromName", refs={String.class}, tree="[0]")
    private Output<String> fromName;

    /**
     * @return Name of sender.
     * 
     */
    public Output<String> fromName() {
        return this.fromName;
    }
    /**
     * Status of the sender (shows whether the sender is verified).
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the sender (shows whether the sender is verified).
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Mail domain to send from.
     * 
     */
    @Export(name="subdomain", refs={String.class}, tree="[0]")
    private Output<String> subdomain;

    /**
     * @return Mail domain to send from.
     * 
     */
    public Output<String> subdomain() {
        return this.subdomain;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EmailSender(String name) {
        this(name, EmailSenderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EmailSender(String name, EmailSenderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EmailSender(String name, EmailSenderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/emailSender:EmailSender", name, args == null ? EmailSenderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EmailSender(String name, Output<String> id, @Nullable EmailSenderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("okta:index/emailSender:EmailSender", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EmailSender get(String name, Output<String> id, @Nullable EmailSenderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EmailSender(name, id, state, options);
    }
}
